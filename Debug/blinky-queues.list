
blinky-queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a458  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800a708  0800a708  0001a708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a8ec  0800a8ec  0001a8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a8f4  0800a8f4  0001a8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a8f8  0800a8f8  0001a8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800a8fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004c10  24000078  0800a974  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004c88  0800a974  00024c88  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031e1f  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004eb3  00000000  00000000  00051ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001918  00000000  00000000  00056d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001790  00000000  00000000  00058690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003345c  00000000  00000000  00059e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020fb8  00000000  00000000  0008d27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014a4dd  00000000  00000000  000ae234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001f8711  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c3c  00000000  00000000  001f8764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a6f0 	.word	0x0800a6f0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	0800a6f0 	.word	0x0800a6f0

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandsToBlink */
  CommandsToBlinkHandle = osMessageQueueNew (16, sizeof(uint16_t), &CommandsToBlink_attributes);
 80005ec:	4a1c      	ldr	r2, [pc, #112]	; (8000660 <MX_FREERTOS_Init+0x78>)
 80005ee:	2102      	movs	r1, #2
 80005f0:	2010      	movs	r0, #16
 80005f2:	f007 f910 	bl	8007816 <osMessageQueueNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a1a      	ldr	r2, [pc, #104]	; (8000664 <MX_FREERTOS_Init+0x7c>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of times_blinked */
  times_blinkedHandle = osMessageQueueNew (16, sizeof(uint16_t), &times_blinked_attributes);
 80005fc:	4a1a      	ldr	r2, [pc, #104]	; (8000668 <MX_FREERTOS_Init+0x80>)
 80005fe:	2102      	movs	r1, #2
 8000600:	2010      	movs	r0, #16
 8000602:	f007 f908 	bl	8007816 <osMessageQueueNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a18      	ldr	r2, [pc, #96]	; (800066c <MX_FREERTOS_Init+0x84>)
 800060a:	6013      	str	r3, [r2, #0]

  /* creation of rawCommands */
  rawCommandsHandle = osMessageQueueNew (16, sizeof(char), &rawCommands_attributes);
 800060c:	4a18      	ldr	r2, [pc, #96]	; (8000670 <MX_FREERTOS_Init+0x88>)
 800060e:	2101      	movs	r1, #1
 8000610:	2010      	movs	r0, #16
 8000612:	f007 f900 	bl	8007816 <osMessageQueueNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a16      	ldr	r2, [pc, #88]	; (8000674 <MX_FREERTOS_Init+0x8c>)
 800061a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CommandLine */
  CommandLineHandle = osThreadNew(StartCommandLine, NULL, &CommandLine_attributes);
 800061c:	4a16      	ldr	r2, [pc, #88]	; (8000678 <MX_FREERTOS_Init+0x90>)
 800061e:	2100      	movs	r1, #0
 8000620:	4816      	ldr	r0, [pc, #88]	; (800067c <MX_FREERTOS_Init+0x94>)
 8000622:	f007 f84b 	bl	80076bc <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a15      	ldr	r2, [pc, #84]	; (8000680 <MX_FREERTOS_Init+0x98>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker1 */
  Blinker1Handle = osThreadNew(StartBlinker1, NULL, &Blinker1_attributes);
 800062c:	4a15      	ldr	r2, [pc, #84]	; (8000684 <MX_FREERTOS_Init+0x9c>)
 800062e:	2100      	movs	r1, #0
 8000630:	4815      	ldr	r0, [pc, #84]	; (8000688 <MX_FREERTOS_Init+0xa0>)
 8000632:	f007 f843 	bl	80076bc <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <MX_FREERTOS_Init+0xa4>)
 800063a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker2 */
  Blinker2Handle = osThreadNew(StartBlinker2, NULL, &Blinker2_attributes);
 800063c:	4a14      	ldr	r2, [pc, #80]	; (8000690 <MX_FREERTOS_Init+0xa8>)
 800063e:	2100      	movs	r1, #0
 8000640:	4814      	ldr	r0, [pc, #80]	; (8000694 <MX_FREERTOS_Init+0xac>)
 8000642:	f007 f83b 	bl	80076bc <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <MX_FREERTOS_Init+0xb0>)
 800064a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker3 */
  Blinker3Handle = osThreadNew(StartBlinker3, NULL, &Blinker3_attributes);
 800064c:	4a13      	ldr	r2, [pc, #76]	; (800069c <MX_FREERTOS_Init+0xb4>)
 800064e:	2100      	movs	r1, #0
 8000650:	4813      	ldr	r0, [pc, #76]	; (80006a0 <MX_FREERTOS_Init+0xb8>)
 8000652:	f007 f833 	bl	80076bc <osThreadNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <MX_FREERTOS_Init+0xbc>)
 800065a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	0800a80c 	.word	0x0800a80c
 8000664:	24004b50 	.word	0x24004b50
 8000668:	0800a824 	.word	0x0800a824
 800066c:	24004b58 	.word	0x24004b58
 8000670:	0800a83c 	.word	0x0800a83c
 8000674:	24004b54 	.word	0x24004b54
 8000678:	0800a77c 	.word	0x0800a77c
 800067c:	080006a9 	.word	0x080006a9
 8000680:	24004ae0 	.word	0x24004ae0
 8000684:	0800a7a0 	.word	0x0800a7a0
 8000688:	080006fd 	.word	0x080006fd
 800068c:	24004adc 	.word	0x24004adc
 8000690:	0800a7c4 	.word	0x0800a7c4
 8000694:	08000771 	.word	0x08000771
 8000698:	24004b48 	.word	0x24004b48
 800069c:	0800a7e8 	.word	0x0800a7e8
 80006a0:	08000781 	.word	0x08000781
 80006a4:	24004b4c 	.word	0x24004b4c

080006a8 <StartCommandLine>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommandLine */
void StartCommandLine(void *argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandLine */
	uint8_t local_index = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	77fb      	strb	r3, [r7, #31]
	char* delay_ptr = NULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
	uint16_t delay_len = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	82fb      	strh	r3, [r7, #22]
	uint16_t total_blinks = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	82bb      	strh	r3, [r7, #20]
	osStatus_t status;
	char new_char;
	/* Infinite loop */
	for(;;)
	{
		status = osMessageQueueGet(rawCommandsHandle, &new_char, NULL, 0);
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <StartCommandLine+0x4c>)
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	f107 010f 	add.w	r1, r7, #15
 80006c8:	2300      	movs	r3, #0
 80006ca:	2200      	movs	r2, #0
 80006cc:	f007 f976 	bl	80079bc <osMessageQueueGet>
 80006d0:	6138      	str	r0, [r7, #16]
		if(status == osOK)
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1f3      	bne.n	80006c0 <StartCommandLine+0x18>
		{
			rx_buffer[local_index] = new_char;
 80006d8:	7ffb      	ldrb	r3, [r7, #31]
 80006da:	7bf9      	ldrb	r1, [r7, #15]
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <StartCommandLine+0x50>)
 80006de:	54d1      	strb	r1, [r2, r3]
			local_index++;
 80006e0:	7ffb      	ldrb	r3, [r7, #31]
 80006e2:	3301      	adds	r3, #1
 80006e4:	77fb      	strb	r3, [r7, #31]
			if(local_index == RX_BUFFER_LENGTH )
 80006e6:	7ffb      	ldrb	r3, [r7, #31]
 80006e8:	2b64      	cmp	r3, #100	; 0x64
 80006ea:	d1e9      	bne.n	80006c0 <StartCommandLine+0x18>
			{
				local_index = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	77fb      	strb	r3, [r7, #31]
		status = osMessageQueueGet(rawCommandsHandle, &new_char, NULL, 0);
 80006f0:	e7e6      	b.n	80006c0 <StartCommandLine+0x18>
 80006f2:	bf00      	nop
 80006f4:	24004b54 	.word	0x24004b54
 80006f8:	24004ae4 	.word	0x24004ae4

080006fc <StartBlinker1>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker1 */
void StartBlinker1(void *argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker1 */
	uint16_t blink_rate = 1000;
 8000704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000708:	81fb      	strh	r3, [r7, #14]
	uint16_t blinks = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	81bb      	strh	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{

		osMessageQueueGet(CommandsToBlinkHandle,&blink_rate , NULL, 0);
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <StartBlinker1+0x64>)
 8000710:	6818      	ldr	r0, [r3, #0]
 8000712:	f107 010e 	add.w	r1, r7, #14
 8000716:	2300      	movs	r3, #0
 8000718:	2200      	movs	r2, #0
 800071a:	f007 f94f 	bl	80079bc <osMessageQueueGet>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800071e:	2101      	movs	r1, #1
 8000720:	4810      	ldr	r0, [pc, #64]	; (8000764 <StartBlinker1+0x68>)
 8000722:	f001 fc90 	bl	8002046 <HAL_GPIO_TogglePin>
		blinks++;
 8000726:	89bb      	ldrh	r3, [r7, #12]
 8000728:	3301      	adds	r3, #1
 800072a:	b29b      	uxth	r3, r3
 800072c:	81bb      	strh	r3, [r7, #12]
		if (blinks%100 == 0) {
 800072e:	89bb      	ldrh	r3, [r7, #12]
 8000730:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <StartBlinker1+0x6c>)
 8000732:	fba2 1203 	umull	r1, r2, r2, r3
 8000736:	0952      	lsrs	r2, r2, #5
 8000738:	2164      	movs	r1, #100	; 0x64
 800073a:	fb01 f202 	mul.w	r2, r1, r2
 800073e:	1a9b      	subs	r3, r3, r2
 8000740:	b29b      	uxth	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d107      	bne.n	8000756 <StartBlinker1+0x5a>
			osMessageQueuePut(times_blinkedHandle, &blinks , NULL, 0);
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <StartBlinker1+0x70>)
 8000748:	6818      	ldr	r0, [r3, #0]
 800074a:	f107 010c 	add.w	r1, r7, #12
 800074e:	2300      	movs	r3, #0
 8000750:	2200      	movs	r2, #0
 8000752:	f007 f8d3 	bl	80078fc <osMessageQueuePut>
		}
		osDelay(blink_rate);
 8000756:	89fb      	ldrh	r3, [r7, #14]
 8000758:	4618      	mov	r0, r3
 800075a:	f007 f841 	bl	80077e0 <osDelay>
		osMessageQueueGet(CommandsToBlinkHandle,&blink_rate , NULL, 0);
 800075e:	e7d6      	b.n	800070e <StartBlinker1+0x12>
 8000760:	24004b50 	.word	0x24004b50
 8000764:	58020400 	.word	0x58020400
 8000768:	51eb851f 	.word	0x51eb851f
 800076c:	24004b58 	.word	0x24004b58

08000770 <StartBlinker2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker2 */
void StartBlinker2(void *argument)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker2 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f007 f831 	bl	80077e0 <osDelay>
 800077e:	e7fb      	b.n	8000778 <StartBlinker2+0x8>

08000780 <StartBlinker3>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker3 */
void StartBlinker3(void *argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker3 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000788:	2001      	movs	r0, #1
 800078a:	f007 f829 	bl	80077e0 <osDelay>
 800078e:	e7fb      	b.n	8000788 <StartBlinker3+0x8>

08000790 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08e      	sub	sp, #56	; 0x38
 8000794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b80      	ldr	r3, [pc, #512]	; (80009a8 <MX_GPIO_Init+0x218>)
 80007a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ac:	4a7e      	ldr	r2, [pc, #504]	; (80009a8 <MX_GPIO_Init+0x218>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007b6:	4b7c      	ldr	r3, [pc, #496]	; (80009a8 <MX_GPIO_Init+0x218>)
 80007b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	623b      	str	r3, [r7, #32]
 80007c2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007c4:	4b78      	ldr	r3, [pc, #480]	; (80009a8 <MX_GPIO_Init+0x218>)
 80007c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ca:	4a77      	ldr	r2, [pc, #476]	; (80009a8 <MX_GPIO_Init+0x218>)
 80007cc:	f043 0320 	orr.w	r3, r3, #32
 80007d0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007d4:	4b74      	ldr	r3, [pc, #464]	; (80009a8 <MX_GPIO_Init+0x218>)
 80007d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007da:	f003 0320 	and.w	r3, r3, #32
 80007de:	61fb      	str	r3, [r7, #28]
 80007e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	4b71      	ldr	r3, [pc, #452]	; (80009a8 <MX_GPIO_Init+0x218>)
 80007e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e8:	4a6f      	ldr	r2, [pc, #444]	; (80009a8 <MX_GPIO_Init+0x218>)
 80007ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007f2:	4b6d      	ldr	r3, [pc, #436]	; (80009a8 <MX_GPIO_Init+0x218>)
 80007f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fc:	61bb      	str	r3, [r7, #24]
 80007fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000800:	4b69      	ldr	r3, [pc, #420]	; (80009a8 <MX_GPIO_Init+0x218>)
 8000802:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000806:	4a68      	ldr	r2, [pc, #416]	; (80009a8 <MX_GPIO_Init+0x218>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000810:	4b65      	ldr	r3, [pc, #404]	; (80009a8 <MX_GPIO_Init+0x218>)
 8000812:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081e:	4b62      	ldr	r3, [pc, #392]	; (80009a8 <MX_GPIO_Init+0x218>)
 8000820:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000824:	4a60      	ldr	r2, [pc, #384]	; (80009a8 <MX_GPIO_Init+0x218>)
 8000826:	f043 0308 	orr.w	r3, r3, #8
 800082a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800082e:	4b5e      	ldr	r3, [pc, #376]	; (80009a8 <MX_GPIO_Init+0x218>)
 8000830:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000834:	f003 0308 	and.w	r3, r3, #8
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800083c:	4b5a      	ldr	r3, [pc, #360]	; (80009a8 <MX_GPIO_Init+0x218>)
 800083e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000842:	4a59      	ldr	r2, [pc, #356]	; (80009a8 <MX_GPIO_Init+0x218>)
 8000844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000848:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800084c:	4b56      	ldr	r3, [pc, #344]	; (80009a8 <MX_GPIO_Init+0x218>)
 800084e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b53      	ldr	r3, [pc, #332]	; (80009a8 <MX_GPIO_Init+0x218>)
 800085c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000860:	4a51      	ldr	r2, [pc, #324]	; (80009a8 <MX_GPIO_Init+0x218>)
 8000862:	f043 0301 	orr.w	r3, r3, #1
 8000866:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800086a:	4b4f      	ldr	r3, [pc, #316]	; (80009a8 <MX_GPIO_Init+0x218>)
 800086c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000878:	4b4b      	ldr	r3, [pc, #300]	; (80009a8 <MX_GPIO_Init+0x218>)
 800087a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800087e:	4a4a      	ldr	r2, [pc, #296]	; (80009a8 <MX_GPIO_Init+0x218>)
 8000880:	f043 0310 	orr.w	r3, r3, #16
 8000884:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000888:	4b47      	ldr	r3, [pc, #284]	; (80009a8 <MX_GPIO_Init+0x218>)
 800088a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088e:	f003 0310 	and.w	r3, r3, #16
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089c:	4843      	ldr	r0, [pc, #268]	; (80009ac <MX_GPIO_Init+0x21c>)
 800089e:	f001 fbb9 	bl	8002014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f244 0101 	movw	r1, #16385	; 0x4001
 80008a8:	4841      	ldr	r0, [pc, #260]	; (80009b0 <MX_GPIO_Init+0x220>)
 80008aa:	f001 fbb3 	bl	8002014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2102      	movs	r1, #2
 80008b2:	4840      	ldr	r0, [pc, #256]	; (80009b4 <MX_GPIO_Init+0x224>)
 80008b4:	f001 fbae 	bl	8002014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ca:	4619      	mov	r1, r3
 80008cc:	483a      	ldr	r0, [pc, #232]	; (80009b8 <MX_GPIO_Init+0x228>)
 80008ce:	f001 f9f1 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80008d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e8:	4619      	mov	r1, r3
 80008ea:	4830      	ldr	r0, [pc, #192]	; (80009ac <MX_GPIO_Init+0x21c>)
 80008ec:	f001 f9e2 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80008f0:	f244 0301 	movw	r3, #16385	; 0x4001
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	4619      	mov	r1, r3
 8000908:	4829      	ldr	r0, [pc, #164]	; (80009b0 <MX_GPIO_Init+0x220>)
 800090a:	f001 f9d3 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800090e:	2380      	movs	r3, #128	; 0x80
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000912:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000920:	4619      	mov	r1, r3
 8000922:	4826      	ldr	r0, [pc, #152]	; (80009bc <MX_GPIO_Init+0x22c>)
 8000924:	f001 f9c6 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093a:	4619      	mov	r1, r3
 800093c:	4820      	ldr	r0, [pc, #128]	; (80009c0 <MX_GPIO_Init+0x230>)
 800093e:	f001 f9b9 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000954:	230a      	movs	r3, #10
 8000956:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095c:	4619      	mov	r1, r3
 800095e:	4818      	ldr	r0, [pc, #96]	; (80009c0 <MX_GPIO_Init+0x230>)
 8000960:	f001 f9a8 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000964:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097a:	4619      	mov	r1, r3
 800097c:	4810      	ldr	r0, [pc, #64]	; (80009c0 <MX_GPIO_Init+0x230>)
 800097e:	f001 f999 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000982:	2302      	movs	r3, #2
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	4806      	ldr	r0, [pc, #24]	; (80009b4 <MX_GPIO_Init+0x224>)
 800099a:	f001 f98b 	bl	8001cb4 <HAL_GPIO_Init>

}
 800099e:	bf00      	nop
 80009a0:	3738      	adds	r7, #56	; 0x38
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	58024400 	.word	0x58024400
 80009ac:	58021400 	.word	0x58021400
 80009b0:	58020400 	.word	0x58020400
 80009b4:	58021000 	.word	0x58021000
 80009b8:	58020800 	.word	0x58020800
 80009bc:	58021800 	.word	0x58021800
 80009c0:	58020000 	.word	0x58020000

080009c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c8:	f000 fad6 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009cc:	f000 f816 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d0:	f7ff fede 	bl	8000790 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009d4:	f000 f9c4 	bl	8000d60 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80009d8:	f000 fa9c 	bl	8000f14 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT (&huart3, UART3_rxBuffer, 1);
 80009dc:	2201      	movs	r2, #1
 80009de:	4905      	ldr	r1, [pc, #20]	; (80009f4 <main+0x30>)
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <main+0x34>)
 80009e2:	f004 fa65 	bl	8004eb0 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80009e6:	f006 fe1f 	bl	8007628 <osKernelInitialize>
  MX_FREERTOS_Init();
 80009ea:	f7ff fdfd 	bl	80005e8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80009ee:	f006 fe3f 	bl	8007670 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <main+0x2e>
 80009f4:	24000094 	.word	0x24000094
 80009f8:	24004ba8 	.word	0x24004ba8

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b09c      	sub	sp, #112	; 0x70
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	224c      	movs	r2, #76	; 0x4c
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f009 fda2 	bl	800a554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2220      	movs	r2, #32
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f009 fd9c 	bl	800a554 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a1c:	2004      	movs	r0, #4
 8000a1e:	f001 fb2d 	bl	800207c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <SystemClock_Config+0xd8>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4a2a      	ldr	r2, [pc, #168]	; (8000ad4 <SystemClock_Config+0xd8>)
 8000a2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a30:	6193      	str	r3, [r2, #24]
 8000a32:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <SystemClock_Config+0xd8>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a3e:	bf00      	nop
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <SystemClock_Config+0xd8>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a4c:	d1f8      	bne.n	8000a40 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a4e:	2321      	movs	r3, #33	; 0x21
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a52:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a60:	2302      	movs	r3, #2
 8000a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a64:	2301      	movs	r3, #1
 8000a66:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a68:	2318      	movs	r3, #24
 8000a6a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a70:	2304      	movs	r3, #4
 8000a72:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a78:	230c      	movs	r3, #12
 8000a7a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 fb51 	bl	8002130 <HAL_RCC_OscConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a94:	f000 f832 	bl	8000afc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a98:	233f      	movs	r3, #63	; 0x3f
 8000a9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2102      	movs	r1, #2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f001 ff3b 	bl	8002938 <HAL_RCC_ClockConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000ac8:	f000 f818 	bl	8000afc <Error_Handler>
  }
}
 8000acc:	bf00      	nop
 8000ace:	3770      	adds	r7, #112	; 0x70
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	58024800 	.word	0x58024800

08000ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d101      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aea:	f000 fa81 	bl	8000ff0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40001400 	.word	0x40001400

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_MspInit+0x38>)
 8000b10:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b14:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <HAL_MspInit+0x38>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_MspInit+0x38>)
 8000b20:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	210f      	movs	r1, #15
 8000b30:	f06f 0001 	mvn.w	r0, #1
 8000b34:	f000 fb34 	bl	80011a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	58024400 	.word	0x58024400

08000b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b090      	sub	sp, #64	; 0x40
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b0f      	cmp	r3, #15
 8000b50:	d827      	bhi.n	8000ba2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000b52:	2200      	movs	r2, #0
 8000b54:	6879      	ldr	r1, [r7, #4]
 8000b56:	2037      	movs	r0, #55	; 0x37
 8000b58:	f000 fb22 	bl	80011a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b5c:	2037      	movs	r0, #55	; 0x37
 8000b5e:	f000 fb39 	bl	80011d4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000b62:	4a29      	ldr	r2, [pc, #164]	; (8000c08 <HAL_InitTick+0xc4>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000b68:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <HAL_InitTick+0xc8>)
 8000b6a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b6e:	4a27      	ldr	r2, [pc, #156]	; (8000c0c <HAL_InitTick+0xc8>)
 8000b70:	f043 0320 	orr.w	r3, r3, #32
 8000b74:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000b78:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <HAL_InitTick+0xc8>)
 8000b7a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b7e:	f003 0320 	and.w	r3, r3, #32
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b86:	f107 0210 	add.w	r2, r7, #16
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f002 fa5d 	bl	8003050 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b98:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d106      	bne.n	8000bae <HAL_InitTick+0x6a>
 8000ba0:	e001      	b.n	8000ba6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e02b      	b.n	8000bfe <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ba6:	f002 fa27 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 8000baa:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000bac:	e004      	b.n	8000bb8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bae:	f002 fa23 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bba:	4a15      	ldr	r2, [pc, #84]	; (8000c10 <HAL_InitTick+0xcc>)
 8000bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc0:	0c9b      	lsrs	r3, r3, #18
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <HAL_InitTick+0xd0>)
 8000bc8:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <HAL_InitTick+0xd4>)
 8000bca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_InitTick+0xd0>)
 8000bce:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bd2:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000bd4:	4a0f      	ldr	r2, [pc, #60]	; (8000c14 <HAL_InitTick+0xd0>)
 8000bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bd8:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_InitTick+0xd0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_InitTick+0xd0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000be6:	480b      	ldr	r0, [pc, #44]	; (8000c14 <HAL_InitTick+0xd0>)
 8000be8:	f003 fda2 	bl	8004730 <HAL_TIM_Base_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d104      	bne.n	8000bfc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000bf2:	4808      	ldr	r0, [pc, #32]	; (8000c14 <HAL_InitTick+0xd0>)
 8000bf4:	f003 fdfe 	bl	80047f4 <HAL_TIM_Base_Start_IT>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	e000      	b.n	8000bfe <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3740      	adds	r7, #64	; 0x40
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	24000008 	.word	0x24000008
 8000c0c:	58024400 	.word	0x58024400
 8000c10:	431bde83 	.word	0x431bde83
 8000c14:	24004b5c 	.word	0x24004b5c
 8000c18:	40001400 	.word	0x40001400

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <NMI_Handler+0x4>

08000c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <MemManage_Handler+0x4>

08000c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <USART3_IRQHandler+0x10>)
 8000c4e:	f004 f985 	bl	8004f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	24004ba8 	.word	0x24004ba8

08000c5c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <TIM7_IRQHandler+0x10>)
 8000c62:	f003 fe3f 	bl	80048e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	24004b5c 	.word	0x24004b5c

08000c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c74:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <SystemInit+0xd0>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7a:	4a31      	ldr	r2, [pc, #196]	; (8000d40 <SystemInit+0xd0>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c84:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <SystemInit+0xd4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 030f 	and.w	r3, r3, #15
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d807      	bhi.n	8000ca0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c90:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <SystemInit+0xd4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f023 030f 	bic.w	r3, r3, #15
 8000c98:	4a2a      	ldr	r2, [pc, #168]	; (8000d44 <SystemInit+0xd4>)
 8000c9a:	f043 0303 	orr.w	r3, r3, #3
 8000c9e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ca0:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <SystemInit+0xd8>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a28      	ldr	r2, [pc, #160]	; (8000d48 <SystemInit+0xd8>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cac:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <SystemInit+0xd8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <SystemInit+0xd8>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4924      	ldr	r1, [pc, #144]	; (8000d48 <SystemInit+0xd8>)
 8000cb8:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <SystemInit+0xdc>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cbe:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <SystemInit+0xd4>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d007      	beq.n	8000cda <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cca:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <SystemInit+0xd4>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f023 030f 	bic.w	r3, r3, #15
 8000cd2:	4a1c      	ldr	r2, [pc, #112]	; (8000d44 <SystemInit+0xd4>)
 8000cd4:	f043 0303 	orr.w	r3, r3, #3
 8000cd8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000cda:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <SystemInit+0xd8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <SystemInit+0xd8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <SystemInit+0xd8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <SystemInit+0xd8>)
 8000cee:	4a18      	ldr	r2, [pc, #96]	; (8000d50 <SystemInit+0xe0>)
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <SystemInit+0xd8>)
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <SystemInit+0xe4>)
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <SystemInit+0xd8>)
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <SystemInit+0xe8>)
 8000cfc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <SystemInit+0xd8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <SystemInit+0xd8>)
 8000d06:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <SystemInit+0xe8>)
 8000d08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <SystemInit+0xd8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <SystemInit+0xd8>)
 8000d12:	4a11      	ldr	r2, [pc, #68]	; (8000d58 <SystemInit+0xe8>)
 8000d14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <SystemInit+0xd8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <SystemInit+0xd8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <SystemInit+0xd8>)
 8000d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <SystemInit+0xd8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <SystemInit+0xec>)
 8000d30:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d34:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00
 8000d44:	52002000 	.word	0x52002000
 8000d48:	58024400 	.word	0x58024400
 8000d4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d50:	02020200 	.word	0x02020200
 8000d54:	01ff0000 	.word	0x01ff0000
 8000d58:	01010280 	.word	0x01010280
 8000d5c:	52004000 	.word	0x52004000

08000d60 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d66:	4a23      	ldr	r2, [pc, #140]	; (8000df4 <MX_USART3_UART_Init+0x94>)
 8000d68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d6a:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d72:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d78:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d86:	220c      	movs	r2, #12
 8000d88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8a:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000da8:	4811      	ldr	r0, [pc, #68]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000daa:	f003 ff9b 	bl	8004ce4 <HAL_UART_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000db4:	f7ff fea2 	bl	8000afc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db8:	2100      	movs	r1, #0
 8000dba:	480d      	ldr	r0, [pc, #52]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000dbc:	f006 fb25 	bl	800740a <HAL_UARTEx_SetTxFifoThreshold>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dc6:	f7ff fe99 	bl	8000afc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4808      	ldr	r0, [pc, #32]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000dce:	f006 fb5a 	bl	8007486 <HAL_UARTEx_SetRxFifoThreshold>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dd8:	f7ff fe90 	bl	8000afc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000dde:	f006 fadb 	bl	8007398 <HAL_UARTEx_DisableFifoMode>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000de8:	f7ff fe88 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	24004ba8 	.word	0x24004ba8
 8000df4:	40004800 	.word	0x40004800

08000df8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b0b8      	sub	sp, #224	; 0xe0
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	22b8      	movs	r2, #184	; 0xb8
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f009 fb9b 	bl	800a554 <memset>
  if(uartHandle->Instance==USART3)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a29      	ldr	r2, [pc, #164]	; (8000ec8 <HAL_UART_MspInit+0xd0>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d14a      	bne.n	8000ebe <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 f94c 	bl	80030d4 <HAL_RCCEx_PeriphCLKConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e42:	f7ff fe5b 	bl	8000afc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <HAL_UART_MspInit+0xd4>)
 8000e48:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e4c:	4a1f      	ldr	r2, [pc, #124]	; (8000ecc <HAL_UART_MspInit+0xd4>)
 8000e4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e52:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_UART_MspInit+0xd4>)
 8000e58:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_UART_MspInit+0xd4>)
 8000e66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e6a:	4a18      	ldr	r2, [pc, #96]	; (8000ecc <HAL_UART_MspInit+0xd4>)
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e74:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_UART_MspInit+0xd4>)
 8000e76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e9c:	2307      	movs	r3, #7
 8000e9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <HAL_UART_MspInit+0xd8>)
 8000eaa:	f000 ff03 	bl	8001cb4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2105      	movs	r1, #5
 8000eb2:	2027      	movs	r0, #39	; 0x27
 8000eb4:	f000 f974 	bl	80011a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000eb8:	2027      	movs	r0, #39	; 0x27
 8000eba:	f000 f98b 	bl	80011d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	37e0      	adds	r7, #224	; 0xe0
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40004800 	.word	0x40004800
 8000ecc:	58024400 	.word	0x58024400
 8000ed0:	58020c00 	.word	0x58020c00

08000ed4 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, UART3_rxBuffer, 1, 100);
 8000edc:	2364      	movs	r3, #100	; 0x64
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4909      	ldr	r1, [pc, #36]	; (8000f08 <HAL_UART_RxCpltCallback+0x34>)
 8000ee2:	480a      	ldr	r0, [pc, #40]	; (8000f0c <HAL_UART_RxCpltCallback+0x38>)
 8000ee4:	f003 ff4e 	bl	8004d84 <HAL_UART_Transmit>
    osMessageQueuePut(rawCommandsHandle, UART3_rxBuffer ,NULL , 0);
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_UART_RxCpltCallback+0x3c>)
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	2300      	movs	r3, #0
 8000eee:	2200      	movs	r2, #0
 8000ef0:	4905      	ldr	r1, [pc, #20]	; (8000f08 <HAL_UART_RxCpltCallback+0x34>)
 8000ef2:	f006 fd03 	bl	80078fc <osMessageQueuePut>
    HAL_UART_Receive_IT(&huart3, UART3_rxBuffer, 1);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4903      	ldr	r1, [pc, #12]	; (8000f08 <HAL_UART_RxCpltCallback+0x34>)
 8000efa:	4804      	ldr	r0, [pc, #16]	; (8000f0c <HAL_UART_RxCpltCallback+0x38>)
 8000efc:	f003 ffd8 	bl	8004eb0 <HAL_UART_Receive_IT>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	24000094 	.word	0x24000094
 8000f0c:	24004ba8 	.word	0x24004ba8
 8000f10:	24004b54 	.word	0x24004b54

08000f14 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f28:	f7ff fea2 	bl	8000c70 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f2e:	490d      	ldr	r1, [pc, #52]	; (8000f64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f44:	4c0a      	ldr	r4, [pc, #40]	; (8000f70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f52:	f009 facb 	bl	800a4ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f56:	f7ff fd35 	bl	80009c4 <main>
  bx  lr
 8000f5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f5c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000f60:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f64:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000f68:	0800a8fc 	.word	0x0800a8fc
  ldr r2, =_sbss
 8000f6c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000f70:	24004c88 	.word	0x24004c88

08000f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7e:	2003      	movs	r0, #3
 8000f80:	f000 f903 	bl	800118a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000f84:	f001 fe8e 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_Init+0x68>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	0a1b      	lsrs	r3, r3, #8
 8000f90:	f003 030f 	and.w	r3, r3, #15
 8000f94:	4913      	ldr	r1, [pc, #76]	; (8000fe4 <HAL_Init+0x6c>)
 8000f96:	5ccb      	ldrb	r3, [r1, r3]
 8000f98:	f003 031f 	and.w	r3, r3, #31
 8000f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <HAL_Init+0x68>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <HAL_Init+0x6c>)
 8000fac:	5cd3      	ldrb	r3, [r2, r3]
 8000fae:	f003 031f 	and.w	r3, r3, #31
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <HAL_Init+0x70>)
 8000fba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fbc:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <HAL_Init+0x74>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fc2:	200f      	movs	r0, #15
 8000fc4:	f7ff fdbe 	bl	8000b44 <HAL_InitTick>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e002      	b.n	8000fd8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd2:	f7ff fd99 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	58024400 	.word	0x58024400
 8000fe4:	0800a854 	.word	0x0800a854
 8000fe8:	24000004 	.word	0x24000004
 8000fec:	24000000 	.word	0x24000000

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	2400000c 	.word	0x2400000c
 8001014:	24004c38 	.word	0x24004c38

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	24004c38 	.word	0x24004c38

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <__NVIC_SetPriorityGrouping+0x40>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	4313      	orrs	r3, r2
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <__NVIC_SetPriorityGrouping+0x40>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00
 8001074:	05fa0000 	.word	0x05fa0000

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db0b      	blt.n	80010be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <__NVIC_EnableIRQ+0x38>)
 80010ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	; (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ff4c 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011ae:	f7ff ff63 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	68b9      	ldr	r1, [r7, #8]
 80011b8:	6978      	ldr	r0, [r7, #20]
 80011ba:	f7ff ffb3 	bl	8001124 <NVIC_EncodePriority>
 80011be:	4602      	mov	r2, r0
 80011c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff82 	bl	80010d0 <__NVIC_SetPriority>
}
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff56 	bl	8001094 <__NVIC_EnableIRQ>
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80011f8:	f7ff ff0e 	bl	8001018 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e2dc      	b.n	80017c2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d008      	beq.n	8001226 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e2cd      	b.n	80017c2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a76      	ldr	r2, [pc, #472]	; (8001404 <HAL_DMA_Abort+0x214>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d04a      	beq.n	80012c6 <HAL_DMA_Abort+0xd6>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a74      	ldr	r2, [pc, #464]	; (8001408 <HAL_DMA_Abort+0x218>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d045      	beq.n	80012c6 <HAL_DMA_Abort+0xd6>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a73      	ldr	r2, [pc, #460]	; (800140c <HAL_DMA_Abort+0x21c>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d040      	beq.n	80012c6 <HAL_DMA_Abort+0xd6>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a71      	ldr	r2, [pc, #452]	; (8001410 <HAL_DMA_Abort+0x220>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d03b      	beq.n	80012c6 <HAL_DMA_Abort+0xd6>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a70      	ldr	r2, [pc, #448]	; (8001414 <HAL_DMA_Abort+0x224>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d036      	beq.n	80012c6 <HAL_DMA_Abort+0xd6>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a6e      	ldr	r2, [pc, #440]	; (8001418 <HAL_DMA_Abort+0x228>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d031      	beq.n	80012c6 <HAL_DMA_Abort+0xd6>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a6d      	ldr	r2, [pc, #436]	; (800141c <HAL_DMA_Abort+0x22c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d02c      	beq.n	80012c6 <HAL_DMA_Abort+0xd6>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a6b      	ldr	r2, [pc, #428]	; (8001420 <HAL_DMA_Abort+0x230>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d027      	beq.n	80012c6 <HAL_DMA_Abort+0xd6>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a6a      	ldr	r2, [pc, #424]	; (8001424 <HAL_DMA_Abort+0x234>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d022      	beq.n	80012c6 <HAL_DMA_Abort+0xd6>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a68      	ldr	r2, [pc, #416]	; (8001428 <HAL_DMA_Abort+0x238>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d01d      	beq.n	80012c6 <HAL_DMA_Abort+0xd6>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a67      	ldr	r2, [pc, #412]	; (800142c <HAL_DMA_Abort+0x23c>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d018      	beq.n	80012c6 <HAL_DMA_Abort+0xd6>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a65      	ldr	r2, [pc, #404]	; (8001430 <HAL_DMA_Abort+0x240>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d013      	beq.n	80012c6 <HAL_DMA_Abort+0xd6>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a64      	ldr	r2, [pc, #400]	; (8001434 <HAL_DMA_Abort+0x244>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d00e      	beq.n	80012c6 <HAL_DMA_Abort+0xd6>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a62      	ldr	r2, [pc, #392]	; (8001438 <HAL_DMA_Abort+0x248>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d009      	beq.n	80012c6 <HAL_DMA_Abort+0xd6>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a61      	ldr	r2, [pc, #388]	; (800143c <HAL_DMA_Abort+0x24c>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d004      	beq.n	80012c6 <HAL_DMA_Abort+0xd6>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a5f      	ldr	r2, [pc, #380]	; (8001440 <HAL_DMA_Abort+0x250>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d101      	bne.n	80012ca <HAL_DMA_Abort+0xda>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_DMA_Abort+0xdc>
 80012ca:	2300      	movs	r3, #0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d013      	beq.n	80012f8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 021e 	bic.w	r2, r2, #30
 80012de:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	695a      	ldr	r2, [r3, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012ee:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	e00a      	b.n	800130e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 020e 	bic.w	r2, r2, #14
 8001306:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a3c      	ldr	r2, [pc, #240]	; (8001404 <HAL_DMA_Abort+0x214>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d072      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a3a      	ldr	r2, [pc, #232]	; (8001408 <HAL_DMA_Abort+0x218>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d06d      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a39      	ldr	r2, [pc, #228]	; (800140c <HAL_DMA_Abort+0x21c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d068      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a37      	ldr	r2, [pc, #220]	; (8001410 <HAL_DMA_Abort+0x220>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d063      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a36      	ldr	r2, [pc, #216]	; (8001414 <HAL_DMA_Abort+0x224>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d05e      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a34      	ldr	r2, [pc, #208]	; (8001418 <HAL_DMA_Abort+0x228>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d059      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a33      	ldr	r2, [pc, #204]	; (800141c <HAL_DMA_Abort+0x22c>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d054      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a31      	ldr	r2, [pc, #196]	; (8001420 <HAL_DMA_Abort+0x230>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d04f      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a30      	ldr	r2, [pc, #192]	; (8001424 <HAL_DMA_Abort+0x234>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d04a      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a2e      	ldr	r2, [pc, #184]	; (8001428 <HAL_DMA_Abort+0x238>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d045      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a2d      	ldr	r2, [pc, #180]	; (800142c <HAL_DMA_Abort+0x23c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d040      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a2b      	ldr	r2, [pc, #172]	; (8001430 <HAL_DMA_Abort+0x240>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d03b      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a2a      	ldr	r2, [pc, #168]	; (8001434 <HAL_DMA_Abort+0x244>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d036      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a28      	ldr	r2, [pc, #160]	; (8001438 <HAL_DMA_Abort+0x248>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d031      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a27      	ldr	r2, [pc, #156]	; (800143c <HAL_DMA_Abort+0x24c>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d02c      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a25      	ldr	r2, [pc, #148]	; (8001440 <HAL_DMA_Abort+0x250>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d027      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a24      	ldr	r2, [pc, #144]	; (8001444 <HAL_DMA_Abort+0x254>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d022      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a22      	ldr	r2, [pc, #136]	; (8001448 <HAL_DMA_Abort+0x258>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d01d      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a21      	ldr	r2, [pc, #132]	; (800144c <HAL_DMA_Abort+0x25c>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d018      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a1f      	ldr	r2, [pc, #124]	; (8001450 <HAL_DMA_Abort+0x260>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d013      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <HAL_DMA_Abort+0x264>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d00e      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a1c      	ldr	r2, [pc, #112]	; (8001458 <HAL_DMA_Abort+0x268>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d009      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a1b      	ldr	r2, [pc, #108]	; (800145c <HAL_DMA_Abort+0x26c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d004      	beq.n	80013fe <HAL_DMA_Abort+0x20e>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a19      	ldr	r2, [pc, #100]	; (8001460 <HAL_DMA_Abort+0x270>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d132      	bne.n	8001464 <HAL_DMA_Abort+0x274>
 80013fe:	2301      	movs	r3, #1
 8001400:	e031      	b.n	8001466 <HAL_DMA_Abort+0x276>
 8001402:	bf00      	nop
 8001404:	40020010 	.word	0x40020010
 8001408:	40020028 	.word	0x40020028
 800140c:	40020040 	.word	0x40020040
 8001410:	40020058 	.word	0x40020058
 8001414:	40020070 	.word	0x40020070
 8001418:	40020088 	.word	0x40020088
 800141c:	400200a0 	.word	0x400200a0
 8001420:	400200b8 	.word	0x400200b8
 8001424:	40020410 	.word	0x40020410
 8001428:	40020428 	.word	0x40020428
 800142c:	40020440 	.word	0x40020440
 8001430:	40020458 	.word	0x40020458
 8001434:	40020470 	.word	0x40020470
 8001438:	40020488 	.word	0x40020488
 800143c:	400204a0 	.word	0x400204a0
 8001440:	400204b8 	.word	0x400204b8
 8001444:	58025408 	.word	0x58025408
 8001448:	5802541c 	.word	0x5802541c
 800144c:	58025430 	.word	0x58025430
 8001450:	58025444 	.word	0x58025444
 8001454:	58025458 	.word	0x58025458
 8001458:	5802546c 	.word	0x5802546c
 800145c:	58025480 	.word	0x58025480
 8001460:	58025494 	.word	0x58025494
 8001464:	2300      	movs	r3, #0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d007      	beq.n	800147a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001478:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6d      	ldr	r2, [pc, #436]	; (8001634 <HAL_DMA_Abort+0x444>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d04a      	beq.n	800151a <HAL_DMA_Abort+0x32a>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a6b      	ldr	r2, [pc, #428]	; (8001638 <HAL_DMA_Abort+0x448>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d045      	beq.n	800151a <HAL_DMA_Abort+0x32a>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a6a      	ldr	r2, [pc, #424]	; (800163c <HAL_DMA_Abort+0x44c>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d040      	beq.n	800151a <HAL_DMA_Abort+0x32a>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a68      	ldr	r2, [pc, #416]	; (8001640 <HAL_DMA_Abort+0x450>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d03b      	beq.n	800151a <HAL_DMA_Abort+0x32a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a67      	ldr	r2, [pc, #412]	; (8001644 <HAL_DMA_Abort+0x454>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d036      	beq.n	800151a <HAL_DMA_Abort+0x32a>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a65      	ldr	r2, [pc, #404]	; (8001648 <HAL_DMA_Abort+0x458>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d031      	beq.n	800151a <HAL_DMA_Abort+0x32a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a64      	ldr	r2, [pc, #400]	; (800164c <HAL_DMA_Abort+0x45c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d02c      	beq.n	800151a <HAL_DMA_Abort+0x32a>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a62      	ldr	r2, [pc, #392]	; (8001650 <HAL_DMA_Abort+0x460>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d027      	beq.n	800151a <HAL_DMA_Abort+0x32a>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a61      	ldr	r2, [pc, #388]	; (8001654 <HAL_DMA_Abort+0x464>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d022      	beq.n	800151a <HAL_DMA_Abort+0x32a>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a5f      	ldr	r2, [pc, #380]	; (8001658 <HAL_DMA_Abort+0x468>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d01d      	beq.n	800151a <HAL_DMA_Abort+0x32a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a5e      	ldr	r2, [pc, #376]	; (800165c <HAL_DMA_Abort+0x46c>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d018      	beq.n	800151a <HAL_DMA_Abort+0x32a>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a5c      	ldr	r2, [pc, #368]	; (8001660 <HAL_DMA_Abort+0x470>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d013      	beq.n	800151a <HAL_DMA_Abort+0x32a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a5b      	ldr	r2, [pc, #364]	; (8001664 <HAL_DMA_Abort+0x474>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d00e      	beq.n	800151a <HAL_DMA_Abort+0x32a>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a59      	ldr	r2, [pc, #356]	; (8001668 <HAL_DMA_Abort+0x478>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d009      	beq.n	800151a <HAL_DMA_Abort+0x32a>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a58      	ldr	r2, [pc, #352]	; (800166c <HAL_DMA_Abort+0x47c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d004      	beq.n	800151a <HAL_DMA_Abort+0x32a>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a56      	ldr	r2, [pc, #344]	; (8001670 <HAL_DMA_Abort+0x480>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d108      	bne.n	800152c <HAL_DMA_Abort+0x33c>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0201 	bic.w	r2, r2, #1
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	e007      	b.n	800153c <HAL_DMA_Abort+0x34c>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0201 	bic.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800153c:	e013      	b.n	8001566 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800153e:	f7ff fd6b 	bl	8001018 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b05      	cmp	r3, #5
 800154a:	d90c      	bls.n	8001566 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2220      	movs	r2, #32
 8001550:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2203      	movs	r2, #3
 8001556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e12d      	b.n	80017c2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1e5      	bne.n	800153e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a2f      	ldr	r2, [pc, #188]	; (8001634 <HAL_DMA_Abort+0x444>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d04a      	beq.n	8001612 <HAL_DMA_Abort+0x422>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a2d      	ldr	r2, [pc, #180]	; (8001638 <HAL_DMA_Abort+0x448>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d045      	beq.n	8001612 <HAL_DMA_Abort+0x422>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a2c      	ldr	r2, [pc, #176]	; (800163c <HAL_DMA_Abort+0x44c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d040      	beq.n	8001612 <HAL_DMA_Abort+0x422>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a2a      	ldr	r2, [pc, #168]	; (8001640 <HAL_DMA_Abort+0x450>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d03b      	beq.n	8001612 <HAL_DMA_Abort+0x422>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a29      	ldr	r2, [pc, #164]	; (8001644 <HAL_DMA_Abort+0x454>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d036      	beq.n	8001612 <HAL_DMA_Abort+0x422>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a27      	ldr	r2, [pc, #156]	; (8001648 <HAL_DMA_Abort+0x458>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d031      	beq.n	8001612 <HAL_DMA_Abort+0x422>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a26      	ldr	r2, [pc, #152]	; (800164c <HAL_DMA_Abort+0x45c>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d02c      	beq.n	8001612 <HAL_DMA_Abort+0x422>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a24      	ldr	r2, [pc, #144]	; (8001650 <HAL_DMA_Abort+0x460>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d027      	beq.n	8001612 <HAL_DMA_Abort+0x422>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a23      	ldr	r2, [pc, #140]	; (8001654 <HAL_DMA_Abort+0x464>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d022      	beq.n	8001612 <HAL_DMA_Abort+0x422>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a21      	ldr	r2, [pc, #132]	; (8001658 <HAL_DMA_Abort+0x468>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d01d      	beq.n	8001612 <HAL_DMA_Abort+0x422>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a20      	ldr	r2, [pc, #128]	; (800165c <HAL_DMA_Abort+0x46c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d018      	beq.n	8001612 <HAL_DMA_Abort+0x422>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a1e      	ldr	r2, [pc, #120]	; (8001660 <HAL_DMA_Abort+0x470>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d013      	beq.n	8001612 <HAL_DMA_Abort+0x422>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <HAL_DMA_Abort+0x474>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d00e      	beq.n	8001612 <HAL_DMA_Abort+0x422>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a1b      	ldr	r2, [pc, #108]	; (8001668 <HAL_DMA_Abort+0x478>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d009      	beq.n	8001612 <HAL_DMA_Abort+0x422>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1a      	ldr	r2, [pc, #104]	; (800166c <HAL_DMA_Abort+0x47c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d004      	beq.n	8001612 <HAL_DMA_Abort+0x422>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a18      	ldr	r2, [pc, #96]	; (8001670 <HAL_DMA_Abort+0x480>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d101      	bne.n	8001616 <HAL_DMA_Abort+0x426>
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <HAL_DMA_Abort+0x428>
 8001616:	2300      	movs	r3, #0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d02b      	beq.n	8001674 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001620:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001626:	f003 031f 	and.w	r3, r3, #31
 800162a:	223f      	movs	r2, #63	; 0x3f
 800162c:	409a      	lsls	r2, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	e02a      	b.n	800168a <HAL_DMA_Abort+0x49a>
 8001634:	40020010 	.word	0x40020010
 8001638:	40020028 	.word	0x40020028
 800163c:	40020040 	.word	0x40020040
 8001640:	40020058 	.word	0x40020058
 8001644:	40020070 	.word	0x40020070
 8001648:	40020088 	.word	0x40020088
 800164c:	400200a0 	.word	0x400200a0
 8001650:	400200b8 	.word	0x400200b8
 8001654:	40020410 	.word	0x40020410
 8001658:	40020428 	.word	0x40020428
 800165c:	40020440 	.word	0x40020440
 8001660:	40020458 	.word	0x40020458
 8001664:	40020470 	.word	0x40020470
 8001668:	40020488 	.word	0x40020488
 800166c:	400204a0 	.word	0x400204a0
 8001670:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001678:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167e:	f003 031f 	and.w	r3, r3, #31
 8001682:	2201      	movs	r2, #1
 8001684:	409a      	lsls	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a4f      	ldr	r2, [pc, #316]	; (80017cc <HAL_DMA_Abort+0x5dc>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d072      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a4d      	ldr	r2, [pc, #308]	; (80017d0 <HAL_DMA_Abort+0x5e0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d06d      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a4c      	ldr	r2, [pc, #304]	; (80017d4 <HAL_DMA_Abort+0x5e4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d068      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a4a      	ldr	r2, [pc, #296]	; (80017d8 <HAL_DMA_Abort+0x5e8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d063      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a49      	ldr	r2, [pc, #292]	; (80017dc <HAL_DMA_Abort+0x5ec>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d05e      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a47      	ldr	r2, [pc, #284]	; (80017e0 <HAL_DMA_Abort+0x5f0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d059      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a46      	ldr	r2, [pc, #280]	; (80017e4 <HAL_DMA_Abort+0x5f4>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d054      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a44      	ldr	r2, [pc, #272]	; (80017e8 <HAL_DMA_Abort+0x5f8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d04f      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a43      	ldr	r2, [pc, #268]	; (80017ec <HAL_DMA_Abort+0x5fc>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d04a      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a41      	ldr	r2, [pc, #260]	; (80017f0 <HAL_DMA_Abort+0x600>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d045      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a40      	ldr	r2, [pc, #256]	; (80017f4 <HAL_DMA_Abort+0x604>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d040      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a3e      	ldr	r2, [pc, #248]	; (80017f8 <HAL_DMA_Abort+0x608>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d03b      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a3d      	ldr	r2, [pc, #244]	; (80017fc <HAL_DMA_Abort+0x60c>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d036      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a3b      	ldr	r2, [pc, #236]	; (8001800 <HAL_DMA_Abort+0x610>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d031      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a3a      	ldr	r2, [pc, #232]	; (8001804 <HAL_DMA_Abort+0x614>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d02c      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a38      	ldr	r2, [pc, #224]	; (8001808 <HAL_DMA_Abort+0x618>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d027      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a37      	ldr	r2, [pc, #220]	; (800180c <HAL_DMA_Abort+0x61c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d022      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a35      	ldr	r2, [pc, #212]	; (8001810 <HAL_DMA_Abort+0x620>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d01d      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a34      	ldr	r2, [pc, #208]	; (8001814 <HAL_DMA_Abort+0x624>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d018      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a32      	ldr	r2, [pc, #200]	; (8001818 <HAL_DMA_Abort+0x628>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d013      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a31      	ldr	r2, [pc, #196]	; (800181c <HAL_DMA_Abort+0x62c>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d00e      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a2f      	ldr	r2, [pc, #188]	; (8001820 <HAL_DMA_Abort+0x630>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d009      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a2e      	ldr	r2, [pc, #184]	; (8001824 <HAL_DMA_Abort+0x634>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d004      	beq.n	800177a <HAL_DMA_Abort+0x58a>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a2c      	ldr	r2, [pc, #176]	; (8001828 <HAL_DMA_Abort+0x638>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d101      	bne.n	800177e <HAL_DMA_Abort+0x58e>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_DMA_Abort+0x590>
 800177e:	2300      	movs	r3, #0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d015      	beq.n	80017b0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800178c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00c      	beq.n	80017b0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017a4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80017ae:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40020010 	.word	0x40020010
 80017d0:	40020028 	.word	0x40020028
 80017d4:	40020040 	.word	0x40020040
 80017d8:	40020058 	.word	0x40020058
 80017dc:	40020070 	.word	0x40020070
 80017e0:	40020088 	.word	0x40020088
 80017e4:	400200a0 	.word	0x400200a0
 80017e8:	400200b8 	.word	0x400200b8
 80017ec:	40020410 	.word	0x40020410
 80017f0:	40020428 	.word	0x40020428
 80017f4:	40020440 	.word	0x40020440
 80017f8:	40020458 	.word	0x40020458
 80017fc:	40020470 	.word	0x40020470
 8001800:	40020488 	.word	0x40020488
 8001804:	400204a0 	.word	0x400204a0
 8001808:	400204b8 	.word	0x400204b8
 800180c:	58025408 	.word	0x58025408
 8001810:	5802541c 	.word	0x5802541c
 8001814:	58025430 	.word	0x58025430
 8001818:	58025444 	.word	0x58025444
 800181c:	58025458 	.word	0x58025458
 8001820:	5802546c 	.word	0x5802546c
 8001824:	58025480 	.word	0x58025480
 8001828:	58025494 	.word	0x58025494

0800182c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e205      	b.n	8001c4a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d004      	beq.n	8001854 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e1fa      	b.n	8001c4a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a8c      	ldr	r2, [pc, #560]	; (8001a8c <HAL_DMA_Abort_IT+0x260>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d04a      	beq.n	80018f4 <HAL_DMA_Abort_IT+0xc8>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a8b      	ldr	r2, [pc, #556]	; (8001a90 <HAL_DMA_Abort_IT+0x264>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d045      	beq.n	80018f4 <HAL_DMA_Abort_IT+0xc8>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a89      	ldr	r2, [pc, #548]	; (8001a94 <HAL_DMA_Abort_IT+0x268>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d040      	beq.n	80018f4 <HAL_DMA_Abort_IT+0xc8>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a88      	ldr	r2, [pc, #544]	; (8001a98 <HAL_DMA_Abort_IT+0x26c>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d03b      	beq.n	80018f4 <HAL_DMA_Abort_IT+0xc8>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a86      	ldr	r2, [pc, #536]	; (8001a9c <HAL_DMA_Abort_IT+0x270>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d036      	beq.n	80018f4 <HAL_DMA_Abort_IT+0xc8>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a85      	ldr	r2, [pc, #532]	; (8001aa0 <HAL_DMA_Abort_IT+0x274>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d031      	beq.n	80018f4 <HAL_DMA_Abort_IT+0xc8>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a83      	ldr	r2, [pc, #524]	; (8001aa4 <HAL_DMA_Abort_IT+0x278>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d02c      	beq.n	80018f4 <HAL_DMA_Abort_IT+0xc8>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a82      	ldr	r2, [pc, #520]	; (8001aa8 <HAL_DMA_Abort_IT+0x27c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d027      	beq.n	80018f4 <HAL_DMA_Abort_IT+0xc8>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a80      	ldr	r2, [pc, #512]	; (8001aac <HAL_DMA_Abort_IT+0x280>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d022      	beq.n	80018f4 <HAL_DMA_Abort_IT+0xc8>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a7f      	ldr	r2, [pc, #508]	; (8001ab0 <HAL_DMA_Abort_IT+0x284>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d01d      	beq.n	80018f4 <HAL_DMA_Abort_IT+0xc8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a7d      	ldr	r2, [pc, #500]	; (8001ab4 <HAL_DMA_Abort_IT+0x288>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d018      	beq.n	80018f4 <HAL_DMA_Abort_IT+0xc8>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a7c      	ldr	r2, [pc, #496]	; (8001ab8 <HAL_DMA_Abort_IT+0x28c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d013      	beq.n	80018f4 <HAL_DMA_Abort_IT+0xc8>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a7a      	ldr	r2, [pc, #488]	; (8001abc <HAL_DMA_Abort_IT+0x290>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d00e      	beq.n	80018f4 <HAL_DMA_Abort_IT+0xc8>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a79      	ldr	r2, [pc, #484]	; (8001ac0 <HAL_DMA_Abort_IT+0x294>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d009      	beq.n	80018f4 <HAL_DMA_Abort_IT+0xc8>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a77      	ldr	r2, [pc, #476]	; (8001ac4 <HAL_DMA_Abort_IT+0x298>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d004      	beq.n	80018f4 <HAL_DMA_Abort_IT+0xc8>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a76      	ldr	r2, [pc, #472]	; (8001ac8 <HAL_DMA_Abort_IT+0x29c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d101      	bne.n	80018f8 <HAL_DMA_Abort_IT+0xcc>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <HAL_DMA_Abort_IT+0xce>
 80018f8:	2300      	movs	r3, #0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d065      	beq.n	80019ca <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2204      	movs	r2, #4
 8001902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a60      	ldr	r2, [pc, #384]	; (8001a8c <HAL_DMA_Abort_IT+0x260>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d04a      	beq.n	80019a6 <HAL_DMA_Abort_IT+0x17a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a5e      	ldr	r2, [pc, #376]	; (8001a90 <HAL_DMA_Abort_IT+0x264>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d045      	beq.n	80019a6 <HAL_DMA_Abort_IT+0x17a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a5d      	ldr	r2, [pc, #372]	; (8001a94 <HAL_DMA_Abort_IT+0x268>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d040      	beq.n	80019a6 <HAL_DMA_Abort_IT+0x17a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a5b      	ldr	r2, [pc, #364]	; (8001a98 <HAL_DMA_Abort_IT+0x26c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d03b      	beq.n	80019a6 <HAL_DMA_Abort_IT+0x17a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a5a      	ldr	r2, [pc, #360]	; (8001a9c <HAL_DMA_Abort_IT+0x270>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d036      	beq.n	80019a6 <HAL_DMA_Abort_IT+0x17a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a58      	ldr	r2, [pc, #352]	; (8001aa0 <HAL_DMA_Abort_IT+0x274>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d031      	beq.n	80019a6 <HAL_DMA_Abort_IT+0x17a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a57      	ldr	r2, [pc, #348]	; (8001aa4 <HAL_DMA_Abort_IT+0x278>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d02c      	beq.n	80019a6 <HAL_DMA_Abort_IT+0x17a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a55      	ldr	r2, [pc, #340]	; (8001aa8 <HAL_DMA_Abort_IT+0x27c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d027      	beq.n	80019a6 <HAL_DMA_Abort_IT+0x17a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a54      	ldr	r2, [pc, #336]	; (8001aac <HAL_DMA_Abort_IT+0x280>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d022      	beq.n	80019a6 <HAL_DMA_Abort_IT+0x17a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a52      	ldr	r2, [pc, #328]	; (8001ab0 <HAL_DMA_Abort_IT+0x284>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d01d      	beq.n	80019a6 <HAL_DMA_Abort_IT+0x17a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a51      	ldr	r2, [pc, #324]	; (8001ab4 <HAL_DMA_Abort_IT+0x288>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d018      	beq.n	80019a6 <HAL_DMA_Abort_IT+0x17a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a4f      	ldr	r2, [pc, #316]	; (8001ab8 <HAL_DMA_Abort_IT+0x28c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d013      	beq.n	80019a6 <HAL_DMA_Abort_IT+0x17a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a4e      	ldr	r2, [pc, #312]	; (8001abc <HAL_DMA_Abort_IT+0x290>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00e      	beq.n	80019a6 <HAL_DMA_Abort_IT+0x17a>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a4c      	ldr	r2, [pc, #304]	; (8001ac0 <HAL_DMA_Abort_IT+0x294>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d009      	beq.n	80019a6 <HAL_DMA_Abort_IT+0x17a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a4b      	ldr	r2, [pc, #300]	; (8001ac4 <HAL_DMA_Abort_IT+0x298>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d004      	beq.n	80019a6 <HAL_DMA_Abort_IT+0x17a>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a49      	ldr	r2, [pc, #292]	; (8001ac8 <HAL_DMA_Abort_IT+0x29c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d108      	bne.n	80019b8 <HAL_DMA_Abort_IT+0x18c>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0201 	bic.w	r2, r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	e147      	b.n	8001c48 <HAL_DMA_Abort_IT+0x41c>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e13e      	b.n	8001c48 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 020e 	bic.w	r2, r2, #14
 80019d8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a2b      	ldr	r2, [pc, #172]	; (8001a8c <HAL_DMA_Abort_IT+0x260>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d04a      	beq.n	8001a7a <HAL_DMA_Abort_IT+0x24e>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a29      	ldr	r2, [pc, #164]	; (8001a90 <HAL_DMA_Abort_IT+0x264>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d045      	beq.n	8001a7a <HAL_DMA_Abort_IT+0x24e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a28      	ldr	r2, [pc, #160]	; (8001a94 <HAL_DMA_Abort_IT+0x268>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d040      	beq.n	8001a7a <HAL_DMA_Abort_IT+0x24e>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a26      	ldr	r2, [pc, #152]	; (8001a98 <HAL_DMA_Abort_IT+0x26c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d03b      	beq.n	8001a7a <HAL_DMA_Abort_IT+0x24e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a25      	ldr	r2, [pc, #148]	; (8001a9c <HAL_DMA_Abort_IT+0x270>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d036      	beq.n	8001a7a <HAL_DMA_Abort_IT+0x24e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <HAL_DMA_Abort_IT+0x274>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d031      	beq.n	8001a7a <HAL_DMA_Abort_IT+0x24e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a22      	ldr	r2, [pc, #136]	; (8001aa4 <HAL_DMA_Abort_IT+0x278>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d02c      	beq.n	8001a7a <HAL_DMA_Abort_IT+0x24e>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a20      	ldr	r2, [pc, #128]	; (8001aa8 <HAL_DMA_Abort_IT+0x27c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d027      	beq.n	8001a7a <HAL_DMA_Abort_IT+0x24e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a1f      	ldr	r2, [pc, #124]	; (8001aac <HAL_DMA_Abort_IT+0x280>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d022      	beq.n	8001a7a <HAL_DMA_Abort_IT+0x24e>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <HAL_DMA_Abort_IT+0x284>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d01d      	beq.n	8001a7a <HAL_DMA_Abort_IT+0x24e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a1c      	ldr	r2, [pc, #112]	; (8001ab4 <HAL_DMA_Abort_IT+0x288>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d018      	beq.n	8001a7a <HAL_DMA_Abort_IT+0x24e>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1a      	ldr	r2, [pc, #104]	; (8001ab8 <HAL_DMA_Abort_IT+0x28c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_DMA_Abort_IT+0x24e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a19      	ldr	r2, [pc, #100]	; (8001abc <HAL_DMA_Abort_IT+0x290>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d00e      	beq.n	8001a7a <HAL_DMA_Abort_IT+0x24e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a17      	ldr	r2, [pc, #92]	; (8001ac0 <HAL_DMA_Abort_IT+0x294>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d009      	beq.n	8001a7a <HAL_DMA_Abort_IT+0x24e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a16      	ldr	r2, [pc, #88]	; (8001ac4 <HAL_DMA_Abort_IT+0x298>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d004      	beq.n	8001a7a <HAL_DMA_Abort_IT+0x24e>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <HAL_DMA_Abort_IT+0x29c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d128      	bne.n	8001acc <HAL_DMA_Abort_IT+0x2a0>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0201 	bic.w	r2, r2, #1
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	e027      	b.n	8001adc <HAL_DMA_Abort_IT+0x2b0>
 8001a8c:	40020010 	.word	0x40020010
 8001a90:	40020028 	.word	0x40020028
 8001a94:	40020040 	.word	0x40020040
 8001a98:	40020058 	.word	0x40020058
 8001a9c:	40020070 	.word	0x40020070
 8001aa0:	40020088 	.word	0x40020088
 8001aa4:	400200a0 	.word	0x400200a0
 8001aa8:	400200b8 	.word	0x400200b8
 8001aac:	40020410 	.word	0x40020410
 8001ab0:	40020428 	.word	0x40020428
 8001ab4:	40020440 	.word	0x40020440
 8001ab8:	40020458 	.word	0x40020458
 8001abc:	40020470 	.word	0x40020470
 8001ac0:	40020488 	.word	0x40020488
 8001ac4:	400204a0 	.word	0x400204a0
 8001ac8:	400204b8 	.word	0x400204b8
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a5c      	ldr	r2, [pc, #368]	; (8001c54 <HAL_DMA_Abort_IT+0x428>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d072      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a5b      	ldr	r2, [pc, #364]	; (8001c58 <HAL_DMA_Abort_IT+0x42c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d06d      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a59      	ldr	r2, [pc, #356]	; (8001c5c <HAL_DMA_Abort_IT+0x430>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d068      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a58      	ldr	r2, [pc, #352]	; (8001c60 <HAL_DMA_Abort_IT+0x434>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d063      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a56      	ldr	r2, [pc, #344]	; (8001c64 <HAL_DMA_Abort_IT+0x438>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d05e      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a55      	ldr	r2, [pc, #340]	; (8001c68 <HAL_DMA_Abort_IT+0x43c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d059      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a53      	ldr	r2, [pc, #332]	; (8001c6c <HAL_DMA_Abort_IT+0x440>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d054      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a52      	ldr	r2, [pc, #328]	; (8001c70 <HAL_DMA_Abort_IT+0x444>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d04f      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a50      	ldr	r2, [pc, #320]	; (8001c74 <HAL_DMA_Abort_IT+0x448>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d04a      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a4f      	ldr	r2, [pc, #316]	; (8001c78 <HAL_DMA_Abort_IT+0x44c>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d045      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a4d      	ldr	r2, [pc, #308]	; (8001c7c <HAL_DMA_Abort_IT+0x450>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d040      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a4c      	ldr	r2, [pc, #304]	; (8001c80 <HAL_DMA_Abort_IT+0x454>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d03b      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a4a      	ldr	r2, [pc, #296]	; (8001c84 <HAL_DMA_Abort_IT+0x458>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d036      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a49      	ldr	r2, [pc, #292]	; (8001c88 <HAL_DMA_Abort_IT+0x45c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d031      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a47      	ldr	r2, [pc, #284]	; (8001c8c <HAL_DMA_Abort_IT+0x460>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d02c      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a46      	ldr	r2, [pc, #280]	; (8001c90 <HAL_DMA_Abort_IT+0x464>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d027      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a44      	ldr	r2, [pc, #272]	; (8001c94 <HAL_DMA_Abort_IT+0x468>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d022      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a43      	ldr	r2, [pc, #268]	; (8001c98 <HAL_DMA_Abort_IT+0x46c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d01d      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a41      	ldr	r2, [pc, #260]	; (8001c9c <HAL_DMA_Abort_IT+0x470>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d018      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a40      	ldr	r2, [pc, #256]	; (8001ca0 <HAL_DMA_Abort_IT+0x474>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d013      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a3e      	ldr	r2, [pc, #248]	; (8001ca4 <HAL_DMA_Abort_IT+0x478>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00e      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a3d      	ldr	r2, [pc, #244]	; (8001ca8 <HAL_DMA_Abort_IT+0x47c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d009      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a3b      	ldr	r2, [pc, #236]	; (8001cac <HAL_DMA_Abort_IT+0x480>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d004      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x3a0>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a3a      	ldr	r2, [pc, #232]	; (8001cb0 <HAL_DMA_Abort_IT+0x484>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d101      	bne.n	8001bd0 <HAL_DMA_Abort_IT+0x3a4>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <HAL_DMA_Abort_IT+0x3a6>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d028      	beq.n	8001c28 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001be4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001c04:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00c      	beq.n	8001c28 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c1c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001c26:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40020010 	.word	0x40020010
 8001c58:	40020028 	.word	0x40020028
 8001c5c:	40020040 	.word	0x40020040
 8001c60:	40020058 	.word	0x40020058
 8001c64:	40020070 	.word	0x40020070
 8001c68:	40020088 	.word	0x40020088
 8001c6c:	400200a0 	.word	0x400200a0
 8001c70:	400200b8 	.word	0x400200b8
 8001c74:	40020410 	.word	0x40020410
 8001c78:	40020428 	.word	0x40020428
 8001c7c:	40020440 	.word	0x40020440
 8001c80:	40020458 	.word	0x40020458
 8001c84:	40020470 	.word	0x40020470
 8001c88:	40020488 	.word	0x40020488
 8001c8c:	400204a0 	.word	0x400204a0
 8001c90:	400204b8 	.word	0x400204b8
 8001c94:	58025408 	.word	0x58025408
 8001c98:	5802541c 	.word	0x5802541c
 8001c9c:	58025430 	.word	0x58025430
 8001ca0:	58025444 	.word	0x58025444
 8001ca4:	58025458 	.word	0x58025458
 8001ca8:	5802546c 	.word	0x5802546c
 8001cac:	58025480 	.word	0x58025480
 8001cb0:	58025494 	.word	0x58025494

08001cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b089      	sub	sp, #36	; 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001cc2:	4b89      	ldr	r3, [pc, #548]	; (8001ee8 <HAL_GPIO_Init+0x234>)
 8001cc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cc6:	e194      	b.n	8001ff2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8186 	beq.w	8001fec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d005      	beq.n	8001cf8 <HAL_GPIO_Init+0x44>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d130      	bne.n	8001d5a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d2e:	2201      	movs	r2, #1
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	f003 0201 	and.w	r2, r3, #1
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d017      	beq.n	8001d96 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	2203      	movs	r2, #3
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d123      	bne.n	8001dea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	08da      	lsrs	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	220f      	movs	r2, #15
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	691a      	ldr	r2, [r3, #16]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	08da      	lsrs	r2, r3, #3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3208      	adds	r2, #8
 8001de4:	69b9      	ldr	r1, [r7, #24]
 8001de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	2203      	movs	r2, #3
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0203 	and.w	r2, r3, #3
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 80e0 	beq.w	8001fec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2c:	4b2f      	ldr	r3, [pc, #188]	; (8001eec <HAL_GPIO_Init+0x238>)
 8001e2e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001e32:	4a2e      	ldr	r2, [pc, #184]	; (8001eec <HAL_GPIO_Init+0x238>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <HAL_GPIO_Init+0x238>)
 8001e3e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e4a:	4a29      	ldr	r2, [pc, #164]	; (8001ef0 <HAL_GPIO_Init+0x23c>)
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	3302      	adds	r3, #2
 8001e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	220f      	movs	r2, #15
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a20      	ldr	r2, [pc, #128]	; (8001ef4 <HAL_GPIO_Init+0x240>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d052      	beq.n	8001f1c <HAL_GPIO_Init+0x268>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <HAL_GPIO_Init+0x244>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d031      	beq.n	8001ee2 <HAL_GPIO_Init+0x22e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <HAL_GPIO_Init+0x248>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d02b      	beq.n	8001ede <HAL_GPIO_Init+0x22a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a1d      	ldr	r2, [pc, #116]	; (8001f00 <HAL_GPIO_Init+0x24c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d025      	beq.n	8001eda <HAL_GPIO_Init+0x226>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a1c      	ldr	r2, [pc, #112]	; (8001f04 <HAL_GPIO_Init+0x250>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d01f      	beq.n	8001ed6 <HAL_GPIO_Init+0x222>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <HAL_GPIO_Init+0x254>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d019      	beq.n	8001ed2 <HAL_GPIO_Init+0x21e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <HAL_GPIO_Init+0x258>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <HAL_GPIO_Init+0x21a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	; (8001f10 <HAL_GPIO_Init+0x25c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00d      	beq.n	8001eca <HAL_GPIO_Init+0x216>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a18      	ldr	r2, [pc, #96]	; (8001f14 <HAL_GPIO_Init+0x260>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d007      	beq.n	8001ec6 <HAL_GPIO_Init+0x212>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a17      	ldr	r2, [pc, #92]	; (8001f18 <HAL_GPIO_Init+0x264>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d101      	bne.n	8001ec2 <HAL_GPIO_Init+0x20e>
 8001ebe:	2309      	movs	r3, #9
 8001ec0:	e02d      	b.n	8001f1e <HAL_GPIO_Init+0x26a>
 8001ec2:	230a      	movs	r3, #10
 8001ec4:	e02b      	b.n	8001f1e <HAL_GPIO_Init+0x26a>
 8001ec6:	2308      	movs	r3, #8
 8001ec8:	e029      	b.n	8001f1e <HAL_GPIO_Init+0x26a>
 8001eca:	2307      	movs	r3, #7
 8001ecc:	e027      	b.n	8001f1e <HAL_GPIO_Init+0x26a>
 8001ece:	2306      	movs	r3, #6
 8001ed0:	e025      	b.n	8001f1e <HAL_GPIO_Init+0x26a>
 8001ed2:	2305      	movs	r3, #5
 8001ed4:	e023      	b.n	8001f1e <HAL_GPIO_Init+0x26a>
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	e021      	b.n	8001f1e <HAL_GPIO_Init+0x26a>
 8001eda:	2303      	movs	r3, #3
 8001edc:	e01f      	b.n	8001f1e <HAL_GPIO_Init+0x26a>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e01d      	b.n	8001f1e <HAL_GPIO_Init+0x26a>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e01b      	b.n	8001f1e <HAL_GPIO_Init+0x26a>
 8001ee6:	bf00      	nop
 8001ee8:	58000080 	.word	0x58000080
 8001eec:	58024400 	.word	0x58024400
 8001ef0:	58000400 	.word	0x58000400
 8001ef4:	58020000 	.word	0x58020000
 8001ef8:	58020400 	.word	0x58020400
 8001efc:	58020800 	.word	0x58020800
 8001f00:	58020c00 	.word	0x58020c00
 8001f04:	58021000 	.word	0x58021000
 8001f08:	58021400 	.word	0x58021400
 8001f0c:	58021800 	.word	0x58021800
 8001f10:	58021c00 	.word	0x58021c00
 8001f14:	58022000 	.word	0x58022000
 8001f18:	58022400 	.word	0x58022400
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	f002 0203 	and.w	r2, r2, #3
 8001f24:	0092      	lsls	r2, r2, #2
 8001f26:	4093      	lsls	r3, r2
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f2e:	4938      	ldr	r1, [pc, #224]	; (8002010 <HAL_GPIO_Init+0x35c>)
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	089b      	lsrs	r3, r3, #2
 8001f34:	3302      	adds	r3, #2
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f47f ae63 	bne.w	8001cc8 <HAL_GPIO_Init+0x14>
  }
}
 8002002:	bf00      	nop
 8002004:	bf00      	nop
 8002006:	3724      	adds	r7, #36	; 0x24
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	58000400 	.word	0x58000400

08002014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	807b      	strh	r3, [r7, #2]
 8002020:	4613      	mov	r3, r2
 8002022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002024:	787b      	ldrb	r3, [r7, #1]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800202a:	887a      	ldrh	r2, [r7, #2]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002030:	e003      	b.n	800203a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002032:	887b      	ldrh	r3, [r7, #2]
 8002034:	041a      	lsls	r2, r3, #16
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	619a      	str	r2, [r3, #24]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002046:	b480      	push	{r7}
 8002048:	b085      	sub	sp, #20
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	460b      	mov	r3, r1
 8002050:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002058:	887a      	ldrh	r2, [r7, #2]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4013      	ands	r3, r2
 800205e:	041a      	lsls	r2, r3, #16
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	43d9      	mvns	r1, r3
 8002064:	887b      	ldrh	r3, [r7, #2]
 8002066:	400b      	ands	r3, r1
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	619a      	str	r2, [r3, #24]
}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002084:	4b29      	ldr	r3, [pc, #164]	; (800212c <HAL_PWREx_ConfigSupply+0xb0>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	2b06      	cmp	r3, #6
 800208e:	d00a      	beq.n	80020a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002090:	4b26      	ldr	r3, [pc, #152]	; (800212c <HAL_PWREx_ConfigSupply+0xb0>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	429a      	cmp	r2, r3
 800209c:	d001      	beq.n	80020a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e040      	b.n	8002124 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e03e      	b.n	8002124 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <HAL_PWREx_ConfigSupply+0xb0>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80020ae:	491f      	ldr	r1, [pc, #124]	; (800212c <HAL_PWREx_ConfigSupply+0xb0>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80020b6:	f7fe ffaf 	bl	8001018 <HAL_GetTick>
 80020ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020bc:	e009      	b.n	80020d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020be:	f7fe ffab 	bl	8001018 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020cc:	d901      	bls.n	80020d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e028      	b.n	8002124 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020d2:	4b16      	ldr	r3, [pc, #88]	; (800212c <HAL_PWREx_ConfigSupply+0xb0>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020de:	d1ee      	bne.n	80020be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b1e      	cmp	r3, #30
 80020e4:	d008      	beq.n	80020f8 <HAL_PWREx_ConfigSupply+0x7c>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b2e      	cmp	r3, #46	; 0x2e
 80020ea:	d005      	beq.n	80020f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b1d      	cmp	r3, #29
 80020f0:	d002      	beq.n	80020f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b2d      	cmp	r3, #45	; 0x2d
 80020f6:	d114      	bne.n	8002122 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80020f8:	f7fe ff8e 	bl	8001018 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80020fe:	e009      	b.n	8002114 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002100:	f7fe ff8a 	bl	8001018 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800210e:	d901      	bls.n	8002114 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e007      	b.n	8002124 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_PWREx_ConfigSupply+0xb0>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002120:	d1ee      	bne.n	8002100 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	58024800 	.word	0x58024800

08002130 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08c      	sub	sp, #48	; 0x30
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e3f3      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 80b3 	beq.w	80022b6 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002150:	4b9e      	ldr	r3, [pc, #632]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800215a:	4b9c      	ldr	r3, [pc, #624]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 800215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002162:	2b10      	cmp	r3, #16
 8002164:	d007      	beq.n	8002176 <HAL_RCC_OscConfig+0x46>
 8002166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002168:	2b18      	cmp	r3, #24
 800216a:	d112      	bne.n	8002192 <HAL_RCC_OscConfig+0x62>
 800216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d10d      	bne.n	8002192 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002176:	4b95      	ldr	r3, [pc, #596]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8098 	beq.w	80022b4 <HAL_RCC_OscConfig+0x184>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	f040 8093 	bne.w	80022b4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e3cb      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x7a>
 800219c:	4b8b      	ldr	r3, [pc, #556]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a8a      	ldr	r2, [pc, #552]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 80021a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	e058      	b.n	800225c <HAL_RCC_OscConfig+0x12c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d112      	bne.n	80021d8 <HAL_RCC_OscConfig+0xa8>
 80021b2:	4b86      	ldr	r3, [pc, #536]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a85      	ldr	r2, [pc, #532]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 80021b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	4b83      	ldr	r3, [pc, #524]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a82      	ldr	r2, [pc, #520]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 80021c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b80      	ldr	r3, [pc, #512]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a7f      	ldr	r2, [pc, #508]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 80021d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e041      	b.n	800225c <HAL_RCC_OscConfig+0x12c>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e0:	d112      	bne.n	8002208 <HAL_RCC_OscConfig+0xd8>
 80021e2:	4b7a      	ldr	r3, [pc, #488]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a79      	ldr	r2, [pc, #484]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b77      	ldr	r3, [pc, #476]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a76      	ldr	r2, [pc, #472]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 80021f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b74      	ldr	r3, [pc, #464]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a73      	ldr	r2, [pc, #460]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e029      	b.n	800225c <HAL_RCC_OscConfig+0x12c>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002210:	d112      	bne.n	8002238 <HAL_RCC_OscConfig+0x108>
 8002212:	4b6e      	ldr	r3, [pc, #440]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a6d      	ldr	r2, [pc, #436]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 8002218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	4b6b      	ldr	r3, [pc, #428]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a6a      	ldr	r2, [pc, #424]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 8002224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b68      	ldr	r3, [pc, #416]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a67      	ldr	r2, [pc, #412]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e011      	b.n	800225c <HAL_RCC_OscConfig+0x12c>
 8002238:	4b64      	ldr	r3, [pc, #400]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a63      	ldr	r2, [pc, #396]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 800223e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b61      	ldr	r3, [pc, #388]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a60      	ldr	r2, [pc, #384]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 800224a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b5e      	ldr	r3, [pc, #376]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a5d      	ldr	r2, [pc, #372]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 8002256:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800225a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d013      	beq.n	800228c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe fed8 	bl	8001018 <HAL_GetTick>
 8002268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800226c:	f7fe fed4 	bl	8001018 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e355      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800227e:	4b53      	ldr	r3, [pc, #332]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x13c>
 800228a:	e014      	b.n	80022b6 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe fec4 	bl	8001018 <HAL_GetTick>
 8002290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002294:	f7fe fec0 	bl	8001018 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	; 0x64
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e341      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022a6:	4b49      	ldr	r3, [pc, #292]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x164>
 80022b2:	e000      	b.n	80022b6 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 808c 	beq.w	80023dc <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022c4:	4b41      	ldr	r3, [pc, #260]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022ce:	4b3f      	ldr	r3, [pc, #252]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d007      	beq.n	80022ea <HAL_RCC_OscConfig+0x1ba>
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	2b18      	cmp	r3, #24
 80022de:	d137      	bne.n	8002350 <HAL_RCC_OscConfig+0x220>
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d132      	bne.n	8002350 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ea:	4b38      	ldr	r3, [pc, #224]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <HAL_RCC_OscConfig+0x1d2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e313      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002302:	4b32      	ldr	r3, [pc, #200]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 0219 	bic.w	r2, r3, #25
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	492f      	ldr	r1, [pc, #188]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 8002310:	4313      	orrs	r3, r2
 8002312:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002314:	f7fe fe80 	bl	8001018 <HAL_GetTick>
 8002318:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800231c:	f7fe fe7c 	bl	8001018 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e2fd      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800232e:	4b27      	ldr	r3, [pc, #156]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233a:	4b24      	ldr	r3, [pc, #144]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	061b      	lsls	r3, r3, #24
 8002348:	4920      	ldr	r1, [pc, #128]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800234e:	e045      	b.n	80023dc <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d026      	beq.n	80023a6 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002358:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f023 0219 	bic.w	r2, r3, #25
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4919      	ldr	r1, [pc, #100]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7fe fe55 	bl	8001018 <HAL_GetTick>
 800236e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002372:	f7fe fe51 	bl	8001018 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e2d2      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002390:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	061b      	lsls	r3, r3, #24
 800239e:	490b      	ldr	r1, [pc, #44]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
 80023a4:	e01a      	b.n	80023dc <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a08      	ldr	r2, [pc, #32]	; (80023cc <HAL_RCC_OscConfig+0x29c>)
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b2:	f7fe fe31 	bl	8001018 <HAL_GetTick>
 80023b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ba:	f7fe fe2d 	bl	8001018 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d903      	bls.n	80023d0 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e2ae      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
 80023cc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023d0:	4b99      	ldr	r3, [pc, #612]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1ee      	bne.n	80023ba <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d06a      	beq.n	80024be <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e8:	4b93      	ldr	r3, [pc, #588]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023f0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023f2:	4b91      	ldr	r3, [pc, #580]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d007      	beq.n	800240e <HAL_RCC_OscConfig+0x2de>
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	2b18      	cmp	r3, #24
 8002402:	d11b      	bne.n	800243c <HAL_RCC_OscConfig+0x30c>
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d116      	bne.n	800243c <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800240e:	4b8a      	ldr	r3, [pc, #552]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_RCC_OscConfig+0x2f6>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	2b80      	cmp	r3, #128	; 0x80
 8002420:	d001      	beq.n	8002426 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e281      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002426:	4b84      	ldr	r3, [pc, #528]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	061b      	lsls	r3, r3, #24
 8002434:	4980      	ldr	r1, [pc, #512]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 8002436:	4313      	orrs	r3, r2
 8002438:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800243a:	e040      	b.n	80024be <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d023      	beq.n	800248c <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002444:	4b7c      	ldr	r3, [pc, #496]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a7b      	ldr	r2, [pc, #492]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 800244a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800244e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe fde2 	bl	8001018 <HAL_GetTick>
 8002454:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002458:	f7fe fdde 	bl	8001018 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e25f      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800246a:	4b73      	ldr	r3, [pc, #460]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002476:	4b70      	ldr	r3, [pc, #448]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	061b      	lsls	r3, r3, #24
 8002484:	496c      	ldr	r1, [pc, #432]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 8002486:	4313      	orrs	r3, r2
 8002488:	60cb      	str	r3, [r1, #12]
 800248a:	e018      	b.n	80024be <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800248c:	4b6a      	ldr	r3, [pc, #424]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a69      	ldr	r2, [pc, #420]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 8002492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe fdbe 	bl	8001018 <HAL_GetTick>
 800249c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80024a0:	f7fe fdba 	bl	8001018 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e23b      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024b2:	4b61      	ldr	r3, [pc, #388]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d036      	beq.n	8002538 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d019      	beq.n	8002506 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d2:	4b59      	ldr	r3, [pc, #356]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 80024d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d6:	4a58      	ldr	r2, [pc, #352]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024de:	f7fe fd9b 	bl	8001018 <HAL_GetTick>
 80024e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e6:	f7fe fd97 	bl	8001018 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e218      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024f8:	4b4f      	ldr	r3, [pc, #316]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 80024fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x3b6>
 8002504:	e018      	b.n	8002538 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002506:	4b4c      	ldr	r3, [pc, #304]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 8002508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250a:	4a4b      	ldr	r2, [pc, #300]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 800250c:	f023 0301 	bic.w	r3, r3, #1
 8002510:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002512:	f7fe fd81 	bl	8001018 <HAL_GetTick>
 8002516:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800251a:	f7fe fd7d 	bl	8001018 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e1fe      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800252c:	4b42      	ldr	r3, [pc, #264]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 800252e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f0      	bne.n	800251a <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b00      	cmp	r3, #0
 8002542:	d036      	beq.n	80025b2 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d019      	beq.n	8002580 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800254c:	4b3a      	ldr	r3, [pc, #232]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a39      	ldr	r2, [pc, #228]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 8002552:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002556:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002558:	f7fe fd5e 	bl	8001018 <HAL_GetTick>
 800255c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002560:	f7fe fd5a 	bl	8001018 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e1db      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002572:	4b31      	ldr	r3, [pc, #196]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x430>
 800257e:	e018      	b.n	80025b2 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002580:	4b2d      	ldr	r3, [pc, #180]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a2c      	ldr	r2, [pc, #176]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 8002586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800258a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800258c:	f7fe fd44 	bl	8001018 <HAL_GetTick>
 8002590:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002594:	f7fe fd40 	bl	8001018 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e1c1      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 80af 	beq.w	800271e <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025c0:	4b1e      	ldr	r3, [pc, #120]	; (800263c <HAL_RCC_OscConfig+0x50c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1d      	ldr	r2, [pc, #116]	; (800263c <HAL_RCC_OscConfig+0x50c>)
 80025c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025cc:	f7fe fd24 	bl	8001018 <HAL_GetTick>
 80025d0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80025d4:	f7fe fd20 	bl	8001018 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	; 0x64
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e1a1      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_RCC_OscConfig+0x50c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d106      	bne.n	8002608 <HAL_RCC_OscConfig+0x4d8>
 80025fa:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6713      	str	r3, [r2, #112]	; 0x70
 8002606:	e05b      	b.n	80026c0 <HAL_RCC_OscConfig+0x590>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d117      	bne.n	8002640 <HAL_RCC_OscConfig+0x510>
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002614:	4a08      	ldr	r2, [pc, #32]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 8002616:	f023 0301 	bic.w	r3, r3, #1
 800261a:	6713      	str	r3, [r2, #112]	; 0x70
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	4a05      	ldr	r2, [pc, #20]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 8002622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002626:	6713      	str	r3, [r2, #112]	; 0x70
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	4a02      	ldr	r2, [pc, #8]	; (8002638 <HAL_RCC_OscConfig+0x508>)
 800262e:	f023 0304 	bic.w	r3, r3, #4
 8002632:	6713      	str	r3, [r2, #112]	; 0x70
 8002634:	e044      	b.n	80026c0 <HAL_RCC_OscConfig+0x590>
 8002636:	bf00      	nop
 8002638:	58024400 	.word	0x58024400
 800263c:	58024800 	.word	0x58024800
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b05      	cmp	r3, #5
 8002646:	d112      	bne.n	800266e <HAL_RCC_OscConfig+0x53e>
 8002648:	4b95      	ldr	r3, [pc, #596]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	4a94      	ldr	r2, [pc, #592]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 800264e:	f043 0304 	orr.w	r3, r3, #4
 8002652:	6713      	str	r3, [r2, #112]	; 0x70
 8002654:	4b92      	ldr	r3, [pc, #584]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	4a91      	ldr	r2, [pc, #580]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 800265a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800265e:	6713      	str	r3, [r2, #112]	; 0x70
 8002660:	4b8f      	ldr	r3, [pc, #572]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	4a8e      	ldr	r2, [pc, #568]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6713      	str	r3, [r2, #112]	; 0x70
 800266c:	e028      	b.n	80026c0 <HAL_RCC_OscConfig+0x590>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b85      	cmp	r3, #133	; 0x85
 8002674:	d112      	bne.n	800269c <HAL_RCC_OscConfig+0x56c>
 8002676:	4b8a      	ldr	r3, [pc, #552]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267a:	4a89      	ldr	r2, [pc, #548]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 800267c:	f043 0304 	orr.w	r3, r3, #4
 8002680:	6713      	str	r3, [r2, #112]	; 0x70
 8002682:	4b87      	ldr	r3, [pc, #540]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002686:	4a86      	ldr	r2, [pc, #536]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800268c:	6713      	str	r3, [r2, #112]	; 0x70
 800268e:	4b84      	ldr	r3, [pc, #528]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002692:	4a83      	ldr	r2, [pc, #524]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6713      	str	r3, [r2, #112]	; 0x70
 800269a:	e011      	b.n	80026c0 <HAL_RCC_OscConfig+0x590>
 800269c:	4b80      	ldr	r3, [pc, #512]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	4a7f      	ldr	r2, [pc, #508]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 80026a2:	f023 0301 	bic.w	r3, r3, #1
 80026a6:	6713      	str	r3, [r2, #112]	; 0x70
 80026a8:	4b7d      	ldr	r3, [pc, #500]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ac:	4a7c      	ldr	r2, [pc, #496]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 80026ae:	f023 0304 	bic.w	r3, r3, #4
 80026b2:	6713      	str	r3, [r2, #112]	; 0x70
 80026b4:	4b7a      	ldr	r3, [pc, #488]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	4a79      	ldr	r2, [pc, #484]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 80026ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d015      	beq.n	80026f4 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c8:	f7fe fca6 	bl	8001018 <HAL_GetTick>
 80026cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f7fe fca2 	bl	8001018 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	; 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e121      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026e6:	4b6e      	ldr	r3, [pc, #440]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0ee      	beq.n	80026d0 <HAL_RCC_OscConfig+0x5a0>
 80026f2:	e014      	b.n	800271e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f4:	f7fe fc90 	bl	8001018 <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026fc:	f7fe fc8c 	bl	8001018 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	; 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e10b      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002712:	4b63      	ldr	r3, [pc, #396]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1ee      	bne.n	80026fc <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8100 	beq.w	8002928 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002728:	4b5d      	ldr	r3, [pc, #372]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002730:	2b18      	cmp	r3, #24
 8002732:	f000 80bb 	beq.w	80028ac <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	2b02      	cmp	r3, #2
 800273c:	f040 8095 	bne.w	800286a <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002740:	4b57      	ldr	r3, [pc, #348]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a56      	ldr	r2, [pc, #344]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800274a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7fe fc64 	bl	8001018 <HAL_GetTick>
 8002750:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002754:	f7fe fc60 	bl	8001018 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0e1      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002766:	4b4e      	ldr	r3, [pc, #312]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002772:	4b4b      	ldr	r3, [pc, #300]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002776:	4b4b      	ldr	r3, [pc, #300]	; (80028a4 <HAL_RCC_OscConfig+0x774>)
 8002778:	4013      	ands	r3, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002782:	0112      	lsls	r2, r2, #4
 8002784:	430a      	orrs	r2, r1
 8002786:	4946      	ldr	r1, [pc, #280]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002788:	4313      	orrs	r3, r2
 800278a:	628b      	str	r3, [r1, #40]	; 0x28
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	3b01      	subs	r3, #1
 8002792:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279a:	3b01      	subs	r3, #1
 800279c:	025b      	lsls	r3, r3, #9
 800279e:	b29b      	uxth	r3, r3
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a6:	3b01      	subs	r3, #1
 80027a8:	041b      	lsls	r3, r3, #16
 80027aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b4:	3b01      	subs	r3, #1
 80027b6:	061b      	lsls	r3, r3, #24
 80027b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80027bc:	4938      	ldr	r1, [pc, #224]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80027c2:	4b37      	ldr	r3, [pc, #220]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	4a36      	ldr	r2, [pc, #216]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027ce:	4b34      	ldr	r3, [pc, #208]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 80027d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027d2:	4b35      	ldr	r3, [pc, #212]	; (80028a8 <HAL_RCC_OscConfig+0x778>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027da:	00d2      	lsls	r2, r2, #3
 80027dc:	4930      	ldr	r1, [pc, #192]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80027e2:	4b2f      	ldr	r3, [pc, #188]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	f023 020c 	bic.w	r2, r3, #12
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	492c      	ldr	r1, [pc, #176]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80027f4:	4b2a      	ldr	r3, [pc, #168]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	f023 0202 	bic.w	r2, r3, #2
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002800:	4927      	ldr	r1, [pc, #156]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002802:	4313      	orrs	r3, r2
 8002804:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002806:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	4a25      	ldr	r2, [pc, #148]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 800280c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002810:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002812:	4b23      	ldr	r3, [pc, #140]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	4a22      	ldr	r2, [pc, #136]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800281c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800281e:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002828:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800282a:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a19      	ldr	r2, [pc, #100]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 800283c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002842:	f7fe fbe9 	bl	8001018 <HAL_GetTick>
 8002846:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800284a:	f7fe fbe5 	bl	8001018 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e066      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800285c:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f0      	beq.n	800284a <HAL_RCC_OscConfig+0x71a>
 8002868:	e05e      	b.n	8002928 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286a:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a0c      	ldr	r2, [pc, #48]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002870:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe fbcf 	bl	8001018 <HAL_GetTick>
 800287a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287e:	f7fe fbcb 	bl	8001018 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e04c      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <HAL_RCC_OscConfig+0x770>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x74e>
 800289c:	e044      	b.n	8002928 <HAL_RCC_OscConfig+0x7f8>
 800289e:	bf00      	nop
 80028a0:	58024400 	.word	0x58024400
 80028a4:	fffffc0c 	.word	0xfffffc0c
 80028a8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80028ac:	4b21      	ldr	r3, [pc, #132]	; (8002934 <HAL_RCC_OscConfig+0x804>)
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028b2:	4b20      	ldr	r3, [pc, #128]	; (8002934 <HAL_RCC_OscConfig+0x804>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d031      	beq.n	8002924 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	f003 0203 	and.w	r2, r3, #3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d12a      	bne.n	8002924 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028da:	429a      	cmp	r2, r3
 80028dc:	d122      	bne.n	8002924 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d11a      	bne.n	8002924 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	0a5b      	lsrs	r3, r3, #9
 80028f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d111      	bne.n	8002924 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	0c1b      	lsrs	r3, r3, #16
 8002904:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800290e:	429a      	cmp	r2, r3
 8002910:	d108      	bne.n	8002924 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	0e1b      	lsrs	r3, r3, #24
 8002916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3730      	adds	r7, #48	; 0x30
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	58024400 	.word	0x58024400

08002938 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e19c      	b.n	8002c86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800294c:	4b8a      	ldr	r3, [pc, #552]	; (8002b78 <HAL_RCC_ClockConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d910      	bls.n	800297c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b87      	ldr	r3, [pc, #540]	; (8002b78 <HAL_RCC_ClockConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 020f 	bic.w	r2, r3, #15
 8002962:	4985      	ldr	r1, [pc, #532]	; (8002b78 <HAL_RCC_ClockConfig+0x240>)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b83      	ldr	r3, [pc, #524]	; (8002b78 <HAL_RCC_ClockConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e184      	b.n	8002c86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d010      	beq.n	80029aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	4b7b      	ldr	r3, [pc, #492]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002994:	429a      	cmp	r2, r3
 8002996:	d908      	bls.n	80029aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002998:	4b78      	ldr	r3, [pc, #480]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	4975      	ldr	r1, [pc, #468]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d010      	beq.n	80029d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	4b70      	ldr	r3, [pc, #448]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d908      	bls.n	80029d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029c6:	4b6d      	ldr	r3, [pc, #436]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	496a      	ldr	r1, [pc, #424]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d010      	beq.n	8002a06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699a      	ldr	r2, [r3, #24]
 80029e8:	4b64      	ldr	r3, [pc, #400]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d908      	bls.n	8002a06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029f4:	4b61      	ldr	r3, [pc, #388]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	495e      	ldr	r1, [pc, #376]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d010      	beq.n	8002a34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	4b59      	ldr	r3, [pc, #356]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d908      	bls.n	8002a34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002a22:	4b56      	ldr	r3, [pc, #344]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	4953      	ldr	r1, [pc, #332]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d010      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	4b4d      	ldr	r3, [pc, #308]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d908      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a50:	4b4a      	ldr	r3, [pc, #296]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f023 020f 	bic.w	r2, r3, #15
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4947      	ldr	r1, [pc, #284]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d055      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a6e:	4b43      	ldr	r3, [pc, #268]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	4940      	ldr	r1, [pc, #256]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d107      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a88:	4b3c      	ldr	r3, [pc, #240]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d121      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0f6      	b.n	8002c86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aa0:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d115      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0ea      	b.n	8002c86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d107      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ab8:	4b30      	ldr	r3, [pc, #192]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0de      	b.n	8002c86 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ac8:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0d6      	b.n	8002c86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ad8:	4b28      	ldr	r3, [pc, #160]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f023 0207 	bic.w	r2, r3, #7
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4925      	ldr	r1, [pc, #148]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aea:	f7fe fa95 	bl	8001018 <HAL_GetTick>
 8002aee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af2:	f7fe fa91 	bl	8001018 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e0be      	b.n	8002c86 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b08:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d1eb      	bne.n	8002af2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d208      	bcs.n	8002b48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f023 020f 	bic.w	r2, r3, #15
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	490e      	ldr	r1, [pc, #56]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_ClockConfig+0x240>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d214      	bcs.n	8002b80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <HAL_RCC_ClockConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 020f 	bic.w	r2, r3, #15
 8002b5e:	4906      	ldr	r1, [pc, #24]	; (8002b78 <HAL_RCC_ClockConfig+0x240>)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <HAL_RCC_ClockConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d005      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e086      	b.n	8002c86 <HAL_RCC_ClockConfig+0x34e>
 8002b78:	52002000 	.word	0x52002000
 8002b7c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d010      	beq.n	8002bae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	4b3f      	ldr	r3, [pc, #252]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d208      	bcs.n	8002bae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b9c:	4b3c      	ldr	r3, [pc, #240]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	4939      	ldr	r1, [pc, #228]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d010      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	4b34      	ldr	r3, [pc, #208]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d208      	bcs.n	8002bdc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bca:	4b31      	ldr	r3, [pc, #196]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	492e      	ldr	r1, [pc, #184]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d010      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699a      	ldr	r2, [r3, #24]
 8002bec:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d208      	bcs.n	8002c0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bf8:	4b25      	ldr	r3, [pc, #148]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	4922      	ldr	r1, [pc, #136]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d010      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69da      	ldr	r2, [r3, #28]
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d208      	bcs.n	8002c38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002c26:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	4917      	ldr	r1, [pc, #92]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002c38:	f000 f834 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	0a1b      	lsrs	r3, r3, #8
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	4912      	ldr	r1, [pc, #72]	; (8002c94 <HAL_RCC_ClockConfig+0x35c>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
 8002c54:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002c56:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	4a0d      	ldr	r2, [pc, #52]	; (8002c94 <HAL_RCC_ClockConfig+0x35c>)
 8002c60:	5cd3      	ldrb	r3, [r2, r3]
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <HAL_RCC_ClockConfig+0x360>)
 8002c6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c70:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <HAL_RCC_ClockConfig+0x364>)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_RCC_ClockConfig+0x368>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd ff62 	bl	8000b44 <HAL_InitTick>
 8002c80:	4603      	mov	r3, r0
 8002c82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	58024400 	.word	0x58024400
 8002c94:	0800a854 	.word	0x0800a854
 8002c98:	24000004 	.word	0x24000004
 8002c9c:	24000000 	.word	0x24000000
 8002ca0:	24000008 	.word	0x24000008

08002ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	; 0x24
 8002ca8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002caa:	4bb3      	ldr	r3, [pc, #716]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cb2:	2b18      	cmp	r3, #24
 8002cb4:	f200 8155 	bhi.w	8002f62 <HAL_RCC_GetSysClockFreq+0x2be>
 8002cb8:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbe:	bf00      	nop
 8002cc0:	08002d25 	.word	0x08002d25
 8002cc4:	08002f63 	.word	0x08002f63
 8002cc8:	08002f63 	.word	0x08002f63
 8002ccc:	08002f63 	.word	0x08002f63
 8002cd0:	08002f63 	.word	0x08002f63
 8002cd4:	08002f63 	.word	0x08002f63
 8002cd8:	08002f63 	.word	0x08002f63
 8002cdc:	08002f63 	.word	0x08002f63
 8002ce0:	08002d4b 	.word	0x08002d4b
 8002ce4:	08002f63 	.word	0x08002f63
 8002ce8:	08002f63 	.word	0x08002f63
 8002cec:	08002f63 	.word	0x08002f63
 8002cf0:	08002f63 	.word	0x08002f63
 8002cf4:	08002f63 	.word	0x08002f63
 8002cf8:	08002f63 	.word	0x08002f63
 8002cfc:	08002f63 	.word	0x08002f63
 8002d00:	08002d51 	.word	0x08002d51
 8002d04:	08002f63 	.word	0x08002f63
 8002d08:	08002f63 	.word	0x08002f63
 8002d0c:	08002f63 	.word	0x08002f63
 8002d10:	08002f63 	.word	0x08002f63
 8002d14:	08002f63 	.word	0x08002f63
 8002d18:	08002f63 	.word	0x08002f63
 8002d1c:	08002f63 	.word	0x08002f63
 8002d20:	08002d57 	.word	0x08002d57
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d24:	4b94      	ldr	r3, [pc, #592]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d009      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002d30:	4b91      	ldr	r3, [pc, #580]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	08db      	lsrs	r3, r3, #3
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	4a90      	ldr	r2, [pc, #576]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002d42:	e111      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d44:	4b8d      	ldr	r3, [pc, #564]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d46:	61bb      	str	r3, [r7, #24]
    break;
 8002d48:	e10e      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002d4a:	4b8d      	ldr	r3, [pc, #564]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d4c:	61bb      	str	r3, [r7, #24]
    break;
 8002d4e:	e10b      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002d50:	4b8c      	ldr	r3, [pc, #560]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d52:	61bb      	str	r3, [r7, #24]
    break;
 8002d54:	e108      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d56:	4b88      	ldr	r3, [pc, #544]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002d60:	4b85      	ldr	r3, [pc, #532]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d6a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d6c:	4b82      	ldr	r3, [pc, #520]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002d76:	4b80      	ldr	r3, [pc, #512]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7a:	08db      	lsrs	r3, r3, #3
 8002d7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	fb02 f303 	mul.w	r3, r2, r3
 8002d86:	ee07 3a90 	vmov	s15, r3
 8002d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d8e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80e1 	beq.w	8002f5c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	f000 8083 	beq.w	8002ea8 <HAL_RCC_GetSysClockFreq+0x204>
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	f200 80a1 	bhi.w	8002eec <HAL_RCC_GetSysClockFreq+0x248>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0x114>
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d056      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002db6:	e099      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002db8:	4b6f      	ldr	r3, [pc, #444]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d02d      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002dc4:	4b6c      	ldr	r3, [pc, #432]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	08db      	lsrs	r3, r3, #3
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	4a6b      	ldr	r2, [pc, #428]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	ee07 3a90 	vmov	s15, r3
 8002ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	ee07 3a90 	vmov	s15, r3
 8002de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dee:	4b62      	ldr	r3, [pc, #392]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df6:	ee07 3a90 	vmov	s15, r3
 8002dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002e1e:	e087      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	ee07 3a90 	vmov	s15, r3
 8002e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002f8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e32:	4b51      	ldr	r3, [pc, #324]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3a:	ee07 3a90 	vmov	s15, r3
 8002e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e62:	e065      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	ee07 3a90 	vmov	s15, r3
 8002e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002f90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e76:	4b40      	ldr	r3, [pc, #256]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e7e:	ee07 3a90 	vmov	s15, r3
 8002e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ea6:	e043      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	ee07 3a90 	vmov	s15, r3
 8002eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002f94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eba:	4b2f      	ldr	r3, [pc, #188]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec2:	ee07 3a90 	vmov	s15, r3
 8002ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eca:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ece:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002eea:	e021      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	ee07 3a90 	vmov	s15, r3
 8002ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ef6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002f90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002efe:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f2e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002f30:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	0a5b      	lsrs	r3, r3, #9
 8002f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	ee07 3a90 	vmov	s15, r3
 8002f44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f48:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f54:	ee17 3a90 	vmov	r3, s15
 8002f58:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002f5a:	e005      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61bb      	str	r3, [r7, #24]
    break;
 8002f60:	e002      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002f62:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f64:	61bb      	str	r3, [r7, #24]
    break;
 8002f66:	bf00      	nop
  }

  return sysclockfreq;
 8002f68:	69bb      	ldr	r3, [r7, #24]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3724      	adds	r7, #36	; 0x24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	58024400 	.word	0x58024400
 8002f7c:	03d09000 	.word	0x03d09000
 8002f80:	003d0900 	.word	0x003d0900
 8002f84:	007a1200 	.word	0x007a1200
 8002f88:	46000000 	.word	0x46000000
 8002f8c:	4c742400 	.word	0x4c742400
 8002f90:	4a742400 	.word	0x4a742400
 8002f94:	4af42400 	.word	0x4af42400

08002f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002f9e:	f7ff fe81 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	490f      	ldr	r1, [pc, #60]	; (8002fec <HAL_RCC_GetHCLKFreq+0x54>)
 8002fb0:	5ccb      	ldrb	r3, [r1, r3]
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fba:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	4a09      	ldr	r2, [pc, #36]	; (8002fec <HAL_RCC_GetHCLKFreq+0x54>)
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd2:	4a07      	ldr	r2, [pc, #28]	; (8002ff0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002fd4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fd6:	4a07      	ldr	r2, [pc, #28]	; (8002ff4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002fde:	681b      	ldr	r3, [r3, #0]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	58024400 	.word	0x58024400
 8002fec:	0800a854 	.word	0x0800a854
 8002ff0:	24000004 	.word	0x24000004
 8002ff4:	24000000 	.word	0x24000000

08002ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002ffc:	f7ff ffcc 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8003000:	4602      	mov	r2, r0
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	4904      	ldr	r1, [pc, #16]	; (8003020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800300e:	5ccb      	ldrb	r3, [r1, r3]
 8003010:	f003 031f 	and.w	r3, r3, #31
 8003014:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003018:	4618      	mov	r0, r3
 800301a:	bd80      	pop	{r7, pc}
 800301c:	58024400 	.word	0x58024400
 8003020:	0800a854 	.word	0x0800a854

08003024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003028:	f7ff ffb6 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 800302c:	4602      	mov	r2, r0
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	0a1b      	lsrs	r3, r3, #8
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	4904      	ldr	r1, [pc, #16]	; (800304c <HAL_RCC_GetPCLK2Freq+0x28>)
 800303a:	5ccb      	ldrb	r3, [r1, r3]
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003044:	4618      	mov	r0, r3
 8003046:	bd80      	pop	{r7, pc}
 8003048:	58024400 	.word	0x58024400
 800304c:	0800a854 	.word	0x0800a854

08003050 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	223f      	movs	r2, #63	; 0x3f
 800305e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003060:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <HAL_RCC_GetClockConfig+0x7c>)
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f003 0207 	and.w	r2, r3, #7
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800306c:	4b17      	ldr	r3, [pc, #92]	; (80030cc <HAL_RCC_GetClockConfig+0x7c>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8003078:	4b14      	ldr	r3, [pc, #80]	; (80030cc <HAL_RCC_GetClockConfig+0x7c>)
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f003 020f 	and.w	r2, r3, #15
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8003084:	4b11      	ldr	r3, [pc, #68]	; (80030cc <HAL_RCC_GetClockConfig+0x7c>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8003090:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <HAL_RCC_GetClockConfig+0x7c>)
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCC_GetClockConfig+0x7c>)
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <HAL_RCC_GetClockConfig+0x7c>)
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_RCC_GetClockConfig+0x80>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 020f 	and.w	r2, r3, #15
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	601a      	str	r2, [r3, #0]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	58024400 	.word	0x58024400
 80030d0:	52002000 	.word	0x52002000

080030d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030dc:	2300      	movs	r3, #0
 80030de:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030e0:	2300      	movs	r3, #0
 80030e2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d03f      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030f8:	d02a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030fe:	d824      	bhi.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003100:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003104:	d018      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003106:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800310a:	d81e      	bhi.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003114:	d007      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003116:	e018      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003118:	4ba6      	ldr	r3, [pc, #664]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	4aa5      	ldr	r2, [pc, #660]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800311e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003122:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003124:	e015      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3304      	adds	r3, #4
 800312a:	2102      	movs	r1, #2
 800312c:	4618      	mov	r0, r3
 800312e:	f001 f99b 	bl	8004468 <RCCEx_PLL2_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003136:	e00c      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3324      	adds	r3, #36	; 0x24
 800313c:	2102      	movs	r1, #2
 800313e:	4618      	mov	r0, r3
 8003140:	f001 fa44 	bl	80045cc <RCCEx_PLL3_Config>
 8003144:	4603      	mov	r3, r0
 8003146:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003148:	e003      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
      break;
 800314e:	e000      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003152:	7dfb      	ldrb	r3, [r7, #23]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d109      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003158:	4b96      	ldr	r3, [pc, #600]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800315a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800315c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003164:	4993      	ldr	r1, [pc, #588]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003166:	4313      	orrs	r3, r2
 8003168:	650b      	str	r3, [r1, #80]	; 0x50
 800316a:	e001      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316c:	7dfb      	ldrb	r3, [r7, #23]
 800316e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d03d      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003180:	2b04      	cmp	r3, #4
 8003182:	d826      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003184:	a201      	add	r2, pc, #4	; (adr r2, 800318c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318a:	bf00      	nop
 800318c:	080031a1 	.word	0x080031a1
 8003190:	080031af 	.word	0x080031af
 8003194:	080031c1 	.word	0x080031c1
 8003198:	080031d9 	.word	0x080031d9
 800319c:	080031d9 	.word	0x080031d9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031a0:	4b84      	ldr	r3, [pc, #528]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	4a83      	ldr	r2, [pc, #524]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80031a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031ac:	e015      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3304      	adds	r3, #4
 80031b2:	2100      	movs	r1, #0
 80031b4:	4618      	mov	r0, r3
 80031b6:	f001 f957 	bl	8004468 <RCCEx_PLL2_Config>
 80031ba:	4603      	mov	r3, r0
 80031bc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031be:	e00c      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3324      	adds	r3, #36	; 0x24
 80031c4:	2100      	movs	r1, #0
 80031c6:	4618      	mov	r0, r3
 80031c8:	f001 fa00 	bl	80045cc <RCCEx_PLL3_Config>
 80031cc:	4603      	mov	r3, r0
 80031ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031d0:	e003      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	75fb      	strb	r3, [r7, #23]
      break;
 80031d6:	e000      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80031d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031da:	7dfb      	ldrb	r3, [r7, #23]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d109      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031e0:	4b74      	ldr	r3, [pc, #464]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80031e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e4:	f023 0207 	bic.w	r2, r3, #7
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ec:	4971      	ldr	r1, [pc, #452]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	650b      	str	r3, [r1, #80]	; 0x50
 80031f2:	e001      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f4:	7dfb      	ldrb	r3, [r7, #23]
 80031f6:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003200:	2b00      	cmp	r3, #0
 8003202:	d04a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800320c:	d031      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800320e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003212:	d82b      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003218:	d02d      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800321a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800321e:	d825      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003220:	2bc0      	cmp	r3, #192	; 0xc0
 8003222:	d02a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003224:	2bc0      	cmp	r3, #192	; 0xc0
 8003226:	d821      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003228:	2b80      	cmp	r3, #128	; 0x80
 800322a:	d016      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800322c:	2b80      	cmp	r3, #128	; 0x80
 800322e:	d81d      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003234:	2b40      	cmp	r3, #64	; 0x40
 8003236:	d007      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003238:	e018      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800323a:	4b5e      	ldr	r3, [pc, #376]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323e:	4a5d      	ldr	r2, [pc, #372]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003244:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003246:	e019      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3304      	adds	r3, #4
 800324c:	2100      	movs	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f001 f90a 	bl	8004468 <RCCEx_PLL2_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003258:	e010      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3324      	adds	r3, #36	; 0x24
 800325e:	2100      	movs	r1, #0
 8003260:	4618      	mov	r0, r3
 8003262:	f001 f9b3 	bl	80045cc <RCCEx_PLL3_Config>
 8003266:	4603      	mov	r3, r0
 8003268:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800326a:	e007      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	75fb      	strb	r3, [r7, #23]
      break;
 8003270:	e004      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003272:	bf00      	nop
 8003274:	e002      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003276:	bf00      	nop
 8003278:	e000      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800327a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800327c:	7dfb      	ldrb	r3, [r7, #23]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003282:	4b4c      	ldr	r3, [pc, #304]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003286:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328e:	4949      	ldr	r1, [pc, #292]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003290:	4313      	orrs	r3, r2
 8003292:	650b      	str	r3, [r1, #80]	; 0x50
 8003294:	e001      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003296:	7dfb      	ldrb	r3, [r7, #23]
 8003298:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d04f      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80032ae:	d036      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80032b0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80032b4:	d830      	bhi.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80032b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ba:	d032      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80032bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032c0:	d82a      	bhi.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80032c2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80032c6:	d02e      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x252>
 80032c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80032cc:	d824      	bhi.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80032ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d2:	d018      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x232>
 80032d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d8:	d81e      	bhi.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80032de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e2:	d007      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80032e4:	e018      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032e6:	4b33      	ldr	r3, [pc, #204]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	4a32      	ldr	r2, [pc, #200]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80032ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80032f2:	e019      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3304      	adds	r3, #4
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 f8b4 	bl	8004468 <RCCEx_PLL2_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003304:	e010      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3324      	adds	r3, #36	; 0x24
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f001 f95d 	bl	80045cc <RCCEx_PLL3_Config>
 8003312:	4603      	mov	r3, r0
 8003314:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003316:	e007      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	75fb      	strb	r3, [r7, #23]
      break;
 800331c:	e004      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800331e:	bf00      	nop
 8003320:	e002      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003322:	bf00      	nop
 8003324:	e000      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800332e:	4b21      	ldr	r3, [pc, #132]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003332:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	491e      	ldr	r1, [pc, #120]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800333c:	4313      	orrs	r3, r2
 800333e:	650b      	str	r3, [r1, #80]	; 0x50
 8003340:	e001      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003342:	7dfb      	ldrb	r3, [r7, #23]
 8003344:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d034      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003356:	2b30      	cmp	r3, #48	; 0x30
 8003358:	d01c      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800335a:	2b30      	cmp	r3, #48	; 0x30
 800335c:	d817      	bhi.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800335e:	2b20      	cmp	r3, #32
 8003360:	d00c      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003362:	2b20      	cmp	r3, #32
 8003364:	d813      	bhi.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d016      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800336a:	2b10      	cmp	r3, #16
 800336c:	d10f      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800336e:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	4a10      	ldr	r2, [pc, #64]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003378:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800337a:	e00e      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3304      	adds	r3, #4
 8003380:	2102      	movs	r1, #2
 8003382:	4618      	mov	r0, r3
 8003384:	f001 f870 	bl	8004468 <RCCEx_PLL2_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800338c:	e005      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	75fb      	strb	r3, [r7, #23]
      break;
 8003392:	e002      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003394:	bf00      	nop
 8003396:	e000      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003398:	bf00      	nop
    }

    if(ret == HAL_OK)
 800339a:	7dfb      	ldrb	r3, [r7, #23]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10b      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ac:	4901      	ldr	r1, [pc, #4]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80033b2:	e003      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80033b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d047      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033d0:	d030      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80033d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033d6:	d82a      	bhi.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80033d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033dc:	d02c      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80033de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033e2:	d824      	bhi.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80033e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e8:	d018      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x348>
 80033ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ee:	d81e      	bhi.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x328>
 80033f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f8:	d007      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x336>
 80033fa:	e018      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033fc:	4bb0      	ldr	r3, [pc, #704]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	4aaf      	ldr	r2, [pc, #700]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003406:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003408:	e017      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3304      	adds	r3, #4
 800340e:	2100      	movs	r1, #0
 8003410:	4618      	mov	r0, r3
 8003412:	f001 f829 	bl	8004468 <RCCEx_PLL2_Config>
 8003416:	4603      	mov	r3, r0
 8003418:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800341a:	e00e      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3324      	adds	r3, #36	; 0x24
 8003420:	2100      	movs	r1, #0
 8003422:	4618      	mov	r0, r3
 8003424:	f001 f8d2 	bl	80045cc <RCCEx_PLL3_Config>
 8003428:	4603      	mov	r3, r0
 800342a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800342c:	e005      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	75fb      	strb	r3, [r7, #23]
      break;
 8003432:	e002      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003434:	bf00      	nop
 8003436:	e000      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800343a:	7dfb      	ldrb	r3, [r7, #23]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003440:	4b9f      	ldr	r3, [pc, #636]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003444:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344c:	499c      	ldr	r1, [pc, #624]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800344e:	4313      	orrs	r3, r2
 8003450:	650b      	str	r3, [r1, #80]	; 0x50
 8003452:	e001      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003454:	7dfb      	ldrb	r3, [r7, #23]
 8003456:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d049      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800346c:	d02e      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800346e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003472:	d828      	bhi.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003474:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003478:	d02a      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800347a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800347e:	d822      	bhi.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003480:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003484:	d026      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003486:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800348a:	d81c      	bhi.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800348c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003490:	d010      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003492:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003496:	d816      	bhi.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01d      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800349c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a0:	d111      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3304      	adds	r3, #4
 80034a6:	2101      	movs	r1, #1
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 ffdd 	bl	8004468 <RCCEx_PLL2_Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80034b2:	e012      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3324      	adds	r3, #36	; 0x24
 80034b8:	2101      	movs	r1, #1
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 f886 	bl	80045cc <RCCEx_PLL3_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80034c4:	e009      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	75fb      	strb	r3, [r7, #23]
      break;
 80034ca:	e006      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80034cc:	bf00      	nop
 80034ce:	e004      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80034d0:	bf00      	nop
 80034d2:	e002      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80034d4:	bf00      	nop
 80034d6:	e000      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80034d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034da:	7dfb      	ldrb	r3, [r7, #23]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d109      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80034e0:	4b77      	ldr	r3, [pc, #476]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80034e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ec:	4974      	ldr	r1, [pc, #464]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	650b      	str	r3, [r1, #80]	; 0x50
 80034f2:	e001      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
 80034f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d053      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800350a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800350e:	d034      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003510:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003514:	d82e      	bhi.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003516:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800351a:	d030      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800351c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003520:	d828      	bhi.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003526:	d02c      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352c:	d822      	bhi.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800352e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003532:	d028      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003534:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003538:	d81c      	bhi.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800353a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800353e:	d010      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8003540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003544:	d816      	bhi.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01f      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800354a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800354e:	d111      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3304      	adds	r3, #4
 8003554:	2101      	movs	r1, #1
 8003556:	4618      	mov	r0, r3
 8003558:	f000 ff86 	bl	8004468 <RCCEx_PLL2_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003560:	e014      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3324      	adds	r3, #36	; 0x24
 8003566:	2101      	movs	r1, #1
 8003568:	4618      	mov	r0, r3
 800356a:	f001 f82f 	bl	80045cc <RCCEx_PLL3_Config>
 800356e:	4603      	mov	r3, r0
 8003570:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003572:	e00b      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	75fb      	strb	r3, [r7, #23]
      break;
 8003578:	e008      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800357a:	bf00      	nop
 800357c:	e006      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800357e:	bf00      	nop
 8003580:	e004      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003582:	bf00      	nop
 8003584:	e002      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800358a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10a      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003592:	4b4b      	ldr	r3, [pc, #300]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003596:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035a0:	4947      	ldr	r1, [pc, #284]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	658b      	str	r3, [r1, #88]	; 0x58
 80035a6:	e001      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
 80035aa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d02f      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035c0:	d00e      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80035c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035c6:	d814      	bhi.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d015      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80035cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035d0:	d10f      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d2:	4b3b      	ldr	r3, [pc, #236]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	4a3a      	ldr	r2, [pc, #232]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80035d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80035de:	e00c      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3304      	adds	r3, #4
 80035e4:	2101      	movs	r1, #1
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 ff3e 	bl	8004468 <RCCEx_PLL2_Config>
 80035ec:	4603      	mov	r3, r0
 80035ee:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80035f0:	e003      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	75fb      	strb	r3, [r7, #23]
      break;
 80035f6:	e000      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80035f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d109      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003600:	4b2f      	ldr	r3, [pc, #188]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003604:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360c:	492c      	ldr	r1, [pc, #176]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800360e:	4313      	orrs	r3, r2
 8003610:	650b      	str	r3, [r1, #80]	; 0x50
 8003612:	e001      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003614:	7dfb      	ldrb	r3, [r7, #23]
 8003616:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d032      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	2b03      	cmp	r3, #3
 800362a:	d81b      	bhi.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x590>
 800362c:	a201      	add	r2, pc, #4	; (adr r2, 8003634 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003632:	bf00      	nop
 8003634:	0800366b 	.word	0x0800366b
 8003638:	08003645 	.word	0x08003645
 800363c:	08003653 	.word	0x08003653
 8003640:	0800366b 	.word	0x0800366b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003644:	4b1e      	ldr	r3, [pc, #120]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	4a1d      	ldr	r2, [pc, #116]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800364a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003650:	e00c      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3304      	adds	r3, #4
 8003656:	2102      	movs	r1, #2
 8003658:	4618      	mov	r0, r3
 800365a:	f000 ff05 	bl	8004468 <RCCEx_PLL2_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003662:	e003      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	75fb      	strb	r3, [r7, #23]
      break;
 8003668:	e000      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 800366a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800366c:	7dfb      	ldrb	r3, [r7, #23]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003672:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003676:	f023 0203 	bic.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	4910      	ldr	r1, [pc, #64]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003680:	4313      	orrs	r3, r2
 8003682:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003684:	e001      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003686:	7dfb      	ldrb	r3, [r7, #23]
 8003688:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 808a 	beq.w	80037ac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003698:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800369e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036a4:	f7fd fcb8 	bl	8001018 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036aa:	e00d      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ac:	f7fd fcb4 	bl	8001018 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b64      	cmp	r3, #100	; 0x64
 80036b8:	d906      	bls.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	75fb      	strb	r3, [r7, #23]
        break;
 80036be:	e009      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x600>
 80036c0:	58024400 	.word	0x58024400
 80036c4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036c8:	4bba      	ldr	r3, [pc, #744]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0eb      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d166      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80036da:	4bb7      	ldr	r3, [pc, #732]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80036dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036e4:	4053      	eors	r3, r2
 80036e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d013      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036ee:	4bb2      	ldr	r3, [pc, #712]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036f8:	4baf      	ldr	r3, [pc, #700]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fc:	4aae      	ldr	r2, [pc, #696]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80036fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003702:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003704:	4bac      	ldr	r3, [pc, #688]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	4aab      	ldr	r2, [pc, #684]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800370a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800370e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003710:	4aa9      	ldr	r2, [pc, #676]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800371c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003720:	d115      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7fd fc79 	bl	8001018 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003728:	e00b      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372a:	f7fd fc75 	bl	8001018 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f241 3288 	movw	r2, #5000	; 0x1388
 8003738:	4293      	cmp	r3, r2
 800373a:	d902      	bls.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	75fb      	strb	r3, [r7, #23]
            break;
 8003740:	e005      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003742:	4b9d      	ldr	r3, [pc, #628]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0ed      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d126      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800375a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003762:	d10d      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003764:	4b94      	ldr	r3, [pc, #592]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003772:	0919      	lsrs	r1, r3, #4
 8003774:	4b91      	ldr	r3, [pc, #580]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003776:	400b      	ands	r3, r1
 8003778:	498f      	ldr	r1, [pc, #572]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	610b      	str	r3, [r1, #16]
 800377e:	e005      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003780:	4b8d      	ldr	r3, [pc, #564]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	4a8c      	ldr	r2, [pc, #560]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003786:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800378a:	6113      	str	r3, [r2, #16]
 800378c:	4b8a      	ldr	r3, [pc, #552]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800378e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379a:	4987      	ldr	r1, [pc, #540]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800379c:	4313      	orrs	r3, r2
 800379e:	670b      	str	r3, [r1, #112]	; 0x70
 80037a0:	e004      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037a2:	7dfb      	ldrb	r3, [r7, #23]
 80037a4:	75bb      	strb	r3, [r7, #22]
 80037a6:	e001      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a8:	7dfb      	ldrb	r3, [r7, #23]
 80037aa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d07f      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037be:	2b28      	cmp	r3, #40	; 0x28
 80037c0:	d866      	bhi.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80037c2:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80037c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c8:	08003897 	.word	0x08003897
 80037cc:	08003891 	.word	0x08003891
 80037d0:	08003891 	.word	0x08003891
 80037d4:	08003891 	.word	0x08003891
 80037d8:	08003891 	.word	0x08003891
 80037dc:	08003891 	.word	0x08003891
 80037e0:	08003891 	.word	0x08003891
 80037e4:	08003891 	.word	0x08003891
 80037e8:	0800386d 	.word	0x0800386d
 80037ec:	08003891 	.word	0x08003891
 80037f0:	08003891 	.word	0x08003891
 80037f4:	08003891 	.word	0x08003891
 80037f8:	08003891 	.word	0x08003891
 80037fc:	08003891 	.word	0x08003891
 8003800:	08003891 	.word	0x08003891
 8003804:	08003891 	.word	0x08003891
 8003808:	0800387f 	.word	0x0800387f
 800380c:	08003891 	.word	0x08003891
 8003810:	08003891 	.word	0x08003891
 8003814:	08003891 	.word	0x08003891
 8003818:	08003891 	.word	0x08003891
 800381c:	08003891 	.word	0x08003891
 8003820:	08003891 	.word	0x08003891
 8003824:	08003891 	.word	0x08003891
 8003828:	08003897 	.word	0x08003897
 800382c:	08003891 	.word	0x08003891
 8003830:	08003891 	.word	0x08003891
 8003834:	08003891 	.word	0x08003891
 8003838:	08003891 	.word	0x08003891
 800383c:	08003891 	.word	0x08003891
 8003840:	08003891 	.word	0x08003891
 8003844:	08003891 	.word	0x08003891
 8003848:	08003897 	.word	0x08003897
 800384c:	08003891 	.word	0x08003891
 8003850:	08003891 	.word	0x08003891
 8003854:	08003891 	.word	0x08003891
 8003858:	08003891 	.word	0x08003891
 800385c:	08003891 	.word	0x08003891
 8003860:	08003891 	.word	0x08003891
 8003864:	08003891 	.word	0x08003891
 8003868:	08003897 	.word	0x08003897
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3304      	adds	r3, #4
 8003870:	2101      	movs	r1, #1
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fdf8 	bl	8004468 <RCCEx_PLL2_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800387c:	e00c      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3324      	adds	r3, #36	; 0x24
 8003882:	2101      	movs	r1, #1
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fea1 	bl	80045cc <RCCEx_PLL3_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800388e:	e003      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	75fb      	strb	r3, [r7, #23]
      break;
 8003894:	e000      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003898:	7dfb      	ldrb	r3, [r7, #23]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10a      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800389e:	4b46      	ldr	r3, [pc, #280]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ac:	4942      	ldr	r1, [pc, #264]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	654b      	str	r3, [r1, #84]	; 0x54
 80038b2:	e001      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d038      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038c8:	2b05      	cmp	r3, #5
 80038ca:	d821      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80038cc:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80038ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d2:	bf00      	nop
 80038d4:	08003917 	.word	0x08003917
 80038d8:	080038ed 	.word	0x080038ed
 80038dc:	080038ff 	.word	0x080038ff
 80038e0:	08003917 	.word	0x08003917
 80038e4:	08003917 	.word	0x08003917
 80038e8:	08003917 	.word	0x08003917
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3304      	adds	r3, #4
 80038f0:	2101      	movs	r1, #1
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fdb8 	bl	8004468 <RCCEx_PLL2_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80038fc:	e00c      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3324      	adds	r3, #36	; 0x24
 8003902:	2101      	movs	r1, #1
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fe61 	bl	80045cc <RCCEx_PLL3_Config>
 800390a:	4603      	mov	r3, r0
 800390c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800390e:	e003      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	75fb      	strb	r3, [r7, #23]
      break;
 8003914:	e000      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800391e:	4b26      	ldr	r3, [pc, #152]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003922:	f023 0207 	bic.w	r2, r3, #7
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800392a:	4923      	ldr	r1, [pc, #140]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800392c:	4313      	orrs	r3, r2
 800392e:	654b      	str	r3, [r1, #84]	; 0x54
 8003930:	e001      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003932:	7dfb      	ldrb	r3, [r7, #23]
 8003934:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	d040      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003948:	2b05      	cmp	r3, #5
 800394a:	d821      	bhi.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800394c:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003952:	bf00      	nop
 8003954:	08003997 	.word	0x08003997
 8003958:	0800396d 	.word	0x0800396d
 800395c:	0800397f 	.word	0x0800397f
 8003960:	08003997 	.word	0x08003997
 8003964:	08003997 	.word	0x08003997
 8003968:	08003997 	.word	0x08003997
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fd78 	bl	8004468 <RCCEx_PLL2_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800397c:	e00c      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3324      	adds	r3, #36	; 0x24
 8003982:	2101      	movs	r1, #1
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fe21 	bl	80045cc <RCCEx_PLL3_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800398e:	e003      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	75fb      	strb	r3, [r7, #23]
      break;
 8003994:	e000      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003996:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d110      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a2:	f023 0207 	bic.w	r2, r3, #7
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039ac:	4902      	ldr	r1, [pc, #8]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	658b      	str	r3, [r1, #88]	; 0x58
 80039b2:	e007      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80039b4:	58024800 	.word	0x58024800
 80039b8:	58024400 	.word	0x58024400
 80039bc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
 80039c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d04b      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039da:	d02e      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x966>
 80039dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039e0:	d828      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80039e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e6:	d02a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80039e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ec:	d822      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80039ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039f2:	d026      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80039f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039f8:	d81c      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80039fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039fe:	d010      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a04:	d816      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d01d      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a0e:	d111      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3304      	adds	r3, #4
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fd26 	bl	8004468 <RCCEx_PLL2_Config>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003a20:	e012      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3324      	adds	r3, #36	; 0x24
 8003a26:	2102      	movs	r1, #2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fdcf 	bl	80045cc <RCCEx_PLL3_Config>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003a32:	e009      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	75fb      	strb	r3, [r7, #23]
      break;
 8003a38:	e006      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003a3a:	bf00      	nop
 8003a3c:	e004      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003a3e:	bf00      	nop
 8003a40:	e002      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003a42:	bf00      	nop
 8003a44:	e000      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003a46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10a      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a4e:	4bb3      	ldr	r3, [pc, #716]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a52:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a5c:	49af      	ldr	r1, [pc, #700]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	654b      	str	r3, [r1, #84]	; 0x54
 8003a62:	e001      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a64:	7dfb      	ldrb	r3, [r7, #23]
 8003a66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d04b      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a7a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a7e:	d02e      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003a80:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a84:	d828      	bhi.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8a:	d02a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a90:	d822      	bhi.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003a92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a96:	d026      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003a98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a9c:	d81c      	bhi.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa2:	d010      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa8:	d816      	bhi.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d01d      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab2:	d111      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fcd4 	bl	8004468 <RCCEx_PLL2_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ac4:	e012      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3324      	adds	r3, #36	; 0x24
 8003aca:	2102      	movs	r1, #2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fd7d 	bl	80045cc <RCCEx_PLL3_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ad6:	e009      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	75fb      	strb	r3, [r7, #23]
      break;
 8003adc:	e006      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e004      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e002      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003ae6:	bf00      	nop
 8003ae8:	e000      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003af2:	4b8a      	ldr	r3, [pc, #552]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b00:	4986      	ldr	r1, [pc, #536]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	658b      	str	r3, [r1, #88]	; 0x58
 8003b06:	e001      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d04b      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b1e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b22:	d02e      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003b24:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b28:	d828      	bhi.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b2e:	d02a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b34:	d822      	bhi.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003b36:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b3a:	d026      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003b3c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b40:	d81c      	bhi.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003b42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b46:	d010      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b4c:	d816      	bhi.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d01d      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b56:	d111      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fc82 	bl	8004468 <RCCEx_PLL2_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003b68:	e012      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3324      	adds	r3, #36	; 0x24
 8003b6e:	2102      	movs	r1, #2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 fd2b 	bl	80045cc <RCCEx_PLL3_Config>
 8003b76:	4603      	mov	r3, r0
 8003b78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003b7a:	e009      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b80:	e006      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003b82:	bf00      	nop
 8003b84:	e004      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003b86:	bf00      	nop
 8003b88:	e002      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003b8a:	bf00      	nop
 8003b8c:	e000      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10a      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b96:	4b61      	ldr	r3, [pc, #388]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ba4:	495d      	ldr	r1, [pc, #372]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	658b      	str	r3, [r1, #88]	; 0x58
 8003baa:	e001      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
 8003bae:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc6:	d10a      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3324      	adds	r3, #36	; 0x24
 8003bcc:	2102      	movs	r1, #2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fcfc 	bl	80045cc <RCCEx_PLL3_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003bde:	4b4f      	ldr	r3, [pc, #316]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bec:	494b      	ldr	r1, [pc, #300]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d01a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c08:	d10a      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3324      	adds	r3, #36	; 0x24
 8003c0e:	2102      	movs	r1, #2
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fcdb 	bl	80045cc <RCCEx_PLL3_Config>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c20:	4b3e      	ldr	r3, [pc, #248]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c2e:	493b      	ldr	r1, [pc, #236]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d034      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c4a:	d01d      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003c4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c50:	d817      	bhi.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5a:	d009      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003c5c:	e011      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3304      	adds	r3, #4
 8003c62:	2100      	movs	r1, #0
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 fbff 	bl	8004468 <RCCEx_PLL2_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003c6e:	e00c      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3324      	adds	r3, #36	; 0x24
 8003c74:	2102      	movs	r1, #2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fca8 	bl	80045cc <RCCEx_PLL3_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003c80:	e003      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	75fb      	strb	r3, [r7, #23]
      break;
 8003c86:	e000      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c90:	4b22      	ldr	r3, [pc, #136]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c9e:	491f      	ldr	r1, [pc, #124]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	658b      	str	r3, [r1, #88]	; 0x58
 8003ca4:	e001      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca6:	7dfb      	ldrb	r3, [r7, #23]
 8003ca8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d036      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cc0:	d01c      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003cc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cc6:	d816      	bhi.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ccc:	d003      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003cce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cd2:	d007      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003cd4:	e00f      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	4a10      	ldr	r2, [pc, #64]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003ce2:	e00c      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3324      	adds	r3, #36	; 0x24
 8003ce8:	2101      	movs	r1, #1
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fc6e 	bl	80045cc <RCCEx_PLL3_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003cf4:	e003      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8003cfa:	e000      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cfe:	7dfb      	ldrb	r3, [r7, #23]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10d      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d12:	4902      	ldr	r1, [pc, #8]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	654b      	str	r3, [r1, #84]	; 0x54
 8003d18:	e004      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8003d1a:	bf00      	nop
 8003d1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
 8003d22:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d029      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3c:	d007      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8003d3e:	e00f      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d40:	4b69      	ldr	r3, [pc, #420]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	4a68      	ldr	r2, [pc, #416]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003d4c:	e00b      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3304      	adds	r3, #4
 8003d52:	2102      	movs	r1, #2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fb87 	bl	8004468 <RCCEx_PLL2_Config>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003d5e:	e002      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	75fb      	strb	r3, [r7, #23]
      break;
 8003d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d109      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d6c:	4b5e      	ldr	r3, [pc, #376]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d78:	495b      	ldr	r1, [pc, #364]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d7e:	e001      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
 8003d82:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3324      	adds	r3, #36	; 0x24
 8003d94:	2102      	movs	r1, #2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fc18 	bl	80045cc <RCCEx_PLL3_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d032      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dbc:	d017      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8003dbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dc2:	d811      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc8:	d013      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8003dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dce:	d80b      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d010      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8003dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd8:	d106      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dda:	4b43      	ldr	r3, [pc, #268]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	4a42      	ldr	r2, [pc, #264]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003de6:	e007      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	75fb      	strb	r3, [r7, #23]
      break;
 8003dec:	e004      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003dee:	bf00      	nop
 8003df0:	e002      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003df2:	bf00      	nop
 8003df4:	e000      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003df6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10a      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dfe:	4b3a      	ldr	r3, [pc, #232]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0c:	4936      	ldr	r1, [pc, #216]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	654b      	str	r3, [r1, #84]	; 0x54
 8003e12:	e001      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e14:	7dfb      	ldrb	r3, [r7, #23]
 8003e16:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e24:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e30:	492d      	ldr	r1, [pc, #180]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e42:	4b29      	ldr	r3, [pc, #164]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e46:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e4e:	4926      	ldr	r1, [pc, #152]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003e60:	4b21      	ldr	r3, [pc, #132]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e64:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	491e      	ldr	r1, [pc, #120]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00d      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	4a19      	ldr	r2, [pc, #100]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e88:	6113      	str	r3, [r2, #16]
 8003e8a:	4b17      	ldr	r3, [pc, #92]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e94:	4914      	ldr	r1, [pc, #80]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	da08      	bge.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003ea2:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eae:	490e      	ldr	r1, [pc, #56]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d009      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ec0:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ece:	4906      	ldr	r1, [pc, #24]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003ed4:	7dbb      	ldrb	r3, [r7, #22]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e000      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	58024400 	.word	0x58024400

08003eec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003ef0:	f7ff f852 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	091b      	lsrs	r3, r3, #4
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	4904      	ldr	r1, [pc, #16]	; (8003f14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003f02:	5ccb      	ldrb	r3, [r1, r3]
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	58024400 	.word	0x58024400
 8003f14:	0800a854 	.word	0x0800a854

08003f18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b089      	sub	sp, #36	; 0x24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f20:	4ba1      	ldr	r3, [pc, #644]	; (80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003f2a:	4b9f      	ldr	r3, [pc, #636]	; (80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	0b1b      	lsrs	r3, r3, #12
 8003f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f36:	4b9c      	ldr	r3, [pc, #624]	; (80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	091b      	lsrs	r3, r3, #4
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003f42:	4b99      	ldr	r3, [pc, #612]	; (80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f46:	08db      	lsrs	r3, r3, #3
 8003f48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8111 	beq.w	8004188 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	f000 8083 	beq.w	8004074 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	f200 80a1 	bhi.w	80040b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d056      	beq.n	8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003f82:	e099      	b.n	80040b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f84:	4b88      	ldr	r3, [pc, #544]	; (80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d02d      	beq.n	8003fec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f90:	4b85      	ldr	r3, [pc, #532]	; (80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	08db      	lsrs	r3, r3, #3
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	4a84      	ldr	r2, [pc, #528]	; (80041ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	ee07 3a90 	vmov	s15, r3
 8003fa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fba:	4b7b      	ldr	r3, [pc, #492]	; (80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003fea:	e087      	b.n	80040fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80041b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ffe:	4b6a      	ldr	r3, [pc, #424]	; (80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004012:	eddf 5a67 	vldr	s11, [pc, #412]	; 80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800401a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800401e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800402e:	e065      	b.n	80040fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	ee07 3a90 	vmov	s15, r3
 8004036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800403a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800403e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004042:	4b59      	ldr	r3, [pc, #356]	; (80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004052:	ed97 6a03 	vldr	s12, [r7, #12]
 8004056:	eddf 5a56 	vldr	s11, [pc, #344]	; 80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800405a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800405e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800406a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004072:	e043      	b.n	80040fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004086:	4b48      	ldr	r3, [pc, #288]	; (80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408e:	ee07 3a90 	vmov	s15, r3
 8004092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004096:	ed97 6a03 	vldr	s12, [r7, #12]
 800409a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800409e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040b6:	e021      	b.n	80040fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80040c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ca:	4b37      	ldr	r3, [pc, #220]	; (80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d2:	ee07 3a90 	vmov	s15, r3
 80040d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040da:	ed97 6a03 	vldr	s12, [r7, #12]
 80040de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80040fc:	4b2a      	ldr	r3, [pc, #168]	; (80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004100:	0a5b      	lsrs	r3, r3, #9
 8004102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004112:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004116:	edd7 6a07 	vldr	s13, [r7, #28]
 800411a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800411e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004122:	ee17 2a90 	vmov	r2, s15
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800412a:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	0c1b      	lsrs	r3, r3, #16
 8004130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004134:	ee07 3a90 	vmov	s15, r3
 8004138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800413c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004140:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004144:	edd7 6a07 	vldr	s13, [r7, #28]
 8004148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800414c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004150:	ee17 2a90 	vmov	r2, s15
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004158:	4b13      	ldr	r3, [pc, #76]	; (80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	0e1b      	lsrs	r3, r3, #24
 800415e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004162:	ee07 3a90 	vmov	s15, r3
 8004166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800416e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004172:	edd7 6a07 	vldr	s13, [r7, #28]
 8004176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800417a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800417e:	ee17 2a90 	vmov	r2, s15
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004186:	e008      	b.n	800419a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	609a      	str	r2, [r3, #8]
}
 800419a:	bf00      	nop
 800419c:	3724      	adds	r7, #36	; 0x24
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	58024400 	.word	0x58024400
 80041ac:	03d09000 	.word	0x03d09000
 80041b0:	46000000 	.word	0x46000000
 80041b4:	4c742400 	.word	0x4c742400
 80041b8:	4a742400 	.word	0x4a742400
 80041bc:	4af42400 	.word	0x4af42400

080041c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b089      	sub	sp, #36	; 0x24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041c8:	4ba1      	ldr	r3, [pc, #644]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80041d2:	4b9f      	ldr	r3, [pc, #636]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	0d1b      	lsrs	r3, r3, #20
 80041d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80041de:	4b9c      	ldr	r3, [pc, #624]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	0a1b      	lsrs	r3, r3, #8
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80041ea:	4b99      	ldr	r3, [pc, #612]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ee:	08db      	lsrs	r3, r3, #3
 80041f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	fb02 f303 	mul.w	r3, r2, r3
 80041fa:	ee07 3a90 	vmov	s15, r3
 80041fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004202:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8111 	beq.w	8004430 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2b02      	cmp	r3, #2
 8004212:	f000 8083 	beq.w	800431c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	2b02      	cmp	r3, #2
 800421a:	f200 80a1 	bhi.w	8004360 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d056      	beq.n	80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800422a:	e099      	b.n	8004360 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800422c:	4b88      	ldr	r3, [pc, #544]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d02d      	beq.n	8004294 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004238:	4b85      	ldr	r3, [pc, #532]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	08db      	lsrs	r3, r3, #3
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	4a84      	ldr	r2, [pc, #528]	; (8004454 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
 8004248:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	ee07 3a90 	vmov	s15, r3
 8004250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004262:	4b7b      	ldr	r3, [pc, #492]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004272:	ed97 6a03 	vldr	s12, [r7, #12]
 8004276:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800427a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800427e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800428a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004292:	e087      	b.n	80043a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800445c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80042a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042a6:	4b6a      	ldr	r3, [pc, #424]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80042ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042d6:	e065      	b.n	80043a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004460 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80042e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ea:	4b59      	ldr	r3, [pc, #356]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80042fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800430a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800430e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004316:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800431a:	e043      	b.n	80043a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004326:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800432a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800432e:	4b48      	ldr	r3, [pc, #288]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004342:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800434a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800434e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800435e:	e021      	b.n	80043a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004460 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800436e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004372:	4b37      	ldr	r3, [pc, #220]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004382:	ed97 6a03 	vldr	s12, [r7, #12]
 8004386:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800438a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800438e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800439a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80043a4:	4b2a      	ldr	r3, [pc, #168]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	0a5b      	lsrs	r3, r3, #9
 80043aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043be:	edd7 6a07 	vldr	s13, [r7, #28]
 80043c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ca:	ee17 2a90 	vmov	r2, s15
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80043d2:	4b1f      	ldr	r3, [pc, #124]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	0c1b      	lsrs	r3, r3, #16
 80043d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043dc:	ee07 3a90 	vmov	s15, r3
 80043e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80043f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043f8:	ee17 2a90 	vmov	r2, s15
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004400:	4b13      	ldr	r3, [pc, #76]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	0e1b      	lsrs	r3, r3, #24
 8004406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004412:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004416:	ee37 7a87 	vadd.f32	s14, s15, s14
 800441a:	edd7 6a07 	vldr	s13, [r7, #28]
 800441e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004426:	ee17 2a90 	vmov	r2, s15
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800442e:	e008      	b.n	8004442 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	609a      	str	r2, [r3, #8]
}
 8004442:	bf00      	nop
 8004444:	3724      	adds	r7, #36	; 0x24
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	58024400 	.word	0x58024400
 8004454:	03d09000 	.word	0x03d09000
 8004458:	46000000 	.word	0x46000000
 800445c:	4c742400 	.word	0x4c742400
 8004460:	4a742400 	.word	0x4a742400
 8004464:	4af42400 	.word	0x4af42400

08004468 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004476:	4b53      	ldr	r3, [pc, #332]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	2b03      	cmp	r3, #3
 8004480:	d101      	bne.n	8004486 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e099      	b.n	80045ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004486:	4b4f      	ldr	r3, [pc, #316]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a4e      	ldr	r2, [pc, #312]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 800448c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004492:	f7fc fdc1 	bl	8001018 <HAL_GetTick>
 8004496:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004498:	e008      	b.n	80044ac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800449a:	f7fc fdbd 	bl	8001018 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e086      	b.n	80045ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044ac:	4b45      	ldr	r3, [pc, #276]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f0      	bne.n	800449a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80044b8:	4b42      	ldr	r3, [pc, #264]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	031b      	lsls	r3, r3, #12
 80044c6:	493f      	ldr	r1, [pc, #252]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	628b      	str	r3, [r1, #40]	; 0x28
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	3b01      	subs	r3, #1
 80044d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	3b01      	subs	r3, #1
 80044dc:	025b      	lsls	r3, r3, #9
 80044de:	b29b      	uxth	r3, r3
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	041b      	lsls	r3, r3, #16
 80044ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	061b      	lsls	r3, r3, #24
 80044f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044fc:	4931      	ldr	r1, [pc, #196]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004502:	4b30      	ldr	r3, [pc, #192]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	492d      	ldr	r1, [pc, #180]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 8004510:	4313      	orrs	r3, r2
 8004512:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004514:	4b2b      	ldr	r3, [pc, #172]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	f023 0220 	bic.w	r2, r3, #32
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	4928      	ldr	r1, [pc, #160]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 8004522:	4313      	orrs	r3, r2
 8004524:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004526:	4b27      	ldr	r3, [pc, #156]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	4a26      	ldr	r2, [pc, #152]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 800452c:	f023 0310 	bic.w	r3, r3, #16
 8004530:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004532:	4b24      	ldr	r3, [pc, #144]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 8004534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004536:	4b24      	ldr	r3, [pc, #144]	; (80045c8 <RCCEx_PLL2_Config+0x160>)
 8004538:	4013      	ands	r3, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	69d2      	ldr	r2, [r2, #28]
 800453e:	00d2      	lsls	r2, r2, #3
 8004540:	4920      	ldr	r1, [pc, #128]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 8004542:	4313      	orrs	r3, r2
 8004544:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004546:	4b1f      	ldr	r3, [pc, #124]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	4a1e      	ldr	r2, [pc, #120]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 800454c:	f043 0310 	orr.w	r3, r3, #16
 8004550:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d106      	bne.n	8004566 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004558:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	4a19      	ldr	r2, [pc, #100]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 800455e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004562:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004564:	e00f      	b.n	8004586 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d106      	bne.n	800457a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800456c:	4b15      	ldr	r3, [pc, #84]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	4a14      	ldr	r2, [pc, #80]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 8004572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004576:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004578:	e005      	b.n	8004586 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800457a:	4b12      	ldr	r3, [pc, #72]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	4a11      	ldr	r2, [pc, #68]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 8004580:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004584:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004586:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a0e      	ldr	r2, [pc, #56]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 800458c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004592:	f7fc fd41 	bl	8001018 <HAL_GetTick>
 8004596:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004598:	e008      	b.n	80045ac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800459a:	f7fc fd3d 	bl	8001018 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e006      	b.n	80045ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <RCCEx_PLL2_Config+0x15c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	58024400 	.word	0x58024400
 80045c8:	ffff0007 	.word	0xffff0007

080045cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045da:	4b53      	ldr	r3, [pc, #332]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 80045dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d101      	bne.n	80045ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e099      	b.n	800471e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80045ea:	4b4f      	ldr	r3, [pc, #316]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a4e      	ldr	r2, [pc, #312]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 80045f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f6:	f7fc fd0f 	bl	8001018 <HAL_GetTick>
 80045fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045fc:	e008      	b.n	8004610 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80045fe:	f7fc fd0b 	bl	8001018 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e086      	b.n	800471e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004610:	4b45      	ldr	r3, [pc, #276]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f0      	bne.n	80045fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800461c:	4b42      	ldr	r3, [pc, #264]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	051b      	lsls	r3, r3, #20
 800462a:	493f      	ldr	r1, [pc, #252]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 800462c:	4313      	orrs	r3, r2
 800462e:	628b      	str	r3, [r1, #40]	; 0x28
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	3b01      	subs	r3, #1
 8004636:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	3b01      	subs	r3, #1
 8004640:	025b      	lsls	r3, r3, #9
 8004642:	b29b      	uxth	r3, r3
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	3b01      	subs	r3, #1
 800464c:	041b      	lsls	r3, r3, #16
 800464e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	3b01      	subs	r3, #1
 800465a:	061b      	lsls	r3, r3, #24
 800465c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004660:	4931      	ldr	r1, [pc, #196]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 8004662:	4313      	orrs	r3, r2
 8004664:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004666:	4b30      	ldr	r3, [pc, #192]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	492d      	ldr	r1, [pc, #180]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 8004674:	4313      	orrs	r3, r2
 8004676:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004678:	4b2b      	ldr	r3, [pc, #172]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	4928      	ldr	r1, [pc, #160]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 8004686:	4313      	orrs	r3, r2
 8004688:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800468a:	4b27      	ldr	r3, [pc, #156]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	4a26      	ldr	r2, [pc, #152]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 8004690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004694:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004696:	4b24      	ldr	r3, [pc, #144]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 8004698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800469a:	4b24      	ldr	r3, [pc, #144]	; (800472c <RCCEx_PLL3_Config+0x160>)
 800469c:	4013      	ands	r3, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	69d2      	ldr	r2, [r2, #28]
 80046a2:	00d2      	lsls	r2, r2, #3
 80046a4:	4920      	ldr	r1, [pc, #128]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80046aa:	4b1f      	ldr	r3, [pc, #124]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	4a1e      	ldr	r2, [pc, #120]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 80046b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d106      	bne.n	80046ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80046bc:	4b1a      	ldr	r3, [pc, #104]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	4a19      	ldr	r2, [pc, #100]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 80046c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046c8:	e00f      	b.n	80046ea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d106      	bne.n	80046de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80046d0:	4b15      	ldr	r3, [pc, #84]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	4a14      	ldr	r2, [pc, #80]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 80046d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046dc:	e005      	b.n	80046ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80046de:	4b12      	ldr	r3, [pc, #72]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	4a11      	ldr	r2, [pc, #68]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 80046e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80046ea:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a0e      	ldr	r2, [pc, #56]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 80046f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f6:	f7fc fc8f 	bl	8001018 <HAL_GetTick>
 80046fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046fc:	e008      	b.n	8004710 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80046fe:	f7fc fc8b 	bl	8001018 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e006      	b.n	800471e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <RCCEx_PLL3_Config+0x15c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f0      	beq.n	80046fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800471c:	7bfb      	ldrb	r3, [r7, #15]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	58024400 	.word	0x58024400
 800472c:	ffff0007 	.word	0xffff0007

08004730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e049      	b.n	80047d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f841 	bl	80047de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3304      	adds	r3, #4
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f000 fa00 	bl	8004b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
	...

080047f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	d001      	beq.n	800480c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e054      	b.n	80048b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a26      	ldr	r2, [pc, #152]	; (80048c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d022      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004836:	d01d      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a22      	ldr	r2, [pc, #136]	; (80048c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d018      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a21      	ldr	r2, [pc, #132]	; (80048cc <HAL_TIM_Base_Start_IT+0xd8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d013      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a1f      	ldr	r2, [pc, #124]	; (80048d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00e      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a1e      	ldr	r2, [pc, #120]	; (80048d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d009      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a1c      	ldr	r2, [pc, #112]	; (80048d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d004      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a1b      	ldr	r2, [pc, #108]	; (80048dc <HAL_TIM_Base_Start_IT+0xe8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d115      	bne.n	80048a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <HAL_TIM_Base_Start_IT+0xec>)
 800487c:	4013      	ands	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b06      	cmp	r3, #6
 8004884:	d015      	beq.n	80048b2 <HAL_TIM_Base_Start_IT+0xbe>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800488c:	d011      	beq.n	80048b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0201 	orr.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489e:	e008      	b.n	80048b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	e000      	b.n	80048b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40010000 	.word	0x40010000
 80048c8:	40000400 	.word	0x40000400
 80048cc:	40000800 	.word	0x40000800
 80048d0:	40000c00 	.word	0x40000c00
 80048d4:	40010400 	.word	0x40010400
 80048d8:	40001800 	.word	0x40001800
 80048dc:	40014000 	.word	0x40014000
 80048e0:	00010007 	.word	0x00010007

080048e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d122      	bne.n	8004940 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b02      	cmp	r3, #2
 8004906:	d11b      	bne.n	8004940 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0202 	mvn.w	r2, #2
 8004910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f905 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 800492c:	e005      	b.n	800493a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f8f7 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f908 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b04      	cmp	r3, #4
 800494c:	d122      	bne.n	8004994 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b04      	cmp	r3, #4
 800495a:	d11b      	bne.n	8004994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0204 	mvn.w	r2, #4
 8004964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2202      	movs	r2, #2
 800496a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f8db 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 8004980:	e005      	b.n	800498e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f8cd 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f8de 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d122      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d11b      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0208 	mvn.w	r2, #8
 80049b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2204      	movs	r2, #4
 80049be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f8b1 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 80049d4:	e005      	b.n	80049e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f8a3 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f8b4 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0310 	and.w	r3, r3, #16
 80049f2:	2b10      	cmp	r3, #16
 80049f4:	d122      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d11b      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0210 	mvn.w	r2, #16
 8004a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2208      	movs	r2, #8
 8004a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f887 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 8004a28:	e005      	b.n	8004a36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f879 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f88a 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d10e      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d107      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0201 	mvn.w	r2, #1
 8004a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fc f838 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a72:	2b80      	cmp	r3, #128	; 0x80
 8004a74:	d10e      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a80:	2b80      	cmp	r3, #128	; 0x80
 8004a82:	d107      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f914 	bl	8004cbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa2:	d10e      	bne.n	8004ac2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aae:	2b80      	cmp	r3, #128	; 0x80
 8004ab0:	d107      	bne.n	8004ac2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f907 	bl	8004cd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004acc:	2b40      	cmp	r3, #64	; 0x40
 8004ace:	d10e      	bne.n	8004aee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ada:	2b40      	cmp	r3, #64	; 0x40
 8004adc:	d107      	bne.n	8004aee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f838 	bl	8004b5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d10e      	bne.n	8004b1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d107      	bne.n	8004b1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f06f 0220 	mvn.w	r2, #32
 8004b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f8c7 	bl	8004ca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
	...

08004b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a40      	ldr	r2, [pc, #256]	; (8004c88 <TIM_Base_SetConfig+0x114>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d013      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b92:	d00f      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a3d      	ldr	r2, [pc, #244]	; (8004c8c <TIM_Base_SetConfig+0x118>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d00b      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a3c      	ldr	r2, [pc, #240]	; (8004c90 <TIM_Base_SetConfig+0x11c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d007      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a3b      	ldr	r2, [pc, #236]	; (8004c94 <TIM_Base_SetConfig+0x120>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d003      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a3a      	ldr	r2, [pc, #232]	; (8004c98 <TIM_Base_SetConfig+0x124>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d108      	bne.n	8004bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a2f      	ldr	r2, [pc, #188]	; (8004c88 <TIM_Base_SetConfig+0x114>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d01f      	beq.n	8004c0e <TIM_Base_SetConfig+0x9a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd4:	d01b      	beq.n	8004c0e <TIM_Base_SetConfig+0x9a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a2c      	ldr	r2, [pc, #176]	; (8004c8c <TIM_Base_SetConfig+0x118>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d017      	beq.n	8004c0e <TIM_Base_SetConfig+0x9a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a2b      	ldr	r2, [pc, #172]	; (8004c90 <TIM_Base_SetConfig+0x11c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d013      	beq.n	8004c0e <TIM_Base_SetConfig+0x9a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a2a      	ldr	r2, [pc, #168]	; (8004c94 <TIM_Base_SetConfig+0x120>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00f      	beq.n	8004c0e <TIM_Base_SetConfig+0x9a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a29      	ldr	r2, [pc, #164]	; (8004c98 <TIM_Base_SetConfig+0x124>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00b      	beq.n	8004c0e <TIM_Base_SetConfig+0x9a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a28      	ldr	r2, [pc, #160]	; (8004c9c <TIM_Base_SetConfig+0x128>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d007      	beq.n	8004c0e <TIM_Base_SetConfig+0x9a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a27      	ldr	r2, [pc, #156]	; (8004ca0 <TIM_Base_SetConfig+0x12c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d003      	beq.n	8004c0e <TIM_Base_SetConfig+0x9a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a26      	ldr	r2, [pc, #152]	; (8004ca4 <TIM_Base_SetConfig+0x130>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d108      	bne.n	8004c20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a10      	ldr	r2, [pc, #64]	; (8004c88 <TIM_Base_SetConfig+0x114>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00f      	beq.n	8004c6c <TIM_Base_SetConfig+0xf8>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a12      	ldr	r2, [pc, #72]	; (8004c98 <TIM_Base_SetConfig+0x124>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00b      	beq.n	8004c6c <TIM_Base_SetConfig+0xf8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a11      	ldr	r2, [pc, #68]	; (8004c9c <TIM_Base_SetConfig+0x128>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d007      	beq.n	8004c6c <TIM_Base_SetConfig+0xf8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a10      	ldr	r2, [pc, #64]	; (8004ca0 <TIM_Base_SetConfig+0x12c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d003      	beq.n	8004c6c <TIM_Base_SetConfig+0xf8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a0f      	ldr	r2, [pc, #60]	; (8004ca4 <TIM_Base_SetConfig+0x130>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d103      	bne.n	8004c74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	615a      	str	r2, [r3, #20]
}
 8004c7a:	bf00      	nop
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	40000800 	.word	0x40000800
 8004c94:	40000c00 	.word	0x40000c00
 8004c98:	40010400 	.word	0x40010400
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	40014400 	.word	0x40014400
 8004ca4:	40014800 	.word	0x40014800

08004ca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e042      	b.n	8004d7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7fc f875 	bl	8000df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2224      	movs	r2, #36	; 0x24
 8004d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0201 	bic.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fcd6 	bl	80056d8 <UART_SetConfig>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e022      	b.n	8004d7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f001 fb28 	bl	8006394 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f001 fbaf 	bl	80064d8 <UART_CheckIdleState>
 8004d7a:	4603      	mov	r3, r0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08a      	sub	sp, #40	; 0x28
 8004d88:	af02      	add	r7, sp, #8
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	4613      	mov	r3, r2
 8004d92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	f040 8083 	bne.w	8004ea6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <HAL_UART_Transmit+0x28>
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e07b      	b.n	8004ea8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_UART_Transmit+0x3a>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e074      	b.n	8004ea8 <HAL_UART_Transmit+0x124>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2221      	movs	r2, #33	; 0x21
 8004dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dd6:	f7fc f91f 	bl	8001018 <HAL_GetTick>
 8004dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	88fa      	ldrh	r2, [r7, #6]
 8004de8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df4:	d108      	bne.n	8004e08 <HAL_UART_Transmit+0x84>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d104      	bne.n	8004e08 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	e003      	b.n	8004e10 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004e18:	e02c      	b.n	8004e74 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2200      	movs	r2, #0
 8004e22:	2180      	movs	r1, #128	; 0x80
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f001 fba2 	bl	800656e <UART_WaitOnFlagUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e039      	b.n	8004ea8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10b      	bne.n	8004e52 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	61bb      	str	r3, [r7, #24]
 8004e50:	e007      	b.n	8004e62 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	781a      	ldrb	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1cc      	bne.n	8004e1a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2200      	movs	r2, #0
 8004e88:	2140      	movs	r1, #64	; 0x40
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f001 fb6f 	bl	800656e <UART_WaitOnFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e006      	b.n	8004ea8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e000      	b.n	8004ea8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004ea6:	2302      	movs	r3, #2
  }
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3720      	adds	r7, #32
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	; 0x28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	d142      	bne.n	8004f4e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <HAL_UART_Receive_IT+0x24>
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e03b      	b.n	8004f50 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <HAL_UART_Receive_IT+0x36>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e034      	b.n	8004f50 <HAL_UART_Receive_IT+0xa0>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a17      	ldr	r2, [pc, #92]	; (8004f58 <HAL_UART_Receive_IT+0xa8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01f      	beq.n	8004f3e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d018      	beq.n	8004f3e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	613b      	str	r3, [r7, #16]
   return(result);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	623b      	str	r3, [r7, #32]
 8004f2c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	69f9      	ldr	r1, [r7, #28]
 8004f30:	6a3a      	ldr	r2, [r7, #32]
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e6      	bne.n	8004f0c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	461a      	mov	r2, r3
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f001 fbdb 	bl	8006700 <UART_Start_Receive_IT>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	e000      	b.n	8004f50 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004f4e:	2302      	movs	r3, #2
  }
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3728      	adds	r7, #40	; 0x28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	58000c00 	.word	0x58000c00

08004f5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b0ba      	sub	sp, #232	; 0xe8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f86:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004f90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d11b      	bne.n	8004fd0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d015      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d105      	bne.n	8004fbc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d009      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 835a 	beq.w	800567a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	4798      	blx	r3
      }
      return;
 8004fce:	e354      	b.n	800567a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004fd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 811f 	beq.w	8005218 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004fda:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004fde:	4b8b      	ldr	r3, [pc, #556]	; (800520c <HAL_UART_IRQHandler+0x2b0>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004fe6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004fea:	4b89      	ldr	r3, [pc, #548]	; (8005210 <HAL_UART_IRQHandler+0x2b4>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 8112 	beq.w	8005218 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d011      	beq.n	8005024 <HAL_UART_IRQHandler+0xc8>
 8005000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00b      	beq.n	8005024 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2201      	movs	r2, #1
 8005012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800501a:	f043 0201 	orr.w	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d011      	beq.n	8005054 <HAL_UART_IRQHandler+0xf8>
 8005030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00b      	beq.n	8005054 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2202      	movs	r2, #2
 8005042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800504a:	f043 0204 	orr.w	r2, r3, #4
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d011      	beq.n	8005084 <HAL_UART_IRQHandler+0x128>
 8005060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00b      	beq.n	8005084 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2204      	movs	r2, #4
 8005072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800507a:	f043 0202 	orr.w	r2, r3, #2
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b00      	cmp	r3, #0
 800508e:	d017      	beq.n	80050c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b00      	cmp	r3, #0
 800509a:	d105      	bne.n	80050a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800509c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80050a0:	4b5a      	ldr	r3, [pc, #360]	; (800520c <HAL_UART_IRQHandler+0x2b0>)
 80050a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00b      	beq.n	80050c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2208      	movs	r2, #8
 80050ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050b6:	f043 0208 	orr.w	r2, r3, #8
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d012      	beq.n	80050f2 <HAL_UART_IRQHandler+0x196>
 80050cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00c      	beq.n	80050f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e8:	f043 0220 	orr.w	r2, r3, #32
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 82c0 	beq.w	800567e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80050fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b00      	cmp	r3, #0
 8005108:	d013      	beq.n	8005132 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800510a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b00      	cmp	r3, #0
 8005114:	d105      	bne.n	8005122 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800511a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d007      	beq.n	8005132 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005138:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d005      	beq.n	8005156 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800514a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800514e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005152:	2b00      	cmp	r3, #0
 8005154:	d04f      	beq.n	80051f6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f001 fbfc 	bl	8006954 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005166:	2b40      	cmp	r3, #64	; 0x40
 8005168:	d141      	bne.n	80051ee <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3308      	adds	r3, #8
 8005170:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005174:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005180:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005188:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3308      	adds	r3, #8
 8005192:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005196:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800519a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1d9      	bne.n	800516a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d013      	beq.n	80051e6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051c2:	4a14      	ldr	r2, [pc, #80]	; (8005214 <HAL_UART_IRQHandler+0x2b8>)
 80051c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fc fb2e 	bl	800182c <HAL_DMA_Abort_IT>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d017      	beq.n	8005206 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80051e0:	4610      	mov	r0, r2
 80051e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e4:	e00f      	b.n	8005206 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fa60 	bl	80056ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ec:	e00b      	b.n	8005206 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fa5c 	bl	80056ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f4:	e007      	b.n	8005206 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fa58 	bl	80056ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005204:	e23b      	b.n	800567e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005206:	bf00      	nop
    return;
 8005208:	e239      	b.n	800567e <HAL_UART_IRQHandler+0x722>
 800520a:	bf00      	nop
 800520c:	10000001 	.word	0x10000001
 8005210:	04000120 	.word	0x04000120
 8005214:	08006a21 	.word	0x08006a21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800521c:	2b01      	cmp	r3, #1
 800521e:	f040 81ce 	bne.w	80055be <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005226:	f003 0310 	and.w	r3, r3, #16
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 81c7 	beq.w	80055be <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 81c0 	beq.w	80055be <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2210      	movs	r2, #16
 8005244:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b40      	cmp	r3, #64	; 0x40
 8005252:	f040 813b 	bne.w	80054cc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a8b      	ldr	r2, [pc, #556]	; (800548c <HAL_UART_IRQHandler+0x530>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d059      	beq.n	8005316 <HAL_UART_IRQHandler+0x3ba>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a89      	ldr	r2, [pc, #548]	; (8005490 <HAL_UART_IRQHandler+0x534>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d053      	beq.n	8005316 <HAL_UART_IRQHandler+0x3ba>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a87      	ldr	r2, [pc, #540]	; (8005494 <HAL_UART_IRQHandler+0x538>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d04d      	beq.n	8005316 <HAL_UART_IRQHandler+0x3ba>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a85      	ldr	r2, [pc, #532]	; (8005498 <HAL_UART_IRQHandler+0x53c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d047      	beq.n	8005316 <HAL_UART_IRQHandler+0x3ba>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a83      	ldr	r2, [pc, #524]	; (800549c <HAL_UART_IRQHandler+0x540>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d041      	beq.n	8005316 <HAL_UART_IRQHandler+0x3ba>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a81      	ldr	r2, [pc, #516]	; (80054a0 <HAL_UART_IRQHandler+0x544>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d03b      	beq.n	8005316 <HAL_UART_IRQHandler+0x3ba>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a7f      	ldr	r2, [pc, #508]	; (80054a4 <HAL_UART_IRQHandler+0x548>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d035      	beq.n	8005316 <HAL_UART_IRQHandler+0x3ba>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a7d      	ldr	r2, [pc, #500]	; (80054a8 <HAL_UART_IRQHandler+0x54c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d02f      	beq.n	8005316 <HAL_UART_IRQHandler+0x3ba>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a7b      	ldr	r2, [pc, #492]	; (80054ac <HAL_UART_IRQHandler+0x550>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d029      	beq.n	8005316 <HAL_UART_IRQHandler+0x3ba>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a79      	ldr	r2, [pc, #484]	; (80054b0 <HAL_UART_IRQHandler+0x554>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d023      	beq.n	8005316 <HAL_UART_IRQHandler+0x3ba>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a77      	ldr	r2, [pc, #476]	; (80054b4 <HAL_UART_IRQHandler+0x558>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d01d      	beq.n	8005316 <HAL_UART_IRQHandler+0x3ba>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a75      	ldr	r2, [pc, #468]	; (80054b8 <HAL_UART_IRQHandler+0x55c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d017      	beq.n	8005316 <HAL_UART_IRQHandler+0x3ba>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a73      	ldr	r2, [pc, #460]	; (80054bc <HAL_UART_IRQHandler+0x560>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d011      	beq.n	8005316 <HAL_UART_IRQHandler+0x3ba>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a71      	ldr	r2, [pc, #452]	; (80054c0 <HAL_UART_IRQHandler+0x564>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00b      	beq.n	8005316 <HAL_UART_IRQHandler+0x3ba>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a6f      	ldr	r2, [pc, #444]	; (80054c4 <HAL_UART_IRQHandler+0x568>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d005      	beq.n	8005316 <HAL_UART_IRQHandler+0x3ba>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a6d      	ldr	r2, [pc, #436]	; (80054c8 <HAL_UART_IRQHandler+0x56c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d105      	bne.n	8005322 <HAL_UART_IRQHandler+0x3c6>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	b29b      	uxth	r3, r3
 8005320:	e004      	b.n	800532c <HAL_UART_IRQHandler+0x3d0>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	b29b      	uxth	r3, r3
 800532c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005330:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 81a4 	beq.w	8005682 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005340:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005344:	429a      	cmp	r2, r3
 8005346:	f080 819c 	bcs.w	8005682 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005350:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800535e:	f000 8086 	beq.w	800546e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800536e:	e853 3f00 	ldrex	r3, [r3]
 8005372:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005376:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800537a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800537e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800538c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005390:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005398:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80053a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1da      	bne.n	8005362 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3308      	adds	r3, #8
 80053b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80053bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053be:	f023 0301 	bic.w	r3, r3, #1
 80053c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3308      	adds	r3, #8
 80053cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80053d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80053d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80053d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80053e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e1      	bne.n	80053ac <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3308      	adds	r3, #8
 80053ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053f2:	e853 3f00 	ldrex	r3, [r3]
 80053f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80053f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3308      	adds	r3, #8
 8005408:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800540c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800540e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005412:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800541a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e3      	bne.n	80053e8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2220      	movs	r2, #32
 8005424:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005436:	e853 3f00 	ldrex	r3, [r3]
 800543a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800543c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800543e:	f023 0310 	bic.w	r3, r3, #16
 8005442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005450:	65bb      	str	r3, [r7, #88]	; 0x58
 8005452:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005456:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800545e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e4      	bne.n	800542e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005468:	4618      	mov	r0, r3
 800546a:	f7fb fec1 	bl	80011f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800547a:	b29b      	uxth	r3, r3
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	b29b      	uxth	r3, r3
 8005480:	4619      	mov	r1, r3
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f91c 	bl	80056c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005488:	e0fb      	b.n	8005682 <HAL_UART_IRQHandler+0x726>
 800548a:	bf00      	nop
 800548c:	40020010 	.word	0x40020010
 8005490:	40020028 	.word	0x40020028
 8005494:	40020040 	.word	0x40020040
 8005498:	40020058 	.word	0x40020058
 800549c:	40020070 	.word	0x40020070
 80054a0:	40020088 	.word	0x40020088
 80054a4:	400200a0 	.word	0x400200a0
 80054a8:	400200b8 	.word	0x400200b8
 80054ac:	40020410 	.word	0x40020410
 80054b0:	40020428 	.word	0x40020428
 80054b4:	40020440 	.word	0x40020440
 80054b8:	40020458 	.word	0x40020458
 80054bc:	40020470 	.word	0x40020470
 80054c0:	40020488 	.word	0x40020488
 80054c4:	400204a0 	.word	0x400204a0
 80054c8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054d8:	b29b      	uxth	r3, r3
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 80cc 	beq.w	8005686 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80054ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 80c7 	beq.w	8005686 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800550c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800551a:	647b      	str	r3, [r7, #68]	; 0x44
 800551c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005520:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e4      	bne.n	80054f8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3308      	adds	r3, #8
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	623b      	str	r3, [r7, #32]
   return(result);
 800553e:	6a3a      	ldr	r2, [r7, #32]
 8005540:	4b54      	ldr	r3, [pc, #336]	; (8005694 <HAL_UART_IRQHandler+0x738>)
 8005542:	4013      	ands	r3, r2
 8005544:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3308      	adds	r3, #8
 800554e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005552:	633a      	str	r2, [r7, #48]	; 0x30
 8005554:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005556:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e3      	bne.n	800552e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2220      	movs	r2, #32
 800556a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	e853 3f00 	ldrex	r3, [r3]
 8005586:	60fb      	str	r3, [r7, #12]
   return(result);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0310 	bic.w	r3, r3, #16
 800558e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800559c:	61fb      	str	r3, [r7, #28]
 800559e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	69b9      	ldr	r1, [r7, #24]
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	617b      	str	r3, [r7, #20]
   return(result);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e4      	bne.n	800557a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f882 	bl	80056c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055bc:	e063      	b.n	8005686 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80055be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00e      	beq.n	80055e8 <HAL_UART_IRQHandler+0x68c>
 80055ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d008      	beq.n	80055e8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80055de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f001 febb 	bl	800735c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055e6:	e051      	b.n	800568c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80055e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d014      	beq.n	800561e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80055f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d105      	bne.n	800560c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005604:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d008      	beq.n	800561e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005610:	2b00      	cmp	r3, #0
 8005612:	d03a      	beq.n	800568a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	4798      	blx	r3
    }
    return;
 800561c:	e035      	b.n	800568a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800561e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <HAL_UART_IRQHandler+0x6e2>
 800562a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f001 fa08 	bl	8006a4c <UART_EndTransmit_IT>
    return;
 800563c:	e026      	b.n	800568c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800563e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005642:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d009      	beq.n	800565e <HAL_UART_IRQHandler+0x702>
 800564a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800564e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f001 fe94 	bl	8007384 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800565c:	e016      	b.n	800568c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d010      	beq.n	800568c <HAL_UART_IRQHandler+0x730>
 800566a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800566e:	2b00      	cmp	r3, #0
 8005670:	da0c      	bge.n	800568c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f001 fe7c 	bl	8007370 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005678:	e008      	b.n	800568c <HAL_UART_IRQHandler+0x730>
      return;
 800567a:	bf00      	nop
 800567c:	e006      	b.n	800568c <HAL_UART_IRQHandler+0x730>
    return;
 800567e:	bf00      	nop
 8005680:	e004      	b.n	800568c <HAL_UART_IRQHandler+0x730>
      return;
 8005682:	bf00      	nop
 8005684:	e002      	b.n	800568c <HAL_UART_IRQHandler+0x730>
      return;
 8005686:	bf00      	nop
 8005688:	e000      	b.n	800568c <HAL_UART_IRQHandler+0x730>
    return;
 800568a:	bf00      	nop
  }
}
 800568c:	37e8      	adds	r7, #232	; 0xe8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	effffffe 	.word	0xeffffffe

08005698 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	460b      	mov	r3, r1
 80056ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056d8:	b5b0      	push	{r4, r5, r7, lr}
 80056da:	b08e      	sub	sp, #56	; 0x38
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	431a      	orrs	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	4bbf      	ldr	r3, [pc, #764]	; (8005a04 <UART_SetConfig+0x32c>)
 8005706:	4013      	ands	r3, r2
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6812      	ldr	r2, [r2, #0]
 800570c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800570e:	430b      	orrs	r3, r1
 8005710:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4ab5      	ldr	r2, [pc, #724]	; (8005a08 <UART_SetConfig+0x330>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d004      	beq.n	8005742 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800573e:	4313      	orrs	r3, r2
 8005740:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	4bb0      	ldr	r3, [pc, #704]	; (8005a0c <UART_SetConfig+0x334>)
 800574a:	4013      	ands	r3, r2
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6812      	ldr	r2, [r2, #0]
 8005750:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005752:	430b      	orrs	r3, r1
 8005754:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	f023 010f 	bic.w	r1, r3, #15
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4aa7      	ldr	r2, [pc, #668]	; (8005a10 <UART_SetConfig+0x338>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d176      	bne.n	8005864 <UART_SetConfig+0x18c>
 8005776:	4ba7      	ldr	r3, [pc, #668]	; (8005a14 <UART_SetConfig+0x33c>)
 8005778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800577e:	2b28      	cmp	r3, #40	; 0x28
 8005780:	d86c      	bhi.n	800585c <UART_SetConfig+0x184>
 8005782:	a201      	add	r2, pc, #4	; (adr r2, 8005788 <UART_SetConfig+0xb0>)
 8005784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005788:	0800582d 	.word	0x0800582d
 800578c:	0800585d 	.word	0x0800585d
 8005790:	0800585d 	.word	0x0800585d
 8005794:	0800585d 	.word	0x0800585d
 8005798:	0800585d 	.word	0x0800585d
 800579c:	0800585d 	.word	0x0800585d
 80057a0:	0800585d 	.word	0x0800585d
 80057a4:	0800585d 	.word	0x0800585d
 80057a8:	08005835 	.word	0x08005835
 80057ac:	0800585d 	.word	0x0800585d
 80057b0:	0800585d 	.word	0x0800585d
 80057b4:	0800585d 	.word	0x0800585d
 80057b8:	0800585d 	.word	0x0800585d
 80057bc:	0800585d 	.word	0x0800585d
 80057c0:	0800585d 	.word	0x0800585d
 80057c4:	0800585d 	.word	0x0800585d
 80057c8:	0800583d 	.word	0x0800583d
 80057cc:	0800585d 	.word	0x0800585d
 80057d0:	0800585d 	.word	0x0800585d
 80057d4:	0800585d 	.word	0x0800585d
 80057d8:	0800585d 	.word	0x0800585d
 80057dc:	0800585d 	.word	0x0800585d
 80057e0:	0800585d 	.word	0x0800585d
 80057e4:	0800585d 	.word	0x0800585d
 80057e8:	08005845 	.word	0x08005845
 80057ec:	0800585d 	.word	0x0800585d
 80057f0:	0800585d 	.word	0x0800585d
 80057f4:	0800585d 	.word	0x0800585d
 80057f8:	0800585d 	.word	0x0800585d
 80057fc:	0800585d 	.word	0x0800585d
 8005800:	0800585d 	.word	0x0800585d
 8005804:	0800585d 	.word	0x0800585d
 8005808:	0800584d 	.word	0x0800584d
 800580c:	0800585d 	.word	0x0800585d
 8005810:	0800585d 	.word	0x0800585d
 8005814:	0800585d 	.word	0x0800585d
 8005818:	0800585d 	.word	0x0800585d
 800581c:	0800585d 	.word	0x0800585d
 8005820:	0800585d 	.word	0x0800585d
 8005824:	0800585d 	.word	0x0800585d
 8005828:	08005855 	.word	0x08005855
 800582c:	2301      	movs	r3, #1
 800582e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005832:	e326      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005834:	2304      	movs	r3, #4
 8005836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800583a:	e322      	b.n	8005e82 <UART_SetConfig+0x7aa>
 800583c:	2308      	movs	r3, #8
 800583e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005842:	e31e      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005844:	2310      	movs	r3, #16
 8005846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800584a:	e31a      	b.n	8005e82 <UART_SetConfig+0x7aa>
 800584c:	2320      	movs	r3, #32
 800584e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005852:	e316      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005854:	2340      	movs	r3, #64	; 0x40
 8005856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800585a:	e312      	b.n	8005e82 <UART_SetConfig+0x7aa>
 800585c:	2380      	movs	r3, #128	; 0x80
 800585e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005862:	e30e      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a6b      	ldr	r2, [pc, #428]	; (8005a18 <UART_SetConfig+0x340>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d130      	bne.n	80058d0 <UART_SetConfig+0x1f8>
 800586e:	4b69      	ldr	r3, [pc, #420]	; (8005a14 <UART_SetConfig+0x33c>)
 8005870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	2b05      	cmp	r3, #5
 8005878:	d826      	bhi.n	80058c8 <UART_SetConfig+0x1f0>
 800587a:	a201      	add	r2, pc, #4	; (adr r2, 8005880 <UART_SetConfig+0x1a8>)
 800587c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005880:	08005899 	.word	0x08005899
 8005884:	080058a1 	.word	0x080058a1
 8005888:	080058a9 	.word	0x080058a9
 800588c:	080058b1 	.word	0x080058b1
 8005890:	080058b9 	.word	0x080058b9
 8005894:	080058c1 	.word	0x080058c1
 8005898:	2300      	movs	r3, #0
 800589a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800589e:	e2f0      	b.n	8005e82 <UART_SetConfig+0x7aa>
 80058a0:	2304      	movs	r3, #4
 80058a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058a6:	e2ec      	b.n	8005e82 <UART_SetConfig+0x7aa>
 80058a8:	2308      	movs	r3, #8
 80058aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ae:	e2e8      	b.n	8005e82 <UART_SetConfig+0x7aa>
 80058b0:	2310      	movs	r3, #16
 80058b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058b6:	e2e4      	b.n	8005e82 <UART_SetConfig+0x7aa>
 80058b8:	2320      	movs	r3, #32
 80058ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058be:	e2e0      	b.n	8005e82 <UART_SetConfig+0x7aa>
 80058c0:	2340      	movs	r3, #64	; 0x40
 80058c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058c6:	e2dc      	b.n	8005e82 <UART_SetConfig+0x7aa>
 80058c8:	2380      	movs	r3, #128	; 0x80
 80058ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ce:	e2d8      	b.n	8005e82 <UART_SetConfig+0x7aa>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a51      	ldr	r2, [pc, #324]	; (8005a1c <UART_SetConfig+0x344>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d130      	bne.n	800593c <UART_SetConfig+0x264>
 80058da:	4b4e      	ldr	r3, [pc, #312]	; (8005a14 <UART_SetConfig+0x33c>)
 80058dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	2b05      	cmp	r3, #5
 80058e4:	d826      	bhi.n	8005934 <UART_SetConfig+0x25c>
 80058e6:	a201      	add	r2, pc, #4	; (adr r2, 80058ec <UART_SetConfig+0x214>)
 80058e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ec:	08005905 	.word	0x08005905
 80058f0:	0800590d 	.word	0x0800590d
 80058f4:	08005915 	.word	0x08005915
 80058f8:	0800591d 	.word	0x0800591d
 80058fc:	08005925 	.word	0x08005925
 8005900:	0800592d 	.word	0x0800592d
 8005904:	2300      	movs	r3, #0
 8005906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800590a:	e2ba      	b.n	8005e82 <UART_SetConfig+0x7aa>
 800590c:	2304      	movs	r3, #4
 800590e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005912:	e2b6      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005914:	2308      	movs	r3, #8
 8005916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800591a:	e2b2      	b.n	8005e82 <UART_SetConfig+0x7aa>
 800591c:	2310      	movs	r3, #16
 800591e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005922:	e2ae      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005924:	2320      	movs	r3, #32
 8005926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800592a:	e2aa      	b.n	8005e82 <UART_SetConfig+0x7aa>
 800592c:	2340      	movs	r3, #64	; 0x40
 800592e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005932:	e2a6      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005934:	2380      	movs	r3, #128	; 0x80
 8005936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800593a:	e2a2      	b.n	8005e82 <UART_SetConfig+0x7aa>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a37      	ldr	r2, [pc, #220]	; (8005a20 <UART_SetConfig+0x348>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d130      	bne.n	80059a8 <UART_SetConfig+0x2d0>
 8005946:	4b33      	ldr	r3, [pc, #204]	; (8005a14 <UART_SetConfig+0x33c>)
 8005948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	2b05      	cmp	r3, #5
 8005950:	d826      	bhi.n	80059a0 <UART_SetConfig+0x2c8>
 8005952:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <UART_SetConfig+0x280>)
 8005954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005958:	08005971 	.word	0x08005971
 800595c:	08005979 	.word	0x08005979
 8005960:	08005981 	.word	0x08005981
 8005964:	08005989 	.word	0x08005989
 8005968:	08005991 	.word	0x08005991
 800596c:	08005999 	.word	0x08005999
 8005970:	2300      	movs	r3, #0
 8005972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005976:	e284      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005978:	2304      	movs	r3, #4
 800597a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800597e:	e280      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005980:	2308      	movs	r3, #8
 8005982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005986:	e27c      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005988:	2310      	movs	r3, #16
 800598a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800598e:	e278      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005990:	2320      	movs	r3, #32
 8005992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005996:	e274      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005998:	2340      	movs	r3, #64	; 0x40
 800599a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800599e:	e270      	b.n	8005e82 <UART_SetConfig+0x7aa>
 80059a0:	2380      	movs	r3, #128	; 0x80
 80059a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059a6:	e26c      	b.n	8005e82 <UART_SetConfig+0x7aa>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a1d      	ldr	r2, [pc, #116]	; (8005a24 <UART_SetConfig+0x34c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d142      	bne.n	8005a38 <UART_SetConfig+0x360>
 80059b2:	4b18      	ldr	r3, [pc, #96]	; (8005a14 <UART_SetConfig+0x33c>)
 80059b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	2b05      	cmp	r3, #5
 80059bc:	d838      	bhi.n	8005a30 <UART_SetConfig+0x358>
 80059be:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <UART_SetConfig+0x2ec>)
 80059c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c4:	080059dd 	.word	0x080059dd
 80059c8:	080059e5 	.word	0x080059e5
 80059cc:	080059ed 	.word	0x080059ed
 80059d0:	080059f5 	.word	0x080059f5
 80059d4:	080059fd 	.word	0x080059fd
 80059d8:	08005a29 	.word	0x08005a29
 80059dc:	2300      	movs	r3, #0
 80059de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059e2:	e24e      	b.n	8005e82 <UART_SetConfig+0x7aa>
 80059e4:	2304      	movs	r3, #4
 80059e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ea:	e24a      	b.n	8005e82 <UART_SetConfig+0x7aa>
 80059ec:	2308      	movs	r3, #8
 80059ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059f2:	e246      	b.n	8005e82 <UART_SetConfig+0x7aa>
 80059f4:	2310      	movs	r3, #16
 80059f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059fa:	e242      	b.n	8005e82 <UART_SetConfig+0x7aa>
 80059fc:	2320      	movs	r3, #32
 80059fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a02:	e23e      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005a04:	cfff69f3 	.word	0xcfff69f3
 8005a08:	58000c00 	.word	0x58000c00
 8005a0c:	11fff4ff 	.word	0x11fff4ff
 8005a10:	40011000 	.word	0x40011000
 8005a14:	58024400 	.word	0x58024400
 8005a18:	40004400 	.word	0x40004400
 8005a1c:	40004800 	.word	0x40004800
 8005a20:	40004c00 	.word	0x40004c00
 8005a24:	40005000 	.word	0x40005000
 8005a28:	2340      	movs	r3, #64	; 0x40
 8005a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a2e:	e228      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005a30:	2380      	movs	r3, #128	; 0x80
 8005a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a36:	e224      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4ab1      	ldr	r2, [pc, #708]	; (8005d04 <UART_SetConfig+0x62c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d176      	bne.n	8005b30 <UART_SetConfig+0x458>
 8005a42:	4bb1      	ldr	r3, [pc, #708]	; (8005d08 <UART_SetConfig+0x630>)
 8005a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a4a:	2b28      	cmp	r3, #40	; 0x28
 8005a4c:	d86c      	bhi.n	8005b28 <UART_SetConfig+0x450>
 8005a4e:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <UART_SetConfig+0x37c>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005af9 	.word	0x08005af9
 8005a58:	08005b29 	.word	0x08005b29
 8005a5c:	08005b29 	.word	0x08005b29
 8005a60:	08005b29 	.word	0x08005b29
 8005a64:	08005b29 	.word	0x08005b29
 8005a68:	08005b29 	.word	0x08005b29
 8005a6c:	08005b29 	.word	0x08005b29
 8005a70:	08005b29 	.word	0x08005b29
 8005a74:	08005b01 	.word	0x08005b01
 8005a78:	08005b29 	.word	0x08005b29
 8005a7c:	08005b29 	.word	0x08005b29
 8005a80:	08005b29 	.word	0x08005b29
 8005a84:	08005b29 	.word	0x08005b29
 8005a88:	08005b29 	.word	0x08005b29
 8005a8c:	08005b29 	.word	0x08005b29
 8005a90:	08005b29 	.word	0x08005b29
 8005a94:	08005b09 	.word	0x08005b09
 8005a98:	08005b29 	.word	0x08005b29
 8005a9c:	08005b29 	.word	0x08005b29
 8005aa0:	08005b29 	.word	0x08005b29
 8005aa4:	08005b29 	.word	0x08005b29
 8005aa8:	08005b29 	.word	0x08005b29
 8005aac:	08005b29 	.word	0x08005b29
 8005ab0:	08005b29 	.word	0x08005b29
 8005ab4:	08005b11 	.word	0x08005b11
 8005ab8:	08005b29 	.word	0x08005b29
 8005abc:	08005b29 	.word	0x08005b29
 8005ac0:	08005b29 	.word	0x08005b29
 8005ac4:	08005b29 	.word	0x08005b29
 8005ac8:	08005b29 	.word	0x08005b29
 8005acc:	08005b29 	.word	0x08005b29
 8005ad0:	08005b29 	.word	0x08005b29
 8005ad4:	08005b19 	.word	0x08005b19
 8005ad8:	08005b29 	.word	0x08005b29
 8005adc:	08005b29 	.word	0x08005b29
 8005ae0:	08005b29 	.word	0x08005b29
 8005ae4:	08005b29 	.word	0x08005b29
 8005ae8:	08005b29 	.word	0x08005b29
 8005aec:	08005b29 	.word	0x08005b29
 8005af0:	08005b29 	.word	0x08005b29
 8005af4:	08005b21 	.word	0x08005b21
 8005af8:	2301      	movs	r3, #1
 8005afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005afe:	e1c0      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005b00:	2304      	movs	r3, #4
 8005b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b06:	e1bc      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005b08:	2308      	movs	r3, #8
 8005b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b0e:	e1b8      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005b10:	2310      	movs	r3, #16
 8005b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b16:	e1b4      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005b18:	2320      	movs	r3, #32
 8005b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b1e:	e1b0      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005b20:	2340      	movs	r3, #64	; 0x40
 8005b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b26:	e1ac      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005b28:	2380      	movs	r3, #128	; 0x80
 8005b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b2e:	e1a8      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a75      	ldr	r2, [pc, #468]	; (8005d0c <UART_SetConfig+0x634>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d130      	bne.n	8005b9c <UART_SetConfig+0x4c4>
 8005b3a:	4b73      	ldr	r3, [pc, #460]	; (8005d08 <UART_SetConfig+0x630>)
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	2b05      	cmp	r3, #5
 8005b44:	d826      	bhi.n	8005b94 <UART_SetConfig+0x4bc>
 8005b46:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <UART_SetConfig+0x474>)
 8005b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4c:	08005b65 	.word	0x08005b65
 8005b50:	08005b6d 	.word	0x08005b6d
 8005b54:	08005b75 	.word	0x08005b75
 8005b58:	08005b7d 	.word	0x08005b7d
 8005b5c:	08005b85 	.word	0x08005b85
 8005b60:	08005b8d 	.word	0x08005b8d
 8005b64:	2300      	movs	r3, #0
 8005b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b6a:	e18a      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005b6c:	2304      	movs	r3, #4
 8005b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b72:	e186      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005b74:	2308      	movs	r3, #8
 8005b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b7a:	e182      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005b7c:	2310      	movs	r3, #16
 8005b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b82:	e17e      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005b84:	2320      	movs	r3, #32
 8005b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b8a:	e17a      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005b8c:	2340      	movs	r3, #64	; 0x40
 8005b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b92:	e176      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005b94:	2380      	movs	r3, #128	; 0x80
 8005b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b9a:	e172      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a5b      	ldr	r2, [pc, #364]	; (8005d10 <UART_SetConfig+0x638>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d130      	bne.n	8005c08 <UART_SetConfig+0x530>
 8005ba6:	4b58      	ldr	r3, [pc, #352]	; (8005d08 <UART_SetConfig+0x630>)
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	2b05      	cmp	r3, #5
 8005bb0:	d826      	bhi.n	8005c00 <UART_SetConfig+0x528>
 8005bb2:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <UART_SetConfig+0x4e0>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005bd1 	.word	0x08005bd1
 8005bbc:	08005bd9 	.word	0x08005bd9
 8005bc0:	08005be1 	.word	0x08005be1
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005bf1 	.word	0x08005bf1
 8005bcc:	08005bf9 	.word	0x08005bf9
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bd6:	e154      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005bd8:	2304      	movs	r3, #4
 8005bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bde:	e150      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005be0:	2308      	movs	r3, #8
 8005be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005be6:	e14c      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005be8:	2310      	movs	r3, #16
 8005bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bee:	e148      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005bf0:	2320      	movs	r3, #32
 8005bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bf6:	e144      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005bf8:	2340      	movs	r3, #64	; 0x40
 8005bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bfe:	e140      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005c00:	2380      	movs	r3, #128	; 0x80
 8005c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c06:	e13c      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a41      	ldr	r2, [pc, #260]	; (8005d14 <UART_SetConfig+0x63c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	f040 8082 	bne.w	8005d18 <UART_SetConfig+0x640>
 8005c14:	4b3c      	ldr	r3, [pc, #240]	; (8005d08 <UART_SetConfig+0x630>)
 8005c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c1c:	2b28      	cmp	r3, #40	; 0x28
 8005c1e:	d86d      	bhi.n	8005cfc <UART_SetConfig+0x624>
 8005c20:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <UART_SetConfig+0x550>)
 8005c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c26:	bf00      	nop
 8005c28:	08005ccd 	.word	0x08005ccd
 8005c2c:	08005cfd 	.word	0x08005cfd
 8005c30:	08005cfd 	.word	0x08005cfd
 8005c34:	08005cfd 	.word	0x08005cfd
 8005c38:	08005cfd 	.word	0x08005cfd
 8005c3c:	08005cfd 	.word	0x08005cfd
 8005c40:	08005cfd 	.word	0x08005cfd
 8005c44:	08005cfd 	.word	0x08005cfd
 8005c48:	08005cd5 	.word	0x08005cd5
 8005c4c:	08005cfd 	.word	0x08005cfd
 8005c50:	08005cfd 	.word	0x08005cfd
 8005c54:	08005cfd 	.word	0x08005cfd
 8005c58:	08005cfd 	.word	0x08005cfd
 8005c5c:	08005cfd 	.word	0x08005cfd
 8005c60:	08005cfd 	.word	0x08005cfd
 8005c64:	08005cfd 	.word	0x08005cfd
 8005c68:	08005cdd 	.word	0x08005cdd
 8005c6c:	08005cfd 	.word	0x08005cfd
 8005c70:	08005cfd 	.word	0x08005cfd
 8005c74:	08005cfd 	.word	0x08005cfd
 8005c78:	08005cfd 	.word	0x08005cfd
 8005c7c:	08005cfd 	.word	0x08005cfd
 8005c80:	08005cfd 	.word	0x08005cfd
 8005c84:	08005cfd 	.word	0x08005cfd
 8005c88:	08005ce5 	.word	0x08005ce5
 8005c8c:	08005cfd 	.word	0x08005cfd
 8005c90:	08005cfd 	.word	0x08005cfd
 8005c94:	08005cfd 	.word	0x08005cfd
 8005c98:	08005cfd 	.word	0x08005cfd
 8005c9c:	08005cfd 	.word	0x08005cfd
 8005ca0:	08005cfd 	.word	0x08005cfd
 8005ca4:	08005cfd 	.word	0x08005cfd
 8005ca8:	08005ced 	.word	0x08005ced
 8005cac:	08005cfd 	.word	0x08005cfd
 8005cb0:	08005cfd 	.word	0x08005cfd
 8005cb4:	08005cfd 	.word	0x08005cfd
 8005cb8:	08005cfd 	.word	0x08005cfd
 8005cbc:	08005cfd 	.word	0x08005cfd
 8005cc0:	08005cfd 	.word	0x08005cfd
 8005cc4:	08005cfd 	.word	0x08005cfd
 8005cc8:	08005cf5 	.word	0x08005cf5
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cd2:	e0d6      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cda:	e0d2      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005cdc:	2308      	movs	r3, #8
 8005cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ce2:	e0ce      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005ce4:	2310      	movs	r3, #16
 8005ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cea:	e0ca      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005cec:	2320      	movs	r3, #32
 8005cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cf2:	e0c6      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005cf4:	2340      	movs	r3, #64	; 0x40
 8005cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cfa:	e0c2      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005cfc:	2380      	movs	r3, #128	; 0x80
 8005cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d02:	e0be      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005d04:	40011400 	.word	0x40011400
 8005d08:	58024400 	.word	0x58024400
 8005d0c:	40007800 	.word	0x40007800
 8005d10:	40007c00 	.word	0x40007c00
 8005d14:	40011800 	.word	0x40011800
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4aad      	ldr	r2, [pc, #692]	; (8005fd4 <UART_SetConfig+0x8fc>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d176      	bne.n	8005e10 <UART_SetConfig+0x738>
 8005d22:	4bad      	ldr	r3, [pc, #692]	; (8005fd8 <UART_SetConfig+0x900>)
 8005d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d2a:	2b28      	cmp	r3, #40	; 0x28
 8005d2c:	d86c      	bhi.n	8005e08 <UART_SetConfig+0x730>
 8005d2e:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <UART_SetConfig+0x65c>)
 8005d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d34:	08005dd9 	.word	0x08005dd9
 8005d38:	08005e09 	.word	0x08005e09
 8005d3c:	08005e09 	.word	0x08005e09
 8005d40:	08005e09 	.word	0x08005e09
 8005d44:	08005e09 	.word	0x08005e09
 8005d48:	08005e09 	.word	0x08005e09
 8005d4c:	08005e09 	.word	0x08005e09
 8005d50:	08005e09 	.word	0x08005e09
 8005d54:	08005de1 	.word	0x08005de1
 8005d58:	08005e09 	.word	0x08005e09
 8005d5c:	08005e09 	.word	0x08005e09
 8005d60:	08005e09 	.word	0x08005e09
 8005d64:	08005e09 	.word	0x08005e09
 8005d68:	08005e09 	.word	0x08005e09
 8005d6c:	08005e09 	.word	0x08005e09
 8005d70:	08005e09 	.word	0x08005e09
 8005d74:	08005de9 	.word	0x08005de9
 8005d78:	08005e09 	.word	0x08005e09
 8005d7c:	08005e09 	.word	0x08005e09
 8005d80:	08005e09 	.word	0x08005e09
 8005d84:	08005e09 	.word	0x08005e09
 8005d88:	08005e09 	.word	0x08005e09
 8005d8c:	08005e09 	.word	0x08005e09
 8005d90:	08005e09 	.word	0x08005e09
 8005d94:	08005df1 	.word	0x08005df1
 8005d98:	08005e09 	.word	0x08005e09
 8005d9c:	08005e09 	.word	0x08005e09
 8005da0:	08005e09 	.word	0x08005e09
 8005da4:	08005e09 	.word	0x08005e09
 8005da8:	08005e09 	.word	0x08005e09
 8005dac:	08005e09 	.word	0x08005e09
 8005db0:	08005e09 	.word	0x08005e09
 8005db4:	08005df9 	.word	0x08005df9
 8005db8:	08005e09 	.word	0x08005e09
 8005dbc:	08005e09 	.word	0x08005e09
 8005dc0:	08005e09 	.word	0x08005e09
 8005dc4:	08005e09 	.word	0x08005e09
 8005dc8:	08005e09 	.word	0x08005e09
 8005dcc:	08005e09 	.word	0x08005e09
 8005dd0:	08005e09 	.word	0x08005e09
 8005dd4:	08005e01 	.word	0x08005e01
 8005dd8:	2301      	movs	r3, #1
 8005dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dde:	e050      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005de0:	2304      	movs	r3, #4
 8005de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005de6:	e04c      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005de8:	2308      	movs	r3, #8
 8005dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dee:	e048      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005df0:	2310      	movs	r3, #16
 8005df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005df6:	e044      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005df8:	2320      	movs	r3, #32
 8005dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dfe:	e040      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005e00:	2340      	movs	r3, #64	; 0x40
 8005e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e06:	e03c      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005e08:	2380      	movs	r3, #128	; 0x80
 8005e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e0e:	e038      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a71      	ldr	r2, [pc, #452]	; (8005fdc <UART_SetConfig+0x904>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d130      	bne.n	8005e7c <UART_SetConfig+0x7a4>
 8005e1a:	4b6f      	ldr	r3, [pc, #444]	; (8005fd8 <UART_SetConfig+0x900>)
 8005e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	2b05      	cmp	r3, #5
 8005e24:	d826      	bhi.n	8005e74 <UART_SetConfig+0x79c>
 8005e26:	a201      	add	r2, pc, #4	; (adr r2, 8005e2c <UART_SetConfig+0x754>)
 8005e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2c:	08005e45 	.word	0x08005e45
 8005e30:	08005e4d 	.word	0x08005e4d
 8005e34:	08005e55 	.word	0x08005e55
 8005e38:	08005e5d 	.word	0x08005e5d
 8005e3c:	08005e65 	.word	0x08005e65
 8005e40:	08005e6d 	.word	0x08005e6d
 8005e44:	2302      	movs	r3, #2
 8005e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e4a:	e01a      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005e4c:	2304      	movs	r3, #4
 8005e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e52:	e016      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005e54:	2308      	movs	r3, #8
 8005e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e5a:	e012      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005e5c:	2310      	movs	r3, #16
 8005e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e62:	e00e      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005e64:	2320      	movs	r3, #32
 8005e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e6a:	e00a      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005e6c:	2340      	movs	r3, #64	; 0x40
 8005e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e72:	e006      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005e74:	2380      	movs	r3, #128	; 0x80
 8005e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e7a:	e002      	b.n	8005e82 <UART_SetConfig+0x7aa>
 8005e7c:	2380      	movs	r3, #128	; 0x80
 8005e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a55      	ldr	r2, [pc, #340]	; (8005fdc <UART_SetConfig+0x904>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	f040 80f0 	bne.w	800606e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e92:	2b20      	cmp	r3, #32
 8005e94:	dc46      	bgt.n	8005f24 <UART_SetConfig+0x84c>
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	db75      	blt.n	8005f86 <UART_SetConfig+0x8ae>
 8005e9a:	3b02      	subs	r3, #2
 8005e9c:	2b1e      	cmp	r3, #30
 8005e9e:	d872      	bhi.n	8005f86 <UART_SetConfig+0x8ae>
 8005ea0:	a201      	add	r2, pc, #4	; (adr r2, 8005ea8 <UART_SetConfig+0x7d0>)
 8005ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea6:	bf00      	nop
 8005ea8:	08005f2b 	.word	0x08005f2b
 8005eac:	08005f87 	.word	0x08005f87
 8005eb0:	08005f33 	.word	0x08005f33
 8005eb4:	08005f87 	.word	0x08005f87
 8005eb8:	08005f87 	.word	0x08005f87
 8005ebc:	08005f87 	.word	0x08005f87
 8005ec0:	08005f43 	.word	0x08005f43
 8005ec4:	08005f87 	.word	0x08005f87
 8005ec8:	08005f87 	.word	0x08005f87
 8005ecc:	08005f87 	.word	0x08005f87
 8005ed0:	08005f87 	.word	0x08005f87
 8005ed4:	08005f87 	.word	0x08005f87
 8005ed8:	08005f87 	.word	0x08005f87
 8005edc:	08005f87 	.word	0x08005f87
 8005ee0:	08005f53 	.word	0x08005f53
 8005ee4:	08005f87 	.word	0x08005f87
 8005ee8:	08005f87 	.word	0x08005f87
 8005eec:	08005f87 	.word	0x08005f87
 8005ef0:	08005f87 	.word	0x08005f87
 8005ef4:	08005f87 	.word	0x08005f87
 8005ef8:	08005f87 	.word	0x08005f87
 8005efc:	08005f87 	.word	0x08005f87
 8005f00:	08005f87 	.word	0x08005f87
 8005f04:	08005f87 	.word	0x08005f87
 8005f08:	08005f87 	.word	0x08005f87
 8005f0c:	08005f87 	.word	0x08005f87
 8005f10:	08005f87 	.word	0x08005f87
 8005f14:	08005f87 	.word	0x08005f87
 8005f18:	08005f87 	.word	0x08005f87
 8005f1c:	08005f87 	.word	0x08005f87
 8005f20:	08005f79 	.word	0x08005f79
 8005f24:	2b40      	cmp	r3, #64	; 0x40
 8005f26:	d02a      	beq.n	8005f7e <UART_SetConfig+0x8a6>
 8005f28:	e02d      	b.n	8005f86 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f2a:	f7fd ffdf 	bl	8003eec <HAL_RCCEx_GetD3PCLK1Freq>
 8005f2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f30:	e02f      	b.n	8005f92 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f32:	f107 0314 	add.w	r3, r7, #20
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fd ffee 	bl	8003f18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f40:	e027      	b.n	8005f92 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f42:	f107 0308 	add.w	r3, r7, #8
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fe f93a 	bl	80041c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f50:	e01f      	b.n	8005f92 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f52:	4b21      	ldr	r3, [pc, #132]	; (8005fd8 <UART_SetConfig+0x900>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0320 	and.w	r3, r3, #32
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d009      	beq.n	8005f72 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f5e:	4b1e      	ldr	r3, [pc, #120]	; (8005fd8 <UART_SetConfig+0x900>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	08db      	lsrs	r3, r3, #3
 8005f64:	f003 0303 	and.w	r3, r3, #3
 8005f68:	4a1d      	ldr	r2, [pc, #116]	; (8005fe0 <UART_SetConfig+0x908>)
 8005f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f70:	e00f      	b.n	8005f92 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8005f72:	4b1b      	ldr	r3, [pc, #108]	; (8005fe0 <UART_SetConfig+0x908>)
 8005f74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f76:	e00c      	b.n	8005f92 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f78:	4b1a      	ldr	r3, [pc, #104]	; (8005fe4 <UART_SetConfig+0x90c>)
 8005f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f7c:	e009      	b.n	8005f92 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f84:	e005      	b.n	8005f92 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005f90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 81e6 	beq.w	8006366 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	4a12      	ldr	r2, [pc, #72]	; (8005fe8 <UART_SetConfig+0x910>)
 8005fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fac:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	4413      	add	r3, r2
 8005fb8:	6a3a      	ldr	r2, [r7, #32]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d305      	bcc.n	8005fca <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fc4:	6a3a      	ldr	r2, [r7, #32]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d910      	bls.n	8005fec <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005fd0:	e1c9      	b.n	8006366 <UART_SetConfig+0xc8e>
 8005fd2:	bf00      	nop
 8005fd4:	40011c00 	.word	0x40011c00
 8005fd8:	58024400 	.word	0x58024400
 8005fdc:	58000c00 	.word	0x58000c00
 8005fe0:	03d09000 	.word	0x03d09000
 8005fe4:	003d0900 	.word	0x003d0900
 8005fe8:	0800a864 	.word	0x0800a864
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f04f 0100 	mov.w	r1, #0
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	4ac1      	ldr	r2, [pc, #772]	; (8006300 <UART_SetConfig+0xc28>)
 8005ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	f7fa f974 	bl	80002f0 <__aeabi_uldivmod>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4610      	mov	r0, r2
 800600e:	4619      	mov	r1, r3
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	020b      	lsls	r3, r1, #8
 800601a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800601e:	0202      	lsls	r2, r0, #8
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	6849      	ldr	r1, [r1, #4]
 8006024:	0849      	lsrs	r1, r1, #1
 8006026:	4608      	mov	r0, r1
 8006028:	f04f 0100 	mov.w	r1, #0
 800602c:	1814      	adds	r4, r2, r0
 800602e:	eb43 0501 	adc.w	r5, r3, r1
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	461a      	mov	r2, r3
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	4620      	mov	r0, r4
 800603e:	4629      	mov	r1, r5
 8006040:	f7fa f956 	bl	80002f0 <__aeabi_uldivmod>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4613      	mov	r3, r2
 800604a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006052:	d308      	bcc.n	8006066 <UART_SetConfig+0x98e>
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800605a:	d204      	bcs.n	8006066 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006062:	60da      	str	r2, [r3, #12]
 8006064:	e17f      	b.n	8006366 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800606c:	e17b      	b.n	8006366 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006076:	f040 80bd 	bne.w	80061f4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800607a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800607e:	2b20      	cmp	r3, #32
 8006080:	dc48      	bgt.n	8006114 <UART_SetConfig+0xa3c>
 8006082:	2b00      	cmp	r3, #0
 8006084:	db7b      	blt.n	800617e <UART_SetConfig+0xaa6>
 8006086:	2b20      	cmp	r3, #32
 8006088:	d879      	bhi.n	800617e <UART_SetConfig+0xaa6>
 800608a:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <UART_SetConfig+0x9b8>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	0800611b 	.word	0x0800611b
 8006094:	08006123 	.word	0x08006123
 8006098:	0800617f 	.word	0x0800617f
 800609c:	0800617f 	.word	0x0800617f
 80060a0:	0800612b 	.word	0x0800612b
 80060a4:	0800617f 	.word	0x0800617f
 80060a8:	0800617f 	.word	0x0800617f
 80060ac:	0800617f 	.word	0x0800617f
 80060b0:	0800613b 	.word	0x0800613b
 80060b4:	0800617f 	.word	0x0800617f
 80060b8:	0800617f 	.word	0x0800617f
 80060bc:	0800617f 	.word	0x0800617f
 80060c0:	0800617f 	.word	0x0800617f
 80060c4:	0800617f 	.word	0x0800617f
 80060c8:	0800617f 	.word	0x0800617f
 80060cc:	0800617f 	.word	0x0800617f
 80060d0:	0800614b 	.word	0x0800614b
 80060d4:	0800617f 	.word	0x0800617f
 80060d8:	0800617f 	.word	0x0800617f
 80060dc:	0800617f 	.word	0x0800617f
 80060e0:	0800617f 	.word	0x0800617f
 80060e4:	0800617f 	.word	0x0800617f
 80060e8:	0800617f 	.word	0x0800617f
 80060ec:	0800617f 	.word	0x0800617f
 80060f0:	0800617f 	.word	0x0800617f
 80060f4:	0800617f 	.word	0x0800617f
 80060f8:	0800617f 	.word	0x0800617f
 80060fc:	0800617f 	.word	0x0800617f
 8006100:	0800617f 	.word	0x0800617f
 8006104:	0800617f 	.word	0x0800617f
 8006108:	0800617f 	.word	0x0800617f
 800610c:	0800617f 	.word	0x0800617f
 8006110:	08006171 	.word	0x08006171
 8006114:	2b40      	cmp	r3, #64	; 0x40
 8006116:	d02e      	beq.n	8006176 <UART_SetConfig+0xa9e>
 8006118:	e031      	b.n	800617e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800611a:	f7fc ff6d 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 800611e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006120:	e033      	b.n	800618a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006122:	f7fc ff7f 	bl	8003024 <HAL_RCC_GetPCLK2Freq>
 8006126:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006128:	e02f      	b.n	800618a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800612a:	f107 0314 	add.w	r3, r7, #20
 800612e:	4618      	mov	r0, r3
 8006130:	f7fd fef2 	bl	8003f18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006138:	e027      	b.n	800618a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800613a:	f107 0308 	add.w	r3, r7, #8
 800613e:	4618      	mov	r0, r3
 8006140:	f7fe f83e 	bl	80041c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006148:	e01f      	b.n	800618a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800614a:	4b6e      	ldr	r3, [pc, #440]	; (8006304 <UART_SetConfig+0xc2c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0320 	and.w	r3, r3, #32
 8006152:	2b00      	cmp	r3, #0
 8006154:	d009      	beq.n	800616a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006156:	4b6b      	ldr	r3, [pc, #428]	; (8006304 <UART_SetConfig+0xc2c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	08db      	lsrs	r3, r3, #3
 800615c:	f003 0303 	and.w	r3, r3, #3
 8006160:	4a69      	ldr	r2, [pc, #420]	; (8006308 <UART_SetConfig+0xc30>)
 8006162:	fa22 f303 	lsr.w	r3, r2, r3
 8006166:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006168:	e00f      	b.n	800618a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800616a:	4b67      	ldr	r3, [pc, #412]	; (8006308 <UART_SetConfig+0xc30>)
 800616c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800616e:	e00c      	b.n	800618a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006170:	4b66      	ldr	r3, [pc, #408]	; (800630c <UART_SetConfig+0xc34>)
 8006172:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006174:	e009      	b.n	800618a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800617a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800617c:	e005      	b.n	800618a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006188:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 80ea 	beq.w	8006366 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	4a5a      	ldr	r2, [pc, #360]	; (8006300 <UART_SetConfig+0xc28>)
 8006198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800619c:	461a      	mov	r2, r3
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80061a4:	005a      	lsls	r2, r3, #1
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	085b      	lsrs	r3, r3, #1
 80061ac:	441a      	add	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	2b0f      	cmp	r3, #15
 80061bc:	d916      	bls.n	80061ec <UART_SetConfig+0xb14>
 80061be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c4:	d212      	bcs.n	80061ec <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	f023 030f 	bic.w	r3, r3, #15
 80061ce:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	085b      	lsrs	r3, r3, #1
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	b29a      	uxth	r2, r3
 80061dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061de:	4313      	orrs	r3, r2
 80061e0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061e8:	60da      	str	r2, [r3, #12]
 80061ea:	e0bc      	b.n	8006366 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80061f2:	e0b8      	b.n	8006366 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061f8:	2b20      	cmp	r3, #32
 80061fa:	dc4b      	bgt.n	8006294 <UART_SetConfig+0xbbc>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f2c0 8087 	blt.w	8006310 <UART_SetConfig+0xc38>
 8006202:	2b20      	cmp	r3, #32
 8006204:	f200 8084 	bhi.w	8006310 <UART_SetConfig+0xc38>
 8006208:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <UART_SetConfig+0xb38>)
 800620a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620e:	bf00      	nop
 8006210:	0800629b 	.word	0x0800629b
 8006214:	080062a3 	.word	0x080062a3
 8006218:	08006311 	.word	0x08006311
 800621c:	08006311 	.word	0x08006311
 8006220:	080062ab 	.word	0x080062ab
 8006224:	08006311 	.word	0x08006311
 8006228:	08006311 	.word	0x08006311
 800622c:	08006311 	.word	0x08006311
 8006230:	080062bb 	.word	0x080062bb
 8006234:	08006311 	.word	0x08006311
 8006238:	08006311 	.word	0x08006311
 800623c:	08006311 	.word	0x08006311
 8006240:	08006311 	.word	0x08006311
 8006244:	08006311 	.word	0x08006311
 8006248:	08006311 	.word	0x08006311
 800624c:	08006311 	.word	0x08006311
 8006250:	080062cb 	.word	0x080062cb
 8006254:	08006311 	.word	0x08006311
 8006258:	08006311 	.word	0x08006311
 800625c:	08006311 	.word	0x08006311
 8006260:	08006311 	.word	0x08006311
 8006264:	08006311 	.word	0x08006311
 8006268:	08006311 	.word	0x08006311
 800626c:	08006311 	.word	0x08006311
 8006270:	08006311 	.word	0x08006311
 8006274:	08006311 	.word	0x08006311
 8006278:	08006311 	.word	0x08006311
 800627c:	08006311 	.word	0x08006311
 8006280:	08006311 	.word	0x08006311
 8006284:	08006311 	.word	0x08006311
 8006288:	08006311 	.word	0x08006311
 800628c:	08006311 	.word	0x08006311
 8006290:	080062f1 	.word	0x080062f1
 8006294:	2b40      	cmp	r3, #64	; 0x40
 8006296:	d02e      	beq.n	80062f6 <UART_SetConfig+0xc1e>
 8006298:	e03a      	b.n	8006310 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800629a:	f7fc fead 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 800629e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062a0:	e03c      	b.n	800631c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062a2:	f7fc febf 	bl	8003024 <HAL_RCC_GetPCLK2Freq>
 80062a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062a8:	e038      	b.n	800631c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062aa:	f107 0314 	add.w	r3, r7, #20
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fd fe32 	bl	8003f18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062b8:	e030      	b.n	800631c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062ba:	f107 0308 	add.w	r3, r7, #8
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fd ff7e 	bl	80041c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062c8:	e028      	b.n	800631c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062ca:	4b0e      	ldr	r3, [pc, #56]	; (8006304 <UART_SetConfig+0xc2c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0320 	and.w	r3, r3, #32
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d009      	beq.n	80062ea <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062d6:	4b0b      	ldr	r3, [pc, #44]	; (8006304 <UART_SetConfig+0xc2c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	08db      	lsrs	r3, r3, #3
 80062dc:	f003 0303 	and.w	r3, r3, #3
 80062e0:	4a09      	ldr	r2, [pc, #36]	; (8006308 <UART_SetConfig+0xc30>)
 80062e2:	fa22 f303 	lsr.w	r3, r2, r3
 80062e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062e8:	e018      	b.n	800631c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80062ea:	4b07      	ldr	r3, [pc, #28]	; (8006308 <UART_SetConfig+0xc30>)
 80062ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062ee:	e015      	b.n	800631c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062f0:	4b06      	ldr	r3, [pc, #24]	; (800630c <UART_SetConfig+0xc34>)
 80062f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062f4:	e012      	b.n	800631c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062fc:	e00e      	b.n	800631c <UART_SetConfig+0xc44>
 80062fe:	bf00      	nop
 8006300:	0800a864 	.word	0x0800a864
 8006304:	58024400 	.word	0x58024400
 8006308:	03d09000 	.word	0x03d09000
 800630c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800631a:	bf00      	nop
    }

    if (pclk != 0U)
 800631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d021      	beq.n	8006366 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	4a1a      	ldr	r2, [pc, #104]	; (8006390 <UART_SetConfig+0xcb8>)
 8006328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800632c:	461a      	mov	r2, r3
 800632e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006330:	fbb3 f2f2 	udiv	r2, r3, r2
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	085b      	lsrs	r3, r3, #1
 800633a:	441a      	add	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	fbb2 f3f3 	udiv	r3, r2, r3
 8006344:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	2b0f      	cmp	r3, #15
 800634a:	d909      	bls.n	8006360 <UART_SetConfig+0xc88>
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006352:	d205      	bcs.n	8006360 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	b29a      	uxth	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	60da      	str	r2, [r3, #12]
 800635e:	e002      	b.n	8006366 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006382:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006386:	4618      	mov	r0, r3
 8006388:	3738      	adds	r7, #56	; 0x38
 800638a:	46bd      	mov	sp, r7
 800638c:	bdb0      	pop	{r4, r5, r7, pc}
 800638e:	bf00      	nop
 8006390:	0800a864 	.word	0x0800a864

08006394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006406:	f003 0308 	and.w	r3, r3, #8
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	430a      	orrs	r2, r1
 8006422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006428:	f003 0310 	and.w	r3, r3, #16
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006470:	2b00      	cmp	r3, #0
 8006472:	d01a      	beq.n	80064aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006492:	d10a      	bne.n	80064aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	605a      	str	r2, [r3, #4]
  }
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af02      	add	r7, sp, #8
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064e8:	f7fa fd96 	bl	8001018 <HAL_GetTick>
 80064ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0308 	and.w	r3, r3, #8
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d10e      	bne.n	800651a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f82f 	bl	800656e <UART_WaitOnFlagUntilTimeout>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e025      	b.n	8006566 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b04      	cmp	r3, #4
 8006526:	d10e      	bne.n	8006546 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f819 	bl	800656e <UART_WaitOnFlagUntilTimeout>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e00f      	b.n	8006566 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2220      	movs	r2, #32
 800654a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2220      	movs	r2, #32
 8006552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b09c      	sub	sp, #112	; 0x70
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	603b      	str	r3, [r7, #0]
 800657a:	4613      	mov	r3, r2
 800657c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800657e:	e0a9      	b.n	80066d4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006586:	f000 80a5 	beq.w	80066d4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800658a:	f7fa fd45 	bl	8001018 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006596:	429a      	cmp	r2, r3
 8006598:	d302      	bcc.n	80065a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800659a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800659c:	2b00      	cmp	r3, #0
 800659e:	d140      	bne.n	8006622 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065b4:	667b      	str	r3, [r7, #100]	; 0x64
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	461a      	mov	r2, r3
 80065bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065c0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065c6:	e841 2300 	strex	r3, r2, [r1]
 80065ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1e6      	bne.n	80065a0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3308      	adds	r3, #8
 80065d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065dc:	e853 3f00 	ldrex	r3, [r3]
 80065e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	f023 0301 	bic.w	r3, r3, #1
 80065e8:	663b      	str	r3, [r7, #96]	; 0x60
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3308      	adds	r3, #8
 80065f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80065f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065fa:	e841 2300 	strex	r3, r2, [r1]
 80065fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1e5      	bne.n	80065d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2220      	movs	r2, #32
 800660a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2220      	movs	r2, #32
 8006612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e069      	b.n	80066f6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d051      	beq.n	80066d4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800663a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800663e:	d149      	bne.n	80066d4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006648:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800665e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	461a      	mov	r2, r3
 8006666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006668:	637b      	str	r3, [r7, #52]	; 0x34
 800666a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800666e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006670:	e841 2300 	strex	r3, r2, [r1]
 8006674:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e6      	bne.n	800664a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3308      	adds	r3, #8
 8006682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	613b      	str	r3, [r7, #16]
   return(result);
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f023 0301 	bic.w	r3, r3, #1
 8006692:	66bb      	str	r3, [r7, #104]	; 0x68
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3308      	adds	r3, #8
 800669a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800669c:	623a      	str	r2, [r7, #32]
 800669e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a0:	69f9      	ldr	r1, [r7, #28]
 80066a2:	6a3a      	ldr	r2, [r7, #32]
 80066a4:	e841 2300 	strex	r3, r2, [r1]
 80066a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e5      	bne.n	800667c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e010      	b.n	80066f6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	69da      	ldr	r2, [r3, #28]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	4013      	ands	r3, r2
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	bf0c      	ite	eq
 80066e4:	2301      	moveq	r3, #1
 80066e6:	2300      	movne	r3, #0
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	461a      	mov	r2, r3
 80066ec:	79fb      	ldrb	r3, [r7, #7]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	f43f af46 	beq.w	8006580 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3770      	adds	r7, #112	; 0x70
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006700:	b480      	push	{r7}
 8006702:	b0a3      	sub	sp, #140	; 0x8c
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	4613      	mov	r3, r2
 800670c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	88fa      	ldrh	r2, [r7, #6]
 8006718:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	88fa      	ldrh	r2, [r7, #6]
 8006720:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006732:	d10e      	bne.n	8006752 <UART_Start_Receive_IT+0x52>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d105      	bne.n	8006748 <UART_Start_Receive_IT+0x48>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006742:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006746:	e02d      	b.n	80067a4 <UART_Start_Receive_IT+0xa4>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	22ff      	movs	r2, #255	; 0xff
 800674c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006750:	e028      	b.n	80067a4 <UART_Start_Receive_IT+0xa4>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10d      	bne.n	8006776 <UART_Start_Receive_IT+0x76>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d104      	bne.n	800676c <UART_Start_Receive_IT+0x6c>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	22ff      	movs	r2, #255	; 0xff
 8006766:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800676a:	e01b      	b.n	80067a4 <UART_Start_Receive_IT+0xa4>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	227f      	movs	r2, #127	; 0x7f
 8006770:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006774:	e016      	b.n	80067a4 <UART_Start_Receive_IT+0xa4>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800677e:	d10d      	bne.n	800679c <UART_Start_Receive_IT+0x9c>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d104      	bne.n	8006792 <UART_Start_Receive_IT+0x92>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	227f      	movs	r2, #127	; 0x7f
 800678c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006790:	e008      	b.n	80067a4 <UART_Start_Receive_IT+0xa4>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	223f      	movs	r2, #63	; 0x3f
 8006796:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800679a:	e003      	b.n	80067a4 <UART_Start_Receive_IT+0xa4>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2222      	movs	r2, #34	; 0x22
 80067b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3308      	adds	r3, #8
 80067ba:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067be:	e853 3f00 	ldrex	r3, [r3]
 80067c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80067c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067c6:	f043 0301 	orr.w	r3, r3, #1
 80067ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3308      	adds	r3, #8
 80067d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80067d8:	673a      	str	r2, [r7, #112]	; 0x70
 80067da:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80067de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80067e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e3      	bne.n	80067b4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067f4:	d153      	bne.n	800689e <UART_Start_Receive_IT+0x19e>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80067fc:	88fa      	ldrh	r2, [r7, #6]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d34d      	bcc.n	800689e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680a:	d107      	bne.n	800681c <UART_Start_Receive_IT+0x11c>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d103      	bne.n	800681c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4a4b      	ldr	r2, [pc, #300]	; (8006944 <UART_Start_Receive_IT+0x244>)
 8006818:	671a      	str	r2, [r3, #112]	; 0x70
 800681a:	e002      	b.n	8006822 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	4a4a      	ldr	r2, [pc, #296]	; (8006948 <UART_Start_Receive_IT+0x248>)
 8006820:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d01a      	beq.n	8006868 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006846:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006854:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006856:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006858:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800685a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800685c:	e841 2300 	strex	r3, r2, [r1]
 8006860:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e4      	bne.n	8006832 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3308      	adds	r3, #8
 800686e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006872:	e853 3f00 	ldrex	r3, [r3]
 8006876:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800687e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3308      	adds	r3, #8
 8006886:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006888:	64ba      	str	r2, [r7, #72]	; 0x48
 800688a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800688e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006890:	e841 2300 	strex	r3, r2, [r1]
 8006894:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1e5      	bne.n	8006868 <UART_Start_Receive_IT+0x168>
 800689c:	e04a      	b.n	8006934 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a6:	d107      	bne.n	80068b8 <UART_Start_Receive_IT+0x1b8>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d103      	bne.n	80068b8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4a26      	ldr	r2, [pc, #152]	; (800694c <UART_Start_Receive_IT+0x24c>)
 80068b4:	671a      	str	r2, [r3, #112]	; 0x70
 80068b6:	e002      	b.n	80068be <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4a25      	ldr	r2, [pc, #148]	; (8006950 <UART_Start_Receive_IT+0x250>)
 80068bc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d019      	beq.n	8006902 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	e853 3f00 	ldrex	r3, [r3]
 80068da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80068e2:	677b      	str	r3, [r7, #116]	; 0x74
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	461a      	mov	r2, r3
 80068ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068ec:	637b      	str	r3, [r7, #52]	; 0x34
 80068ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068f4:	e841 2300 	strex	r3, r2, [r1]
 80068f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1e6      	bne.n	80068ce <UART_Start_Receive_IT+0x1ce>
 8006900:	e018      	b.n	8006934 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	e853 3f00 	ldrex	r3, [r3]
 800690e:	613b      	str	r3, [r7, #16]
   return(result);
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f043 0320 	orr.w	r3, r3, #32
 8006916:	67bb      	str	r3, [r7, #120]	; 0x78
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	461a      	mov	r2, r3
 800691e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006920:	623b      	str	r3, [r7, #32]
 8006922:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006924:	69f9      	ldr	r1, [r7, #28]
 8006926:	6a3a      	ldr	r2, [r7, #32]
 8006928:	e841 2300 	strex	r3, r2, [r1]
 800692c:	61bb      	str	r3, [r7, #24]
   return(result);
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1e6      	bne.n	8006902 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	378c      	adds	r7, #140	; 0x8c
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	0800705d 	.word	0x0800705d
 8006948:	08006d65 	.word	0x08006d65
 800694c:	08006c03 	.word	0x08006c03
 8006950:	08006aa3 	.word	0x08006aa3

08006954 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006954:	b480      	push	{r7}
 8006956:	b095      	sub	sp, #84	; 0x54
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006970:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800697a:	643b      	str	r3, [r7, #64]	; 0x40
 800697c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006980:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e6      	bne.n	800695c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3308      	adds	r3, #8
 8006994:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	61fb      	str	r3, [r7, #28]
   return(result);
 800699e:	69fa      	ldr	r2, [r7, #28]
 80069a0:	4b1e      	ldr	r3, [pc, #120]	; (8006a1c <UART_EndRxTransfer+0xc8>)
 80069a2:	4013      	ands	r3, r2
 80069a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3308      	adds	r3, #8
 80069ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e5      	bne.n	800698e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d118      	bne.n	80069fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f023 0310 	bic.w	r3, r3, #16
 80069de:	647b      	str	r3, [r7, #68]	; 0x44
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	461a      	mov	r2, r3
 80069e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e8:	61bb      	str	r3, [r7, #24]
 80069ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	6979      	ldr	r1, [r7, #20]
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	613b      	str	r3, [r7, #16]
   return(result);
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e6      	bne.n	80069ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006a10:	bf00      	nop
 8006a12:	3754      	adds	r7, #84	; 0x54
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	effffffe 	.word	0xeffffffe

08006a20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f7fe fe34 	bl	80056ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a44:	bf00      	nop
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b088      	sub	sp, #32
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a68:	61fb      	str	r3, [r7, #28]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	61bb      	str	r3, [r7, #24]
 8006a74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6979      	ldr	r1, [r7, #20]
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e6      	bne.n	8006a54 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7fe fdff 	bl	8005698 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a9a:	bf00      	nop
 8006a9c:	3720      	adds	r7, #32
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b096      	sub	sp, #88	; 0x58
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ab0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aba:	2b22      	cmp	r3, #34	; 0x22
 8006abc:	f040 8095 	bne.w	8006bea <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006aca:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006ace:	b2d9      	uxtb	r1, r3
 8006ad0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ada:	400a      	ands	r2, r1
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d178      	bne.n	8006bfa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b1c:	653b      	str	r3, [r7, #80]	; 0x50
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b26:	647b      	str	r3, [r7, #68]	; 0x44
 8006b28:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e6      	bne.n	8006b08 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	623b      	str	r3, [r7, #32]
   return(result);
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	f023 0301 	bic.w	r3, r3, #1
 8006b50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3308      	adds	r3, #8
 8006b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b5a:	633a      	str	r2, [r7, #48]	; 0x30
 8006b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e5      	bne.n	8006b3a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d12e      	bne.n	8006be2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	e853 3f00 	ldrex	r3, [r3]
 8006b96:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 0310 	bic.w	r3, r3, #16
 8006b9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ba8:	61fb      	str	r3, [r7, #28]
 8006baa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bac:	69b9      	ldr	r1, [r7, #24]
 8006bae:	69fa      	ldr	r2, [r7, #28]
 8006bb0:	e841 2300 	strex	r3, r2, [r1]
 8006bb4:	617b      	str	r3, [r7, #20]
   return(result);
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1e6      	bne.n	8006b8a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	f003 0310 	and.w	r3, r3, #16
 8006bc6:	2b10      	cmp	r3, #16
 8006bc8:	d103      	bne.n	8006bd2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2210      	movs	r2, #16
 8006bd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bd8:	4619      	mov	r1, r3
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7fe fd70 	bl	80056c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006be0:	e00b      	b.n	8006bfa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7fa f976 	bl	8000ed4 <HAL_UART_RxCpltCallback>
}
 8006be8:	e007      	b.n	8006bfa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	699a      	ldr	r2, [r3, #24]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f042 0208 	orr.w	r2, r2, #8
 8006bf8:	619a      	str	r2, [r3, #24]
}
 8006bfa:	bf00      	nop
 8006bfc:	3758      	adds	r7, #88	; 0x58
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b096      	sub	sp, #88	; 0x58
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c10:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c1a:	2b22      	cmp	r3, #34	; 0x22
 8006c1c:	f040 8095 	bne.w	8006d4a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006c30:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006c34:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006c38:	4013      	ands	r3, r2
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c3e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c44:	1c9a      	adds	r2, r3, #2
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	3b01      	subs	r3, #1
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d178      	bne.n	8006d5a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c86:	643b      	str	r3, [r7, #64]	; 0x40
 8006c88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e6      	bne.n	8006c68 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	3308      	adds	r3, #8
 8006ca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	f023 0301 	bic.w	r3, r3, #1
 8006cb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3308      	adds	r3, #8
 8006cb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cc2:	e841 2300 	strex	r3, r2, [r1]
 8006cc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e5      	bne.n	8006c9a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d12e      	bne.n	8006d42 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f023 0310 	bic.w	r3, r3, #16
 8006cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d08:	61bb      	str	r3, [r7, #24]
 8006d0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	6979      	ldr	r1, [r7, #20]
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	e841 2300 	strex	r3, r2, [r1]
 8006d14:	613b      	str	r3, [r7, #16]
   return(result);
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e6      	bne.n	8006cea <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	f003 0310 	and.w	r3, r3, #16
 8006d26:	2b10      	cmp	r3, #16
 8006d28:	d103      	bne.n	8006d32 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2210      	movs	r2, #16
 8006d30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7fe fcc0 	bl	80056c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d40:	e00b      	b.n	8006d5a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7fa f8c6 	bl	8000ed4 <HAL_UART_RxCpltCallback>
}
 8006d48:	e007      	b.n	8006d5a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	699a      	ldr	r2, [r3, #24]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0208 	orr.w	r2, r2, #8
 8006d58:	619a      	str	r2, [r3, #24]
}
 8006d5a:	bf00      	nop
 8006d5c:	3758      	adds	r7, #88	; 0x58
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b0a6      	sub	sp, #152	; 0x98
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d72:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d9a:	2b22      	cmp	r3, #34	; 0x22
 8006d9c:	f040 814d 	bne.w	800703a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006da6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006daa:	e0f4      	b.n	8006f96 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006db6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006dba:	b2d9      	uxtb	r1, r3
 8006dbc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc6:	400a      	ands	r2, r1
 8006dc8:	b2d2      	uxtb	r2, r2
 8006dca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	3b01      	subs	r3, #1
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006df2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006df6:	f003 0307 	and.w	r3, r3, #7
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d053      	beq.n	8006ea6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006dfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d011      	beq.n	8006e2e <UART_RxISR_8BIT_FIFOEN+0xca>
 8006e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00b      	beq.n	8006e2e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e24:	f043 0201 	orr.w	r2, r3, #1
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d011      	beq.n	8006e5e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006e3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00b      	beq.n	8006e5e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e54:	f043 0204 	orr.w	r2, r3, #4
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e62:	f003 0304 	and.w	r3, r3, #4
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d011      	beq.n	8006e8e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006e6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00b      	beq.n	8006e8e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2204      	movs	r2, #4
 8006e7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e84:	f043 0202 	orr.w	r2, r3, #2
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d006      	beq.n	8006ea6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7fe fc07 	bl	80056ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d171      	bne.n	8006f96 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eba:	e853 3f00 	ldrex	r3, [r3]
 8006ebe:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006ec0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ec2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ec6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ed4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ed6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006eda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006edc:	e841 2300 	strex	r3, r2, [r1]
 8006ee0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006ee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e4      	bne.n	8006eb2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3308      	adds	r3, #8
 8006eee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006ef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006efa:	4b56      	ldr	r3, [pc, #344]	; (8007054 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8006efc:	4013      	ands	r3, r2
 8006efe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3308      	adds	r3, #8
 8006f06:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006f08:	657a      	str	r2, [r7, #84]	; 0x54
 8006f0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e5      	bne.n	8006ee8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d12e      	bne.n	8006f90 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f40:	e853 3f00 	ldrex	r3, [r3]
 8006f44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	f023 0310 	bic.w	r3, r3, #16
 8006f4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f56:	643b      	str	r3, [r7, #64]	; 0x40
 8006f58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1e6      	bne.n	8006f38 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	69db      	ldr	r3, [r3, #28]
 8006f70:	f003 0310 	and.w	r3, r3, #16
 8006f74:	2b10      	cmp	r3, #16
 8006f76:	d103      	bne.n	8006f80 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2210      	movs	r2, #16
 8006f7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7fe fb99 	bl	80056c0 <HAL_UARTEx_RxEventCallback>
 8006f8e:	e002      	b.n	8006f96 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7f9 ff9f 	bl	8000ed4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d006      	beq.n	8006fac <UART_RxISR_8BIT_FIFOEN+0x248>
 8006f9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006fa2:	f003 0320 	and.w	r3, r3, #32
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f47f af00 	bne.w	8006dac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fb2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006fb6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d045      	beq.n	800704a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006fc4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d23e      	bcs.n	800704a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3308      	adds	r3, #8
 8006fd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	e853 3f00 	ldrex	r3, [r3]
 8006fda:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fe2:	673b      	str	r3, [r7, #112]	; 0x70
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3308      	adds	r3, #8
 8006fea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006fec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ff4:	e841 2300 	strex	r3, r2, [r1]
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e5      	bne.n	8006fcc <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a15      	ldr	r2, [pc, #84]	; (8007058 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007004:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	60bb      	str	r3, [r7, #8]
   return(result);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f043 0320 	orr.w	r3, r3, #32
 800701a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007024:	61bb      	str	r3, [r7, #24]
 8007026:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6979      	ldr	r1, [r7, #20]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	613b      	str	r3, [r7, #16]
   return(result);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e6      	bne.n	8007006 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007038:	e007      	b.n	800704a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	699a      	ldr	r2, [r3, #24]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f042 0208 	orr.w	r2, r2, #8
 8007048:	619a      	str	r2, [r3, #24]
}
 800704a:	bf00      	nop
 800704c:	3798      	adds	r7, #152	; 0x98
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	effffffe 	.word	0xeffffffe
 8007058:	08006aa3 	.word	0x08006aa3

0800705c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b0a8      	sub	sp, #160	; 0xa0
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800706a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007092:	2b22      	cmp	r3, #34	; 0x22
 8007094:	f040 8151 	bne.w	800733a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800709e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070a2:	e0f8      	b.n	8007296 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80070b6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80070ba:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80070be:	4013      	ands	r3, r2
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070cc:	1c9a      	adds	r2, r3, #2
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070d8:	b29b      	uxth	r3, r3
 80070da:	3b01      	subs	r3, #1
 80070dc:	b29a      	uxth	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80070ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d053      	beq.n	80071a2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d011      	beq.n	800712a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007106:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800710a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00b      	beq.n	800712a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2201      	movs	r2, #1
 8007118:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007120:	f043 0201 	orr.w	r2, r3, #1
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800712a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d011      	beq.n	800715a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007136:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00b      	beq.n	800715a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2202      	movs	r2, #2
 8007148:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007150:	f043 0204 	orr.w	r2, r3, #4
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800715a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800715e:	f003 0304 	and.w	r3, r3, #4
 8007162:	2b00      	cmp	r3, #0
 8007164:	d011      	beq.n	800718a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007166:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00b      	beq.n	800718a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2204      	movs	r2, #4
 8007178:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007180:	f043 0202 	orr.w	r2, r3, #2
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007190:	2b00      	cmp	r3, #0
 8007192:	d006      	beq.n	80071a2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7fe fa89 	bl	80056ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d173      	bne.n	8007296 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071d2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071d8:	e841 2300 	strex	r3, r2, [r1]
 80071dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80071de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1e4      	bne.n	80071ae <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3308      	adds	r3, #8
 80071ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ee:	e853 3f00 	ldrex	r3, [r3]
 80071f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071f6:	4b57      	ldr	r3, [pc, #348]	; (8007354 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 80071f8:	4013      	ands	r3, r2
 80071fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3308      	adds	r3, #8
 8007204:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007208:	65ba      	str	r2, [r7, #88]	; 0x58
 800720a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800720e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007210:	e841 2300 	strex	r3, r2, [r1]
 8007214:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1e3      	bne.n	80071e4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2220      	movs	r2, #32
 8007220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800722e:	2b01      	cmp	r3, #1
 8007230:	d12e      	bne.n	8007290 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007240:	e853 3f00 	ldrex	r3, [r3]
 8007244:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007248:	f023 0310 	bic.w	r3, r3, #16
 800724c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007256:	647b      	str	r3, [r7, #68]	; 0x44
 8007258:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800725c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800725e:	e841 2300 	strex	r3, r2, [r1]
 8007262:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e6      	bne.n	8007238 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	f003 0310 	and.w	r3, r3, #16
 8007274:	2b10      	cmp	r3, #16
 8007276:	d103      	bne.n	8007280 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2210      	movs	r2, #16
 800727e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7fe fa19 	bl	80056c0 <HAL_UARTEx_RxEventCallback>
 800728e:	e002      	b.n	8007296 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7f9 fe1f 	bl	8000ed4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007296:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800729a:	2b00      	cmp	r3, #0
 800729c:	d006      	beq.n	80072ac <UART_RxISR_16BIT_FIFOEN+0x250>
 800729e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072a2:	f003 0320 	and.w	r3, r3, #32
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f47f aefc 	bne.w	80070a4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072b2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80072b6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d045      	beq.n	800734a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80072c4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d23e      	bcs.n	800734a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3308      	adds	r3, #8
 80072d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	623b      	str	r3, [r7, #32]
   return(result);
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072e2:	677b      	str	r3, [r7, #116]	; 0x74
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3308      	adds	r3, #8
 80072ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80072ec:	633a      	str	r2, [r7, #48]	; 0x30
 80072ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e5      	bne.n	80072cc <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a15      	ldr	r2, [pc, #84]	; (8007358 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007304:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	e853 3f00 	ldrex	r3, [r3]
 8007312:	60fb      	str	r3, [r7, #12]
   return(result);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f043 0320 	orr.w	r3, r3, #32
 800731a:	673b      	str	r3, [r7, #112]	; 0x70
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	461a      	mov	r2, r3
 8007322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007324:	61fb      	str	r3, [r7, #28]
 8007326:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	69b9      	ldr	r1, [r7, #24]
 800732a:	69fa      	ldr	r2, [r7, #28]
 800732c:	e841 2300 	strex	r3, r2, [r1]
 8007330:	617b      	str	r3, [r7, #20]
   return(result);
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1e6      	bne.n	8007306 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007338:	e007      	b.n	800734a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	699a      	ldr	r2, [r3, #24]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f042 0208 	orr.w	r2, r2, #8
 8007348:	619a      	str	r2, [r3, #24]
}
 800734a:	bf00      	nop
 800734c:	37a0      	adds	r7, #160	; 0xa0
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	effffffe 	.word	0xeffffffe
 8007358:	08006c03 	.word	0x08006c03

0800735c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d101      	bne.n	80073ae <HAL_UARTEx_DisableFifoMode+0x16>
 80073aa:	2302      	movs	r3, #2
 80073ac:	e027      	b.n	80073fe <HAL_UARTEx_DisableFifoMode+0x66>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2224      	movs	r2, #36	; 0x24
 80073ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0201 	bic.w	r2, r2, #1
 80073d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80073dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2220      	movs	r2, #32
 80073f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800741a:	2b01      	cmp	r3, #1
 800741c:	d101      	bne.n	8007422 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800741e:	2302      	movs	r3, #2
 8007420:	e02d      	b.n	800747e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2224      	movs	r2, #36	; 0x24
 800742e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 0201 	bic.w	r2, r2, #1
 8007448:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	430a      	orrs	r2, r1
 800745c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f850 	bl	8007504 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2220      	movs	r2, #32
 8007470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007496:	2b01      	cmp	r3, #1
 8007498:	d101      	bne.n	800749e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800749a:	2302      	movs	r3, #2
 800749c:	e02d      	b.n	80074fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2224      	movs	r2, #36	; 0x24
 80074aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f022 0201 	bic.w	r2, r2, #1
 80074c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f812 	bl	8007504 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2220      	movs	r2, #32
 80074ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007510:	2b00      	cmp	r3, #0
 8007512:	d108      	bne.n	8007526 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007524:	e031      	b.n	800758a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007526:	2310      	movs	r3, #16
 8007528:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800752a:	2310      	movs	r3, #16
 800752c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	0e5b      	lsrs	r3, r3, #25
 8007536:	b2db      	uxtb	r3, r3
 8007538:	f003 0307 	and.w	r3, r3, #7
 800753c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	0f5b      	lsrs	r3, r3, #29
 8007546:	b2db      	uxtb	r3, r3
 8007548:	f003 0307 	and.w	r3, r3, #7
 800754c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800754e:	7bbb      	ldrb	r3, [r7, #14]
 8007550:	7b3a      	ldrb	r2, [r7, #12]
 8007552:	4911      	ldr	r1, [pc, #68]	; (8007598 <UARTEx_SetNbDataToProcess+0x94>)
 8007554:	5c8a      	ldrb	r2, [r1, r2]
 8007556:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800755a:	7b3a      	ldrb	r2, [r7, #12]
 800755c:	490f      	ldr	r1, [pc, #60]	; (800759c <UARTEx_SetNbDataToProcess+0x98>)
 800755e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007560:	fb93 f3f2 	sdiv	r3, r3, r2
 8007564:	b29a      	uxth	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800756c:	7bfb      	ldrb	r3, [r7, #15]
 800756e:	7b7a      	ldrb	r2, [r7, #13]
 8007570:	4909      	ldr	r1, [pc, #36]	; (8007598 <UARTEx_SetNbDataToProcess+0x94>)
 8007572:	5c8a      	ldrb	r2, [r1, r2]
 8007574:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007578:	7b7a      	ldrb	r2, [r7, #13]
 800757a:	4908      	ldr	r1, [pc, #32]	; (800759c <UARTEx_SetNbDataToProcess+0x98>)
 800757c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800757e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007582:	b29a      	uxth	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800758a:	bf00      	nop
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	0800a87c 	.word	0x0800a87c
 800759c:	0800a884 	.word	0x0800a884

080075a0 <__NVIC_SetPriority>:
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	4603      	mov	r3, r0
 80075a8:	6039      	str	r1, [r7, #0]
 80075aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80075ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	db0a      	blt.n	80075ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	490c      	ldr	r1, [pc, #48]	; (80075ec <__NVIC_SetPriority+0x4c>)
 80075ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075be:	0112      	lsls	r2, r2, #4
 80075c0:	b2d2      	uxtb	r2, r2
 80075c2:	440b      	add	r3, r1
 80075c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80075c8:	e00a      	b.n	80075e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	4908      	ldr	r1, [pc, #32]	; (80075f0 <__NVIC_SetPriority+0x50>)
 80075d0:	88fb      	ldrh	r3, [r7, #6]
 80075d2:	f003 030f 	and.w	r3, r3, #15
 80075d6:	3b04      	subs	r3, #4
 80075d8:	0112      	lsls	r2, r2, #4
 80075da:	b2d2      	uxtb	r2, r2
 80075dc:	440b      	add	r3, r1
 80075de:	761a      	strb	r2, [r3, #24]
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	e000e100 	.word	0xe000e100
 80075f0:	e000ed00 	.word	0xe000ed00

080075f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80075f4:	b580      	push	{r7, lr}
 80075f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80075f8:	4b05      	ldr	r3, [pc, #20]	; (8007610 <SysTick_Handler+0x1c>)
 80075fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80075fc:	f001 ff12 	bl	8009424 <xTaskGetSchedulerState>
 8007600:	4603      	mov	r3, r0
 8007602:	2b01      	cmp	r3, #1
 8007604:	d001      	beq.n	800760a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007606:	f002 fcf7 	bl	8009ff8 <xPortSysTickHandler>
  }
}
 800760a:	bf00      	nop
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	e000e010 	.word	0xe000e010

08007614 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007614:	b580      	push	{r7, lr}
 8007616:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007618:	2100      	movs	r1, #0
 800761a:	f06f 0004 	mvn.w	r0, #4
 800761e:	f7ff ffbf 	bl	80075a0 <__NVIC_SetPriority>
#endif
}
 8007622:	bf00      	nop
 8007624:	bd80      	pop	{r7, pc}
	...

08007628 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800762e:	f3ef 8305 	mrs	r3, IPSR
 8007632:	603b      	str	r3, [r7, #0]
  return(result);
 8007634:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800763a:	f06f 0305 	mvn.w	r3, #5
 800763e:	607b      	str	r3, [r7, #4]
 8007640:	e00c      	b.n	800765c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007642:	4b0a      	ldr	r3, [pc, #40]	; (800766c <osKernelInitialize+0x44>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d105      	bne.n	8007656 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800764a:	4b08      	ldr	r3, [pc, #32]	; (800766c <osKernelInitialize+0x44>)
 800764c:	2201      	movs	r2, #1
 800764e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007650:	2300      	movs	r3, #0
 8007652:	607b      	str	r3, [r7, #4]
 8007654:	e002      	b.n	800765c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800765a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800765c:	687b      	ldr	r3, [r7, #4]
}
 800765e:	4618      	mov	r0, r3
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	240000a0 	.word	0x240000a0

08007670 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007676:	f3ef 8305 	mrs	r3, IPSR
 800767a:	603b      	str	r3, [r7, #0]
  return(result);
 800767c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007682:	f06f 0305 	mvn.w	r3, #5
 8007686:	607b      	str	r3, [r7, #4]
 8007688:	e010      	b.n	80076ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800768a:	4b0b      	ldr	r3, [pc, #44]	; (80076b8 <osKernelStart+0x48>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d109      	bne.n	80076a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007692:	f7ff ffbf 	bl	8007614 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007696:	4b08      	ldr	r3, [pc, #32]	; (80076b8 <osKernelStart+0x48>)
 8007698:	2202      	movs	r2, #2
 800769a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800769c:	f001 fa66 	bl	8008b6c <vTaskStartScheduler>
      stat = osOK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	607b      	str	r3, [r7, #4]
 80076a4:	e002      	b.n	80076ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80076a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80076ac:	687b      	ldr	r3, [r7, #4]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	240000a0 	.word	0x240000a0

080076bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80076bc:	b580      	push	{r7, lr}
 80076be:	b08e      	sub	sp, #56	; 0x38
 80076c0:	af04      	add	r7, sp, #16
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80076c8:	2300      	movs	r3, #0
 80076ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076cc:	f3ef 8305 	mrs	r3, IPSR
 80076d0:	617b      	str	r3, [r7, #20]
  return(result);
 80076d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d17e      	bne.n	80077d6 <osThreadNew+0x11a>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d07b      	beq.n	80077d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80076de:	2380      	movs	r3, #128	; 0x80
 80076e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80076e2:	2318      	movs	r3, #24
 80076e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80076e6:	2300      	movs	r3, #0
 80076e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80076ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d045      	beq.n	8007782 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <osThreadNew+0x48>
        name = attr->name;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d008      	beq.n	800772a <osThreadNew+0x6e>
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	2b38      	cmp	r3, #56	; 0x38
 800771c:	d805      	bhi.n	800772a <osThreadNew+0x6e>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <osThreadNew+0x72>
        return (NULL);
 800772a:	2300      	movs	r3, #0
 800772c:	e054      	b.n	80077d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	089b      	lsrs	r3, r3, #2
 800773c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00e      	beq.n	8007764 <osThreadNew+0xa8>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	2bbb      	cmp	r3, #187	; 0xbb
 800774c:	d90a      	bls.n	8007764 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007752:	2b00      	cmp	r3, #0
 8007754:	d006      	beq.n	8007764 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <osThreadNew+0xa8>
        mem = 1;
 800775e:	2301      	movs	r3, #1
 8007760:	61bb      	str	r3, [r7, #24]
 8007762:	e010      	b.n	8007786 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10c      	bne.n	8007786 <osThreadNew+0xca>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d108      	bne.n	8007786 <osThreadNew+0xca>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d104      	bne.n	8007786 <osThreadNew+0xca>
          mem = 0;
 800777c:	2300      	movs	r3, #0
 800777e:	61bb      	str	r3, [r7, #24]
 8007780:	e001      	b.n	8007786 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007782:	2300      	movs	r3, #0
 8007784:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d110      	bne.n	80077ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007794:	9202      	str	r2, [sp, #8]
 8007796:	9301      	str	r3, [sp, #4]
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	6a3a      	ldr	r2, [r7, #32]
 80077a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 fff6 	bl	8008794 <xTaskCreateStatic>
 80077a8:	4603      	mov	r3, r0
 80077aa:	613b      	str	r3, [r7, #16]
 80077ac:	e013      	b.n	80077d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d110      	bne.n	80077d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	f107 0310 	add.w	r3, r7, #16
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f001 f841 	bl	800884e <xTaskCreate>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d001      	beq.n	80077d6 <osThreadNew+0x11a>
            hTask = NULL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80077d6:	693b      	ldr	r3, [r7, #16]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3728      	adds	r7, #40	; 0x28
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077e8:	f3ef 8305 	mrs	r3, IPSR
 80077ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80077ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d003      	beq.n	80077fc <osDelay+0x1c>
    stat = osErrorISR;
 80077f4:	f06f 0305 	mvn.w	r3, #5
 80077f8:	60fb      	str	r3, [r7, #12]
 80077fa:	e007      	b.n	800780c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f001 f97c 	bl	8008b04 <vTaskDelay>
    }
  }

  return (stat);
 800780c:	68fb      	ldr	r3, [r7, #12]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007816:	b580      	push	{r7, lr}
 8007818:	b08a      	sub	sp, #40	; 0x28
 800781a:	af02      	add	r7, sp, #8
 800781c:	60f8      	str	r0, [r7, #12]
 800781e:	60b9      	str	r1, [r7, #8]
 8007820:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007822:	2300      	movs	r3, #0
 8007824:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007826:	f3ef 8305 	mrs	r3, IPSR
 800782a:	613b      	str	r3, [r7, #16]
  return(result);
 800782c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800782e:	2b00      	cmp	r3, #0
 8007830:	d15f      	bne.n	80078f2 <osMessageQueueNew+0xdc>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d05c      	beq.n	80078f2 <osMessageQueueNew+0xdc>
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d059      	beq.n	80078f2 <osMessageQueueNew+0xdc>
    mem = -1;
 800783e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007842:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d029      	beq.n	800789e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d012      	beq.n	8007878 <osMessageQueueNew+0x62>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	2b4f      	cmp	r3, #79	; 0x4f
 8007858:	d90e      	bls.n	8007878 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00a      	beq.n	8007878 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	695a      	ldr	r2, [r3, #20]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	68b9      	ldr	r1, [r7, #8]
 800786a:	fb01 f303 	mul.w	r3, r1, r3
 800786e:	429a      	cmp	r2, r3
 8007870:	d302      	bcc.n	8007878 <osMessageQueueNew+0x62>
        mem = 1;
 8007872:	2301      	movs	r3, #1
 8007874:	61bb      	str	r3, [r7, #24]
 8007876:	e014      	b.n	80078a2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d110      	bne.n	80078a2 <osMessageQueueNew+0x8c>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10c      	bne.n	80078a2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800788c:	2b00      	cmp	r3, #0
 800788e:	d108      	bne.n	80078a2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d104      	bne.n	80078a2 <osMessageQueueNew+0x8c>
          mem = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	61bb      	str	r3, [r7, #24]
 800789c:	e001      	b.n	80078a2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800789e:	2300      	movs	r3, #0
 80078a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d10b      	bne.n	80078c0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	691a      	ldr	r2, [r3, #16]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	2100      	movs	r1, #0
 80078b2:	9100      	str	r1, [sp, #0]
 80078b4:	68b9      	ldr	r1, [r7, #8]
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f000 fa2e 	bl	8007d18 <xQueueGenericCreateStatic>
 80078bc:	61f8      	str	r0, [r7, #28]
 80078be:	e008      	b.n	80078d2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d105      	bne.n	80078d2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80078c6:	2200      	movs	r2, #0
 80078c8:	68b9      	ldr	r1, [r7, #8]
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f000 fa9c 	bl	8007e08 <xQueueGenericCreate>
 80078d0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00c      	beq.n	80078f2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	617b      	str	r3, [r7, #20]
 80078e4:	e001      	b.n	80078ea <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80078ea:	6979      	ldr	r1, [r7, #20]
 80078ec:	69f8      	ldr	r0, [r7, #28]
 80078ee:	f000 fef3 	bl	80086d8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80078f2:	69fb      	ldr	r3, [r7, #28]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3720      	adds	r7, #32
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b088      	sub	sp, #32
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	603b      	str	r3, [r7, #0]
 8007908:	4613      	mov	r3, r2
 800790a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007910:	2300      	movs	r3, #0
 8007912:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007914:	f3ef 8305 	mrs	r3, IPSR
 8007918:	617b      	str	r3, [r7, #20]
  return(result);
 800791a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800791c:	2b00      	cmp	r3, #0
 800791e:	d028      	beq.n	8007972 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d005      	beq.n	8007932 <osMessageQueuePut+0x36>
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <osMessageQueuePut+0x36>
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007932:	f06f 0303 	mvn.w	r3, #3
 8007936:	61fb      	str	r3, [r7, #28]
 8007938:	e038      	b.n	80079ac <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800793a:	2300      	movs	r3, #0
 800793c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800793e:	f107 0210 	add.w	r2, r7, #16
 8007942:	2300      	movs	r3, #0
 8007944:	68b9      	ldr	r1, [r7, #8]
 8007946:	69b8      	ldr	r0, [r7, #24]
 8007948:	f000 fbba 	bl	80080c0 <xQueueGenericSendFromISR>
 800794c:	4603      	mov	r3, r0
 800794e:	2b01      	cmp	r3, #1
 8007950:	d003      	beq.n	800795a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007952:	f06f 0302 	mvn.w	r3, #2
 8007956:	61fb      	str	r3, [r7, #28]
 8007958:	e028      	b.n	80079ac <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d025      	beq.n	80079ac <osMessageQueuePut+0xb0>
 8007960:	4b15      	ldr	r3, [pc, #84]	; (80079b8 <osMessageQueuePut+0xbc>)
 8007962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	e01c      	b.n	80079ac <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <osMessageQueuePut+0x82>
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d103      	bne.n	8007986 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800797e:	f06f 0303 	mvn.w	r3, #3
 8007982:	61fb      	str	r3, [r7, #28]
 8007984:	e012      	b.n	80079ac <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007986:	2300      	movs	r3, #0
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	68b9      	ldr	r1, [r7, #8]
 800798c:	69b8      	ldr	r0, [r7, #24]
 800798e:	f000 fa99 	bl	8007ec4 <xQueueGenericSend>
 8007992:	4603      	mov	r3, r0
 8007994:	2b01      	cmp	r3, #1
 8007996:	d009      	beq.n	80079ac <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800799e:	f06f 0301 	mvn.w	r3, #1
 80079a2:	61fb      	str	r3, [r7, #28]
 80079a4:	e002      	b.n	80079ac <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80079a6:	f06f 0302 	mvn.w	r3, #2
 80079aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80079ac:	69fb      	ldr	r3, [r7, #28]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3720      	adds	r7, #32
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	e000ed04 	.word	0xe000ed04

080079bc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80079bc:	b580      	push	{r7, lr}
 80079be:	b088      	sub	sp, #32
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079d2:	f3ef 8305 	mrs	r3, IPSR
 80079d6:	617b      	str	r3, [r7, #20]
  return(result);
 80079d8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d028      	beq.n	8007a30 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d005      	beq.n	80079f0 <osMessageQueueGet+0x34>
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <osMessageQueueGet+0x34>
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80079f0:	f06f 0303 	mvn.w	r3, #3
 80079f4:	61fb      	str	r3, [r7, #28]
 80079f6:	e037      	b.n	8007a68 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80079f8:	2300      	movs	r3, #0
 80079fa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80079fc:	f107 0310 	add.w	r3, r7, #16
 8007a00:	461a      	mov	r2, r3
 8007a02:	68b9      	ldr	r1, [r7, #8]
 8007a04:	69b8      	ldr	r0, [r7, #24]
 8007a06:	f000 fcd7 	bl	80083b8 <xQueueReceiveFromISR>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d003      	beq.n	8007a18 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007a10:	f06f 0302 	mvn.w	r3, #2
 8007a14:	61fb      	str	r3, [r7, #28]
 8007a16:	e027      	b.n	8007a68 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d024      	beq.n	8007a68 <osMessageQueueGet+0xac>
 8007a1e:	4b15      	ldr	r3, [pc, #84]	; (8007a74 <osMessageQueueGet+0xb8>)
 8007a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	e01b      	b.n	8007a68 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d002      	beq.n	8007a3c <osMessageQueueGet+0x80>
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d103      	bne.n	8007a44 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007a3c:	f06f 0303 	mvn.w	r3, #3
 8007a40:	61fb      	str	r3, [r7, #28]
 8007a42:	e011      	b.n	8007a68 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	68b9      	ldr	r1, [r7, #8]
 8007a48:	69b8      	ldr	r0, [r7, #24]
 8007a4a:	f000 fbd5 	bl	80081f8 <xQueueReceive>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d009      	beq.n	8007a68 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007a5a:	f06f 0301 	mvn.w	r3, #1
 8007a5e:	61fb      	str	r3, [r7, #28]
 8007a60:	e002      	b.n	8007a68 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007a62:	f06f 0302 	mvn.w	r3, #2
 8007a66:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007a68:	69fb      	ldr	r3, [r7, #28]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3720      	adds	r7, #32
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	e000ed04 	.word	0xe000ed04

08007a78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4a07      	ldr	r2, [pc, #28]	; (8007aa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007a88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	4a06      	ldr	r2, [pc, #24]	; (8007aa8 <vApplicationGetIdleTaskMemory+0x30>)
 8007a8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2280      	movs	r2, #128	; 0x80
 8007a94:	601a      	str	r2, [r3, #0]
}
 8007a96:	bf00      	nop
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	240000a4 	.word	0x240000a4
 8007aa8:	24000160 	.word	0x24000160

08007aac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4a07      	ldr	r2, [pc, #28]	; (8007ad8 <vApplicationGetTimerTaskMemory+0x2c>)
 8007abc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	4a06      	ldr	r2, [pc, #24]	; (8007adc <vApplicationGetTimerTaskMemory+0x30>)
 8007ac2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007aca:	601a      	str	r2, [r3, #0]
}
 8007acc:	bf00      	nop
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	24000360 	.word	0x24000360
 8007adc:	2400041c 	.word	0x2400041c

08007ae0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f103 0208 	add.w	r2, r3, #8
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007af8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f103 0208 	add.w	r2, r3, #8
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f103 0208 	add.w	r2, r3, #8
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b2e:	bf00      	nop
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b085      	sub	sp, #20
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	689a      	ldr	r2, [r3, #8]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	601a      	str	r2, [r3, #0]
}
 8007b76:	bf00      	nop
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b82:	b480      	push	{r7}
 8007b84:	b085      	sub	sp, #20
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b98:	d103      	bne.n	8007ba2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	60fb      	str	r3, [r7, #12]
 8007ba0:	e00c      	b.n	8007bbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	3308      	adds	r3, #8
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	e002      	b.n	8007bb0 <vListInsert+0x2e>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d2f6      	bcs.n	8007baa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	601a      	str	r2, [r3, #0]
}
 8007be8:	bf00      	nop
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	6892      	ldr	r2, [r2, #8]
 8007c0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	6852      	ldr	r2, [r2, #4]
 8007c14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d103      	bne.n	8007c28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	1e5a      	subs	r2, r3, #1
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3714      	adds	r7, #20
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10a      	bne.n	8007c72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007c6e:	bf00      	nop
 8007c70:	e7fe      	b.n	8007c70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007c72:	f002 f92f 	bl	8009ed4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c7e:	68f9      	ldr	r1, [r7, #12]
 8007c80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c82:	fb01 f303 	mul.w	r3, r1, r3
 8007c86:	441a      	add	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	68f9      	ldr	r1, [r7, #12]
 8007ca6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ca8:	fb01 f303 	mul.w	r3, r1, r3
 8007cac:	441a      	add	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	22ff      	movs	r2, #255	; 0xff
 8007cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	22ff      	movs	r2, #255	; 0xff
 8007cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d114      	bne.n	8007cf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d01a      	beq.n	8007d06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	3310      	adds	r3, #16
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f001 f9e3 	bl	80090a0 <xTaskRemoveFromEventList>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d012      	beq.n	8007d06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ce0:	4b0c      	ldr	r3, [pc, #48]	; (8007d14 <xQueueGenericReset+0xcc>)
 8007ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce6:	601a      	str	r2, [r3, #0]
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	e009      	b.n	8007d06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	3310      	adds	r3, #16
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7ff fef2 	bl	8007ae0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	3324      	adds	r3, #36	; 0x24
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7ff feed 	bl	8007ae0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d06:	f002 f915 	bl	8009f34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d0a:	2301      	movs	r3, #1
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	e000ed04 	.word	0xe000ed04

08007d18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b08e      	sub	sp, #56	; 0x38
 8007d1c:	af02      	add	r7, sp, #8
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
 8007d24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10a      	bne.n	8007d42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d3e:	bf00      	nop
 8007d40:	e7fe      	b.n	8007d40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10a      	bne.n	8007d5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d5a:	bf00      	nop
 8007d5c:	e7fe      	b.n	8007d5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <xQueueGenericCreateStatic+0x52>
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <xQueueGenericCreateStatic+0x56>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e000      	b.n	8007d70 <xQueueGenericCreateStatic+0x58>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10a      	bne.n	8007d8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	623b      	str	r3, [r7, #32]
}
 8007d86:	bf00      	nop
 8007d88:	e7fe      	b.n	8007d88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d102      	bne.n	8007d96 <xQueueGenericCreateStatic+0x7e>
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <xQueueGenericCreateStatic+0x82>
 8007d96:	2301      	movs	r3, #1
 8007d98:	e000      	b.n	8007d9c <xQueueGenericCreateStatic+0x84>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10a      	bne.n	8007db6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	61fb      	str	r3, [r7, #28]
}
 8007db2:	bf00      	nop
 8007db4:	e7fe      	b.n	8007db4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007db6:	2350      	movs	r3, #80	; 0x50
 8007db8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	2b50      	cmp	r3, #80	; 0x50
 8007dbe:	d00a      	beq.n	8007dd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	61bb      	str	r3, [r7, #24]
}
 8007dd2:	bf00      	nop
 8007dd4:	e7fe      	b.n	8007dd4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007dd6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00d      	beq.n	8007dfe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007dea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	4613      	mov	r3, r2
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	68b9      	ldr	r1, [r7, #8]
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 f83f 	bl	8007e7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3730      	adds	r7, #48	; 0x30
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08a      	sub	sp, #40	; 0x28
 8007e0c:	af02      	add	r7, sp, #8
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	4613      	mov	r3, r2
 8007e14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	613b      	str	r3, [r7, #16]
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	fb02 f303 	mul.w	r3, r2, r3
 8007e3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	3350      	adds	r3, #80	; 0x50
 8007e40:	4618      	mov	r0, r3
 8007e42:	f002 f969 	bl	800a118 <pvPortMalloc>
 8007e46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d011      	beq.n	8007e72 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	3350      	adds	r3, #80	; 0x50
 8007e56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e60:	79fa      	ldrb	r2, [r7, #7]
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	4613      	mov	r3, r2
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	68b9      	ldr	r1, [r7, #8]
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f000 f805 	bl	8007e7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e72:	69bb      	ldr	r3, [r7, #24]
	}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3720      	adds	r7, #32
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
 8007e88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d103      	bne.n	8007e98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	601a      	str	r2, [r3, #0]
 8007e96:	e002      	b.n	8007e9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007eaa:	2101      	movs	r1, #1
 8007eac:	69b8      	ldr	r0, [r7, #24]
 8007eae:	f7ff fecb 	bl	8007c48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	78fa      	ldrb	r2, [r7, #3]
 8007eb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007eba:	bf00      	nop
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08e      	sub	sp, #56	; 0x38
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
 8007ed0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10a      	bne.n	8007ef6 <xQueueGenericSend+0x32>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ef2:	bf00      	nop
 8007ef4:	e7fe      	b.n	8007ef4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d103      	bne.n	8007f04 <xQueueGenericSend+0x40>
 8007efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <xQueueGenericSend+0x44>
 8007f04:	2301      	movs	r3, #1
 8007f06:	e000      	b.n	8007f0a <xQueueGenericSend+0x46>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10a      	bne.n	8007f24 <xQueueGenericSend+0x60>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f20:	bf00      	nop
 8007f22:	e7fe      	b.n	8007f22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d103      	bne.n	8007f32 <xQueueGenericSend+0x6e>
 8007f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d101      	bne.n	8007f36 <xQueueGenericSend+0x72>
 8007f32:	2301      	movs	r3, #1
 8007f34:	e000      	b.n	8007f38 <xQueueGenericSend+0x74>
 8007f36:	2300      	movs	r3, #0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10a      	bne.n	8007f52 <xQueueGenericSend+0x8e>
	__asm volatile
 8007f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	623b      	str	r3, [r7, #32]
}
 8007f4e:	bf00      	nop
 8007f50:	e7fe      	b.n	8007f50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f52:	f001 fa67 	bl	8009424 <xTaskGetSchedulerState>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d102      	bne.n	8007f62 <xQueueGenericSend+0x9e>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <xQueueGenericSend+0xa2>
 8007f62:	2301      	movs	r3, #1
 8007f64:	e000      	b.n	8007f68 <xQueueGenericSend+0xa4>
 8007f66:	2300      	movs	r3, #0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10a      	bne.n	8007f82 <xQueueGenericSend+0xbe>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	61fb      	str	r3, [r7, #28]
}
 8007f7e:	bf00      	nop
 8007f80:	e7fe      	b.n	8007f80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f82:	f001 ffa7 	bl	8009ed4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d302      	bcc.n	8007f98 <xQueueGenericSend+0xd4>
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d129      	bne.n	8007fec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	68b9      	ldr	r1, [r7, #8]
 8007f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f9e:	f000 fa8b 	bl	80084b8 <prvCopyDataToQueue>
 8007fa2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d010      	beq.n	8007fce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fae:	3324      	adds	r3, #36	; 0x24
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f001 f875 	bl	80090a0 <xTaskRemoveFromEventList>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d013      	beq.n	8007fe4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fbc:	4b3f      	ldr	r3, [pc, #252]	; (80080bc <xQueueGenericSend+0x1f8>)
 8007fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	e00a      	b.n	8007fe4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d007      	beq.n	8007fe4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007fd4:	4b39      	ldr	r3, [pc, #228]	; (80080bc <xQueueGenericSend+0x1f8>)
 8007fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007fe4:	f001 ffa6 	bl	8009f34 <vPortExitCritical>
				return pdPASS;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e063      	b.n	80080b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d103      	bne.n	8007ffa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ff2:	f001 ff9f 	bl	8009f34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	e05c      	b.n	80080b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d106      	bne.n	800800e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008000:	f107 0314 	add.w	r3, r7, #20
 8008004:	4618      	mov	r0, r3
 8008006:	f001 f8af 	bl	8009168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800800a:	2301      	movs	r3, #1
 800800c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800800e:	f001 ff91 	bl	8009f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008012:	f000 fe1b 	bl	8008c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008016:	f001 ff5d 	bl	8009ed4 <vPortEnterCritical>
 800801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008020:	b25b      	sxtb	r3, r3
 8008022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008026:	d103      	bne.n	8008030 <xQueueGenericSend+0x16c>
 8008028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008032:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008036:	b25b      	sxtb	r3, r3
 8008038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800803c:	d103      	bne.n	8008046 <xQueueGenericSend+0x182>
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008046:	f001 ff75 	bl	8009f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800804a:	1d3a      	adds	r2, r7, #4
 800804c:	f107 0314 	add.w	r3, r7, #20
 8008050:	4611      	mov	r1, r2
 8008052:	4618      	mov	r0, r3
 8008054:	f001 f89e 	bl	8009194 <xTaskCheckForTimeOut>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d124      	bne.n	80080a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800805e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008060:	f000 fb22 	bl	80086a8 <prvIsQueueFull>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d018      	beq.n	800809c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	3310      	adds	r3, #16
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	4611      	mov	r1, r2
 8008072:	4618      	mov	r0, r3
 8008074:	f000 ffc4 	bl	8009000 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800807a:	f000 faad 	bl	80085d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800807e:	f000 fdf3 	bl	8008c68 <xTaskResumeAll>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	f47f af7c 	bne.w	8007f82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800808a:	4b0c      	ldr	r3, [pc, #48]	; (80080bc <xQueueGenericSend+0x1f8>)
 800808c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	e772      	b.n	8007f82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800809c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800809e:	f000 fa9b 	bl	80085d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080a2:	f000 fde1 	bl	8008c68 <xTaskResumeAll>
 80080a6:	e76c      	b.n	8007f82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080aa:	f000 fa95 	bl	80085d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080ae:	f000 fddb 	bl	8008c68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3738      	adds	r7, #56	; 0x38
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	e000ed04 	.word	0xe000ed04

080080c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b090      	sub	sp, #64	; 0x40
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
 80080cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80080d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10a      	bne.n	80080ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80080ea:	bf00      	nop
 80080ec:	e7fe      	b.n	80080ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d103      	bne.n	80080fc <xQueueGenericSendFromISR+0x3c>
 80080f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <xQueueGenericSendFromISR+0x40>
 80080fc:	2301      	movs	r3, #1
 80080fe:	e000      	b.n	8008102 <xQueueGenericSendFromISR+0x42>
 8008100:	2300      	movs	r3, #0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10a      	bne.n	800811c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008118:	bf00      	nop
 800811a:	e7fe      	b.n	800811a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2b02      	cmp	r3, #2
 8008120:	d103      	bne.n	800812a <xQueueGenericSendFromISR+0x6a>
 8008122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008126:	2b01      	cmp	r3, #1
 8008128:	d101      	bne.n	800812e <xQueueGenericSendFromISR+0x6e>
 800812a:	2301      	movs	r3, #1
 800812c:	e000      	b.n	8008130 <xQueueGenericSendFromISR+0x70>
 800812e:	2300      	movs	r3, #0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10a      	bne.n	800814a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	623b      	str	r3, [r7, #32]
}
 8008146:	bf00      	nop
 8008148:	e7fe      	b.n	8008148 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800814a:	f001 ffa5 	bl	800a098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800814e:	f3ef 8211 	mrs	r2, BASEPRI
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	61fa      	str	r2, [r7, #28]
 8008164:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008166:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008168:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800816a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800816e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008172:	429a      	cmp	r2, r3
 8008174:	d302      	bcc.n	800817c <xQueueGenericSendFromISR+0xbc>
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b02      	cmp	r3, #2
 800817a:	d12f      	bne.n	80081dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	68b9      	ldr	r1, [r7, #8]
 8008190:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008192:	f000 f991 	bl	80084b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008196:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800819a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800819e:	d112      	bne.n	80081c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d016      	beq.n	80081d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081aa:	3324      	adds	r3, #36	; 0x24
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 ff77 	bl	80090a0 <xTaskRemoveFromEventList>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00e      	beq.n	80081d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00b      	beq.n	80081d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	e007      	b.n	80081d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80081ca:	3301      	adds	r3, #1
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	b25a      	sxtb	r2, r3
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081d6:	2301      	movs	r3, #1
 80081d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80081da:	e001      	b.n	80081e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081dc:	2300      	movs	r3, #0
 80081de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80081ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3740      	adds	r7, #64	; 0x40
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
	...

080081f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b08c      	sub	sp, #48	; 0x30
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008204:	2300      	movs	r3, #0
 8008206:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10a      	bne.n	8008228 <xQueueReceive+0x30>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	623b      	str	r3, [r7, #32]
}
 8008224:	bf00      	nop
 8008226:	e7fe      	b.n	8008226 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d103      	bne.n	8008236 <xQueueReceive+0x3e>
 800822e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <xQueueReceive+0x42>
 8008236:	2301      	movs	r3, #1
 8008238:	e000      	b.n	800823c <xQueueReceive+0x44>
 800823a:	2300      	movs	r3, #0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <xQueueReceive+0x5e>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	61fb      	str	r3, [r7, #28]
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008256:	f001 f8e5 	bl	8009424 <xTaskGetSchedulerState>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d102      	bne.n	8008266 <xQueueReceive+0x6e>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <xQueueReceive+0x72>
 8008266:	2301      	movs	r3, #1
 8008268:	e000      	b.n	800826c <xQueueReceive+0x74>
 800826a:	2300      	movs	r3, #0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10a      	bne.n	8008286 <xQueueReceive+0x8e>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	61bb      	str	r3, [r7, #24]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008286:	f001 fe25 	bl	8009ed4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800828a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	2b00      	cmp	r3, #0
 8008294:	d01f      	beq.n	80082d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008296:	68b9      	ldr	r1, [r7, #8]
 8008298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800829a:	f000 f977 	bl	800858c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	1e5a      	subs	r2, r3, #1
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00f      	beq.n	80082ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b0:	3310      	adds	r3, #16
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 fef4 	bl	80090a0 <xTaskRemoveFromEventList>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d007      	beq.n	80082ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082be:	4b3d      	ldr	r3, [pc, #244]	; (80083b4 <xQueueReceive+0x1bc>)
 80082c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082ce:	f001 fe31 	bl	8009f34 <vPortExitCritical>
				return pdPASS;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e069      	b.n	80083aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d103      	bne.n	80082e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082dc:	f001 fe2a 	bl	8009f34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082e0:	2300      	movs	r3, #0
 80082e2:	e062      	b.n	80083aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d106      	bne.n	80082f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082ea:	f107 0310 	add.w	r3, r7, #16
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 ff3a 	bl	8009168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082f4:	2301      	movs	r3, #1
 80082f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082f8:	f001 fe1c 	bl	8009f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082fc:	f000 fca6 	bl	8008c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008300:	f001 fde8 	bl	8009ed4 <vPortEnterCritical>
 8008304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008306:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800830a:	b25b      	sxtb	r3, r3
 800830c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008310:	d103      	bne.n	800831a <xQueueReceive+0x122>
 8008312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008314:	2200      	movs	r2, #0
 8008316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800831a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008320:	b25b      	sxtb	r3, r3
 8008322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008326:	d103      	bne.n	8008330 <xQueueReceive+0x138>
 8008328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832a:	2200      	movs	r2, #0
 800832c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008330:	f001 fe00 	bl	8009f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008334:	1d3a      	adds	r2, r7, #4
 8008336:	f107 0310 	add.w	r3, r7, #16
 800833a:	4611      	mov	r1, r2
 800833c:	4618      	mov	r0, r3
 800833e:	f000 ff29 	bl	8009194 <xTaskCheckForTimeOut>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d123      	bne.n	8008390 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800834a:	f000 f997 	bl	800867c <prvIsQueueEmpty>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d017      	beq.n	8008384 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008356:	3324      	adds	r3, #36	; 0x24
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	4611      	mov	r1, r2
 800835c:	4618      	mov	r0, r3
 800835e:	f000 fe4f 	bl	8009000 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008364:	f000 f938 	bl	80085d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008368:	f000 fc7e 	bl	8008c68 <xTaskResumeAll>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d189      	bne.n	8008286 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008372:	4b10      	ldr	r3, [pc, #64]	; (80083b4 <xQueueReceive+0x1bc>)
 8008374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	e780      	b.n	8008286 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008386:	f000 f927 	bl	80085d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800838a:	f000 fc6d 	bl	8008c68 <xTaskResumeAll>
 800838e:	e77a      	b.n	8008286 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008392:	f000 f921 	bl	80085d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008396:	f000 fc67 	bl	8008c68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800839a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800839c:	f000 f96e 	bl	800867c <prvIsQueueEmpty>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f43f af6f 	beq.w	8008286 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3730      	adds	r7, #48	; 0x30
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	e000ed04 	.word	0xe000ed04

080083b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08e      	sub	sp, #56	; 0x38
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80083c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10a      	bne.n	80083e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	623b      	str	r3, [r7, #32]
}
 80083e0:	bf00      	nop
 80083e2:	e7fe      	b.n	80083e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d103      	bne.n	80083f2 <xQueueReceiveFromISR+0x3a>
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d101      	bne.n	80083f6 <xQueueReceiveFromISR+0x3e>
 80083f2:	2301      	movs	r3, #1
 80083f4:	e000      	b.n	80083f8 <xQueueReceiveFromISR+0x40>
 80083f6:	2300      	movs	r3, #0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10a      	bne.n	8008412 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	61fb      	str	r3, [r7, #28]
}
 800840e:	bf00      	nop
 8008410:	e7fe      	b.n	8008410 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008412:	f001 fe41 	bl	800a098 <vPortValidateInterruptPriority>
	__asm volatile
 8008416:	f3ef 8211 	mrs	r2, BASEPRI
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	61ba      	str	r2, [r7, #24]
 800842c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800842e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008430:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008436:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	2b00      	cmp	r3, #0
 800843c:	d02f      	beq.n	800849e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008448:	68b9      	ldr	r1, [r7, #8]
 800844a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800844c:	f000 f89e 	bl	800858c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008452:	1e5a      	subs	r2, r3, #1
 8008454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008456:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008458:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800845c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008460:	d112      	bne.n	8008488 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d016      	beq.n	8008498 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800846a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846c:	3310      	adds	r3, #16
 800846e:	4618      	mov	r0, r3
 8008470:	f000 fe16 	bl	80090a0 <xTaskRemoveFromEventList>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00e      	beq.n	8008498 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00b      	beq.n	8008498 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	e007      	b.n	8008498 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800848c:	3301      	adds	r3, #1
 800848e:	b2db      	uxtb	r3, r3
 8008490:	b25a      	sxtb	r2, r3
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008498:	2301      	movs	r3, #1
 800849a:	637b      	str	r3, [r7, #52]	; 0x34
 800849c:	e001      	b.n	80084a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800849e:	2300      	movs	r3, #0
 80084a0:	637b      	str	r3, [r7, #52]	; 0x34
 80084a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	f383 8811 	msr	BASEPRI, r3
}
 80084ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3738      	adds	r7, #56	; 0x38
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80084c4:	2300      	movs	r3, #0
 80084c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10d      	bne.n	80084f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d14d      	bne.n	800857a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 ffbc 	bl	8009460 <xTaskPriorityDisinherit>
 80084e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	609a      	str	r2, [r3, #8]
 80084f0:	e043      	b.n	800857a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d119      	bne.n	800852c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6858      	ldr	r0, [r3, #4]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008500:	461a      	mov	r2, r3
 8008502:	68b9      	ldr	r1, [r7, #8]
 8008504:	f002 f818 	bl	800a538 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008510:	441a      	add	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	429a      	cmp	r2, r3
 8008520:	d32b      	bcc.n	800857a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	605a      	str	r2, [r3, #4]
 800852a:	e026      	b.n	800857a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	68d8      	ldr	r0, [r3, #12]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008534:	461a      	mov	r2, r3
 8008536:	68b9      	ldr	r1, [r7, #8]
 8008538:	f001 fffe 	bl	800a538 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	68da      	ldr	r2, [r3, #12]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008544:	425b      	negs	r3, r3
 8008546:	441a      	add	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	68da      	ldr	r2, [r3, #12]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	429a      	cmp	r2, r3
 8008556:	d207      	bcs.n	8008568 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	689a      	ldr	r2, [r3, #8]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008560:	425b      	negs	r3, r3
 8008562:	441a      	add	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b02      	cmp	r3, #2
 800856c:	d105      	bne.n	800857a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d002      	beq.n	800857a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	3b01      	subs	r3, #1
 8008578:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	1c5a      	adds	r2, r3, #1
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008582:	697b      	ldr	r3, [r7, #20]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3718      	adds	r7, #24
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859a:	2b00      	cmp	r3, #0
 800859c:	d018      	beq.n	80085d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68da      	ldr	r2, [r3, #12]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a6:	441a      	add	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	68da      	ldr	r2, [r3, #12]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d303      	bcc.n	80085c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	68d9      	ldr	r1, [r3, #12]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c8:	461a      	mov	r2, r3
 80085ca:	6838      	ldr	r0, [r7, #0]
 80085cc:	f001 ffb4 	bl	800a538 <memcpy>
	}
}
 80085d0:	bf00      	nop
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085e0:	f001 fc78 	bl	8009ed4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085ec:	e011      	b.n	8008612 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d012      	beq.n	800861c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	3324      	adds	r3, #36	; 0x24
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 fd50 	bl	80090a0 <xTaskRemoveFromEventList>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008606:	f000 fe27 	bl	8009258 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800860a:	7bfb      	ldrb	r3, [r7, #15]
 800860c:	3b01      	subs	r3, #1
 800860e:	b2db      	uxtb	r3, r3
 8008610:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008616:	2b00      	cmp	r3, #0
 8008618:	dce9      	bgt.n	80085ee <prvUnlockQueue+0x16>
 800861a:	e000      	b.n	800861e <prvUnlockQueue+0x46>
					break;
 800861c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	22ff      	movs	r2, #255	; 0xff
 8008622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008626:	f001 fc85 	bl	8009f34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800862a:	f001 fc53 	bl	8009ed4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008634:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008636:	e011      	b.n	800865c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d012      	beq.n	8008666 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	3310      	adds	r3, #16
 8008644:	4618      	mov	r0, r3
 8008646:	f000 fd2b 	bl	80090a0 <xTaskRemoveFromEventList>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008650:	f000 fe02 	bl	8009258 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	3b01      	subs	r3, #1
 8008658:	b2db      	uxtb	r3, r3
 800865a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800865c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008660:	2b00      	cmp	r3, #0
 8008662:	dce9      	bgt.n	8008638 <prvUnlockQueue+0x60>
 8008664:	e000      	b.n	8008668 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008666:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	22ff      	movs	r2, #255	; 0xff
 800866c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008670:	f001 fc60 	bl	8009f34 <vPortExitCritical>
}
 8008674:	bf00      	nop
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008684:	f001 fc26 	bl	8009ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800868c:	2b00      	cmp	r3, #0
 800868e:	d102      	bne.n	8008696 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008690:	2301      	movs	r3, #1
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	e001      	b.n	800869a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008696:	2300      	movs	r3, #0
 8008698:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800869a:	f001 fc4b 	bl	8009f34 <vPortExitCritical>

	return xReturn;
 800869e:	68fb      	ldr	r3, [r7, #12]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086b0:	f001 fc10 	bl	8009ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086bc:	429a      	cmp	r2, r3
 80086be:	d102      	bne.n	80086c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80086c0:	2301      	movs	r3, #1
 80086c2:	60fb      	str	r3, [r7, #12]
 80086c4:	e001      	b.n	80086ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80086c6:	2300      	movs	r3, #0
 80086c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086ca:	f001 fc33 	bl	8009f34 <vPortExitCritical>

	return xReturn;
 80086ce:	68fb      	ldr	r3, [r7, #12]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086e2:	2300      	movs	r3, #0
 80086e4:	60fb      	str	r3, [r7, #12]
 80086e6:	e014      	b.n	8008712 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80086e8:	4a0f      	ldr	r2, [pc, #60]	; (8008728 <vQueueAddToRegistry+0x50>)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10b      	bne.n	800870c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80086f4:	490c      	ldr	r1, [pc, #48]	; (8008728 <vQueueAddToRegistry+0x50>)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80086fe:	4a0a      	ldr	r2, [pc, #40]	; (8008728 <vQueueAddToRegistry+0x50>)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	00db      	lsls	r3, r3, #3
 8008704:	4413      	add	r3, r2
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800870a:	e006      	b.n	800871a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	3301      	adds	r3, #1
 8008710:	60fb      	str	r3, [r7, #12]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2b07      	cmp	r3, #7
 8008716:	d9e7      	bls.n	80086e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008718:	bf00      	nop
 800871a:	bf00      	nop
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	24004c3c 	.word	0x24004c3c

0800872c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800873c:	f001 fbca 	bl	8009ed4 <vPortEnterCritical>
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008746:	b25b      	sxtb	r3, r3
 8008748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800874c:	d103      	bne.n	8008756 <vQueueWaitForMessageRestricted+0x2a>
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800875c:	b25b      	sxtb	r3, r3
 800875e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008762:	d103      	bne.n	800876c <vQueueWaitForMessageRestricted+0x40>
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800876c:	f001 fbe2 	bl	8009f34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008774:	2b00      	cmp	r3, #0
 8008776:	d106      	bne.n	8008786 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	3324      	adds	r3, #36	; 0x24
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	68b9      	ldr	r1, [r7, #8]
 8008780:	4618      	mov	r0, r3
 8008782:	f000 fc61 	bl	8009048 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008786:	6978      	ldr	r0, [r7, #20]
 8008788:	f7ff ff26 	bl	80085d8 <prvUnlockQueue>
	}
 800878c:	bf00      	nop
 800878e:	3718      	adds	r7, #24
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008794:	b580      	push	{r7, lr}
 8008796:	b08e      	sub	sp, #56	; 0x38
 8008798:	af04      	add	r7, sp, #16
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80087a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10a      	bne.n	80087be <xTaskCreateStatic+0x2a>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	623b      	str	r3, [r7, #32]
}
 80087ba:	bf00      	nop
 80087bc:	e7fe      	b.n	80087bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80087be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <xTaskCreateStatic+0x46>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	61fb      	str	r3, [r7, #28]
}
 80087d6:	bf00      	nop
 80087d8:	e7fe      	b.n	80087d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80087da:	23bc      	movs	r3, #188	; 0xbc
 80087dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	2bbc      	cmp	r3, #188	; 0xbc
 80087e2:	d00a      	beq.n	80087fa <xTaskCreateStatic+0x66>
	__asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	61bb      	str	r3, [r7, #24]
}
 80087f6:	bf00      	nop
 80087f8:	e7fe      	b.n	80087f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80087fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80087fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d01e      	beq.n	8008840 <xTaskCreateStatic+0xac>
 8008802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008804:	2b00      	cmp	r3, #0
 8008806:	d01b      	beq.n	8008840 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008810:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	2202      	movs	r2, #2
 8008816:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800881a:	2300      	movs	r3, #0
 800881c:	9303      	str	r3, [sp, #12]
 800881e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008820:	9302      	str	r3, [sp, #8]
 8008822:	f107 0314 	add.w	r3, r7, #20
 8008826:	9301      	str	r3, [sp, #4]
 8008828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	68b9      	ldr	r1, [r7, #8]
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f000 f850 	bl	80088d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800883a:	f000 f8f3 	bl	8008a24 <prvAddNewTaskToReadyList>
 800883e:	e001      	b.n	8008844 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008840:	2300      	movs	r3, #0
 8008842:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008844:	697b      	ldr	r3, [r7, #20]
	}
 8008846:	4618      	mov	r0, r3
 8008848:	3728      	adds	r7, #40	; 0x28
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800884e:	b580      	push	{r7, lr}
 8008850:	b08c      	sub	sp, #48	; 0x30
 8008852:	af04      	add	r7, sp, #16
 8008854:	60f8      	str	r0, [r7, #12]
 8008856:	60b9      	str	r1, [r7, #8]
 8008858:	603b      	str	r3, [r7, #0]
 800885a:	4613      	mov	r3, r2
 800885c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800885e:	88fb      	ldrh	r3, [r7, #6]
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4618      	mov	r0, r3
 8008864:	f001 fc58 	bl	800a118 <pvPortMalloc>
 8008868:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00e      	beq.n	800888e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008870:	20bc      	movs	r0, #188	; 0xbc
 8008872:	f001 fc51 	bl	800a118 <pvPortMalloc>
 8008876:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	631a      	str	r2, [r3, #48]	; 0x30
 8008884:	e005      	b.n	8008892 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008886:	6978      	ldr	r0, [r7, #20]
 8008888:	f001 fd12 	bl	800a2b0 <vPortFree>
 800888c:	e001      	b.n	8008892 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800888e:	2300      	movs	r3, #0
 8008890:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d017      	beq.n	80088c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80088a0:	88fa      	ldrh	r2, [r7, #6]
 80088a2:	2300      	movs	r3, #0
 80088a4:	9303      	str	r3, [sp, #12]
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	9302      	str	r3, [sp, #8]
 80088aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ac:	9301      	str	r3, [sp, #4]
 80088ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b0:	9300      	str	r3, [sp, #0]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	68b9      	ldr	r1, [r7, #8]
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f000 f80e 	bl	80088d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088bc:	69f8      	ldr	r0, [r7, #28]
 80088be:	f000 f8b1 	bl	8008a24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80088c2:	2301      	movs	r3, #1
 80088c4:	61bb      	str	r3, [r7, #24]
 80088c6:	e002      	b.n	80088ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80088c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80088ce:	69bb      	ldr	r3, [r7, #24]
	}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3720      	adds	r7, #32
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b088      	sub	sp, #32
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
 80088e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	461a      	mov	r2, r3
 80088f0:	21a5      	movs	r1, #165	; 0xa5
 80088f2:	f001 fe2f 	bl	800a554 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80088f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088fa:	6879      	ldr	r1, [r7, #4]
 80088fc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008900:	440b      	add	r3, r1
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	f023 0307 	bic.w	r3, r3, #7
 800890e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	f003 0307 	and.w	r3, r3, #7
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00a      	beq.n	8008930 <prvInitialiseNewTask+0x58>
	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	617b      	str	r3, [r7, #20]
}
 800892c:	bf00      	nop
 800892e:	e7fe      	b.n	800892e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d01f      	beq.n	8008976 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008936:	2300      	movs	r3, #0
 8008938:	61fb      	str	r3, [r7, #28]
 800893a:	e012      	b.n	8008962 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	4413      	add	r3, r2
 8008942:	7819      	ldrb	r1, [r3, #0]
 8008944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	4413      	add	r3, r2
 800894a:	3334      	adds	r3, #52	; 0x34
 800894c:	460a      	mov	r2, r1
 800894e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	4413      	add	r3, r2
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d006      	beq.n	800896a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	3301      	adds	r3, #1
 8008960:	61fb      	str	r3, [r7, #28]
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	2b0f      	cmp	r3, #15
 8008966:	d9e9      	bls.n	800893c <prvInitialiseNewTask+0x64>
 8008968:	e000      	b.n	800896c <prvInitialiseNewTask+0x94>
			{
				break;
 800896a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800896c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896e:	2200      	movs	r2, #0
 8008970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008974:	e003      	b.n	800897e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800897e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008980:	2b37      	cmp	r3, #55	; 0x37
 8008982:	d901      	bls.n	8008988 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008984:	2337      	movs	r3, #55	; 0x37
 8008986:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800898c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800898e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008992:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008996:	2200      	movs	r2, #0
 8008998:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	3304      	adds	r3, #4
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff f8be 	bl	8007b20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80089a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a6:	3318      	adds	r3, #24
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7ff f8b9 	bl	8007b20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80089ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80089be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80089c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c6:	2200      	movs	r2, #0
 80089c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80089cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80089d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d6:	3354      	adds	r3, #84	; 0x54
 80089d8:	2260      	movs	r2, #96	; 0x60
 80089da:	2100      	movs	r1, #0
 80089dc:	4618      	mov	r0, r3
 80089de:	f001 fdb9 	bl	800a554 <memset>
 80089e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e4:	4a0c      	ldr	r2, [pc, #48]	; (8008a18 <prvInitialiseNewTask+0x140>)
 80089e6:	659a      	str	r2, [r3, #88]	; 0x58
 80089e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ea:	4a0c      	ldr	r2, [pc, #48]	; (8008a1c <prvInitialiseNewTask+0x144>)
 80089ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f0:	4a0b      	ldr	r2, [pc, #44]	; (8008a20 <prvInitialiseNewTask+0x148>)
 80089f2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	68f9      	ldr	r1, [r7, #12]
 80089f8:	69b8      	ldr	r0, [r7, #24]
 80089fa:	f001 f941 	bl	8009c80 <pxPortInitialiseStack>
 80089fe:	4602      	mov	r2, r0
 8008a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d002      	beq.n	8008a10 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a10:	bf00      	nop
 8008a12:	3720      	adds	r7, #32
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	0800a8ac 	.word	0x0800a8ac
 8008a1c:	0800a8cc 	.word	0x0800a8cc
 8008a20:	0800a88c 	.word	0x0800a88c

08008a24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a2c:	f001 fa52 	bl	8009ed4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a30:	4b2d      	ldr	r3, [pc, #180]	; (8008ae8 <prvAddNewTaskToReadyList+0xc4>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	3301      	adds	r3, #1
 8008a36:	4a2c      	ldr	r2, [pc, #176]	; (8008ae8 <prvAddNewTaskToReadyList+0xc4>)
 8008a38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a3a:	4b2c      	ldr	r3, [pc, #176]	; (8008aec <prvAddNewTaskToReadyList+0xc8>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d109      	bne.n	8008a56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a42:	4a2a      	ldr	r2, [pc, #168]	; (8008aec <prvAddNewTaskToReadyList+0xc8>)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a48:	4b27      	ldr	r3, [pc, #156]	; (8008ae8 <prvAddNewTaskToReadyList+0xc4>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d110      	bne.n	8008a72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a50:	f000 fc26 	bl	80092a0 <prvInitialiseTaskLists>
 8008a54:	e00d      	b.n	8008a72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a56:	4b26      	ldr	r3, [pc, #152]	; (8008af0 <prvAddNewTaskToReadyList+0xcc>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d109      	bne.n	8008a72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a5e:	4b23      	ldr	r3, [pc, #140]	; (8008aec <prvAddNewTaskToReadyList+0xc8>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d802      	bhi.n	8008a72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a6c:	4a1f      	ldr	r2, [pc, #124]	; (8008aec <prvAddNewTaskToReadyList+0xc8>)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a72:	4b20      	ldr	r3, [pc, #128]	; (8008af4 <prvAddNewTaskToReadyList+0xd0>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3301      	adds	r3, #1
 8008a78:	4a1e      	ldr	r2, [pc, #120]	; (8008af4 <prvAddNewTaskToReadyList+0xd0>)
 8008a7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a7c:	4b1d      	ldr	r3, [pc, #116]	; (8008af4 <prvAddNewTaskToReadyList+0xd0>)
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a88:	4b1b      	ldr	r3, [pc, #108]	; (8008af8 <prvAddNewTaskToReadyList+0xd4>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d903      	bls.n	8008a98 <prvAddNewTaskToReadyList+0x74>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a94:	4a18      	ldr	r2, [pc, #96]	; (8008af8 <prvAddNewTaskToReadyList+0xd4>)
 8008a96:	6013      	str	r3, [r2, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	4a15      	ldr	r2, [pc, #84]	; (8008afc <prvAddNewTaskToReadyList+0xd8>)
 8008aa6:	441a      	add	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	3304      	adds	r3, #4
 8008aac:	4619      	mov	r1, r3
 8008aae:	4610      	mov	r0, r2
 8008ab0:	f7ff f843 	bl	8007b3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ab4:	f001 fa3e 	bl	8009f34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ab8:	4b0d      	ldr	r3, [pc, #52]	; (8008af0 <prvAddNewTaskToReadyList+0xcc>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00e      	beq.n	8008ade <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ac0:	4b0a      	ldr	r3, [pc, #40]	; (8008aec <prvAddNewTaskToReadyList+0xc8>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d207      	bcs.n	8008ade <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ace:	4b0c      	ldr	r3, [pc, #48]	; (8008b00 <prvAddNewTaskToReadyList+0xdc>)
 8008ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ad4:	601a      	str	r2, [r3, #0]
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ade:	bf00      	nop
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	24000cf0 	.word	0x24000cf0
 8008aec:	2400081c 	.word	0x2400081c
 8008af0:	24000cfc 	.word	0x24000cfc
 8008af4:	24000d0c 	.word	0x24000d0c
 8008af8:	24000cf8 	.word	0x24000cf8
 8008afc:	24000820 	.word	0x24000820
 8008b00:	e000ed04 	.word	0xe000ed04

08008b04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d017      	beq.n	8008b46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b16:	4b13      	ldr	r3, [pc, #76]	; (8008b64 <vTaskDelay+0x60>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00a      	beq.n	8008b34 <vTaskDelay+0x30>
	__asm volatile
 8008b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	60bb      	str	r3, [r7, #8]
}
 8008b30:	bf00      	nop
 8008b32:	e7fe      	b.n	8008b32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b34:	f000 f88a 	bl	8008c4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b38:	2100      	movs	r1, #0
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fcfe 	bl	800953c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b40:	f000 f892 	bl	8008c68 <xTaskResumeAll>
 8008b44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d107      	bne.n	8008b5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008b4c:	4b06      	ldr	r3, [pc, #24]	; (8008b68 <vTaskDelay+0x64>)
 8008b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b5c:	bf00      	nop
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	24000d18 	.word	0x24000d18
 8008b68:	e000ed04 	.word	0xe000ed04

08008b6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b08a      	sub	sp, #40	; 0x28
 8008b70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b72:	2300      	movs	r3, #0
 8008b74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b76:	2300      	movs	r3, #0
 8008b78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b7a:	463a      	mov	r2, r7
 8008b7c:	1d39      	adds	r1, r7, #4
 8008b7e:	f107 0308 	add.w	r3, r7, #8
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fe ff78 	bl	8007a78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	9202      	str	r2, [sp, #8]
 8008b90:	9301      	str	r3, [sp, #4]
 8008b92:	2300      	movs	r3, #0
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	2300      	movs	r3, #0
 8008b98:	460a      	mov	r2, r1
 8008b9a:	4924      	ldr	r1, [pc, #144]	; (8008c2c <vTaskStartScheduler+0xc0>)
 8008b9c:	4824      	ldr	r0, [pc, #144]	; (8008c30 <vTaskStartScheduler+0xc4>)
 8008b9e:	f7ff fdf9 	bl	8008794 <xTaskCreateStatic>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	4a23      	ldr	r2, [pc, #140]	; (8008c34 <vTaskStartScheduler+0xc8>)
 8008ba6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ba8:	4b22      	ldr	r3, [pc, #136]	; (8008c34 <vTaskStartScheduler+0xc8>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	617b      	str	r3, [r7, #20]
 8008bb4:	e001      	b.n	8008bba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d102      	bne.n	8008bc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008bc0:	f000 fd10 	bl	80095e4 <xTimerCreateTimerTask>
 8008bc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d11b      	bne.n	8008c04 <vTaskStartScheduler+0x98>
	__asm volatile
 8008bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd0:	f383 8811 	msr	BASEPRI, r3
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	613b      	str	r3, [r7, #16]
}
 8008bde:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008be0:	4b15      	ldr	r3, [pc, #84]	; (8008c38 <vTaskStartScheduler+0xcc>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3354      	adds	r3, #84	; 0x54
 8008be6:	4a15      	ldr	r2, [pc, #84]	; (8008c3c <vTaskStartScheduler+0xd0>)
 8008be8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008bea:	4b15      	ldr	r3, [pc, #84]	; (8008c40 <vTaskStartScheduler+0xd4>)
 8008bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bf0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008bf2:	4b14      	ldr	r3, [pc, #80]	; (8008c44 <vTaskStartScheduler+0xd8>)
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008bf8:	4b13      	ldr	r3, [pc, #76]	; (8008c48 <vTaskStartScheduler+0xdc>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008bfe:	f001 f8c7 	bl	8009d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c02:	e00e      	b.n	8008c22 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c0a:	d10a      	bne.n	8008c22 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	60fb      	str	r3, [r7, #12]
}
 8008c1e:	bf00      	nop
 8008c20:	e7fe      	b.n	8008c20 <vTaskStartScheduler+0xb4>
}
 8008c22:	bf00      	nop
 8008c24:	3718      	adds	r7, #24
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	0800a764 	.word	0x0800a764
 8008c30:	08009271 	.word	0x08009271
 8008c34:	24000d14 	.word	0x24000d14
 8008c38:	2400081c 	.word	0x2400081c
 8008c3c:	24000014 	.word	0x24000014
 8008c40:	24000d10 	.word	0x24000d10
 8008c44:	24000cfc 	.word	0x24000cfc
 8008c48:	24000cf4 	.word	0x24000cf4

08008c4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008c50:	4b04      	ldr	r3, [pc, #16]	; (8008c64 <vTaskSuspendAll+0x18>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3301      	adds	r3, #1
 8008c56:	4a03      	ldr	r2, [pc, #12]	; (8008c64 <vTaskSuspendAll+0x18>)
 8008c58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008c5a:	bf00      	nop
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr
 8008c64:	24000d18 	.word	0x24000d18

08008c68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c72:	2300      	movs	r3, #0
 8008c74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c76:	4b42      	ldr	r3, [pc, #264]	; (8008d80 <xTaskResumeAll+0x118>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10a      	bne.n	8008c94 <xTaskResumeAll+0x2c>
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	603b      	str	r3, [r7, #0]
}
 8008c90:	bf00      	nop
 8008c92:	e7fe      	b.n	8008c92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c94:	f001 f91e 	bl	8009ed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008c98:	4b39      	ldr	r3, [pc, #228]	; (8008d80 <xTaskResumeAll+0x118>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	4a38      	ldr	r2, [pc, #224]	; (8008d80 <xTaskResumeAll+0x118>)
 8008ca0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ca2:	4b37      	ldr	r3, [pc, #220]	; (8008d80 <xTaskResumeAll+0x118>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d162      	bne.n	8008d70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008caa:	4b36      	ldr	r3, [pc, #216]	; (8008d84 <xTaskResumeAll+0x11c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d05e      	beq.n	8008d70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cb2:	e02f      	b.n	8008d14 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb4:	4b34      	ldr	r3, [pc, #208]	; (8008d88 <xTaskResumeAll+0x120>)
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	3318      	adds	r3, #24
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fe ff97 	bl	8007bf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	3304      	adds	r3, #4
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fe ff92 	bl	8007bf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd4:	4b2d      	ldr	r3, [pc, #180]	; (8008d8c <xTaskResumeAll+0x124>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d903      	bls.n	8008ce4 <xTaskResumeAll+0x7c>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce0:	4a2a      	ldr	r2, [pc, #168]	; (8008d8c <xTaskResumeAll+0x124>)
 8008ce2:	6013      	str	r3, [r2, #0]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce8:	4613      	mov	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4a27      	ldr	r2, [pc, #156]	; (8008d90 <xTaskResumeAll+0x128>)
 8008cf2:	441a      	add	r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	f7fe ff1d 	bl	8007b3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d04:	4b23      	ldr	r3, [pc, #140]	; (8008d94 <xTaskResumeAll+0x12c>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d302      	bcc.n	8008d14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008d0e:	4b22      	ldr	r3, [pc, #136]	; (8008d98 <xTaskResumeAll+0x130>)
 8008d10:	2201      	movs	r2, #1
 8008d12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d14:	4b1c      	ldr	r3, [pc, #112]	; (8008d88 <xTaskResumeAll+0x120>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1cb      	bne.n	8008cb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d22:	f000 fb5f 	bl	80093e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d26:	4b1d      	ldr	r3, [pc, #116]	; (8008d9c <xTaskResumeAll+0x134>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d010      	beq.n	8008d54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d32:	f000 f847 	bl	8008dc4 <xTaskIncrementTick>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d002      	beq.n	8008d42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008d3c:	4b16      	ldr	r3, [pc, #88]	; (8008d98 <xTaskResumeAll+0x130>)
 8008d3e:	2201      	movs	r2, #1
 8008d40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	3b01      	subs	r3, #1
 8008d46:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1f1      	bne.n	8008d32 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008d4e:	4b13      	ldr	r3, [pc, #76]	; (8008d9c <xTaskResumeAll+0x134>)
 8008d50:	2200      	movs	r2, #0
 8008d52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d54:	4b10      	ldr	r3, [pc, #64]	; (8008d98 <xTaskResumeAll+0x130>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d009      	beq.n	8008d70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d60:	4b0f      	ldr	r3, [pc, #60]	; (8008da0 <xTaskResumeAll+0x138>)
 8008d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d66:	601a      	str	r2, [r3, #0]
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d70:	f001 f8e0 	bl	8009f34 <vPortExitCritical>

	return xAlreadyYielded;
 8008d74:	68bb      	ldr	r3, [r7, #8]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	24000d18 	.word	0x24000d18
 8008d84:	24000cf0 	.word	0x24000cf0
 8008d88:	24000cb0 	.word	0x24000cb0
 8008d8c:	24000cf8 	.word	0x24000cf8
 8008d90:	24000820 	.word	0x24000820
 8008d94:	2400081c 	.word	0x2400081c
 8008d98:	24000d04 	.word	0x24000d04
 8008d9c:	24000d00 	.word	0x24000d00
 8008da0:	e000ed04 	.word	0xe000ed04

08008da4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008daa:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <xTaskGetTickCount+0x1c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008db0:	687b      	ldr	r3, [r7, #4]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	370c      	adds	r7, #12
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	24000cf4 	.word	0x24000cf4

08008dc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dce:	4b4f      	ldr	r3, [pc, #316]	; (8008f0c <xTaskIncrementTick+0x148>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f040 808f 	bne.w	8008ef6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008dd8:	4b4d      	ldr	r3, [pc, #308]	; (8008f10 <xTaskIncrementTick+0x14c>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008de0:	4a4b      	ldr	r2, [pc, #300]	; (8008f10 <xTaskIncrementTick+0x14c>)
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d120      	bne.n	8008e2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008dec:	4b49      	ldr	r3, [pc, #292]	; (8008f14 <xTaskIncrementTick+0x150>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00a      	beq.n	8008e0c <xTaskIncrementTick+0x48>
	__asm volatile
 8008df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	603b      	str	r3, [r7, #0]
}
 8008e08:	bf00      	nop
 8008e0a:	e7fe      	b.n	8008e0a <xTaskIncrementTick+0x46>
 8008e0c:	4b41      	ldr	r3, [pc, #260]	; (8008f14 <xTaskIncrementTick+0x150>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	60fb      	str	r3, [r7, #12]
 8008e12:	4b41      	ldr	r3, [pc, #260]	; (8008f18 <xTaskIncrementTick+0x154>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a3f      	ldr	r2, [pc, #252]	; (8008f14 <xTaskIncrementTick+0x150>)
 8008e18:	6013      	str	r3, [r2, #0]
 8008e1a:	4a3f      	ldr	r2, [pc, #252]	; (8008f18 <xTaskIncrementTick+0x154>)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6013      	str	r3, [r2, #0]
 8008e20:	4b3e      	ldr	r3, [pc, #248]	; (8008f1c <xTaskIncrementTick+0x158>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	3301      	adds	r3, #1
 8008e26:	4a3d      	ldr	r2, [pc, #244]	; (8008f1c <xTaskIncrementTick+0x158>)
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	f000 fadb 	bl	80093e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e2e:	4b3c      	ldr	r3, [pc, #240]	; (8008f20 <xTaskIncrementTick+0x15c>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d349      	bcc.n	8008ecc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e38:	4b36      	ldr	r3, [pc, #216]	; (8008f14 <xTaskIncrementTick+0x150>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d104      	bne.n	8008e4c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e42:	4b37      	ldr	r3, [pc, #220]	; (8008f20 <xTaskIncrementTick+0x15c>)
 8008e44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e48:	601a      	str	r2, [r3, #0]
					break;
 8008e4a:	e03f      	b.n	8008ecc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e4c:	4b31      	ldr	r3, [pc, #196]	; (8008f14 <xTaskIncrementTick+0x150>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d203      	bcs.n	8008e6c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e64:	4a2e      	ldr	r2, [pc, #184]	; (8008f20 <xTaskIncrementTick+0x15c>)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e6a:	e02f      	b.n	8008ecc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	3304      	adds	r3, #4
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7fe febf 	bl	8007bf4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d004      	beq.n	8008e88 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	3318      	adds	r3, #24
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe feb6 	bl	8007bf4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e8c:	4b25      	ldr	r3, [pc, #148]	; (8008f24 <xTaskIncrementTick+0x160>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d903      	bls.n	8008e9c <xTaskIncrementTick+0xd8>
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e98:	4a22      	ldr	r2, [pc, #136]	; (8008f24 <xTaskIncrementTick+0x160>)
 8008e9a:	6013      	str	r3, [r2, #0]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4a1f      	ldr	r2, [pc, #124]	; (8008f28 <xTaskIncrementTick+0x164>)
 8008eaa:	441a      	add	r2, r3
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	3304      	adds	r3, #4
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	4610      	mov	r0, r2
 8008eb4:	f7fe fe41 	bl	8007b3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ebc:	4b1b      	ldr	r3, [pc, #108]	; (8008f2c <xTaskIncrementTick+0x168>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d3b8      	bcc.n	8008e38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008eca:	e7b5      	b.n	8008e38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ecc:	4b17      	ldr	r3, [pc, #92]	; (8008f2c <xTaskIncrementTick+0x168>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed2:	4915      	ldr	r1, [pc, #84]	; (8008f28 <xTaskIncrementTick+0x164>)
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4413      	add	r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	440b      	add	r3, r1
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d901      	bls.n	8008ee8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ee8:	4b11      	ldr	r3, [pc, #68]	; (8008f30 <xTaskIncrementTick+0x16c>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d007      	beq.n	8008f00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	617b      	str	r3, [r7, #20]
 8008ef4:	e004      	b.n	8008f00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ef6:	4b0f      	ldr	r3, [pc, #60]	; (8008f34 <xTaskIncrementTick+0x170>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	3301      	adds	r3, #1
 8008efc:	4a0d      	ldr	r2, [pc, #52]	; (8008f34 <xTaskIncrementTick+0x170>)
 8008efe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f00:	697b      	ldr	r3, [r7, #20]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	24000d18 	.word	0x24000d18
 8008f10:	24000cf4 	.word	0x24000cf4
 8008f14:	24000ca8 	.word	0x24000ca8
 8008f18:	24000cac 	.word	0x24000cac
 8008f1c:	24000d08 	.word	0x24000d08
 8008f20:	24000d10 	.word	0x24000d10
 8008f24:	24000cf8 	.word	0x24000cf8
 8008f28:	24000820 	.word	0x24000820
 8008f2c:	2400081c 	.word	0x2400081c
 8008f30:	24000d04 	.word	0x24000d04
 8008f34:	24000d00 	.word	0x24000d00

08008f38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f3e:	4b2a      	ldr	r3, [pc, #168]	; (8008fe8 <vTaskSwitchContext+0xb0>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f46:	4b29      	ldr	r3, [pc, #164]	; (8008fec <vTaskSwitchContext+0xb4>)
 8008f48:	2201      	movs	r2, #1
 8008f4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f4c:	e046      	b.n	8008fdc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008f4e:	4b27      	ldr	r3, [pc, #156]	; (8008fec <vTaskSwitchContext+0xb4>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f54:	4b26      	ldr	r3, [pc, #152]	; (8008ff0 <vTaskSwitchContext+0xb8>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	60fb      	str	r3, [r7, #12]
 8008f5a:	e010      	b.n	8008f7e <vTaskSwitchContext+0x46>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10a      	bne.n	8008f78 <vTaskSwitchContext+0x40>
	__asm volatile
 8008f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f66:	f383 8811 	msr	BASEPRI, r3
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	607b      	str	r3, [r7, #4]
}
 8008f74:	bf00      	nop
 8008f76:	e7fe      	b.n	8008f76 <vTaskSwitchContext+0x3e>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	60fb      	str	r3, [r7, #12]
 8008f7e:	491d      	ldr	r1, [pc, #116]	; (8008ff4 <vTaskSwitchContext+0xbc>)
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	4613      	mov	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	440b      	add	r3, r1
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d0e4      	beq.n	8008f5c <vTaskSwitchContext+0x24>
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	4613      	mov	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4413      	add	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4a15      	ldr	r2, [pc, #84]	; (8008ff4 <vTaskSwitchContext+0xbc>)
 8008f9e:	4413      	add	r3, r2
 8008fa0:	60bb      	str	r3, [r7, #8]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	685a      	ldr	r2, [r3, #4]
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	605a      	str	r2, [r3, #4]
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	3308      	adds	r3, #8
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d104      	bne.n	8008fc2 <vTaskSwitchContext+0x8a>
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	685a      	ldr	r2, [r3, #4]
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	605a      	str	r2, [r3, #4]
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	4a0b      	ldr	r2, [pc, #44]	; (8008ff8 <vTaskSwitchContext+0xc0>)
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	4a08      	ldr	r2, [pc, #32]	; (8008ff0 <vTaskSwitchContext+0xb8>)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008fd2:	4b09      	ldr	r3, [pc, #36]	; (8008ff8 <vTaskSwitchContext+0xc0>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	3354      	adds	r3, #84	; 0x54
 8008fd8:	4a08      	ldr	r2, [pc, #32]	; (8008ffc <vTaskSwitchContext+0xc4>)
 8008fda:	6013      	str	r3, [r2, #0]
}
 8008fdc:	bf00      	nop
 8008fde:	3714      	adds	r7, #20
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr
 8008fe8:	24000d18 	.word	0x24000d18
 8008fec:	24000d04 	.word	0x24000d04
 8008ff0:	24000cf8 	.word	0x24000cf8
 8008ff4:	24000820 	.word	0x24000820
 8008ff8:	2400081c 	.word	0x2400081c
 8008ffc:	24000014 	.word	0x24000014

08009000 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10a      	bne.n	8009026 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009014:	f383 8811 	msr	BASEPRI, r3
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	60fb      	str	r3, [r7, #12]
}
 8009022:	bf00      	nop
 8009024:	e7fe      	b.n	8009024 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009026:	4b07      	ldr	r3, [pc, #28]	; (8009044 <vTaskPlaceOnEventList+0x44>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3318      	adds	r3, #24
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7fe fda7 	bl	8007b82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009034:	2101      	movs	r1, #1
 8009036:	6838      	ldr	r0, [r7, #0]
 8009038:	f000 fa80 	bl	800953c <prvAddCurrentTaskToDelayedList>
}
 800903c:	bf00      	nop
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	2400081c 	.word	0x2400081c

08009048 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10a      	bne.n	8009070 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800905a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	617b      	str	r3, [r7, #20]
}
 800906c:	bf00      	nop
 800906e:	e7fe      	b.n	800906e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009070:	4b0a      	ldr	r3, [pc, #40]	; (800909c <vTaskPlaceOnEventListRestricted+0x54>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3318      	adds	r3, #24
 8009076:	4619      	mov	r1, r3
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f7fe fd5e 	bl	8007b3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009088:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800908a:	6879      	ldr	r1, [r7, #4]
 800908c:	68b8      	ldr	r0, [r7, #8]
 800908e:	f000 fa55 	bl	800953c <prvAddCurrentTaskToDelayedList>
	}
 8009092:	bf00      	nop
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	2400081c 	.word	0x2400081c

080090a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10a      	bne.n	80090cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80090b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	60fb      	str	r3, [r7, #12]
}
 80090c8:	bf00      	nop
 80090ca:	e7fe      	b.n	80090ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	3318      	adds	r3, #24
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe fd8f 	bl	8007bf4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090d6:	4b1e      	ldr	r3, [pc, #120]	; (8009150 <xTaskRemoveFromEventList+0xb0>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d11d      	bne.n	800911a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	3304      	adds	r3, #4
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fe fd86 	bl	8007bf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ec:	4b19      	ldr	r3, [pc, #100]	; (8009154 <xTaskRemoveFromEventList+0xb4>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d903      	bls.n	80090fc <xTaskRemoveFromEventList+0x5c>
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f8:	4a16      	ldr	r2, [pc, #88]	; (8009154 <xTaskRemoveFromEventList+0xb4>)
 80090fa:	6013      	str	r3, [r2, #0]
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009100:	4613      	mov	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4413      	add	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4a13      	ldr	r2, [pc, #76]	; (8009158 <xTaskRemoveFromEventList+0xb8>)
 800910a:	441a      	add	r2, r3
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	3304      	adds	r3, #4
 8009110:	4619      	mov	r1, r3
 8009112:	4610      	mov	r0, r2
 8009114:	f7fe fd11 	bl	8007b3a <vListInsertEnd>
 8009118:	e005      	b.n	8009126 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	3318      	adds	r3, #24
 800911e:	4619      	mov	r1, r3
 8009120:	480e      	ldr	r0, [pc, #56]	; (800915c <xTaskRemoveFromEventList+0xbc>)
 8009122:	f7fe fd0a 	bl	8007b3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800912a:	4b0d      	ldr	r3, [pc, #52]	; (8009160 <xTaskRemoveFromEventList+0xc0>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009130:	429a      	cmp	r2, r3
 8009132:	d905      	bls.n	8009140 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009134:	2301      	movs	r3, #1
 8009136:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009138:	4b0a      	ldr	r3, [pc, #40]	; (8009164 <xTaskRemoveFromEventList+0xc4>)
 800913a:	2201      	movs	r2, #1
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	e001      	b.n	8009144 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009140:	2300      	movs	r3, #0
 8009142:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009144:	697b      	ldr	r3, [r7, #20]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3718      	adds	r7, #24
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	24000d18 	.word	0x24000d18
 8009154:	24000cf8 	.word	0x24000cf8
 8009158:	24000820 	.word	0x24000820
 800915c:	24000cb0 	.word	0x24000cb0
 8009160:	2400081c 	.word	0x2400081c
 8009164:	24000d04 	.word	0x24000d04

08009168 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009170:	4b06      	ldr	r3, [pc, #24]	; (800918c <vTaskInternalSetTimeOutState+0x24>)
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009178:	4b05      	ldr	r3, [pc, #20]	; (8009190 <vTaskInternalSetTimeOutState+0x28>)
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	605a      	str	r2, [r3, #4]
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr
 800918c:	24000d08 	.word	0x24000d08
 8009190:	24000cf4 	.word	0x24000cf4

08009194 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b088      	sub	sp, #32
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10a      	bne.n	80091ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80091a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a8:	f383 8811 	msr	BASEPRI, r3
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	613b      	str	r3, [r7, #16]
}
 80091b6:	bf00      	nop
 80091b8:	e7fe      	b.n	80091b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10a      	bne.n	80091d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	60fb      	str	r3, [r7, #12]
}
 80091d2:	bf00      	nop
 80091d4:	e7fe      	b.n	80091d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80091d6:	f000 fe7d 	bl	8009ed4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80091da:	4b1d      	ldr	r3, [pc, #116]	; (8009250 <xTaskCheckForTimeOut+0xbc>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	69ba      	ldr	r2, [r7, #24]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091f2:	d102      	bne.n	80091fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80091f4:	2300      	movs	r3, #0
 80091f6:	61fb      	str	r3, [r7, #28]
 80091f8:	e023      	b.n	8009242 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	4b15      	ldr	r3, [pc, #84]	; (8009254 <xTaskCheckForTimeOut+0xc0>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	429a      	cmp	r2, r3
 8009204:	d007      	beq.n	8009216 <xTaskCheckForTimeOut+0x82>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	69ba      	ldr	r2, [r7, #24]
 800920c:	429a      	cmp	r2, r3
 800920e:	d302      	bcc.n	8009216 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009210:	2301      	movs	r3, #1
 8009212:	61fb      	str	r3, [r7, #28]
 8009214:	e015      	b.n	8009242 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	429a      	cmp	r2, r3
 800921e:	d20b      	bcs.n	8009238 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	1ad2      	subs	r2, r2, r3
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7ff ff9b 	bl	8009168 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009232:	2300      	movs	r3, #0
 8009234:	61fb      	str	r3, [r7, #28]
 8009236:	e004      	b.n	8009242 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	2200      	movs	r2, #0
 800923c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800923e:	2301      	movs	r3, #1
 8009240:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009242:	f000 fe77 	bl	8009f34 <vPortExitCritical>

	return xReturn;
 8009246:	69fb      	ldr	r3, [r7, #28]
}
 8009248:	4618      	mov	r0, r3
 800924a:	3720      	adds	r7, #32
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	24000cf4 	.word	0x24000cf4
 8009254:	24000d08 	.word	0x24000d08

08009258 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009258:	b480      	push	{r7}
 800925a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800925c:	4b03      	ldr	r3, [pc, #12]	; (800926c <vTaskMissedYield+0x14>)
 800925e:	2201      	movs	r2, #1
 8009260:	601a      	str	r2, [r3, #0]
}
 8009262:	bf00      	nop
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr
 800926c:	24000d04 	.word	0x24000d04

08009270 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009278:	f000 f852 	bl	8009320 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800927c:	4b06      	ldr	r3, [pc, #24]	; (8009298 <prvIdleTask+0x28>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d9f9      	bls.n	8009278 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009284:	4b05      	ldr	r3, [pc, #20]	; (800929c <prvIdleTask+0x2c>)
 8009286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800928a:	601a      	str	r2, [r3, #0]
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009294:	e7f0      	b.n	8009278 <prvIdleTask+0x8>
 8009296:	bf00      	nop
 8009298:	24000820 	.word	0x24000820
 800929c:	e000ed04 	.word	0xe000ed04

080092a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092a6:	2300      	movs	r3, #0
 80092a8:	607b      	str	r3, [r7, #4]
 80092aa:	e00c      	b.n	80092c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	4613      	mov	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4a12      	ldr	r2, [pc, #72]	; (8009300 <prvInitialiseTaskLists+0x60>)
 80092b8:	4413      	add	r3, r2
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fe fc10 	bl	8007ae0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	3301      	adds	r3, #1
 80092c4:	607b      	str	r3, [r7, #4]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2b37      	cmp	r3, #55	; 0x37
 80092ca:	d9ef      	bls.n	80092ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80092cc:	480d      	ldr	r0, [pc, #52]	; (8009304 <prvInitialiseTaskLists+0x64>)
 80092ce:	f7fe fc07 	bl	8007ae0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80092d2:	480d      	ldr	r0, [pc, #52]	; (8009308 <prvInitialiseTaskLists+0x68>)
 80092d4:	f7fe fc04 	bl	8007ae0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80092d8:	480c      	ldr	r0, [pc, #48]	; (800930c <prvInitialiseTaskLists+0x6c>)
 80092da:	f7fe fc01 	bl	8007ae0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80092de:	480c      	ldr	r0, [pc, #48]	; (8009310 <prvInitialiseTaskLists+0x70>)
 80092e0:	f7fe fbfe 	bl	8007ae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80092e4:	480b      	ldr	r0, [pc, #44]	; (8009314 <prvInitialiseTaskLists+0x74>)
 80092e6:	f7fe fbfb 	bl	8007ae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80092ea:	4b0b      	ldr	r3, [pc, #44]	; (8009318 <prvInitialiseTaskLists+0x78>)
 80092ec:	4a05      	ldr	r2, [pc, #20]	; (8009304 <prvInitialiseTaskLists+0x64>)
 80092ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80092f0:	4b0a      	ldr	r3, [pc, #40]	; (800931c <prvInitialiseTaskLists+0x7c>)
 80092f2:	4a05      	ldr	r2, [pc, #20]	; (8009308 <prvInitialiseTaskLists+0x68>)
 80092f4:	601a      	str	r2, [r3, #0]
}
 80092f6:	bf00      	nop
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	24000820 	.word	0x24000820
 8009304:	24000c80 	.word	0x24000c80
 8009308:	24000c94 	.word	0x24000c94
 800930c:	24000cb0 	.word	0x24000cb0
 8009310:	24000cc4 	.word	0x24000cc4
 8009314:	24000cdc 	.word	0x24000cdc
 8009318:	24000ca8 	.word	0x24000ca8
 800931c:	24000cac 	.word	0x24000cac

08009320 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009326:	e019      	b.n	800935c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009328:	f000 fdd4 	bl	8009ed4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800932c:	4b10      	ldr	r3, [pc, #64]	; (8009370 <prvCheckTasksWaitingTermination+0x50>)
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	3304      	adds	r3, #4
 8009338:	4618      	mov	r0, r3
 800933a:	f7fe fc5b 	bl	8007bf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800933e:	4b0d      	ldr	r3, [pc, #52]	; (8009374 <prvCheckTasksWaitingTermination+0x54>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3b01      	subs	r3, #1
 8009344:	4a0b      	ldr	r2, [pc, #44]	; (8009374 <prvCheckTasksWaitingTermination+0x54>)
 8009346:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009348:	4b0b      	ldr	r3, [pc, #44]	; (8009378 <prvCheckTasksWaitingTermination+0x58>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3b01      	subs	r3, #1
 800934e:	4a0a      	ldr	r2, [pc, #40]	; (8009378 <prvCheckTasksWaitingTermination+0x58>)
 8009350:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009352:	f000 fdef 	bl	8009f34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f810 	bl	800937c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800935c:	4b06      	ldr	r3, [pc, #24]	; (8009378 <prvCheckTasksWaitingTermination+0x58>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e1      	bne.n	8009328 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009364:	bf00      	nop
 8009366:	bf00      	nop
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	24000cc4 	.word	0x24000cc4
 8009374:	24000cf0 	.word	0x24000cf0
 8009378:	24000cd8 	.word	0x24000cd8

0800937c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3354      	adds	r3, #84	; 0x54
 8009388:	4618      	mov	r0, r3
 800938a:	f001 f8f9 	bl	800a580 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009394:	2b00      	cmp	r3, #0
 8009396:	d108      	bne.n	80093aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939c:	4618      	mov	r0, r3
 800939e:	f000 ff87 	bl	800a2b0 <vPortFree>
				vPortFree( pxTCB );
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 ff84 	bl	800a2b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80093a8:	e018      	b.n	80093dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d103      	bne.n	80093bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 ff7b 	bl	800a2b0 <vPortFree>
	}
 80093ba:	e00f      	b.n	80093dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d00a      	beq.n	80093dc <prvDeleteTCB+0x60>
	__asm volatile
 80093c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ca:	f383 8811 	msr	BASEPRI, r3
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	f3bf 8f4f 	dsb	sy
 80093d6:	60fb      	str	r3, [r7, #12]
}
 80093d8:	bf00      	nop
 80093da:	e7fe      	b.n	80093da <prvDeleteTCB+0x5e>
	}
 80093dc:	bf00      	nop
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093ea:	4b0c      	ldr	r3, [pc, #48]	; (800941c <prvResetNextTaskUnblockTime+0x38>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d104      	bne.n	80093fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80093f4:	4b0a      	ldr	r3, [pc, #40]	; (8009420 <prvResetNextTaskUnblockTime+0x3c>)
 80093f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80093fc:	e008      	b.n	8009410 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093fe:	4b07      	ldr	r3, [pc, #28]	; (800941c <prvResetNextTaskUnblockTime+0x38>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	4a04      	ldr	r2, [pc, #16]	; (8009420 <prvResetNextTaskUnblockTime+0x3c>)
 800940e:	6013      	str	r3, [r2, #0]
}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr
 800941c:	24000ca8 	.word	0x24000ca8
 8009420:	24000d10 	.word	0x24000d10

08009424 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800942a:	4b0b      	ldr	r3, [pc, #44]	; (8009458 <xTaskGetSchedulerState+0x34>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d102      	bne.n	8009438 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009432:	2301      	movs	r3, #1
 8009434:	607b      	str	r3, [r7, #4]
 8009436:	e008      	b.n	800944a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009438:	4b08      	ldr	r3, [pc, #32]	; (800945c <xTaskGetSchedulerState+0x38>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d102      	bne.n	8009446 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009440:	2302      	movs	r3, #2
 8009442:	607b      	str	r3, [r7, #4]
 8009444:	e001      	b.n	800944a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009446:	2300      	movs	r3, #0
 8009448:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800944a:	687b      	ldr	r3, [r7, #4]
	}
 800944c:	4618      	mov	r0, r3
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	24000cfc 	.word	0x24000cfc
 800945c:	24000d18 	.word	0x24000d18

08009460 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800946c:	2300      	movs	r3, #0
 800946e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d056      	beq.n	8009524 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009476:	4b2e      	ldr	r3, [pc, #184]	; (8009530 <xTaskPriorityDisinherit+0xd0>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	429a      	cmp	r2, r3
 800947e:	d00a      	beq.n	8009496 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009484:	f383 8811 	msr	BASEPRI, r3
 8009488:	f3bf 8f6f 	isb	sy
 800948c:	f3bf 8f4f 	dsb	sy
 8009490:	60fb      	str	r3, [r7, #12]
}
 8009492:	bf00      	nop
 8009494:	e7fe      	b.n	8009494 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10a      	bne.n	80094b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	60bb      	str	r3, [r7, #8]
}
 80094b0:	bf00      	nop
 80094b2:	e7fe      	b.n	80094b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094b8:	1e5a      	subs	r2, r3, #1
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d02c      	beq.n	8009524 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d128      	bne.n	8009524 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	3304      	adds	r3, #4
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fe fb8c 	bl	8007bf4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f4:	4b0f      	ldr	r3, [pc, #60]	; (8009534 <xTaskPriorityDisinherit+0xd4>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d903      	bls.n	8009504 <xTaskPriorityDisinherit+0xa4>
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009500:	4a0c      	ldr	r2, [pc, #48]	; (8009534 <xTaskPriorityDisinherit+0xd4>)
 8009502:	6013      	str	r3, [r2, #0]
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009508:	4613      	mov	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4413      	add	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4a09      	ldr	r2, [pc, #36]	; (8009538 <xTaskPriorityDisinherit+0xd8>)
 8009512:	441a      	add	r2, r3
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	3304      	adds	r3, #4
 8009518:	4619      	mov	r1, r3
 800951a:	4610      	mov	r0, r2
 800951c:	f7fe fb0d 	bl	8007b3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009520:	2301      	movs	r3, #1
 8009522:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009524:	697b      	ldr	r3, [r7, #20]
	}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	2400081c 	.word	0x2400081c
 8009534:	24000cf8 	.word	0x24000cf8
 8009538:	24000820 	.word	0x24000820

0800953c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009546:	4b21      	ldr	r3, [pc, #132]	; (80095cc <prvAddCurrentTaskToDelayedList+0x90>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800954c:	4b20      	ldr	r3, [pc, #128]	; (80095d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3304      	adds	r3, #4
 8009552:	4618      	mov	r0, r3
 8009554:	f7fe fb4e 	bl	8007bf4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800955e:	d10a      	bne.n	8009576 <prvAddCurrentTaskToDelayedList+0x3a>
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d007      	beq.n	8009576 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009566:	4b1a      	ldr	r3, [pc, #104]	; (80095d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	3304      	adds	r3, #4
 800956c:	4619      	mov	r1, r3
 800956e:	4819      	ldr	r0, [pc, #100]	; (80095d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009570:	f7fe fae3 	bl	8007b3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009574:	e026      	b.n	80095c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4413      	add	r3, r2
 800957c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800957e:	4b14      	ldr	r3, [pc, #80]	; (80095d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	429a      	cmp	r2, r3
 800958c:	d209      	bcs.n	80095a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800958e:	4b12      	ldr	r3, [pc, #72]	; (80095d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	4b0f      	ldr	r3, [pc, #60]	; (80095d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3304      	adds	r3, #4
 8009598:	4619      	mov	r1, r3
 800959a:	4610      	mov	r0, r2
 800959c:	f7fe faf1 	bl	8007b82 <vListInsert>
}
 80095a0:	e010      	b.n	80095c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095a2:	4b0e      	ldr	r3, [pc, #56]	; (80095dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	4b0a      	ldr	r3, [pc, #40]	; (80095d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3304      	adds	r3, #4
 80095ac:	4619      	mov	r1, r3
 80095ae:	4610      	mov	r0, r2
 80095b0:	f7fe fae7 	bl	8007b82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80095b4:	4b0a      	ldr	r3, [pc, #40]	; (80095e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d202      	bcs.n	80095c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80095be:	4a08      	ldr	r2, [pc, #32]	; (80095e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	6013      	str	r3, [r2, #0]
}
 80095c4:	bf00      	nop
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	24000cf4 	.word	0x24000cf4
 80095d0:	2400081c 	.word	0x2400081c
 80095d4:	24000cdc 	.word	0x24000cdc
 80095d8:	24000cac 	.word	0x24000cac
 80095dc:	24000ca8 	.word	0x24000ca8
 80095e0:	24000d10 	.word	0x24000d10

080095e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b08a      	sub	sp, #40	; 0x28
 80095e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80095ea:	2300      	movs	r3, #0
 80095ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80095ee:	f000 fb07 	bl	8009c00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095f2:	4b1c      	ldr	r3, [pc, #112]	; (8009664 <xTimerCreateTimerTask+0x80>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d021      	beq.n	800963e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80095fa:	2300      	movs	r3, #0
 80095fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80095fe:	2300      	movs	r3, #0
 8009600:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009602:	1d3a      	adds	r2, r7, #4
 8009604:	f107 0108 	add.w	r1, r7, #8
 8009608:	f107 030c 	add.w	r3, r7, #12
 800960c:	4618      	mov	r0, r3
 800960e:	f7fe fa4d 	bl	8007aac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009612:	6879      	ldr	r1, [r7, #4]
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	9202      	str	r2, [sp, #8]
 800961a:	9301      	str	r3, [sp, #4]
 800961c:	2302      	movs	r3, #2
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	2300      	movs	r3, #0
 8009622:	460a      	mov	r2, r1
 8009624:	4910      	ldr	r1, [pc, #64]	; (8009668 <xTimerCreateTimerTask+0x84>)
 8009626:	4811      	ldr	r0, [pc, #68]	; (800966c <xTimerCreateTimerTask+0x88>)
 8009628:	f7ff f8b4 	bl	8008794 <xTaskCreateStatic>
 800962c:	4603      	mov	r3, r0
 800962e:	4a10      	ldr	r2, [pc, #64]	; (8009670 <xTimerCreateTimerTask+0x8c>)
 8009630:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009632:	4b0f      	ldr	r3, [pc, #60]	; (8009670 <xTimerCreateTimerTask+0x8c>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800963a:	2301      	movs	r3, #1
 800963c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10a      	bne.n	800965a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009648:	f383 8811 	msr	BASEPRI, r3
 800964c:	f3bf 8f6f 	isb	sy
 8009650:	f3bf 8f4f 	dsb	sy
 8009654:	613b      	str	r3, [r7, #16]
}
 8009656:	bf00      	nop
 8009658:	e7fe      	b.n	8009658 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800965a:	697b      	ldr	r3, [r7, #20]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	24000d4c 	.word	0x24000d4c
 8009668:	0800a76c 	.word	0x0800a76c
 800966c:	080097a9 	.word	0x080097a9
 8009670:	24000d50 	.word	0x24000d50

08009674 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b08a      	sub	sp, #40	; 0x28
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
 8009680:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009682:	2300      	movs	r3, #0
 8009684:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10a      	bne.n	80096a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800968c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	623b      	str	r3, [r7, #32]
}
 800969e:	bf00      	nop
 80096a0:	e7fe      	b.n	80096a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80096a2:	4b1a      	ldr	r3, [pc, #104]	; (800970c <xTimerGenericCommand+0x98>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d02a      	beq.n	8009700 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	2b05      	cmp	r3, #5
 80096ba:	dc18      	bgt.n	80096ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80096bc:	f7ff feb2 	bl	8009424 <xTaskGetSchedulerState>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d109      	bne.n	80096da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096c6:	4b11      	ldr	r3, [pc, #68]	; (800970c <xTimerGenericCommand+0x98>)
 80096c8:	6818      	ldr	r0, [r3, #0]
 80096ca:	f107 0110 	add.w	r1, r7, #16
 80096ce:	2300      	movs	r3, #0
 80096d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096d2:	f7fe fbf7 	bl	8007ec4 <xQueueGenericSend>
 80096d6:	6278      	str	r0, [r7, #36]	; 0x24
 80096d8:	e012      	b.n	8009700 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096da:	4b0c      	ldr	r3, [pc, #48]	; (800970c <xTimerGenericCommand+0x98>)
 80096dc:	6818      	ldr	r0, [r3, #0]
 80096de:	f107 0110 	add.w	r1, r7, #16
 80096e2:	2300      	movs	r3, #0
 80096e4:	2200      	movs	r2, #0
 80096e6:	f7fe fbed 	bl	8007ec4 <xQueueGenericSend>
 80096ea:	6278      	str	r0, [r7, #36]	; 0x24
 80096ec:	e008      	b.n	8009700 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80096ee:	4b07      	ldr	r3, [pc, #28]	; (800970c <xTimerGenericCommand+0x98>)
 80096f0:	6818      	ldr	r0, [r3, #0]
 80096f2:	f107 0110 	add.w	r1, r7, #16
 80096f6:	2300      	movs	r3, #0
 80096f8:	683a      	ldr	r2, [r7, #0]
 80096fa:	f7fe fce1 	bl	80080c0 <xQueueGenericSendFromISR>
 80096fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009702:	4618      	mov	r0, r3
 8009704:	3728      	adds	r7, #40	; 0x28
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	24000d4c 	.word	0x24000d4c

08009710 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b088      	sub	sp, #32
 8009714:	af02      	add	r7, sp, #8
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800971a:	4b22      	ldr	r3, [pc, #136]	; (80097a4 <prvProcessExpiredTimer+0x94>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	3304      	adds	r3, #4
 8009728:	4618      	mov	r0, r3
 800972a:	f7fe fa63 	bl	8007bf4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009734:	f003 0304 	and.w	r3, r3, #4
 8009738:	2b00      	cmp	r3, #0
 800973a:	d022      	beq.n	8009782 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	699a      	ldr	r2, [r3, #24]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	18d1      	adds	r1, r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	6978      	ldr	r0, [r7, #20]
 800974a:	f000 f8d1 	bl	80098f0 <prvInsertTimerInActiveList>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d01f      	beq.n	8009794 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009754:	2300      	movs	r3, #0
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	2300      	movs	r3, #0
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	2100      	movs	r1, #0
 800975e:	6978      	ldr	r0, [r7, #20]
 8009760:	f7ff ff88 	bl	8009674 <xTimerGenericCommand>
 8009764:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d113      	bne.n	8009794 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800976c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	60fb      	str	r3, [r7, #12]
}
 800977e:	bf00      	nop
 8009780:	e7fe      	b.n	8009780 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009788:	f023 0301 	bic.w	r3, r3, #1
 800978c:	b2da      	uxtb	r2, r3
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	6a1b      	ldr	r3, [r3, #32]
 8009798:	6978      	ldr	r0, [r7, #20]
 800979a:	4798      	blx	r3
}
 800979c:	bf00      	nop
 800979e:	3718      	adds	r7, #24
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	24000d44 	.word	0x24000d44

080097a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097b0:	f107 0308 	add.w	r3, r7, #8
 80097b4:	4618      	mov	r0, r3
 80097b6:	f000 f857 	bl	8009868 <prvGetNextExpireTime>
 80097ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	4619      	mov	r1, r3
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f000 f803 	bl	80097cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80097c6:	f000 f8d5 	bl	8009974 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097ca:	e7f1      	b.n	80097b0 <prvTimerTask+0x8>

080097cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80097d6:	f7ff fa39 	bl	8008c4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097da:	f107 0308 	add.w	r3, r7, #8
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 f866 	bl	80098b0 <prvSampleTimeNow>
 80097e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d130      	bne.n	800984e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10a      	bne.n	8009808 <prvProcessTimerOrBlockTask+0x3c>
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d806      	bhi.n	8009808 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80097fa:	f7ff fa35 	bl	8008c68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80097fe:	68f9      	ldr	r1, [r7, #12]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7ff ff85 	bl	8009710 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009806:	e024      	b.n	8009852 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d008      	beq.n	8009820 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800980e:	4b13      	ldr	r3, [pc, #76]	; (800985c <prvProcessTimerOrBlockTask+0x90>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d101      	bne.n	800981c <prvProcessTimerOrBlockTask+0x50>
 8009818:	2301      	movs	r3, #1
 800981a:	e000      	b.n	800981e <prvProcessTimerOrBlockTask+0x52>
 800981c:	2300      	movs	r3, #0
 800981e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009820:	4b0f      	ldr	r3, [pc, #60]	; (8009860 <prvProcessTimerOrBlockTask+0x94>)
 8009822:	6818      	ldr	r0, [r3, #0]
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	4619      	mov	r1, r3
 800982e:	f7fe ff7d 	bl	800872c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009832:	f7ff fa19 	bl	8008c68 <xTaskResumeAll>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d10a      	bne.n	8009852 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800983c:	4b09      	ldr	r3, [pc, #36]	; (8009864 <prvProcessTimerOrBlockTask+0x98>)
 800983e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009842:	601a      	str	r2, [r3, #0]
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	f3bf 8f6f 	isb	sy
}
 800984c:	e001      	b.n	8009852 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800984e:	f7ff fa0b 	bl	8008c68 <xTaskResumeAll>
}
 8009852:	bf00      	nop
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	24000d48 	.word	0x24000d48
 8009860:	24000d4c 	.word	0x24000d4c
 8009864:	e000ed04 	.word	0xe000ed04

08009868 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009870:	4b0e      	ldr	r3, [pc, #56]	; (80098ac <prvGetNextExpireTime+0x44>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <prvGetNextExpireTime+0x16>
 800987a:	2201      	movs	r2, #1
 800987c:	e000      	b.n	8009880 <prvGetNextExpireTime+0x18>
 800987e:	2200      	movs	r2, #0
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d105      	bne.n	8009898 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800988c:	4b07      	ldr	r3, [pc, #28]	; (80098ac <prvGetNextExpireTime+0x44>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	60fb      	str	r3, [r7, #12]
 8009896:	e001      	b.n	800989c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009898:	2300      	movs	r3, #0
 800989a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800989c:	68fb      	ldr	r3, [r7, #12]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3714      	adds	r7, #20
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	24000d44 	.word	0x24000d44

080098b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098b8:	f7ff fa74 	bl	8008da4 <xTaskGetTickCount>
 80098bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80098be:	4b0b      	ldr	r3, [pc, #44]	; (80098ec <prvSampleTimeNow+0x3c>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d205      	bcs.n	80098d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80098c8:	f000 f936 	bl	8009b38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	601a      	str	r2, [r3, #0]
 80098d2:	e002      	b.n	80098da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80098da:	4a04      	ldr	r2, [pc, #16]	; (80098ec <prvSampleTimeNow+0x3c>)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80098e0:	68fb      	ldr	r3, [r7, #12]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	24000d54 	.word	0x24000d54

080098f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
 80098fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80098fe:	2300      	movs	r3, #0
 8009900:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	429a      	cmp	r2, r3
 8009914:	d812      	bhi.n	800993c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	1ad2      	subs	r2, r2, r3
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	429a      	cmp	r2, r3
 8009922:	d302      	bcc.n	800992a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009924:	2301      	movs	r3, #1
 8009926:	617b      	str	r3, [r7, #20]
 8009928:	e01b      	b.n	8009962 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800992a:	4b10      	ldr	r3, [pc, #64]	; (800996c <prvInsertTimerInActiveList+0x7c>)
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	3304      	adds	r3, #4
 8009932:	4619      	mov	r1, r3
 8009934:	4610      	mov	r0, r2
 8009936:	f7fe f924 	bl	8007b82 <vListInsert>
 800993a:	e012      	b.n	8009962 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	429a      	cmp	r2, r3
 8009942:	d206      	bcs.n	8009952 <prvInsertTimerInActiveList+0x62>
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	429a      	cmp	r2, r3
 800994a:	d302      	bcc.n	8009952 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800994c:	2301      	movs	r3, #1
 800994e:	617b      	str	r3, [r7, #20]
 8009950:	e007      	b.n	8009962 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009952:	4b07      	ldr	r3, [pc, #28]	; (8009970 <prvInsertTimerInActiveList+0x80>)
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	3304      	adds	r3, #4
 800995a:	4619      	mov	r1, r3
 800995c:	4610      	mov	r0, r2
 800995e:	f7fe f910 	bl	8007b82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009962:	697b      	ldr	r3, [r7, #20]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3718      	adds	r7, #24
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	24000d48 	.word	0x24000d48
 8009970:	24000d44 	.word	0x24000d44

08009974 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b08e      	sub	sp, #56	; 0x38
 8009978:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800997a:	e0ca      	b.n	8009b12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	da18      	bge.n	80099b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009982:	1d3b      	adds	r3, r7, #4
 8009984:	3304      	adds	r3, #4
 8009986:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998a:	2b00      	cmp	r3, #0
 800998c:	d10a      	bne.n	80099a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	61fb      	str	r3, [r7, #28]
}
 80099a0:	bf00      	nop
 80099a2:	e7fe      	b.n	80099a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80099a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099aa:	6850      	ldr	r0, [r2, #4]
 80099ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ae:	6892      	ldr	r2, [r2, #8]
 80099b0:	4611      	mov	r1, r2
 80099b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f2c0 80aa 	blt.w	8009b10 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80099c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c2:	695b      	ldr	r3, [r3, #20]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d004      	beq.n	80099d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ca:	3304      	adds	r3, #4
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7fe f911 	bl	8007bf4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099d2:	463b      	mov	r3, r7
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7ff ff6b 	bl	80098b0 <prvSampleTimeNow>
 80099da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b09      	cmp	r3, #9
 80099e0:	f200 8097 	bhi.w	8009b12 <prvProcessReceivedCommands+0x19e>
 80099e4:	a201      	add	r2, pc, #4	; (adr r2, 80099ec <prvProcessReceivedCommands+0x78>)
 80099e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ea:	bf00      	nop
 80099ec:	08009a15 	.word	0x08009a15
 80099f0:	08009a15 	.word	0x08009a15
 80099f4:	08009a15 	.word	0x08009a15
 80099f8:	08009a89 	.word	0x08009a89
 80099fc:	08009a9d 	.word	0x08009a9d
 8009a00:	08009ae7 	.word	0x08009ae7
 8009a04:	08009a15 	.word	0x08009a15
 8009a08:	08009a15 	.word	0x08009a15
 8009a0c:	08009a89 	.word	0x08009a89
 8009a10:	08009a9d 	.word	0x08009a9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a1a:	f043 0301 	orr.w	r3, r3, #1
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a26:	68ba      	ldr	r2, [r7, #8]
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	18d1      	adds	r1, r2, r3
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a34:	f7ff ff5c 	bl	80098f0 <prvInsertTimerInActiveList>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d069      	beq.n	8009b12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a4c:	f003 0304 	and.w	r3, r3, #4
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d05e      	beq.n	8009b12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	441a      	add	r2, r3
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	2300      	movs	r3, #0
 8009a62:	2100      	movs	r1, #0
 8009a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a66:	f7ff fe05 	bl	8009674 <xTimerGenericCommand>
 8009a6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d14f      	bne.n	8009b12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	61bb      	str	r3, [r7, #24]
}
 8009a84:	bf00      	nop
 8009a86:	e7fe      	b.n	8009a86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a8e:	f023 0301 	bic.w	r3, r3, #1
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009a9a:	e03a      	b.n	8009b12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aa2:	f043 0301 	orr.w	r3, r3, #1
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10a      	bne.n	8009ad2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	617b      	str	r3, [r7, #20]
}
 8009ace:	bf00      	nop
 8009ad0:	e7fe      	b.n	8009ad0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad4:	699a      	ldr	r2, [r3, #24]
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad8:	18d1      	adds	r1, r2, r3
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ae0:	f7ff ff06 	bl	80098f0 <prvInsertTimerInActiveList>
					break;
 8009ae4:	e015      	b.n	8009b12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aec:	f003 0302 	and.w	r3, r3, #2
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d103      	bne.n	8009afc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009af6:	f000 fbdb 	bl	800a2b0 <vPortFree>
 8009afa:	e00a      	b.n	8009b12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b02:	f023 0301 	bic.w	r3, r3, #1
 8009b06:	b2da      	uxtb	r2, r3
 8009b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b0e:	e000      	b.n	8009b12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009b10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b12:	4b08      	ldr	r3, [pc, #32]	; (8009b34 <prvProcessReceivedCommands+0x1c0>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	1d39      	adds	r1, r7, #4
 8009b18:	2200      	movs	r2, #0
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7fe fb6c 	bl	80081f8 <xQueueReceive>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f47f af2a 	bne.w	800997c <prvProcessReceivedCommands+0x8>
	}
}
 8009b28:	bf00      	nop
 8009b2a:	bf00      	nop
 8009b2c:	3730      	adds	r7, #48	; 0x30
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	24000d4c 	.word	0x24000d4c

08009b38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b088      	sub	sp, #32
 8009b3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b3e:	e048      	b.n	8009bd2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b40:	4b2d      	ldr	r3, [pc, #180]	; (8009bf8 <prvSwitchTimerLists+0xc0>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b4a:	4b2b      	ldr	r3, [pc, #172]	; (8009bf8 <prvSwitchTimerLists+0xc0>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	3304      	adds	r3, #4
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7fe f84b 	bl	8007bf4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b6c:	f003 0304 	and.w	r3, r3, #4
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d02e      	beq.n	8009bd2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d90e      	bls.n	8009ba4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b92:	4b19      	ldr	r3, [pc, #100]	; (8009bf8 <prvSwitchTimerLists+0xc0>)
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3304      	adds	r3, #4
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	f7fd fff0 	bl	8007b82 <vListInsert>
 8009ba2:	e016      	b.n	8009bd2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	2300      	movs	r3, #0
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	2100      	movs	r1, #0
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f7ff fd60 	bl	8009674 <xTimerGenericCommand>
 8009bb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10a      	bne.n	8009bd2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc0:	f383 8811 	msr	BASEPRI, r3
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	f3bf 8f4f 	dsb	sy
 8009bcc:	603b      	str	r3, [r7, #0]
}
 8009bce:	bf00      	nop
 8009bd0:	e7fe      	b.n	8009bd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bd2:	4b09      	ldr	r3, [pc, #36]	; (8009bf8 <prvSwitchTimerLists+0xc0>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1b1      	bne.n	8009b40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009bdc:	4b06      	ldr	r3, [pc, #24]	; (8009bf8 <prvSwitchTimerLists+0xc0>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009be2:	4b06      	ldr	r3, [pc, #24]	; (8009bfc <prvSwitchTimerLists+0xc4>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a04      	ldr	r2, [pc, #16]	; (8009bf8 <prvSwitchTimerLists+0xc0>)
 8009be8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009bea:	4a04      	ldr	r2, [pc, #16]	; (8009bfc <prvSwitchTimerLists+0xc4>)
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	6013      	str	r3, [r2, #0]
}
 8009bf0:	bf00      	nop
 8009bf2:	3718      	adds	r7, #24
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	24000d44 	.word	0x24000d44
 8009bfc:	24000d48 	.word	0x24000d48

08009c00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c06:	f000 f965 	bl	8009ed4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c0a:	4b15      	ldr	r3, [pc, #84]	; (8009c60 <prvCheckForValidListAndQueue+0x60>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d120      	bne.n	8009c54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c12:	4814      	ldr	r0, [pc, #80]	; (8009c64 <prvCheckForValidListAndQueue+0x64>)
 8009c14:	f7fd ff64 	bl	8007ae0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c18:	4813      	ldr	r0, [pc, #76]	; (8009c68 <prvCheckForValidListAndQueue+0x68>)
 8009c1a:	f7fd ff61 	bl	8007ae0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c1e:	4b13      	ldr	r3, [pc, #76]	; (8009c6c <prvCheckForValidListAndQueue+0x6c>)
 8009c20:	4a10      	ldr	r2, [pc, #64]	; (8009c64 <prvCheckForValidListAndQueue+0x64>)
 8009c22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c24:	4b12      	ldr	r3, [pc, #72]	; (8009c70 <prvCheckForValidListAndQueue+0x70>)
 8009c26:	4a10      	ldr	r2, [pc, #64]	; (8009c68 <prvCheckForValidListAndQueue+0x68>)
 8009c28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	4b11      	ldr	r3, [pc, #68]	; (8009c74 <prvCheckForValidListAndQueue+0x74>)
 8009c30:	4a11      	ldr	r2, [pc, #68]	; (8009c78 <prvCheckForValidListAndQueue+0x78>)
 8009c32:	2110      	movs	r1, #16
 8009c34:	200a      	movs	r0, #10
 8009c36:	f7fe f86f 	bl	8007d18 <xQueueGenericCreateStatic>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	4a08      	ldr	r2, [pc, #32]	; (8009c60 <prvCheckForValidListAndQueue+0x60>)
 8009c3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c40:	4b07      	ldr	r3, [pc, #28]	; (8009c60 <prvCheckForValidListAndQueue+0x60>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d005      	beq.n	8009c54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c48:	4b05      	ldr	r3, [pc, #20]	; (8009c60 <prvCheckForValidListAndQueue+0x60>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	490b      	ldr	r1, [pc, #44]	; (8009c7c <prvCheckForValidListAndQueue+0x7c>)
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fe fd42 	bl	80086d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c54:	f000 f96e 	bl	8009f34 <vPortExitCritical>
}
 8009c58:	bf00      	nop
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	24000d4c 	.word	0x24000d4c
 8009c64:	24000d1c 	.word	0x24000d1c
 8009c68:	24000d30 	.word	0x24000d30
 8009c6c:	24000d44 	.word	0x24000d44
 8009c70:	24000d48 	.word	0x24000d48
 8009c74:	24000df8 	.word	0x24000df8
 8009c78:	24000d58 	.word	0x24000d58
 8009c7c:	0800a774 	.word	0x0800a774

08009c80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	3b04      	subs	r3, #4
 8009c90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3b04      	subs	r3, #4
 8009c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	f023 0201 	bic.w	r2, r3, #1
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3b04      	subs	r3, #4
 8009cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cb0:	4a0c      	ldr	r2, [pc, #48]	; (8009ce4 <pxPortInitialiseStack+0x64>)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3b14      	subs	r3, #20
 8009cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	3b04      	subs	r3, #4
 8009cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f06f 0202 	mvn.w	r2, #2
 8009cce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	3b20      	subs	r3, #32
 8009cd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3714      	adds	r7, #20
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr
 8009ce4:	08009ce9 	.word	0x08009ce9

08009ce8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009cf2:	4b12      	ldr	r3, [pc, #72]	; (8009d3c <prvTaskExitError+0x54>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cfa:	d00a      	beq.n	8009d12 <prvTaskExitError+0x2a>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	60fb      	str	r3, [r7, #12]
}
 8009d0e:	bf00      	nop
 8009d10:	e7fe      	b.n	8009d10 <prvTaskExitError+0x28>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	60bb      	str	r3, [r7, #8]
}
 8009d24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d26:	bf00      	nop
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d0fc      	beq.n	8009d28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d2e:	bf00      	nop
 8009d30:	bf00      	nop
 8009d32:	3714      	adds	r7, #20
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr
 8009d3c:	24000010 	.word	0x24000010

08009d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d40:	4b07      	ldr	r3, [pc, #28]	; (8009d60 <pxCurrentTCBConst2>)
 8009d42:	6819      	ldr	r1, [r3, #0]
 8009d44:	6808      	ldr	r0, [r1, #0]
 8009d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4a:	f380 8809 	msr	PSP, r0
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f04f 0000 	mov.w	r0, #0
 8009d56:	f380 8811 	msr	BASEPRI, r0
 8009d5a:	4770      	bx	lr
 8009d5c:	f3af 8000 	nop.w

08009d60 <pxCurrentTCBConst2>:
 8009d60:	2400081c 	.word	0x2400081c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d64:	bf00      	nop
 8009d66:	bf00      	nop

08009d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d68:	4808      	ldr	r0, [pc, #32]	; (8009d8c <prvPortStartFirstTask+0x24>)
 8009d6a:	6800      	ldr	r0, [r0, #0]
 8009d6c:	6800      	ldr	r0, [r0, #0]
 8009d6e:	f380 8808 	msr	MSP, r0
 8009d72:	f04f 0000 	mov.w	r0, #0
 8009d76:	f380 8814 	msr	CONTROL, r0
 8009d7a:	b662      	cpsie	i
 8009d7c:	b661      	cpsie	f
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	df00      	svc	0
 8009d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d8a:	bf00      	nop
 8009d8c:	e000ed08 	.word	0xe000ed08

08009d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d96:	4b46      	ldr	r3, [pc, #280]	; (8009eb0 <xPortStartScheduler+0x120>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a46      	ldr	r2, [pc, #280]	; (8009eb4 <xPortStartScheduler+0x124>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d10a      	bne.n	8009db6 <xPortStartScheduler+0x26>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	613b      	str	r3, [r7, #16]
}
 8009db2:	bf00      	nop
 8009db4:	e7fe      	b.n	8009db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009db6:	4b3e      	ldr	r3, [pc, #248]	; (8009eb0 <xPortStartScheduler+0x120>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a3f      	ldr	r2, [pc, #252]	; (8009eb8 <xPortStartScheduler+0x128>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d10a      	bne.n	8009dd6 <xPortStartScheduler+0x46>
	__asm volatile
 8009dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	60fb      	str	r3, [r7, #12]
}
 8009dd2:	bf00      	nop
 8009dd4:	e7fe      	b.n	8009dd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009dd6:	4b39      	ldr	r3, [pc, #228]	; (8009ebc <xPortStartScheduler+0x12c>)
 8009dd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	22ff      	movs	r2, #255	; 0xff
 8009de6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009df0:	78fb      	ldrb	r3, [r7, #3]
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009df8:	b2da      	uxtb	r2, r3
 8009dfa:	4b31      	ldr	r3, [pc, #196]	; (8009ec0 <xPortStartScheduler+0x130>)
 8009dfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009dfe:	4b31      	ldr	r3, [pc, #196]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e00:	2207      	movs	r2, #7
 8009e02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e04:	e009      	b.n	8009e1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009e06:	4b2f      	ldr	r3, [pc, #188]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	4a2d      	ldr	r2, [pc, #180]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e10:	78fb      	ldrb	r3, [r7, #3]
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	005b      	lsls	r3, r3, #1
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e1a:	78fb      	ldrb	r3, [r7, #3]
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e22:	2b80      	cmp	r3, #128	; 0x80
 8009e24:	d0ef      	beq.n	8009e06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e26:	4b27      	ldr	r3, [pc, #156]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f1c3 0307 	rsb	r3, r3, #7
 8009e2e:	2b04      	cmp	r3, #4
 8009e30:	d00a      	beq.n	8009e48 <xPortStartScheduler+0xb8>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	60bb      	str	r3, [r7, #8]
}
 8009e44:	bf00      	nop
 8009e46:	e7fe      	b.n	8009e46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e48:	4b1e      	ldr	r3, [pc, #120]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	021b      	lsls	r3, r3, #8
 8009e4e:	4a1d      	ldr	r2, [pc, #116]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e52:	4b1c      	ldr	r3, [pc, #112]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e5a:	4a1a      	ldr	r2, [pc, #104]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e66:	4b18      	ldr	r3, [pc, #96]	; (8009ec8 <xPortStartScheduler+0x138>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a17      	ldr	r2, [pc, #92]	; (8009ec8 <xPortStartScheduler+0x138>)
 8009e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e72:	4b15      	ldr	r3, [pc, #84]	; (8009ec8 <xPortStartScheduler+0x138>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a14      	ldr	r2, [pc, #80]	; (8009ec8 <xPortStartScheduler+0x138>)
 8009e78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e7e:	f000 f8dd 	bl	800a03c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e82:	4b12      	ldr	r3, [pc, #72]	; (8009ecc <xPortStartScheduler+0x13c>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e88:	f000 f8fc 	bl	800a084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e8c:	4b10      	ldr	r3, [pc, #64]	; (8009ed0 <xPortStartScheduler+0x140>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a0f      	ldr	r2, [pc, #60]	; (8009ed0 <xPortStartScheduler+0x140>)
 8009e92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e98:	f7ff ff66 	bl	8009d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e9c:	f7ff f84c 	bl	8008f38 <vTaskSwitchContext>
	prvTaskExitError();
 8009ea0:	f7ff ff22 	bl	8009ce8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3718      	adds	r7, #24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	e000ed00 	.word	0xe000ed00
 8009eb4:	410fc271 	.word	0x410fc271
 8009eb8:	410fc270 	.word	0x410fc270
 8009ebc:	e000e400 	.word	0xe000e400
 8009ec0:	24000e48 	.word	0x24000e48
 8009ec4:	24000e4c 	.word	0x24000e4c
 8009ec8:	e000ed20 	.word	0xe000ed20
 8009ecc:	24000010 	.word	0x24000010
 8009ed0:	e000ef34 	.word	0xe000ef34

08009ed4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
	__asm volatile
 8009eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	607b      	str	r3, [r7, #4]
}
 8009eec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009eee:	4b0f      	ldr	r3, [pc, #60]	; (8009f2c <vPortEnterCritical+0x58>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	4a0d      	ldr	r2, [pc, #52]	; (8009f2c <vPortEnterCritical+0x58>)
 8009ef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ef8:	4b0c      	ldr	r3, [pc, #48]	; (8009f2c <vPortEnterCritical+0x58>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d10f      	bne.n	8009f20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f00:	4b0b      	ldr	r3, [pc, #44]	; (8009f30 <vPortEnterCritical+0x5c>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00a      	beq.n	8009f20 <vPortEnterCritical+0x4c>
	__asm volatile
 8009f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0e:	f383 8811 	msr	BASEPRI, r3
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	f3bf 8f4f 	dsb	sy
 8009f1a:	603b      	str	r3, [r7, #0]
}
 8009f1c:	bf00      	nop
 8009f1e:	e7fe      	b.n	8009f1e <vPortEnterCritical+0x4a>
	}
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	24000010 	.word	0x24000010
 8009f30:	e000ed04 	.word	0xe000ed04

08009f34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f3a:	4b12      	ldr	r3, [pc, #72]	; (8009f84 <vPortExitCritical+0x50>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10a      	bne.n	8009f58 <vPortExitCritical+0x24>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	607b      	str	r3, [r7, #4]
}
 8009f54:	bf00      	nop
 8009f56:	e7fe      	b.n	8009f56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f58:	4b0a      	ldr	r3, [pc, #40]	; (8009f84 <vPortExitCritical+0x50>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	4a09      	ldr	r2, [pc, #36]	; (8009f84 <vPortExitCritical+0x50>)
 8009f60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f62:	4b08      	ldr	r3, [pc, #32]	; (8009f84 <vPortExitCritical+0x50>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d105      	bne.n	8009f76 <vPortExitCritical+0x42>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	f383 8811 	msr	BASEPRI, r3
}
 8009f74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f76:	bf00      	nop
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	24000010 	.word	0x24000010
	...

08009f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f90:	f3ef 8009 	mrs	r0, PSP
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	4b15      	ldr	r3, [pc, #84]	; (8009ff0 <pxCurrentTCBConst>)
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	f01e 0f10 	tst.w	lr, #16
 8009fa0:	bf08      	it	eq
 8009fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009faa:	6010      	str	r0, [r2, #0]
 8009fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009fb4:	f380 8811 	msr	BASEPRI, r0
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f7fe ffba 	bl	8008f38 <vTaskSwitchContext>
 8009fc4:	f04f 0000 	mov.w	r0, #0
 8009fc8:	f380 8811 	msr	BASEPRI, r0
 8009fcc:	bc09      	pop	{r0, r3}
 8009fce:	6819      	ldr	r1, [r3, #0]
 8009fd0:	6808      	ldr	r0, [r1, #0]
 8009fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd6:	f01e 0f10 	tst.w	lr, #16
 8009fda:	bf08      	it	eq
 8009fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009fe0:	f380 8809 	msr	PSP, r0
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	f3af 8000 	nop.w

08009ff0 <pxCurrentTCBConst>:
 8009ff0:	2400081c 	.word	0x2400081c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop

08009ff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	607b      	str	r3, [r7, #4]
}
 800a010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a012:	f7fe fed7 	bl	8008dc4 <xTaskIncrementTick>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d003      	beq.n	800a024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a01c:	4b06      	ldr	r3, [pc, #24]	; (800a038 <xPortSysTickHandler+0x40>)
 800a01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a022:	601a      	str	r2, [r3, #0]
 800a024:	2300      	movs	r3, #0
 800a026:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	f383 8811 	msr	BASEPRI, r3
}
 800a02e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a030:	bf00      	nop
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	e000ed04 	.word	0xe000ed04

0800a03c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a03c:	b480      	push	{r7}
 800a03e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a040:	4b0b      	ldr	r3, [pc, #44]	; (800a070 <vPortSetupTimerInterrupt+0x34>)
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a046:	4b0b      	ldr	r3, [pc, #44]	; (800a074 <vPortSetupTimerInterrupt+0x38>)
 800a048:	2200      	movs	r2, #0
 800a04a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a04c:	4b0a      	ldr	r3, [pc, #40]	; (800a078 <vPortSetupTimerInterrupt+0x3c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a0a      	ldr	r2, [pc, #40]	; (800a07c <vPortSetupTimerInterrupt+0x40>)
 800a052:	fba2 2303 	umull	r2, r3, r2, r3
 800a056:	099b      	lsrs	r3, r3, #6
 800a058:	4a09      	ldr	r2, [pc, #36]	; (800a080 <vPortSetupTimerInterrupt+0x44>)
 800a05a:	3b01      	subs	r3, #1
 800a05c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a05e:	4b04      	ldr	r3, [pc, #16]	; (800a070 <vPortSetupTimerInterrupt+0x34>)
 800a060:	2207      	movs	r2, #7
 800a062:	601a      	str	r2, [r3, #0]
}
 800a064:	bf00      	nop
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	e000e010 	.word	0xe000e010
 800a074:	e000e018 	.word	0xe000e018
 800a078:	24000000 	.word	0x24000000
 800a07c:	10624dd3 	.word	0x10624dd3
 800a080:	e000e014 	.word	0xe000e014

0800a084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a094 <vPortEnableVFP+0x10>
 800a088:	6801      	ldr	r1, [r0, #0]
 800a08a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a08e:	6001      	str	r1, [r0, #0]
 800a090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a092:	bf00      	nop
 800a094:	e000ed88 	.word	0xe000ed88

0800a098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a09e:	f3ef 8305 	mrs	r3, IPSR
 800a0a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2b0f      	cmp	r3, #15
 800a0a8:	d914      	bls.n	800a0d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0aa:	4a17      	ldr	r2, [pc, #92]	; (800a108 <vPortValidateInterruptPriority+0x70>)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0b4:	4b15      	ldr	r3, [pc, #84]	; (800a10c <vPortValidateInterruptPriority+0x74>)
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	7afa      	ldrb	r2, [r7, #11]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d20a      	bcs.n	800a0d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	607b      	str	r3, [r7, #4]
}
 800a0d0:	bf00      	nop
 800a0d2:	e7fe      	b.n	800a0d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0d4:	4b0e      	ldr	r3, [pc, #56]	; (800a110 <vPortValidateInterruptPriority+0x78>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a0dc:	4b0d      	ldr	r3, [pc, #52]	; (800a114 <vPortValidateInterruptPriority+0x7c>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d90a      	bls.n	800a0fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	603b      	str	r3, [r7, #0]
}
 800a0f6:	bf00      	nop
 800a0f8:	e7fe      	b.n	800a0f8 <vPortValidateInterruptPriority+0x60>
	}
 800a0fa:	bf00      	nop
 800a0fc:	3714      	adds	r7, #20
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	e000e3f0 	.word	0xe000e3f0
 800a10c:	24000e48 	.word	0x24000e48
 800a110:	e000ed0c 	.word	0xe000ed0c
 800a114:	24000e4c 	.word	0x24000e4c

0800a118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b08a      	sub	sp, #40	; 0x28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a120:	2300      	movs	r3, #0
 800a122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a124:	f7fe fd92 	bl	8008c4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a128:	4b5b      	ldr	r3, [pc, #364]	; (800a298 <pvPortMalloc+0x180>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a130:	f000 f920 	bl	800a374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a134:	4b59      	ldr	r3, [pc, #356]	; (800a29c <pvPortMalloc+0x184>)
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4013      	ands	r3, r2
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f040 8093 	bne.w	800a268 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d01d      	beq.n	800a184 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a148:	2208      	movs	r2, #8
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4413      	add	r3, r2
 800a14e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f003 0307 	and.w	r3, r3, #7
 800a156:	2b00      	cmp	r3, #0
 800a158:	d014      	beq.n	800a184 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f023 0307 	bic.w	r3, r3, #7
 800a160:	3308      	adds	r3, #8
 800a162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00a      	beq.n	800a184 <pvPortMalloc+0x6c>
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	617b      	str	r3, [r7, #20]
}
 800a180:	bf00      	nop
 800a182:	e7fe      	b.n	800a182 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d06e      	beq.n	800a268 <pvPortMalloc+0x150>
 800a18a:	4b45      	ldr	r3, [pc, #276]	; (800a2a0 <pvPortMalloc+0x188>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	429a      	cmp	r2, r3
 800a192:	d869      	bhi.n	800a268 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a194:	4b43      	ldr	r3, [pc, #268]	; (800a2a4 <pvPortMalloc+0x18c>)
 800a196:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a198:	4b42      	ldr	r3, [pc, #264]	; (800a2a4 <pvPortMalloc+0x18c>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a19e:	e004      	b.n	800a1aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d903      	bls.n	800a1bc <pvPortMalloc+0xa4>
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d1f1      	bne.n	800a1a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1bc:	4b36      	ldr	r3, [pc, #216]	; (800a298 <pvPortMalloc+0x180>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d050      	beq.n	800a268 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1c6:	6a3b      	ldr	r3, [r7, #32]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2208      	movs	r2, #8
 800a1cc:	4413      	add	r3, r2
 800a1ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	6a3b      	ldr	r3, [r7, #32]
 800a1d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	685a      	ldr	r2, [r3, #4]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	1ad2      	subs	r2, r2, r3
 800a1e0:	2308      	movs	r3, #8
 800a1e2:	005b      	lsls	r3, r3, #1
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d91f      	bls.n	800a228 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	f003 0307 	and.w	r3, r3, #7
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00a      	beq.n	800a210 <pvPortMalloc+0xf8>
	__asm volatile
 800a1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fe:	f383 8811 	msr	BASEPRI, r3
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	613b      	str	r3, [r7, #16]
}
 800a20c:	bf00      	nop
 800a20e:	e7fe      	b.n	800a20e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	685a      	ldr	r2, [r3, #4]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	1ad2      	subs	r2, r2, r3
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a222:	69b8      	ldr	r0, [r7, #24]
 800a224:	f000 f908 	bl	800a438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a228:	4b1d      	ldr	r3, [pc, #116]	; (800a2a0 <pvPortMalloc+0x188>)
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	4a1b      	ldr	r2, [pc, #108]	; (800a2a0 <pvPortMalloc+0x188>)
 800a234:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a236:	4b1a      	ldr	r3, [pc, #104]	; (800a2a0 <pvPortMalloc+0x188>)
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	4b1b      	ldr	r3, [pc, #108]	; (800a2a8 <pvPortMalloc+0x190>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d203      	bcs.n	800a24a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a242:	4b17      	ldr	r3, [pc, #92]	; (800a2a0 <pvPortMalloc+0x188>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a18      	ldr	r2, [pc, #96]	; (800a2a8 <pvPortMalloc+0x190>)
 800a248:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	685a      	ldr	r2, [r3, #4]
 800a24e:	4b13      	ldr	r3, [pc, #76]	; (800a29c <pvPortMalloc+0x184>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	431a      	orrs	r2, r3
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25a:	2200      	movs	r2, #0
 800a25c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a25e:	4b13      	ldr	r3, [pc, #76]	; (800a2ac <pvPortMalloc+0x194>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3301      	adds	r3, #1
 800a264:	4a11      	ldr	r2, [pc, #68]	; (800a2ac <pvPortMalloc+0x194>)
 800a266:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a268:	f7fe fcfe 	bl	8008c68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	f003 0307 	and.w	r3, r3, #7
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00a      	beq.n	800a28c <pvPortMalloc+0x174>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	60fb      	str	r3, [r7, #12]
}
 800a288:	bf00      	nop
 800a28a:	e7fe      	b.n	800a28a <pvPortMalloc+0x172>
	return pvReturn;
 800a28c:	69fb      	ldr	r3, [r7, #28]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3728      	adds	r7, #40	; 0x28
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	24004a58 	.word	0x24004a58
 800a29c:	24004a6c 	.word	0x24004a6c
 800a2a0:	24004a5c 	.word	0x24004a5c
 800a2a4:	24004a50 	.word	0x24004a50
 800a2a8:	24004a60 	.word	0x24004a60
 800a2ac:	24004a64 	.word	0x24004a64

0800a2b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d04d      	beq.n	800a35e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2c2:	2308      	movs	r3, #8
 800a2c4:	425b      	negs	r3, r3
 800a2c6:	697a      	ldr	r2, [r7, #20]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	685a      	ldr	r2, [r3, #4]
 800a2d4:	4b24      	ldr	r3, [pc, #144]	; (800a368 <vPortFree+0xb8>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4013      	ands	r3, r2
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10a      	bne.n	800a2f4 <vPortFree+0x44>
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	60fb      	str	r3, [r7, #12]
}
 800a2f0:	bf00      	nop
 800a2f2:	e7fe      	b.n	800a2f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00a      	beq.n	800a312 <vPortFree+0x62>
	__asm volatile
 800a2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a300:	f383 8811 	msr	BASEPRI, r3
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	60bb      	str	r3, [r7, #8]
}
 800a30e:	bf00      	nop
 800a310:	e7fe      	b.n	800a310 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	685a      	ldr	r2, [r3, #4]
 800a316:	4b14      	ldr	r3, [pc, #80]	; (800a368 <vPortFree+0xb8>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4013      	ands	r3, r2
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d01e      	beq.n	800a35e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d11a      	bne.n	800a35e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	685a      	ldr	r2, [r3, #4]
 800a32c:	4b0e      	ldr	r3, [pc, #56]	; (800a368 <vPortFree+0xb8>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	43db      	mvns	r3, r3
 800a332:	401a      	ands	r2, r3
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a338:	f7fe fc88 	bl	8008c4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	4b0a      	ldr	r3, [pc, #40]	; (800a36c <vPortFree+0xbc>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4413      	add	r3, r2
 800a346:	4a09      	ldr	r2, [pc, #36]	; (800a36c <vPortFree+0xbc>)
 800a348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a34a:	6938      	ldr	r0, [r7, #16]
 800a34c:	f000 f874 	bl	800a438 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a350:	4b07      	ldr	r3, [pc, #28]	; (800a370 <vPortFree+0xc0>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3301      	adds	r3, #1
 800a356:	4a06      	ldr	r2, [pc, #24]	; (800a370 <vPortFree+0xc0>)
 800a358:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a35a:	f7fe fc85 	bl	8008c68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a35e:	bf00      	nop
 800a360:	3718      	adds	r7, #24
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	24004a6c 	.word	0x24004a6c
 800a36c:	24004a5c 	.word	0x24004a5c
 800a370:	24004a68 	.word	0x24004a68

0800a374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a37a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a37e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a380:	4b27      	ldr	r3, [pc, #156]	; (800a420 <prvHeapInit+0xac>)
 800a382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f003 0307 	and.w	r3, r3, #7
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00c      	beq.n	800a3a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	3307      	adds	r3, #7
 800a392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f023 0307 	bic.w	r3, r3, #7
 800a39a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	4a1f      	ldr	r2, [pc, #124]	; (800a420 <prvHeapInit+0xac>)
 800a3a4:	4413      	add	r3, r2
 800a3a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3ac:	4a1d      	ldr	r2, [pc, #116]	; (800a424 <prvHeapInit+0xb0>)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3b2:	4b1c      	ldr	r3, [pc, #112]	; (800a424 <prvHeapInit+0xb0>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	4413      	add	r3, r2
 800a3be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3c0:	2208      	movs	r2, #8
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	1a9b      	subs	r3, r3, r2
 800a3c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f023 0307 	bic.w	r3, r3, #7
 800a3ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	4a15      	ldr	r2, [pc, #84]	; (800a428 <prvHeapInit+0xb4>)
 800a3d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3d6:	4b14      	ldr	r3, [pc, #80]	; (800a428 <prvHeapInit+0xb4>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3de:	4b12      	ldr	r3, [pc, #72]	; (800a428 <prvHeapInit+0xb4>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	1ad2      	subs	r2, r2, r3
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3f4:	4b0c      	ldr	r3, [pc, #48]	; (800a428 <prvHeapInit+0xb4>)
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	4a0a      	ldr	r2, [pc, #40]	; (800a42c <prvHeapInit+0xb8>)
 800a402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	4a09      	ldr	r2, [pc, #36]	; (800a430 <prvHeapInit+0xbc>)
 800a40a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a40c:	4b09      	ldr	r3, [pc, #36]	; (800a434 <prvHeapInit+0xc0>)
 800a40e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a412:	601a      	str	r2, [r3, #0]
}
 800a414:	bf00      	nop
 800a416:	3714      	adds	r7, #20
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	24000e50 	.word	0x24000e50
 800a424:	24004a50 	.word	0x24004a50
 800a428:	24004a58 	.word	0x24004a58
 800a42c:	24004a60 	.word	0x24004a60
 800a430:	24004a5c 	.word	0x24004a5c
 800a434:	24004a6c 	.word	0x24004a6c

0800a438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a440:	4b28      	ldr	r3, [pc, #160]	; (800a4e4 <prvInsertBlockIntoFreeList+0xac>)
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	e002      	b.n	800a44c <prvInsertBlockIntoFreeList+0x14>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	429a      	cmp	r2, r3
 800a454:	d8f7      	bhi.n	800a446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	4413      	add	r3, r2
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	429a      	cmp	r2, r3
 800a466:	d108      	bne.n	800a47a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	441a      	add	r2, r3
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	441a      	add	r2, r3
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d118      	bne.n	800a4c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	4b15      	ldr	r3, [pc, #84]	; (800a4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	429a      	cmp	r2, r3
 800a498:	d00d      	beq.n	800a4b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	685a      	ldr	r2, [r3, #4]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	441a      	add	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	e008      	b.n	800a4c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4b6:	4b0c      	ldr	r3, [pc, #48]	; (800a4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	e003      	b.n	800a4c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d002      	beq.n	800a4d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4d6:	bf00      	nop
 800a4d8:	3714      	adds	r7, #20
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	24004a50 	.word	0x24004a50
 800a4e8:	24004a58 	.word	0x24004a58

0800a4ec <__libc_init_array>:
 800a4ec:	b570      	push	{r4, r5, r6, lr}
 800a4ee:	4d0d      	ldr	r5, [pc, #52]	; (800a524 <__libc_init_array+0x38>)
 800a4f0:	4c0d      	ldr	r4, [pc, #52]	; (800a528 <__libc_init_array+0x3c>)
 800a4f2:	1b64      	subs	r4, r4, r5
 800a4f4:	10a4      	asrs	r4, r4, #2
 800a4f6:	2600      	movs	r6, #0
 800a4f8:	42a6      	cmp	r6, r4
 800a4fa:	d109      	bne.n	800a510 <__libc_init_array+0x24>
 800a4fc:	4d0b      	ldr	r5, [pc, #44]	; (800a52c <__libc_init_array+0x40>)
 800a4fe:	4c0c      	ldr	r4, [pc, #48]	; (800a530 <__libc_init_array+0x44>)
 800a500:	f000 f8f6 	bl	800a6f0 <_init>
 800a504:	1b64      	subs	r4, r4, r5
 800a506:	10a4      	asrs	r4, r4, #2
 800a508:	2600      	movs	r6, #0
 800a50a:	42a6      	cmp	r6, r4
 800a50c:	d105      	bne.n	800a51a <__libc_init_array+0x2e>
 800a50e:	bd70      	pop	{r4, r5, r6, pc}
 800a510:	f855 3b04 	ldr.w	r3, [r5], #4
 800a514:	4798      	blx	r3
 800a516:	3601      	adds	r6, #1
 800a518:	e7ee      	b.n	800a4f8 <__libc_init_array+0xc>
 800a51a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a51e:	4798      	blx	r3
 800a520:	3601      	adds	r6, #1
 800a522:	e7f2      	b.n	800a50a <__libc_init_array+0x1e>
 800a524:	0800a8f4 	.word	0x0800a8f4
 800a528:	0800a8f4 	.word	0x0800a8f4
 800a52c:	0800a8f4 	.word	0x0800a8f4
 800a530:	0800a8f8 	.word	0x0800a8f8

0800a534 <__retarget_lock_acquire_recursive>:
 800a534:	4770      	bx	lr

0800a536 <__retarget_lock_release_recursive>:
 800a536:	4770      	bx	lr

0800a538 <memcpy>:
 800a538:	440a      	add	r2, r1
 800a53a:	4291      	cmp	r1, r2
 800a53c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a540:	d100      	bne.n	800a544 <memcpy+0xc>
 800a542:	4770      	bx	lr
 800a544:	b510      	push	{r4, lr}
 800a546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a54a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a54e:	4291      	cmp	r1, r2
 800a550:	d1f9      	bne.n	800a546 <memcpy+0xe>
 800a552:	bd10      	pop	{r4, pc}

0800a554 <memset>:
 800a554:	4402      	add	r2, r0
 800a556:	4603      	mov	r3, r0
 800a558:	4293      	cmp	r3, r2
 800a55a:	d100      	bne.n	800a55e <memset+0xa>
 800a55c:	4770      	bx	lr
 800a55e:	f803 1b01 	strb.w	r1, [r3], #1
 800a562:	e7f9      	b.n	800a558 <memset+0x4>

0800a564 <cleanup_glue>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	460c      	mov	r4, r1
 800a568:	6809      	ldr	r1, [r1, #0]
 800a56a:	4605      	mov	r5, r0
 800a56c:	b109      	cbz	r1, 800a572 <cleanup_glue+0xe>
 800a56e:	f7ff fff9 	bl	800a564 <cleanup_glue>
 800a572:	4621      	mov	r1, r4
 800a574:	4628      	mov	r0, r5
 800a576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a57a:	f000 b869 	b.w	800a650 <_free_r>
	...

0800a580 <_reclaim_reent>:
 800a580:	4b2c      	ldr	r3, [pc, #176]	; (800a634 <_reclaim_reent+0xb4>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4283      	cmp	r3, r0
 800a586:	b570      	push	{r4, r5, r6, lr}
 800a588:	4604      	mov	r4, r0
 800a58a:	d051      	beq.n	800a630 <_reclaim_reent+0xb0>
 800a58c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a58e:	b143      	cbz	r3, 800a5a2 <_reclaim_reent+0x22>
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d14a      	bne.n	800a62c <_reclaim_reent+0xac>
 800a596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a598:	6819      	ldr	r1, [r3, #0]
 800a59a:	b111      	cbz	r1, 800a5a2 <_reclaim_reent+0x22>
 800a59c:	4620      	mov	r0, r4
 800a59e:	f000 f857 	bl	800a650 <_free_r>
 800a5a2:	6961      	ldr	r1, [r4, #20]
 800a5a4:	b111      	cbz	r1, 800a5ac <_reclaim_reent+0x2c>
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	f000 f852 	bl	800a650 <_free_r>
 800a5ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a5ae:	b111      	cbz	r1, 800a5b6 <_reclaim_reent+0x36>
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f000 f84d 	bl	800a650 <_free_r>
 800a5b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a5b8:	b111      	cbz	r1, 800a5c0 <_reclaim_reent+0x40>
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f000 f848 	bl	800a650 <_free_r>
 800a5c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a5c2:	b111      	cbz	r1, 800a5ca <_reclaim_reent+0x4a>
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f000 f843 	bl	800a650 <_free_r>
 800a5ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a5cc:	b111      	cbz	r1, 800a5d4 <_reclaim_reent+0x54>
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f000 f83e 	bl	800a650 <_free_r>
 800a5d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a5d6:	b111      	cbz	r1, 800a5de <_reclaim_reent+0x5e>
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f000 f839 	bl	800a650 <_free_r>
 800a5de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a5e0:	b111      	cbz	r1, 800a5e8 <_reclaim_reent+0x68>
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f000 f834 	bl	800a650 <_free_r>
 800a5e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5ea:	b111      	cbz	r1, 800a5f2 <_reclaim_reent+0x72>
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f000 f82f 	bl	800a650 <_free_r>
 800a5f2:	69a3      	ldr	r3, [r4, #24]
 800a5f4:	b1e3      	cbz	r3, 800a630 <_reclaim_reent+0xb0>
 800a5f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	4798      	blx	r3
 800a5fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a5fe:	b1b9      	cbz	r1, 800a630 <_reclaim_reent+0xb0>
 800a600:	4620      	mov	r0, r4
 800a602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a606:	f7ff bfad 	b.w	800a564 <cleanup_glue>
 800a60a:	5949      	ldr	r1, [r1, r5]
 800a60c:	b941      	cbnz	r1, 800a620 <_reclaim_reent+0xa0>
 800a60e:	3504      	adds	r5, #4
 800a610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a612:	2d80      	cmp	r5, #128	; 0x80
 800a614:	68d9      	ldr	r1, [r3, #12]
 800a616:	d1f8      	bne.n	800a60a <_reclaim_reent+0x8a>
 800a618:	4620      	mov	r0, r4
 800a61a:	f000 f819 	bl	800a650 <_free_r>
 800a61e:	e7ba      	b.n	800a596 <_reclaim_reent+0x16>
 800a620:	680e      	ldr	r6, [r1, #0]
 800a622:	4620      	mov	r0, r4
 800a624:	f000 f814 	bl	800a650 <_free_r>
 800a628:	4631      	mov	r1, r6
 800a62a:	e7ef      	b.n	800a60c <_reclaim_reent+0x8c>
 800a62c:	2500      	movs	r5, #0
 800a62e:	e7ef      	b.n	800a610 <_reclaim_reent+0x90>
 800a630:	bd70      	pop	{r4, r5, r6, pc}
 800a632:	bf00      	nop
 800a634:	24000014 	.word	0x24000014

0800a638 <__malloc_lock>:
 800a638:	4801      	ldr	r0, [pc, #4]	; (800a640 <__malloc_lock+0x8>)
 800a63a:	f7ff bf7b 	b.w	800a534 <__retarget_lock_acquire_recursive>
 800a63e:	bf00      	nop
 800a640:	24004c80 	.word	0x24004c80

0800a644 <__malloc_unlock>:
 800a644:	4801      	ldr	r0, [pc, #4]	; (800a64c <__malloc_unlock+0x8>)
 800a646:	f7ff bf76 	b.w	800a536 <__retarget_lock_release_recursive>
 800a64a:	bf00      	nop
 800a64c:	24004c80 	.word	0x24004c80

0800a650 <_free_r>:
 800a650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a652:	2900      	cmp	r1, #0
 800a654:	d048      	beq.n	800a6e8 <_free_r+0x98>
 800a656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a65a:	9001      	str	r0, [sp, #4]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f1a1 0404 	sub.w	r4, r1, #4
 800a662:	bfb8      	it	lt
 800a664:	18e4      	addlt	r4, r4, r3
 800a666:	f7ff ffe7 	bl	800a638 <__malloc_lock>
 800a66a:	4a20      	ldr	r2, [pc, #128]	; (800a6ec <_free_r+0x9c>)
 800a66c:	9801      	ldr	r0, [sp, #4]
 800a66e:	6813      	ldr	r3, [r2, #0]
 800a670:	4615      	mov	r5, r2
 800a672:	b933      	cbnz	r3, 800a682 <_free_r+0x32>
 800a674:	6063      	str	r3, [r4, #4]
 800a676:	6014      	str	r4, [r2, #0]
 800a678:	b003      	add	sp, #12
 800a67a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a67e:	f7ff bfe1 	b.w	800a644 <__malloc_unlock>
 800a682:	42a3      	cmp	r3, r4
 800a684:	d90b      	bls.n	800a69e <_free_r+0x4e>
 800a686:	6821      	ldr	r1, [r4, #0]
 800a688:	1862      	adds	r2, r4, r1
 800a68a:	4293      	cmp	r3, r2
 800a68c:	bf04      	itt	eq
 800a68e:	681a      	ldreq	r2, [r3, #0]
 800a690:	685b      	ldreq	r3, [r3, #4]
 800a692:	6063      	str	r3, [r4, #4]
 800a694:	bf04      	itt	eq
 800a696:	1852      	addeq	r2, r2, r1
 800a698:	6022      	streq	r2, [r4, #0]
 800a69a:	602c      	str	r4, [r5, #0]
 800a69c:	e7ec      	b.n	800a678 <_free_r+0x28>
 800a69e:	461a      	mov	r2, r3
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	b10b      	cbz	r3, 800a6a8 <_free_r+0x58>
 800a6a4:	42a3      	cmp	r3, r4
 800a6a6:	d9fa      	bls.n	800a69e <_free_r+0x4e>
 800a6a8:	6811      	ldr	r1, [r2, #0]
 800a6aa:	1855      	adds	r5, r2, r1
 800a6ac:	42a5      	cmp	r5, r4
 800a6ae:	d10b      	bne.n	800a6c8 <_free_r+0x78>
 800a6b0:	6824      	ldr	r4, [r4, #0]
 800a6b2:	4421      	add	r1, r4
 800a6b4:	1854      	adds	r4, r2, r1
 800a6b6:	42a3      	cmp	r3, r4
 800a6b8:	6011      	str	r1, [r2, #0]
 800a6ba:	d1dd      	bne.n	800a678 <_free_r+0x28>
 800a6bc:	681c      	ldr	r4, [r3, #0]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	6053      	str	r3, [r2, #4]
 800a6c2:	4421      	add	r1, r4
 800a6c4:	6011      	str	r1, [r2, #0]
 800a6c6:	e7d7      	b.n	800a678 <_free_r+0x28>
 800a6c8:	d902      	bls.n	800a6d0 <_free_r+0x80>
 800a6ca:	230c      	movs	r3, #12
 800a6cc:	6003      	str	r3, [r0, #0]
 800a6ce:	e7d3      	b.n	800a678 <_free_r+0x28>
 800a6d0:	6825      	ldr	r5, [r4, #0]
 800a6d2:	1961      	adds	r1, r4, r5
 800a6d4:	428b      	cmp	r3, r1
 800a6d6:	bf04      	itt	eq
 800a6d8:	6819      	ldreq	r1, [r3, #0]
 800a6da:	685b      	ldreq	r3, [r3, #4]
 800a6dc:	6063      	str	r3, [r4, #4]
 800a6de:	bf04      	itt	eq
 800a6e0:	1949      	addeq	r1, r1, r5
 800a6e2:	6021      	streq	r1, [r4, #0]
 800a6e4:	6054      	str	r4, [r2, #4]
 800a6e6:	e7c7      	b.n	800a678 <_free_r+0x28>
 800a6e8:	b003      	add	sp, #12
 800a6ea:	bd30      	pop	{r4, r5, pc}
 800a6ec:	24004a70 	.word	0x24004a70

0800a6f0 <_init>:
 800a6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f2:	bf00      	nop
 800a6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6f6:	bc08      	pop	{r3}
 800a6f8:	469e      	mov	lr, r3
 800a6fa:	4770      	bx	lr

0800a6fc <_fini>:
 800a6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fe:	bf00      	nop
 800a700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a702:	bc08      	pop	{r3}
 800a704:	469e      	mov	lr, r3
 800a706:	4770      	bx	lr
