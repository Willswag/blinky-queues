
blinky-queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b08c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  0800b33c  0800b33c  0001b33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b64c  0800b64c  0001b64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b654  0800b654  0001b654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b658  0800b658  0001b658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800b65c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004bc0  24000078  0800b6d4  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004c38  0800b6d4  00024c38  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032873  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000050a4  00000000  00000000  00052919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001938  00000000  00000000  000579c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000017a0  00000000  00000000  000592f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000336fa  00000000  00000000  0005aa98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000213a2  00000000  00000000  0008e192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014a829  00000000  00000000  000af534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001f9d5d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006f60  00000000  00000000  001f9db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b324 	.word	0x0800b324

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	0800b324 	.word	0x0800b324

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandsToBlink */
  CommandsToBlinkHandle = osMessageQueueNew (16, sizeof(uint16_t), &CommandsToBlink_attributes);
 800068c:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <MX_FREERTOS_Init+0x68>)
 800068e:	2102      	movs	r1, #2
 8000690:	2010      	movs	r0, #16
 8000692:	f007 fa66 	bl	8007b62 <osMessageQueueNew>
 8000696:	4603      	mov	r3, r0
 8000698:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <MX_FREERTOS_Init+0x6c>)
 800069a:	6013      	str	r3, [r2, #0]

  /* creation of times_blinked */
  times_blinkedHandle = osMessageQueueNew (16, sizeof(uint16_t), &times_blinked_attributes);
 800069c:	4a16      	ldr	r2, [pc, #88]	; (80006f8 <MX_FREERTOS_Init+0x70>)
 800069e:	2102      	movs	r1, #2
 80006a0:	2010      	movs	r0, #16
 80006a2:	f007 fa5e 	bl	8007b62 <osMessageQueueNew>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a14      	ldr	r2, [pc, #80]	; (80006fc <MX_FREERTOS_Init+0x74>)
 80006aa:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CommandLine */
  CommandLineHandle = osThreadNew(StartCommandLine, NULL, &CommandLine_attributes);
 80006ac:	4a14      	ldr	r2, [pc, #80]	; (8000700 <MX_FREERTOS_Init+0x78>)
 80006ae:	2100      	movs	r1, #0
 80006b0:	4814      	ldr	r0, [pc, #80]	; (8000704 <MX_FREERTOS_Init+0x7c>)
 80006b2:	f007 f9a9 	bl	8007a08 <osThreadNew>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a13      	ldr	r2, [pc, #76]	; (8000708 <MX_FREERTOS_Init+0x80>)
 80006ba:	6013      	str	r3, [r2, #0]

  /* creation of Blinker1 */
  Blinker1Handle = osThreadNew(StartBlinker1, NULL, &Blinker1_attributes);
 80006bc:	4a13      	ldr	r2, [pc, #76]	; (800070c <MX_FREERTOS_Init+0x84>)
 80006be:	2100      	movs	r1, #0
 80006c0:	4813      	ldr	r0, [pc, #76]	; (8000710 <MX_FREERTOS_Init+0x88>)
 80006c2:	f007 f9a1 	bl	8007a08 <osThreadNew>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_FREERTOS_Init+0x8c>)
 80006ca:	6013      	str	r3, [r2, #0]

  /* creation of Blinker2 */
  Blinker2Handle = osThreadNew(StartBlinker2, NULL, &Blinker2_attributes);
 80006cc:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_FREERTOS_Init+0x90>)
 80006ce:	2100      	movs	r1, #0
 80006d0:	4812      	ldr	r0, [pc, #72]	; (800071c <MX_FREERTOS_Init+0x94>)
 80006d2:	f007 f999 	bl	8007a08 <osThreadNew>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4a11      	ldr	r2, [pc, #68]	; (8000720 <MX_FREERTOS_Init+0x98>)
 80006da:	6013      	str	r3, [r2, #0]

  /* creation of Blinker3 */
  Blinker3Handle = osThreadNew(StartBlinker3, NULL, &Blinker3_attributes);
 80006dc:	4a11      	ldr	r2, [pc, #68]	; (8000724 <MX_FREERTOS_Init+0x9c>)
 80006de:	2100      	movs	r1, #0
 80006e0:	4811      	ldr	r0, [pc, #68]	; (8000728 <MX_FREERTOS_Init+0xa0>)
 80006e2:	f007 f991 	bl	8007a08 <osThreadNew>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a10      	ldr	r2, [pc, #64]	; (800072c <MX_FREERTOS_Init+0xa4>)
 80006ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	0800b450 	.word	0x0800b450
 80006f4:	24004b00 	.word	0x24004b00
 80006f8:	0800b468 	.word	0x0800b468
 80006fc:	24004b04 	.word	0x24004b04
 8000700:	0800b3c0 	.word	0x0800b3c0
 8000704:	08000731 	.word	0x08000731
 8000708:	24004ae8 	.word	0x24004ae8
 800070c:	0800b3e4 	.word	0x0800b3e4
 8000710:	08000845 	.word	0x08000845
 8000714:	24004ae4 	.word	0x24004ae4
 8000718:	0800b408 	.word	0x0800b408
 800071c:	080008b9 	.word	0x080008b9
 8000720:	24004af8 	.word	0x24004af8
 8000724:	0800b42c 	.word	0x0800b42c
 8000728:	080008c9 	.word	0x080008c9
 800072c:	24004afc 	.word	0x24004afc

08000730 <StartCommandLine>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommandLine */
void StartCommandLine(void *argument)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b092      	sub	sp, #72	; 0x48
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandLine */
	uint8_t local_pointer = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	char* delay_ptr = NULL;
 800073e:	2300      	movs	r3, #0
 8000740:	643b      	str	r3, [r7, #64]	; 0x40
	uint16_t delay_len = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	87bb      	strh	r3, [r7, #60]	; 0x3c
	uint16_t total_blinks = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	877b      	strh	r3, [r7, #58]	; 0x3a
	/* Infinite loop */
	for(;;)
	{
		HAL_StatusTypeDef ret = HAL_UART_Receive(&huart3,(uint8_t*)rx_buffer ,1, 100);
 800074a:	2364      	movs	r3, #100	; 0x64
 800074c:	2201      	movs	r2, #1
 800074e:	4936      	ldr	r1, [pc, #216]	; (8000828 <StartCommandLine+0xf8>)
 8000750:	4836      	ldr	r0, [pc, #216]	; (800082c <StartCommandLine+0xfc>)
 8000752:	f004 fc7f 	bl	8005054 <HAL_UART_Receive>
 8000756:	4603      	mov	r3, r0
 8000758:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(ret == HAL_OK){
 800075c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000760:	2b00      	cmp	r3, #0
 8000762:	d144      	bne.n	80007ee <StartCommandLine+0xbe>
			HAL_UART_Transmit(&huart3, (uint8_t*)rx_buffer, 1, 100);
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2201      	movs	r2, #1
 8000768:	492f      	ldr	r1, [pc, #188]	; (8000828 <StartCommandLine+0xf8>)
 800076a:	4830      	ldr	r0, [pc, #192]	; (800082c <StartCommandLine+0xfc>)
 800076c:	f004 fbdc 	bl	8004f28 <HAL_UART_Transmit>
			local_buffer[local_pointer] = rx_buffer[0];
 8000770:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000774:	4a2c      	ldr	r2, [pc, #176]	; (8000828 <StartCommandLine+0xf8>)
 8000776:	7811      	ldrb	r1, [r2, #0]
 8000778:	4a2d      	ldr	r2, [pc, #180]	; (8000830 <StartCommandLine+0x100>)
 800077a:	54d1      	strb	r1, [r2, r3]
			if(local_buffer[local_pointer] == '\n' || local_buffer[local_pointer] == '\r'){
 800077c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000780:	4a2b      	ldr	r2, [pc, #172]	; (8000830 <StartCommandLine+0x100>)
 8000782:	5cd3      	ldrb	r3, [r2, r3]
 8000784:	2b0a      	cmp	r3, #10
 8000786:	d005      	beq.n	8000794 <StartCommandLine+0x64>
 8000788:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800078c:	4a28      	ldr	r2, [pc, #160]	; (8000830 <StartCommandLine+0x100>)
 800078e:	5cd3      	ldrb	r3, [r2, r3]
 8000790:	2b0d      	cmp	r3, #13
 8000792:	d120      	bne.n	80007d6 <StartCommandLine+0xa6>
				delay_ptr = strstr(local_buffer, DELAY_TRIGGER_WORD);
 8000794:	4927      	ldr	r1, [pc, #156]	; (8000834 <StartCommandLine+0x104>)
 8000796:	4826      	ldr	r0, [pc, #152]	; (8000830 <StartCommandLine+0x100>)
 8000798:	f00a f98a 	bl	800aab0 <strstr>
 800079c:	6438      	str	r0, [r7, #64]	; 0x40
				if (delay_ptr != NULL) {
 800079e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d024      	beq.n	80007ee <StartCommandLine+0xbe>
					delay_len = atoi(delay_ptr + 5);
 80007a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007a6:	3305      	adds	r3, #5
 80007a8:	4618      	mov	r0, r3
 80007aa:	f00a f847 	bl	800a83c <atoi>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
					osMessageQueuePut(CommandsToBlinkHandle, &delay_len, 0, 0);
 80007b4:	4b20      	ldr	r3, [pc, #128]	; (8000838 <StartCommandLine+0x108>)
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80007bc:	2300      	movs	r3, #0
 80007be:	2200      	movs	r2, #0
 80007c0:	f007 fa42 	bl	8007c48 <osMessageQueuePut>
					memset(local_buffer,0,RX_BUFFER_LENGTH);
 80007c4:	2264      	movs	r2, #100	; 0x64
 80007c6:	2100      	movs	r1, #0
 80007c8:	4819      	ldr	r0, [pc, #100]	; (8000830 <StartCommandLine+0x100>)
 80007ca:	f00a f875 	bl	800a8b8 <memset>
					local_pointer = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (delay_ptr != NULL) {
 80007d4:	e00b      	b.n	80007ee <StartCommandLine+0xbe>
				}
			}else{
				local_pointer++;
 80007d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007da:	3301      	adds	r3, #1
 80007dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if(local_pointer > RX_BUFFER_LENGTH){
 80007e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007e4:	2b64      	cmp	r3, #100	; 0x64
 80007e6:	d902      	bls.n	80007ee <StartCommandLine+0xbe>
					local_pointer = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		if (osOK == osMessageQueueGet(times_blinkedHandle, &total_blinks, NULL , 0)) {
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <StartCommandLine+0x10c>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 80007f6:	2300      	movs	r3, #0
 80007f8:	2200      	movs	r2, #0
 80007fa:	f007 fa85 	bl	8007d08 <osMessageQueueGet>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d10d      	bne.n	8000820 <StartCommandLine+0xf0>
			char tx_buffer[50];
			uint8_t tx_len =0;
 8000804:	2300      	movs	r3, #0
 8000806:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			tx_len  = sprintf(tx_buffer,"total blinks: %d\n\r",total_blinks);
 800080a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800080c:	461a      	mov	r2, r3
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	490b      	ldr	r1, [pc, #44]	; (8000840 <StartCommandLine+0x110>)
 8000814:	4618      	mov	r0, r3
 8000816:	f00a f92b 	bl	800aa70 <siprintf>
 800081a:	4603      	mov	r3, r0
 800081c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			//HAL_UART_Transmit(&huart3, (uint8_t*)tx_buffer,tx_len , 100);
		}
		osDelay(10);
 8000820:	200a      	movs	r0, #10
 8000822:	f007 f983 	bl	8007b2c <osDelay>
	{
 8000826:	e790      	b.n	800074a <StartCommandLine+0x1a>
 8000828:	24004aec 	.word	0x24004aec
 800082c:	24004b54 	.word	0x24004b54
 8000830:	24004a7c 	.word	0x24004a7c
 8000834:	0800b38c 	.word	0x0800b38c
 8000838:	24004b00 	.word	0x24004b00
 800083c:	24004b04 	.word	0x24004b04
 8000840:	0800b394 	.word	0x0800b394

08000844 <StartBlinker1>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker1 */
void StartBlinker1(void *argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker1 */
	uint16_t blink_rate = 1000;
 800084c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000850:	81fb      	strh	r3, [r7, #14]
	uint16_t blinks = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	81bb      	strh	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		osMessageQueueGet(CommandsToBlinkHandle,&blink_rate , NULL, 0);
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <StartBlinker1+0x64>)
 8000858:	6818      	ldr	r0, [r3, #0]
 800085a:	f107 010e 	add.w	r1, r7, #14
 800085e:	2300      	movs	r3, #0
 8000860:	2200      	movs	r2, #0
 8000862:	f007 fa51 	bl	8007d08 <osMessageQueueGet>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000866:	2101      	movs	r1, #1
 8000868:	4810      	ldr	r0, [pc, #64]	; (80008ac <StartBlinker1+0x68>)
 800086a:	f001 fcbe 	bl	80021ea <HAL_GPIO_TogglePin>
		blinks++;
 800086e:	89bb      	ldrh	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	b29b      	uxth	r3, r3
 8000874:	81bb      	strh	r3, [r7, #12]
		if (blinks%100 == 0) {
 8000876:	89bb      	ldrh	r3, [r7, #12]
 8000878:	4a0d      	ldr	r2, [pc, #52]	; (80008b0 <StartBlinker1+0x6c>)
 800087a:	fba2 1203 	umull	r1, r2, r2, r3
 800087e:	0952      	lsrs	r2, r2, #5
 8000880:	2164      	movs	r1, #100	; 0x64
 8000882:	fb01 f202 	mul.w	r2, r1, r2
 8000886:	1a9b      	subs	r3, r3, r2
 8000888:	b29b      	uxth	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	d107      	bne.n	800089e <StartBlinker1+0x5a>
			osMessageQueuePut(times_blinkedHandle, &blinks , NULL, 0);
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <StartBlinker1+0x70>)
 8000890:	6818      	ldr	r0, [r3, #0]
 8000892:	f107 010c 	add.w	r1, r7, #12
 8000896:	2300      	movs	r3, #0
 8000898:	2200      	movs	r2, #0
 800089a:	f007 f9d5 	bl	8007c48 <osMessageQueuePut>
		}
		osDelay(blink_rate);
 800089e:	89fb      	ldrh	r3, [r7, #14]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f007 f943 	bl	8007b2c <osDelay>
		osMessageQueueGet(CommandsToBlinkHandle,&blink_rate , NULL, 0);
 80008a6:	e7d6      	b.n	8000856 <StartBlinker1+0x12>
 80008a8:	24004b00 	.word	0x24004b00
 80008ac:	58020400 	.word	0x58020400
 80008b0:	51eb851f 	.word	0x51eb851f
 80008b4:	24004b04 	.word	0x24004b04

080008b8 <StartBlinker2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker2 */
void StartBlinker2(void *argument)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker2 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f007 f933 	bl	8007b2c <osDelay>
 80008c6:	e7fb      	b.n	80008c0 <StartBlinker2+0x8>

080008c8 <StartBlinker3>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker3 */
void StartBlinker3(void *argument)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker3 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80008d0:	2001      	movs	r0, #1
 80008d2:	f007 f92b 	bl	8007b2c <osDelay>
 80008d6:	e7fb      	b.n	80008d0 <StartBlinker3+0x8>

080008d8 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08e      	sub	sp, #56	; 0x38
 80008dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b80      	ldr	r3, [pc, #512]	; (8000af0 <MX_GPIO_Init+0x218>)
 80008f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f4:	4a7e      	ldr	r2, [pc, #504]	; (8000af0 <MX_GPIO_Init+0x218>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008fe:	4b7c      	ldr	r3, [pc, #496]	; (8000af0 <MX_GPIO_Init+0x218>)
 8000900:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	623b      	str	r3, [r7, #32]
 800090a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090c:	4b78      	ldr	r3, [pc, #480]	; (8000af0 <MX_GPIO_Init+0x218>)
 800090e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000912:	4a77      	ldr	r2, [pc, #476]	; (8000af0 <MX_GPIO_Init+0x218>)
 8000914:	f043 0320 	orr.w	r3, r3, #32
 8000918:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800091c:	4b74      	ldr	r3, [pc, #464]	; (8000af0 <MX_GPIO_Init+0x218>)
 800091e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000922:	f003 0320 	and.w	r3, r3, #32
 8000926:	61fb      	str	r3, [r7, #28]
 8000928:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	4b71      	ldr	r3, [pc, #452]	; (8000af0 <MX_GPIO_Init+0x218>)
 800092c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000930:	4a6f      	ldr	r2, [pc, #444]	; (8000af0 <MX_GPIO_Init+0x218>)
 8000932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000936:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800093a:	4b6d      	ldr	r3, [pc, #436]	; (8000af0 <MX_GPIO_Init+0x218>)
 800093c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000944:	61bb      	str	r3, [r7, #24]
 8000946:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000948:	4b69      	ldr	r3, [pc, #420]	; (8000af0 <MX_GPIO_Init+0x218>)
 800094a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800094e:	4a68      	ldr	r2, [pc, #416]	; (8000af0 <MX_GPIO_Init+0x218>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000958:	4b65      	ldr	r3, [pc, #404]	; (8000af0 <MX_GPIO_Init+0x218>)
 800095a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000966:	4b62      	ldr	r3, [pc, #392]	; (8000af0 <MX_GPIO_Init+0x218>)
 8000968:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800096c:	4a60      	ldr	r2, [pc, #384]	; (8000af0 <MX_GPIO_Init+0x218>)
 800096e:	f043 0308 	orr.w	r3, r3, #8
 8000972:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000976:	4b5e      	ldr	r3, [pc, #376]	; (8000af0 <MX_GPIO_Init+0x218>)
 8000978:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800097c:	f003 0308 	and.w	r3, r3, #8
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000984:	4b5a      	ldr	r3, [pc, #360]	; (8000af0 <MX_GPIO_Init+0x218>)
 8000986:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800098a:	4a59      	ldr	r2, [pc, #356]	; (8000af0 <MX_GPIO_Init+0x218>)
 800098c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000990:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000994:	4b56      	ldr	r3, [pc, #344]	; (8000af0 <MX_GPIO_Init+0x218>)
 8000996:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800099a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b53      	ldr	r3, [pc, #332]	; (8000af0 <MX_GPIO_Init+0x218>)
 80009a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009a8:	4a51      	ldr	r2, [pc, #324]	; (8000af0 <MX_GPIO_Init+0x218>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009b2:	4b4f      	ldr	r3, [pc, #316]	; (8000af0 <MX_GPIO_Init+0x218>)
 80009b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009c0:	4b4b      	ldr	r3, [pc, #300]	; (8000af0 <MX_GPIO_Init+0x218>)
 80009c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009c6:	4a4a      	ldr	r2, [pc, #296]	; (8000af0 <MX_GPIO_Init+0x218>)
 80009c8:	f043 0310 	orr.w	r3, r3, #16
 80009cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009d0:	4b47      	ldr	r3, [pc, #284]	; (8000af0 <MX_GPIO_Init+0x218>)
 80009d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009d6:	f003 0310 	and.w	r3, r3, #16
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e4:	4843      	ldr	r0, [pc, #268]	; (8000af4 <MX_GPIO_Init+0x21c>)
 80009e6:	f001 fbe7 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f244 0101 	movw	r1, #16385	; 0x4001
 80009f0:	4841      	ldr	r0, [pc, #260]	; (8000af8 <MX_GPIO_Init+0x220>)
 80009f2:	f001 fbe1 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2102      	movs	r1, #2
 80009fa:	4840      	ldr	r0, [pc, #256]	; (8000afc <MX_GPIO_Init+0x224>)
 80009fc:	f001 fbdc 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a12:	4619      	mov	r1, r3
 8000a14:	483a      	ldr	r0, [pc, #232]	; (8000b00 <MX_GPIO_Init+0x228>)
 8000a16:	f001 fa1f 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4830      	ldr	r0, [pc, #192]	; (8000af4 <MX_GPIO_Init+0x21c>)
 8000a34:	f001 fa10 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a38:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4829      	ldr	r0, [pc, #164]	; (8000af8 <MX_GPIO_Init+0x220>)
 8000a52:	f001 fa01 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4826      	ldr	r0, [pc, #152]	; (8000b04 <MX_GPIO_Init+0x22c>)
 8000a6c:	f001 f9f4 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	4820      	ldr	r0, [pc, #128]	; (8000b08 <MX_GPIO_Init+0x230>)
 8000a86:	f001 f9e7 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a9c:	230a      	movs	r3, #10
 8000a9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4818      	ldr	r0, [pc, #96]	; (8000b08 <MX_GPIO_Init+0x230>)
 8000aa8:	f001 f9d6 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000aac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4810      	ldr	r0, [pc, #64]	; (8000b08 <MX_GPIO_Init+0x230>)
 8000ac6:	f001 f9c7 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aca:	2302      	movs	r3, #2
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4806      	ldr	r0, [pc, #24]	; (8000afc <MX_GPIO_Init+0x224>)
 8000ae2:	f001 f9b9 	bl	8001e58 <HAL_GPIO_Init>

}
 8000ae6:	bf00      	nop
 8000ae8:	3738      	adds	r7, #56	; 0x38
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	58024400 	.word	0x58024400
 8000af4:	58021400 	.word	0x58021400
 8000af8:	58020400 	.word	0x58020400
 8000afc:	58021000 	.word	0x58021000
 8000b00:	58020800 	.word	0x58020800
 8000b04:	58021800 	.word	0x58021800
 8000b08:	58020000 	.word	0x58020000

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b10:	f000 fb04 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b14:	f000 f816 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b18:	f7ff fede 	bl	80008d8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b1c:	f000 f9fa 	bl	8000f14 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000b20:	f000 faca 	bl	80010b8 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT (&huart3, UART3_rxBuffer, 1);
 8000b24:	2201      	movs	r2, #1
 8000b26:	4905      	ldr	r1, [pc, #20]	; (8000b3c <main+0x30>)
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <main+0x34>)
 8000b2a:	f004 fb67 	bl	80051fc <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000b2e:	f006 ff21 	bl	8007974 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000b32:	f7ff fda9 	bl	8000688 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000b36:	f006 ff41 	bl	80079bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <main+0x2e>
 8000b3c:	24000094 	.word	0x24000094
 8000b40:	24004b54 	.word	0x24004b54

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b09c      	sub	sp, #112	; 0x70
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	224c      	movs	r2, #76	; 0x4c
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f009 feb0 	bl	800a8b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2220      	movs	r2, #32
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f009 feaa 	bl	800a8b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b64:	2004      	movs	r0, #4
 8000b66:	f001 fb5b 	bl	8002220 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	4b2b      	ldr	r3, [pc, #172]	; (8000c1c <SystemClock_Config+0xd8>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	4a2a      	ldr	r2, [pc, #168]	; (8000c1c <SystemClock_Config+0xd8>)
 8000b74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b78:	6193      	str	r3, [r2, #24]
 8000b7a:	4b28      	ldr	r3, [pc, #160]	; (8000c1c <SystemClock_Config+0xd8>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b86:	bf00      	nop
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <SystemClock_Config+0xd8>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b94:	d1f8      	bne.n	8000b88 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b96:	2321      	movs	r3, #33	; 0x21
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b9a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000bb0:	2318      	movs	r3, #24
 8000bb2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 fb7f 	bl	80022d4 <HAL_RCC_OscConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000bdc:	f000 f832 	bl	8000c44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be0:	233f      	movs	r3, #63	; 0x3f
 8000be2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be4:	2303      	movs	r3, #3
 8000be6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2102      	movs	r1, #2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f001 ff69 	bl	8002adc <HAL_RCC_ClockConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000c10:	f000 f818 	bl	8000c44 <Error_Handler>
  }
}
 8000c14:	bf00      	nop
 8000c16:	3770      	adds	r7, #112	; 0x70
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	58024800 	.word	0x58024800

08000c20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d101      	bne.n	8000c36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c32:	f000 faaf 	bl	8001194 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40001400 	.word	0x40001400

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <Error_Handler+0x8>
	...

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <HAL_MspInit+0x38>)
 8000c58:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_MspInit+0x38>)
 8000c5e:	f043 0302 	orr.w	r3, r3, #2
 8000c62:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_MspInit+0x38>)
 8000c68:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	210f      	movs	r1, #15
 8000c78:	f06f 0001 	mvn.w	r0, #1
 8000c7c:	f000 fb62 	bl	8001344 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	58024400 	.word	0x58024400

08000c8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b090      	sub	sp, #64	; 0x40
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b0f      	cmp	r3, #15
 8000c98:	d827      	bhi.n	8000cea <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	2037      	movs	r0, #55	; 0x37
 8000ca0:	f000 fb50 	bl	8001344 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000ca4:	2037      	movs	r0, #55	; 0x37
 8000ca6:	f000 fb67 	bl	8001378 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000caa:	4a29      	ldr	r2, [pc, #164]	; (8000d50 <HAL_InitTick+0xc4>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000cb0:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <HAL_InitTick+0xc8>)
 8000cb2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000cb6:	4a27      	ldr	r2, [pc, #156]	; (8000d54 <HAL_InitTick+0xc8>)
 8000cb8:	f043 0320 	orr.w	r3, r3, #32
 8000cbc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000cc0:	4b24      	ldr	r3, [pc, #144]	; (8000d54 <HAL_InitTick+0xc8>)
 8000cc2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000cc6:	f003 0320 	and.w	r3, r3, #32
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cce:	f107 0210 	add.w	r2, r7, #16
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f002 fa8b 	bl	80031f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d106      	bne.n	8000cf6 <HAL_InitTick+0x6a>
 8000ce8:	e001      	b.n	8000cee <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e02b      	b.n	8000d46 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cee:	f002 fa55 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8000cf2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000cf4:	e004      	b.n	8000d00 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cf6:	f002 fa51 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d02:	4a15      	ldr	r2, [pc, #84]	; (8000d58 <HAL_InitTick+0xcc>)
 8000d04:	fba2 2303 	umull	r2, r3, r2, r3
 8000d08:	0c9b      	lsrs	r3, r3, #18
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <HAL_InitTick+0xd0>)
 8000d10:	4a13      	ldr	r2, [pc, #76]	; (8000d60 <HAL_InitTick+0xd4>)
 8000d12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_InitTick+0xd0>)
 8000d16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d1a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000d1c:	4a0f      	ldr	r2, [pc, #60]	; (8000d5c <HAL_InitTick+0xd0>)
 8000d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d20:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <HAL_InitTick+0xd0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_InitTick+0xd0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000d2e:	480b      	ldr	r0, [pc, #44]	; (8000d5c <HAL_InitTick+0xd0>)
 8000d30:	f003 fdd0 	bl	80048d4 <HAL_TIM_Base_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d104      	bne.n	8000d44 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000d3a:	4808      	ldr	r0, [pc, #32]	; (8000d5c <HAL_InitTick+0xd0>)
 8000d3c:	f003 fe2c 	bl	8004998 <HAL_TIM_Base_Start_IT>
 8000d40:	4603      	mov	r3, r0
 8000d42:	e000      	b.n	8000d46 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3740      	adds	r7, #64	; 0x40
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	24000008 	.word	0x24000008
 8000d54:	58024400 	.word	0x58024400
 8000d58:	431bde83 	.word	0x431bde83
 8000d5c:	24004b08 	.word	0x24004b08
 8000d60:	40001400 	.word	0x40001400

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <NMI_Handler+0x4>

08000d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <MemManage_Handler+0x4>

08000d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <USART3_IRQHandler+0x10>)
 8000d96:	f004 fa87 	bl	80052a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	24004b54 	.word	0x24004b54

08000da4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <TIM7_IRQHandler+0x10>)
 8000daa:	f003 fe6d 	bl	8004a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	24004b08 	.word	0x24004b08

08000db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <_sbrk+0x5c>)
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <_sbrk+0x60>)
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <_sbrk+0x64>)
 8000dd6:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <_sbrk+0x68>)
 8000dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d207      	bcs.n	8000df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de8:	f009 fd2c 	bl	800a844 <__errno>
 8000dec:	4603      	mov	r3, r0
 8000dee:	220c      	movs	r2, #12
 8000df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000df6:	e009      	b.n	8000e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <_sbrk+0x64>)
 8000e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	24100000 	.word	0x24100000
 8000e18:	00000400 	.word	0x00000400
 8000e1c:	240000a0 	.word	0x240000a0
 8000e20:	24004c38 	.word	0x24004c38

08000e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e28:	4b32      	ldr	r3, [pc, #200]	; (8000ef4 <SystemInit+0xd0>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a31      	ldr	r2, [pc, #196]	; (8000ef4 <SystemInit+0xd0>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e38:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <SystemInit+0xd4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 030f 	and.w	r3, r3, #15
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d807      	bhi.n	8000e54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e44:	4b2c      	ldr	r3, [pc, #176]	; (8000ef8 <SystemInit+0xd4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f023 030f 	bic.w	r3, r3, #15
 8000e4c:	4a2a      	ldr	r2, [pc, #168]	; (8000ef8 <SystemInit+0xd4>)
 8000e4e:	f043 0303 	orr.w	r3, r3, #3
 8000e52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e54:	4b29      	ldr	r3, [pc, #164]	; (8000efc <SystemInit+0xd8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a28      	ldr	r2, [pc, #160]	; (8000efc <SystemInit+0xd8>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e60:	4b26      	ldr	r3, [pc, #152]	; (8000efc <SystemInit+0xd8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e66:	4b25      	ldr	r3, [pc, #148]	; (8000efc <SystemInit+0xd8>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4924      	ldr	r1, [pc, #144]	; (8000efc <SystemInit+0xd8>)
 8000e6c:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <SystemInit+0xdc>)
 8000e6e:	4013      	ands	r3, r2
 8000e70:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e72:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <SystemInit+0xd4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 030c 	and.w	r3, r3, #12
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d007      	beq.n	8000e8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <SystemInit+0xd4>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f023 030f 	bic.w	r3, r3, #15
 8000e86:	4a1c      	ldr	r2, [pc, #112]	; (8000ef8 <SystemInit+0xd4>)
 8000e88:	f043 0303 	orr.w	r3, r3, #3
 8000e8c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <SystemInit+0xd8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <SystemInit+0xd8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <SystemInit+0xd8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <SystemInit+0xd8>)
 8000ea2:	4a18      	ldr	r2, [pc, #96]	; (8000f04 <SystemInit+0xe0>)
 8000ea4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <SystemInit+0xd8>)
 8000ea8:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <SystemInit+0xe4>)
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <SystemInit+0xd8>)
 8000eae:	4a17      	ldr	r2, [pc, #92]	; (8000f0c <SystemInit+0xe8>)
 8000eb0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <SystemInit+0xd8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000eb8:	4b10      	ldr	r3, [pc, #64]	; (8000efc <SystemInit+0xd8>)
 8000eba:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <SystemInit+0xe8>)
 8000ebc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <SystemInit+0xd8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <SystemInit+0xd8>)
 8000ec6:	4a11      	ldr	r2, [pc, #68]	; (8000f0c <SystemInit+0xe8>)
 8000ec8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <SystemInit+0xd8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <SystemInit+0xd8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a09      	ldr	r2, [pc, #36]	; (8000efc <SystemInit+0xd8>)
 8000ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <SystemInit+0xd8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <SystemInit+0xec>)
 8000ee4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ee8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00
 8000ef8:	52002000 	.word	0x52002000
 8000efc:	58024400 	.word	0x58024400
 8000f00:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f04:	02020200 	.word	0x02020200
 8000f08:	01ff0000 	.word	0x01ff0000
 8000f0c:	01010280 	.word	0x01010280
 8000f10:	52004000 	.word	0x52004000

08000f14 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f1a:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <MX_USART3_UART_Init+0x94>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f5c:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f5e:	f003 ff93 	bl	8004e88 <HAL_UART_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f68:	f7ff fe6c 	bl	8000c44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f70:	f006 fbf1 	bl	8007756 <HAL_UARTEx_SetTxFifoThreshold>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f7a:	f7ff fe63 	bl	8000c44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f82:	f006 fc26 	bl	80077d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f8c:	f7ff fe5a 	bl	8000c44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f92:	f006 fba7 	bl	80076e4 <HAL_UARTEx_DisableFifoMode>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f9c:	f7ff fe52 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	24004b54 	.word	0x24004b54
 8000fa8:	40004800 	.word	0x40004800

08000fac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b0b8      	sub	sp, #224	; 0xe0
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	22b8      	movs	r2, #184	; 0xb8
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f009 fc73 	bl	800a8b8 <memset>
  if(uartHandle->Instance==USART3)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a29      	ldr	r2, [pc, #164]	; (800107c <HAL_UART_MspInit+0xd0>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d14a      	bne.n	8001072 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 f944 	bl	8003278 <HAL_RCCEx_PeriphCLKConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ff6:	f7ff fe25 	bl	8000c44 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <HAL_UART_MspInit+0xd4>)
 8000ffc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001000:	4a1f      	ldr	r2, [pc, #124]	; (8001080 <HAL_UART_MspInit+0xd4>)
 8001002:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001006:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <HAL_UART_MspInit+0xd4>)
 800100c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001010:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <HAL_UART_MspInit+0xd4>)
 800101a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800101e:	4a18      	ldr	r2, [pc, #96]	; (8001080 <HAL_UART_MspInit+0xd4>)
 8001020:	f043 0308 	orr.w	r3, r3, #8
 8001024:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_UART_MspInit+0xd4>)
 800102a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001036:	f44f 7340 	mov.w	r3, #768	; 0x300
 800103a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001050:	2307      	movs	r3, #7
 8001052:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001056:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800105a:	4619      	mov	r1, r3
 800105c:	4809      	ldr	r0, [pc, #36]	; (8001084 <HAL_UART_MspInit+0xd8>)
 800105e:	f000 fefb 	bl	8001e58 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2105      	movs	r1, #5
 8001066:	2027      	movs	r0, #39	; 0x27
 8001068:	f000 f96c 	bl	8001344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800106c:	2027      	movs	r0, #39	; 0x27
 800106e:	f000 f983 	bl	8001378 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001072:	bf00      	nop
 8001074:	37e0      	adds	r7, #224	; 0xe0
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40004800 	.word	0x40004800
 8001080:	58024400 	.word	0x58024400
 8001084:	58020c00 	.word	0x58020c00

08001088 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, UART3_rxBuffer, 1, 100);
 8001090:	2364      	movs	r3, #100	; 0x64
 8001092:	2201      	movs	r2, #1
 8001094:	4906      	ldr	r1, [pc, #24]	; (80010b0 <HAL_UART_RxCpltCallback+0x28>)
 8001096:	4807      	ldr	r0, [pc, #28]	; (80010b4 <HAL_UART_RxCpltCallback+0x2c>)
 8001098:	f003 ff46 	bl	8004f28 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart3, UART3_rxBuffer, 1);
 800109c:	2201      	movs	r2, #1
 800109e:	4904      	ldr	r1, [pc, #16]	; (80010b0 <HAL_UART_RxCpltCallback+0x28>)
 80010a0:	4804      	ldr	r0, [pc, #16]	; (80010b4 <HAL_UART_RxCpltCallback+0x2c>)
 80010a2:	f004 f8ab 	bl	80051fc <HAL_UART_Receive_IT>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	24000094 	.word	0x24000094
 80010b4:	24004b54 	.word	0x24004b54

080010b8 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001100 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010cc:	f7ff feaa 	bl	8000e24 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010d2:	490d      	ldr	r1, [pc, #52]	; (8001108 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010d4:	4a0d      	ldr	r2, [pc, #52]	; (800110c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010e8:	4c0a      	ldr	r4, [pc, #40]	; (8001114 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010f6:	f009 fbab 	bl	800a850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fa:	f7ff fd07 	bl	8000b0c <main>
  bx  lr
 80010fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001100:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001104:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001108:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 800110c:	0800b65c 	.word	0x0800b65c
  ldr r2, =_sbss
 8001110:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001114:	24004c38 	.word	0x24004c38

08001118 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC_IRQHandler>
	...

0800111c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001122:	2003      	movs	r0, #3
 8001124:	f000 f903 	bl	800132e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001128:	f001 fe8e 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 800112c:	4602      	mov	r2, r0
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_Init+0x68>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	0a1b      	lsrs	r3, r3, #8
 8001134:	f003 030f 	and.w	r3, r3, #15
 8001138:	4913      	ldr	r1, [pc, #76]	; (8001188 <HAL_Init+0x6c>)
 800113a:	5ccb      	ldrb	r3, [r1, r3]
 800113c:	f003 031f 	and.w	r3, r3, #31
 8001140:	fa22 f303 	lsr.w	r3, r2, r3
 8001144:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_Init+0x68>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <HAL_Init+0x6c>)
 8001150:	5cd3      	ldrb	r3, [r2, r3]
 8001152:	f003 031f 	and.w	r3, r3, #31
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	fa22 f303 	lsr.w	r3, r2, r3
 800115c:	4a0b      	ldr	r2, [pc, #44]	; (800118c <HAL_Init+0x70>)
 800115e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001160:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <HAL_Init+0x74>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001166:	200f      	movs	r0, #15
 8001168:	f7ff fd90 	bl	8000c8c <HAL_InitTick>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e002      	b.n	800117c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001176:	f7ff fd6b 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	58024400 	.word	0x58024400
 8001188:	0800b480 	.word	0x0800b480
 800118c:	24000004 	.word	0x24000004
 8001190:	24000000 	.word	0x24000000

08001194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x20>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x24>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <HAL_IncTick+0x24>)
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	2400000c 	.word	0x2400000c
 80011b8:	24004be4 	.word	0x24004be4

080011bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <HAL_GetTick+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	24004be4 	.word	0x24004be4

080011d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <__NVIC_SetPriorityGrouping+0x40>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <__NVIC_SetPriorityGrouping+0x40>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00
 8001218:	05fa0000 	.word	0x05fa0000

0800121c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001246:	2b00      	cmp	r3, #0
 8001248:	db0b      	blt.n	8001262 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	f003 021f 	and.w	r2, r3, #31
 8001250:	4907      	ldr	r1, [pc, #28]	; (8001270 <__NVIC_EnableIRQ+0x38>)
 8001252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001256:	095b      	lsrs	r3, r3, #5
 8001258:	2001      	movs	r0, #1
 800125a:	fa00 f202 	lsl.w	r2, r0, r2
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	; (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
         );
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff4c 	bl	80011d4 <__NVIC_SetPriorityGrouping>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001352:	f7ff ff63 	bl	800121c <__NVIC_GetPriorityGrouping>
 8001356:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	68b9      	ldr	r1, [r7, #8]
 800135c:	6978      	ldr	r0, [r7, #20]
 800135e:	f7ff ffb3 	bl	80012c8 <NVIC_EncodePriority>
 8001362:	4602      	mov	r2, r0
 8001364:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ff82 	bl	8001274 <__NVIC_SetPriority>
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff56 	bl	8001238 <__NVIC_EnableIRQ>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff ff0e 	bl	80011bc <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e2dc      	b.n	8001966 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d008      	beq.n	80013ca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e2cd      	b.n	8001966 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a76      	ldr	r2, [pc, #472]	; (80015a8 <HAL_DMA_Abort+0x214>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d04a      	beq.n	800146a <HAL_DMA_Abort+0xd6>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a74      	ldr	r2, [pc, #464]	; (80015ac <HAL_DMA_Abort+0x218>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d045      	beq.n	800146a <HAL_DMA_Abort+0xd6>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a73      	ldr	r2, [pc, #460]	; (80015b0 <HAL_DMA_Abort+0x21c>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d040      	beq.n	800146a <HAL_DMA_Abort+0xd6>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a71      	ldr	r2, [pc, #452]	; (80015b4 <HAL_DMA_Abort+0x220>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d03b      	beq.n	800146a <HAL_DMA_Abort+0xd6>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a70      	ldr	r2, [pc, #448]	; (80015b8 <HAL_DMA_Abort+0x224>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d036      	beq.n	800146a <HAL_DMA_Abort+0xd6>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a6e      	ldr	r2, [pc, #440]	; (80015bc <HAL_DMA_Abort+0x228>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d031      	beq.n	800146a <HAL_DMA_Abort+0xd6>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a6d      	ldr	r2, [pc, #436]	; (80015c0 <HAL_DMA_Abort+0x22c>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d02c      	beq.n	800146a <HAL_DMA_Abort+0xd6>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a6b      	ldr	r2, [pc, #428]	; (80015c4 <HAL_DMA_Abort+0x230>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d027      	beq.n	800146a <HAL_DMA_Abort+0xd6>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a6a      	ldr	r2, [pc, #424]	; (80015c8 <HAL_DMA_Abort+0x234>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d022      	beq.n	800146a <HAL_DMA_Abort+0xd6>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a68      	ldr	r2, [pc, #416]	; (80015cc <HAL_DMA_Abort+0x238>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d01d      	beq.n	800146a <HAL_DMA_Abort+0xd6>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a67      	ldr	r2, [pc, #412]	; (80015d0 <HAL_DMA_Abort+0x23c>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d018      	beq.n	800146a <HAL_DMA_Abort+0xd6>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a65      	ldr	r2, [pc, #404]	; (80015d4 <HAL_DMA_Abort+0x240>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_DMA_Abort+0xd6>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a64      	ldr	r2, [pc, #400]	; (80015d8 <HAL_DMA_Abort+0x244>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d00e      	beq.n	800146a <HAL_DMA_Abort+0xd6>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a62      	ldr	r2, [pc, #392]	; (80015dc <HAL_DMA_Abort+0x248>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d009      	beq.n	800146a <HAL_DMA_Abort+0xd6>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a61      	ldr	r2, [pc, #388]	; (80015e0 <HAL_DMA_Abort+0x24c>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d004      	beq.n	800146a <HAL_DMA_Abort+0xd6>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a5f      	ldr	r2, [pc, #380]	; (80015e4 <HAL_DMA_Abort+0x250>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d101      	bne.n	800146e <HAL_DMA_Abort+0xda>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_DMA_Abort+0xdc>
 800146e:	2300      	movs	r3, #0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d013      	beq.n	800149c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 021e 	bic.w	r2, r2, #30
 8001482:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001492:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e00a      	b.n	80014b2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 020e 	bic.w	r2, r2, #14
 80014aa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a3c      	ldr	r2, [pc, #240]	; (80015a8 <HAL_DMA_Abort+0x214>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d072      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a3a      	ldr	r2, [pc, #232]	; (80015ac <HAL_DMA_Abort+0x218>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d06d      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a39      	ldr	r2, [pc, #228]	; (80015b0 <HAL_DMA_Abort+0x21c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d068      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a37      	ldr	r2, [pc, #220]	; (80015b4 <HAL_DMA_Abort+0x220>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d063      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a36      	ldr	r2, [pc, #216]	; (80015b8 <HAL_DMA_Abort+0x224>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d05e      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a34      	ldr	r2, [pc, #208]	; (80015bc <HAL_DMA_Abort+0x228>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d059      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a33      	ldr	r2, [pc, #204]	; (80015c0 <HAL_DMA_Abort+0x22c>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d054      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a31      	ldr	r2, [pc, #196]	; (80015c4 <HAL_DMA_Abort+0x230>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d04f      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a30      	ldr	r2, [pc, #192]	; (80015c8 <HAL_DMA_Abort+0x234>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d04a      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a2e      	ldr	r2, [pc, #184]	; (80015cc <HAL_DMA_Abort+0x238>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d045      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a2d      	ldr	r2, [pc, #180]	; (80015d0 <HAL_DMA_Abort+0x23c>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d040      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a2b      	ldr	r2, [pc, #172]	; (80015d4 <HAL_DMA_Abort+0x240>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d03b      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a2a      	ldr	r2, [pc, #168]	; (80015d8 <HAL_DMA_Abort+0x244>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d036      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a28      	ldr	r2, [pc, #160]	; (80015dc <HAL_DMA_Abort+0x248>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d031      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <HAL_DMA_Abort+0x24c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d02c      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a25      	ldr	r2, [pc, #148]	; (80015e4 <HAL_DMA_Abort+0x250>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d027      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a24      	ldr	r2, [pc, #144]	; (80015e8 <HAL_DMA_Abort+0x254>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d022      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a22      	ldr	r2, [pc, #136]	; (80015ec <HAL_DMA_Abort+0x258>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d01d      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a21      	ldr	r2, [pc, #132]	; (80015f0 <HAL_DMA_Abort+0x25c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d018      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a1f      	ldr	r2, [pc, #124]	; (80015f4 <HAL_DMA_Abort+0x260>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d013      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a1e      	ldr	r2, [pc, #120]	; (80015f8 <HAL_DMA_Abort+0x264>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d00e      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a1c      	ldr	r2, [pc, #112]	; (80015fc <HAL_DMA_Abort+0x268>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d009      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <HAL_DMA_Abort+0x26c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d004      	beq.n	80015a2 <HAL_DMA_Abort+0x20e>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a19      	ldr	r2, [pc, #100]	; (8001604 <HAL_DMA_Abort+0x270>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d132      	bne.n	8001608 <HAL_DMA_Abort+0x274>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e031      	b.n	800160a <HAL_DMA_Abort+0x276>
 80015a6:	bf00      	nop
 80015a8:	40020010 	.word	0x40020010
 80015ac:	40020028 	.word	0x40020028
 80015b0:	40020040 	.word	0x40020040
 80015b4:	40020058 	.word	0x40020058
 80015b8:	40020070 	.word	0x40020070
 80015bc:	40020088 	.word	0x40020088
 80015c0:	400200a0 	.word	0x400200a0
 80015c4:	400200b8 	.word	0x400200b8
 80015c8:	40020410 	.word	0x40020410
 80015cc:	40020428 	.word	0x40020428
 80015d0:	40020440 	.word	0x40020440
 80015d4:	40020458 	.word	0x40020458
 80015d8:	40020470 	.word	0x40020470
 80015dc:	40020488 	.word	0x40020488
 80015e0:	400204a0 	.word	0x400204a0
 80015e4:	400204b8 	.word	0x400204b8
 80015e8:	58025408 	.word	0x58025408
 80015ec:	5802541c 	.word	0x5802541c
 80015f0:	58025430 	.word	0x58025430
 80015f4:	58025444 	.word	0x58025444
 80015f8:	58025458 	.word	0x58025458
 80015fc:	5802546c 	.word	0x5802546c
 8001600:	58025480 	.word	0x58025480
 8001604:	58025494 	.word	0x58025494
 8001608:	2300      	movs	r3, #0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d007      	beq.n	800161e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800161c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a6d      	ldr	r2, [pc, #436]	; (80017d8 <HAL_DMA_Abort+0x444>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d04a      	beq.n	80016be <HAL_DMA_Abort+0x32a>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a6b      	ldr	r2, [pc, #428]	; (80017dc <HAL_DMA_Abort+0x448>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d045      	beq.n	80016be <HAL_DMA_Abort+0x32a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a6a      	ldr	r2, [pc, #424]	; (80017e0 <HAL_DMA_Abort+0x44c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d040      	beq.n	80016be <HAL_DMA_Abort+0x32a>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a68      	ldr	r2, [pc, #416]	; (80017e4 <HAL_DMA_Abort+0x450>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d03b      	beq.n	80016be <HAL_DMA_Abort+0x32a>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a67      	ldr	r2, [pc, #412]	; (80017e8 <HAL_DMA_Abort+0x454>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d036      	beq.n	80016be <HAL_DMA_Abort+0x32a>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a65      	ldr	r2, [pc, #404]	; (80017ec <HAL_DMA_Abort+0x458>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d031      	beq.n	80016be <HAL_DMA_Abort+0x32a>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a64      	ldr	r2, [pc, #400]	; (80017f0 <HAL_DMA_Abort+0x45c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d02c      	beq.n	80016be <HAL_DMA_Abort+0x32a>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a62      	ldr	r2, [pc, #392]	; (80017f4 <HAL_DMA_Abort+0x460>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d027      	beq.n	80016be <HAL_DMA_Abort+0x32a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a61      	ldr	r2, [pc, #388]	; (80017f8 <HAL_DMA_Abort+0x464>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d022      	beq.n	80016be <HAL_DMA_Abort+0x32a>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a5f      	ldr	r2, [pc, #380]	; (80017fc <HAL_DMA_Abort+0x468>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d01d      	beq.n	80016be <HAL_DMA_Abort+0x32a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a5e      	ldr	r2, [pc, #376]	; (8001800 <HAL_DMA_Abort+0x46c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d018      	beq.n	80016be <HAL_DMA_Abort+0x32a>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a5c      	ldr	r2, [pc, #368]	; (8001804 <HAL_DMA_Abort+0x470>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <HAL_DMA_Abort+0x32a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a5b      	ldr	r2, [pc, #364]	; (8001808 <HAL_DMA_Abort+0x474>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d00e      	beq.n	80016be <HAL_DMA_Abort+0x32a>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a59      	ldr	r2, [pc, #356]	; (800180c <HAL_DMA_Abort+0x478>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d009      	beq.n	80016be <HAL_DMA_Abort+0x32a>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a58      	ldr	r2, [pc, #352]	; (8001810 <HAL_DMA_Abort+0x47c>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d004      	beq.n	80016be <HAL_DMA_Abort+0x32a>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a56      	ldr	r2, [pc, #344]	; (8001814 <HAL_DMA_Abort+0x480>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d108      	bne.n	80016d0 <HAL_DMA_Abort+0x33c>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0201 	bic.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e007      	b.n	80016e0 <HAL_DMA_Abort+0x34c>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80016e0:	e013      	b.n	800170a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016e2:	f7ff fd6b 	bl	80011bc <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d90c      	bls.n	800170a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2220      	movs	r2, #32
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2203      	movs	r2, #3
 80016fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e12d      	b.n	8001966 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1e5      	bne.n	80016e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a2f      	ldr	r2, [pc, #188]	; (80017d8 <HAL_DMA_Abort+0x444>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d04a      	beq.n	80017b6 <HAL_DMA_Abort+0x422>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a2d      	ldr	r2, [pc, #180]	; (80017dc <HAL_DMA_Abort+0x448>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d045      	beq.n	80017b6 <HAL_DMA_Abort+0x422>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a2c      	ldr	r2, [pc, #176]	; (80017e0 <HAL_DMA_Abort+0x44c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d040      	beq.n	80017b6 <HAL_DMA_Abort+0x422>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a2a      	ldr	r2, [pc, #168]	; (80017e4 <HAL_DMA_Abort+0x450>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d03b      	beq.n	80017b6 <HAL_DMA_Abort+0x422>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a29      	ldr	r2, [pc, #164]	; (80017e8 <HAL_DMA_Abort+0x454>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d036      	beq.n	80017b6 <HAL_DMA_Abort+0x422>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a27      	ldr	r2, [pc, #156]	; (80017ec <HAL_DMA_Abort+0x458>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d031      	beq.n	80017b6 <HAL_DMA_Abort+0x422>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a26      	ldr	r2, [pc, #152]	; (80017f0 <HAL_DMA_Abort+0x45c>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d02c      	beq.n	80017b6 <HAL_DMA_Abort+0x422>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a24      	ldr	r2, [pc, #144]	; (80017f4 <HAL_DMA_Abort+0x460>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d027      	beq.n	80017b6 <HAL_DMA_Abort+0x422>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a23      	ldr	r2, [pc, #140]	; (80017f8 <HAL_DMA_Abort+0x464>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d022      	beq.n	80017b6 <HAL_DMA_Abort+0x422>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a21      	ldr	r2, [pc, #132]	; (80017fc <HAL_DMA_Abort+0x468>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d01d      	beq.n	80017b6 <HAL_DMA_Abort+0x422>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a20      	ldr	r2, [pc, #128]	; (8001800 <HAL_DMA_Abort+0x46c>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d018      	beq.n	80017b6 <HAL_DMA_Abort+0x422>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a1e      	ldr	r2, [pc, #120]	; (8001804 <HAL_DMA_Abort+0x470>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d013      	beq.n	80017b6 <HAL_DMA_Abort+0x422>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1d      	ldr	r2, [pc, #116]	; (8001808 <HAL_DMA_Abort+0x474>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d00e      	beq.n	80017b6 <HAL_DMA_Abort+0x422>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a1b      	ldr	r2, [pc, #108]	; (800180c <HAL_DMA_Abort+0x478>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d009      	beq.n	80017b6 <HAL_DMA_Abort+0x422>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a1a      	ldr	r2, [pc, #104]	; (8001810 <HAL_DMA_Abort+0x47c>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d004      	beq.n	80017b6 <HAL_DMA_Abort+0x422>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a18      	ldr	r2, [pc, #96]	; (8001814 <HAL_DMA_Abort+0x480>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d101      	bne.n	80017ba <HAL_DMA_Abort+0x426>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <HAL_DMA_Abort+0x428>
 80017ba:	2300      	movs	r3, #0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d02b      	beq.n	8001818 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	223f      	movs	r2, #63	; 0x3f
 80017d0:	409a      	lsls	r2, r3
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	e02a      	b.n	800182e <HAL_DMA_Abort+0x49a>
 80017d8:	40020010 	.word	0x40020010
 80017dc:	40020028 	.word	0x40020028
 80017e0:	40020040 	.word	0x40020040
 80017e4:	40020058 	.word	0x40020058
 80017e8:	40020070 	.word	0x40020070
 80017ec:	40020088 	.word	0x40020088
 80017f0:	400200a0 	.word	0x400200a0
 80017f4:	400200b8 	.word	0x400200b8
 80017f8:	40020410 	.word	0x40020410
 80017fc:	40020428 	.word	0x40020428
 8001800:	40020440 	.word	0x40020440
 8001804:	40020458 	.word	0x40020458
 8001808:	40020470 	.word	0x40020470
 800180c:	40020488 	.word	0x40020488
 8001810:	400204a0 	.word	0x400204a0
 8001814:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001822:	f003 031f 	and.w	r3, r3, #31
 8001826:	2201      	movs	r2, #1
 8001828:	409a      	lsls	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a4f      	ldr	r2, [pc, #316]	; (8001970 <HAL_DMA_Abort+0x5dc>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d072      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a4d      	ldr	r2, [pc, #308]	; (8001974 <HAL_DMA_Abort+0x5e0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d06d      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a4c      	ldr	r2, [pc, #304]	; (8001978 <HAL_DMA_Abort+0x5e4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d068      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a4a      	ldr	r2, [pc, #296]	; (800197c <HAL_DMA_Abort+0x5e8>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d063      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a49      	ldr	r2, [pc, #292]	; (8001980 <HAL_DMA_Abort+0x5ec>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d05e      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a47      	ldr	r2, [pc, #284]	; (8001984 <HAL_DMA_Abort+0x5f0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d059      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a46      	ldr	r2, [pc, #280]	; (8001988 <HAL_DMA_Abort+0x5f4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d054      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a44      	ldr	r2, [pc, #272]	; (800198c <HAL_DMA_Abort+0x5f8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d04f      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a43      	ldr	r2, [pc, #268]	; (8001990 <HAL_DMA_Abort+0x5fc>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d04a      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a41      	ldr	r2, [pc, #260]	; (8001994 <HAL_DMA_Abort+0x600>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d045      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a40      	ldr	r2, [pc, #256]	; (8001998 <HAL_DMA_Abort+0x604>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d040      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a3e      	ldr	r2, [pc, #248]	; (800199c <HAL_DMA_Abort+0x608>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d03b      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a3d      	ldr	r2, [pc, #244]	; (80019a0 <HAL_DMA_Abort+0x60c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d036      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a3b      	ldr	r2, [pc, #236]	; (80019a4 <HAL_DMA_Abort+0x610>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d031      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a3a      	ldr	r2, [pc, #232]	; (80019a8 <HAL_DMA_Abort+0x614>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d02c      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a38      	ldr	r2, [pc, #224]	; (80019ac <HAL_DMA_Abort+0x618>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d027      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a37      	ldr	r2, [pc, #220]	; (80019b0 <HAL_DMA_Abort+0x61c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d022      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a35      	ldr	r2, [pc, #212]	; (80019b4 <HAL_DMA_Abort+0x620>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d01d      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a34      	ldr	r2, [pc, #208]	; (80019b8 <HAL_DMA_Abort+0x624>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d018      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a32      	ldr	r2, [pc, #200]	; (80019bc <HAL_DMA_Abort+0x628>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a31      	ldr	r2, [pc, #196]	; (80019c0 <HAL_DMA_Abort+0x62c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d00e      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2f      	ldr	r2, [pc, #188]	; (80019c4 <HAL_DMA_Abort+0x630>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d009      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a2e      	ldr	r2, [pc, #184]	; (80019c8 <HAL_DMA_Abort+0x634>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d004      	beq.n	800191e <HAL_DMA_Abort+0x58a>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2c      	ldr	r2, [pc, #176]	; (80019cc <HAL_DMA_Abort+0x638>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d101      	bne.n	8001922 <HAL_DMA_Abort+0x58e>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <HAL_DMA_Abort+0x590>
 8001922:	2300      	movs	r3, #0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d015      	beq.n	8001954 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001930:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00c      	beq.n	8001954 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001944:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001948:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001952:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40020010 	.word	0x40020010
 8001974:	40020028 	.word	0x40020028
 8001978:	40020040 	.word	0x40020040
 800197c:	40020058 	.word	0x40020058
 8001980:	40020070 	.word	0x40020070
 8001984:	40020088 	.word	0x40020088
 8001988:	400200a0 	.word	0x400200a0
 800198c:	400200b8 	.word	0x400200b8
 8001990:	40020410 	.word	0x40020410
 8001994:	40020428 	.word	0x40020428
 8001998:	40020440 	.word	0x40020440
 800199c:	40020458 	.word	0x40020458
 80019a0:	40020470 	.word	0x40020470
 80019a4:	40020488 	.word	0x40020488
 80019a8:	400204a0 	.word	0x400204a0
 80019ac:	400204b8 	.word	0x400204b8
 80019b0:	58025408 	.word	0x58025408
 80019b4:	5802541c 	.word	0x5802541c
 80019b8:	58025430 	.word	0x58025430
 80019bc:	58025444 	.word	0x58025444
 80019c0:	58025458 	.word	0x58025458
 80019c4:	5802546c 	.word	0x5802546c
 80019c8:	58025480 	.word	0x58025480
 80019cc:	58025494 	.word	0x58025494

080019d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e205      	b.n	8001dee <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d004      	beq.n	80019f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e1fa      	b.n	8001dee <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a8c      	ldr	r2, [pc, #560]	; (8001c30 <HAL_DMA_Abort_IT+0x260>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d04a      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a8b      	ldr	r2, [pc, #556]	; (8001c34 <HAL_DMA_Abort_IT+0x264>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d045      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a89      	ldr	r2, [pc, #548]	; (8001c38 <HAL_DMA_Abort_IT+0x268>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d040      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a88      	ldr	r2, [pc, #544]	; (8001c3c <HAL_DMA_Abort_IT+0x26c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d03b      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a86      	ldr	r2, [pc, #536]	; (8001c40 <HAL_DMA_Abort_IT+0x270>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d036      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a85      	ldr	r2, [pc, #532]	; (8001c44 <HAL_DMA_Abort_IT+0x274>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d031      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a83      	ldr	r2, [pc, #524]	; (8001c48 <HAL_DMA_Abort_IT+0x278>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d02c      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a82      	ldr	r2, [pc, #520]	; (8001c4c <HAL_DMA_Abort_IT+0x27c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d027      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a80      	ldr	r2, [pc, #512]	; (8001c50 <HAL_DMA_Abort_IT+0x280>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d022      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a7f      	ldr	r2, [pc, #508]	; (8001c54 <HAL_DMA_Abort_IT+0x284>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d01d      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a7d      	ldr	r2, [pc, #500]	; (8001c58 <HAL_DMA_Abort_IT+0x288>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d018      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a7c      	ldr	r2, [pc, #496]	; (8001c5c <HAL_DMA_Abort_IT+0x28c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d013      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a7a      	ldr	r2, [pc, #488]	; (8001c60 <HAL_DMA_Abort_IT+0x290>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00e      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a79      	ldr	r2, [pc, #484]	; (8001c64 <HAL_DMA_Abort_IT+0x294>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d009      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a77      	ldr	r2, [pc, #476]	; (8001c68 <HAL_DMA_Abort_IT+0x298>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d004      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a76      	ldr	r2, [pc, #472]	; (8001c6c <HAL_DMA_Abort_IT+0x29c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d101      	bne.n	8001a9c <HAL_DMA_Abort_IT+0xcc>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <HAL_DMA_Abort_IT+0xce>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d065      	beq.n	8001b6e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a60      	ldr	r2, [pc, #384]	; (8001c30 <HAL_DMA_Abort_IT+0x260>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d04a      	beq.n	8001b4a <HAL_DMA_Abort_IT+0x17a>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a5e      	ldr	r2, [pc, #376]	; (8001c34 <HAL_DMA_Abort_IT+0x264>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d045      	beq.n	8001b4a <HAL_DMA_Abort_IT+0x17a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a5d      	ldr	r2, [pc, #372]	; (8001c38 <HAL_DMA_Abort_IT+0x268>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d040      	beq.n	8001b4a <HAL_DMA_Abort_IT+0x17a>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a5b      	ldr	r2, [pc, #364]	; (8001c3c <HAL_DMA_Abort_IT+0x26c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d03b      	beq.n	8001b4a <HAL_DMA_Abort_IT+0x17a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a5a      	ldr	r2, [pc, #360]	; (8001c40 <HAL_DMA_Abort_IT+0x270>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d036      	beq.n	8001b4a <HAL_DMA_Abort_IT+0x17a>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a58      	ldr	r2, [pc, #352]	; (8001c44 <HAL_DMA_Abort_IT+0x274>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d031      	beq.n	8001b4a <HAL_DMA_Abort_IT+0x17a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a57      	ldr	r2, [pc, #348]	; (8001c48 <HAL_DMA_Abort_IT+0x278>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d02c      	beq.n	8001b4a <HAL_DMA_Abort_IT+0x17a>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a55      	ldr	r2, [pc, #340]	; (8001c4c <HAL_DMA_Abort_IT+0x27c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d027      	beq.n	8001b4a <HAL_DMA_Abort_IT+0x17a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a54      	ldr	r2, [pc, #336]	; (8001c50 <HAL_DMA_Abort_IT+0x280>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d022      	beq.n	8001b4a <HAL_DMA_Abort_IT+0x17a>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a52      	ldr	r2, [pc, #328]	; (8001c54 <HAL_DMA_Abort_IT+0x284>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d01d      	beq.n	8001b4a <HAL_DMA_Abort_IT+0x17a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a51      	ldr	r2, [pc, #324]	; (8001c58 <HAL_DMA_Abort_IT+0x288>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d018      	beq.n	8001b4a <HAL_DMA_Abort_IT+0x17a>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a4f      	ldr	r2, [pc, #316]	; (8001c5c <HAL_DMA_Abort_IT+0x28c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_DMA_Abort_IT+0x17a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a4e      	ldr	r2, [pc, #312]	; (8001c60 <HAL_DMA_Abort_IT+0x290>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d00e      	beq.n	8001b4a <HAL_DMA_Abort_IT+0x17a>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a4c      	ldr	r2, [pc, #304]	; (8001c64 <HAL_DMA_Abort_IT+0x294>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d009      	beq.n	8001b4a <HAL_DMA_Abort_IT+0x17a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a4b      	ldr	r2, [pc, #300]	; (8001c68 <HAL_DMA_Abort_IT+0x298>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d004      	beq.n	8001b4a <HAL_DMA_Abort_IT+0x17a>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a49      	ldr	r2, [pc, #292]	; (8001c6c <HAL_DMA_Abort_IT+0x29c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d108      	bne.n	8001b5c <HAL_DMA_Abort_IT+0x18c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0201 	bic.w	r2, r2, #1
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	e147      	b.n	8001dec <HAL_DMA_Abort_IT+0x41c>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	e13e      	b.n	8001dec <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 020e 	bic.w	r2, r2, #14
 8001b7c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a2b      	ldr	r2, [pc, #172]	; (8001c30 <HAL_DMA_Abort_IT+0x260>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d04a      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x24e>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a29      	ldr	r2, [pc, #164]	; (8001c34 <HAL_DMA_Abort_IT+0x264>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d045      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x24e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a28      	ldr	r2, [pc, #160]	; (8001c38 <HAL_DMA_Abort_IT+0x268>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d040      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x24e>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a26      	ldr	r2, [pc, #152]	; (8001c3c <HAL_DMA_Abort_IT+0x26c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d03b      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x24e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a25      	ldr	r2, [pc, #148]	; (8001c40 <HAL_DMA_Abort_IT+0x270>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d036      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x24e>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a23      	ldr	r2, [pc, #140]	; (8001c44 <HAL_DMA_Abort_IT+0x274>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d031      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x24e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a22      	ldr	r2, [pc, #136]	; (8001c48 <HAL_DMA_Abort_IT+0x278>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d02c      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x24e>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a20      	ldr	r2, [pc, #128]	; (8001c4c <HAL_DMA_Abort_IT+0x27c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d027      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x24e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <HAL_DMA_Abort_IT+0x280>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d022      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x24e>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <HAL_DMA_Abort_IT+0x284>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d01d      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x24e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <HAL_DMA_Abort_IT+0x288>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d018      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x24e>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1a      	ldr	r2, [pc, #104]	; (8001c5c <HAL_DMA_Abort_IT+0x28c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x24e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <HAL_DMA_Abort_IT+0x290>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d00e      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x24e>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <HAL_DMA_Abort_IT+0x294>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d009      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x24e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a16      	ldr	r2, [pc, #88]	; (8001c68 <HAL_DMA_Abort_IT+0x298>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d004      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x24e>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <HAL_DMA_Abort_IT+0x29c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d128      	bne.n	8001c70 <HAL_DMA_Abort_IT+0x2a0>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0201 	bic.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	e027      	b.n	8001c80 <HAL_DMA_Abort_IT+0x2b0>
 8001c30:	40020010 	.word	0x40020010
 8001c34:	40020028 	.word	0x40020028
 8001c38:	40020040 	.word	0x40020040
 8001c3c:	40020058 	.word	0x40020058
 8001c40:	40020070 	.word	0x40020070
 8001c44:	40020088 	.word	0x40020088
 8001c48:	400200a0 	.word	0x400200a0
 8001c4c:	400200b8 	.word	0x400200b8
 8001c50:	40020410 	.word	0x40020410
 8001c54:	40020428 	.word	0x40020428
 8001c58:	40020440 	.word	0x40020440
 8001c5c:	40020458 	.word	0x40020458
 8001c60:	40020470 	.word	0x40020470
 8001c64:	40020488 	.word	0x40020488
 8001c68:	400204a0 	.word	0x400204a0
 8001c6c:	400204b8 	.word	0x400204b8
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a5c      	ldr	r2, [pc, #368]	; (8001df8 <HAL_DMA_Abort_IT+0x428>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d072      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a5b      	ldr	r2, [pc, #364]	; (8001dfc <HAL_DMA_Abort_IT+0x42c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d06d      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a59      	ldr	r2, [pc, #356]	; (8001e00 <HAL_DMA_Abort_IT+0x430>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d068      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a58      	ldr	r2, [pc, #352]	; (8001e04 <HAL_DMA_Abort_IT+0x434>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d063      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a56      	ldr	r2, [pc, #344]	; (8001e08 <HAL_DMA_Abort_IT+0x438>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d05e      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a55      	ldr	r2, [pc, #340]	; (8001e0c <HAL_DMA_Abort_IT+0x43c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d059      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a53      	ldr	r2, [pc, #332]	; (8001e10 <HAL_DMA_Abort_IT+0x440>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d054      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a52      	ldr	r2, [pc, #328]	; (8001e14 <HAL_DMA_Abort_IT+0x444>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d04f      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a50      	ldr	r2, [pc, #320]	; (8001e18 <HAL_DMA_Abort_IT+0x448>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d04a      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a4f      	ldr	r2, [pc, #316]	; (8001e1c <HAL_DMA_Abort_IT+0x44c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d045      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a4d      	ldr	r2, [pc, #308]	; (8001e20 <HAL_DMA_Abort_IT+0x450>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d040      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a4c      	ldr	r2, [pc, #304]	; (8001e24 <HAL_DMA_Abort_IT+0x454>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d03b      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a4a      	ldr	r2, [pc, #296]	; (8001e28 <HAL_DMA_Abort_IT+0x458>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d036      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a49      	ldr	r2, [pc, #292]	; (8001e2c <HAL_DMA_Abort_IT+0x45c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d031      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a47      	ldr	r2, [pc, #284]	; (8001e30 <HAL_DMA_Abort_IT+0x460>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d02c      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a46      	ldr	r2, [pc, #280]	; (8001e34 <HAL_DMA_Abort_IT+0x464>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d027      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a44      	ldr	r2, [pc, #272]	; (8001e38 <HAL_DMA_Abort_IT+0x468>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d022      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a43      	ldr	r2, [pc, #268]	; (8001e3c <HAL_DMA_Abort_IT+0x46c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d01d      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a41      	ldr	r2, [pc, #260]	; (8001e40 <HAL_DMA_Abort_IT+0x470>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d018      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a40      	ldr	r2, [pc, #256]	; (8001e44 <HAL_DMA_Abort_IT+0x474>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a3e      	ldr	r2, [pc, #248]	; (8001e48 <HAL_DMA_Abort_IT+0x478>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00e      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a3d      	ldr	r2, [pc, #244]	; (8001e4c <HAL_DMA_Abort_IT+0x47c>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d009      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a3b      	ldr	r2, [pc, #236]	; (8001e50 <HAL_DMA_Abort_IT+0x480>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d004      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x3a0>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a3a      	ldr	r2, [pc, #232]	; (8001e54 <HAL_DMA_Abort_IT+0x484>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d101      	bne.n	8001d74 <HAL_DMA_Abort_IT+0x3a4>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_DMA_Abort_IT+0x3a6>
 8001d74:	2300      	movs	r3, #0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d028      	beq.n	8001dcc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d88:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	2201      	movs	r2, #1
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001da8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00c      	beq.n	8001dcc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001dca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40020010 	.word	0x40020010
 8001dfc:	40020028 	.word	0x40020028
 8001e00:	40020040 	.word	0x40020040
 8001e04:	40020058 	.word	0x40020058
 8001e08:	40020070 	.word	0x40020070
 8001e0c:	40020088 	.word	0x40020088
 8001e10:	400200a0 	.word	0x400200a0
 8001e14:	400200b8 	.word	0x400200b8
 8001e18:	40020410 	.word	0x40020410
 8001e1c:	40020428 	.word	0x40020428
 8001e20:	40020440 	.word	0x40020440
 8001e24:	40020458 	.word	0x40020458
 8001e28:	40020470 	.word	0x40020470
 8001e2c:	40020488 	.word	0x40020488
 8001e30:	400204a0 	.word	0x400204a0
 8001e34:	400204b8 	.word	0x400204b8
 8001e38:	58025408 	.word	0x58025408
 8001e3c:	5802541c 	.word	0x5802541c
 8001e40:	58025430 	.word	0x58025430
 8001e44:	58025444 	.word	0x58025444
 8001e48:	58025458 	.word	0x58025458
 8001e4c:	5802546c 	.word	0x5802546c
 8001e50:	58025480 	.word	0x58025480
 8001e54:	58025494 	.word	0x58025494

08001e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e66:	4b89      	ldr	r3, [pc, #548]	; (800208c <HAL_GPIO_Init+0x234>)
 8001e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e6a:	e194      	b.n	8002196 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	2101      	movs	r1, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8186 	beq.w	8002190 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d005      	beq.n	8001e9c <HAL_GPIO_Init+0x44>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d130      	bne.n	8001efe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f003 0201 	and.w	r2, r3, #1
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d017      	beq.n	8001f3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	2203      	movs	r2, #3
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d123      	bne.n	8001f8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	08da      	lsrs	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3208      	adds	r2, #8
 8001f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	69b9      	ldr	r1, [r7, #24]
 8001f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0203 	and.w	r2, r3, #3
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80e0 	beq.w	8002190 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd0:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <HAL_GPIO_Init+0x238>)
 8001fd2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001fd6:	4a2e      	ldr	r2, [pc, #184]	; (8002090 <HAL_GPIO_Init+0x238>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <HAL_GPIO_Init+0x238>)
 8001fe2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fee:	4a29      	ldr	r2, [pc, #164]	; (8002094 <HAL_GPIO_Init+0x23c>)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	220f      	movs	r2, #15
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a20      	ldr	r2, [pc, #128]	; (8002098 <HAL_GPIO_Init+0x240>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d052      	beq.n	80020c0 <HAL_GPIO_Init+0x268>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a1f      	ldr	r2, [pc, #124]	; (800209c <HAL_GPIO_Init+0x244>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d031      	beq.n	8002086 <HAL_GPIO_Init+0x22e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a1e      	ldr	r2, [pc, #120]	; (80020a0 <HAL_GPIO_Init+0x248>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d02b      	beq.n	8002082 <HAL_GPIO_Init+0x22a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <HAL_GPIO_Init+0x24c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d025      	beq.n	800207e <HAL_GPIO_Init+0x226>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a1c      	ldr	r2, [pc, #112]	; (80020a8 <HAL_GPIO_Init+0x250>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01f      	beq.n	800207a <HAL_GPIO_Init+0x222>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a1b      	ldr	r2, [pc, #108]	; (80020ac <HAL_GPIO_Init+0x254>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d019      	beq.n	8002076 <HAL_GPIO_Init+0x21e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a1a      	ldr	r2, [pc, #104]	; (80020b0 <HAL_GPIO_Init+0x258>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_GPIO_Init+0x21a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a19      	ldr	r2, [pc, #100]	; (80020b4 <HAL_GPIO_Init+0x25c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00d      	beq.n	800206e <HAL_GPIO_Init+0x216>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a18      	ldr	r2, [pc, #96]	; (80020b8 <HAL_GPIO_Init+0x260>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d007      	beq.n	800206a <HAL_GPIO_Init+0x212>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a17      	ldr	r2, [pc, #92]	; (80020bc <HAL_GPIO_Init+0x264>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <HAL_GPIO_Init+0x20e>
 8002062:	2309      	movs	r3, #9
 8002064:	e02d      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 8002066:	230a      	movs	r3, #10
 8002068:	e02b      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 800206a:	2308      	movs	r3, #8
 800206c:	e029      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 800206e:	2307      	movs	r3, #7
 8002070:	e027      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 8002072:	2306      	movs	r3, #6
 8002074:	e025      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 8002076:	2305      	movs	r3, #5
 8002078:	e023      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 800207a:	2304      	movs	r3, #4
 800207c:	e021      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 800207e:	2303      	movs	r3, #3
 8002080:	e01f      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 8002082:	2302      	movs	r3, #2
 8002084:	e01d      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 8002086:	2301      	movs	r3, #1
 8002088:	e01b      	b.n	80020c2 <HAL_GPIO_Init+0x26a>
 800208a:	bf00      	nop
 800208c:	58000080 	.word	0x58000080
 8002090:	58024400 	.word	0x58024400
 8002094:	58000400 	.word	0x58000400
 8002098:	58020000 	.word	0x58020000
 800209c:	58020400 	.word	0x58020400
 80020a0:	58020800 	.word	0x58020800
 80020a4:	58020c00 	.word	0x58020c00
 80020a8:	58021000 	.word	0x58021000
 80020ac:	58021400 	.word	0x58021400
 80020b0:	58021800 	.word	0x58021800
 80020b4:	58021c00 	.word	0x58021c00
 80020b8:	58022000 	.word	0x58022000
 80020bc:	58022400 	.word	0x58022400
 80020c0:	2300      	movs	r3, #0
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	f002 0203 	and.w	r2, r2, #3
 80020c8:	0092      	lsls	r2, r2, #2
 80020ca:	4093      	lsls	r3, r2
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d2:	4938      	ldr	r1, [pc, #224]	; (80021b4 <HAL_GPIO_Init+0x35c>)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	3302      	adds	r3, #2
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002106:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800210e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	3301      	adds	r3, #1
 8002194:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f47f ae63 	bne.w	8001e6c <HAL_GPIO_Init+0x14>
  }
}
 80021a6:	bf00      	nop
 80021a8:	bf00      	nop
 80021aa:	3724      	adds	r7, #36	; 0x24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	58000400 	.word	0x58000400

080021b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
 80021c4:	4613      	mov	r3, r2
 80021c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021c8:	787b      	ldrb	r3, [r7, #1]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80021d4:	e003      	b.n	80021de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021d6:	887b      	ldrh	r3, [r7, #2]
 80021d8:	041a      	lsls	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	619a      	str	r2, [r3, #24]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021fc:	887a      	ldrh	r2, [r7, #2]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4013      	ands	r3, r2
 8002202:	041a      	lsls	r2, r3, #16
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43d9      	mvns	r1, r3
 8002208:	887b      	ldrh	r3, [r7, #2]
 800220a:	400b      	ands	r3, r1
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	619a      	str	r2, [r3, #24]
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002228:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	2b06      	cmp	r3, #6
 8002232:	d00a      	beq.n	800224a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002234:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	429a      	cmp	r2, r3
 8002240:	d001      	beq.n	8002246 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e040      	b.n	80022c8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	e03e      	b.n	80022c8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800224a:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002252:	491f      	ldr	r1, [pc, #124]	; (80022d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4313      	orrs	r3, r2
 8002258:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800225a:	f7fe ffaf 	bl	80011bc <HAL_GetTick>
 800225e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002260:	e009      	b.n	8002276 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002262:	f7fe ffab 	bl	80011bc <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002270:	d901      	bls.n	8002276 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e028      	b.n	80022c8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002276:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800227e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002282:	d1ee      	bne.n	8002262 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b1e      	cmp	r3, #30
 8002288:	d008      	beq.n	800229c <HAL_PWREx_ConfigSupply+0x7c>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b2e      	cmp	r3, #46	; 0x2e
 800228e:	d005      	beq.n	800229c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b1d      	cmp	r3, #29
 8002294:	d002      	beq.n	800229c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b2d      	cmp	r3, #45	; 0x2d
 800229a:	d114      	bne.n	80022c6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800229c:	f7fe ff8e 	bl	80011bc <HAL_GetTick>
 80022a0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80022a2:	e009      	b.n	80022b8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022a4:	f7fe ff8a 	bl	80011bc <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022b2:	d901      	bls.n	80022b8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e007      	b.n	80022c8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_PWREx_ConfigSupply+0xb0>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c4:	d1ee      	bne.n	80022a4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	58024800 	.word	0x58024800

080022d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08c      	sub	sp, #48	; 0x30
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e3f3      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 80b3 	beq.w	800245a <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022f4:	4b9e      	ldr	r3, [pc, #632]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022fe:	4b9c      	ldr	r3, [pc, #624]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002306:	2b10      	cmp	r3, #16
 8002308:	d007      	beq.n	800231a <HAL_RCC_OscConfig+0x46>
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	2b18      	cmp	r3, #24
 800230e:	d112      	bne.n	8002336 <HAL_RCC_OscConfig+0x62>
 8002310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d10d      	bne.n	8002336 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231a:	4b95      	ldr	r3, [pc, #596]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 8098 	beq.w	8002458 <HAL_RCC_OscConfig+0x184>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	f040 8093 	bne.w	8002458 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e3cb      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x7a>
 8002340:	4b8b      	ldr	r3, [pc, #556]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a8a      	ldr	r2, [pc, #552]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 8002346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	e058      	b.n	8002400 <HAL_RCC_OscConfig+0x12c>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d112      	bne.n	800237c <HAL_RCC_OscConfig+0xa8>
 8002356:	4b86      	ldr	r3, [pc, #536]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a85      	ldr	r2, [pc, #532]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 800235c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b83      	ldr	r3, [pc, #524]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a82      	ldr	r2, [pc, #520]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 8002368:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b80      	ldr	r3, [pc, #512]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a7f      	ldr	r2, [pc, #508]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 8002374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e041      	b.n	8002400 <HAL_RCC_OscConfig+0x12c>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002384:	d112      	bne.n	80023ac <HAL_RCC_OscConfig+0xd8>
 8002386:	4b7a      	ldr	r3, [pc, #488]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a79      	ldr	r2, [pc, #484]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 800238c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b77      	ldr	r3, [pc, #476]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a76      	ldr	r2, [pc, #472]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 8002398:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	4b74      	ldr	r3, [pc, #464]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a73      	ldr	r2, [pc, #460]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e029      	b.n	8002400 <HAL_RCC_OscConfig+0x12c>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80023b4:	d112      	bne.n	80023dc <HAL_RCC_OscConfig+0x108>
 80023b6:	4b6e      	ldr	r3, [pc, #440]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a6d      	ldr	r2, [pc, #436]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b6b      	ldr	r3, [pc, #428]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a6a      	ldr	r2, [pc, #424]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80023c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	4b68      	ldr	r3, [pc, #416]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a67      	ldr	r2, [pc, #412]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e011      	b.n	8002400 <HAL_RCC_OscConfig+0x12c>
 80023dc:	4b64      	ldr	r3, [pc, #400]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a63      	ldr	r2, [pc, #396]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80023e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4b61      	ldr	r3, [pc, #388]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a60      	ldr	r2, [pc, #384]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80023ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	4b5e      	ldr	r3, [pc, #376]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a5d      	ldr	r2, [pc, #372]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80023fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80023fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d013      	beq.n	8002430 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7fe fed8 	bl	80011bc <HAL_GetTick>
 800240c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002410:	f7fe fed4 	bl	80011bc <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e355      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002422:	4b53      	ldr	r3, [pc, #332]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x13c>
 800242e:	e014      	b.n	800245a <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe fec4 	bl	80011bc <HAL_GetTick>
 8002434:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002438:	f7fe fec0 	bl	80011bc <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e341      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800244a:	4b49      	ldr	r3, [pc, #292]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x164>
 8002456:	e000      	b.n	800245a <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 808c 	beq.w	8002580 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002468:	4b41      	ldr	r3, [pc, #260]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002470:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002472:	4b3f      	ldr	r3, [pc, #252]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 8002474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002476:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <HAL_RCC_OscConfig+0x1ba>
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	2b18      	cmp	r3, #24
 8002482:	d137      	bne.n	80024f4 <HAL_RCC_OscConfig+0x220>
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d132      	bne.n	80024f4 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800248e:	4b38      	ldr	r3, [pc, #224]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1d2>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e313      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024a6:	4b32      	ldr	r3, [pc, #200]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 0219 	bic.w	r2, r3, #25
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	492f      	ldr	r1, [pc, #188]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024b8:	f7fe fe80 	bl	80011bc <HAL_GetTick>
 80024bc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c0:	f7fe fe7c 	bl	80011bc <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e2fd      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024d2:	4b27      	ldr	r3, [pc, #156]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024de:	4b24      	ldr	r3, [pc, #144]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	061b      	lsls	r3, r3, #24
 80024ec:	4920      	ldr	r1, [pc, #128]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024f2:	e045      	b.n	8002580 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d026      	beq.n	800254a <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024fc:	4b1c      	ldr	r3, [pc, #112]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 0219 	bic.w	r2, r3, #25
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4919      	ldr	r1, [pc, #100]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250e:	f7fe fe55 	bl	80011bc <HAL_GetTick>
 8002512:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002516:	f7fe fe51 	bl	80011bc <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e2d2      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002528:	4b11      	ldr	r3, [pc, #68]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002534:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	061b      	lsls	r3, r3, #24
 8002542:	490b      	ldr	r1, [pc, #44]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
 8002548:	e01a      	b.n	8002580 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a08      	ldr	r2, [pc, #32]	; (8002570 <HAL_RCC_OscConfig+0x29c>)
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7fe fe31 	bl	80011bc <HAL_GetTick>
 800255a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800255e:	f7fe fe2d 	bl	80011bc <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d903      	bls.n	8002574 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e2ae      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
 8002570:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002574:	4b99      	ldr	r3, [pc, #612]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1ee      	bne.n	800255e <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b00      	cmp	r3, #0
 800258a:	d06a      	beq.n	8002662 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800258c:	4b93      	ldr	r3, [pc, #588]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002594:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002596:	4b91      	ldr	r3, [pc, #580]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d007      	beq.n	80025b2 <HAL_RCC_OscConfig+0x2de>
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	2b18      	cmp	r3, #24
 80025a6:	d11b      	bne.n	80025e0 <HAL_RCC_OscConfig+0x30c>
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d116      	bne.n	80025e0 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025b2:	4b8a      	ldr	r3, [pc, #552]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <HAL_RCC_OscConfig+0x2f6>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	2b80      	cmp	r3, #128	; 0x80
 80025c4:	d001      	beq.n	80025ca <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e281      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025ca:	4b84      	ldr	r3, [pc, #528]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	061b      	lsls	r3, r3, #24
 80025d8:	4980      	ldr	r1, [pc, #512]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025de:	e040      	b.n	8002662 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d023      	beq.n	8002630 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025e8:	4b7c      	ldr	r3, [pc, #496]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a7b      	ldr	r2, [pc, #492]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 80025ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe fde2 	bl	80011bc <HAL_GetTick>
 80025f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80025fc:	f7fe fdde 	bl	80011bc <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e25f      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800260e:	4b73      	ldr	r3, [pc, #460]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800261a:	4b70      	ldr	r3, [pc, #448]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	061b      	lsls	r3, r3, #24
 8002628:	496c      	ldr	r1, [pc, #432]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 800262a:	4313      	orrs	r3, r2
 800262c:	60cb      	str	r3, [r1, #12]
 800262e:	e018      	b.n	8002662 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002630:	4b6a      	ldr	r3, [pc, #424]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a69      	ldr	r2, [pc, #420]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 8002636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800263a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe fdbe 	bl	80011bc <HAL_GetTick>
 8002640:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002644:	f7fe fdba 	bl	80011bc <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e23b      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002656:	4b61      	ldr	r3, [pc, #388]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d036      	beq.n	80026dc <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d019      	beq.n	80026aa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002676:	4b59      	ldr	r3, [pc, #356]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 8002678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267a:	4a58      	ldr	r2, [pc, #352]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002682:	f7fe fd9b 	bl	80011bc <HAL_GetTick>
 8002686:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800268a:	f7fe fd97 	bl	80011bc <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e218      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800269c:	4b4f      	ldr	r3, [pc, #316]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 800269e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x3b6>
 80026a8:	e018      	b.n	80026dc <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026aa:	4b4c      	ldr	r3, [pc, #304]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 80026ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ae:	4a4b      	ldr	r2, [pc, #300]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b6:	f7fe fd81 	bl	80011bc <HAL_GetTick>
 80026ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026be:	f7fe fd7d 	bl	80011bc <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e1fe      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026d0:	4b42      	ldr	r3, [pc, #264]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 80026d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f0      	bne.n	80026be <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d036      	beq.n	8002756 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d019      	beq.n	8002724 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026f0:	4b3a      	ldr	r3, [pc, #232]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a39      	ldr	r2, [pc, #228]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 80026f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026fc:	f7fe fd5e 	bl	80011bc <HAL_GetTick>
 8002700:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002704:	f7fe fd5a 	bl	80011bc <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e1db      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002716:	4b31      	ldr	r3, [pc, #196]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x430>
 8002722:	e018      	b.n	8002756 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002724:	4b2d      	ldr	r3, [pc, #180]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a2c      	ldr	r2, [pc, #176]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 800272a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800272e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002730:	f7fe fd44 	bl	80011bc <HAL_GetTick>
 8002734:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002738:	f7fe fd40 	bl	80011bc <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e1c1      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800274a:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 80af 	beq.w	80028c2 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002764:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <HAL_RCC_OscConfig+0x50c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1d      	ldr	r2, [pc, #116]	; (80027e0 <HAL_RCC_OscConfig+0x50c>)
 800276a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002770:	f7fe fd24 	bl	80011bc <HAL_GetTick>
 8002774:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002778:	f7fe fd20 	bl	80011bc <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	; 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e1a1      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_RCC_OscConfig+0x50c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d106      	bne.n	80027ac <HAL_RCC_OscConfig+0x4d8>
 800279e:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6713      	str	r3, [r2, #112]	; 0x70
 80027aa:	e05b      	b.n	8002864 <HAL_RCC_OscConfig+0x590>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d117      	bne.n	80027e4 <HAL_RCC_OscConfig+0x510>
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	4a08      	ldr	r2, [pc, #32]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 80027ba:	f023 0301 	bic.w	r3, r3, #1
 80027be:	6713      	str	r3, [r2, #112]	; 0x70
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	4a05      	ldr	r2, [pc, #20]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 80027c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ca:	6713      	str	r3, [r2, #112]	; 0x70
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	4a02      	ldr	r2, [pc, #8]	; (80027dc <HAL_RCC_OscConfig+0x508>)
 80027d2:	f023 0304 	bic.w	r3, r3, #4
 80027d6:	6713      	str	r3, [r2, #112]	; 0x70
 80027d8:	e044      	b.n	8002864 <HAL_RCC_OscConfig+0x590>
 80027da:	bf00      	nop
 80027dc:	58024400 	.word	0x58024400
 80027e0:	58024800 	.word	0x58024800
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b05      	cmp	r3, #5
 80027ea:	d112      	bne.n	8002812 <HAL_RCC_OscConfig+0x53e>
 80027ec:	4b95      	ldr	r3, [pc, #596]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	4a94      	ldr	r2, [pc, #592]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80027f2:	f043 0304 	orr.w	r3, r3, #4
 80027f6:	6713      	str	r3, [r2, #112]	; 0x70
 80027f8:	4b92      	ldr	r3, [pc, #584]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	4a91      	ldr	r2, [pc, #580]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80027fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002802:	6713      	str	r3, [r2, #112]	; 0x70
 8002804:	4b8f      	ldr	r3, [pc, #572]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002808:	4a8e      	ldr	r2, [pc, #568]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6713      	str	r3, [r2, #112]	; 0x70
 8002810:	e028      	b.n	8002864 <HAL_RCC_OscConfig+0x590>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b85      	cmp	r3, #133	; 0x85
 8002818:	d112      	bne.n	8002840 <HAL_RCC_OscConfig+0x56c>
 800281a:	4b8a      	ldr	r3, [pc, #552]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281e:	4a89      	ldr	r2, [pc, #548]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	6713      	str	r3, [r2, #112]	; 0x70
 8002826:	4b87      	ldr	r3, [pc, #540]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	4a86      	ldr	r2, [pc, #536]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 800282c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002830:	6713      	str	r3, [r2, #112]	; 0x70
 8002832:	4b84      	ldr	r3, [pc, #528]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002836:	4a83      	ldr	r2, [pc, #524]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6713      	str	r3, [r2, #112]	; 0x70
 800283e:	e011      	b.n	8002864 <HAL_RCC_OscConfig+0x590>
 8002840:	4b80      	ldr	r3, [pc, #512]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002844:	4a7f      	ldr	r2, [pc, #508]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002846:	f023 0301 	bic.w	r3, r3, #1
 800284a:	6713      	str	r3, [r2, #112]	; 0x70
 800284c:	4b7d      	ldr	r3, [pc, #500]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	4a7c      	ldr	r2, [pc, #496]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002852:	f023 0304 	bic.w	r3, r3, #4
 8002856:	6713      	str	r3, [r2, #112]	; 0x70
 8002858:	4b7a      	ldr	r3, [pc, #488]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285c:	4a79      	ldr	r2, [pc, #484]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 800285e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002862:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d015      	beq.n	8002898 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286c:	f7fe fca6 	bl	80011bc <HAL_GetTick>
 8002870:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002872:	e00a      	b.n	800288a <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002874:	f7fe fca2 	bl	80011bc <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002882:	4293      	cmp	r3, r2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e121      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800288a:	4b6e      	ldr	r3, [pc, #440]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0ee      	beq.n	8002874 <HAL_RCC_OscConfig+0x5a0>
 8002896:	e014      	b.n	80028c2 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002898:	f7fe fc90 	bl	80011bc <HAL_GetTick>
 800289c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800289e:	e00a      	b.n	80028b6 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a0:	f7fe fc8c 	bl	80011bc <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e10b      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028b6:	4b63      	ldr	r3, [pc, #396]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1ee      	bne.n	80028a0 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8100 	beq.w	8002acc <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028cc:	4b5d      	ldr	r3, [pc, #372]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028d4:	2b18      	cmp	r3, #24
 80028d6:	f000 80bb 	beq.w	8002a50 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	2b02      	cmp	r3, #2
 80028e0:	f040 8095 	bne.w	8002a0e <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e4:	4b57      	ldr	r3, [pc, #348]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a56      	ldr	r2, [pc, #344]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80028ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe fc64 	bl	80011bc <HAL_GetTick>
 80028f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe fc60 	bl	80011bc <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e0e1      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800290a:	4b4e      	ldr	r3, [pc, #312]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002916:	4b4b      	ldr	r3, [pc, #300]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800291a:	4b4b      	ldr	r3, [pc, #300]	; (8002a48 <HAL_RCC_OscConfig+0x774>)
 800291c:	4013      	ands	r3, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002926:	0112      	lsls	r2, r2, #4
 8002928:	430a      	orrs	r2, r1
 800292a:	4946      	ldr	r1, [pc, #280]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 800292c:	4313      	orrs	r3, r2
 800292e:	628b      	str	r3, [r1, #40]	; 0x28
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	3b01      	subs	r3, #1
 8002936:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293e:	3b01      	subs	r3, #1
 8002940:	025b      	lsls	r3, r3, #9
 8002942:	b29b      	uxth	r3, r3
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	3b01      	subs	r3, #1
 800294c:	041b      	lsls	r3, r3, #16
 800294e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002958:	3b01      	subs	r3, #1
 800295a:	061b      	lsls	r3, r3, #24
 800295c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002960:	4938      	ldr	r1, [pc, #224]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002962:	4313      	orrs	r3, r2
 8002964:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002966:	4b37      	ldr	r3, [pc, #220]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	4a36      	ldr	r2, [pc, #216]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002972:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002976:	4b35      	ldr	r3, [pc, #212]	; (8002a4c <HAL_RCC_OscConfig+0x778>)
 8002978:	4013      	ands	r3, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800297e:	00d2      	lsls	r2, r2, #3
 8002980:	4930      	ldr	r1, [pc, #192]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002982:	4313      	orrs	r3, r2
 8002984:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002986:	4b2f      	ldr	r3, [pc, #188]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	f023 020c 	bic.w	r2, r3, #12
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	492c      	ldr	r1, [pc, #176]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002994:	4313      	orrs	r3, r2
 8002996:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002998:	4b2a      	ldr	r3, [pc, #168]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	f023 0202 	bic.w	r2, r3, #2
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a4:	4927      	ldr	r1, [pc, #156]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80029aa:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	4a25      	ldr	r2, [pc, #148]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80029b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029b6:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	4a22      	ldr	r2, [pc, #136]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80029bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	4a1f      	ldr	r2, [pc, #124]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80029c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	4a1c      	ldr	r2, [pc, #112]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029da:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80029e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e6:	f7fe fbe9 	bl	80011bc <HAL_GetTick>
 80029ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ee:	f7fe fbe5 	bl	80011bc <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e066      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a00:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x71a>
 8002a0c:	e05e      	b.n	8002acc <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002a14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1a:	f7fe fbcf 	bl	80011bc <HAL_GetTick>
 8002a1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe fbcb 	bl	80011bc <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e04c      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x74e>
 8002a40:	e044      	b.n	8002acc <HAL_RCC_OscConfig+0x7f8>
 8002a42:	bf00      	nop
 8002a44:	58024400 	.word	0x58024400
 8002a48:	fffffc0c 	.word	0xfffffc0c
 8002a4c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a50:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <HAL_RCC_OscConfig+0x804>)
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a56:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <HAL_RCC_OscConfig+0x804>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d031      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f003 0203 	and.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d12a      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d122      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d11a      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	0a5b      	lsrs	r3, r3, #9
 8002a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d111      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	0c1b      	lsrs	r3, r3, #16
 8002aa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d108      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	0e1b      	lsrs	r3, r3, #24
 8002aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3730      	adds	r7, #48	; 0x30
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	58024400 	.word	0x58024400

08002adc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e19c      	b.n	8002e2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af0:	4b8a      	ldr	r3, [pc, #552]	; (8002d1c <HAL_RCC_ClockConfig+0x240>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d910      	bls.n	8002b20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b87      	ldr	r3, [pc, #540]	; (8002d1c <HAL_RCC_ClockConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 020f 	bic.w	r2, r3, #15
 8002b06:	4985      	ldr	r1, [pc, #532]	; (8002d1c <HAL_RCC_ClockConfig+0x240>)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0e:	4b83      	ldr	r3, [pc, #524]	; (8002d1c <HAL_RCC_ClockConfig+0x240>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e184      	b.n	8002e2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d010      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	4b7b      	ldr	r3, [pc, #492]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d908      	bls.n	8002b4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b3c:	4b78      	ldr	r3, [pc, #480]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	4975      	ldr	r1, [pc, #468]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d010      	beq.n	8002b7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	4b70      	ldr	r3, [pc, #448]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d908      	bls.n	8002b7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b6a:	4b6d      	ldr	r3, [pc, #436]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	496a      	ldr	r1, [pc, #424]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d010      	beq.n	8002baa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	4b64      	ldr	r3, [pc, #400]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d908      	bls.n	8002baa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b98:	4b61      	ldr	r3, [pc, #388]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	495e      	ldr	r1, [pc, #376]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d010      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69da      	ldr	r2, [r3, #28]
 8002bba:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d908      	bls.n	8002bd8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002bc6:	4b56      	ldr	r3, [pc, #344]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	4953      	ldr	r1, [pc, #332]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d010      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	4b4d      	ldr	r3, [pc, #308]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d908      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf4:	4b4a      	ldr	r3, [pc, #296]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f023 020f 	bic.w	r2, r3, #15
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4947      	ldr	r1, [pc, #284]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d055      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c12:	4b43      	ldr	r3, [pc, #268]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	4940      	ldr	r1, [pc, #256]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d107      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c2c:	4b3c      	ldr	r3, [pc, #240]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d121      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0f6      	b.n	8002e2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d107      	bne.n	8002c54 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c44:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d115      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0ea      	b.n	8002e2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d107      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c5c:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d109      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0de      	b.n	8002e2a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c6c:	4b2c      	ldr	r3, [pc, #176]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0d6      	b.n	8002e2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c7c:	4b28      	ldr	r3, [pc, #160]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f023 0207 	bic.w	r2, r3, #7
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4925      	ldr	r1, [pc, #148]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fa95 	bl	80011bc <HAL_GetTick>
 8002c92:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c94:	e00a      	b.n	8002cac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c96:	f7fe fa91 	bl	80011bc <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e0be      	b.n	8002e2a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cac:	4b1c      	ldr	r3, [pc, #112]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d1eb      	bne.n	8002c96 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d010      	beq.n	8002cec <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d208      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f023 020f 	bic.w	r2, r3, #15
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	490e      	ldr	r1, [pc, #56]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_ClockConfig+0x240>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d214      	bcs.n	8002d24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <HAL_RCC_ClockConfig+0x240>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 020f 	bic.w	r2, r3, #15
 8002d02:	4906      	ldr	r1, [pc, #24]	; (8002d1c <HAL_RCC_ClockConfig+0x240>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <HAL_RCC_ClockConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e086      	b.n	8002e2a <HAL_RCC_ClockConfig+0x34e>
 8002d1c:	52002000 	.word	0x52002000
 8002d20:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d010      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	4b3f      	ldr	r3, [pc, #252]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d208      	bcs.n	8002d52 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d40:	4b3c      	ldr	r3, [pc, #240]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	4939      	ldr	r1, [pc, #228]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d010      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	4b34      	ldr	r3, [pc, #208]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d208      	bcs.n	8002d80 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d6e:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	492e      	ldr	r1, [pc, #184]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d010      	beq.n	8002dae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699a      	ldr	r2, [r3, #24]
 8002d90:	4b28      	ldr	r3, [pc, #160]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d208      	bcs.n	8002dae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d9c:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	4922      	ldr	r1, [pc, #136]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d010      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d208      	bcs.n	8002ddc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002dca:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	4917      	ldr	r1, [pc, #92]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002ddc:	f000 f834 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8002de0:	4602      	mov	r2, r0
 8002de2:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	4912      	ldr	r1, [pc, #72]	; (8002e38 <HAL_RCC_ClockConfig+0x35c>)
 8002dee:	5ccb      	ldrb	r3, [r1, r3]
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
 8002df8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	4a0d      	ldr	r2, [pc, #52]	; (8002e38 <HAL_RCC_ClockConfig+0x35c>)
 8002e04:	5cd3      	ldrb	r3, [r2, r3]
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <HAL_RCC_ClockConfig+0x360>)
 8002e12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e14:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <HAL_RCC_ClockConfig+0x364>)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <HAL_RCC_ClockConfig+0x368>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd ff34 	bl	8000c8c <HAL_InitTick>
 8002e24:	4603      	mov	r3, r0
 8002e26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	58024400 	.word	0x58024400
 8002e38:	0800b480 	.word	0x0800b480
 8002e3c:	24000004 	.word	0x24000004
 8002e40:	24000000 	.word	0x24000000
 8002e44:	24000008 	.word	0x24000008

08002e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b089      	sub	sp, #36	; 0x24
 8002e4c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e4e:	4bb3      	ldr	r3, [pc, #716]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e56:	2b18      	cmp	r3, #24
 8002e58:	f200 8155 	bhi.w	8003106 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e5c:	a201      	add	r2, pc, #4	; (adr r2, 8002e64 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e62:	bf00      	nop
 8002e64:	08002ec9 	.word	0x08002ec9
 8002e68:	08003107 	.word	0x08003107
 8002e6c:	08003107 	.word	0x08003107
 8002e70:	08003107 	.word	0x08003107
 8002e74:	08003107 	.word	0x08003107
 8002e78:	08003107 	.word	0x08003107
 8002e7c:	08003107 	.word	0x08003107
 8002e80:	08003107 	.word	0x08003107
 8002e84:	08002eef 	.word	0x08002eef
 8002e88:	08003107 	.word	0x08003107
 8002e8c:	08003107 	.word	0x08003107
 8002e90:	08003107 	.word	0x08003107
 8002e94:	08003107 	.word	0x08003107
 8002e98:	08003107 	.word	0x08003107
 8002e9c:	08003107 	.word	0x08003107
 8002ea0:	08003107 	.word	0x08003107
 8002ea4:	08002ef5 	.word	0x08002ef5
 8002ea8:	08003107 	.word	0x08003107
 8002eac:	08003107 	.word	0x08003107
 8002eb0:	08003107 	.word	0x08003107
 8002eb4:	08003107 	.word	0x08003107
 8002eb8:	08003107 	.word	0x08003107
 8002ebc:	08003107 	.word	0x08003107
 8002ec0:	08003107 	.word	0x08003107
 8002ec4:	08002efb 	.word	0x08002efb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ec8:	4b94      	ldr	r3, [pc, #592]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d009      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ed4:	4b91      	ldr	r3, [pc, #580]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	08db      	lsrs	r3, r3, #3
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	4a90      	ldr	r2, [pc, #576]	; (8003120 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002ee6:	e111      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ee8:	4b8d      	ldr	r3, [pc, #564]	; (8003120 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eea:	61bb      	str	r3, [r7, #24]
    break;
 8002eec:	e10e      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002eee:	4b8d      	ldr	r3, [pc, #564]	; (8003124 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ef0:	61bb      	str	r3, [r7, #24]
    break;
 8002ef2:	e10b      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002ef4:	4b8c      	ldr	r3, [pc, #560]	; (8003128 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ef6:	61bb      	str	r3, [r7, #24]
    break;
 8002ef8:	e108      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002efa:	4b88      	ldr	r3, [pc, #544]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002f04:	4b85      	ldr	r3, [pc, #532]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f0e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f10:	4b82      	ldr	r3, [pc, #520]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002f1a:	4b80      	ldr	r3, [pc, #512]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1e:	08db      	lsrs	r3, r3, #3
 8002f20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	fb02 f303 	mul.w	r3, r2, r3
 8002f2a:	ee07 3a90 	vmov	s15, r3
 8002f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f32:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 80e1 	beq.w	8003100 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	f000 8083 	beq.w	800304c <HAL_RCC_GetSysClockFreq+0x204>
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	f200 80a1 	bhi.w	8003090 <HAL_RCC_GetSysClockFreq+0x248>
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0x114>
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d056      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f5a:	e099      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f5c:	4b6f      	ldr	r3, [pc, #444]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d02d      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f68:	4b6c      	ldr	r3, [pc, #432]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	08db      	lsrs	r3, r3, #3
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	4a6b      	ldr	r2, [pc, #428]	; (8003120 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
 8002f78:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	ee07 3a90 	vmov	s15, r3
 8002f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	ee07 3a90 	vmov	s15, r3
 8002f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f92:	4b62      	ldr	r3, [pc, #392]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9a:	ee07 3a90 	vmov	s15, r3
 8002f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fa6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800312c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002fc2:	e087      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	ee07 3a90 	vmov	s15, r3
 8002fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003130 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fd6:	4b51      	ldr	r3, [pc, #324]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800312c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003006:	e065      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003012:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003134 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800301a:	4b40      	ldr	r3, [pc, #256]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800302a:	ed97 6a02 	vldr	s12, [r7, #8]
 800302e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800312c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800303a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800303e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800304a:	e043      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	ee07 3a90 	vmov	s15, r3
 8003052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003056:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003138 <HAL_RCC_GetSysClockFreq+0x2f0>
 800305a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800305e:	4b2f      	ldr	r3, [pc, #188]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800306e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003072:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800312c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800307a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800307e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800308e:	e021      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003134 <HAL_RCC_GetSysClockFreq+0x2ec>
 800309e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030a2:	4b1e      	ldr	r3, [pc, #120]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800312c <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030d2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	0a5b      	lsrs	r3, r3, #9
 80030da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030de:	3301      	adds	r3, #1
 80030e0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	ee07 3a90 	vmov	s15, r3
 80030e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80030f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030f8:	ee17 3a90 	vmov	r3, s15
 80030fc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80030fe:	e005      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	61bb      	str	r3, [r7, #24]
    break;
 8003104:	e002      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003108:	61bb      	str	r3, [r7, #24]
    break;
 800310a:	bf00      	nop
  }

  return sysclockfreq;
 800310c:	69bb      	ldr	r3, [r7, #24]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3724      	adds	r7, #36	; 0x24
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	58024400 	.word	0x58024400
 8003120:	03d09000 	.word	0x03d09000
 8003124:	003d0900 	.word	0x003d0900
 8003128:	007a1200 	.word	0x007a1200
 800312c:	46000000 	.word	0x46000000
 8003130:	4c742400 	.word	0x4c742400
 8003134:	4a742400 	.word	0x4a742400
 8003138:	4af42400 	.word	0x4af42400

0800313c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003142:	f7ff fe81 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8003146:	4602      	mov	r2, r0
 8003148:	4b10      	ldr	r3, [pc, #64]	; (800318c <HAL_RCC_GetHCLKFreq+0x50>)
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	490f      	ldr	r1, [pc, #60]	; (8003190 <HAL_RCC_GetHCLKFreq+0x54>)
 8003154:	5ccb      	ldrb	r3, [r1, r3]
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	fa22 f303 	lsr.w	r3, r2, r3
 800315e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <HAL_RCC_GetHCLKFreq+0x50>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	4a09      	ldr	r2, [pc, #36]	; (8003190 <HAL_RCC_GetHCLKFreq+0x54>)
 800316a:	5cd3      	ldrb	r3, [r2, r3]
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	fa22 f303 	lsr.w	r3, r2, r3
 8003176:	4a07      	ldr	r2, [pc, #28]	; (8003194 <HAL_RCC_GetHCLKFreq+0x58>)
 8003178:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800317a:	4a07      	ldr	r2, [pc, #28]	; (8003198 <HAL_RCC_GetHCLKFreq+0x5c>)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <HAL_RCC_GetHCLKFreq+0x58>)
 8003182:	681b      	ldr	r3, [r3, #0]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	58024400 	.word	0x58024400
 8003190:	0800b480 	.word	0x0800b480
 8003194:	24000004 	.word	0x24000004
 8003198:	24000000 	.word	0x24000000

0800319c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80031a0:	f7ff ffcc 	bl	800313c <HAL_RCC_GetHCLKFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	4904      	ldr	r1, [pc, #16]	; (80031c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	58024400 	.word	0x58024400
 80031c4:	0800b480 	.word	0x0800b480

080031c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80031cc:	f7ff ffb6 	bl	800313c <HAL_RCC_GetHCLKFreq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4904      	ldr	r1, [pc, #16]	; (80031f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	f003 031f 	and.w	r3, r3, #31
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	58024400 	.word	0x58024400
 80031f0:	0800b480 	.word	0x0800b480

080031f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	223f      	movs	r2, #63	; 0x3f
 8003202:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003204:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <HAL_RCC_GetClockConfig+0x7c>)
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f003 0207 	and.w	r2, r3, #7
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8003210:	4b17      	ldr	r3, [pc, #92]	; (8003270 <HAL_RCC_GetClockConfig+0x7c>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800321c:	4b14      	ldr	r3, [pc, #80]	; (8003270 <HAL_RCC_GetClockConfig+0x7c>)
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f003 020f 	and.w	r2, r3, #15
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8003228:	4b11      	ldr	r3, [pc, #68]	; (8003270 <HAL_RCC_GetClockConfig+0x7c>)
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8003234:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <HAL_RCC_GetClockConfig+0x7c>)
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_RCC_GetClockConfig+0x7c>)
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800324c:	4b08      	ldr	r3, [pc, #32]	; (8003270 <HAL_RCC_GetClockConfig+0x7c>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_RCC_GetClockConfig+0x80>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 020f 	and.w	r2, r3, #15
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	601a      	str	r2, [r3, #0]
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	58024400 	.word	0x58024400
 8003274:	52002000 	.word	0x52002000

08003278 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003280:	2300      	movs	r3, #0
 8003282:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003284:	2300      	movs	r3, #0
 8003286:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d03f      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003298:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800329c:	d02a      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800329e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032a2:	d824      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032a8:	d018      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032ae:	d81e      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032b8:	d007      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032ba:	e018      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032bc:	4ba6      	ldr	r3, [pc, #664]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	4aa5      	ldr	r2, [pc, #660]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80032c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80032c8:	e015      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3304      	adds	r3, #4
 80032ce:	2102      	movs	r1, #2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f001 f99b 	bl	800460c <RCCEx_PLL2_Config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80032da:	e00c      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3324      	adds	r3, #36	; 0x24
 80032e0:	2102      	movs	r1, #2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f001 fa44 	bl	8004770 <RCCEx_PLL3_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80032ec:	e003      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	75fb      	strb	r3, [r7, #23]
      break;
 80032f2:	e000      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80032f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032f6:	7dfb      	ldrb	r3, [r7, #23]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d109      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80032fc:	4b96      	ldr	r3, [pc, #600]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80032fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003300:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003308:	4993      	ldr	r1, [pc, #588]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800330a:	4313      	orrs	r3, r2
 800330c:	650b      	str	r3, [r1, #80]	; 0x50
 800330e:	e001      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003310:	7dfb      	ldrb	r3, [r7, #23]
 8003312:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d03d      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003324:	2b04      	cmp	r3, #4
 8003326:	d826      	bhi.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003328:	a201      	add	r2, pc, #4	; (adr r2, 8003330 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003345 	.word	0x08003345
 8003334:	08003353 	.word	0x08003353
 8003338:	08003365 	.word	0x08003365
 800333c:	0800337d 	.word	0x0800337d
 8003340:	0800337d 	.word	0x0800337d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003344:	4b84      	ldr	r3, [pc, #528]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	4a83      	ldr	r2, [pc, #524]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800334a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800334e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003350:	e015      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3304      	adds	r3, #4
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f001 f957 	bl	800460c <RCCEx_PLL2_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003362:	e00c      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3324      	adds	r3, #36	; 0x24
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f001 fa00 	bl	8004770 <RCCEx_PLL3_Config>
 8003370:	4603      	mov	r3, r0
 8003372:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003374:	e003      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	75fb      	strb	r3, [r7, #23]
      break;
 800337a:	e000      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800337c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800337e:	7dfb      	ldrb	r3, [r7, #23]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d109      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003384:	4b74      	ldr	r3, [pc, #464]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003388:	f023 0207 	bic.w	r2, r3, #7
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003390:	4971      	ldr	r1, [pc, #452]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003392:	4313      	orrs	r3, r2
 8003394:	650b      	str	r3, [r1, #80]	; 0x50
 8003396:	e001      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003398:	7dfb      	ldrb	r3, [r7, #23]
 800339a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d04a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80033b0:	d031      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80033b2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80033b6:	d82b      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80033b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033bc:	d02d      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80033be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c2:	d825      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80033c4:	2bc0      	cmp	r3, #192	; 0xc0
 80033c6:	d02a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80033c8:	2bc0      	cmp	r3, #192	; 0xc0
 80033ca:	d821      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80033cc:	2b80      	cmp	r3, #128	; 0x80
 80033ce:	d016      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x186>
 80033d0:	2b80      	cmp	r3, #128	; 0x80
 80033d2:	d81d      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x166>
 80033d8:	2b40      	cmp	r3, #64	; 0x40
 80033da:	d007      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x174>
 80033dc:	e018      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033de:	4b5e      	ldr	r3, [pc, #376]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	4a5d      	ldr	r2, [pc, #372]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80033ea:	e019      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3304      	adds	r3, #4
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f001 f90a 	bl	800460c <RCCEx_PLL2_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80033fc:	e010      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3324      	adds	r3, #36	; 0x24
 8003402:	2100      	movs	r1, #0
 8003404:	4618      	mov	r0, r3
 8003406:	f001 f9b3 	bl	8004770 <RCCEx_PLL3_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800340e:	e007      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	75fb      	strb	r3, [r7, #23]
      break;
 8003414:	e004      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003416:	bf00      	nop
 8003418:	e002      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800341a:	bf00      	nop
 800341c:	e000      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800341e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003420:	7dfb      	ldrb	r3, [r7, #23]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003426:	4b4c      	ldr	r3, [pc, #304]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003432:	4949      	ldr	r1, [pc, #292]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003434:	4313      	orrs	r3, r2
 8003436:	650b      	str	r3, [r1, #80]	; 0x50
 8003438:	e001      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343a:	7dfb      	ldrb	r3, [r7, #23]
 800343c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003446:	2b00      	cmp	r3, #0
 8003448:	d04f      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003452:	d036      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003454:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003458:	d830      	bhi.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x244>
 800345a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800345e:	d032      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003464:	d82a      	bhi.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003466:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800346a:	d02e      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x252>
 800346c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003470:	d824      	bhi.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003476:	d018      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347c:	d81e      	bhi.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x244>
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003486:	d007      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003488:	e018      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800348a:	4b33      	ldr	r3, [pc, #204]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	4a32      	ldr	r2, [pc, #200]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003494:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003496:	e019      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3304      	adds	r3, #4
 800349c:	2100      	movs	r1, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	f001 f8b4 	bl	800460c <RCCEx_PLL2_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80034a8:	e010      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3324      	adds	r3, #36	; 0x24
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f001 f95d 	bl	8004770 <RCCEx_PLL3_Config>
 80034b6:	4603      	mov	r3, r0
 80034b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80034ba:	e007      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	75fb      	strb	r3, [r7, #23]
      break;
 80034c0:	e004      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80034c2:	bf00      	nop
 80034c4:	e002      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80034c6:	bf00      	nop
 80034c8:	e000      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80034ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034cc:	7dfb      	ldrb	r3, [r7, #23]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80034d2:	4b21      	ldr	r3, [pc, #132]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d6:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	491e      	ldr	r1, [pc, #120]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	650b      	str	r3, [r1, #80]	; 0x50
 80034e4:	e001      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
 80034e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d034      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fa:	2b30      	cmp	r3, #48	; 0x30
 80034fc:	d01c      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80034fe:	2b30      	cmp	r3, #48	; 0x30
 8003500:	d817      	bhi.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003502:	2b20      	cmp	r3, #32
 8003504:	d00c      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003506:	2b20      	cmp	r3, #32
 8003508:	d813      	bhi.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d016      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800350e:	2b10      	cmp	r3, #16
 8003510:	d10f      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003512:	4b11      	ldr	r3, [pc, #68]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	4a10      	ldr	r2, [pc, #64]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800351c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800351e:	e00e      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3304      	adds	r3, #4
 8003524:	2102      	movs	r1, #2
 8003526:	4618      	mov	r0, r3
 8003528:	f001 f870 	bl	800460c <RCCEx_PLL2_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003530:	e005      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	75fb      	strb	r3, [r7, #23]
      break;
 8003536:	e002      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003538:	bf00      	nop
 800353a:	e000      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 800353c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800353e:	7dfb      	ldrb	r3, [r7, #23]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10b      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003544:	4b04      	ldr	r3, [pc, #16]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003548:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003550:	4901      	ldr	r1, [pc, #4]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003552:	4313      	orrs	r3, r2
 8003554:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003556:	e003      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003558:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355c:	7dfb      	ldrb	r3, [r7, #23]
 800355e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d047      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003570:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003574:	d030      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003576:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800357a:	d82a      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800357c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003580:	d02c      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003582:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003586:	d824      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358c:	d018      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800358e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003592:	d81e      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800359c:	d007      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x336>
 800359e:	e018      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035a0:	4bb0      	ldr	r3, [pc, #704]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	4aaf      	ldr	r2, [pc, #700]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80035a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80035ac:	e017      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	2100      	movs	r1, #0
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 f829 	bl	800460c <RCCEx_PLL2_Config>
 80035ba:	4603      	mov	r3, r0
 80035bc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80035be:	e00e      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3324      	adds	r3, #36	; 0x24
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f001 f8d2 	bl	8004770 <RCCEx_PLL3_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80035d0:	e005      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
      break;
 80035d6:	e002      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80035d8:	bf00      	nop
 80035da:	e000      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80035dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035de:	7dfb      	ldrb	r3, [r7, #23]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d109      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035e4:	4b9f      	ldr	r3, [pc, #636]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80035e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f0:	499c      	ldr	r1, [pc, #624]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	650b      	str	r3, [r1, #80]	; 0x50
 80035f6:	e001      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f8:	7dfb      	ldrb	r3, [r7, #23]
 80035fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d049      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800360c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003610:	d02e      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003612:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003616:	d828      	bhi.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003618:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800361c:	d02a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800361e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003622:	d822      	bhi.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003624:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003628:	d026      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800362a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800362e:	d81c      	bhi.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003630:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003634:	d010      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800363a:	d816      	bhi.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01d      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003644:	d111      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3304      	adds	r3, #4
 800364a:	2101      	movs	r1, #1
 800364c:	4618      	mov	r0, r3
 800364e:	f000 ffdd 	bl	800460c <RCCEx_PLL2_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003656:	e012      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3324      	adds	r3, #36	; 0x24
 800365c:	2101      	movs	r1, #1
 800365e:	4618      	mov	r0, r3
 8003660:	f001 f886 	bl	8004770 <RCCEx_PLL3_Config>
 8003664:	4603      	mov	r3, r0
 8003666:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003668:	e009      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	75fb      	strb	r3, [r7, #23]
      break;
 800366e:	e006      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003670:	bf00      	nop
 8003672:	e004      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003674:	bf00      	nop
 8003676:	e002      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003678:	bf00      	nop
 800367a:	e000      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800367c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800367e:	7dfb      	ldrb	r3, [r7, #23]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d109      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003684:	4b77      	ldr	r3, [pc, #476]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003688:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003690:	4974      	ldr	r1, [pc, #464]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003692:	4313      	orrs	r3, r2
 8003694:	650b      	str	r3, [r1, #80]	; 0x50
 8003696:	e001      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003698:	7dfb      	ldrb	r3, [r7, #23]
 800369a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d053      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036ae:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80036b2:	d034      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80036b4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80036b8:	d82e      	bhi.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80036ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036be:	d030      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80036c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036c4:	d828      	bhi.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80036c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ca:	d02c      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80036cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d0:	d822      	bhi.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80036d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036d6:	d028      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80036d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036dc:	d81c      	bhi.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80036de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e2:	d010      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80036e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e8:	d816      	bhi.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d01f      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80036ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036f2:	d111      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3304      	adds	r3, #4
 80036f8:	2101      	movs	r1, #1
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 ff86 	bl	800460c <RCCEx_PLL2_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003704:	e014      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3324      	adds	r3, #36	; 0x24
 800370a:	2101      	movs	r1, #1
 800370c:	4618      	mov	r0, r3
 800370e:	f001 f82f 	bl	8004770 <RCCEx_PLL3_Config>
 8003712:	4603      	mov	r3, r0
 8003714:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003716:	e00b      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	75fb      	strb	r3, [r7, #23]
      break;
 800371c:	e008      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800371e:	bf00      	nop
 8003720:	e006      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003722:	bf00      	nop
 8003724:	e004      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003726:	bf00      	nop
 8003728:	e002      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800372a:	bf00      	nop
 800372c:	e000      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800372e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003730:	7dfb      	ldrb	r3, [r7, #23]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10a      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003736:	4b4b      	ldr	r3, [pc, #300]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003744:	4947      	ldr	r1, [pc, #284]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003746:	4313      	orrs	r3, r2
 8003748:	658b      	str	r3, [r1, #88]	; 0x58
 800374a:	e001      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374c:	7dfb      	ldrb	r3, [r7, #23]
 800374e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d02f      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003764:	d00e      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800376a:	d814      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d015      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003770:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003774:	d10f      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003776:	4b3b      	ldr	r3, [pc, #236]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	4a3a      	ldr	r2, [pc, #232]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800377c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003780:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003782:	e00c      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3304      	adds	r3, #4
 8003788:	2101      	movs	r1, #1
 800378a:	4618      	mov	r0, r3
 800378c:	f000 ff3e 	bl	800460c <RCCEx_PLL2_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003794:	e003      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	75fb      	strb	r3, [r7, #23]
      break;
 800379a:	e000      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 800379c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800379e:	7dfb      	ldrb	r3, [r7, #23]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d109      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037a4:	4b2f      	ldr	r3, [pc, #188]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80037a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b0:	492c      	ldr	r1, [pc, #176]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	650b      	str	r3, [r1, #80]	; 0x50
 80037b6:	e001      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
 80037ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d032      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d81b      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x590>
 80037d0:	a201      	add	r2, pc, #4	; (adr r2, 80037d8 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80037d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d6:	bf00      	nop
 80037d8:	0800380f 	.word	0x0800380f
 80037dc:	080037e9 	.word	0x080037e9
 80037e0:	080037f7 	.word	0x080037f7
 80037e4:	0800380f 	.word	0x0800380f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e8:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	4a1d      	ldr	r2, [pc, #116]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80037ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80037f4:	e00c      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3304      	adds	r3, #4
 80037fa:	2102      	movs	r1, #2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 ff05 	bl	800460c <RCCEx_PLL2_Config>
 8003802:	4603      	mov	r3, r0
 8003804:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003806:	e003      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	75fb      	strb	r3, [r7, #23]
      break;
 800380c:	e000      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 800380e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003810:	7dfb      	ldrb	r3, [r7, #23]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003816:	4b13      	ldr	r3, [pc, #76]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381a:	f023 0203 	bic.w	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	4910      	ldr	r1, [pc, #64]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003824:	4313      	orrs	r3, r2
 8003826:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003828:	e001      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382a:	7dfb      	ldrb	r3, [r7, #23]
 800382c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 808a 	beq.w	8003950 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a09      	ldr	r2, [pc, #36]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003846:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003848:	f7fd fcb8 	bl	80011bc <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800384e:	e00d      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003850:	f7fd fcb4 	bl	80011bc <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	; 0x64
 800385c:	d906      	bls.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	75fb      	strb	r3, [r7, #23]
        break;
 8003862:	e009      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8003864:	58024400 	.word	0x58024400
 8003868:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800386c:	4bba      	ldr	r3, [pc, #744]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0eb      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8003878:	7dfb      	ldrb	r3, [r7, #23]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d166      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800387e:	4bb7      	ldr	r3, [pc, #732]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003880:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003888:	4053      	eors	r3, r2
 800388a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388e:	2b00      	cmp	r3, #0
 8003890:	d013      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003892:	4bb2      	ldr	r3, [pc, #712]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800389a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800389c:	4baf      	ldr	r3, [pc, #700]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800389e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a0:	4aae      	ldr	r2, [pc, #696]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80038a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038a8:	4bac      	ldr	r3, [pc, #688]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80038aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ac:	4aab      	ldr	r2, [pc, #684]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80038ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80038b4:	4aa9      	ldr	r2, [pc, #676]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c4:	d115      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c6:	f7fd fc79 	bl	80011bc <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038cc:	e00b      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ce:	f7fd fc75 	bl	80011bc <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038dc:	4293      	cmp	r3, r2
 80038de:	d902      	bls.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	75fb      	strb	r3, [r7, #23]
            break;
 80038e4:	e005      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038e6:	4b9d      	ldr	r3, [pc, #628]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0ed      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d126      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003906:	d10d      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003908:	4b94      	ldr	r3, [pc, #592]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003916:	0919      	lsrs	r1, r3, #4
 8003918:	4b91      	ldr	r3, [pc, #580]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800391a:	400b      	ands	r3, r1
 800391c:	498f      	ldr	r1, [pc, #572]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800391e:	4313      	orrs	r3, r2
 8003920:	610b      	str	r3, [r1, #16]
 8003922:	e005      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003924:	4b8d      	ldr	r3, [pc, #564]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	4a8c      	ldr	r2, [pc, #560]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800392a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800392e:	6113      	str	r3, [r2, #16]
 8003930:	4b8a      	ldr	r3, [pc, #552]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003932:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800393a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393e:	4987      	ldr	r1, [pc, #540]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003940:	4313      	orrs	r3, r2
 8003942:	670b      	str	r3, [r1, #112]	; 0x70
 8003944:	e004      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	75bb      	strb	r3, [r7, #22]
 800394a:	e001      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d07f      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003962:	2b28      	cmp	r3, #40	; 0x28
 8003964:	d866      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003966:	a201      	add	r2, pc, #4	; (adr r2, 800396c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396c:	08003a3b 	.word	0x08003a3b
 8003970:	08003a35 	.word	0x08003a35
 8003974:	08003a35 	.word	0x08003a35
 8003978:	08003a35 	.word	0x08003a35
 800397c:	08003a35 	.word	0x08003a35
 8003980:	08003a35 	.word	0x08003a35
 8003984:	08003a35 	.word	0x08003a35
 8003988:	08003a35 	.word	0x08003a35
 800398c:	08003a11 	.word	0x08003a11
 8003990:	08003a35 	.word	0x08003a35
 8003994:	08003a35 	.word	0x08003a35
 8003998:	08003a35 	.word	0x08003a35
 800399c:	08003a35 	.word	0x08003a35
 80039a0:	08003a35 	.word	0x08003a35
 80039a4:	08003a35 	.word	0x08003a35
 80039a8:	08003a35 	.word	0x08003a35
 80039ac:	08003a23 	.word	0x08003a23
 80039b0:	08003a35 	.word	0x08003a35
 80039b4:	08003a35 	.word	0x08003a35
 80039b8:	08003a35 	.word	0x08003a35
 80039bc:	08003a35 	.word	0x08003a35
 80039c0:	08003a35 	.word	0x08003a35
 80039c4:	08003a35 	.word	0x08003a35
 80039c8:	08003a35 	.word	0x08003a35
 80039cc:	08003a3b 	.word	0x08003a3b
 80039d0:	08003a35 	.word	0x08003a35
 80039d4:	08003a35 	.word	0x08003a35
 80039d8:	08003a35 	.word	0x08003a35
 80039dc:	08003a35 	.word	0x08003a35
 80039e0:	08003a35 	.word	0x08003a35
 80039e4:	08003a35 	.word	0x08003a35
 80039e8:	08003a35 	.word	0x08003a35
 80039ec:	08003a3b 	.word	0x08003a3b
 80039f0:	08003a35 	.word	0x08003a35
 80039f4:	08003a35 	.word	0x08003a35
 80039f8:	08003a35 	.word	0x08003a35
 80039fc:	08003a35 	.word	0x08003a35
 8003a00:	08003a35 	.word	0x08003a35
 8003a04:	08003a35 	.word	0x08003a35
 8003a08:	08003a35 	.word	0x08003a35
 8003a0c:	08003a3b 	.word	0x08003a3b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3304      	adds	r3, #4
 8003a14:	2101      	movs	r1, #1
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fdf8 	bl	800460c <RCCEx_PLL2_Config>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003a20:	e00c      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3324      	adds	r3, #36	; 0x24
 8003a26:	2101      	movs	r1, #1
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fea1 	bl	8004770 <RCCEx_PLL3_Config>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003a32:	e003      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	75fb      	strb	r3, [r7, #23]
      break;
 8003a38:	e000      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003a3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a42:	4b46      	ldr	r3, [pc, #280]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a46:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a50:	4942      	ldr	r1, [pc, #264]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	654b      	str	r3, [r1, #84]	; 0x54
 8003a56:	e001      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d038      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a6c:	2b05      	cmp	r3, #5
 8003a6e:	d821      	bhi.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003a70:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a76:	bf00      	nop
 8003a78:	08003abb 	.word	0x08003abb
 8003a7c:	08003a91 	.word	0x08003a91
 8003a80:	08003aa3 	.word	0x08003aa3
 8003a84:	08003abb 	.word	0x08003abb
 8003a88:	08003abb 	.word	0x08003abb
 8003a8c:	08003abb 	.word	0x08003abb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3304      	adds	r3, #4
 8003a94:	2101      	movs	r1, #1
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fdb8 	bl	800460c <RCCEx_PLL2_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003aa0:	e00c      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3324      	adds	r3, #36	; 0x24
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fe61 	bl	8004770 <RCCEx_PLL3_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003ab2:	e003      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab8:	e000      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ac2:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	f023 0207 	bic.w	r2, r3, #7
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ace:	4923      	ldr	r1, [pc, #140]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	654b      	str	r3, [r1, #84]	; 0x54
 8003ad4:	e001      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
 8003ad8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d040      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aec:	2b05      	cmp	r3, #5
 8003aee:	d821      	bhi.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003af0:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003b3b 	.word	0x08003b3b
 8003afc:	08003b11 	.word	0x08003b11
 8003b00:	08003b23 	.word	0x08003b23
 8003b04:	08003b3b 	.word	0x08003b3b
 8003b08:	08003b3b 	.word	0x08003b3b
 8003b0c:	08003b3b 	.word	0x08003b3b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3304      	adds	r3, #4
 8003b14:	2101      	movs	r1, #1
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fd78 	bl	800460c <RCCEx_PLL2_Config>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003b20:	e00c      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3324      	adds	r3, #36	; 0x24
 8003b26:	2101      	movs	r1, #1
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fe21 	bl	8004770 <RCCEx_PLL3_Config>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003b32:	e003      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	75fb      	strb	r3, [r7, #23]
      break;
 8003b38:	e000      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003b3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d110      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b46:	f023 0207 	bic.w	r2, r3, #7
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b50:	4902      	ldr	r1, [pc, #8]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	658b      	str	r3, [r1, #88]	; 0x58
 8003b56:	e007      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003b58:	58024800 	.word	0x58024800
 8003b5c:	58024400 	.word	0x58024400
 8003b60:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b64:	7dfb      	ldrb	r3, [r7, #23]
 8003b66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d04b      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b7e:	d02e      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b84:	d828      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8a:	d02a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b90:	d822      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003b92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b96:	d026      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003b98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b9c:	d81c      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ba2:	d010      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ba8:	d816      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01d      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003bae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bb2:	d111      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fd26 	bl	800460c <RCCEx_PLL2_Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003bc4:	e012      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3324      	adds	r3, #36	; 0x24
 8003bca:	2102      	movs	r1, #2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fdcf 	bl	8004770 <RCCEx_PLL3_Config>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003bd6:	e009      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	75fb      	strb	r3, [r7, #23]
      break;
 8003bdc:	e006      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003bde:	bf00      	nop
 8003be0:	e004      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003be2:	bf00      	nop
 8003be4:	e002      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003be6:	bf00      	nop
 8003be8:	e000      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003bea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bf2:	4bb3      	ldr	r3, [pc, #716]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c00:	49af      	ldr	r1, [pc, #700]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	654b      	str	r3, [r1, #84]	; 0x54
 8003c06:	e001      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d04b      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c22:	d02e      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003c24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c28:	d828      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c2e:	d02a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c34:	d822      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003c36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c3a:	d026      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003c3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c40:	d81c      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c46:	d010      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c4c:	d816      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d01d      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c56:	d111      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fcd4 	bl	800460c <RCCEx_PLL2_Config>
 8003c64:	4603      	mov	r3, r0
 8003c66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003c68:	e012      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3324      	adds	r3, #36	; 0x24
 8003c6e:	2102      	movs	r1, #2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fd7d 	bl	8004770 <RCCEx_PLL3_Config>
 8003c76:	4603      	mov	r3, r0
 8003c78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003c7a:	e009      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c80:	e006      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003c82:	bf00      	nop
 8003c84:	e004      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003c86:	bf00      	nop
 8003c88:	e002      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003c8a:	bf00      	nop
 8003c8c:	e000      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003c8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10a      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c96:	4b8a      	ldr	r3, [pc, #552]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ca4:	4986      	ldr	r1, [pc, #536]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	658b      	str	r3, [r1, #88]	; 0x58
 8003caa:	e001      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cac:	7dfb      	ldrb	r3, [r7, #23]
 8003cae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d04b      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cc2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003cc6:	d02e      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003cc8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ccc:	d828      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd2:	d02a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd8:	d822      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003cda:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003cde:	d026      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003ce0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ce4:	d81c      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003ce6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cea:	d010      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003cec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cf0:	d816      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d01d      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cfa:	d111      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	2100      	movs	r1, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fc82 	bl	800460c <RCCEx_PLL2_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003d0c:	e012      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3324      	adds	r3, #36	; 0x24
 8003d12:	2102      	movs	r1, #2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fd2b 	bl	8004770 <RCCEx_PLL3_Config>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003d1e:	e009      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	75fb      	strb	r3, [r7, #23]
      break;
 8003d24:	e006      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003d26:	bf00      	nop
 8003d28:	e004      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003d2a:	bf00      	nop
 8003d2c:	e002      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003d2e:	bf00      	nop
 8003d30:	e000      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003d32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10a      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d3a:	4b61      	ldr	r3, [pc, #388]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d48:	495d      	ldr	r1, [pc, #372]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	658b      	str	r3, [r1, #88]	; 0x58
 8003d4e:	e001      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
 8003d52:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6a:	d10a      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3324      	adds	r3, #36	; 0x24
 8003d70:	2102      	movs	r1, #2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fcfc 	bl	8004770 <RCCEx_PLL3_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003d82:	4b4f      	ldr	r3, [pc, #316]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d90:	494b      	ldr	r1, [pc, #300]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0310 	and.w	r3, r3, #16
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d01a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dac:	d10a      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3324      	adds	r3, #36	; 0x24
 8003db2:	2102      	movs	r1, #2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fcdb 	bl	8004770 <RCCEx_PLL3_Config>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dc4:	4b3e      	ldr	r3, [pc, #248]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dd2:	493b      	ldr	r1, [pc, #236]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d034      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003dea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dee:	d01d      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003df0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003df4:	d817      	bhi.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfe:	d009      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003e00:	e011      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3304      	adds	r3, #4
 8003e06:	2100      	movs	r1, #0
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fbff 	bl	800460c <RCCEx_PLL2_Config>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003e12:	e00c      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3324      	adds	r3, #36	; 0x24
 8003e18:	2102      	movs	r1, #2
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fca8 	bl	8004770 <RCCEx_PLL3_Config>
 8003e20:	4603      	mov	r3, r0
 8003e22:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003e24:	e003      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
      break;
 8003e2a:	e000      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10a      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e34:	4b22      	ldr	r3, [pc, #136]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e42:	491f      	ldr	r1, [pc, #124]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	658b      	str	r3, [r1, #88]	; 0x58
 8003e48:	e001      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4a:	7dfb      	ldrb	r3, [r7, #23]
 8003e4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d036      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e64:	d01c      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003e66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e6a:	d816      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003e6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e70:	d003      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003e72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e76:	d007      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003e78:	e00f      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e7a:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7e:	4a10      	ldr	r2, [pc, #64]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003e86:	e00c      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3324      	adds	r3, #36	; 0x24
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fc6e 	bl	8004770 <RCCEx_PLL3_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003e98:	e003      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10d      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb6:	4902      	ldr	r1, [pc, #8]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	654b      	str	r3, [r1, #84]	; 0x54
 8003ebc:	e004      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8003ebe:	bf00      	nop
 8003ec0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
 8003ec6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d029      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee0:	d007      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8003ee2:	e00f      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ee4:	4b69      	ldr	r3, [pc, #420]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	4a68      	ldr	r2, [pc, #416]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003ef0:	e00b      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	2102      	movs	r1, #2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fb87 	bl	800460c <RCCEx_PLL2_Config>
 8003efe:	4603      	mov	r3, r0
 8003f00:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003f02:	e002      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	75fb      	strb	r3, [r7, #23]
      break;
 8003f08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f0a:	7dfb      	ldrb	r3, [r7, #23]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d109      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f10:	4b5e      	ldr	r3, [pc, #376]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1c:	495b      	ldr	r1, [pc, #364]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f22:	e001      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
 8003f26:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3324      	adds	r3, #36	; 0x24
 8003f38:	2102      	movs	r1, #2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fc18 	bl	8004770 <RCCEx_PLL3_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d032      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f60:	d017      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8003f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f66:	d811      	bhi.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f6c:	d013      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8003f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f72:	d80b      	bhi.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d010      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8003f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f7c:	d106      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f7e:	4b43      	ldr	r3, [pc, #268]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	4a42      	ldr	r2, [pc, #264]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003f8a:	e007      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f90:	e004      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003f92:	bf00      	nop
 8003f94:	e002      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003f96:	bf00      	nop
 8003f98:	e000      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003f9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fa2:	4b3a      	ldr	r3, [pc, #232]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb0:	4936      	ldr	r1, [pc, #216]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	654b      	str	r3, [r1, #84]	; 0x54
 8003fb6:	e001      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb8:	7dfb      	ldrb	r3, [r7, #23]
 8003fba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003fc8:	4b30      	ldr	r3, [pc, #192]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fd4:	492d      	ldr	r1, [pc, #180]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fe6:	4b29      	ldr	r3, [pc, #164]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ff2:	4926      	ldr	r1, [pc, #152]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004004:	4b21      	ldr	r3, [pc, #132]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004008:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	491e      	ldr	r1, [pc, #120]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004012:	4313      	orrs	r3, r2
 8004014:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00d      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004022:	4b1a      	ldr	r3, [pc, #104]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	4a19      	ldr	r2, [pc, #100]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004028:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800402c:	6113      	str	r3, [r2, #16]
 800402e:	4b17      	ldr	r3, [pc, #92]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004038:	4914      	ldr	r1, [pc, #80]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800403a:	4313      	orrs	r3, r2
 800403c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	da08      	bge.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004046:	4b11      	ldr	r3, [pc, #68]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004052:	490e      	ldr	r1, [pc, #56]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004054:	4313      	orrs	r3, r2
 8004056:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d009      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004064:	4b09      	ldr	r3, [pc, #36]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004068:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	4906      	ldr	r1, [pc, #24]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004074:	4313      	orrs	r3, r2
 8004076:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004078:	7dbb      	ldrb	r3, [r7, #22]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	e000      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	58024400 	.word	0x58024400

08004090 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004094:	f7ff f852 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8004098:	4602      	mov	r2, r0
 800409a:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	091b      	lsrs	r3, r3, #4
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	4904      	ldr	r1, [pc, #16]	; (80040b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80040a6:	5ccb      	ldrb	r3, [r1, r3]
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	58024400 	.word	0x58024400
 80040b8:	0800b480 	.word	0x0800b480

080040bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80040bc:	b480      	push	{r7}
 80040be:	b089      	sub	sp, #36	; 0x24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040c4:	4ba1      	ldr	r3, [pc, #644]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80040ce:	4b9f      	ldr	r3, [pc, #636]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	0b1b      	lsrs	r3, r3, #12
 80040d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80040da:	4b9c      	ldr	r3, [pc, #624]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	091b      	lsrs	r3, r3, #4
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80040e6:	4b99      	ldr	r3, [pc, #612]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ea:	08db      	lsrs	r3, r3, #3
 80040ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	ee07 3a90 	vmov	s15, r3
 80040fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8111 	beq.w	800432c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b02      	cmp	r3, #2
 800410e:	f000 8083 	beq.w	8004218 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	2b02      	cmp	r3, #2
 8004116:	f200 80a1 	bhi.w	800425c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d056      	beq.n	80041d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004126:	e099      	b.n	800425c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004128:	4b88      	ldr	r3, [pc, #544]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d02d      	beq.n	8004190 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004134:	4b85      	ldr	r3, [pc, #532]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	08db      	lsrs	r3, r3, #3
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	4a84      	ldr	r2, [pc, #528]	; (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
 8004144:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	ee07 3a90 	vmov	s15, r3
 800414c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800415e:	4b7b      	ldr	r3, [pc, #492]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800416e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004172:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800417a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800417e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800418e:	e087      	b.n	80042a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800419e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a2:	4b6a      	ldr	r3, [pc, #424]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80041b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041d2:	e065      	b.n	80042a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800435c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041e6:	4b59      	ldr	r3, [pc, #356]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800420a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800420e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004212:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004216:	e043      	b.n	80042a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	ee07 3a90 	vmov	s15, r3
 800421e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004222:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800422a:	4b48      	ldr	r3, [pc, #288]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800423a:	ed97 6a03 	vldr	s12, [r7, #12]
 800423e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800424a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800424e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004256:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800425a:	e021      	b.n	80042a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004266:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800435c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800426a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800426e:	4b37      	ldr	r3, [pc, #220]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004276:	ee07 3a90 	vmov	s15, r3
 800427a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800427e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004282:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800428a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800428e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800429e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80042a0:	4b2a      	ldr	r3, [pc, #168]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	0a5b      	lsrs	r3, r3, #9
 80042a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80042be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042c6:	ee17 2a90 	vmov	r2, s15
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80042ce:	4b1f      	ldr	r3, [pc, #124]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	0c1b      	lsrs	r3, r3, #16
 80042d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042d8:	ee07 3a90 	vmov	s15, r3
 80042dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80042ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042f4:	ee17 2a90 	vmov	r2, s15
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80042fc:	4b13      	ldr	r3, [pc, #76]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	0e1b      	lsrs	r3, r3, #24
 8004302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004306:	ee07 3a90 	vmov	s15, r3
 800430a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800430e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004312:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004316:	edd7 6a07 	vldr	s13, [r7, #28]
 800431a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800431e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004322:	ee17 2a90 	vmov	r2, s15
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800432a:	e008      	b.n	800433e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	609a      	str	r2, [r3, #8]
}
 800433e:	bf00      	nop
 8004340:	3724      	adds	r7, #36	; 0x24
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	58024400 	.word	0x58024400
 8004350:	03d09000 	.word	0x03d09000
 8004354:	46000000 	.word	0x46000000
 8004358:	4c742400 	.word	0x4c742400
 800435c:	4a742400 	.word	0x4a742400
 8004360:	4af42400 	.word	0x4af42400

08004364 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004364:	b480      	push	{r7}
 8004366:	b089      	sub	sp, #36	; 0x24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800436c:	4ba1      	ldr	r3, [pc, #644]	; (80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004376:	4b9f      	ldr	r3, [pc, #636]	; (80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	0d1b      	lsrs	r3, r3, #20
 800437c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004380:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004382:	4b9c      	ldr	r3, [pc, #624]	; (80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	0a1b      	lsrs	r3, r3, #8
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800438e:	4b99      	ldr	r3, [pc, #612]	; (80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	08db      	lsrs	r3, r3, #3
 8004394:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	fb02 f303 	mul.w	r3, r2, r3
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 8111 	beq.w	80045d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	f000 8083 	beq.w	80044c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	f200 80a1 	bhi.w	8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d056      	beq.n	800447c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80043ce:	e099      	b.n	8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043d0:	4b88      	ldr	r3, [pc, #544]	; (80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d02d      	beq.n	8004438 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043dc:	4b85      	ldr	r3, [pc, #532]	; (80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	08db      	lsrs	r3, r3, #3
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	4a84      	ldr	r2, [pc, #528]	; (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
 80043ec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	ee07 3a90 	vmov	s15, r3
 80043f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	ee07 3a90 	vmov	s15, r3
 80043fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004406:	4b7b      	ldr	r3, [pc, #492]	; (80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004416:	ed97 6a03 	vldr	s12, [r7, #12]
 800441a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80045fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800441e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800442a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800442e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004432:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004436:	e087      	b.n	8004548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004442:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004600 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800444a:	4b6a      	ldr	r3, [pc, #424]	; (80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800445a:	ed97 6a03 	vldr	s12, [r7, #12]
 800445e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80045fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800446a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800446e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004476:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800447a:	e065      	b.n	8004548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004486:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800448a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800448e:	4b59      	ldr	r3, [pc, #356]	; (80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800449e:	ed97 6a03 	vldr	s12, [r7, #12]
 80044a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80045fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044be:	e043      	b.n	8004548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80044ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d2:	4b48      	ldr	r3, [pc, #288]	; (80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80045fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004502:	e021      	b.n	8004548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004516:	4b37      	ldr	r3, [pc, #220]	; (80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004526:	ed97 6a03 	vldr	s12, [r7, #12]
 800452a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80045fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800452e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004542:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004546:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004548:	4b2a      	ldr	r3, [pc, #168]	; (80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	0a5b      	lsrs	r3, r3, #9
 800454e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004552:	ee07 3a90 	vmov	s15, r3
 8004556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800455e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004562:	edd7 6a07 	vldr	s13, [r7, #28]
 8004566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800456a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800456e:	ee17 2a90 	vmov	r2, s15
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004576:	4b1f      	ldr	r3, [pc, #124]	; (80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	0c1b      	lsrs	r3, r3, #16
 800457c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004580:	ee07 3a90 	vmov	s15, r3
 8004584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800458c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004590:	edd7 6a07 	vldr	s13, [r7, #28]
 8004594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800459c:	ee17 2a90 	vmov	r2, s15
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80045a4:	4b13      	ldr	r3, [pc, #76]	; (80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	0e1b      	lsrs	r3, r3, #24
 80045aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ae:	ee07 3a90 	vmov	s15, r3
 80045b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045be:	edd7 6a07 	vldr	s13, [r7, #28]
 80045c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ca:	ee17 2a90 	vmov	r2, s15
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80045d2:	e008      	b.n	80045e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	609a      	str	r2, [r3, #8]
}
 80045e6:	bf00      	nop
 80045e8:	3724      	adds	r7, #36	; 0x24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	58024400 	.word	0x58024400
 80045f8:	03d09000 	.word	0x03d09000
 80045fc:	46000000 	.word	0x46000000
 8004600:	4c742400 	.word	0x4c742400
 8004604:	4a742400 	.word	0x4a742400
 8004608:	4af42400 	.word	0x4af42400

0800460c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800461a:	4b53      	ldr	r3, [pc, #332]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	2b03      	cmp	r3, #3
 8004624:	d101      	bne.n	800462a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e099      	b.n	800475e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800462a:	4b4f      	ldr	r3, [pc, #316]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a4e      	ldr	r2, [pc, #312]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 8004630:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004636:	f7fc fdc1 	bl	80011bc <HAL_GetTick>
 800463a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800463c:	e008      	b.n	8004650 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800463e:	f7fc fdbd 	bl	80011bc <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e086      	b.n	800475e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004650:	4b45      	ldr	r3, [pc, #276]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1f0      	bne.n	800463e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800465c:	4b42      	ldr	r3, [pc, #264]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	031b      	lsls	r3, r3, #12
 800466a:	493f      	ldr	r1, [pc, #252]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 800466c:	4313      	orrs	r3, r2
 800466e:	628b      	str	r3, [r1, #40]	; 0x28
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	3b01      	subs	r3, #1
 8004676:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	3b01      	subs	r3, #1
 8004680:	025b      	lsls	r3, r3, #9
 8004682:	b29b      	uxth	r3, r3
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	3b01      	subs	r3, #1
 800468c:	041b      	lsls	r3, r3, #16
 800468e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	3b01      	subs	r3, #1
 800469a:	061b      	lsls	r3, r3, #24
 800469c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046a0:	4931      	ldr	r1, [pc, #196]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80046a6:	4b30      	ldr	r3, [pc, #192]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	492d      	ldr	r1, [pc, #180]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80046b8:	4b2b      	ldr	r3, [pc, #172]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	f023 0220 	bic.w	r2, r3, #32
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	4928      	ldr	r1, [pc, #160]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80046ca:	4b27      	ldr	r3, [pc, #156]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 80046cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ce:	4a26      	ldr	r2, [pc, #152]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 80046d0:	f023 0310 	bic.w	r3, r3, #16
 80046d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80046d6:	4b24      	ldr	r3, [pc, #144]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 80046d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046da:	4b24      	ldr	r3, [pc, #144]	; (800476c <RCCEx_PLL2_Config+0x160>)
 80046dc:	4013      	ands	r3, r2
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	69d2      	ldr	r2, [r2, #28]
 80046e2:	00d2      	lsls	r2, r2, #3
 80046e4:	4920      	ldr	r1, [pc, #128]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80046ea:	4b1f      	ldr	r3, [pc, #124]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	4a1e      	ldr	r2, [pc, #120]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 80046f0:	f043 0310 	orr.w	r3, r3, #16
 80046f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d106      	bne.n	800470a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80046fc:	4b1a      	ldr	r3, [pc, #104]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	4a19      	ldr	r2, [pc, #100]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 8004702:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004706:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004708:	e00f      	b.n	800472a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d106      	bne.n	800471e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004710:	4b15      	ldr	r3, [pc, #84]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	4a14      	ldr	r2, [pc, #80]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 8004716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800471a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800471c:	e005      	b.n	800472a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800471e:	4b12      	ldr	r3, [pc, #72]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	4a11      	ldr	r2, [pc, #68]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 8004724:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004728:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800472a:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a0e      	ldr	r2, [pc, #56]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 8004730:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004736:	f7fc fd41 	bl	80011bc <HAL_GetTick>
 800473a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800473c:	e008      	b.n	8004750 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800473e:	f7fc fd3d 	bl	80011bc <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e006      	b.n	800475e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004750:	4b05      	ldr	r3, [pc, #20]	; (8004768 <RCCEx_PLL2_Config+0x15c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800475c:	7bfb      	ldrb	r3, [r7, #15]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	58024400 	.word	0x58024400
 800476c:	ffff0007 	.word	0xffff0007

08004770 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800477e:	4b53      	ldr	r3, [pc, #332]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 8004780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b03      	cmp	r3, #3
 8004788:	d101      	bne.n	800478e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e099      	b.n	80048c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800478e:	4b4f      	ldr	r3, [pc, #316]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a4e      	ldr	r2, [pc, #312]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 8004794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004798:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800479a:	f7fc fd0f 	bl	80011bc <HAL_GetTick>
 800479e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047a0:	e008      	b.n	80047b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80047a2:	f7fc fd0b 	bl	80011bc <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e086      	b.n	80048c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047b4:	4b45      	ldr	r3, [pc, #276]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1f0      	bne.n	80047a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80047c0:	4b42      	ldr	r3, [pc, #264]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	051b      	lsls	r3, r3, #20
 80047ce:	493f      	ldr	r1, [pc, #252]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	628b      	str	r3, [r1, #40]	; 0x28
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	3b01      	subs	r3, #1
 80047da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	025b      	lsls	r3, r3, #9
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	041b      	lsls	r3, r3, #16
 80047f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	061b      	lsls	r3, r3, #24
 8004800:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004804:	4931      	ldr	r1, [pc, #196]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 8004806:	4313      	orrs	r3, r2
 8004808:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800480a:	4b30      	ldr	r3, [pc, #192]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	492d      	ldr	r1, [pc, #180]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 8004818:	4313      	orrs	r3, r2
 800481a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800481c:	4b2b      	ldr	r3, [pc, #172]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	4928      	ldr	r1, [pc, #160]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 800482a:	4313      	orrs	r3, r2
 800482c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800482e:	4b27      	ldr	r3, [pc, #156]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	4a26      	ldr	r2, [pc, #152]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 8004834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004838:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800483a:	4b24      	ldr	r3, [pc, #144]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 800483c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800483e:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <RCCEx_PLL3_Config+0x160>)
 8004840:	4013      	ands	r3, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	69d2      	ldr	r2, [r2, #28]
 8004846:	00d2      	lsls	r2, r2, #3
 8004848:	4920      	ldr	r1, [pc, #128]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 800484a:	4313      	orrs	r3, r2
 800484c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800484e:	4b1f      	ldr	r3, [pc, #124]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	4a1e      	ldr	r2, [pc, #120]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 8004854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004858:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d106      	bne.n	800486e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004860:	4b1a      	ldr	r3, [pc, #104]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	4a19      	ldr	r2, [pc, #100]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 8004866:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800486a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800486c:	e00f      	b.n	800488e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d106      	bne.n	8004882 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004874:	4b15      	ldr	r3, [pc, #84]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	4a14      	ldr	r2, [pc, #80]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 800487a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800487e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004880:	e005      	b.n	800488e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004882:	4b12      	ldr	r3, [pc, #72]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	4a11      	ldr	r2, [pc, #68]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 8004888:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800488c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800488e:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a0e      	ldr	r2, [pc, #56]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 8004894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004898:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800489a:	f7fc fc8f 	bl	80011bc <HAL_GetTick>
 800489e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048a0:	e008      	b.n	80048b4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80048a2:	f7fc fc8b 	bl	80011bc <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e006      	b.n	80048c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <RCCEx_PLL3_Config+0x15c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0f0      	beq.n	80048a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	58024400 	.word	0x58024400
 80048d0:	ffff0007 	.word	0xffff0007

080048d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e049      	b.n	800497a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f841 	bl	8004982 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3304      	adds	r3, #4
 8004910:	4619      	mov	r1, r3
 8004912:	4610      	mov	r0, r2
 8004914:	f000 fa00 	bl	8004d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d001      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e054      	b.n	8004a5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a26      	ldr	r2, [pc, #152]	; (8004a68 <HAL_TIM_Base_Start_IT+0xd0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d022      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x80>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049da:	d01d      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x80>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a22      	ldr	r2, [pc, #136]	; (8004a6c <HAL_TIM_Base_Start_IT+0xd4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d018      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x80>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a21      	ldr	r2, [pc, #132]	; (8004a70 <HAL_TIM_Base_Start_IT+0xd8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d013      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x80>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a1f      	ldr	r2, [pc, #124]	; (8004a74 <HAL_TIM_Base_Start_IT+0xdc>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00e      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x80>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1e      	ldr	r2, [pc, #120]	; (8004a78 <HAL_TIM_Base_Start_IT+0xe0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d009      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x80>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1c      	ldr	r2, [pc, #112]	; (8004a7c <HAL_TIM_Base_Start_IT+0xe4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d004      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x80>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <HAL_TIM_Base_Start_IT+0xe8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d115      	bne.n	8004a44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	4b19      	ldr	r3, [pc, #100]	; (8004a84 <HAL_TIM_Base_Start_IT+0xec>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b06      	cmp	r3, #6
 8004a28:	d015      	beq.n	8004a56 <HAL_TIM_Base_Start_IT+0xbe>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a30:	d011      	beq.n	8004a56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f042 0201 	orr.w	r2, r2, #1
 8004a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a42:	e008      	b.n	8004a56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	e000      	b.n	8004a58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40000800 	.word	0x40000800
 8004a74:	40000c00 	.word	0x40000c00
 8004a78:	40010400 	.word	0x40010400
 8004a7c:	40001800 	.word	0x40001800
 8004a80:	40014000 	.word	0x40014000
 8004a84:	00010007 	.word	0x00010007

08004a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d122      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d11b      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0202 	mvn.w	r2, #2
 8004ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f905 	bl	8004cda <HAL_TIM_IC_CaptureCallback>
 8004ad0:	e005      	b.n	8004ade <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f8f7 	bl	8004cc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f908 	bl	8004cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f003 0304 	and.w	r3, r3, #4
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d122      	bne.n	8004b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d11b      	bne.n	8004b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0204 	mvn.w	r2, #4
 8004b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f8db 	bl	8004cda <HAL_TIM_IC_CaptureCallback>
 8004b24:	e005      	b.n	8004b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f8cd 	bl	8004cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f8de 	bl	8004cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b08      	cmp	r3, #8
 8004b44:	d122      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d11b      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0208 	mvn.w	r2, #8
 8004b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2204      	movs	r2, #4
 8004b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f8b1 	bl	8004cda <HAL_TIM_IC_CaptureCallback>
 8004b78:	e005      	b.n	8004b86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f8a3 	bl	8004cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f8b4 	bl	8004cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f003 0310 	and.w	r3, r3, #16
 8004b96:	2b10      	cmp	r3, #16
 8004b98:	d122      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b10      	cmp	r3, #16
 8004ba6:	d11b      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0210 	mvn.w	r2, #16
 8004bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2208      	movs	r2, #8
 8004bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f887 	bl	8004cda <HAL_TIM_IC_CaptureCallback>
 8004bcc:	e005      	b.n	8004bda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f879 	bl	8004cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f88a 	bl	8004cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d10e      	bne.n	8004c0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d107      	bne.n	8004c0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0201 	mvn.w	r2, #1
 8004c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fc f80a 	bl	8000c20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c16:	2b80      	cmp	r3, #128	; 0x80
 8004c18:	d10e      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c24:	2b80      	cmp	r3, #128	; 0x80
 8004c26:	d107      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f914 	bl	8004e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c46:	d10e      	bne.n	8004c66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c52:	2b80      	cmp	r3, #128	; 0x80
 8004c54:	d107      	bne.n	8004c66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f907 	bl	8004e74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c70:	2b40      	cmp	r3, #64	; 0x40
 8004c72:	d10e      	bne.n	8004c92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b40      	cmp	r3, #64	; 0x40
 8004c80:	d107      	bne.n	8004c92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f838 	bl	8004d02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	d10e      	bne.n	8004cbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	d107      	bne.n	8004cbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f06f 0220 	mvn.w	r2, #32
 8004cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f8c7 	bl	8004e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cbe:	bf00      	nop
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
	...

08004d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a40      	ldr	r2, [pc, #256]	; (8004e2c <TIM_Base_SetConfig+0x114>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d013      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d36:	d00f      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a3d      	ldr	r2, [pc, #244]	; (8004e30 <TIM_Base_SetConfig+0x118>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00b      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a3c      	ldr	r2, [pc, #240]	; (8004e34 <TIM_Base_SetConfig+0x11c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d007      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a3b      	ldr	r2, [pc, #236]	; (8004e38 <TIM_Base_SetConfig+0x120>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a3a      	ldr	r2, [pc, #232]	; (8004e3c <TIM_Base_SetConfig+0x124>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d108      	bne.n	8004d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a2f      	ldr	r2, [pc, #188]	; (8004e2c <TIM_Base_SetConfig+0x114>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d01f      	beq.n	8004db2 <TIM_Base_SetConfig+0x9a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d78:	d01b      	beq.n	8004db2 <TIM_Base_SetConfig+0x9a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a2c      	ldr	r2, [pc, #176]	; (8004e30 <TIM_Base_SetConfig+0x118>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d017      	beq.n	8004db2 <TIM_Base_SetConfig+0x9a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a2b      	ldr	r2, [pc, #172]	; (8004e34 <TIM_Base_SetConfig+0x11c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <TIM_Base_SetConfig+0x9a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a2a      	ldr	r2, [pc, #168]	; (8004e38 <TIM_Base_SetConfig+0x120>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00f      	beq.n	8004db2 <TIM_Base_SetConfig+0x9a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a29      	ldr	r2, [pc, #164]	; (8004e3c <TIM_Base_SetConfig+0x124>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00b      	beq.n	8004db2 <TIM_Base_SetConfig+0x9a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a28      	ldr	r2, [pc, #160]	; (8004e40 <TIM_Base_SetConfig+0x128>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d007      	beq.n	8004db2 <TIM_Base_SetConfig+0x9a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a27      	ldr	r2, [pc, #156]	; (8004e44 <TIM_Base_SetConfig+0x12c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d003      	beq.n	8004db2 <TIM_Base_SetConfig+0x9a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a26      	ldr	r2, [pc, #152]	; (8004e48 <TIM_Base_SetConfig+0x130>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d108      	bne.n	8004dc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a10      	ldr	r2, [pc, #64]	; (8004e2c <TIM_Base_SetConfig+0x114>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00f      	beq.n	8004e10 <TIM_Base_SetConfig+0xf8>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a12      	ldr	r2, [pc, #72]	; (8004e3c <TIM_Base_SetConfig+0x124>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00b      	beq.n	8004e10 <TIM_Base_SetConfig+0xf8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a11      	ldr	r2, [pc, #68]	; (8004e40 <TIM_Base_SetConfig+0x128>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d007      	beq.n	8004e10 <TIM_Base_SetConfig+0xf8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a10      	ldr	r2, [pc, #64]	; (8004e44 <TIM_Base_SetConfig+0x12c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <TIM_Base_SetConfig+0xf8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a0f      	ldr	r2, [pc, #60]	; (8004e48 <TIM_Base_SetConfig+0x130>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d103      	bne.n	8004e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	615a      	str	r2, [r3, #20]
}
 8004e1e:	bf00      	nop
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40010000 	.word	0x40010000
 8004e30:	40000400 	.word	0x40000400
 8004e34:	40000800 	.word	0x40000800
 8004e38:	40000c00 	.word	0x40000c00
 8004e3c:	40010400 	.word	0x40010400
 8004e40:	40014000 	.word	0x40014000
 8004e44:	40014400 	.word	0x40014400
 8004e48:	40014800 	.word	0x40014800

08004e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e042      	b.n	8004f20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d106      	bne.n	8004eb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7fc f87d 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2224      	movs	r2, #36	; 0x24
 8004eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0201 	bic.w	r2, r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fdaa 	bl	8005a24 <UART_SetConfig>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e022      	b.n	8004f20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f001 fbfc 	bl	80066e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ef6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0201 	orr.w	r2, r2, #1
 8004f16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f001 fc83 	bl	8006824 <UART_CheckIdleState>
 8004f1e:	4603      	mov	r3, r0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08a      	sub	sp, #40	; 0x28
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	4613      	mov	r3, r2
 8004f36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	f040 8083 	bne.w	800504a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <HAL_UART_Transmit+0x28>
 8004f4a:	88fb      	ldrh	r3, [r7, #6]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e07b      	b.n	800504c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_UART_Transmit+0x3a>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e074      	b.n	800504c <HAL_UART_Transmit+0x124>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2221      	movs	r2, #33	; 0x21
 8004f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f7a:	f7fc f91f 	bl	80011bc <HAL_GetTick>
 8004f7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	88fa      	ldrh	r2, [r7, #6]
 8004f84:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	88fa      	ldrh	r2, [r7, #6]
 8004f8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f98:	d108      	bne.n	8004fac <HAL_UART_Transmit+0x84>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d104      	bne.n	8004fac <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	e003      	b.n	8004fb4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004fbc:	e02c      	b.n	8005018 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2180      	movs	r1, #128	; 0x80
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f001 fc76 	bl	80068ba <UART_WaitOnFlagUntilTimeout>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e039      	b.n	800504c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10b      	bne.n	8004ff6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	3302      	adds	r3, #2
 8004ff2:	61bb      	str	r3, [r7, #24]
 8004ff4:	e007      	b.n	8005006 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	781a      	ldrb	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	3301      	adds	r3, #1
 8005004:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800501e:	b29b      	uxth	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1cc      	bne.n	8004fbe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2200      	movs	r2, #0
 800502c:	2140      	movs	r1, #64	; 0x40
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f001 fc43 	bl	80068ba <UART_WaitOnFlagUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e006      	b.n	800504c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2220      	movs	r2, #32
 8005042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	e000      	b.n	800504c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800504a:	2302      	movs	r3, #2
  }
}
 800504c:	4618      	mov	r0, r3
 800504e:	3720      	adds	r7, #32
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b08a      	sub	sp, #40	; 0x28
 8005058:	af02      	add	r7, sp, #8
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	4613      	mov	r3, r2
 8005062:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506a:	2b20      	cmp	r3, #32
 800506c:	f040 80c0 	bne.w	80051f0 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <HAL_UART_Receive+0x28>
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e0b8      	b.n	80051f2 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_UART_Receive+0x3a>
 800508a:	2302      	movs	r3, #2
 800508c:	e0b1      	b.n	80051f2 <HAL_UART_Receive+0x19e>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2222      	movs	r2, #34	; 0x22
 80050a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050ac:	f7fc f886 	bl	80011bc <HAL_GetTick>
 80050b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	88fa      	ldrh	r2, [r7, #6]
 80050b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	88fa      	ldrh	r2, [r7, #6]
 80050be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ca:	d10e      	bne.n	80050ea <HAL_UART_Receive+0x96>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d105      	bne.n	80050e0 <HAL_UART_Receive+0x8c>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80050da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80050de:	e02d      	b.n	800513c <HAL_UART_Receive+0xe8>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	22ff      	movs	r2, #255	; 0xff
 80050e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80050e8:	e028      	b.n	800513c <HAL_UART_Receive+0xe8>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10d      	bne.n	800510e <HAL_UART_Receive+0xba>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d104      	bne.n	8005104 <HAL_UART_Receive+0xb0>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	22ff      	movs	r2, #255	; 0xff
 80050fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005102:	e01b      	b.n	800513c <HAL_UART_Receive+0xe8>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	227f      	movs	r2, #127	; 0x7f
 8005108:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800510c:	e016      	b.n	800513c <HAL_UART_Receive+0xe8>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005116:	d10d      	bne.n	8005134 <HAL_UART_Receive+0xe0>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d104      	bne.n	800512a <HAL_UART_Receive+0xd6>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	227f      	movs	r2, #127	; 0x7f
 8005124:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005128:	e008      	b.n	800513c <HAL_UART_Receive+0xe8>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	223f      	movs	r2, #63	; 0x3f
 800512e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005132:	e003      	b.n	800513c <HAL_UART_Receive+0xe8>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005142:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800514c:	d108      	bne.n	8005160 <HAL_UART_Receive+0x10c>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d104      	bne.n	8005160 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8005156:	2300      	movs	r3, #0
 8005158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	61bb      	str	r3, [r7, #24]
 800515e:	e003      	b.n	8005168 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005164:	2300      	movs	r3, #0
 8005166:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005170:	e032      	b.n	80051d8 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2200      	movs	r2, #0
 800517a:	2120      	movs	r1, #32
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f001 fb9c 	bl	80068ba <UART_WaitOnFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e032      	b.n	80051f2 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10c      	bne.n	80051ac <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	b29a      	uxth	r2, r3
 800519a:	8a7b      	ldrh	r3, [r7, #18]
 800519c:	4013      	ands	r3, r2
 800519e:	b29a      	uxth	r2, r3
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	3302      	adds	r3, #2
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	e00c      	b.n	80051c6 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	8a7b      	ldrh	r3, [r7, #18]
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	4013      	ands	r3, r2
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	3301      	adds	r3, #1
 80051c4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	3b01      	subs	r3, #1
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051de:	b29b      	uxth	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1c6      	bne.n	8005172 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	e000      	b.n	80051f2 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80051f0:	2302      	movs	r3, #2
  }
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3720      	adds	r7, #32
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08a      	sub	sp, #40	; 0x28
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	4613      	mov	r3, r2
 8005208:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005210:	2b20      	cmp	r3, #32
 8005212:	d142      	bne.n	800529a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <HAL_UART_Receive_IT+0x24>
 800521a:	88fb      	ldrh	r3, [r7, #6]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e03b      	b.n	800529c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800522a:	2b01      	cmp	r3, #1
 800522c:	d101      	bne.n	8005232 <HAL_UART_Receive_IT+0x36>
 800522e:	2302      	movs	r3, #2
 8005230:	e034      	b.n	800529c <HAL_UART_Receive_IT+0xa0>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a17      	ldr	r2, [pc, #92]	; (80052a4 <HAL_UART_Receive_IT+0xa8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01f      	beq.n	800528a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d018      	beq.n	800528a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	e853 3f00 	ldrex	r3, [r3]
 8005264:	613b      	str	r3, [r7, #16]
   return(result);
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	623b      	str	r3, [r7, #32]
 8005278:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	69f9      	ldr	r1, [r7, #28]
 800527c:	6a3a      	ldr	r2, [r7, #32]
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	61bb      	str	r3, [r7, #24]
   return(result);
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e6      	bne.n	8005258 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800528a:	88fb      	ldrh	r3, [r7, #6]
 800528c:	461a      	mov	r2, r3
 800528e:	68b9      	ldr	r1, [r7, #8]
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f001 fbdb 	bl	8006a4c <UART_Start_Receive_IT>
 8005296:	4603      	mov	r3, r0
 8005298:	e000      	b.n	800529c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800529a:	2302      	movs	r3, #2
  }
}
 800529c:	4618      	mov	r0, r3
 800529e:	3728      	adds	r7, #40	; 0x28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	58000c00 	.word	0x58000c00

080052a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b0ba      	sub	sp, #232	; 0xe8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80052d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80052d6:	4013      	ands	r3, r2
 80052d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80052dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d11b      	bne.n	800531c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e8:	f003 0320 	and.w	r3, r3, #32
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d015      	beq.n	800531c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80052f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f4:	f003 0320 	and.w	r3, r3, #32
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d105      	bne.n	8005308 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80052fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d009      	beq.n	800531c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 835a 	beq.w	80059c6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	4798      	blx	r3
      }
      return;
 800531a:	e354      	b.n	80059c6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800531c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 811f 	beq.w	8005564 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005326:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800532a:	4b8b      	ldr	r3, [pc, #556]	; (8005558 <HAL_UART_IRQHandler+0x2b0>)
 800532c:	4013      	ands	r3, r2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005332:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005336:	4b89      	ldr	r3, [pc, #548]	; (800555c <HAL_UART_IRQHandler+0x2b4>)
 8005338:	4013      	ands	r3, r2
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 8112 	beq.w	8005564 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d011      	beq.n	8005370 <HAL_UART_IRQHandler+0xc8>
 800534c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00b      	beq.n	8005370 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2201      	movs	r2, #1
 800535e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005366:	f043 0201 	orr.w	r2, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d011      	beq.n	80053a0 <HAL_UART_IRQHandler+0xf8>
 800537c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00b      	beq.n	80053a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2202      	movs	r2, #2
 800538e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005396:	f043 0204 	orr.w	r2, r3, #4
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d011      	beq.n	80053d0 <HAL_UART_IRQHandler+0x128>
 80053ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00b      	beq.n	80053d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2204      	movs	r2, #4
 80053be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053c6:	f043 0202 	orr.w	r2, r3, #2
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d017      	beq.n	800540c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80053dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e0:	f003 0320 	and.w	r3, r3, #32
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d105      	bne.n	80053f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80053e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80053ec:	4b5a      	ldr	r3, [pc, #360]	; (8005558 <HAL_UART_IRQHandler+0x2b0>)
 80053ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00b      	beq.n	800540c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2208      	movs	r2, #8
 80053fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005402:	f043 0208 	orr.w	r2, r3, #8
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800540c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005414:	2b00      	cmp	r3, #0
 8005416:	d012      	beq.n	800543e <HAL_UART_IRQHandler+0x196>
 8005418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800541c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00c      	beq.n	800543e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800542c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005434:	f043 0220 	orr.w	r2, r3, #32
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 82c0 	beq.w	80059ca <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800544a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800544e:	f003 0320 	and.w	r3, r3, #32
 8005452:	2b00      	cmp	r3, #0
 8005454:	d013      	beq.n	800547e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800545a:	f003 0320 	and.w	r3, r3, #32
 800545e:	2b00      	cmp	r3, #0
 8005460:	d105      	bne.n	800546e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d007      	beq.n	800547e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005484:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005492:	2b40      	cmp	r3, #64	; 0x40
 8005494:	d005      	beq.n	80054a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005496:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800549a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d04f      	beq.n	8005542 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f001 fbfc 	bl	8006ca0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b2:	2b40      	cmp	r3, #64	; 0x40
 80054b4:	d141      	bne.n	800553a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3308      	adds	r3, #8
 80054bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3308      	adds	r3, #8
 80054de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1d9      	bne.n	80054b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d013      	beq.n	8005532 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800550e:	4a14      	ldr	r2, [pc, #80]	; (8005560 <HAL_UART_IRQHandler+0x2b8>)
 8005510:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005516:	4618      	mov	r0, r3
 8005518:	f7fc fa5a 	bl	80019d0 <HAL_DMA_Abort_IT>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d017      	beq.n	8005552 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800552c:	4610      	mov	r0, r2
 800552e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005530:	e00f      	b.n	8005552 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fa60 	bl	80059f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005538:	e00b      	b.n	8005552 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 fa5c 	bl	80059f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005540:	e007      	b.n	8005552 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fa58 	bl	80059f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005550:	e23b      	b.n	80059ca <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005552:	bf00      	nop
    return;
 8005554:	e239      	b.n	80059ca <HAL_UART_IRQHandler+0x722>
 8005556:	bf00      	nop
 8005558:	10000001 	.word	0x10000001
 800555c:	04000120 	.word	0x04000120
 8005560:	08006d6d 	.word	0x08006d6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005568:	2b01      	cmp	r3, #1
 800556a:	f040 81ce 	bne.w	800590a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800556e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005572:	f003 0310 	and.w	r3, r3, #16
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 81c7 	beq.w	800590a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800557c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005580:	f003 0310 	and.w	r3, r3, #16
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 81c0 	beq.w	800590a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2210      	movs	r2, #16
 8005590:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559c:	2b40      	cmp	r3, #64	; 0x40
 800559e:	f040 813b 	bne.w	8005818 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a8b      	ldr	r2, [pc, #556]	; (80057d8 <HAL_UART_IRQHandler+0x530>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d059      	beq.n	8005662 <HAL_UART_IRQHandler+0x3ba>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a89      	ldr	r2, [pc, #548]	; (80057dc <HAL_UART_IRQHandler+0x534>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d053      	beq.n	8005662 <HAL_UART_IRQHandler+0x3ba>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a87      	ldr	r2, [pc, #540]	; (80057e0 <HAL_UART_IRQHandler+0x538>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d04d      	beq.n	8005662 <HAL_UART_IRQHandler+0x3ba>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a85      	ldr	r2, [pc, #532]	; (80057e4 <HAL_UART_IRQHandler+0x53c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d047      	beq.n	8005662 <HAL_UART_IRQHandler+0x3ba>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a83      	ldr	r2, [pc, #524]	; (80057e8 <HAL_UART_IRQHandler+0x540>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d041      	beq.n	8005662 <HAL_UART_IRQHandler+0x3ba>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a81      	ldr	r2, [pc, #516]	; (80057ec <HAL_UART_IRQHandler+0x544>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d03b      	beq.n	8005662 <HAL_UART_IRQHandler+0x3ba>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a7f      	ldr	r2, [pc, #508]	; (80057f0 <HAL_UART_IRQHandler+0x548>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d035      	beq.n	8005662 <HAL_UART_IRQHandler+0x3ba>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a7d      	ldr	r2, [pc, #500]	; (80057f4 <HAL_UART_IRQHandler+0x54c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d02f      	beq.n	8005662 <HAL_UART_IRQHandler+0x3ba>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a7b      	ldr	r2, [pc, #492]	; (80057f8 <HAL_UART_IRQHandler+0x550>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d029      	beq.n	8005662 <HAL_UART_IRQHandler+0x3ba>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a79      	ldr	r2, [pc, #484]	; (80057fc <HAL_UART_IRQHandler+0x554>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d023      	beq.n	8005662 <HAL_UART_IRQHandler+0x3ba>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a77      	ldr	r2, [pc, #476]	; (8005800 <HAL_UART_IRQHandler+0x558>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01d      	beq.n	8005662 <HAL_UART_IRQHandler+0x3ba>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a75      	ldr	r2, [pc, #468]	; (8005804 <HAL_UART_IRQHandler+0x55c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d017      	beq.n	8005662 <HAL_UART_IRQHandler+0x3ba>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a73      	ldr	r2, [pc, #460]	; (8005808 <HAL_UART_IRQHandler+0x560>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d011      	beq.n	8005662 <HAL_UART_IRQHandler+0x3ba>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a71      	ldr	r2, [pc, #452]	; (800580c <HAL_UART_IRQHandler+0x564>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00b      	beq.n	8005662 <HAL_UART_IRQHandler+0x3ba>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a6f      	ldr	r2, [pc, #444]	; (8005810 <HAL_UART_IRQHandler+0x568>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d005      	beq.n	8005662 <HAL_UART_IRQHandler+0x3ba>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a6d      	ldr	r2, [pc, #436]	; (8005814 <HAL_UART_IRQHandler+0x56c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d105      	bne.n	800566e <HAL_UART_IRQHandler+0x3c6>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	b29b      	uxth	r3, r3
 800566c:	e004      	b.n	8005678 <HAL_UART_IRQHandler+0x3d0>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	b29b      	uxth	r3, r3
 8005678:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800567c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 81a4 	beq.w	80059ce <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800568c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005690:	429a      	cmp	r2, r3
 8005692:	f080 819c 	bcs.w	80059ce <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800569c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056aa:	f000 8086 	beq.w	80057ba <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056dc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056e8:	e841 2300 	strex	r3, r2, [r1]
 80056ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80056f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1da      	bne.n	80056ae <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3308      	adds	r3, #8
 80056fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005708:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800570a:	f023 0301 	bic.w	r3, r3, #1
 800570e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3308      	adds	r3, #8
 8005718:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800571c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005720:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005724:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800572e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e1      	bne.n	80056f8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3308      	adds	r3, #8
 800573a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800573e:	e853 3f00 	ldrex	r3, [r3]
 8005742:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800574a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3308      	adds	r3, #8
 8005754:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005758:	66fa      	str	r2, [r7, #108]	; 0x6c
 800575a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800575e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e3      	bne.n	8005734 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005782:	e853 3f00 	ldrex	r3, [r3]
 8005786:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800578a:	f023 0310 	bic.w	r3, r3, #16
 800578e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800579c:	65bb      	str	r3, [r7, #88]	; 0x58
 800579e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e4      	bne.n	800577a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fb fded 	bl	8001394 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f91c 	bl	8005a0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057d4:	e0fb      	b.n	80059ce <HAL_UART_IRQHandler+0x726>
 80057d6:	bf00      	nop
 80057d8:	40020010 	.word	0x40020010
 80057dc:	40020028 	.word	0x40020028
 80057e0:	40020040 	.word	0x40020040
 80057e4:	40020058 	.word	0x40020058
 80057e8:	40020070 	.word	0x40020070
 80057ec:	40020088 	.word	0x40020088
 80057f0:	400200a0 	.word	0x400200a0
 80057f4:	400200b8 	.word	0x400200b8
 80057f8:	40020410 	.word	0x40020410
 80057fc:	40020428 	.word	0x40020428
 8005800:	40020440 	.word	0x40020440
 8005804:	40020458 	.word	0x40020458
 8005808:	40020470 	.word	0x40020470
 800580c:	40020488 	.word	0x40020488
 8005810:	400204a0 	.word	0x400204a0
 8005814:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005824:	b29b      	uxth	r3, r3
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 80cc 	beq.w	80059d2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800583a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 80c7 	beq.w	80059d2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584c:	e853 3f00 	ldrex	r3, [r3]
 8005850:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005854:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005858:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	461a      	mov	r2, r3
 8005862:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005866:	647b      	str	r3, [r7, #68]	; 0x44
 8005868:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800586c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e4      	bne.n	8005844 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3308      	adds	r3, #8
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	623b      	str	r3, [r7, #32]
   return(result);
 800588a:	6a3a      	ldr	r2, [r7, #32]
 800588c:	4b54      	ldr	r3, [pc, #336]	; (80059e0 <HAL_UART_IRQHandler+0x738>)
 800588e:	4013      	ands	r3, r2
 8005890:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3308      	adds	r3, #8
 800589a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800589e:	633a      	str	r2, [r7, #48]	; 0x30
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e3      	bne.n	800587a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0310 	bic.w	r3, r3, #16
 80058da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058e8:	61fb      	str	r3, [r7, #28]
 80058ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ec:	69b9      	ldr	r1, [r7, #24]
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	e841 2300 	strex	r3, r2, [r1]
 80058f4:	617b      	str	r3, [r7, #20]
   return(result);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e4      	bne.n	80058c6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005900:	4619      	mov	r1, r3
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f882 	bl	8005a0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005908:	e063      	b.n	80059d2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800590a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800590e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00e      	beq.n	8005934 <HAL_UART_IRQHandler+0x68c>
 8005916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800591a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d008      	beq.n	8005934 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800592a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f001 febb 	bl	80076a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005932:	e051      	b.n	80059d8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593c:	2b00      	cmp	r3, #0
 800593e:	d014      	beq.n	800596a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005948:	2b00      	cmp	r3, #0
 800594a:	d105      	bne.n	8005958 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800594c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005950:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800595c:	2b00      	cmp	r3, #0
 800595e:	d03a      	beq.n	80059d6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	4798      	blx	r3
    }
    return;
 8005968:	e035      	b.n	80059d6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800596a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800596e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005972:	2b00      	cmp	r3, #0
 8005974:	d009      	beq.n	800598a <HAL_UART_IRQHandler+0x6e2>
 8005976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800597a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f001 fa08 	bl	8006d98 <UART_EndTransmit_IT>
    return;
 8005988:	e026      	b.n	80059d8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800598a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800598e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d009      	beq.n	80059aa <HAL_UART_IRQHandler+0x702>
 8005996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800599a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f001 fe94 	bl	80076d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059a8:	e016      	b.n	80059d8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80059aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d010      	beq.n	80059d8 <HAL_UART_IRQHandler+0x730>
 80059b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	da0c      	bge.n	80059d8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 fe7c 	bl	80076bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059c4:	e008      	b.n	80059d8 <HAL_UART_IRQHandler+0x730>
      return;
 80059c6:	bf00      	nop
 80059c8:	e006      	b.n	80059d8 <HAL_UART_IRQHandler+0x730>
    return;
 80059ca:	bf00      	nop
 80059cc:	e004      	b.n	80059d8 <HAL_UART_IRQHandler+0x730>
      return;
 80059ce:	bf00      	nop
 80059d0:	e002      	b.n	80059d8 <HAL_UART_IRQHandler+0x730>
      return;
 80059d2:	bf00      	nop
 80059d4:	e000      	b.n	80059d8 <HAL_UART_IRQHandler+0x730>
    return;
 80059d6:	bf00      	nop
  }
}
 80059d8:	37e8      	adds	r7, #232	; 0xe8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	effffffe 	.word	0xeffffffe

080059e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a24:	b5b0      	push	{r4, r5, r7, lr}
 8005a26:	b08e      	sub	sp, #56	; 0x38
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	4bbf      	ldr	r3, [pc, #764]	; (8005d50 <UART_SetConfig+0x32c>)
 8005a52:	4013      	ands	r3, r2
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6812      	ldr	r2, [r2, #0]
 8005a58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a5a:	430b      	orrs	r3, r1
 8005a5c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4ab5      	ldr	r2, [pc, #724]	; (8005d54 <UART_SetConfig+0x330>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d004      	beq.n	8005a8e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	4bb0      	ldr	r3, [pc, #704]	; (8005d58 <UART_SetConfig+0x334>)
 8005a96:	4013      	ands	r3, r2
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6812      	ldr	r2, [r2, #0]
 8005a9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a9e:	430b      	orrs	r3, r1
 8005aa0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	f023 010f 	bic.w	r1, r3, #15
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4aa7      	ldr	r2, [pc, #668]	; (8005d5c <UART_SetConfig+0x338>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d176      	bne.n	8005bb0 <UART_SetConfig+0x18c>
 8005ac2:	4ba7      	ldr	r3, [pc, #668]	; (8005d60 <UART_SetConfig+0x33c>)
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005aca:	2b28      	cmp	r3, #40	; 0x28
 8005acc:	d86c      	bhi.n	8005ba8 <UART_SetConfig+0x184>
 8005ace:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <UART_SetConfig+0xb0>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005b79 	.word	0x08005b79
 8005ad8:	08005ba9 	.word	0x08005ba9
 8005adc:	08005ba9 	.word	0x08005ba9
 8005ae0:	08005ba9 	.word	0x08005ba9
 8005ae4:	08005ba9 	.word	0x08005ba9
 8005ae8:	08005ba9 	.word	0x08005ba9
 8005aec:	08005ba9 	.word	0x08005ba9
 8005af0:	08005ba9 	.word	0x08005ba9
 8005af4:	08005b81 	.word	0x08005b81
 8005af8:	08005ba9 	.word	0x08005ba9
 8005afc:	08005ba9 	.word	0x08005ba9
 8005b00:	08005ba9 	.word	0x08005ba9
 8005b04:	08005ba9 	.word	0x08005ba9
 8005b08:	08005ba9 	.word	0x08005ba9
 8005b0c:	08005ba9 	.word	0x08005ba9
 8005b10:	08005ba9 	.word	0x08005ba9
 8005b14:	08005b89 	.word	0x08005b89
 8005b18:	08005ba9 	.word	0x08005ba9
 8005b1c:	08005ba9 	.word	0x08005ba9
 8005b20:	08005ba9 	.word	0x08005ba9
 8005b24:	08005ba9 	.word	0x08005ba9
 8005b28:	08005ba9 	.word	0x08005ba9
 8005b2c:	08005ba9 	.word	0x08005ba9
 8005b30:	08005ba9 	.word	0x08005ba9
 8005b34:	08005b91 	.word	0x08005b91
 8005b38:	08005ba9 	.word	0x08005ba9
 8005b3c:	08005ba9 	.word	0x08005ba9
 8005b40:	08005ba9 	.word	0x08005ba9
 8005b44:	08005ba9 	.word	0x08005ba9
 8005b48:	08005ba9 	.word	0x08005ba9
 8005b4c:	08005ba9 	.word	0x08005ba9
 8005b50:	08005ba9 	.word	0x08005ba9
 8005b54:	08005b99 	.word	0x08005b99
 8005b58:	08005ba9 	.word	0x08005ba9
 8005b5c:	08005ba9 	.word	0x08005ba9
 8005b60:	08005ba9 	.word	0x08005ba9
 8005b64:	08005ba9 	.word	0x08005ba9
 8005b68:	08005ba9 	.word	0x08005ba9
 8005b6c:	08005ba9 	.word	0x08005ba9
 8005b70:	08005ba9 	.word	0x08005ba9
 8005b74:	08005ba1 	.word	0x08005ba1
 8005b78:	2301      	movs	r3, #1
 8005b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b7e:	e326      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005b80:	2304      	movs	r3, #4
 8005b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b86:	e322      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005b88:	2308      	movs	r3, #8
 8005b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b8e:	e31e      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005b90:	2310      	movs	r3, #16
 8005b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b96:	e31a      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005b98:	2320      	movs	r3, #32
 8005b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b9e:	e316      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005ba0:	2340      	movs	r3, #64	; 0x40
 8005ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ba6:	e312      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005ba8:	2380      	movs	r3, #128	; 0x80
 8005baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bae:	e30e      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a6b      	ldr	r2, [pc, #428]	; (8005d64 <UART_SetConfig+0x340>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d130      	bne.n	8005c1c <UART_SetConfig+0x1f8>
 8005bba:	4b69      	ldr	r3, [pc, #420]	; (8005d60 <UART_SetConfig+0x33c>)
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	2b05      	cmp	r3, #5
 8005bc4:	d826      	bhi.n	8005c14 <UART_SetConfig+0x1f0>
 8005bc6:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <UART_SetConfig+0x1a8>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005be5 	.word	0x08005be5
 8005bd0:	08005bed 	.word	0x08005bed
 8005bd4:	08005bf5 	.word	0x08005bf5
 8005bd8:	08005bfd 	.word	0x08005bfd
 8005bdc:	08005c05 	.word	0x08005c05
 8005be0:	08005c0d 	.word	0x08005c0d
 8005be4:	2300      	movs	r3, #0
 8005be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bea:	e2f0      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005bec:	2304      	movs	r3, #4
 8005bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bf2:	e2ec      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005bf4:	2308      	movs	r3, #8
 8005bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bfa:	e2e8      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005bfc:	2310      	movs	r3, #16
 8005bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c02:	e2e4      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005c04:	2320      	movs	r3, #32
 8005c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c0a:	e2e0      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005c0c:	2340      	movs	r3, #64	; 0x40
 8005c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c12:	e2dc      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005c14:	2380      	movs	r3, #128	; 0x80
 8005c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c1a:	e2d8      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a51      	ldr	r2, [pc, #324]	; (8005d68 <UART_SetConfig+0x344>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d130      	bne.n	8005c88 <UART_SetConfig+0x264>
 8005c26:	4b4e      	ldr	r3, [pc, #312]	; (8005d60 <UART_SetConfig+0x33c>)
 8005c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	2b05      	cmp	r3, #5
 8005c30:	d826      	bhi.n	8005c80 <UART_SetConfig+0x25c>
 8005c32:	a201      	add	r2, pc, #4	; (adr r2, 8005c38 <UART_SetConfig+0x214>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005c51 	.word	0x08005c51
 8005c3c:	08005c59 	.word	0x08005c59
 8005c40:	08005c61 	.word	0x08005c61
 8005c44:	08005c69 	.word	0x08005c69
 8005c48:	08005c71 	.word	0x08005c71
 8005c4c:	08005c79 	.word	0x08005c79
 8005c50:	2300      	movs	r3, #0
 8005c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c56:	e2ba      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005c58:	2304      	movs	r3, #4
 8005c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c5e:	e2b6      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005c60:	2308      	movs	r3, #8
 8005c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c66:	e2b2      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005c68:	2310      	movs	r3, #16
 8005c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c6e:	e2ae      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005c70:	2320      	movs	r3, #32
 8005c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c76:	e2aa      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005c78:	2340      	movs	r3, #64	; 0x40
 8005c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c7e:	e2a6      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005c80:	2380      	movs	r3, #128	; 0x80
 8005c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c86:	e2a2      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a37      	ldr	r2, [pc, #220]	; (8005d6c <UART_SetConfig+0x348>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d130      	bne.n	8005cf4 <UART_SetConfig+0x2d0>
 8005c92:	4b33      	ldr	r3, [pc, #204]	; (8005d60 <UART_SetConfig+0x33c>)
 8005c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	2b05      	cmp	r3, #5
 8005c9c:	d826      	bhi.n	8005cec <UART_SetConfig+0x2c8>
 8005c9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <UART_SetConfig+0x280>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005cbd 	.word	0x08005cbd
 8005ca8:	08005cc5 	.word	0x08005cc5
 8005cac:	08005ccd 	.word	0x08005ccd
 8005cb0:	08005cd5 	.word	0x08005cd5
 8005cb4:	08005cdd 	.word	0x08005cdd
 8005cb8:	08005ce5 	.word	0x08005ce5
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cc2:	e284      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cca:	e280      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005ccc:	2308      	movs	r3, #8
 8005cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cd2:	e27c      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cda:	e278      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005cdc:	2320      	movs	r3, #32
 8005cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ce2:	e274      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005ce4:	2340      	movs	r3, #64	; 0x40
 8005ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cea:	e270      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005cec:	2380      	movs	r3, #128	; 0x80
 8005cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cf2:	e26c      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a1d      	ldr	r2, [pc, #116]	; (8005d70 <UART_SetConfig+0x34c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d142      	bne.n	8005d84 <UART_SetConfig+0x360>
 8005cfe:	4b18      	ldr	r3, [pc, #96]	; (8005d60 <UART_SetConfig+0x33c>)
 8005d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	2b05      	cmp	r3, #5
 8005d08:	d838      	bhi.n	8005d7c <UART_SetConfig+0x358>
 8005d0a:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <UART_SetConfig+0x2ec>)
 8005d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d10:	08005d29 	.word	0x08005d29
 8005d14:	08005d31 	.word	0x08005d31
 8005d18:	08005d39 	.word	0x08005d39
 8005d1c:	08005d41 	.word	0x08005d41
 8005d20:	08005d49 	.word	0x08005d49
 8005d24:	08005d75 	.word	0x08005d75
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d2e:	e24e      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005d30:	2304      	movs	r3, #4
 8005d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d36:	e24a      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005d38:	2308      	movs	r3, #8
 8005d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d3e:	e246      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005d40:	2310      	movs	r3, #16
 8005d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d46:	e242      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005d48:	2320      	movs	r3, #32
 8005d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d4e:	e23e      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005d50:	cfff69f3 	.word	0xcfff69f3
 8005d54:	58000c00 	.word	0x58000c00
 8005d58:	11fff4ff 	.word	0x11fff4ff
 8005d5c:	40011000 	.word	0x40011000
 8005d60:	58024400 	.word	0x58024400
 8005d64:	40004400 	.word	0x40004400
 8005d68:	40004800 	.word	0x40004800
 8005d6c:	40004c00 	.word	0x40004c00
 8005d70:	40005000 	.word	0x40005000
 8005d74:	2340      	movs	r3, #64	; 0x40
 8005d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d7a:	e228      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005d7c:	2380      	movs	r3, #128	; 0x80
 8005d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d82:	e224      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4ab1      	ldr	r2, [pc, #708]	; (8006050 <UART_SetConfig+0x62c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d176      	bne.n	8005e7c <UART_SetConfig+0x458>
 8005d8e:	4bb1      	ldr	r3, [pc, #708]	; (8006054 <UART_SetConfig+0x630>)
 8005d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d96:	2b28      	cmp	r3, #40	; 0x28
 8005d98:	d86c      	bhi.n	8005e74 <UART_SetConfig+0x450>
 8005d9a:	a201      	add	r2, pc, #4	; (adr r2, 8005da0 <UART_SetConfig+0x37c>)
 8005d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da0:	08005e45 	.word	0x08005e45
 8005da4:	08005e75 	.word	0x08005e75
 8005da8:	08005e75 	.word	0x08005e75
 8005dac:	08005e75 	.word	0x08005e75
 8005db0:	08005e75 	.word	0x08005e75
 8005db4:	08005e75 	.word	0x08005e75
 8005db8:	08005e75 	.word	0x08005e75
 8005dbc:	08005e75 	.word	0x08005e75
 8005dc0:	08005e4d 	.word	0x08005e4d
 8005dc4:	08005e75 	.word	0x08005e75
 8005dc8:	08005e75 	.word	0x08005e75
 8005dcc:	08005e75 	.word	0x08005e75
 8005dd0:	08005e75 	.word	0x08005e75
 8005dd4:	08005e75 	.word	0x08005e75
 8005dd8:	08005e75 	.word	0x08005e75
 8005ddc:	08005e75 	.word	0x08005e75
 8005de0:	08005e55 	.word	0x08005e55
 8005de4:	08005e75 	.word	0x08005e75
 8005de8:	08005e75 	.word	0x08005e75
 8005dec:	08005e75 	.word	0x08005e75
 8005df0:	08005e75 	.word	0x08005e75
 8005df4:	08005e75 	.word	0x08005e75
 8005df8:	08005e75 	.word	0x08005e75
 8005dfc:	08005e75 	.word	0x08005e75
 8005e00:	08005e5d 	.word	0x08005e5d
 8005e04:	08005e75 	.word	0x08005e75
 8005e08:	08005e75 	.word	0x08005e75
 8005e0c:	08005e75 	.word	0x08005e75
 8005e10:	08005e75 	.word	0x08005e75
 8005e14:	08005e75 	.word	0x08005e75
 8005e18:	08005e75 	.word	0x08005e75
 8005e1c:	08005e75 	.word	0x08005e75
 8005e20:	08005e65 	.word	0x08005e65
 8005e24:	08005e75 	.word	0x08005e75
 8005e28:	08005e75 	.word	0x08005e75
 8005e2c:	08005e75 	.word	0x08005e75
 8005e30:	08005e75 	.word	0x08005e75
 8005e34:	08005e75 	.word	0x08005e75
 8005e38:	08005e75 	.word	0x08005e75
 8005e3c:	08005e75 	.word	0x08005e75
 8005e40:	08005e6d 	.word	0x08005e6d
 8005e44:	2301      	movs	r3, #1
 8005e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e4a:	e1c0      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005e4c:	2304      	movs	r3, #4
 8005e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e52:	e1bc      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005e54:	2308      	movs	r3, #8
 8005e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e5a:	e1b8      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005e5c:	2310      	movs	r3, #16
 8005e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e62:	e1b4      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005e64:	2320      	movs	r3, #32
 8005e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e6a:	e1b0      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005e6c:	2340      	movs	r3, #64	; 0x40
 8005e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e72:	e1ac      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005e74:	2380      	movs	r3, #128	; 0x80
 8005e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e7a:	e1a8      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a75      	ldr	r2, [pc, #468]	; (8006058 <UART_SetConfig+0x634>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d130      	bne.n	8005ee8 <UART_SetConfig+0x4c4>
 8005e86:	4b73      	ldr	r3, [pc, #460]	; (8006054 <UART_SetConfig+0x630>)
 8005e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	2b05      	cmp	r3, #5
 8005e90:	d826      	bhi.n	8005ee0 <UART_SetConfig+0x4bc>
 8005e92:	a201      	add	r2, pc, #4	; (adr r2, 8005e98 <UART_SetConfig+0x474>)
 8005e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e98:	08005eb1 	.word	0x08005eb1
 8005e9c:	08005eb9 	.word	0x08005eb9
 8005ea0:	08005ec1 	.word	0x08005ec1
 8005ea4:	08005ec9 	.word	0x08005ec9
 8005ea8:	08005ed1 	.word	0x08005ed1
 8005eac:	08005ed9 	.word	0x08005ed9
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eb6:	e18a      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005eb8:	2304      	movs	r3, #4
 8005eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ebe:	e186      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005ec0:	2308      	movs	r3, #8
 8005ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ec6:	e182      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005ec8:	2310      	movs	r3, #16
 8005eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ece:	e17e      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005ed0:	2320      	movs	r3, #32
 8005ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ed6:	e17a      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005ed8:	2340      	movs	r3, #64	; 0x40
 8005eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ede:	e176      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005ee0:	2380      	movs	r3, #128	; 0x80
 8005ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ee6:	e172      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a5b      	ldr	r2, [pc, #364]	; (800605c <UART_SetConfig+0x638>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d130      	bne.n	8005f54 <UART_SetConfig+0x530>
 8005ef2:	4b58      	ldr	r3, [pc, #352]	; (8006054 <UART_SetConfig+0x630>)
 8005ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	2b05      	cmp	r3, #5
 8005efc:	d826      	bhi.n	8005f4c <UART_SetConfig+0x528>
 8005efe:	a201      	add	r2, pc, #4	; (adr r2, 8005f04 <UART_SetConfig+0x4e0>)
 8005f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f04:	08005f1d 	.word	0x08005f1d
 8005f08:	08005f25 	.word	0x08005f25
 8005f0c:	08005f2d 	.word	0x08005f2d
 8005f10:	08005f35 	.word	0x08005f35
 8005f14:	08005f3d 	.word	0x08005f3d
 8005f18:	08005f45 	.word	0x08005f45
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f22:	e154      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005f24:	2304      	movs	r3, #4
 8005f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f2a:	e150      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005f2c:	2308      	movs	r3, #8
 8005f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f32:	e14c      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005f34:	2310      	movs	r3, #16
 8005f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f3a:	e148      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005f3c:	2320      	movs	r3, #32
 8005f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f42:	e144      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005f44:	2340      	movs	r3, #64	; 0x40
 8005f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f4a:	e140      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005f4c:	2380      	movs	r3, #128	; 0x80
 8005f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f52:	e13c      	b.n	80061ce <UART_SetConfig+0x7aa>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a41      	ldr	r2, [pc, #260]	; (8006060 <UART_SetConfig+0x63c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	f040 8082 	bne.w	8006064 <UART_SetConfig+0x640>
 8005f60:	4b3c      	ldr	r3, [pc, #240]	; (8006054 <UART_SetConfig+0x630>)
 8005f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f68:	2b28      	cmp	r3, #40	; 0x28
 8005f6a:	d86d      	bhi.n	8006048 <UART_SetConfig+0x624>
 8005f6c:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <UART_SetConfig+0x550>)
 8005f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f72:	bf00      	nop
 8005f74:	08006019 	.word	0x08006019
 8005f78:	08006049 	.word	0x08006049
 8005f7c:	08006049 	.word	0x08006049
 8005f80:	08006049 	.word	0x08006049
 8005f84:	08006049 	.word	0x08006049
 8005f88:	08006049 	.word	0x08006049
 8005f8c:	08006049 	.word	0x08006049
 8005f90:	08006049 	.word	0x08006049
 8005f94:	08006021 	.word	0x08006021
 8005f98:	08006049 	.word	0x08006049
 8005f9c:	08006049 	.word	0x08006049
 8005fa0:	08006049 	.word	0x08006049
 8005fa4:	08006049 	.word	0x08006049
 8005fa8:	08006049 	.word	0x08006049
 8005fac:	08006049 	.word	0x08006049
 8005fb0:	08006049 	.word	0x08006049
 8005fb4:	08006029 	.word	0x08006029
 8005fb8:	08006049 	.word	0x08006049
 8005fbc:	08006049 	.word	0x08006049
 8005fc0:	08006049 	.word	0x08006049
 8005fc4:	08006049 	.word	0x08006049
 8005fc8:	08006049 	.word	0x08006049
 8005fcc:	08006049 	.word	0x08006049
 8005fd0:	08006049 	.word	0x08006049
 8005fd4:	08006031 	.word	0x08006031
 8005fd8:	08006049 	.word	0x08006049
 8005fdc:	08006049 	.word	0x08006049
 8005fe0:	08006049 	.word	0x08006049
 8005fe4:	08006049 	.word	0x08006049
 8005fe8:	08006049 	.word	0x08006049
 8005fec:	08006049 	.word	0x08006049
 8005ff0:	08006049 	.word	0x08006049
 8005ff4:	08006039 	.word	0x08006039
 8005ff8:	08006049 	.word	0x08006049
 8005ffc:	08006049 	.word	0x08006049
 8006000:	08006049 	.word	0x08006049
 8006004:	08006049 	.word	0x08006049
 8006008:	08006049 	.word	0x08006049
 800600c:	08006049 	.word	0x08006049
 8006010:	08006049 	.word	0x08006049
 8006014:	08006041 	.word	0x08006041
 8006018:	2301      	movs	r3, #1
 800601a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800601e:	e0d6      	b.n	80061ce <UART_SetConfig+0x7aa>
 8006020:	2304      	movs	r3, #4
 8006022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006026:	e0d2      	b.n	80061ce <UART_SetConfig+0x7aa>
 8006028:	2308      	movs	r3, #8
 800602a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800602e:	e0ce      	b.n	80061ce <UART_SetConfig+0x7aa>
 8006030:	2310      	movs	r3, #16
 8006032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006036:	e0ca      	b.n	80061ce <UART_SetConfig+0x7aa>
 8006038:	2320      	movs	r3, #32
 800603a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800603e:	e0c6      	b.n	80061ce <UART_SetConfig+0x7aa>
 8006040:	2340      	movs	r3, #64	; 0x40
 8006042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006046:	e0c2      	b.n	80061ce <UART_SetConfig+0x7aa>
 8006048:	2380      	movs	r3, #128	; 0x80
 800604a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800604e:	e0be      	b.n	80061ce <UART_SetConfig+0x7aa>
 8006050:	40011400 	.word	0x40011400
 8006054:	58024400 	.word	0x58024400
 8006058:	40007800 	.word	0x40007800
 800605c:	40007c00 	.word	0x40007c00
 8006060:	40011800 	.word	0x40011800
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4aad      	ldr	r2, [pc, #692]	; (8006320 <UART_SetConfig+0x8fc>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d176      	bne.n	800615c <UART_SetConfig+0x738>
 800606e:	4bad      	ldr	r3, [pc, #692]	; (8006324 <UART_SetConfig+0x900>)
 8006070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006072:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006076:	2b28      	cmp	r3, #40	; 0x28
 8006078:	d86c      	bhi.n	8006154 <UART_SetConfig+0x730>
 800607a:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <UART_SetConfig+0x65c>)
 800607c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006080:	08006125 	.word	0x08006125
 8006084:	08006155 	.word	0x08006155
 8006088:	08006155 	.word	0x08006155
 800608c:	08006155 	.word	0x08006155
 8006090:	08006155 	.word	0x08006155
 8006094:	08006155 	.word	0x08006155
 8006098:	08006155 	.word	0x08006155
 800609c:	08006155 	.word	0x08006155
 80060a0:	0800612d 	.word	0x0800612d
 80060a4:	08006155 	.word	0x08006155
 80060a8:	08006155 	.word	0x08006155
 80060ac:	08006155 	.word	0x08006155
 80060b0:	08006155 	.word	0x08006155
 80060b4:	08006155 	.word	0x08006155
 80060b8:	08006155 	.word	0x08006155
 80060bc:	08006155 	.word	0x08006155
 80060c0:	08006135 	.word	0x08006135
 80060c4:	08006155 	.word	0x08006155
 80060c8:	08006155 	.word	0x08006155
 80060cc:	08006155 	.word	0x08006155
 80060d0:	08006155 	.word	0x08006155
 80060d4:	08006155 	.word	0x08006155
 80060d8:	08006155 	.word	0x08006155
 80060dc:	08006155 	.word	0x08006155
 80060e0:	0800613d 	.word	0x0800613d
 80060e4:	08006155 	.word	0x08006155
 80060e8:	08006155 	.word	0x08006155
 80060ec:	08006155 	.word	0x08006155
 80060f0:	08006155 	.word	0x08006155
 80060f4:	08006155 	.word	0x08006155
 80060f8:	08006155 	.word	0x08006155
 80060fc:	08006155 	.word	0x08006155
 8006100:	08006145 	.word	0x08006145
 8006104:	08006155 	.word	0x08006155
 8006108:	08006155 	.word	0x08006155
 800610c:	08006155 	.word	0x08006155
 8006110:	08006155 	.word	0x08006155
 8006114:	08006155 	.word	0x08006155
 8006118:	08006155 	.word	0x08006155
 800611c:	08006155 	.word	0x08006155
 8006120:	0800614d 	.word	0x0800614d
 8006124:	2301      	movs	r3, #1
 8006126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800612a:	e050      	b.n	80061ce <UART_SetConfig+0x7aa>
 800612c:	2304      	movs	r3, #4
 800612e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006132:	e04c      	b.n	80061ce <UART_SetConfig+0x7aa>
 8006134:	2308      	movs	r3, #8
 8006136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800613a:	e048      	b.n	80061ce <UART_SetConfig+0x7aa>
 800613c:	2310      	movs	r3, #16
 800613e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006142:	e044      	b.n	80061ce <UART_SetConfig+0x7aa>
 8006144:	2320      	movs	r3, #32
 8006146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800614a:	e040      	b.n	80061ce <UART_SetConfig+0x7aa>
 800614c:	2340      	movs	r3, #64	; 0x40
 800614e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006152:	e03c      	b.n	80061ce <UART_SetConfig+0x7aa>
 8006154:	2380      	movs	r3, #128	; 0x80
 8006156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800615a:	e038      	b.n	80061ce <UART_SetConfig+0x7aa>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a71      	ldr	r2, [pc, #452]	; (8006328 <UART_SetConfig+0x904>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d130      	bne.n	80061c8 <UART_SetConfig+0x7a4>
 8006166:	4b6f      	ldr	r3, [pc, #444]	; (8006324 <UART_SetConfig+0x900>)
 8006168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	2b05      	cmp	r3, #5
 8006170:	d826      	bhi.n	80061c0 <UART_SetConfig+0x79c>
 8006172:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <UART_SetConfig+0x754>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	08006191 	.word	0x08006191
 800617c:	08006199 	.word	0x08006199
 8006180:	080061a1 	.word	0x080061a1
 8006184:	080061a9 	.word	0x080061a9
 8006188:	080061b1 	.word	0x080061b1
 800618c:	080061b9 	.word	0x080061b9
 8006190:	2302      	movs	r3, #2
 8006192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006196:	e01a      	b.n	80061ce <UART_SetConfig+0x7aa>
 8006198:	2304      	movs	r3, #4
 800619a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800619e:	e016      	b.n	80061ce <UART_SetConfig+0x7aa>
 80061a0:	2308      	movs	r3, #8
 80061a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061a6:	e012      	b.n	80061ce <UART_SetConfig+0x7aa>
 80061a8:	2310      	movs	r3, #16
 80061aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ae:	e00e      	b.n	80061ce <UART_SetConfig+0x7aa>
 80061b0:	2320      	movs	r3, #32
 80061b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061b6:	e00a      	b.n	80061ce <UART_SetConfig+0x7aa>
 80061b8:	2340      	movs	r3, #64	; 0x40
 80061ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061be:	e006      	b.n	80061ce <UART_SetConfig+0x7aa>
 80061c0:	2380      	movs	r3, #128	; 0x80
 80061c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061c6:	e002      	b.n	80061ce <UART_SetConfig+0x7aa>
 80061c8:	2380      	movs	r3, #128	; 0x80
 80061ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a55      	ldr	r2, [pc, #340]	; (8006328 <UART_SetConfig+0x904>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	f040 80f0 	bne.w	80063ba <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061de:	2b20      	cmp	r3, #32
 80061e0:	dc46      	bgt.n	8006270 <UART_SetConfig+0x84c>
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	db75      	blt.n	80062d2 <UART_SetConfig+0x8ae>
 80061e6:	3b02      	subs	r3, #2
 80061e8:	2b1e      	cmp	r3, #30
 80061ea:	d872      	bhi.n	80062d2 <UART_SetConfig+0x8ae>
 80061ec:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <UART_SetConfig+0x7d0>)
 80061ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f2:	bf00      	nop
 80061f4:	08006277 	.word	0x08006277
 80061f8:	080062d3 	.word	0x080062d3
 80061fc:	0800627f 	.word	0x0800627f
 8006200:	080062d3 	.word	0x080062d3
 8006204:	080062d3 	.word	0x080062d3
 8006208:	080062d3 	.word	0x080062d3
 800620c:	0800628f 	.word	0x0800628f
 8006210:	080062d3 	.word	0x080062d3
 8006214:	080062d3 	.word	0x080062d3
 8006218:	080062d3 	.word	0x080062d3
 800621c:	080062d3 	.word	0x080062d3
 8006220:	080062d3 	.word	0x080062d3
 8006224:	080062d3 	.word	0x080062d3
 8006228:	080062d3 	.word	0x080062d3
 800622c:	0800629f 	.word	0x0800629f
 8006230:	080062d3 	.word	0x080062d3
 8006234:	080062d3 	.word	0x080062d3
 8006238:	080062d3 	.word	0x080062d3
 800623c:	080062d3 	.word	0x080062d3
 8006240:	080062d3 	.word	0x080062d3
 8006244:	080062d3 	.word	0x080062d3
 8006248:	080062d3 	.word	0x080062d3
 800624c:	080062d3 	.word	0x080062d3
 8006250:	080062d3 	.word	0x080062d3
 8006254:	080062d3 	.word	0x080062d3
 8006258:	080062d3 	.word	0x080062d3
 800625c:	080062d3 	.word	0x080062d3
 8006260:	080062d3 	.word	0x080062d3
 8006264:	080062d3 	.word	0x080062d3
 8006268:	080062d3 	.word	0x080062d3
 800626c:	080062c5 	.word	0x080062c5
 8006270:	2b40      	cmp	r3, #64	; 0x40
 8006272:	d02a      	beq.n	80062ca <UART_SetConfig+0x8a6>
 8006274:	e02d      	b.n	80062d2 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006276:	f7fd ff0b 	bl	8004090 <HAL_RCCEx_GetD3PCLK1Freq>
 800627a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800627c:	e02f      	b.n	80062de <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800627e:	f107 0314 	add.w	r3, r7, #20
 8006282:	4618      	mov	r0, r3
 8006284:	f7fd ff1a 	bl	80040bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800628c:	e027      	b.n	80062de <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800628e:	f107 0308 	add.w	r3, r7, #8
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe f866 	bl	8004364 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800629c:	e01f      	b.n	80062de <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800629e:	4b21      	ldr	r3, [pc, #132]	; (8006324 <UART_SetConfig+0x900>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d009      	beq.n	80062be <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062aa:	4b1e      	ldr	r3, [pc, #120]	; (8006324 <UART_SetConfig+0x900>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	08db      	lsrs	r3, r3, #3
 80062b0:	f003 0303 	and.w	r3, r3, #3
 80062b4:	4a1d      	ldr	r2, [pc, #116]	; (800632c <UART_SetConfig+0x908>)
 80062b6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062bc:	e00f      	b.n	80062de <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 80062be:	4b1b      	ldr	r3, [pc, #108]	; (800632c <UART_SetConfig+0x908>)
 80062c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062c2:	e00c      	b.n	80062de <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062c4:	4b1a      	ldr	r3, [pc, #104]	; (8006330 <UART_SetConfig+0x90c>)
 80062c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062c8:	e009      	b.n	80062de <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062d0:	e005      	b.n	80062de <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80062dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 81e6 	beq.w	80066b2 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	4a12      	ldr	r2, [pc, #72]	; (8006334 <UART_SetConfig+0x910>)
 80062ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062f0:	461a      	mov	r2, r3
 80062f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80062f8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	4613      	mov	r3, r2
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	4413      	add	r3, r2
 8006304:	6a3a      	ldr	r2, [r7, #32]
 8006306:	429a      	cmp	r2, r3
 8006308:	d305      	bcc.n	8006316 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006310:	6a3a      	ldr	r2, [r7, #32]
 8006312:	429a      	cmp	r2, r3
 8006314:	d910      	bls.n	8006338 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800631c:	e1c9      	b.n	80066b2 <UART_SetConfig+0xc8e>
 800631e:	bf00      	nop
 8006320:	40011c00 	.word	0x40011c00
 8006324:	58024400 	.word	0x58024400
 8006328:	58000c00 	.word	0x58000c00
 800632c:	03d09000 	.word	0x03d09000
 8006330:	003d0900 	.word	0x003d0900
 8006334:	0800b490 	.word	0x0800b490
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633a:	4618      	mov	r0, r3
 800633c:	f04f 0100 	mov.w	r1, #0
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	4ac1      	ldr	r2, [pc, #772]	; (800664c <UART_SetConfig+0xc28>)
 8006346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800634a:	b29a      	uxth	r2, r3
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	f7fa f81e 	bl	8000390 <__aeabi_uldivmod>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4610      	mov	r0, r2
 800635a:	4619      	mov	r1, r3
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	020b      	lsls	r3, r1, #8
 8006366:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800636a:	0202      	lsls	r2, r0, #8
 800636c:	6879      	ldr	r1, [r7, #4]
 800636e:	6849      	ldr	r1, [r1, #4]
 8006370:	0849      	lsrs	r1, r1, #1
 8006372:	4608      	mov	r0, r1
 8006374:	f04f 0100 	mov.w	r1, #0
 8006378:	1814      	adds	r4, r2, r0
 800637a:	eb43 0501 	adc.w	r5, r3, r1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	461a      	mov	r2, r3
 8006384:	f04f 0300 	mov.w	r3, #0
 8006388:	4620      	mov	r0, r4
 800638a:	4629      	mov	r1, r5
 800638c:	f7fa f800 	bl	8000390 <__aeabi_uldivmod>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4613      	mov	r3, r2
 8006396:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800639e:	d308      	bcc.n	80063b2 <UART_SetConfig+0x98e>
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063a6:	d204      	bcs.n	80063b2 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ae:	60da      	str	r2, [r3, #12]
 80063b0:	e17f      	b.n	80066b2 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80063b8:	e17b      	b.n	80066b2 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c2:	f040 80bd 	bne.w	8006540 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 80063c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063ca:	2b20      	cmp	r3, #32
 80063cc:	dc48      	bgt.n	8006460 <UART_SetConfig+0xa3c>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	db7b      	blt.n	80064ca <UART_SetConfig+0xaa6>
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d879      	bhi.n	80064ca <UART_SetConfig+0xaa6>
 80063d6:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <UART_SetConfig+0x9b8>)
 80063d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063dc:	08006467 	.word	0x08006467
 80063e0:	0800646f 	.word	0x0800646f
 80063e4:	080064cb 	.word	0x080064cb
 80063e8:	080064cb 	.word	0x080064cb
 80063ec:	08006477 	.word	0x08006477
 80063f0:	080064cb 	.word	0x080064cb
 80063f4:	080064cb 	.word	0x080064cb
 80063f8:	080064cb 	.word	0x080064cb
 80063fc:	08006487 	.word	0x08006487
 8006400:	080064cb 	.word	0x080064cb
 8006404:	080064cb 	.word	0x080064cb
 8006408:	080064cb 	.word	0x080064cb
 800640c:	080064cb 	.word	0x080064cb
 8006410:	080064cb 	.word	0x080064cb
 8006414:	080064cb 	.word	0x080064cb
 8006418:	080064cb 	.word	0x080064cb
 800641c:	08006497 	.word	0x08006497
 8006420:	080064cb 	.word	0x080064cb
 8006424:	080064cb 	.word	0x080064cb
 8006428:	080064cb 	.word	0x080064cb
 800642c:	080064cb 	.word	0x080064cb
 8006430:	080064cb 	.word	0x080064cb
 8006434:	080064cb 	.word	0x080064cb
 8006438:	080064cb 	.word	0x080064cb
 800643c:	080064cb 	.word	0x080064cb
 8006440:	080064cb 	.word	0x080064cb
 8006444:	080064cb 	.word	0x080064cb
 8006448:	080064cb 	.word	0x080064cb
 800644c:	080064cb 	.word	0x080064cb
 8006450:	080064cb 	.word	0x080064cb
 8006454:	080064cb 	.word	0x080064cb
 8006458:	080064cb 	.word	0x080064cb
 800645c:	080064bd 	.word	0x080064bd
 8006460:	2b40      	cmp	r3, #64	; 0x40
 8006462:	d02e      	beq.n	80064c2 <UART_SetConfig+0xa9e>
 8006464:	e031      	b.n	80064ca <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006466:	f7fc fe99 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 800646a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800646c:	e033      	b.n	80064d6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800646e:	f7fc feab 	bl	80031c8 <HAL_RCC_GetPCLK2Freq>
 8006472:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006474:	e02f      	b.n	80064d6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006476:	f107 0314 	add.w	r3, r7, #20
 800647a:	4618      	mov	r0, r3
 800647c:	f7fd fe1e 	bl	80040bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006484:	e027      	b.n	80064d6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006486:	f107 0308 	add.w	r3, r7, #8
 800648a:	4618      	mov	r0, r3
 800648c:	f7fd ff6a 	bl	8004364 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006494:	e01f      	b.n	80064d6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006496:	4b6e      	ldr	r3, [pc, #440]	; (8006650 <UART_SetConfig+0xc2c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d009      	beq.n	80064b6 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064a2:	4b6b      	ldr	r3, [pc, #428]	; (8006650 <UART_SetConfig+0xc2c>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	08db      	lsrs	r3, r3, #3
 80064a8:	f003 0303 	and.w	r3, r3, #3
 80064ac:	4a69      	ldr	r2, [pc, #420]	; (8006654 <UART_SetConfig+0xc30>)
 80064ae:	fa22 f303 	lsr.w	r3, r2, r3
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064b4:	e00f      	b.n	80064d6 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 80064b6:	4b67      	ldr	r3, [pc, #412]	; (8006654 <UART_SetConfig+0xc30>)
 80064b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064ba:	e00c      	b.n	80064d6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064bc:	4b66      	ldr	r3, [pc, #408]	; (8006658 <UART_SetConfig+0xc34>)
 80064be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064c0:	e009      	b.n	80064d6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064c8:	e005      	b.n	80064d6 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80064d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 80ea 	beq.w	80066b2 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	4a5a      	ldr	r2, [pc, #360]	; (800664c <UART_SetConfig+0xc28>)
 80064e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064e8:	461a      	mov	r2, r3
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80064f0:	005a      	lsls	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	085b      	lsrs	r3, r3, #1
 80064f8:	441a      	add	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006502:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	2b0f      	cmp	r3, #15
 8006508:	d916      	bls.n	8006538 <UART_SetConfig+0xb14>
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006510:	d212      	bcs.n	8006538 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	b29b      	uxth	r3, r3
 8006516:	f023 030f 	bic.w	r3, r3, #15
 800651a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	b29b      	uxth	r3, r3
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	b29a      	uxth	r2, r3
 8006528:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800652a:	4313      	orrs	r3, r2
 800652c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006534:	60da      	str	r2, [r3, #12]
 8006536:	e0bc      	b.n	80066b2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800653e:	e0b8      	b.n	80066b2 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006540:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006544:	2b20      	cmp	r3, #32
 8006546:	dc4b      	bgt.n	80065e0 <UART_SetConfig+0xbbc>
 8006548:	2b00      	cmp	r3, #0
 800654a:	f2c0 8087 	blt.w	800665c <UART_SetConfig+0xc38>
 800654e:	2b20      	cmp	r3, #32
 8006550:	f200 8084 	bhi.w	800665c <UART_SetConfig+0xc38>
 8006554:	a201      	add	r2, pc, #4	; (adr r2, 800655c <UART_SetConfig+0xb38>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	080065e7 	.word	0x080065e7
 8006560:	080065ef 	.word	0x080065ef
 8006564:	0800665d 	.word	0x0800665d
 8006568:	0800665d 	.word	0x0800665d
 800656c:	080065f7 	.word	0x080065f7
 8006570:	0800665d 	.word	0x0800665d
 8006574:	0800665d 	.word	0x0800665d
 8006578:	0800665d 	.word	0x0800665d
 800657c:	08006607 	.word	0x08006607
 8006580:	0800665d 	.word	0x0800665d
 8006584:	0800665d 	.word	0x0800665d
 8006588:	0800665d 	.word	0x0800665d
 800658c:	0800665d 	.word	0x0800665d
 8006590:	0800665d 	.word	0x0800665d
 8006594:	0800665d 	.word	0x0800665d
 8006598:	0800665d 	.word	0x0800665d
 800659c:	08006617 	.word	0x08006617
 80065a0:	0800665d 	.word	0x0800665d
 80065a4:	0800665d 	.word	0x0800665d
 80065a8:	0800665d 	.word	0x0800665d
 80065ac:	0800665d 	.word	0x0800665d
 80065b0:	0800665d 	.word	0x0800665d
 80065b4:	0800665d 	.word	0x0800665d
 80065b8:	0800665d 	.word	0x0800665d
 80065bc:	0800665d 	.word	0x0800665d
 80065c0:	0800665d 	.word	0x0800665d
 80065c4:	0800665d 	.word	0x0800665d
 80065c8:	0800665d 	.word	0x0800665d
 80065cc:	0800665d 	.word	0x0800665d
 80065d0:	0800665d 	.word	0x0800665d
 80065d4:	0800665d 	.word	0x0800665d
 80065d8:	0800665d 	.word	0x0800665d
 80065dc:	0800663d 	.word	0x0800663d
 80065e0:	2b40      	cmp	r3, #64	; 0x40
 80065e2:	d02e      	beq.n	8006642 <UART_SetConfig+0xc1e>
 80065e4:	e03a      	b.n	800665c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065e6:	f7fc fdd9 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 80065ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80065ec:	e03c      	b.n	8006668 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065ee:	f7fc fdeb 	bl	80031c8 <HAL_RCC_GetPCLK2Freq>
 80065f2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80065f4:	e038      	b.n	8006668 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065f6:	f107 0314 	add.w	r3, r7, #20
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fd fd5e 	bl	80040bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006604:	e030      	b.n	8006668 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006606:	f107 0308 	add.w	r3, r7, #8
 800660a:	4618      	mov	r0, r3
 800660c:	f7fd feaa 	bl	8004364 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006614:	e028      	b.n	8006668 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006616:	4b0e      	ldr	r3, [pc, #56]	; (8006650 <UART_SetConfig+0xc2c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b00      	cmp	r3, #0
 8006620:	d009      	beq.n	8006636 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006622:	4b0b      	ldr	r3, [pc, #44]	; (8006650 <UART_SetConfig+0xc2c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	08db      	lsrs	r3, r3, #3
 8006628:	f003 0303 	and.w	r3, r3, #3
 800662c:	4a09      	ldr	r2, [pc, #36]	; (8006654 <UART_SetConfig+0xc30>)
 800662e:	fa22 f303 	lsr.w	r3, r2, r3
 8006632:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006634:	e018      	b.n	8006668 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8006636:	4b07      	ldr	r3, [pc, #28]	; (8006654 <UART_SetConfig+0xc30>)
 8006638:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800663a:	e015      	b.n	8006668 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800663c:	4b06      	ldr	r3, [pc, #24]	; (8006658 <UART_SetConfig+0xc34>)
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006640:	e012      	b.n	8006668 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006646:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006648:	e00e      	b.n	8006668 <UART_SetConfig+0xc44>
 800664a:	bf00      	nop
 800664c:	0800b490 	.word	0x0800b490
 8006650:	58024400 	.word	0x58024400
 8006654:	03d09000 	.word	0x03d09000
 8006658:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006666:	bf00      	nop
    }

    if (pclk != 0U)
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	2b00      	cmp	r3, #0
 800666c:	d021      	beq.n	80066b2 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	4a1a      	ldr	r2, [pc, #104]	; (80066dc <UART_SetConfig+0xcb8>)
 8006674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006678:	461a      	mov	r2, r3
 800667a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	085b      	lsrs	r3, r3, #1
 8006686:	441a      	add	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006690:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	2b0f      	cmp	r3, #15
 8006696:	d909      	bls.n	80066ac <UART_SetConfig+0xc88>
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800669e:	d205      	bcs.n	80066ac <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60da      	str	r2, [r3, #12]
 80066aa:	e002      	b.n	80066b2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80066ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3738      	adds	r7, #56	; 0x38
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bdb0      	pop	{r4, r5, r7, pc}
 80066da:	bf00      	nop
 80066dc:	0800b490 	.word	0x0800b490

080066e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00a      	beq.n	800670a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00a      	beq.n	800674e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006774:	f003 0310 	and.w	r3, r3, #16
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00a      	beq.n	8006792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006796:	f003 0320 	and.w	r3, r3, #32
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01a      	beq.n	80067f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067de:	d10a      	bne.n	80067f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00a      	beq.n	8006818 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	605a      	str	r2, [r3, #4]
  }
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af02      	add	r7, sp, #8
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006834:	f7fa fcc2 	bl	80011bc <HAL_GetTick>
 8006838:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0308 	and.w	r3, r3, #8
 8006844:	2b08      	cmp	r3, #8
 8006846:	d10e      	bne.n	8006866 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f82f 	bl	80068ba <UART_WaitOnFlagUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e025      	b.n	80068b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b04      	cmp	r3, #4
 8006872:	d10e      	bne.n	8006892 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f819 	bl	80068ba <UART_WaitOnFlagUntilTimeout>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e00f      	b.n	80068b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2220      	movs	r2, #32
 800689e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b09c      	sub	sp, #112	; 0x70
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	603b      	str	r3, [r7, #0]
 80068c6:	4613      	mov	r3, r2
 80068c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ca:	e0a9      	b.n	8006a20 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068d2:	f000 80a5 	beq.w	8006a20 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d6:	f7fa fc71 	bl	80011bc <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d302      	bcc.n	80068ec <UART_WaitOnFlagUntilTimeout+0x32>
 80068e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d140      	bne.n	800696e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068f4:	e853 3f00 	ldrex	r3, [r3]
 80068f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006900:	667b      	str	r3, [r7, #100]	; 0x64
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800690a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800690c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006910:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e6      	bne.n	80068ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3308      	adds	r3, #8
 8006924:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006928:	e853 3f00 	ldrex	r3, [r3]
 800692c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	f023 0301 	bic.w	r3, r3, #1
 8006934:	663b      	str	r3, [r7, #96]	; 0x60
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3308      	adds	r3, #8
 800693c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800693e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006940:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006942:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800694c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1e5      	bne.n	800691e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2220      	movs	r2, #32
 8006956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2220      	movs	r2, #32
 800695e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e069      	b.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d051      	beq.n	8006a20 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800698a:	d149      	bne.n	8006a20 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006994:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	e853 3f00 	ldrex	r3, [r3]
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069b4:	637b      	str	r3, [r7, #52]	; 0x34
 80069b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e6      	bne.n	8006996 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3308      	adds	r3, #8
 80069ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	613b      	str	r3, [r7, #16]
   return(result);
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f023 0301 	bic.w	r3, r3, #1
 80069de:	66bb      	str	r3, [r7, #104]	; 0x68
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3308      	adds	r3, #8
 80069e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069e8:	623a      	str	r2, [r7, #32]
 80069ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	69f9      	ldr	r1, [r7, #28]
 80069ee:	6a3a      	ldr	r2, [r7, #32]
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e5      	bne.n	80069c8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2220      	movs	r2, #32
 8006a08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e010      	b.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	69da      	ldr	r2, [r3, #28]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	bf0c      	ite	eq
 8006a30:	2301      	moveq	r3, #1
 8006a32:	2300      	movne	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	79fb      	ldrb	r3, [r7, #7]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	f43f af46 	beq.w	80068cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3770      	adds	r7, #112	; 0x70
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b0a3      	sub	sp, #140	; 0x8c
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	4613      	mov	r3, r2
 8006a58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	88fa      	ldrh	r2, [r7, #6]
 8006a64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	88fa      	ldrh	r2, [r7, #6]
 8006a6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a7e:	d10e      	bne.n	8006a9e <UART_Start_Receive_IT+0x52>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d105      	bne.n	8006a94 <UART_Start_Receive_IT+0x48>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a92:	e02d      	b.n	8006af0 <UART_Start_Receive_IT+0xa4>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	22ff      	movs	r2, #255	; 0xff
 8006a98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a9c:	e028      	b.n	8006af0 <UART_Start_Receive_IT+0xa4>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10d      	bne.n	8006ac2 <UART_Start_Receive_IT+0x76>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d104      	bne.n	8006ab8 <UART_Start_Receive_IT+0x6c>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	22ff      	movs	r2, #255	; 0xff
 8006ab2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ab6:	e01b      	b.n	8006af0 <UART_Start_Receive_IT+0xa4>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	227f      	movs	r2, #127	; 0x7f
 8006abc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ac0:	e016      	b.n	8006af0 <UART_Start_Receive_IT+0xa4>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aca:	d10d      	bne.n	8006ae8 <UART_Start_Receive_IT+0x9c>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d104      	bne.n	8006ade <UART_Start_Receive_IT+0x92>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	227f      	movs	r2, #127	; 0x7f
 8006ad8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006adc:	e008      	b.n	8006af0 <UART_Start_Receive_IT+0xa4>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	223f      	movs	r2, #63	; 0x3f
 8006ae2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ae6:	e003      	b.n	8006af0 <UART_Start_Receive_IT+0xa4>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2222      	movs	r2, #34	; 0x22
 8006afc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3308      	adds	r3, #8
 8006b06:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006b10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b12:	f043 0301 	orr.w	r3, r3, #1
 8006b16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3308      	adds	r3, #8
 8006b20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006b24:	673a      	str	r2, [r7, #112]	; 0x70
 8006b26:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006b2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006b2c:	e841 2300 	strex	r3, r2, [r1]
 8006b30:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006b32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1e3      	bne.n	8006b00 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b40:	d153      	bne.n	8006bea <UART_Start_Receive_IT+0x19e>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b48:	88fa      	ldrh	r2, [r7, #6]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d34d      	bcc.n	8006bea <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b56:	d107      	bne.n	8006b68 <UART_Start_Receive_IT+0x11c>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d103      	bne.n	8006b68 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4a4b      	ldr	r2, [pc, #300]	; (8006c90 <UART_Start_Receive_IT+0x244>)
 8006b64:	671a      	str	r2, [r3, #112]	; 0x70
 8006b66:	e002      	b.n	8006b6e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4a4a      	ldr	r2, [pc, #296]	; (8006c94 <UART_Start_Receive_IT+0x248>)
 8006b6c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d01a      	beq.n	8006bb4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ba2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ba6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e4      	bne.n	8006b7e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3308      	adds	r3, #8
 8006bba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bbe:	e853 3f00 	ldrex	r3, [r3]
 8006bc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006bd4:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bd6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bdc:	e841 2300 	strex	r3, r2, [r1]
 8006be0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1e5      	bne.n	8006bb4 <UART_Start_Receive_IT+0x168>
 8006be8:	e04a      	b.n	8006c80 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf2:	d107      	bne.n	8006c04 <UART_Start_Receive_IT+0x1b8>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d103      	bne.n	8006c04 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4a26      	ldr	r2, [pc, #152]	; (8006c98 <UART_Start_Receive_IT+0x24c>)
 8006c00:	671a      	str	r2, [r3, #112]	; 0x70
 8006c02:	e002      	b.n	8006c0a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4a25      	ldr	r2, [pc, #148]	; (8006c9c <UART_Start_Receive_IT+0x250>)
 8006c08:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d019      	beq.n	8006c4e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006c2e:	677b      	str	r3, [r7, #116]	; 0x74
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c38:	637b      	str	r3, [r7, #52]	; 0x34
 8006c3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e6      	bne.n	8006c1a <UART_Start_Receive_IT+0x1ce>
 8006c4c:	e018      	b.n	8006c80 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	e853 3f00 	ldrex	r3, [r3]
 8006c5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f043 0320 	orr.w	r3, r3, #32
 8006c62:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c6c:	623b      	str	r3, [r7, #32]
 8006c6e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c70:	69f9      	ldr	r1, [r7, #28]
 8006c72:	6a3a      	ldr	r2, [r7, #32]
 8006c74:	e841 2300 	strex	r3, r2, [r1]
 8006c78:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e6      	bne.n	8006c4e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	378c      	adds	r7, #140	; 0x8c
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	080073a9 	.word	0x080073a9
 8006c94:	080070b1 	.word	0x080070b1
 8006c98:	08006f4f 	.word	0x08006f4f
 8006c9c:	08006def 	.word	0x08006def

08006ca0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b095      	sub	sp, #84	; 0x54
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb0:	e853 3f00 	ldrex	r3, [r3]
 8006cb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8006cc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ccc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e6      	bne.n	8006ca8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3308      	adds	r3, #8
 8006ce0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	e853 3f00 	ldrex	r3, [r3]
 8006ce8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	4b1e      	ldr	r3, [pc, #120]	; (8006d68 <UART_EndRxTransfer+0xc8>)
 8006cee:	4013      	ands	r3, r2
 8006cf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3308      	adds	r3, #8
 8006cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e5      	bne.n	8006cda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d118      	bne.n	8006d48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	e853 3f00 	ldrex	r3, [r3]
 8006d22:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f023 0310 	bic.w	r3, r3, #16
 8006d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	461a      	mov	r2, r3
 8006d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d34:	61bb      	str	r3, [r7, #24]
 8006d36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d38:	6979      	ldr	r1, [r7, #20]
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	e841 2300 	strex	r3, r2, [r1]
 8006d40:	613b      	str	r3, [r7, #16]
   return(result);
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e6      	bne.n	8006d16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006d5c:	bf00      	nop
 8006d5e:	3754      	adds	r7, #84	; 0x54
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	effffffe 	.word	0xeffffffe

08006d6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f7fe fe34 	bl	80059f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d90:	bf00      	nop
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b088      	sub	sp, #32
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db4:	61fb      	str	r3, [r7, #28]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	6979      	ldr	r1, [r7, #20]
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	e841 2300 	strex	r3, r2, [r1]
 8006dca:	613b      	str	r3, [r7, #16]
   return(result);
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1e6      	bne.n	8006da0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7fe fdff 	bl	80059e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006de6:	bf00      	nop
 8006de8:	3720      	adds	r7, #32
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b096      	sub	sp, #88	; 0x58
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006dfc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e06:	2b22      	cmp	r3, #34	; 0x22
 8006e08:	f040 8095 	bne.w	8006f36 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e16:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006e1a:	b2d9      	uxtb	r1, r3
 8006e1c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e26:	400a      	ands	r2, r1
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d178      	bne.n	8006f46 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e68:	653b      	str	r3, [r7, #80]	; 0x50
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e72:	647b      	str	r3, [r7, #68]	; 0x44
 8006e74:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1e6      	bne.n	8006e54 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3308      	adds	r3, #8
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	e853 3f00 	ldrex	r3, [r3]
 8006e94:	623b      	str	r3, [r7, #32]
   return(result);
 8006e96:	6a3b      	ldr	r3, [r7, #32]
 8006e98:	f023 0301 	bic.w	r3, r3, #1
 8006e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3308      	adds	r3, #8
 8006ea4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ea6:	633a      	str	r2, [r7, #48]	; 0x30
 8006ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eae:	e841 2300 	strex	r3, r2, [r1]
 8006eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1e5      	bne.n	8006e86 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2220      	movs	r2, #32
 8006ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d12e      	bne.n	8006f2e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	e853 3f00 	ldrex	r3, [r3]
 8006ee2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 0310 	bic.w	r3, r3, #16
 8006eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ef4:	61fb      	str	r3, [r7, #28]
 8006ef6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef8:	69b9      	ldr	r1, [r7, #24]
 8006efa:	69fa      	ldr	r2, [r7, #28]
 8006efc:	e841 2300 	strex	r3, r2, [r1]
 8006f00:	617b      	str	r3, [r7, #20]
   return(result);
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e6      	bne.n	8006ed6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	f003 0310 	and.w	r3, r3, #16
 8006f12:	2b10      	cmp	r3, #16
 8006f14:	d103      	bne.n	8006f1e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2210      	movs	r2, #16
 8006f1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7fe fd70 	bl	8005a0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f2c:	e00b      	b.n	8006f46 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fa f8aa 	bl	8001088 <HAL_UART_RxCpltCallback>
}
 8006f34:	e007      	b.n	8006f46 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	699a      	ldr	r2, [r3, #24]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f042 0208 	orr.w	r2, r2, #8
 8006f44:	619a      	str	r2, [r3, #24]
}
 8006f46:	bf00      	nop
 8006f48:	3758      	adds	r7, #88	; 0x58
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b096      	sub	sp, #88	; 0x58
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f5c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f66:	2b22      	cmp	r3, #34	; 0x22
 8006f68:	f040 8095 	bne.w	8007096 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f7c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006f80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f84:	4013      	ands	r3, r2
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f8a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f90:	1c9a      	adds	r2, r3, #2
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d178      	bne.n	80070a6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8006fd4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e6      	bne.n	8006fb4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3308      	adds	r3, #8
 8006fec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	f023 0301 	bic.w	r3, r3, #1
 8006ffc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3308      	adds	r3, #8
 8007004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007006:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007008:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800700c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e5      	bne.n	8006fe6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2220      	movs	r2, #32
 800701e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800702c:	2b01      	cmp	r3, #1
 800702e:	d12e      	bne.n	800708e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	e853 3f00 	ldrex	r3, [r3]
 8007042:	60bb      	str	r3, [r7, #8]
   return(result);
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f023 0310 	bic.w	r3, r3, #16
 800704a:	647b      	str	r3, [r7, #68]	; 0x44
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	461a      	mov	r2, r3
 8007052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007054:	61bb      	str	r3, [r7, #24]
 8007056:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007058:	6979      	ldr	r1, [r7, #20]
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	e841 2300 	strex	r3, r2, [r1]
 8007060:	613b      	str	r3, [r7, #16]
   return(result);
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1e6      	bne.n	8007036 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	f003 0310 	and.w	r3, r3, #16
 8007072:	2b10      	cmp	r3, #16
 8007074:	d103      	bne.n	800707e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2210      	movs	r2, #16
 800707c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007084:	4619      	mov	r1, r3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7fe fcc0 	bl	8005a0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800708c:	e00b      	b.n	80070a6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7f9 fffa 	bl	8001088 <HAL_UART_RxCpltCallback>
}
 8007094:	e007      	b.n	80070a6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	699a      	ldr	r2, [r3, #24]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f042 0208 	orr.w	r2, r2, #8
 80070a4:	619a      	str	r2, [r3, #24]
}
 80070a6:	bf00      	nop
 80070a8:	3758      	adds	r7, #88	; 0x58
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
	...

080070b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b0a6      	sub	sp, #152	; 0x98
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80070be:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69db      	ldr	r3, [r3, #28]
 80070c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e6:	2b22      	cmp	r3, #34	; 0x22
 80070e8:	f040 814d 	bne.w	8007386 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80070f2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070f6:	e0f4      	b.n	80072e2 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fe:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007102:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007106:	b2d9      	uxtb	r1, r3
 8007108:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800710c:	b2da      	uxtb	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007112:	400a      	ands	r2, r1
 8007114:	b2d2      	uxtb	r2, r2
 8007116:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29a      	uxth	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800713e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	2b00      	cmp	r3, #0
 8007148:	d053      	beq.n	80071f2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800714a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	d011      	beq.n	800717a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007156:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800715a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00b      	beq.n	800717a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2201      	movs	r2, #1
 8007168:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007170:	f043 0201 	orr.w	r2, r3, #1
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800717a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d011      	beq.n	80071aa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007186:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00b      	beq.n	80071aa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2202      	movs	r2, #2
 8007198:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071a0:	f043 0204 	orr.w	r2, r3, #4
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071ae:	f003 0304 	and.w	r3, r3, #4
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d011      	beq.n	80071da <UART_RxISR_8BIT_FIFOEN+0x12a>
 80071b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00b      	beq.n	80071da <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2204      	movs	r2, #4
 80071c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071d0:	f043 0202 	orr.w	r2, r3, #2
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d006      	beq.n	80071f2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7fe fc07 	bl	80059f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d171      	bne.n	80072e2 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007206:	e853 3f00 	ldrex	r3, [r3]
 800720a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800720c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800720e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007212:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	461a      	mov	r2, r3
 800721c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007220:	66bb      	str	r3, [r7, #104]	; 0x68
 8007222:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007224:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007226:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007228:	e841 2300 	strex	r3, r2, [r1]
 800722c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800722e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e4      	bne.n	80071fe <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3308      	adds	r3, #8
 800723a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007244:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007246:	4b56      	ldr	r3, [pc, #344]	; (80073a0 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8007248:	4013      	ands	r3, r2
 800724a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3308      	adds	r3, #8
 8007252:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007254:	657a      	str	r2, [r7, #84]	; 0x54
 8007256:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800725a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800725c:	e841 2300 	strex	r3, r2, [r1]
 8007260:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e5      	bne.n	8007234 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2220      	movs	r2, #32
 800726c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800727a:	2b01      	cmp	r3, #1
 800727c:	d12e      	bne.n	80072dc <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800728c:	e853 3f00 	ldrex	r3, [r3]
 8007290:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	f023 0310 	bic.w	r3, r3, #16
 8007298:	67bb      	str	r3, [r7, #120]	; 0x78
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072a2:	643b      	str	r3, [r7, #64]	; 0x40
 80072a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1e6      	bne.n	8007284 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	f003 0310 	and.w	r3, r3, #16
 80072c0:	2b10      	cmp	r3, #16
 80072c2:	d103      	bne.n	80072cc <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2210      	movs	r2, #16
 80072ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7fe fb99 	bl	8005a0c <HAL_UARTEx_RxEventCallback>
 80072da:	e002      	b.n	80072e2 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7f9 fed3 	bl	8001088 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d006      	beq.n	80072f8 <UART_RxISR_8BIT_FIFOEN+0x248>
 80072ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80072ee:	f003 0320 	and.w	r3, r3, #32
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f47f af00 	bne.w	80070f8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007302:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007306:	2b00      	cmp	r3, #0
 8007308:	d045      	beq.n	8007396 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007310:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007314:	429a      	cmp	r2, r3
 8007316:	d23e      	bcs.n	8007396 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3308      	adds	r3, #8
 800731e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	61fb      	str	r3, [r7, #28]
   return(result);
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800732e:	673b      	str	r3, [r7, #112]	; 0x70
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3308      	adds	r3, #8
 8007336:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007338:	62fa      	str	r2, [r7, #44]	; 0x2c
 800733a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800733e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e5      	bne.n	8007318 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a15      	ldr	r2, [pc, #84]	; (80073a4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007350:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	e853 3f00 	ldrex	r3, [r3]
 800735e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f043 0320 	orr.w	r3, r3, #32
 8007366:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	461a      	mov	r2, r3
 800736e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007370:	61bb      	str	r3, [r7, #24]
 8007372:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007374:	6979      	ldr	r1, [r7, #20]
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	e841 2300 	strex	r3, r2, [r1]
 800737c:	613b      	str	r3, [r7, #16]
   return(result);
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1e6      	bne.n	8007352 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007384:	e007      	b.n	8007396 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699a      	ldr	r2, [r3, #24]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f042 0208 	orr.w	r2, r2, #8
 8007394:	619a      	str	r2, [r3, #24]
}
 8007396:	bf00      	nop
 8007398:	3798      	adds	r7, #152	; 0x98
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	effffffe 	.word	0xeffffffe
 80073a4:	08006def 	.word	0x08006def

080073a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b0a8      	sub	sp, #160	; 0xa0
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073b6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073de:	2b22      	cmp	r3, #34	; 0x22
 80073e0:	f040 8151 	bne.w	8007686 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80073ea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073ee:	e0f8      	b.n	80075e2 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007402:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007406:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800740a:	4013      	ands	r3, r2
 800740c:	b29a      	uxth	r2, r3
 800740e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007412:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007418:	1c9a      	adds	r2, r3, #2
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007424:	b29b      	uxth	r3, r3
 8007426:	3b01      	subs	r3, #1
 8007428:	b29a      	uxth	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800743a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800743e:	f003 0307 	and.w	r3, r3, #7
 8007442:	2b00      	cmp	r3, #0
 8007444:	d053      	beq.n	80074ee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007446:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d011      	beq.n	8007476 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007452:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00b      	beq.n	8007476 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2201      	movs	r2, #1
 8007464:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800746c:	f043 0201 	orr.w	r2, r3, #1
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007476:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	2b00      	cmp	r3, #0
 8007480:	d011      	beq.n	80074a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007482:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00b      	beq.n	80074a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2202      	movs	r2, #2
 8007494:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800749c:	f043 0204 	orr.w	r2, r3, #4
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074aa:	f003 0304 	and.w	r3, r3, #4
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d011      	beq.n	80074d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80074b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00b      	beq.n	80074d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2204      	movs	r2, #4
 80074c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074cc:	f043 0202 	orr.w	r2, r3, #2
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d006      	beq.n	80074ee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7fe fa89 	bl	80059f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d173      	bne.n	80075e2 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800750a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800750e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800751c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800751e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007522:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800752a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e4      	bne.n	80074fa <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3308      	adds	r3, #8
 8007536:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800753a:	e853 3f00 	ldrex	r3, [r3]
 800753e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007540:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007542:	4b57      	ldr	r3, [pc, #348]	; (80076a0 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8007544:	4013      	ands	r3, r2
 8007546:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3308      	adds	r3, #8
 8007550:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007554:	65ba      	str	r2, [r7, #88]	; 0x58
 8007556:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800755a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800755c:	e841 2300 	strex	r3, r2, [r1]
 8007560:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e3      	bne.n	8007530 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2220      	movs	r2, #32
 800756c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800757a:	2b01      	cmp	r3, #1
 800757c:	d12e      	bne.n	80075dc <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758c:	e853 3f00 	ldrex	r3, [r3]
 8007590:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007594:	f023 0310 	bic.w	r3, r3, #16
 8007598:	67fb      	str	r3, [r7, #124]	; 0x7c
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075a2:	647b      	str	r3, [r7, #68]	; 0x44
 80075a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075aa:	e841 2300 	strex	r3, r2, [r1]
 80075ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1e6      	bne.n	8007584 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	f003 0310 	and.w	r3, r3, #16
 80075c0:	2b10      	cmp	r3, #16
 80075c2:	d103      	bne.n	80075cc <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2210      	movs	r2, #16
 80075ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7fe fa19 	bl	8005a0c <HAL_UARTEx_RxEventCallback>
 80075da:	e002      	b.n	80075e2 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7f9 fd53 	bl	8001088 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80075e2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d006      	beq.n	80075f8 <UART_RxISR_16BIT_FIFOEN+0x250>
 80075ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075ee:	f003 0320 	and.w	r3, r3, #32
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f47f aefc 	bne.w	80073f0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075fe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007602:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007606:	2b00      	cmp	r3, #0
 8007608:	d045      	beq.n	8007696 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007610:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007614:	429a      	cmp	r2, r3
 8007616:	d23e      	bcs.n	8007696 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3308      	adds	r3, #8
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	e853 3f00 	ldrex	r3, [r3]
 8007626:	623b      	str	r3, [r7, #32]
   return(result);
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800762e:	677b      	str	r3, [r7, #116]	; 0x74
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3308      	adds	r3, #8
 8007636:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007638:	633a      	str	r2, [r7, #48]	; 0x30
 800763a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800763e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007640:	e841 2300 	strex	r3, r2, [r1]
 8007644:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1e5      	bne.n	8007618 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a15      	ldr	r2, [pc, #84]	; (80076a4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007650:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	e853 3f00 	ldrex	r3, [r3]
 800765e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f043 0320 	orr.w	r3, r3, #32
 8007666:	673b      	str	r3, [r7, #112]	; 0x70
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007670:	61fb      	str	r3, [r7, #28]
 8007672:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	69b9      	ldr	r1, [r7, #24]
 8007676:	69fa      	ldr	r2, [r7, #28]
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	617b      	str	r3, [r7, #20]
   return(result);
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e6      	bne.n	8007652 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007684:	e007      	b.n	8007696 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	699a      	ldr	r2, [r3, #24]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f042 0208 	orr.w	r2, r2, #8
 8007694:	619a      	str	r2, [r3, #24]
}
 8007696:	bf00      	nop
 8007698:	37a0      	adds	r7, #160	; 0xa0
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	effffffe 	.word	0xeffffffe
 80076a4:	08006f4f 	.word	0x08006f4f

080076a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d101      	bne.n	80076fa <HAL_UARTEx_DisableFifoMode+0x16>
 80076f6:	2302      	movs	r3, #2
 80076f8:	e027      	b.n	800774a <HAL_UARTEx_DisableFifoMode+0x66>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2224      	movs	r2, #36	; 0x24
 8007706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 0201 	bic.w	r2, r2, #1
 8007720:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007728:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2220      	movs	r2, #32
 800773c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007766:	2b01      	cmp	r3, #1
 8007768:	d101      	bne.n	800776e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800776a:	2302      	movs	r3, #2
 800776c:	e02d      	b.n	80077ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2224      	movs	r2, #36	; 0x24
 800777a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 0201 	bic.w	r2, r2, #1
 8007794:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	683a      	ldr	r2, [r7, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f850 	bl	8007850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2220      	movs	r2, #32
 80077bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b084      	sub	sp, #16
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d101      	bne.n	80077ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80077e6:	2302      	movs	r3, #2
 80077e8:	e02d      	b.n	8007846 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2224      	movs	r2, #36	; 0x24
 80077f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 0201 	bic.w	r2, r2, #1
 8007810:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	430a      	orrs	r2, r1
 8007824:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f812 	bl	8007850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2220      	movs	r2, #32
 8007838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
	...

08007850 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800785c:	2b00      	cmp	r3, #0
 800785e:	d108      	bne.n	8007872 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007870:	e031      	b.n	80078d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007872:	2310      	movs	r3, #16
 8007874:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007876:	2310      	movs	r3, #16
 8007878:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	0e5b      	lsrs	r3, r3, #25
 8007882:	b2db      	uxtb	r3, r3
 8007884:	f003 0307 	and.w	r3, r3, #7
 8007888:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	0f5b      	lsrs	r3, r3, #29
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 0307 	and.w	r3, r3, #7
 8007898:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800789a:	7bbb      	ldrb	r3, [r7, #14]
 800789c:	7b3a      	ldrb	r2, [r7, #12]
 800789e:	4911      	ldr	r1, [pc, #68]	; (80078e4 <UARTEx_SetNbDataToProcess+0x94>)
 80078a0:	5c8a      	ldrb	r2, [r1, r2]
 80078a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078a6:	7b3a      	ldrb	r2, [r7, #12]
 80078a8:	490f      	ldr	r1, [pc, #60]	; (80078e8 <UARTEx_SetNbDataToProcess+0x98>)
 80078aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
 80078ba:	7b7a      	ldrb	r2, [r7, #13]
 80078bc:	4909      	ldr	r1, [pc, #36]	; (80078e4 <UARTEx_SetNbDataToProcess+0x94>)
 80078be:	5c8a      	ldrb	r2, [r1, r2]
 80078c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078c4:	7b7a      	ldrb	r2, [r7, #13]
 80078c6:	4908      	ldr	r1, [pc, #32]	; (80078e8 <UARTEx_SetNbDataToProcess+0x98>)
 80078c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80078d6:	bf00      	nop
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	0800b4a8 	.word	0x0800b4a8
 80078e8:	0800b4b0 	.word	0x0800b4b0

080078ec <__NVIC_SetPriority>:
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	4603      	mov	r3, r0
 80078f4:	6039      	str	r1, [r7, #0]
 80078f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80078f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	db0a      	blt.n	8007916 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	b2da      	uxtb	r2, r3
 8007904:	490c      	ldr	r1, [pc, #48]	; (8007938 <__NVIC_SetPriority+0x4c>)
 8007906:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800790a:	0112      	lsls	r2, r2, #4
 800790c:	b2d2      	uxtb	r2, r2
 800790e:	440b      	add	r3, r1
 8007910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007914:	e00a      	b.n	800792c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	b2da      	uxtb	r2, r3
 800791a:	4908      	ldr	r1, [pc, #32]	; (800793c <__NVIC_SetPriority+0x50>)
 800791c:	88fb      	ldrh	r3, [r7, #6]
 800791e:	f003 030f 	and.w	r3, r3, #15
 8007922:	3b04      	subs	r3, #4
 8007924:	0112      	lsls	r2, r2, #4
 8007926:	b2d2      	uxtb	r2, r2
 8007928:	440b      	add	r3, r1
 800792a:	761a      	strb	r2, [r3, #24]
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	e000e100 	.word	0xe000e100
 800793c:	e000ed00 	.word	0xe000ed00

08007940 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007940:	b580      	push	{r7, lr}
 8007942:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007944:	4b05      	ldr	r3, [pc, #20]	; (800795c <SysTick_Handler+0x1c>)
 8007946:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007948:	f001 ff12 	bl	8009770 <xTaskGetSchedulerState>
 800794c:	4603      	mov	r3, r0
 800794e:	2b01      	cmp	r3, #1
 8007950:	d001      	beq.n	8007956 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007952:	f002 fcf9 	bl	800a348 <xPortSysTickHandler>
  }
}
 8007956:	bf00      	nop
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	e000e010 	.word	0xe000e010

08007960 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007964:	2100      	movs	r1, #0
 8007966:	f06f 0004 	mvn.w	r0, #4
 800796a:	f7ff ffbf 	bl	80078ec <__NVIC_SetPriority>
#endif
}
 800796e:	bf00      	nop
 8007970:	bd80      	pop	{r7, pc}
	...

08007974 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800797a:	f3ef 8305 	mrs	r3, IPSR
 800797e:	603b      	str	r3, [r7, #0]
  return(result);
 8007980:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007986:	f06f 0305 	mvn.w	r3, #5
 800798a:	607b      	str	r3, [r7, #4]
 800798c:	e00c      	b.n	80079a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800798e:	4b0a      	ldr	r3, [pc, #40]	; (80079b8 <osKernelInitialize+0x44>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d105      	bne.n	80079a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007996:	4b08      	ldr	r3, [pc, #32]	; (80079b8 <osKernelInitialize+0x44>)
 8007998:	2201      	movs	r2, #1
 800799a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800799c:	2300      	movs	r3, #0
 800799e:	607b      	str	r3, [r7, #4]
 80079a0:	e002      	b.n	80079a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80079a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80079a8:	687b      	ldr	r3, [r7, #4]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	240000a4 	.word	0x240000a4

080079bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079c2:	f3ef 8305 	mrs	r3, IPSR
 80079c6:	603b      	str	r3, [r7, #0]
  return(result);
 80079c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80079ce:	f06f 0305 	mvn.w	r3, #5
 80079d2:	607b      	str	r3, [r7, #4]
 80079d4:	e010      	b.n	80079f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80079d6:	4b0b      	ldr	r3, [pc, #44]	; (8007a04 <osKernelStart+0x48>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d109      	bne.n	80079f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80079de:	f7ff ffbf 	bl	8007960 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80079e2:	4b08      	ldr	r3, [pc, #32]	; (8007a04 <osKernelStart+0x48>)
 80079e4:	2202      	movs	r2, #2
 80079e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80079e8:	f001 fa66 	bl	8008eb8 <vTaskStartScheduler>
      stat = osOK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	607b      	str	r3, [r7, #4]
 80079f0:	e002      	b.n	80079f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80079f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80079f8:	687b      	ldr	r3, [r7, #4]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	240000a4 	.word	0x240000a4

08007a08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08e      	sub	sp, #56	; 0x38
 8007a0c:	af04      	add	r7, sp, #16
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007a14:	2300      	movs	r3, #0
 8007a16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a18:	f3ef 8305 	mrs	r3, IPSR
 8007a1c:	617b      	str	r3, [r7, #20]
  return(result);
 8007a1e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d17e      	bne.n	8007b22 <osThreadNew+0x11a>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d07b      	beq.n	8007b22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007a2a:	2380      	movs	r3, #128	; 0x80
 8007a2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007a2e:	2318      	movs	r3, #24
 8007a30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007a32:	2300      	movs	r3, #0
 8007a34:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d045      	beq.n	8007ace <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <osThreadNew+0x48>
        name = attr->name;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d008      	beq.n	8007a76 <osThreadNew+0x6e>
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	2b38      	cmp	r3, #56	; 0x38
 8007a68:	d805      	bhi.n	8007a76 <osThreadNew+0x6e>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <osThreadNew+0x72>
        return (NULL);
 8007a76:	2300      	movs	r3, #0
 8007a78:	e054      	b.n	8007b24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	089b      	lsrs	r3, r3, #2
 8007a88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00e      	beq.n	8007ab0 <osThreadNew+0xa8>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	2bbb      	cmp	r3, #187	; 0xbb
 8007a98:	d90a      	bls.n	8007ab0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d006      	beq.n	8007ab0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d002      	beq.n	8007ab0 <osThreadNew+0xa8>
        mem = 1;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	61bb      	str	r3, [r7, #24]
 8007aae:	e010      	b.n	8007ad2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10c      	bne.n	8007ad2 <osThreadNew+0xca>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d108      	bne.n	8007ad2 <osThreadNew+0xca>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d104      	bne.n	8007ad2 <osThreadNew+0xca>
          mem = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	61bb      	str	r3, [r7, #24]
 8007acc:	e001      	b.n	8007ad2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d110      	bne.n	8007afa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ae0:	9202      	str	r2, [sp, #8]
 8007ae2:	9301      	str	r3, [sp, #4]
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	6a3a      	ldr	r2, [r7, #32]
 8007aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 fff6 	bl	8008ae0 <xTaskCreateStatic>
 8007af4:	4603      	mov	r3, r0
 8007af6:	613b      	str	r3, [r7, #16]
 8007af8:	e013      	b.n	8007b22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d110      	bne.n	8007b22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	f107 0310 	add.w	r3, r7, #16
 8007b08:	9301      	str	r3, [sp, #4]
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f001 f841 	bl	8008b9a <xTaskCreate>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d001      	beq.n	8007b22 <osThreadNew+0x11a>
            hTask = NULL;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007b22:	693b      	ldr	r3, [r7, #16]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3728      	adds	r7, #40	; 0x28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b34:	f3ef 8305 	mrs	r3, IPSR
 8007b38:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d003      	beq.n	8007b48 <osDelay+0x1c>
    stat = osErrorISR;
 8007b40:	f06f 0305 	mvn.w	r3, #5
 8007b44:	60fb      	str	r3, [r7, #12]
 8007b46:	e007      	b.n	8007b58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f001 f97c 	bl	8008e50 <vTaskDelay>
    }
  }

  return (stat);
 8007b58:	68fb      	ldr	r3, [r7, #12]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b08a      	sub	sp, #40	; 0x28
 8007b66:	af02      	add	r7, sp, #8
 8007b68:	60f8      	str	r0, [r7, #12]
 8007b6a:	60b9      	str	r1, [r7, #8]
 8007b6c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b72:	f3ef 8305 	mrs	r3, IPSR
 8007b76:	613b      	str	r3, [r7, #16]
  return(result);
 8007b78:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d15f      	bne.n	8007c3e <osMessageQueueNew+0xdc>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d05c      	beq.n	8007c3e <osMessageQueueNew+0xdc>
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d059      	beq.n	8007c3e <osMessageQueueNew+0xdc>
    mem = -1;
 8007b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d029      	beq.n	8007bea <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d012      	beq.n	8007bc4 <osMessageQueueNew+0x62>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	2b4f      	cmp	r3, #79	; 0x4f
 8007ba4:	d90e      	bls.n	8007bc4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	695a      	ldr	r2, [r3, #20]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	68b9      	ldr	r1, [r7, #8]
 8007bb6:	fb01 f303 	mul.w	r3, r1, r3
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d302      	bcc.n	8007bc4 <osMessageQueueNew+0x62>
        mem = 1;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	61bb      	str	r3, [r7, #24]
 8007bc2:	e014      	b.n	8007bee <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d110      	bne.n	8007bee <osMessageQueueNew+0x8c>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10c      	bne.n	8007bee <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d108      	bne.n	8007bee <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d104      	bne.n	8007bee <osMessageQueueNew+0x8c>
          mem = 0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	61bb      	str	r3, [r7, #24]
 8007be8:	e001      	b.n	8007bee <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007bea:	2300      	movs	r3, #0
 8007bec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d10b      	bne.n	8007c0c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691a      	ldr	r2, [r3, #16]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	9100      	str	r1, [sp, #0]
 8007c00:	68b9      	ldr	r1, [r7, #8]
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f000 fa2e 	bl	8008064 <xQueueGenericCreateStatic>
 8007c08:	61f8      	str	r0, [r7, #28]
 8007c0a:	e008      	b.n	8007c1e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d105      	bne.n	8007c1e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007c12:	2200      	movs	r2, #0
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 fa9c 	bl	8008154 <xQueueGenericCreate>
 8007c1c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00c      	beq.n	8007c3e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	617b      	str	r3, [r7, #20]
 8007c30:	e001      	b.n	8007c36 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007c32:	2300      	movs	r3, #0
 8007c34:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007c36:	6979      	ldr	r1, [r7, #20]
 8007c38:	69f8      	ldr	r0, [r7, #28]
 8007c3a:	f000 fef3 	bl	8008a24 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007c3e:	69fb      	ldr	r3, [r7, #28]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3720      	adds	r7, #32
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b088      	sub	sp, #32
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	4613      	mov	r3, r2
 8007c56:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c60:	f3ef 8305 	mrs	r3, IPSR
 8007c64:	617b      	str	r3, [r7, #20]
  return(result);
 8007c66:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d028      	beq.n	8007cbe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d005      	beq.n	8007c7e <osMessageQueuePut+0x36>
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <osMessageQueuePut+0x36>
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007c7e:	f06f 0303 	mvn.w	r3, #3
 8007c82:	61fb      	str	r3, [r7, #28]
 8007c84:	e038      	b.n	8007cf8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007c86:	2300      	movs	r3, #0
 8007c88:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007c8a:	f107 0210 	add.w	r2, r7, #16
 8007c8e:	2300      	movs	r3, #0
 8007c90:	68b9      	ldr	r1, [r7, #8]
 8007c92:	69b8      	ldr	r0, [r7, #24]
 8007c94:	f000 fbba 	bl	800840c <xQueueGenericSendFromISR>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d003      	beq.n	8007ca6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007c9e:	f06f 0302 	mvn.w	r3, #2
 8007ca2:	61fb      	str	r3, [r7, #28]
 8007ca4:	e028      	b.n	8007cf8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d025      	beq.n	8007cf8 <osMessageQueuePut+0xb0>
 8007cac:	4b15      	ldr	r3, [pc, #84]	; (8007d04 <osMessageQueuePut+0xbc>)
 8007cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	e01c      	b.n	8007cf8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <osMessageQueuePut+0x82>
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d103      	bne.n	8007cd2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007cca:	f06f 0303 	mvn.w	r3, #3
 8007cce:	61fb      	str	r3, [r7, #28]
 8007cd0:	e012      	b.n	8007cf8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	68b9      	ldr	r1, [r7, #8]
 8007cd8:	69b8      	ldr	r0, [r7, #24]
 8007cda:	f000 fa99 	bl	8008210 <xQueueGenericSend>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d009      	beq.n	8007cf8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007cea:	f06f 0301 	mvn.w	r3, #1
 8007cee:	61fb      	str	r3, [r7, #28]
 8007cf0:	e002      	b.n	8007cf8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007cf2:	f06f 0302 	mvn.w	r3, #2
 8007cf6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007cf8:	69fb      	ldr	r3, [r7, #28]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3720      	adds	r7, #32
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	e000ed04 	.word	0xe000ed04

08007d08 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d1e:	f3ef 8305 	mrs	r3, IPSR
 8007d22:	617b      	str	r3, [r7, #20]
  return(result);
 8007d24:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d028      	beq.n	8007d7c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d005      	beq.n	8007d3c <osMessageQueueGet+0x34>
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <osMessageQueueGet+0x34>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007d3c:	f06f 0303 	mvn.w	r3, #3
 8007d40:	61fb      	str	r3, [r7, #28]
 8007d42:	e037      	b.n	8007db4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007d44:	2300      	movs	r3, #0
 8007d46:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007d48:	f107 0310 	add.w	r3, r7, #16
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	68b9      	ldr	r1, [r7, #8]
 8007d50:	69b8      	ldr	r0, [r7, #24]
 8007d52:	f000 fcd7 	bl	8008704 <xQueueReceiveFromISR>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d003      	beq.n	8007d64 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007d5c:	f06f 0302 	mvn.w	r3, #2
 8007d60:	61fb      	str	r3, [r7, #28]
 8007d62:	e027      	b.n	8007db4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d024      	beq.n	8007db4 <osMessageQueueGet+0xac>
 8007d6a:	4b15      	ldr	r3, [pc, #84]	; (8007dc0 <osMessageQueueGet+0xb8>)
 8007d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d70:	601a      	str	r2, [r3, #0]
 8007d72:	f3bf 8f4f 	dsb	sy
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	e01b      	b.n	8007db4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d002      	beq.n	8007d88 <osMessageQueueGet+0x80>
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d103      	bne.n	8007d90 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007d88:	f06f 0303 	mvn.w	r3, #3
 8007d8c:	61fb      	str	r3, [r7, #28]
 8007d8e:	e011      	b.n	8007db4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	68b9      	ldr	r1, [r7, #8]
 8007d94:	69b8      	ldr	r0, [r7, #24]
 8007d96:	f000 fbd5 	bl	8008544 <xQueueReceive>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d009      	beq.n	8007db4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007da6:	f06f 0301 	mvn.w	r3, #1
 8007daa:	61fb      	str	r3, [r7, #28]
 8007dac:	e002      	b.n	8007db4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007dae:	f06f 0302 	mvn.w	r3, #2
 8007db2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007db4:	69fb      	ldr	r3, [r7, #28]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3720      	adds	r7, #32
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	e000ed04 	.word	0xe000ed04

08007dc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4a07      	ldr	r2, [pc, #28]	; (8007df0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007dd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	4a06      	ldr	r2, [pc, #24]	; (8007df4 <vApplicationGetIdleTaskMemory+0x30>)
 8007dda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2280      	movs	r2, #128	; 0x80
 8007de0:	601a      	str	r2, [r3, #0]
}
 8007de2:	bf00      	nop
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	240000a8 	.word	0x240000a8
 8007df4:	24000164 	.word	0x24000164

08007df8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	4a07      	ldr	r2, [pc, #28]	; (8007e24 <vApplicationGetTimerTaskMemory+0x2c>)
 8007e08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	4a06      	ldr	r2, [pc, #24]	; (8007e28 <vApplicationGetTimerTaskMemory+0x30>)
 8007e0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e16:	601a      	str	r2, [r3, #0]
}
 8007e18:	bf00      	nop
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	24000364 	.word	0x24000364
 8007e28:	24000420 	.word	0x24000420

08007e2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f103 0208 	add.w	r2, r3, #8
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f103 0208 	add.w	r2, r3, #8
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f103 0208 	add.w	r2, r3, #8
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e7a:	bf00      	nop
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e86:	b480      	push	{r7}
 8007e88:	b085      	sub	sp, #20
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	1c5a      	adds	r2, r3, #1
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	601a      	str	r2, [r3, #0]
}
 8007ec2:	bf00      	nop
 8007ec4:	3714      	adds	r7, #20
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b085      	sub	sp, #20
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ee4:	d103      	bne.n	8007eee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	60fb      	str	r3, [r7, #12]
 8007eec:	e00c      	b.n	8007f08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	3308      	adds	r3, #8
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	e002      	b.n	8007efc <vListInsert+0x2e>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d2f6      	bcs.n	8007ef6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	1c5a      	adds	r2, r3, #1
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	601a      	str	r2, [r3, #0]
}
 8007f34:	bf00      	nop
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	6892      	ldr	r2, [r2, #8]
 8007f56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	6852      	ldr	r2, [r2, #4]
 8007f60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d103      	bne.n	8007f74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689a      	ldr	r2, [r3, #8]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	1e5a      	subs	r2, r3, #1
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10a      	bne.n	8007fbe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fac:	f383 8811 	msr	BASEPRI, r3
 8007fb0:	f3bf 8f6f 	isb	sy
 8007fb4:	f3bf 8f4f 	dsb	sy
 8007fb8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007fba:	bf00      	nop
 8007fbc:	e7fe      	b.n	8007fbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007fbe:	f002 f931 	bl	800a224 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fca:	68f9      	ldr	r1, [r7, #12]
 8007fcc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fce:	fb01 f303 	mul.w	r3, r1, r3
 8007fd2:	441a      	add	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	68f9      	ldr	r1, [r7, #12]
 8007ff2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ff4:	fb01 f303 	mul.w	r3, r1, r3
 8007ff8:	441a      	add	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	22ff      	movs	r2, #255	; 0xff
 8008002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	22ff      	movs	r2, #255	; 0xff
 800800a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d114      	bne.n	800803e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d01a      	beq.n	8008052 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3310      	adds	r3, #16
 8008020:	4618      	mov	r0, r3
 8008022:	f001 f9e3 	bl	80093ec <xTaskRemoveFromEventList>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d012      	beq.n	8008052 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800802c:	4b0c      	ldr	r3, [pc, #48]	; (8008060 <xQueueGenericReset+0xcc>)
 800802e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	e009      	b.n	8008052 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3310      	adds	r3, #16
 8008042:	4618      	mov	r0, r3
 8008044:	f7ff fef2 	bl	8007e2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3324      	adds	r3, #36	; 0x24
 800804c:	4618      	mov	r0, r3
 800804e:	f7ff feed 	bl	8007e2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008052:	f002 f917 	bl	800a284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008056:	2301      	movs	r3, #1
}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	e000ed04 	.word	0xe000ed04

08008064 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08e      	sub	sp, #56	; 0x38
 8008068:	af02      	add	r7, sp, #8
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10a      	bne.n	800808e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800808a:	bf00      	nop
 800808c:	e7fe      	b.n	800808c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10a      	bne.n	80080aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008098:	f383 8811 	msr	BASEPRI, r3
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080a6:	bf00      	nop
 80080a8:	e7fe      	b.n	80080a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d002      	beq.n	80080b6 <xQueueGenericCreateStatic+0x52>
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <xQueueGenericCreateStatic+0x56>
 80080b6:	2301      	movs	r3, #1
 80080b8:	e000      	b.n	80080bc <xQueueGenericCreateStatic+0x58>
 80080ba:	2300      	movs	r3, #0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10a      	bne.n	80080d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	623b      	str	r3, [r7, #32]
}
 80080d2:	bf00      	nop
 80080d4:	e7fe      	b.n	80080d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d102      	bne.n	80080e2 <xQueueGenericCreateStatic+0x7e>
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <xQueueGenericCreateStatic+0x82>
 80080e2:	2301      	movs	r3, #1
 80080e4:	e000      	b.n	80080e8 <xQueueGenericCreateStatic+0x84>
 80080e6:	2300      	movs	r3, #0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10a      	bne.n	8008102 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	61fb      	str	r3, [r7, #28]
}
 80080fe:	bf00      	nop
 8008100:	e7fe      	b.n	8008100 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008102:	2350      	movs	r3, #80	; 0x50
 8008104:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2b50      	cmp	r3, #80	; 0x50
 800810a:	d00a      	beq.n	8008122 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	61bb      	str	r3, [r7, #24]
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008122:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00d      	beq.n	800814a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008136:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	4613      	mov	r3, r2
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	68b9      	ldr	r1, [r7, #8]
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 f83f 	bl	80081c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800814a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800814c:	4618      	mov	r0, r3
 800814e:	3730      	adds	r7, #48	; 0x30
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008154:	b580      	push	{r7, lr}
 8008156:	b08a      	sub	sp, #40	; 0x28
 8008158:	af02      	add	r7, sp, #8
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	4613      	mov	r3, r2
 8008160:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10a      	bne.n	800817e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	613b      	str	r3, [r7, #16]
}
 800817a:	bf00      	nop
 800817c:	e7fe      	b.n	800817c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	fb02 f303 	mul.w	r3, r2, r3
 8008186:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	3350      	adds	r3, #80	; 0x50
 800818c:	4618      	mov	r0, r3
 800818e:	f002 f96b 	bl	800a468 <pvPortMalloc>
 8008192:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d011      	beq.n	80081be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	3350      	adds	r3, #80	; 0x50
 80081a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80081ac:	79fa      	ldrb	r2, [r7, #7]
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	4613      	mov	r3, r2
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	68b9      	ldr	r1, [r7, #8]
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 f805 	bl	80081c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80081be:	69bb      	ldr	r3, [r7, #24]
	}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3720      	adds	r7, #32
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d103      	bne.n	80081e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	69ba      	ldr	r2, [r7, #24]
 80081e0:	601a      	str	r2, [r3, #0]
 80081e2:	e002      	b.n	80081ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081f6:	2101      	movs	r1, #1
 80081f8:	69b8      	ldr	r0, [r7, #24]
 80081fa:	f7ff fecb 	bl	8007f94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	78fa      	ldrb	r2, [r7, #3]
 8008202:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008206:	bf00      	nop
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b08e      	sub	sp, #56	; 0x38
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800821e:	2300      	movs	r3, #0
 8008220:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10a      	bne.n	8008242 <xQueueGenericSend+0x32>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800823e:	bf00      	nop
 8008240:	e7fe      	b.n	8008240 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d103      	bne.n	8008250 <xQueueGenericSend+0x40>
 8008248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <xQueueGenericSend+0x44>
 8008250:	2301      	movs	r3, #1
 8008252:	e000      	b.n	8008256 <xQueueGenericSend+0x46>
 8008254:	2300      	movs	r3, #0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10a      	bne.n	8008270 <xQueueGenericSend+0x60>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2b02      	cmp	r3, #2
 8008274:	d103      	bne.n	800827e <xQueueGenericSend+0x6e>
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800827a:	2b01      	cmp	r3, #1
 800827c:	d101      	bne.n	8008282 <xQueueGenericSend+0x72>
 800827e:	2301      	movs	r3, #1
 8008280:	e000      	b.n	8008284 <xQueueGenericSend+0x74>
 8008282:	2300      	movs	r3, #0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10a      	bne.n	800829e <xQueueGenericSend+0x8e>
	__asm volatile
 8008288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	623b      	str	r3, [r7, #32]
}
 800829a:	bf00      	nop
 800829c:	e7fe      	b.n	800829c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800829e:	f001 fa67 	bl	8009770 <xTaskGetSchedulerState>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d102      	bne.n	80082ae <xQueueGenericSend+0x9e>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <xQueueGenericSend+0xa2>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e000      	b.n	80082b4 <xQueueGenericSend+0xa4>
 80082b2:	2300      	movs	r3, #0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10a      	bne.n	80082ce <xQueueGenericSend+0xbe>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	61fb      	str	r3, [r7, #28]
}
 80082ca:	bf00      	nop
 80082cc:	e7fe      	b.n	80082cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082ce:	f001 ffa9 	bl	800a224 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082da:	429a      	cmp	r2, r3
 80082dc:	d302      	bcc.n	80082e4 <xQueueGenericSend+0xd4>
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d129      	bne.n	8008338 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	68b9      	ldr	r1, [r7, #8]
 80082e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082ea:	f000 fa8b 	bl	8008804 <prvCopyDataToQueue>
 80082ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d010      	beq.n	800831a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fa:	3324      	adds	r3, #36	; 0x24
 80082fc:	4618      	mov	r0, r3
 80082fe:	f001 f875 	bl	80093ec <xTaskRemoveFromEventList>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d013      	beq.n	8008330 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008308:	4b3f      	ldr	r3, [pc, #252]	; (8008408 <xQueueGenericSend+0x1f8>)
 800830a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	e00a      	b.n	8008330 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800831a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831c:	2b00      	cmp	r3, #0
 800831e:	d007      	beq.n	8008330 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008320:	4b39      	ldr	r3, [pc, #228]	; (8008408 <xQueueGenericSend+0x1f8>)
 8008322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008330:	f001 ffa8 	bl	800a284 <vPortExitCritical>
				return pdPASS;
 8008334:	2301      	movs	r3, #1
 8008336:	e063      	b.n	8008400 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d103      	bne.n	8008346 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800833e:	f001 ffa1 	bl	800a284 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008342:	2300      	movs	r3, #0
 8008344:	e05c      	b.n	8008400 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008348:	2b00      	cmp	r3, #0
 800834a:	d106      	bne.n	800835a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800834c:	f107 0314 	add.w	r3, r7, #20
 8008350:	4618      	mov	r0, r3
 8008352:	f001 f8af 	bl	80094b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008356:	2301      	movs	r3, #1
 8008358:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800835a:	f001 ff93 	bl	800a284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800835e:	f000 fe1b 	bl	8008f98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008362:	f001 ff5f 	bl	800a224 <vPortEnterCritical>
 8008366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008368:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800836c:	b25b      	sxtb	r3, r3
 800836e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008372:	d103      	bne.n	800837c <xQueueGenericSend+0x16c>
 8008374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008376:	2200      	movs	r2, #0
 8008378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800837c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008382:	b25b      	sxtb	r3, r3
 8008384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008388:	d103      	bne.n	8008392 <xQueueGenericSend+0x182>
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008392:	f001 ff77 	bl	800a284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008396:	1d3a      	adds	r2, r7, #4
 8008398:	f107 0314 	add.w	r3, r7, #20
 800839c:	4611      	mov	r1, r2
 800839e:	4618      	mov	r0, r3
 80083a0:	f001 f89e 	bl	80094e0 <xTaskCheckForTimeOut>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d124      	bne.n	80083f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80083aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ac:	f000 fb22 	bl	80089f4 <prvIsQueueFull>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d018      	beq.n	80083e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80083b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b8:	3310      	adds	r3, #16
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	4611      	mov	r1, r2
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 ffc4 	bl	800934c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80083c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083c6:	f000 faad 	bl	8008924 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80083ca:	f000 fdf3 	bl	8008fb4 <xTaskResumeAll>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f47f af7c 	bne.w	80082ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80083d6:	4b0c      	ldr	r3, [pc, #48]	; (8008408 <xQueueGenericSend+0x1f8>)
 80083d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	e772      	b.n	80082ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ea:	f000 fa9b 	bl	8008924 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083ee:	f000 fde1 	bl	8008fb4 <xTaskResumeAll>
 80083f2:	e76c      	b.n	80082ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083f6:	f000 fa95 	bl	8008924 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083fa:	f000 fddb 	bl	8008fb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008400:	4618      	mov	r0, r3
 8008402:	3738      	adds	r7, #56	; 0x38
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	e000ed04 	.word	0xe000ed04

0800840c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b090      	sub	sp, #64	; 0x40
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800841e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008436:	bf00      	nop
 8008438:	e7fe      	b.n	8008438 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d103      	bne.n	8008448 <xQueueGenericSendFromISR+0x3c>
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <xQueueGenericSendFromISR+0x40>
 8008448:	2301      	movs	r3, #1
 800844a:	e000      	b.n	800844e <xQueueGenericSendFromISR+0x42>
 800844c:	2300      	movs	r3, #0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10a      	bne.n	8008468 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008464:	bf00      	nop
 8008466:	e7fe      	b.n	8008466 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	2b02      	cmp	r3, #2
 800846c:	d103      	bne.n	8008476 <xQueueGenericSendFromISR+0x6a>
 800846e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008472:	2b01      	cmp	r3, #1
 8008474:	d101      	bne.n	800847a <xQueueGenericSendFromISR+0x6e>
 8008476:	2301      	movs	r3, #1
 8008478:	e000      	b.n	800847c <xQueueGenericSendFromISR+0x70>
 800847a:	2300      	movs	r3, #0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10a      	bne.n	8008496 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	623b      	str	r3, [r7, #32]
}
 8008492:	bf00      	nop
 8008494:	e7fe      	b.n	8008494 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008496:	f001 ffa7 	bl	800a3e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800849a:	f3ef 8211 	mrs	r2, BASEPRI
 800849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	61fa      	str	r2, [r7, #28]
 80084b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80084b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80084b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084be:	429a      	cmp	r2, r3
 80084c0:	d302      	bcc.n	80084c8 <xQueueGenericSendFromISR+0xbc>
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d12f      	bne.n	8008528 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80084c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	68b9      	ldr	r1, [r7, #8]
 80084dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084de:	f000 f991 	bl	8008804 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80084e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084ea:	d112      	bne.n	8008512 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d016      	beq.n	8008522 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	3324      	adds	r3, #36	; 0x24
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 ff77 	bl	80093ec <xTaskRemoveFromEventList>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00e      	beq.n	8008522 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00b      	beq.n	8008522 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	e007      	b.n	8008522 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008512:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008516:	3301      	adds	r3, #1
 8008518:	b2db      	uxtb	r3, r3
 800851a:	b25a      	sxtb	r2, r3
 800851c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008522:	2301      	movs	r3, #1
 8008524:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008526:	e001      	b.n	800852c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008528:	2300      	movs	r3, #0
 800852a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800852c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800852e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008536:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800853a:	4618      	mov	r0, r3
 800853c:	3740      	adds	r7, #64	; 0x40
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
	...

08008544 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b08c      	sub	sp, #48	; 0x30
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008550:	2300      	movs	r3, #0
 8008552:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10a      	bne.n	8008574 <xQueueReceive+0x30>
	__asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	623b      	str	r3, [r7, #32]
}
 8008570:	bf00      	nop
 8008572:	e7fe      	b.n	8008572 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d103      	bne.n	8008582 <xQueueReceive+0x3e>
 800857a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <xQueueReceive+0x42>
 8008582:	2301      	movs	r3, #1
 8008584:	e000      	b.n	8008588 <xQueueReceive+0x44>
 8008586:	2300      	movs	r3, #0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10a      	bne.n	80085a2 <xQueueReceive+0x5e>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	61fb      	str	r3, [r7, #28]
}
 800859e:	bf00      	nop
 80085a0:	e7fe      	b.n	80085a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085a2:	f001 f8e5 	bl	8009770 <xTaskGetSchedulerState>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d102      	bne.n	80085b2 <xQueueReceive+0x6e>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <xQueueReceive+0x72>
 80085b2:	2301      	movs	r3, #1
 80085b4:	e000      	b.n	80085b8 <xQueueReceive+0x74>
 80085b6:	2300      	movs	r3, #0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10a      	bne.n	80085d2 <xQueueReceive+0x8e>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	61bb      	str	r3, [r7, #24]
}
 80085ce:	bf00      	nop
 80085d0:	e7fe      	b.n	80085d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085d2:	f001 fe27 	bl	800a224 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d01f      	beq.n	8008622 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085e2:	68b9      	ldr	r1, [r7, #8]
 80085e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085e6:	f000 f977 	bl	80088d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	1e5a      	subs	r2, r3, #1
 80085ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00f      	beq.n	800861a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fc:	3310      	adds	r3, #16
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 fef4 	bl	80093ec <xTaskRemoveFromEventList>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d007      	beq.n	800861a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800860a:	4b3d      	ldr	r3, [pc, #244]	; (8008700 <xQueueReceive+0x1bc>)
 800860c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008610:	601a      	str	r2, [r3, #0]
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800861a:	f001 fe33 	bl	800a284 <vPortExitCritical>
				return pdPASS;
 800861e:	2301      	movs	r3, #1
 8008620:	e069      	b.n	80086f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d103      	bne.n	8008630 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008628:	f001 fe2c 	bl	800a284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800862c:	2300      	movs	r3, #0
 800862e:	e062      	b.n	80086f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008632:	2b00      	cmp	r3, #0
 8008634:	d106      	bne.n	8008644 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008636:	f107 0310 	add.w	r3, r7, #16
 800863a:	4618      	mov	r0, r3
 800863c:	f000 ff3a 	bl	80094b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008640:	2301      	movs	r3, #1
 8008642:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008644:	f001 fe1e 	bl	800a284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008648:	f000 fca6 	bl	8008f98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800864c:	f001 fdea 	bl	800a224 <vPortEnterCritical>
 8008650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008652:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008656:	b25b      	sxtb	r3, r3
 8008658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800865c:	d103      	bne.n	8008666 <xQueueReceive+0x122>
 800865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008660:	2200      	movs	r2, #0
 8008662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008668:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800866c:	b25b      	sxtb	r3, r3
 800866e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008672:	d103      	bne.n	800867c <xQueueReceive+0x138>
 8008674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800867c:	f001 fe02 	bl	800a284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008680:	1d3a      	adds	r2, r7, #4
 8008682:	f107 0310 	add.w	r3, r7, #16
 8008686:	4611      	mov	r1, r2
 8008688:	4618      	mov	r0, r3
 800868a:	f000 ff29 	bl	80094e0 <xTaskCheckForTimeOut>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d123      	bne.n	80086dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008696:	f000 f997 	bl	80089c8 <prvIsQueueEmpty>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d017      	beq.n	80086d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a2:	3324      	adds	r3, #36	; 0x24
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	4611      	mov	r1, r2
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 fe4f 	bl	800934c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086b0:	f000 f938 	bl	8008924 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086b4:	f000 fc7e 	bl	8008fb4 <xTaskResumeAll>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d189      	bne.n	80085d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80086be:	4b10      	ldr	r3, [pc, #64]	; (8008700 <xQueueReceive+0x1bc>)
 80086c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086c4:	601a      	str	r2, [r3, #0]
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	e780      	b.n	80085d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80086d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086d2:	f000 f927 	bl	8008924 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086d6:	f000 fc6d 	bl	8008fb4 <xTaskResumeAll>
 80086da:	e77a      	b.n	80085d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80086dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086de:	f000 f921 	bl	8008924 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086e2:	f000 fc67 	bl	8008fb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086e8:	f000 f96e 	bl	80089c8 <prvIsQueueEmpty>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f43f af6f 	beq.w	80085d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3730      	adds	r7, #48	; 0x30
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	e000ed04 	.word	0xe000ed04

08008704 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b08e      	sub	sp, #56	; 0x38
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10a      	bne.n	8008730 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	623b      	str	r3, [r7, #32]
}
 800872c:	bf00      	nop
 800872e:	e7fe      	b.n	800872e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d103      	bne.n	800873e <xQueueReceiveFromISR+0x3a>
 8008736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <xQueueReceiveFromISR+0x3e>
 800873e:	2301      	movs	r3, #1
 8008740:	e000      	b.n	8008744 <xQueueReceiveFromISR+0x40>
 8008742:	2300      	movs	r3, #0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10a      	bne.n	800875e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874c:	f383 8811 	msr	BASEPRI, r3
 8008750:	f3bf 8f6f 	isb	sy
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	61fb      	str	r3, [r7, #28]
}
 800875a:	bf00      	nop
 800875c:	e7fe      	b.n	800875c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800875e:	f001 fe43 	bl	800a3e8 <vPortValidateInterruptPriority>
	__asm volatile
 8008762:	f3ef 8211 	mrs	r2, BASEPRI
 8008766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	61ba      	str	r2, [r7, #24]
 8008778:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800877a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800877c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800877e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008782:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008786:	2b00      	cmp	r3, #0
 8008788:	d02f      	beq.n	80087ea <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008794:	68b9      	ldr	r1, [r7, #8]
 8008796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008798:	f000 f89e 	bl	80088d8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	1e5a      	subs	r2, r3, #1
 80087a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80087a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087ac:	d112      	bne.n	80087d4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d016      	beq.n	80087e4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	3310      	adds	r3, #16
 80087ba:	4618      	mov	r0, r3
 80087bc:	f000 fe16 	bl	80093ec <xTaskRemoveFromEventList>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00e      	beq.n	80087e4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00b      	beq.n	80087e4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	e007      	b.n	80087e4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80087d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087d8:	3301      	adds	r3, #1
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	b25a      	sxtb	r2, r3
 80087de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80087e4:	2301      	movs	r3, #1
 80087e6:	637b      	str	r3, [r7, #52]	; 0x34
 80087e8:	e001      	b.n	80087ee <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80087ea:	2300      	movs	r3, #0
 80087ec:	637b      	str	r3, [r7, #52]	; 0x34
 80087ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f383 8811 	msr	BASEPRI, r3
}
 80087f8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3738      	adds	r7, #56	; 0x38
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008810:	2300      	movs	r3, #0
 8008812:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008818:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10d      	bne.n	800883e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d14d      	bne.n	80088c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	4618      	mov	r0, r3
 8008830:	f000 ffbc 	bl	80097ac <xTaskPriorityDisinherit>
 8008834:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	609a      	str	r2, [r3, #8]
 800883c:	e043      	b.n	80088c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d119      	bne.n	8008878 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6858      	ldr	r0, [r3, #4]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884c:	461a      	mov	r2, r3
 800884e:	68b9      	ldr	r1, [r7, #8]
 8008850:	f002 f824 	bl	800a89c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	685a      	ldr	r2, [r3, #4]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885c:	441a      	add	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	429a      	cmp	r2, r3
 800886c:	d32b      	bcc.n	80088c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	605a      	str	r2, [r3, #4]
 8008876:	e026      	b.n	80088c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	68d8      	ldr	r0, [r3, #12]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008880:	461a      	mov	r2, r3
 8008882:	68b9      	ldr	r1, [r7, #8]
 8008884:	f002 f80a 	bl	800a89c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	68da      	ldr	r2, [r3, #12]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008890:	425b      	negs	r3, r3
 8008892:	441a      	add	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	68da      	ldr	r2, [r3, #12]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d207      	bcs.n	80088b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	689a      	ldr	r2, [r3, #8]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ac:	425b      	negs	r3, r3
 80088ae:	441a      	add	r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d105      	bne.n	80088c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d002      	beq.n	80088c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	3b01      	subs	r3, #1
 80088c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	1c5a      	adds	r2, r3, #1
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80088ce:	697b      	ldr	r3, [r7, #20]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3718      	adds	r7, #24
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d018      	beq.n	800891c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68da      	ldr	r2, [r3, #12]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f2:	441a      	add	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	68da      	ldr	r2, [r3, #12]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	429a      	cmp	r2, r3
 8008902:	d303      	bcc.n	800890c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68d9      	ldr	r1, [r3, #12]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008914:	461a      	mov	r2, r3
 8008916:	6838      	ldr	r0, [r7, #0]
 8008918:	f001 ffc0 	bl	800a89c <memcpy>
	}
}
 800891c:	bf00      	nop
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800892c:	f001 fc7a 	bl	800a224 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008936:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008938:	e011      	b.n	800895e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893e:	2b00      	cmp	r3, #0
 8008940:	d012      	beq.n	8008968 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	3324      	adds	r3, #36	; 0x24
 8008946:	4618      	mov	r0, r3
 8008948:	f000 fd50 	bl	80093ec <xTaskRemoveFromEventList>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008952:	f000 fe27 	bl	80095a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008956:	7bfb      	ldrb	r3, [r7, #15]
 8008958:	3b01      	subs	r3, #1
 800895a:	b2db      	uxtb	r3, r3
 800895c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800895e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008962:	2b00      	cmp	r3, #0
 8008964:	dce9      	bgt.n	800893a <prvUnlockQueue+0x16>
 8008966:	e000      	b.n	800896a <prvUnlockQueue+0x46>
					break;
 8008968:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	22ff      	movs	r2, #255	; 0xff
 800896e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008972:	f001 fc87 	bl	800a284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008976:	f001 fc55 	bl	800a224 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008980:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008982:	e011      	b.n	80089a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d012      	beq.n	80089b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	3310      	adds	r3, #16
 8008990:	4618      	mov	r0, r3
 8008992:	f000 fd2b 	bl	80093ec <xTaskRemoveFromEventList>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d001      	beq.n	80089a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800899c:	f000 fe02 	bl	80095a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80089a0:	7bbb      	ldrb	r3, [r7, #14]
 80089a2:	3b01      	subs	r3, #1
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	dce9      	bgt.n	8008984 <prvUnlockQueue+0x60>
 80089b0:	e000      	b.n	80089b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80089b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	22ff      	movs	r2, #255	; 0xff
 80089b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80089bc:	f001 fc62 	bl	800a284 <vPortExitCritical>
}
 80089c0:	bf00      	nop
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089d0:	f001 fc28 	bl	800a224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d102      	bne.n	80089e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80089dc:	2301      	movs	r3, #1
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	e001      	b.n	80089e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80089e2:	2300      	movs	r3, #0
 80089e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089e6:	f001 fc4d 	bl	800a284 <vPortExitCritical>

	return xReturn;
 80089ea:	68fb      	ldr	r3, [r7, #12]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089fc:	f001 fc12 	bl	800a224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d102      	bne.n	8008a12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	60fb      	str	r3, [r7, #12]
 8008a10:	e001      	b.n	8008a16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a12:	2300      	movs	r3, #0
 8008a14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a16:	f001 fc35 	bl	800a284 <vPortExitCritical>

	return xReturn;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a2e:	2300      	movs	r3, #0
 8008a30:	60fb      	str	r3, [r7, #12]
 8008a32:	e014      	b.n	8008a5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a34:	4a0f      	ldr	r2, [pc, #60]	; (8008a74 <vQueueAddToRegistry+0x50>)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10b      	bne.n	8008a58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008a40:	490c      	ldr	r1, [pc, #48]	; (8008a74 <vQueueAddToRegistry+0x50>)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	683a      	ldr	r2, [r7, #0]
 8008a46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a4a:	4a0a      	ldr	r2, [pc, #40]	; (8008a74 <vQueueAddToRegistry+0x50>)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	00db      	lsls	r3, r3, #3
 8008a50:	4413      	add	r3, r2
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008a56:	e006      	b.n	8008a66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	60fb      	str	r3, [r7, #12]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2b07      	cmp	r3, #7
 8008a62:	d9e7      	bls.n	8008a34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a64:	bf00      	nop
 8008a66:	bf00      	nop
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	24004be8 	.word	0x24004be8

08008a78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a88:	f001 fbcc 	bl	800a224 <vPortEnterCritical>
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a92:	b25b      	sxtb	r3, r3
 8008a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a98:	d103      	bne.n	8008aa2 <vQueueWaitForMessageRestricted+0x2a>
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008aa8:	b25b      	sxtb	r3, r3
 8008aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aae:	d103      	bne.n	8008ab8 <vQueueWaitForMessageRestricted+0x40>
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ab8:	f001 fbe4 	bl	800a284 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d106      	bne.n	8008ad2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	3324      	adds	r3, #36	; 0x24
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	68b9      	ldr	r1, [r7, #8]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 fc61 	bl	8009394 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008ad2:	6978      	ldr	r0, [r7, #20]
 8008ad4:	f7ff ff26 	bl	8008924 <prvUnlockQueue>
	}
 8008ad8:	bf00      	nop
 8008ada:	3718      	adds	r7, #24
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b08e      	sub	sp, #56	; 0x38
 8008ae4:	af04      	add	r7, sp, #16
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
 8008aec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10a      	bne.n	8008b0a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	623b      	str	r3, [r7, #32]
}
 8008b06:	bf00      	nop
 8008b08:	e7fe      	b.n	8008b08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10a      	bne.n	8008b26 <xTaskCreateStatic+0x46>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	61fb      	str	r3, [r7, #28]
}
 8008b22:	bf00      	nop
 8008b24:	e7fe      	b.n	8008b24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b26:	23bc      	movs	r3, #188	; 0xbc
 8008b28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	2bbc      	cmp	r3, #188	; 0xbc
 8008b2e:	d00a      	beq.n	8008b46 <xTaskCreateStatic+0x66>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	61bb      	str	r3, [r7, #24]
}
 8008b42:	bf00      	nop
 8008b44:	e7fe      	b.n	8008b44 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d01e      	beq.n	8008b8c <xTaskCreateStatic+0xac>
 8008b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d01b      	beq.n	8008b8c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	2202      	movs	r2, #2
 8008b62:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b66:	2300      	movs	r3, #0
 8008b68:	9303      	str	r3, [sp, #12]
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6c:	9302      	str	r3, [sp, #8]
 8008b6e:	f107 0314 	add.w	r3, r7, #20
 8008b72:	9301      	str	r3, [sp, #4]
 8008b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	68b9      	ldr	r1, [r7, #8]
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 f850 	bl	8008c24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b86:	f000 f8f3 	bl	8008d70 <prvAddNewTaskToReadyList>
 8008b8a:	e001      	b.n	8008b90 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b90:	697b      	ldr	r3, [r7, #20]
	}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3728      	adds	r7, #40	; 0x28
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b08c      	sub	sp, #48	; 0x30
 8008b9e:	af04      	add	r7, sp, #16
 8008ba0:	60f8      	str	r0, [r7, #12]
 8008ba2:	60b9      	str	r1, [r7, #8]
 8008ba4:	603b      	str	r3, [r7, #0]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008baa:	88fb      	ldrh	r3, [r7, #6]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f001 fc5a 	bl	800a468 <pvPortMalloc>
 8008bb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00e      	beq.n	8008bda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008bbc:	20bc      	movs	r0, #188	; 0xbc
 8008bbe:	f001 fc53 	bl	800a468 <pvPortMalloc>
 8008bc2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	697a      	ldr	r2, [r7, #20]
 8008bce:	631a      	str	r2, [r3, #48]	; 0x30
 8008bd0:	e005      	b.n	8008bde <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008bd2:	6978      	ldr	r0, [r7, #20]
 8008bd4:	f001 fd14 	bl	800a600 <vPortFree>
 8008bd8:	e001      	b.n	8008bde <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d017      	beq.n	8008c14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008bec:	88fa      	ldrh	r2, [r7, #6]
 8008bee:	2300      	movs	r3, #0
 8008bf0:	9303      	str	r3, [sp, #12]
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	9302      	str	r3, [sp, #8]
 8008bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf8:	9301      	str	r3, [sp, #4]
 8008bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	68b9      	ldr	r1, [r7, #8]
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 f80e 	bl	8008c24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c08:	69f8      	ldr	r0, [r7, #28]
 8008c0a:	f000 f8b1 	bl	8008d70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	61bb      	str	r3, [r7, #24]
 8008c12:	e002      	b.n	8008c1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c1a:	69bb      	ldr	r3, [r7, #24]
	}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3720      	adds	r7, #32
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b088      	sub	sp, #32
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]
 8008c30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	21a5      	movs	r1, #165	; 0xa5
 8008c3e:	f001 fe3b 	bl	800a8b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c46:	6879      	ldr	r1, [r7, #4]
 8008c48:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008c4c:	440b      	add	r3, r1
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4413      	add	r3, r2
 8008c52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	f023 0307 	bic.w	r3, r3, #7
 8008c5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	f003 0307 	and.w	r3, r3, #7
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	617b      	str	r3, [r7, #20]
}
 8008c78:	bf00      	nop
 8008c7a:	e7fe      	b.n	8008c7a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d01f      	beq.n	8008cc2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c82:	2300      	movs	r3, #0
 8008c84:	61fb      	str	r3, [r7, #28]
 8008c86:	e012      	b.n	8008cae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	7819      	ldrb	r1, [r3, #0]
 8008c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	4413      	add	r3, r2
 8008c96:	3334      	adds	r3, #52	; 0x34
 8008c98:	460a      	mov	r2, r1
 8008c9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d006      	beq.n	8008cb6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	3301      	adds	r3, #1
 8008cac:	61fb      	str	r3, [r7, #28]
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	2b0f      	cmp	r3, #15
 8008cb2:	d9e9      	bls.n	8008c88 <prvInitialiseNewTask+0x64>
 8008cb4:	e000      	b.n	8008cb8 <prvInitialiseNewTask+0x94>
			{
				break;
 8008cb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cc0:	e003      	b.n	8008cca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ccc:	2b37      	cmp	r3, #55	; 0x37
 8008cce:	d901      	bls.n	8008cd4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008cd0:	2337      	movs	r3, #55	; 0x37
 8008cd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cde:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	3304      	adds	r3, #4
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7ff f8be 	bl	8007e6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf2:	3318      	adds	r3, #24
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7ff f8b9 	bl	8007e6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d12:	2200      	movs	r2, #0
 8008d14:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d22:	3354      	adds	r3, #84	; 0x54
 8008d24:	2260      	movs	r2, #96	; 0x60
 8008d26:	2100      	movs	r1, #0
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f001 fdc5 	bl	800a8b8 <memset>
 8008d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d30:	4a0c      	ldr	r2, [pc, #48]	; (8008d64 <prvInitialiseNewTask+0x140>)
 8008d32:	659a      	str	r2, [r3, #88]	; 0x58
 8008d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d36:	4a0c      	ldr	r2, [pc, #48]	; (8008d68 <prvInitialiseNewTask+0x144>)
 8008d38:	65da      	str	r2, [r3, #92]	; 0x5c
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3c:	4a0b      	ldr	r2, [pc, #44]	; (8008d6c <prvInitialiseNewTask+0x148>)
 8008d3e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d40:	683a      	ldr	r2, [r7, #0]
 8008d42:	68f9      	ldr	r1, [r7, #12]
 8008d44:	69b8      	ldr	r0, [r7, #24]
 8008d46:	f001 f941 	bl	8009fcc <pxPortInitialiseStack>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d002      	beq.n	8008d5c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d5c:	bf00      	nop
 8008d5e:	3720      	adds	r7, #32
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	0800b4d8 	.word	0x0800b4d8
 8008d68:	0800b4f8 	.word	0x0800b4f8
 8008d6c:	0800b4b8 	.word	0x0800b4b8

08008d70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d78:	f001 fa54 	bl	800a224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d7c:	4b2d      	ldr	r3, [pc, #180]	; (8008e34 <prvAddNewTaskToReadyList+0xc4>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3301      	adds	r3, #1
 8008d82:	4a2c      	ldr	r2, [pc, #176]	; (8008e34 <prvAddNewTaskToReadyList+0xc4>)
 8008d84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d86:	4b2c      	ldr	r3, [pc, #176]	; (8008e38 <prvAddNewTaskToReadyList+0xc8>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d109      	bne.n	8008da2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d8e:	4a2a      	ldr	r2, [pc, #168]	; (8008e38 <prvAddNewTaskToReadyList+0xc8>)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d94:	4b27      	ldr	r3, [pc, #156]	; (8008e34 <prvAddNewTaskToReadyList+0xc4>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d110      	bne.n	8008dbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d9c:	f000 fc26 	bl	80095ec <prvInitialiseTaskLists>
 8008da0:	e00d      	b.n	8008dbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008da2:	4b26      	ldr	r3, [pc, #152]	; (8008e3c <prvAddNewTaskToReadyList+0xcc>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d109      	bne.n	8008dbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008daa:	4b23      	ldr	r3, [pc, #140]	; (8008e38 <prvAddNewTaskToReadyList+0xc8>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d802      	bhi.n	8008dbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008db8:	4a1f      	ldr	r2, [pc, #124]	; (8008e38 <prvAddNewTaskToReadyList+0xc8>)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008dbe:	4b20      	ldr	r3, [pc, #128]	; (8008e40 <prvAddNewTaskToReadyList+0xd0>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	4a1e      	ldr	r2, [pc, #120]	; (8008e40 <prvAddNewTaskToReadyList+0xd0>)
 8008dc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008dc8:	4b1d      	ldr	r3, [pc, #116]	; (8008e40 <prvAddNewTaskToReadyList+0xd0>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd4:	4b1b      	ldr	r3, [pc, #108]	; (8008e44 <prvAddNewTaskToReadyList+0xd4>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d903      	bls.n	8008de4 <prvAddNewTaskToReadyList+0x74>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de0:	4a18      	ldr	r2, [pc, #96]	; (8008e44 <prvAddNewTaskToReadyList+0xd4>)
 8008de2:	6013      	str	r3, [r2, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de8:	4613      	mov	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4413      	add	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4a15      	ldr	r2, [pc, #84]	; (8008e48 <prvAddNewTaskToReadyList+0xd8>)
 8008df2:	441a      	add	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	3304      	adds	r3, #4
 8008df8:	4619      	mov	r1, r3
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	f7ff f843 	bl	8007e86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e00:	f001 fa40 	bl	800a284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e04:	4b0d      	ldr	r3, [pc, #52]	; (8008e3c <prvAddNewTaskToReadyList+0xcc>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00e      	beq.n	8008e2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e0c:	4b0a      	ldr	r3, [pc, #40]	; (8008e38 <prvAddNewTaskToReadyList+0xc8>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d207      	bcs.n	8008e2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e1a:	4b0c      	ldr	r3, [pc, #48]	; (8008e4c <prvAddNewTaskToReadyList+0xdc>)
 8008e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e2a:	bf00      	nop
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	24000cf4 	.word	0x24000cf4
 8008e38:	24000820 	.word	0x24000820
 8008e3c:	24000d00 	.word	0x24000d00
 8008e40:	24000d10 	.word	0x24000d10
 8008e44:	24000cfc 	.word	0x24000cfc
 8008e48:	24000824 	.word	0x24000824
 8008e4c:	e000ed04 	.word	0xe000ed04

08008e50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d017      	beq.n	8008e92 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e62:	4b13      	ldr	r3, [pc, #76]	; (8008eb0 <vTaskDelay+0x60>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00a      	beq.n	8008e80 <vTaskDelay+0x30>
	__asm volatile
 8008e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	60bb      	str	r3, [r7, #8]
}
 8008e7c:	bf00      	nop
 8008e7e:	e7fe      	b.n	8008e7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008e80:	f000 f88a 	bl	8008f98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e84:	2100      	movs	r1, #0
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fcfe 	bl	8009888 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e8c:	f000 f892 	bl	8008fb4 <xTaskResumeAll>
 8008e90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d107      	bne.n	8008ea8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008e98:	4b06      	ldr	r3, [pc, #24]	; (8008eb4 <vTaskDelay+0x64>)
 8008e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e9e:	601a      	str	r2, [r3, #0]
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ea8:	bf00      	nop
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	24000d1c 	.word	0x24000d1c
 8008eb4:	e000ed04 	.word	0xe000ed04

08008eb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b08a      	sub	sp, #40	; 0x28
 8008ebc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ec6:	463a      	mov	r2, r7
 8008ec8:	1d39      	adds	r1, r7, #4
 8008eca:	f107 0308 	add.w	r3, r7, #8
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe ff78 	bl	8007dc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	9202      	str	r2, [sp, #8]
 8008edc:	9301      	str	r3, [sp, #4]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	460a      	mov	r2, r1
 8008ee6:	4924      	ldr	r1, [pc, #144]	; (8008f78 <vTaskStartScheduler+0xc0>)
 8008ee8:	4824      	ldr	r0, [pc, #144]	; (8008f7c <vTaskStartScheduler+0xc4>)
 8008eea:	f7ff fdf9 	bl	8008ae0 <xTaskCreateStatic>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	4a23      	ldr	r2, [pc, #140]	; (8008f80 <vTaskStartScheduler+0xc8>)
 8008ef2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ef4:	4b22      	ldr	r3, [pc, #136]	; (8008f80 <vTaskStartScheduler+0xc8>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008efc:	2301      	movs	r3, #1
 8008efe:	617b      	str	r3, [r7, #20]
 8008f00:	e001      	b.n	8008f06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f02:	2300      	movs	r3, #0
 8008f04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d102      	bne.n	8008f12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008f0c:	f000 fd10 	bl	8009930 <xTimerCreateTimerTask>
 8008f10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d11b      	bne.n	8008f50 <vTaskStartScheduler+0x98>
	__asm volatile
 8008f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1c:	f383 8811 	msr	BASEPRI, r3
 8008f20:	f3bf 8f6f 	isb	sy
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	613b      	str	r3, [r7, #16]
}
 8008f2a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f2c:	4b15      	ldr	r3, [pc, #84]	; (8008f84 <vTaskStartScheduler+0xcc>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	3354      	adds	r3, #84	; 0x54
 8008f32:	4a15      	ldr	r2, [pc, #84]	; (8008f88 <vTaskStartScheduler+0xd0>)
 8008f34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f36:	4b15      	ldr	r3, [pc, #84]	; (8008f8c <vTaskStartScheduler+0xd4>)
 8008f38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f3e:	4b14      	ldr	r3, [pc, #80]	; (8008f90 <vTaskStartScheduler+0xd8>)
 8008f40:	2201      	movs	r2, #1
 8008f42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008f44:	4b13      	ldr	r3, [pc, #76]	; (8008f94 <vTaskStartScheduler+0xdc>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f4a:	f001 f8c9 	bl	800a0e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f4e:	e00e      	b.n	8008f6e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f56:	d10a      	bne.n	8008f6e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	60fb      	str	r3, [r7, #12]
}
 8008f6a:	bf00      	nop
 8008f6c:	e7fe      	b.n	8008f6c <vTaskStartScheduler+0xb4>
}
 8008f6e:	bf00      	nop
 8008f70:	3718      	adds	r7, #24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	0800b3a8 	.word	0x0800b3a8
 8008f7c:	080095bd 	.word	0x080095bd
 8008f80:	24000d18 	.word	0x24000d18
 8008f84:	24000820 	.word	0x24000820
 8008f88:	24000014 	.word	0x24000014
 8008f8c:	24000d14 	.word	0x24000d14
 8008f90:	24000d00 	.word	0x24000d00
 8008f94:	24000cf8 	.word	0x24000cf8

08008f98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f98:	b480      	push	{r7}
 8008f9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008f9c:	4b04      	ldr	r3, [pc, #16]	; (8008fb0 <vTaskSuspendAll+0x18>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	4a03      	ldr	r2, [pc, #12]	; (8008fb0 <vTaskSuspendAll+0x18>)
 8008fa4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008fa6:	bf00      	nop
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	24000d1c 	.word	0x24000d1c

08008fb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008fc2:	4b42      	ldr	r3, [pc, #264]	; (80090cc <xTaskResumeAll+0x118>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10a      	bne.n	8008fe0 <xTaskResumeAll+0x2c>
	__asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	603b      	str	r3, [r7, #0]
}
 8008fdc:	bf00      	nop
 8008fde:	e7fe      	b.n	8008fde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008fe0:	f001 f920 	bl	800a224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008fe4:	4b39      	ldr	r3, [pc, #228]	; (80090cc <xTaskResumeAll+0x118>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	4a38      	ldr	r2, [pc, #224]	; (80090cc <xTaskResumeAll+0x118>)
 8008fec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fee:	4b37      	ldr	r3, [pc, #220]	; (80090cc <xTaskResumeAll+0x118>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d162      	bne.n	80090bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ff6:	4b36      	ldr	r3, [pc, #216]	; (80090d0 <xTaskResumeAll+0x11c>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d05e      	beq.n	80090bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ffe:	e02f      	b.n	8009060 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009000:	4b34      	ldr	r3, [pc, #208]	; (80090d4 <xTaskResumeAll+0x120>)
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	3318      	adds	r3, #24
 800900c:	4618      	mov	r0, r3
 800900e:	f7fe ff97 	bl	8007f40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	3304      	adds	r3, #4
 8009016:	4618      	mov	r0, r3
 8009018:	f7fe ff92 	bl	8007f40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009020:	4b2d      	ldr	r3, [pc, #180]	; (80090d8 <xTaskResumeAll+0x124>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	429a      	cmp	r2, r3
 8009026:	d903      	bls.n	8009030 <xTaskResumeAll+0x7c>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902c:	4a2a      	ldr	r2, [pc, #168]	; (80090d8 <xTaskResumeAll+0x124>)
 800902e:	6013      	str	r3, [r2, #0]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009034:	4613      	mov	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4a27      	ldr	r2, [pc, #156]	; (80090dc <xTaskResumeAll+0x128>)
 800903e:	441a      	add	r2, r3
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	3304      	adds	r3, #4
 8009044:	4619      	mov	r1, r3
 8009046:	4610      	mov	r0, r2
 8009048:	f7fe ff1d 	bl	8007e86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009050:	4b23      	ldr	r3, [pc, #140]	; (80090e0 <xTaskResumeAll+0x12c>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009056:	429a      	cmp	r2, r3
 8009058:	d302      	bcc.n	8009060 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800905a:	4b22      	ldr	r3, [pc, #136]	; (80090e4 <xTaskResumeAll+0x130>)
 800905c:	2201      	movs	r2, #1
 800905e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009060:	4b1c      	ldr	r3, [pc, #112]	; (80090d4 <xTaskResumeAll+0x120>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1cb      	bne.n	8009000 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800906e:	f000 fb5f 	bl	8009730 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009072:	4b1d      	ldr	r3, [pc, #116]	; (80090e8 <xTaskResumeAll+0x134>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d010      	beq.n	80090a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800907e:	f000 f847 	bl	8009110 <xTaskIncrementTick>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d002      	beq.n	800908e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009088:	4b16      	ldr	r3, [pc, #88]	; (80090e4 <xTaskResumeAll+0x130>)
 800908a:	2201      	movs	r2, #1
 800908c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	3b01      	subs	r3, #1
 8009092:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1f1      	bne.n	800907e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800909a:	4b13      	ldr	r3, [pc, #76]	; (80090e8 <xTaskResumeAll+0x134>)
 800909c:	2200      	movs	r2, #0
 800909e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80090a0:	4b10      	ldr	r3, [pc, #64]	; (80090e4 <xTaskResumeAll+0x130>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d009      	beq.n	80090bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80090a8:	2301      	movs	r3, #1
 80090aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80090ac:	4b0f      	ldr	r3, [pc, #60]	; (80090ec <xTaskResumeAll+0x138>)
 80090ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090b2:	601a      	str	r2, [r3, #0]
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80090bc:	f001 f8e2 	bl	800a284 <vPortExitCritical>

	return xAlreadyYielded;
 80090c0:	68bb      	ldr	r3, [r7, #8]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	24000d1c 	.word	0x24000d1c
 80090d0:	24000cf4 	.word	0x24000cf4
 80090d4:	24000cb4 	.word	0x24000cb4
 80090d8:	24000cfc 	.word	0x24000cfc
 80090dc:	24000824 	.word	0x24000824
 80090e0:	24000820 	.word	0x24000820
 80090e4:	24000d08 	.word	0x24000d08
 80090e8:	24000d04 	.word	0x24000d04
 80090ec:	e000ed04 	.word	0xe000ed04

080090f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80090f6:	4b05      	ldr	r3, [pc, #20]	; (800910c <xTaskGetTickCount+0x1c>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80090fc:	687b      	ldr	r3, [r7, #4]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	24000cf8 	.word	0x24000cf8

08009110 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009116:	2300      	movs	r3, #0
 8009118:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800911a:	4b4f      	ldr	r3, [pc, #316]	; (8009258 <xTaskIncrementTick+0x148>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	f040 808f 	bne.w	8009242 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009124:	4b4d      	ldr	r3, [pc, #308]	; (800925c <xTaskIncrementTick+0x14c>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	3301      	adds	r3, #1
 800912a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800912c:	4a4b      	ldr	r2, [pc, #300]	; (800925c <xTaskIncrementTick+0x14c>)
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d120      	bne.n	800917a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009138:	4b49      	ldr	r3, [pc, #292]	; (8009260 <xTaskIncrementTick+0x150>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00a      	beq.n	8009158 <xTaskIncrementTick+0x48>
	__asm volatile
 8009142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009146:	f383 8811 	msr	BASEPRI, r3
 800914a:	f3bf 8f6f 	isb	sy
 800914e:	f3bf 8f4f 	dsb	sy
 8009152:	603b      	str	r3, [r7, #0]
}
 8009154:	bf00      	nop
 8009156:	e7fe      	b.n	8009156 <xTaskIncrementTick+0x46>
 8009158:	4b41      	ldr	r3, [pc, #260]	; (8009260 <xTaskIncrementTick+0x150>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	60fb      	str	r3, [r7, #12]
 800915e:	4b41      	ldr	r3, [pc, #260]	; (8009264 <xTaskIncrementTick+0x154>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a3f      	ldr	r2, [pc, #252]	; (8009260 <xTaskIncrementTick+0x150>)
 8009164:	6013      	str	r3, [r2, #0]
 8009166:	4a3f      	ldr	r2, [pc, #252]	; (8009264 <xTaskIncrementTick+0x154>)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6013      	str	r3, [r2, #0]
 800916c:	4b3e      	ldr	r3, [pc, #248]	; (8009268 <xTaskIncrementTick+0x158>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3301      	adds	r3, #1
 8009172:	4a3d      	ldr	r2, [pc, #244]	; (8009268 <xTaskIncrementTick+0x158>)
 8009174:	6013      	str	r3, [r2, #0]
 8009176:	f000 fadb 	bl	8009730 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800917a:	4b3c      	ldr	r3, [pc, #240]	; (800926c <xTaskIncrementTick+0x15c>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	429a      	cmp	r2, r3
 8009182:	d349      	bcc.n	8009218 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009184:	4b36      	ldr	r3, [pc, #216]	; (8009260 <xTaskIncrementTick+0x150>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d104      	bne.n	8009198 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800918e:	4b37      	ldr	r3, [pc, #220]	; (800926c <xTaskIncrementTick+0x15c>)
 8009190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009194:	601a      	str	r2, [r3, #0]
					break;
 8009196:	e03f      	b.n	8009218 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009198:	4b31      	ldr	r3, [pc, #196]	; (8009260 <xTaskIncrementTick+0x150>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d203      	bcs.n	80091b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80091b0:	4a2e      	ldr	r2, [pc, #184]	; (800926c <xTaskIncrementTick+0x15c>)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80091b6:	e02f      	b.n	8009218 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	3304      	adds	r3, #4
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fe febf 	bl	8007f40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d004      	beq.n	80091d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	3318      	adds	r3, #24
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fe feb6 	bl	8007f40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d8:	4b25      	ldr	r3, [pc, #148]	; (8009270 <xTaskIncrementTick+0x160>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d903      	bls.n	80091e8 <xTaskIncrementTick+0xd8>
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e4:	4a22      	ldr	r2, [pc, #136]	; (8009270 <xTaskIncrementTick+0x160>)
 80091e6:	6013      	str	r3, [r2, #0]
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ec:	4613      	mov	r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	4413      	add	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4a1f      	ldr	r2, [pc, #124]	; (8009274 <xTaskIncrementTick+0x164>)
 80091f6:	441a      	add	r2, r3
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	3304      	adds	r3, #4
 80091fc:	4619      	mov	r1, r3
 80091fe:	4610      	mov	r0, r2
 8009200:	f7fe fe41 	bl	8007e86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009208:	4b1b      	ldr	r3, [pc, #108]	; (8009278 <xTaskIncrementTick+0x168>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920e:	429a      	cmp	r2, r3
 8009210:	d3b8      	bcc.n	8009184 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009212:	2301      	movs	r3, #1
 8009214:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009216:	e7b5      	b.n	8009184 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009218:	4b17      	ldr	r3, [pc, #92]	; (8009278 <xTaskIncrementTick+0x168>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800921e:	4915      	ldr	r1, [pc, #84]	; (8009274 <xTaskIncrementTick+0x164>)
 8009220:	4613      	mov	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	4413      	add	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	440b      	add	r3, r1
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d901      	bls.n	8009234 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009230:	2301      	movs	r3, #1
 8009232:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009234:	4b11      	ldr	r3, [pc, #68]	; (800927c <xTaskIncrementTick+0x16c>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d007      	beq.n	800924c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800923c:	2301      	movs	r3, #1
 800923e:	617b      	str	r3, [r7, #20]
 8009240:	e004      	b.n	800924c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009242:	4b0f      	ldr	r3, [pc, #60]	; (8009280 <xTaskIncrementTick+0x170>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	3301      	adds	r3, #1
 8009248:	4a0d      	ldr	r2, [pc, #52]	; (8009280 <xTaskIncrementTick+0x170>)
 800924a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800924c:	697b      	ldr	r3, [r7, #20]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3718      	adds	r7, #24
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	24000d1c 	.word	0x24000d1c
 800925c:	24000cf8 	.word	0x24000cf8
 8009260:	24000cac 	.word	0x24000cac
 8009264:	24000cb0 	.word	0x24000cb0
 8009268:	24000d0c 	.word	0x24000d0c
 800926c:	24000d14 	.word	0x24000d14
 8009270:	24000cfc 	.word	0x24000cfc
 8009274:	24000824 	.word	0x24000824
 8009278:	24000820 	.word	0x24000820
 800927c:	24000d08 	.word	0x24000d08
 8009280:	24000d04 	.word	0x24000d04

08009284 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800928a:	4b2a      	ldr	r3, [pc, #168]	; (8009334 <vTaskSwitchContext+0xb0>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d003      	beq.n	800929a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009292:	4b29      	ldr	r3, [pc, #164]	; (8009338 <vTaskSwitchContext+0xb4>)
 8009294:	2201      	movs	r2, #1
 8009296:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009298:	e046      	b.n	8009328 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800929a:	4b27      	ldr	r3, [pc, #156]	; (8009338 <vTaskSwitchContext+0xb4>)
 800929c:	2200      	movs	r2, #0
 800929e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092a0:	4b26      	ldr	r3, [pc, #152]	; (800933c <vTaskSwitchContext+0xb8>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	60fb      	str	r3, [r7, #12]
 80092a6:	e010      	b.n	80092ca <vTaskSwitchContext+0x46>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10a      	bne.n	80092c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	607b      	str	r3, [r7, #4]
}
 80092c0:	bf00      	nop
 80092c2:	e7fe      	b.n	80092c2 <vTaskSwitchContext+0x3e>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	3b01      	subs	r3, #1
 80092c8:	60fb      	str	r3, [r7, #12]
 80092ca:	491d      	ldr	r1, [pc, #116]	; (8009340 <vTaskSwitchContext+0xbc>)
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	4613      	mov	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4413      	add	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	440b      	add	r3, r1
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d0e4      	beq.n	80092a8 <vTaskSwitchContext+0x24>
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	4613      	mov	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4413      	add	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4a15      	ldr	r2, [pc, #84]	; (8009340 <vTaskSwitchContext+0xbc>)
 80092ea:	4413      	add	r3, r2
 80092ec:	60bb      	str	r3, [r7, #8]
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	685a      	ldr	r2, [r3, #4]
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	605a      	str	r2, [r3, #4]
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	3308      	adds	r3, #8
 8009300:	429a      	cmp	r2, r3
 8009302:	d104      	bne.n	800930e <vTaskSwitchContext+0x8a>
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	685a      	ldr	r2, [r3, #4]
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	605a      	str	r2, [r3, #4]
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	4a0b      	ldr	r2, [pc, #44]	; (8009344 <vTaskSwitchContext+0xc0>)
 8009316:	6013      	str	r3, [r2, #0]
 8009318:	4a08      	ldr	r2, [pc, #32]	; (800933c <vTaskSwitchContext+0xb8>)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800931e:	4b09      	ldr	r3, [pc, #36]	; (8009344 <vTaskSwitchContext+0xc0>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3354      	adds	r3, #84	; 0x54
 8009324:	4a08      	ldr	r2, [pc, #32]	; (8009348 <vTaskSwitchContext+0xc4>)
 8009326:	6013      	str	r3, [r2, #0]
}
 8009328:	bf00      	nop
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr
 8009334:	24000d1c 	.word	0x24000d1c
 8009338:	24000d08 	.word	0x24000d08
 800933c:	24000cfc 	.word	0x24000cfc
 8009340:	24000824 	.word	0x24000824
 8009344:	24000820 	.word	0x24000820
 8009348:	24000014 	.word	0x24000014

0800934c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10a      	bne.n	8009372 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800935c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	60fb      	str	r3, [r7, #12]
}
 800936e:	bf00      	nop
 8009370:	e7fe      	b.n	8009370 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009372:	4b07      	ldr	r3, [pc, #28]	; (8009390 <vTaskPlaceOnEventList+0x44>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3318      	adds	r3, #24
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7fe fda7 	bl	8007ece <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009380:	2101      	movs	r1, #1
 8009382:	6838      	ldr	r0, [r7, #0]
 8009384:	f000 fa80 	bl	8009888 <prvAddCurrentTaskToDelayedList>
}
 8009388:	bf00      	nop
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	24000820 	.word	0x24000820

08009394 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009394:	b580      	push	{r7, lr}
 8009396:	b086      	sub	sp, #24
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10a      	bne.n	80093bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80093a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	617b      	str	r3, [r7, #20]
}
 80093b8:	bf00      	nop
 80093ba:	e7fe      	b.n	80093ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093bc:	4b0a      	ldr	r3, [pc, #40]	; (80093e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	3318      	adds	r3, #24
 80093c2:	4619      	mov	r1, r3
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f7fe fd5e 	bl	8007e86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d002      	beq.n	80093d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80093d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80093d6:	6879      	ldr	r1, [r7, #4]
 80093d8:	68b8      	ldr	r0, [r7, #8]
 80093da:	f000 fa55 	bl	8009888 <prvAddCurrentTaskToDelayedList>
	}
 80093de:	bf00      	nop
 80093e0:	3718      	adds	r7, #24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	24000820 	.word	0x24000820

080093ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10a      	bne.n	8009418 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	60fb      	str	r3, [r7, #12]
}
 8009414:	bf00      	nop
 8009416:	e7fe      	b.n	8009416 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	3318      	adds	r3, #24
 800941c:	4618      	mov	r0, r3
 800941e:	f7fe fd8f 	bl	8007f40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009422:	4b1e      	ldr	r3, [pc, #120]	; (800949c <xTaskRemoveFromEventList+0xb0>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d11d      	bne.n	8009466 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	3304      	adds	r3, #4
 800942e:	4618      	mov	r0, r3
 8009430:	f7fe fd86 	bl	8007f40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009438:	4b19      	ldr	r3, [pc, #100]	; (80094a0 <xTaskRemoveFromEventList+0xb4>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	429a      	cmp	r2, r3
 800943e:	d903      	bls.n	8009448 <xTaskRemoveFromEventList+0x5c>
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009444:	4a16      	ldr	r2, [pc, #88]	; (80094a0 <xTaskRemoveFromEventList+0xb4>)
 8009446:	6013      	str	r3, [r2, #0]
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800944c:	4613      	mov	r3, r2
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	4a13      	ldr	r2, [pc, #76]	; (80094a4 <xTaskRemoveFromEventList+0xb8>)
 8009456:	441a      	add	r2, r3
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	3304      	adds	r3, #4
 800945c:	4619      	mov	r1, r3
 800945e:	4610      	mov	r0, r2
 8009460:	f7fe fd11 	bl	8007e86 <vListInsertEnd>
 8009464:	e005      	b.n	8009472 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	3318      	adds	r3, #24
 800946a:	4619      	mov	r1, r3
 800946c:	480e      	ldr	r0, [pc, #56]	; (80094a8 <xTaskRemoveFromEventList+0xbc>)
 800946e:	f7fe fd0a 	bl	8007e86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009476:	4b0d      	ldr	r3, [pc, #52]	; (80094ac <xTaskRemoveFromEventList+0xc0>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947c:	429a      	cmp	r2, r3
 800947e:	d905      	bls.n	800948c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009480:	2301      	movs	r3, #1
 8009482:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009484:	4b0a      	ldr	r3, [pc, #40]	; (80094b0 <xTaskRemoveFromEventList+0xc4>)
 8009486:	2201      	movs	r2, #1
 8009488:	601a      	str	r2, [r3, #0]
 800948a:	e001      	b.n	8009490 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800948c:	2300      	movs	r3, #0
 800948e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009490:	697b      	ldr	r3, [r7, #20]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3718      	adds	r7, #24
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	24000d1c 	.word	0x24000d1c
 80094a0:	24000cfc 	.word	0x24000cfc
 80094a4:	24000824 	.word	0x24000824
 80094a8:	24000cb4 	.word	0x24000cb4
 80094ac:	24000820 	.word	0x24000820
 80094b0:	24000d08 	.word	0x24000d08

080094b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80094bc:	4b06      	ldr	r3, [pc, #24]	; (80094d8 <vTaskInternalSetTimeOutState+0x24>)
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80094c4:	4b05      	ldr	r3, [pc, #20]	; (80094dc <vTaskInternalSetTimeOutState+0x28>)
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	605a      	str	r2, [r3, #4]
}
 80094cc:	bf00      	nop
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	24000d0c 	.word	0x24000d0c
 80094dc:	24000cf8 	.word	0x24000cf8

080094e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b088      	sub	sp, #32
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10a      	bne.n	8009506 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80094f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	613b      	str	r3, [r7, #16]
}
 8009502:	bf00      	nop
 8009504:	e7fe      	b.n	8009504 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10a      	bne.n	8009522 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	60fb      	str	r3, [r7, #12]
}
 800951e:	bf00      	nop
 8009520:	e7fe      	b.n	8009520 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009522:	f000 fe7f 	bl	800a224 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009526:	4b1d      	ldr	r3, [pc, #116]	; (800959c <xTaskCheckForTimeOut+0xbc>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	69ba      	ldr	r2, [r7, #24]
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800953e:	d102      	bne.n	8009546 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009540:	2300      	movs	r3, #0
 8009542:	61fb      	str	r3, [r7, #28]
 8009544:	e023      	b.n	800958e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	4b15      	ldr	r3, [pc, #84]	; (80095a0 <xTaskCheckForTimeOut+0xc0>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	429a      	cmp	r2, r3
 8009550:	d007      	beq.n	8009562 <xTaskCheckForTimeOut+0x82>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	69ba      	ldr	r2, [r7, #24]
 8009558:	429a      	cmp	r2, r3
 800955a:	d302      	bcc.n	8009562 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800955c:	2301      	movs	r3, #1
 800955e:	61fb      	str	r3, [r7, #28]
 8009560:	e015      	b.n	800958e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	697a      	ldr	r2, [r7, #20]
 8009568:	429a      	cmp	r2, r3
 800956a:	d20b      	bcs.n	8009584 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	1ad2      	subs	r2, r2, r3
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff ff9b 	bl	80094b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800957e:	2300      	movs	r3, #0
 8009580:	61fb      	str	r3, [r7, #28]
 8009582:	e004      	b.n	800958e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	2200      	movs	r2, #0
 8009588:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800958a:	2301      	movs	r3, #1
 800958c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800958e:	f000 fe79 	bl	800a284 <vPortExitCritical>

	return xReturn;
 8009592:	69fb      	ldr	r3, [r7, #28]
}
 8009594:	4618      	mov	r0, r3
 8009596:	3720      	adds	r7, #32
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	24000cf8 	.word	0x24000cf8
 80095a0:	24000d0c 	.word	0x24000d0c

080095a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80095a4:	b480      	push	{r7}
 80095a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80095a8:	4b03      	ldr	r3, [pc, #12]	; (80095b8 <vTaskMissedYield+0x14>)
 80095aa:	2201      	movs	r2, #1
 80095ac:	601a      	str	r2, [r3, #0]
}
 80095ae:	bf00      	nop
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	24000d08 	.word	0x24000d08

080095bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80095c4:	f000 f852 	bl	800966c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80095c8:	4b06      	ldr	r3, [pc, #24]	; (80095e4 <prvIdleTask+0x28>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d9f9      	bls.n	80095c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80095d0:	4b05      	ldr	r3, [pc, #20]	; (80095e8 <prvIdleTask+0x2c>)
 80095d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095d6:	601a      	str	r2, [r3, #0]
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80095e0:	e7f0      	b.n	80095c4 <prvIdleTask+0x8>
 80095e2:	bf00      	nop
 80095e4:	24000824 	.word	0x24000824
 80095e8:	e000ed04 	.word	0xe000ed04

080095ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095f2:	2300      	movs	r3, #0
 80095f4:	607b      	str	r3, [r7, #4]
 80095f6:	e00c      	b.n	8009612 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	4613      	mov	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4a12      	ldr	r2, [pc, #72]	; (800964c <prvInitialiseTaskLists+0x60>)
 8009604:	4413      	add	r3, r2
 8009606:	4618      	mov	r0, r3
 8009608:	f7fe fc10 	bl	8007e2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	3301      	adds	r3, #1
 8009610:	607b      	str	r3, [r7, #4]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b37      	cmp	r3, #55	; 0x37
 8009616:	d9ef      	bls.n	80095f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009618:	480d      	ldr	r0, [pc, #52]	; (8009650 <prvInitialiseTaskLists+0x64>)
 800961a:	f7fe fc07 	bl	8007e2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800961e:	480d      	ldr	r0, [pc, #52]	; (8009654 <prvInitialiseTaskLists+0x68>)
 8009620:	f7fe fc04 	bl	8007e2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009624:	480c      	ldr	r0, [pc, #48]	; (8009658 <prvInitialiseTaskLists+0x6c>)
 8009626:	f7fe fc01 	bl	8007e2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800962a:	480c      	ldr	r0, [pc, #48]	; (800965c <prvInitialiseTaskLists+0x70>)
 800962c:	f7fe fbfe 	bl	8007e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009630:	480b      	ldr	r0, [pc, #44]	; (8009660 <prvInitialiseTaskLists+0x74>)
 8009632:	f7fe fbfb 	bl	8007e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009636:	4b0b      	ldr	r3, [pc, #44]	; (8009664 <prvInitialiseTaskLists+0x78>)
 8009638:	4a05      	ldr	r2, [pc, #20]	; (8009650 <prvInitialiseTaskLists+0x64>)
 800963a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800963c:	4b0a      	ldr	r3, [pc, #40]	; (8009668 <prvInitialiseTaskLists+0x7c>)
 800963e:	4a05      	ldr	r2, [pc, #20]	; (8009654 <prvInitialiseTaskLists+0x68>)
 8009640:	601a      	str	r2, [r3, #0]
}
 8009642:	bf00      	nop
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	24000824 	.word	0x24000824
 8009650:	24000c84 	.word	0x24000c84
 8009654:	24000c98 	.word	0x24000c98
 8009658:	24000cb4 	.word	0x24000cb4
 800965c:	24000cc8 	.word	0x24000cc8
 8009660:	24000ce0 	.word	0x24000ce0
 8009664:	24000cac 	.word	0x24000cac
 8009668:	24000cb0 	.word	0x24000cb0

0800966c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009672:	e019      	b.n	80096a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009674:	f000 fdd6 	bl	800a224 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009678:	4b10      	ldr	r3, [pc, #64]	; (80096bc <prvCheckTasksWaitingTermination+0x50>)
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	3304      	adds	r3, #4
 8009684:	4618      	mov	r0, r3
 8009686:	f7fe fc5b 	bl	8007f40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800968a:	4b0d      	ldr	r3, [pc, #52]	; (80096c0 <prvCheckTasksWaitingTermination+0x54>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	3b01      	subs	r3, #1
 8009690:	4a0b      	ldr	r2, [pc, #44]	; (80096c0 <prvCheckTasksWaitingTermination+0x54>)
 8009692:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009694:	4b0b      	ldr	r3, [pc, #44]	; (80096c4 <prvCheckTasksWaitingTermination+0x58>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	3b01      	subs	r3, #1
 800969a:	4a0a      	ldr	r2, [pc, #40]	; (80096c4 <prvCheckTasksWaitingTermination+0x58>)
 800969c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800969e:	f000 fdf1 	bl	800a284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f810 	bl	80096c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096a8:	4b06      	ldr	r3, [pc, #24]	; (80096c4 <prvCheckTasksWaitingTermination+0x58>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1e1      	bne.n	8009674 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80096b0:	bf00      	nop
 80096b2:	bf00      	nop
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	24000cc8 	.word	0x24000cc8
 80096c0:	24000cf4 	.word	0x24000cf4
 80096c4:	24000cdc 	.word	0x24000cdc

080096c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3354      	adds	r3, #84	; 0x54
 80096d4:	4618      	mov	r0, r3
 80096d6:	f001 f95f 	bl	800a998 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d108      	bne.n	80096f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e8:	4618      	mov	r0, r3
 80096ea:	f000 ff89 	bl	800a600 <vPortFree>
				vPortFree( pxTCB );
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 ff86 	bl	800a600 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80096f4:	e018      	b.n	8009728 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d103      	bne.n	8009708 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 ff7d 	bl	800a600 <vPortFree>
	}
 8009706:	e00f      	b.n	8009728 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800970e:	2b02      	cmp	r3, #2
 8009710:	d00a      	beq.n	8009728 <prvDeleteTCB+0x60>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	60fb      	str	r3, [r7, #12]
}
 8009724:	bf00      	nop
 8009726:	e7fe      	b.n	8009726 <prvDeleteTCB+0x5e>
	}
 8009728:	bf00      	nop
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009736:	4b0c      	ldr	r3, [pc, #48]	; (8009768 <prvResetNextTaskUnblockTime+0x38>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d104      	bne.n	800974a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009740:	4b0a      	ldr	r3, [pc, #40]	; (800976c <prvResetNextTaskUnblockTime+0x3c>)
 8009742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009746:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009748:	e008      	b.n	800975c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800974a:	4b07      	ldr	r3, [pc, #28]	; (8009768 <prvResetNextTaskUnblockTime+0x38>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	4a04      	ldr	r2, [pc, #16]	; (800976c <prvResetNextTaskUnblockTime+0x3c>)
 800975a:	6013      	str	r3, [r2, #0]
}
 800975c:	bf00      	nop
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	24000cac 	.word	0x24000cac
 800976c:	24000d14 	.word	0x24000d14

08009770 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009776:	4b0b      	ldr	r3, [pc, #44]	; (80097a4 <xTaskGetSchedulerState+0x34>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d102      	bne.n	8009784 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800977e:	2301      	movs	r3, #1
 8009780:	607b      	str	r3, [r7, #4]
 8009782:	e008      	b.n	8009796 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009784:	4b08      	ldr	r3, [pc, #32]	; (80097a8 <xTaskGetSchedulerState+0x38>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d102      	bne.n	8009792 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800978c:	2302      	movs	r3, #2
 800978e:	607b      	str	r3, [r7, #4]
 8009790:	e001      	b.n	8009796 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009792:	2300      	movs	r3, #0
 8009794:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009796:	687b      	ldr	r3, [r7, #4]
	}
 8009798:	4618      	mov	r0, r3
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr
 80097a4:	24000d00 	.word	0x24000d00
 80097a8:	24000d1c 	.word	0x24000d1c

080097ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80097b8:	2300      	movs	r3, #0
 80097ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d056      	beq.n	8009870 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80097c2:	4b2e      	ldr	r3, [pc, #184]	; (800987c <xTaskPriorityDisinherit+0xd0>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	693a      	ldr	r2, [r7, #16]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d00a      	beq.n	80097e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	60fb      	str	r3, [r7, #12]
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10a      	bne.n	8009800 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80097ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ee:	f383 8811 	msr	BASEPRI, r3
 80097f2:	f3bf 8f6f 	isb	sy
 80097f6:	f3bf 8f4f 	dsb	sy
 80097fa:	60bb      	str	r3, [r7, #8]
}
 80097fc:	bf00      	nop
 80097fe:	e7fe      	b.n	80097fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009804:	1e5a      	subs	r2, r3, #1
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009812:	429a      	cmp	r2, r3
 8009814:	d02c      	beq.n	8009870 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800981a:	2b00      	cmp	r3, #0
 800981c:	d128      	bne.n	8009870 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	3304      	adds	r3, #4
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe fb8c 	bl	8007f40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009834:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009840:	4b0f      	ldr	r3, [pc, #60]	; (8009880 <xTaskPriorityDisinherit+0xd4>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	429a      	cmp	r2, r3
 8009846:	d903      	bls.n	8009850 <xTaskPriorityDisinherit+0xa4>
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	4a0c      	ldr	r2, [pc, #48]	; (8009880 <xTaskPriorityDisinherit+0xd4>)
 800984e:	6013      	str	r3, [r2, #0]
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009854:	4613      	mov	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	4413      	add	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4a09      	ldr	r2, [pc, #36]	; (8009884 <xTaskPriorityDisinherit+0xd8>)
 800985e:	441a      	add	r2, r3
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	3304      	adds	r3, #4
 8009864:	4619      	mov	r1, r3
 8009866:	4610      	mov	r0, r2
 8009868:	f7fe fb0d 	bl	8007e86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800986c:	2301      	movs	r3, #1
 800986e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009870:	697b      	ldr	r3, [r7, #20]
	}
 8009872:	4618      	mov	r0, r3
 8009874:	3718      	adds	r7, #24
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	24000820 	.word	0x24000820
 8009880:	24000cfc 	.word	0x24000cfc
 8009884:	24000824 	.word	0x24000824

08009888 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009892:	4b21      	ldr	r3, [pc, #132]	; (8009918 <prvAddCurrentTaskToDelayedList+0x90>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009898:	4b20      	ldr	r3, [pc, #128]	; (800991c <prvAddCurrentTaskToDelayedList+0x94>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	3304      	adds	r3, #4
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fe fb4e 	bl	8007f40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098aa:	d10a      	bne.n	80098c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d007      	beq.n	80098c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098b2:	4b1a      	ldr	r3, [pc, #104]	; (800991c <prvAddCurrentTaskToDelayedList+0x94>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	3304      	adds	r3, #4
 80098b8:	4619      	mov	r1, r3
 80098ba:	4819      	ldr	r0, [pc, #100]	; (8009920 <prvAddCurrentTaskToDelayedList+0x98>)
 80098bc:	f7fe fae3 	bl	8007e86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80098c0:	e026      	b.n	8009910 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4413      	add	r3, r2
 80098c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098ca:	4b14      	ldr	r3, [pc, #80]	; (800991c <prvAddCurrentTaskToDelayedList+0x94>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68ba      	ldr	r2, [r7, #8]
 80098d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d209      	bcs.n	80098ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098da:	4b12      	ldr	r3, [pc, #72]	; (8009924 <prvAddCurrentTaskToDelayedList+0x9c>)
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	4b0f      	ldr	r3, [pc, #60]	; (800991c <prvAddCurrentTaskToDelayedList+0x94>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3304      	adds	r3, #4
 80098e4:	4619      	mov	r1, r3
 80098e6:	4610      	mov	r0, r2
 80098e8:	f7fe faf1 	bl	8007ece <vListInsert>
}
 80098ec:	e010      	b.n	8009910 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098ee:	4b0e      	ldr	r3, [pc, #56]	; (8009928 <prvAddCurrentTaskToDelayedList+0xa0>)
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	4b0a      	ldr	r3, [pc, #40]	; (800991c <prvAddCurrentTaskToDelayedList+0x94>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	3304      	adds	r3, #4
 80098f8:	4619      	mov	r1, r3
 80098fa:	4610      	mov	r0, r2
 80098fc:	f7fe fae7 	bl	8007ece <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009900:	4b0a      	ldr	r3, [pc, #40]	; (800992c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	429a      	cmp	r2, r3
 8009908:	d202      	bcs.n	8009910 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800990a:	4a08      	ldr	r2, [pc, #32]	; (800992c <prvAddCurrentTaskToDelayedList+0xa4>)
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	6013      	str	r3, [r2, #0]
}
 8009910:	bf00      	nop
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	24000cf8 	.word	0x24000cf8
 800991c:	24000820 	.word	0x24000820
 8009920:	24000ce0 	.word	0x24000ce0
 8009924:	24000cb0 	.word	0x24000cb0
 8009928:	24000cac 	.word	0x24000cac
 800992c:	24000d14 	.word	0x24000d14

08009930 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b08a      	sub	sp, #40	; 0x28
 8009934:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009936:	2300      	movs	r3, #0
 8009938:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800993a:	f000 fb07 	bl	8009f4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800993e:	4b1c      	ldr	r3, [pc, #112]	; (80099b0 <xTimerCreateTimerTask+0x80>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d021      	beq.n	800998a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009946:	2300      	movs	r3, #0
 8009948:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800994a:	2300      	movs	r3, #0
 800994c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800994e:	1d3a      	adds	r2, r7, #4
 8009950:	f107 0108 	add.w	r1, r7, #8
 8009954:	f107 030c 	add.w	r3, r7, #12
 8009958:	4618      	mov	r0, r3
 800995a:	f7fe fa4d 	bl	8007df8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800995e:	6879      	ldr	r1, [r7, #4]
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	9202      	str	r2, [sp, #8]
 8009966:	9301      	str	r3, [sp, #4]
 8009968:	2302      	movs	r3, #2
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	2300      	movs	r3, #0
 800996e:	460a      	mov	r2, r1
 8009970:	4910      	ldr	r1, [pc, #64]	; (80099b4 <xTimerCreateTimerTask+0x84>)
 8009972:	4811      	ldr	r0, [pc, #68]	; (80099b8 <xTimerCreateTimerTask+0x88>)
 8009974:	f7ff f8b4 	bl	8008ae0 <xTaskCreateStatic>
 8009978:	4603      	mov	r3, r0
 800997a:	4a10      	ldr	r2, [pc, #64]	; (80099bc <xTimerCreateTimerTask+0x8c>)
 800997c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800997e:	4b0f      	ldr	r3, [pc, #60]	; (80099bc <xTimerCreateTimerTask+0x8c>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d001      	beq.n	800998a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009986:	2301      	movs	r3, #1
 8009988:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10a      	bne.n	80099a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	613b      	str	r3, [r7, #16]
}
 80099a2:	bf00      	nop
 80099a4:	e7fe      	b.n	80099a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80099a6:	697b      	ldr	r3, [r7, #20]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3718      	adds	r7, #24
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	24000d50 	.word	0x24000d50
 80099b4:	0800b3b0 	.word	0x0800b3b0
 80099b8:	08009af5 	.word	0x08009af5
 80099bc:	24000d54 	.word	0x24000d54

080099c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08a      	sub	sp, #40	; 0x28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
 80099cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80099ce:	2300      	movs	r3, #0
 80099d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10a      	bne.n	80099ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80099d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	623b      	str	r3, [r7, #32]
}
 80099ea:	bf00      	nop
 80099ec:	e7fe      	b.n	80099ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80099ee:	4b1a      	ldr	r3, [pc, #104]	; (8009a58 <xTimerGenericCommand+0x98>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d02a      	beq.n	8009a4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	2b05      	cmp	r3, #5
 8009a06:	dc18      	bgt.n	8009a3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a08:	f7ff feb2 	bl	8009770 <xTaskGetSchedulerState>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d109      	bne.n	8009a26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a12:	4b11      	ldr	r3, [pc, #68]	; (8009a58 <xTimerGenericCommand+0x98>)
 8009a14:	6818      	ldr	r0, [r3, #0]
 8009a16:	f107 0110 	add.w	r1, r7, #16
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a1e:	f7fe fbf7 	bl	8008210 <xQueueGenericSend>
 8009a22:	6278      	str	r0, [r7, #36]	; 0x24
 8009a24:	e012      	b.n	8009a4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a26:	4b0c      	ldr	r3, [pc, #48]	; (8009a58 <xTimerGenericCommand+0x98>)
 8009a28:	6818      	ldr	r0, [r3, #0]
 8009a2a:	f107 0110 	add.w	r1, r7, #16
 8009a2e:	2300      	movs	r3, #0
 8009a30:	2200      	movs	r2, #0
 8009a32:	f7fe fbed 	bl	8008210 <xQueueGenericSend>
 8009a36:	6278      	str	r0, [r7, #36]	; 0x24
 8009a38:	e008      	b.n	8009a4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a3a:	4b07      	ldr	r3, [pc, #28]	; (8009a58 <xTimerGenericCommand+0x98>)
 8009a3c:	6818      	ldr	r0, [r3, #0]
 8009a3e:	f107 0110 	add.w	r1, r7, #16
 8009a42:	2300      	movs	r3, #0
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	f7fe fce1 	bl	800840c <xQueueGenericSendFromISR>
 8009a4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3728      	adds	r7, #40	; 0x28
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	24000d50 	.word	0x24000d50

08009a5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b088      	sub	sp, #32
 8009a60:	af02      	add	r7, sp, #8
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a66:	4b22      	ldr	r3, [pc, #136]	; (8009af0 <prvProcessExpiredTimer+0x94>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	3304      	adds	r3, #4
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fe fa63 	bl	8007f40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a80:	f003 0304 	and.w	r3, r3, #4
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d022      	beq.n	8009ace <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	699a      	ldr	r2, [r3, #24]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	18d1      	adds	r1, r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	6978      	ldr	r0, [r7, #20]
 8009a96:	f000 f8d1 	bl	8009c3c <prvInsertTimerInActiveList>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d01f      	beq.n	8009ae0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	6978      	ldr	r0, [r7, #20]
 8009aac:	f7ff ff88 	bl	80099c0 <xTimerGenericCommand>
 8009ab0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d113      	bne.n	8009ae0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	60fb      	str	r3, [r7, #12]
}
 8009aca:	bf00      	nop
 8009acc:	e7fe      	b.n	8009acc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ad4:	f023 0301 	bic.w	r3, r3, #1
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	6a1b      	ldr	r3, [r3, #32]
 8009ae4:	6978      	ldr	r0, [r7, #20]
 8009ae6:	4798      	blx	r3
}
 8009ae8:	bf00      	nop
 8009aea:	3718      	adds	r7, #24
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	24000d48 	.word	0x24000d48

08009af4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009afc:	f107 0308 	add.w	r3, r7, #8
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 f857 	bl	8009bb4 <prvGetNextExpireTime>
 8009b06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f000 f803 	bl	8009b18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b12:	f000 f8d5 	bl	8009cc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b16:	e7f1      	b.n	8009afc <prvTimerTask+0x8>

08009b18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b22:	f7ff fa39 	bl	8008f98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b26:	f107 0308 	add.w	r3, r7, #8
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 f866 	bl	8009bfc <prvSampleTimeNow>
 8009b30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d130      	bne.n	8009b9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d10a      	bne.n	8009b54 <prvProcessTimerOrBlockTask+0x3c>
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d806      	bhi.n	8009b54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009b46:	f7ff fa35 	bl	8008fb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b4a:	68f9      	ldr	r1, [r7, #12]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f7ff ff85 	bl	8009a5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b52:	e024      	b.n	8009b9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d008      	beq.n	8009b6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b5a:	4b13      	ldr	r3, [pc, #76]	; (8009ba8 <prvProcessTimerOrBlockTask+0x90>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d101      	bne.n	8009b68 <prvProcessTimerOrBlockTask+0x50>
 8009b64:	2301      	movs	r3, #1
 8009b66:	e000      	b.n	8009b6a <prvProcessTimerOrBlockTask+0x52>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b6c:	4b0f      	ldr	r3, [pc, #60]	; (8009bac <prvProcessTimerOrBlockTask+0x94>)
 8009b6e:	6818      	ldr	r0, [r3, #0]
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	683a      	ldr	r2, [r7, #0]
 8009b78:	4619      	mov	r1, r3
 8009b7a:	f7fe ff7d 	bl	8008a78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b7e:	f7ff fa19 	bl	8008fb4 <xTaskResumeAll>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10a      	bne.n	8009b9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009b88:	4b09      	ldr	r3, [pc, #36]	; (8009bb0 <prvProcessTimerOrBlockTask+0x98>)
 8009b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b8e:	601a      	str	r2, [r3, #0]
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	f3bf 8f6f 	isb	sy
}
 8009b98:	e001      	b.n	8009b9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009b9a:	f7ff fa0b 	bl	8008fb4 <xTaskResumeAll>
}
 8009b9e:	bf00      	nop
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	24000d4c 	.word	0x24000d4c
 8009bac:	24000d50 	.word	0x24000d50
 8009bb0:	e000ed04 	.word	0xe000ed04

08009bb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009bbc:	4b0e      	ldr	r3, [pc, #56]	; (8009bf8 <prvGetNextExpireTime+0x44>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d101      	bne.n	8009bca <prvGetNextExpireTime+0x16>
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	e000      	b.n	8009bcc <prvGetNextExpireTime+0x18>
 8009bca:	2200      	movs	r2, #0
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d105      	bne.n	8009be4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bd8:	4b07      	ldr	r3, [pc, #28]	; (8009bf8 <prvGetNextExpireTime+0x44>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	60fb      	str	r3, [r7, #12]
 8009be2:	e001      	b.n	8009be8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009be4:	2300      	movs	r3, #0
 8009be6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009be8:	68fb      	ldr	r3, [r7, #12]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	24000d48 	.word	0x24000d48

08009bfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c04:	f7ff fa74 	bl	80090f0 <xTaskGetTickCount>
 8009c08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c0a:	4b0b      	ldr	r3, [pc, #44]	; (8009c38 <prvSampleTimeNow+0x3c>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d205      	bcs.n	8009c20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c14:	f000 f936 	bl	8009e84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	601a      	str	r2, [r3, #0]
 8009c1e:	e002      	b.n	8009c26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c26:	4a04      	ldr	r2, [pc, #16]	; (8009c38 <prvSampleTimeNow+0x3c>)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	24000d58 	.word	0x24000d58

08009c3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
 8009c48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d812      	bhi.n	8009c88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	1ad2      	subs	r2, r2, r3
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d302      	bcc.n	8009c76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009c70:	2301      	movs	r3, #1
 8009c72:	617b      	str	r3, [r7, #20]
 8009c74:	e01b      	b.n	8009cae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009c76:	4b10      	ldr	r3, [pc, #64]	; (8009cb8 <prvInsertTimerInActiveList+0x7c>)
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	3304      	adds	r3, #4
 8009c7e:	4619      	mov	r1, r3
 8009c80:	4610      	mov	r0, r2
 8009c82:	f7fe f924 	bl	8007ece <vListInsert>
 8009c86:	e012      	b.n	8009cae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d206      	bcs.n	8009c9e <prvInsertTimerInActiveList+0x62>
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d302      	bcc.n	8009c9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	617b      	str	r3, [r7, #20]
 8009c9c:	e007      	b.n	8009cae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c9e:	4b07      	ldr	r3, [pc, #28]	; (8009cbc <prvInsertTimerInActiveList+0x80>)
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	4610      	mov	r0, r2
 8009caa:	f7fe f910 	bl	8007ece <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009cae:	697b      	ldr	r3, [r7, #20]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3718      	adds	r7, #24
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	24000d4c 	.word	0x24000d4c
 8009cbc:	24000d48 	.word	0x24000d48

08009cc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b08e      	sub	sp, #56	; 0x38
 8009cc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cc6:	e0ca      	b.n	8009e5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	da18      	bge.n	8009d00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009cce:	1d3b      	adds	r3, r7, #4
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10a      	bne.n	8009cf0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	61fb      	str	r3, [r7, #28]
}
 8009cec:	bf00      	nop
 8009cee:	e7fe      	b.n	8009cee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cf6:	6850      	ldr	r0, [r2, #4]
 8009cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cfa:	6892      	ldr	r2, [r2, #8]
 8009cfc:	4611      	mov	r1, r2
 8009cfe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f2c0 80aa 	blt.w	8009e5c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d004      	beq.n	8009d1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d16:	3304      	adds	r3, #4
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7fe f911 	bl	8007f40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d1e:	463b      	mov	r3, r7
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7ff ff6b 	bl	8009bfc <prvSampleTimeNow>
 8009d26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2b09      	cmp	r3, #9
 8009d2c:	f200 8097 	bhi.w	8009e5e <prvProcessReceivedCommands+0x19e>
 8009d30:	a201      	add	r2, pc, #4	; (adr r2, 8009d38 <prvProcessReceivedCommands+0x78>)
 8009d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d36:	bf00      	nop
 8009d38:	08009d61 	.word	0x08009d61
 8009d3c:	08009d61 	.word	0x08009d61
 8009d40:	08009d61 	.word	0x08009d61
 8009d44:	08009dd5 	.word	0x08009dd5
 8009d48:	08009de9 	.word	0x08009de9
 8009d4c:	08009e33 	.word	0x08009e33
 8009d50:	08009d61 	.word	0x08009d61
 8009d54:	08009d61 	.word	0x08009d61
 8009d58:	08009dd5 	.word	0x08009dd5
 8009d5c:	08009de9 	.word	0x08009de9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d66:	f043 0301 	orr.w	r3, r3, #1
 8009d6a:	b2da      	uxtb	r2, r3
 8009d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	18d1      	adds	r1, r2, r3
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d80:	f7ff ff5c 	bl	8009c3c <prvInsertTimerInActiveList>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d069      	beq.n	8009e5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d98:	f003 0304 	and.w	r3, r3, #4
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d05e      	beq.n	8009e5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	441a      	add	r2, r3
 8009da8:	2300      	movs	r3, #0
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	2300      	movs	r3, #0
 8009dae:	2100      	movs	r1, #0
 8009db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009db2:	f7ff fe05 	bl	80099c0 <xTimerGenericCommand>
 8009db6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009db8:	6a3b      	ldr	r3, [r7, #32]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d14f      	bne.n	8009e5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	61bb      	str	r3, [r7, #24]
}
 8009dd0:	bf00      	nop
 8009dd2:	e7fe      	b.n	8009dd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dda:	f023 0301 	bic.w	r3, r3, #1
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009de6:	e03a      	b.n	8009e5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dee:	f043 0301 	orr.w	r3, r3, #1
 8009df2:	b2da      	uxtb	r2, r3
 8009df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10a      	bne.n	8009e1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0c:	f383 8811 	msr	BASEPRI, r3
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	617b      	str	r3, [r7, #20]
}
 8009e1a:	bf00      	nop
 8009e1c:	e7fe      	b.n	8009e1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e20:	699a      	ldr	r2, [r3, #24]
 8009e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e24:	18d1      	adds	r1, r2, r3
 8009e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e2c:	f7ff ff06 	bl	8009c3c <prvInsertTimerInActiveList>
					break;
 8009e30:	e015      	b.n	8009e5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e38:	f003 0302 	and.w	r3, r3, #2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d103      	bne.n	8009e48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e42:	f000 fbdd 	bl	800a600 <vPortFree>
 8009e46:	e00a      	b.n	8009e5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e4e:	f023 0301 	bic.w	r3, r3, #1
 8009e52:	b2da      	uxtb	r2, r3
 8009e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e5a:	e000      	b.n	8009e5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009e5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e5e:	4b08      	ldr	r3, [pc, #32]	; (8009e80 <prvProcessReceivedCommands+0x1c0>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	1d39      	adds	r1, r7, #4
 8009e64:	2200      	movs	r2, #0
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fe fb6c 	bl	8008544 <xQueueReceive>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f47f af2a 	bne.w	8009cc8 <prvProcessReceivedCommands+0x8>
	}
}
 8009e74:	bf00      	nop
 8009e76:	bf00      	nop
 8009e78:	3730      	adds	r7, #48	; 0x30
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	24000d50 	.word	0x24000d50

08009e84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b088      	sub	sp, #32
 8009e88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e8a:	e048      	b.n	8009f1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e8c:	4b2d      	ldr	r3, [pc, #180]	; (8009f44 <prvSwitchTimerLists+0xc0>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e96:	4b2b      	ldr	r3, [pc, #172]	; (8009f44 <prvSwitchTimerLists+0xc0>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7fe f84b 	bl	8007f40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6a1b      	ldr	r3, [r3, #32]
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eb8:	f003 0304 	and.w	r3, r3, #4
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d02e      	beq.n	8009f1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	699b      	ldr	r3, [r3, #24]
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d90e      	bls.n	8009ef0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ede:	4b19      	ldr	r3, [pc, #100]	; (8009f44 <prvSwitchTimerLists+0xc0>)
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	4610      	mov	r0, r2
 8009eea:	f7fd fff0 	bl	8007ece <vListInsert>
 8009eee:	e016      	b.n	8009f1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	2100      	movs	r1, #0
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f7ff fd60 	bl	80099c0 <xTimerGenericCommand>
 8009f00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10a      	bne.n	8009f1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0c:	f383 8811 	msr	BASEPRI, r3
 8009f10:	f3bf 8f6f 	isb	sy
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	603b      	str	r3, [r7, #0]
}
 8009f1a:	bf00      	nop
 8009f1c:	e7fe      	b.n	8009f1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f1e:	4b09      	ldr	r3, [pc, #36]	; (8009f44 <prvSwitchTimerLists+0xc0>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d1b1      	bne.n	8009e8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f28:	4b06      	ldr	r3, [pc, #24]	; (8009f44 <prvSwitchTimerLists+0xc0>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f2e:	4b06      	ldr	r3, [pc, #24]	; (8009f48 <prvSwitchTimerLists+0xc4>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a04      	ldr	r2, [pc, #16]	; (8009f44 <prvSwitchTimerLists+0xc0>)
 8009f34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f36:	4a04      	ldr	r2, [pc, #16]	; (8009f48 <prvSwitchTimerLists+0xc4>)
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	6013      	str	r3, [r2, #0]
}
 8009f3c:	bf00      	nop
 8009f3e:	3718      	adds	r7, #24
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	24000d48 	.word	0x24000d48
 8009f48:	24000d4c 	.word	0x24000d4c

08009f4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f52:	f000 f967 	bl	800a224 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f56:	4b15      	ldr	r3, [pc, #84]	; (8009fac <prvCheckForValidListAndQueue+0x60>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d120      	bne.n	8009fa0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f5e:	4814      	ldr	r0, [pc, #80]	; (8009fb0 <prvCheckForValidListAndQueue+0x64>)
 8009f60:	f7fd ff64 	bl	8007e2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f64:	4813      	ldr	r0, [pc, #76]	; (8009fb4 <prvCheckForValidListAndQueue+0x68>)
 8009f66:	f7fd ff61 	bl	8007e2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f6a:	4b13      	ldr	r3, [pc, #76]	; (8009fb8 <prvCheckForValidListAndQueue+0x6c>)
 8009f6c:	4a10      	ldr	r2, [pc, #64]	; (8009fb0 <prvCheckForValidListAndQueue+0x64>)
 8009f6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f70:	4b12      	ldr	r3, [pc, #72]	; (8009fbc <prvCheckForValidListAndQueue+0x70>)
 8009f72:	4a10      	ldr	r2, [pc, #64]	; (8009fb4 <prvCheckForValidListAndQueue+0x68>)
 8009f74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f76:	2300      	movs	r3, #0
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	4b11      	ldr	r3, [pc, #68]	; (8009fc0 <prvCheckForValidListAndQueue+0x74>)
 8009f7c:	4a11      	ldr	r2, [pc, #68]	; (8009fc4 <prvCheckForValidListAndQueue+0x78>)
 8009f7e:	2110      	movs	r1, #16
 8009f80:	200a      	movs	r0, #10
 8009f82:	f7fe f86f 	bl	8008064 <xQueueGenericCreateStatic>
 8009f86:	4603      	mov	r3, r0
 8009f88:	4a08      	ldr	r2, [pc, #32]	; (8009fac <prvCheckForValidListAndQueue+0x60>)
 8009f8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009f8c:	4b07      	ldr	r3, [pc, #28]	; (8009fac <prvCheckForValidListAndQueue+0x60>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d005      	beq.n	8009fa0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009f94:	4b05      	ldr	r3, [pc, #20]	; (8009fac <prvCheckForValidListAndQueue+0x60>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	490b      	ldr	r1, [pc, #44]	; (8009fc8 <prvCheckForValidListAndQueue+0x7c>)
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fe fd42 	bl	8008a24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fa0:	f000 f970 	bl	800a284 <vPortExitCritical>
}
 8009fa4:	bf00      	nop
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	24000d50 	.word	0x24000d50
 8009fb0:	24000d20 	.word	0x24000d20
 8009fb4:	24000d34 	.word	0x24000d34
 8009fb8:	24000d48 	.word	0x24000d48
 8009fbc:	24000d4c 	.word	0x24000d4c
 8009fc0:	24000dfc 	.word	0x24000dfc
 8009fc4:	24000d5c 	.word	0x24000d5c
 8009fc8:	0800b3b8 	.word	0x0800b3b8

08009fcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	3b04      	subs	r3, #4
 8009fdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009fe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	3b04      	subs	r3, #4
 8009fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	f023 0201 	bic.w	r2, r3, #1
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	3b04      	subs	r3, #4
 8009ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ffc:	4a0c      	ldr	r2, [pc, #48]	; (800a030 <pxPortInitialiseStack+0x64>)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	3b14      	subs	r3, #20
 800a006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3b04      	subs	r3, #4
 800a012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f06f 0202 	mvn.w	r2, #2
 800a01a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	3b20      	subs	r3, #32
 800a020:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a022:	68fb      	ldr	r3, [r7, #12]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3714      	adds	r7, #20
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr
 800a030:	0800a035 	.word	0x0800a035

0800a034 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a03a:	2300      	movs	r3, #0
 800a03c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a03e:	4b12      	ldr	r3, [pc, #72]	; (800a088 <prvTaskExitError+0x54>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a046:	d00a      	beq.n	800a05e <prvTaskExitError+0x2a>
	__asm volatile
 800a048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04c:	f383 8811 	msr	BASEPRI, r3
 800a050:	f3bf 8f6f 	isb	sy
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	60fb      	str	r3, [r7, #12]
}
 800a05a:	bf00      	nop
 800a05c:	e7fe      	b.n	800a05c <prvTaskExitError+0x28>
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	60bb      	str	r3, [r7, #8]
}
 800a070:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a072:	bf00      	nop
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d0fc      	beq.n	800a074 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a07a:	bf00      	nop
 800a07c:	bf00      	nop
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr
 800a088:	24000010 	.word	0x24000010
 800a08c:	00000000 	.word	0x00000000

0800a090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a090:	4b07      	ldr	r3, [pc, #28]	; (800a0b0 <pxCurrentTCBConst2>)
 800a092:	6819      	ldr	r1, [r3, #0]
 800a094:	6808      	ldr	r0, [r1, #0]
 800a096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a09a:	f380 8809 	msr	PSP, r0
 800a09e:	f3bf 8f6f 	isb	sy
 800a0a2:	f04f 0000 	mov.w	r0, #0
 800a0a6:	f380 8811 	msr	BASEPRI, r0
 800a0aa:	4770      	bx	lr
 800a0ac:	f3af 8000 	nop.w

0800a0b0 <pxCurrentTCBConst2>:
 800a0b0:	24000820 	.word	0x24000820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0b4:	bf00      	nop
 800a0b6:	bf00      	nop

0800a0b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a0b8:	4808      	ldr	r0, [pc, #32]	; (800a0dc <prvPortStartFirstTask+0x24>)
 800a0ba:	6800      	ldr	r0, [r0, #0]
 800a0bc:	6800      	ldr	r0, [r0, #0]
 800a0be:	f380 8808 	msr	MSP, r0
 800a0c2:	f04f 0000 	mov.w	r0, #0
 800a0c6:	f380 8814 	msr	CONTROL, r0
 800a0ca:	b662      	cpsie	i
 800a0cc:	b661      	cpsie	f
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	df00      	svc	0
 800a0d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0da:	bf00      	nop
 800a0dc:	e000ed08 	.word	0xe000ed08

0800a0e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a0e6:	4b46      	ldr	r3, [pc, #280]	; (800a200 <xPortStartScheduler+0x120>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a46      	ldr	r2, [pc, #280]	; (800a204 <xPortStartScheduler+0x124>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d10a      	bne.n	800a106 <xPortStartScheduler+0x26>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	613b      	str	r3, [r7, #16]
}
 800a102:	bf00      	nop
 800a104:	e7fe      	b.n	800a104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a106:	4b3e      	ldr	r3, [pc, #248]	; (800a200 <xPortStartScheduler+0x120>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a3f      	ldr	r2, [pc, #252]	; (800a208 <xPortStartScheduler+0x128>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d10a      	bne.n	800a126 <xPortStartScheduler+0x46>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	60fb      	str	r3, [r7, #12]
}
 800a122:	bf00      	nop
 800a124:	e7fe      	b.n	800a124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a126:	4b39      	ldr	r3, [pc, #228]	; (800a20c <xPortStartScheduler+0x12c>)
 800a128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	22ff      	movs	r2, #255	; 0xff
 800a136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a140:	78fb      	ldrb	r3, [r7, #3]
 800a142:	b2db      	uxtb	r3, r3
 800a144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a148:	b2da      	uxtb	r2, r3
 800a14a:	4b31      	ldr	r3, [pc, #196]	; (800a210 <xPortStartScheduler+0x130>)
 800a14c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a14e:	4b31      	ldr	r3, [pc, #196]	; (800a214 <xPortStartScheduler+0x134>)
 800a150:	2207      	movs	r2, #7
 800a152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a154:	e009      	b.n	800a16a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a156:	4b2f      	ldr	r3, [pc, #188]	; (800a214 <xPortStartScheduler+0x134>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	3b01      	subs	r3, #1
 800a15c:	4a2d      	ldr	r2, [pc, #180]	; (800a214 <xPortStartScheduler+0x134>)
 800a15e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a160:	78fb      	ldrb	r3, [r7, #3]
 800a162:	b2db      	uxtb	r3, r3
 800a164:	005b      	lsls	r3, r3, #1
 800a166:	b2db      	uxtb	r3, r3
 800a168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a16a:	78fb      	ldrb	r3, [r7, #3]
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a172:	2b80      	cmp	r3, #128	; 0x80
 800a174:	d0ef      	beq.n	800a156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a176:	4b27      	ldr	r3, [pc, #156]	; (800a214 <xPortStartScheduler+0x134>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f1c3 0307 	rsb	r3, r3, #7
 800a17e:	2b04      	cmp	r3, #4
 800a180:	d00a      	beq.n	800a198 <xPortStartScheduler+0xb8>
	__asm volatile
 800a182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a186:	f383 8811 	msr	BASEPRI, r3
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	60bb      	str	r3, [r7, #8]
}
 800a194:	bf00      	nop
 800a196:	e7fe      	b.n	800a196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a198:	4b1e      	ldr	r3, [pc, #120]	; (800a214 <xPortStartScheduler+0x134>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	021b      	lsls	r3, r3, #8
 800a19e:	4a1d      	ldr	r2, [pc, #116]	; (800a214 <xPortStartScheduler+0x134>)
 800a1a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a1a2:	4b1c      	ldr	r3, [pc, #112]	; (800a214 <xPortStartScheduler+0x134>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1aa:	4a1a      	ldr	r2, [pc, #104]	; (800a214 <xPortStartScheduler+0x134>)
 800a1ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	b2da      	uxtb	r2, r3
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a1b6:	4b18      	ldr	r3, [pc, #96]	; (800a218 <xPortStartScheduler+0x138>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a17      	ldr	r2, [pc, #92]	; (800a218 <xPortStartScheduler+0x138>)
 800a1bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a1c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1c2:	4b15      	ldr	r3, [pc, #84]	; (800a218 <xPortStartScheduler+0x138>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a14      	ldr	r2, [pc, #80]	; (800a218 <xPortStartScheduler+0x138>)
 800a1c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a1cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1ce:	f000 f8dd 	bl	800a38c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1d2:	4b12      	ldr	r3, [pc, #72]	; (800a21c <xPortStartScheduler+0x13c>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a1d8:	f000 f8fc 	bl	800a3d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1dc:	4b10      	ldr	r3, [pc, #64]	; (800a220 <xPortStartScheduler+0x140>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a0f      	ldr	r2, [pc, #60]	; (800a220 <xPortStartScheduler+0x140>)
 800a1e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a1e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a1e8:	f7ff ff66 	bl	800a0b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a1ec:	f7ff f84a 	bl	8009284 <vTaskSwitchContext>
	prvTaskExitError();
 800a1f0:	f7ff ff20 	bl	800a034 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3718      	adds	r7, #24
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	e000ed00 	.word	0xe000ed00
 800a204:	410fc271 	.word	0x410fc271
 800a208:	410fc270 	.word	0x410fc270
 800a20c:	e000e400 	.word	0xe000e400
 800a210:	24000e4c 	.word	0x24000e4c
 800a214:	24000e50 	.word	0x24000e50
 800a218:	e000ed20 	.word	0xe000ed20
 800a21c:	24000010 	.word	0x24000010
 800a220:	e000ef34 	.word	0xe000ef34

0800a224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
	__asm volatile
 800a22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22e:	f383 8811 	msr	BASEPRI, r3
 800a232:	f3bf 8f6f 	isb	sy
 800a236:	f3bf 8f4f 	dsb	sy
 800a23a:	607b      	str	r3, [r7, #4]
}
 800a23c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a23e:	4b0f      	ldr	r3, [pc, #60]	; (800a27c <vPortEnterCritical+0x58>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3301      	adds	r3, #1
 800a244:	4a0d      	ldr	r2, [pc, #52]	; (800a27c <vPortEnterCritical+0x58>)
 800a246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a248:	4b0c      	ldr	r3, [pc, #48]	; (800a27c <vPortEnterCritical+0x58>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d10f      	bne.n	800a270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a250:	4b0b      	ldr	r3, [pc, #44]	; (800a280 <vPortEnterCritical+0x5c>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	b2db      	uxtb	r3, r3
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00a      	beq.n	800a270 <vPortEnterCritical+0x4c>
	__asm volatile
 800a25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25e:	f383 8811 	msr	BASEPRI, r3
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	f3bf 8f4f 	dsb	sy
 800a26a:	603b      	str	r3, [r7, #0]
}
 800a26c:	bf00      	nop
 800a26e:	e7fe      	b.n	800a26e <vPortEnterCritical+0x4a>
	}
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr
 800a27c:	24000010 	.word	0x24000010
 800a280:	e000ed04 	.word	0xe000ed04

0800a284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a28a:	4b12      	ldr	r3, [pc, #72]	; (800a2d4 <vPortExitCritical+0x50>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d10a      	bne.n	800a2a8 <vPortExitCritical+0x24>
	__asm volatile
 800a292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	607b      	str	r3, [r7, #4]
}
 800a2a4:	bf00      	nop
 800a2a6:	e7fe      	b.n	800a2a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a2a8:	4b0a      	ldr	r3, [pc, #40]	; (800a2d4 <vPortExitCritical+0x50>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	4a09      	ldr	r2, [pc, #36]	; (800a2d4 <vPortExitCritical+0x50>)
 800a2b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a2b2:	4b08      	ldr	r3, [pc, #32]	; (800a2d4 <vPortExitCritical+0x50>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d105      	bne.n	800a2c6 <vPortExitCritical+0x42>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	f383 8811 	msr	BASEPRI, r3
}
 800a2c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2c6:	bf00      	nop
 800a2c8:	370c      	adds	r7, #12
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	24000010 	.word	0x24000010
	...

0800a2e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a2e0:	f3ef 8009 	mrs	r0, PSP
 800a2e4:	f3bf 8f6f 	isb	sy
 800a2e8:	4b15      	ldr	r3, [pc, #84]	; (800a340 <pxCurrentTCBConst>)
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	f01e 0f10 	tst.w	lr, #16
 800a2f0:	bf08      	it	eq
 800a2f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a2f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2fa:	6010      	str	r0, [r2, #0]
 800a2fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a300:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a304:	f380 8811 	msr	BASEPRI, r0
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	f3bf 8f6f 	isb	sy
 800a310:	f7fe ffb8 	bl	8009284 <vTaskSwitchContext>
 800a314:	f04f 0000 	mov.w	r0, #0
 800a318:	f380 8811 	msr	BASEPRI, r0
 800a31c:	bc09      	pop	{r0, r3}
 800a31e:	6819      	ldr	r1, [r3, #0]
 800a320:	6808      	ldr	r0, [r1, #0]
 800a322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a326:	f01e 0f10 	tst.w	lr, #16
 800a32a:	bf08      	it	eq
 800a32c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a330:	f380 8809 	msr	PSP, r0
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	4770      	bx	lr
 800a33a:	bf00      	nop
 800a33c:	f3af 8000 	nop.w

0800a340 <pxCurrentTCBConst>:
 800a340:	24000820 	.word	0x24000820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a344:	bf00      	nop
 800a346:	bf00      	nop

0800a348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
	__asm volatile
 800a34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	607b      	str	r3, [r7, #4]
}
 800a360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a362:	f7fe fed5 	bl	8009110 <xTaskIncrementTick>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d003      	beq.n	800a374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a36c:	4b06      	ldr	r3, [pc, #24]	; (800a388 <xPortSysTickHandler+0x40>)
 800a36e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a372:	601a      	str	r2, [r3, #0]
 800a374:	2300      	movs	r3, #0
 800a376:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	f383 8811 	msr	BASEPRI, r3
}
 800a37e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a380:	bf00      	nop
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	e000ed04 	.word	0xe000ed04

0800a38c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a38c:	b480      	push	{r7}
 800a38e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a390:	4b0b      	ldr	r3, [pc, #44]	; (800a3c0 <vPortSetupTimerInterrupt+0x34>)
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a396:	4b0b      	ldr	r3, [pc, #44]	; (800a3c4 <vPortSetupTimerInterrupt+0x38>)
 800a398:	2200      	movs	r2, #0
 800a39a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a39c:	4b0a      	ldr	r3, [pc, #40]	; (800a3c8 <vPortSetupTimerInterrupt+0x3c>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a0a      	ldr	r2, [pc, #40]	; (800a3cc <vPortSetupTimerInterrupt+0x40>)
 800a3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3a6:	099b      	lsrs	r3, r3, #6
 800a3a8:	4a09      	ldr	r2, [pc, #36]	; (800a3d0 <vPortSetupTimerInterrupt+0x44>)
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a3ae:	4b04      	ldr	r3, [pc, #16]	; (800a3c0 <vPortSetupTimerInterrupt+0x34>)
 800a3b0:	2207      	movs	r2, #7
 800a3b2:	601a      	str	r2, [r3, #0]
}
 800a3b4:	bf00      	nop
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	e000e010 	.word	0xe000e010
 800a3c4:	e000e018 	.word	0xe000e018
 800a3c8:	24000000 	.word	0x24000000
 800a3cc:	10624dd3 	.word	0x10624dd3
 800a3d0:	e000e014 	.word	0xe000e014

0800a3d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a3d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a3e4 <vPortEnableVFP+0x10>
 800a3d8:	6801      	ldr	r1, [r0, #0]
 800a3da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a3de:	6001      	str	r1, [r0, #0]
 800a3e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a3e2:	bf00      	nop
 800a3e4:	e000ed88 	.word	0xe000ed88

0800a3e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a3ee:	f3ef 8305 	mrs	r3, IPSR
 800a3f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2b0f      	cmp	r3, #15
 800a3f8:	d914      	bls.n	800a424 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a3fa:	4a17      	ldr	r2, [pc, #92]	; (800a458 <vPortValidateInterruptPriority+0x70>)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	4413      	add	r3, r2
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a404:	4b15      	ldr	r3, [pc, #84]	; (800a45c <vPortValidateInterruptPriority+0x74>)
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	7afa      	ldrb	r2, [r7, #11]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d20a      	bcs.n	800a424 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a412:	f383 8811 	msr	BASEPRI, r3
 800a416:	f3bf 8f6f 	isb	sy
 800a41a:	f3bf 8f4f 	dsb	sy
 800a41e:	607b      	str	r3, [r7, #4]
}
 800a420:	bf00      	nop
 800a422:	e7fe      	b.n	800a422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a424:	4b0e      	ldr	r3, [pc, #56]	; (800a460 <vPortValidateInterruptPriority+0x78>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a42c:	4b0d      	ldr	r3, [pc, #52]	; (800a464 <vPortValidateInterruptPriority+0x7c>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	429a      	cmp	r2, r3
 800a432:	d90a      	bls.n	800a44a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	603b      	str	r3, [r7, #0]
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <vPortValidateInterruptPriority+0x60>
	}
 800a44a:	bf00      	nop
 800a44c:	3714      	adds	r7, #20
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr
 800a456:	bf00      	nop
 800a458:	e000e3f0 	.word	0xe000e3f0
 800a45c:	24000e4c 	.word	0x24000e4c
 800a460:	e000ed0c 	.word	0xe000ed0c
 800a464:	24000e50 	.word	0x24000e50

0800a468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b08a      	sub	sp, #40	; 0x28
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a470:	2300      	movs	r3, #0
 800a472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a474:	f7fe fd90 	bl	8008f98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a478:	4b5b      	ldr	r3, [pc, #364]	; (800a5e8 <pvPortMalloc+0x180>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a480:	f000 f920 	bl	800a6c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a484:	4b59      	ldr	r3, [pc, #356]	; (800a5ec <pvPortMalloc+0x184>)
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4013      	ands	r3, r2
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f040 8093 	bne.w	800a5b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d01d      	beq.n	800a4d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a498:	2208      	movs	r2, #8
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4413      	add	r3, r2
 800a49e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f003 0307 	and.w	r3, r3, #7
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d014      	beq.n	800a4d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f023 0307 	bic.w	r3, r3, #7
 800a4b0:	3308      	adds	r3, #8
 800a4b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f003 0307 	and.w	r3, r3, #7
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00a      	beq.n	800a4d4 <pvPortMalloc+0x6c>
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	617b      	str	r3, [r7, #20]
}
 800a4d0:	bf00      	nop
 800a4d2:	e7fe      	b.n	800a4d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d06e      	beq.n	800a5b8 <pvPortMalloc+0x150>
 800a4da:	4b45      	ldr	r3, [pc, #276]	; (800a5f0 <pvPortMalloc+0x188>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d869      	bhi.n	800a5b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a4e4:	4b43      	ldr	r3, [pc, #268]	; (800a5f4 <pvPortMalloc+0x18c>)
 800a4e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a4e8:	4b42      	ldr	r3, [pc, #264]	; (800a5f4 <pvPortMalloc+0x18c>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4ee:	e004      	b.n	800a4fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	429a      	cmp	r2, r3
 800a502:	d903      	bls.n	800a50c <pvPortMalloc+0xa4>
 800a504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d1f1      	bne.n	800a4f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a50c:	4b36      	ldr	r3, [pc, #216]	; (800a5e8 <pvPortMalloc+0x180>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a512:	429a      	cmp	r2, r3
 800a514:	d050      	beq.n	800a5b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2208      	movs	r2, #8
 800a51c:	4413      	add	r3, r2
 800a51e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	6a3b      	ldr	r3, [r7, #32]
 800a526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	685a      	ldr	r2, [r3, #4]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	1ad2      	subs	r2, r2, r3
 800a530:	2308      	movs	r3, #8
 800a532:	005b      	lsls	r3, r3, #1
 800a534:	429a      	cmp	r2, r3
 800a536:	d91f      	bls.n	800a578 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4413      	add	r3, r2
 800a53e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	f003 0307 	and.w	r3, r3, #7
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00a      	beq.n	800a560 <pvPortMalloc+0xf8>
	__asm volatile
 800a54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54e:	f383 8811 	msr	BASEPRI, r3
 800a552:	f3bf 8f6f 	isb	sy
 800a556:	f3bf 8f4f 	dsb	sy
 800a55a:	613b      	str	r3, [r7, #16]
}
 800a55c:	bf00      	nop
 800a55e:	e7fe      	b.n	800a55e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a562:	685a      	ldr	r2, [r3, #4]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	1ad2      	subs	r2, r2, r3
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a572:	69b8      	ldr	r0, [r7, #24]
 800a574:	f000 f908 	bl	800a788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a578:	4b1d      	ldr	r3, [pc, #116]	; (800a5f0 <pvPortMalloc+0x188>)
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	4a1b      	ldr	r2, [pc, #108]	; (800a5f0 <pvPortMalloc+0x188>)
 800a584:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a586:	4b1a      	ldr	r3, [pc, #104]	; (800a5f0 <pvPortMalloc+0x188>)
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	4b1b      	ldr	r3, [pc, #108]	; (800a5f8 <pvPortMalloc+0x190>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d203      	bcs.n	800a59a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a592:	4b17      	ldr	r3, [pc, #92]	; (800a5f0 <pvPortMalloc+0x188>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a18      	ldr	r2, [pc, #96]	; (800a5f8 <pvPortMalloc+0x190>)
 800a598:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59c:	685a      	ldr	r2, [r3, #4]
 800a59e:	4b13      	ldr	r3, [pc, #76]	; (800a5ec <pvPortMalloc+0x184>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	431a      	orrs	r2, r3
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a5ae:	4b13      	ldr	r3, [pc, #76]	; (800a5fc <pvPortMalloc+0x194>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	4a11      	ldr	r2, [pc, #68]	; (800a5fc <pvPortMalloc+0x194>)
 800a5b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5b8:	f7fe fcfc 	bl	8008fb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	f003 0307 	and.w	r3, r3, #7
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00a      	beq.n	800a5dc <pvPortMalloc+0x174>
	__asm volatile
 800a5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	60fb      	str	r3, [r7, #12]
}
 800a5d8:	bf00      	nop
 800a5da:	e7fe      	b.n	800a5da <pvPortMalloc+0x172>
	return pvReturn;
 800a5dc:	69fb      	ldr	r3, [r7, #28]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3728      	adds	r7, #40	; 0x28
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	24004a5c 	.word	0x24004a5c
 800a5ec:	24004a70 	.word	0x24004a70
 800a5f0:	24004a60 	.word	0x24004a60
 800a5f4:	24004a54 	.word	0x24004a54
 800a5f8:	24004a64 	.word	0x24004a64
 800a5fc:	24004a68 	.word	0x24004a68

0800a600 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d04d      	beq.n	800a6ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a612:	2308      	movs	r3, #8
 800a614:	425b      	negs	r3, r3
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	4413      	add	r3, r2
 800a61a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	685a      	ldr	r2, [r3, #4]
 800a624:	4b24      	ldr	r3, [pc, #144]	; (800a6b8 <vPortFree+0xb8>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4013      	ands	r3, r2
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10a      	bne.n	800a644 <vPortFree+0x44>
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	60fb      	str	r3, [r7, #12]
}
 800a640:	bf00      	nop
 800a642:	e7fe      	b.n	800a642 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00a      	beq.n	800a662 <vPortFree+0x62>
	__asm volatile
 800a64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	60bb      	str	r3, [r7, #8]
}
 800a65e:	bf00      	nop
 800a660:	e7fe      	b.n	800a660 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	685a      	ldr	r2, [r3, #4]
 800a666:	4b14      	ldr	r3, [pc, #80]	; (800a6b8 <vPortFree+0xb8>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4013      	ands	r3, r2
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d01e      	beq.n	800a6ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d11a      	bne.n	800a6ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	4b0e      	ldr	r3, [pc, #56]	; (800a6b8 <vPortFree+0xb8>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	43db      	mvns	r3, r3
 800a682:	401a      	ands	r2, r3
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a688:	f7fe fc86 	bl	8008f98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	685a      	ldr	r2, [r3, #4]
 800a690:	4b0a      	ldr	r3, [pc, #40]	; (800a6bc <vPortFree+0xbc>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4413      	add	r3, r2
 800a696:	4a09      	ldr	r2, [pc, #36]	; (800a6bc <vPortFree+0xbc>)
 800a698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a69a:	6938      	ldr	r0, [r7, #16]
 800a69c:	f000 f874 	bl	800a788 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a6a0:	4b07      	ldr	r3, [pc, #28]	; (800a6c0 <vPortFree+0xc0>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	4a06      	ldr	r2, [pc, #24]	; (800a6c0 <vPortFree+0xc0>)
 800a6a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a6aa:	f7fe fc83 	bl	8008fb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a6ae:	bf00      	nop
 800a6b0:	3718      	adds	r7, #24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	24004a70 	.word	0x24004a70
 800a6bc:	24004a60 	.word	0x24004a60
 800a6c0:	24004a6c 	.word	0x24004a6c

0800a6c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a6ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6d0:	4b27      	ldr	r3, [pc, #156]	; (800a770 <prvHeapInit+0xac>)
 800a6d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f003 0307 	and.w	r3, r3, #7
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00c      	beq.n	800a6f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	3307      	adds	r3, #7
 800a6e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f023 0307 	bic.w	r3, r3, #7
 800a6ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	4a1f      	ldr	r2, [pc, #124]	; (800a770 <prvHeapInit+0xac>)
 800a6f4:	4413      	add	r3, r2
 800a6f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6fc:	4a1d      	ldr	r2, [pc, #116]	; (800a774 <prvHeapInit+0xb0>)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a702:	4b1c      	ldr	r3, [pc, #112]	; (800a774 <prvHeapInit+0xb0>)
 800a704:	2200      	movs	r2, #0
 800a706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	4413      	add	r3, r2
 800a70e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a710:	2208      	movs	r2, #8
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	1a9b      	subs	r3, r3, r2
 800a716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f023 0307 	bic.w	r3, r3, #7
 800a71e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	4a15      	ldr	r2, [pc, #84]	; (800a778 <prvHeapInit+0xb4>)
 800a724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a726:	4b14      	ldr	r3, [pc, #80]	; (800a778 <prvHeapInit+0xb4>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2200      	movs	r2, #0
 800a72c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a72e:	4b12      	ldr	r3, [pc, #72]	; (800a778 <prvHeapInit+0xb4>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2200      	movs	r2, #0
 800a734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	1ad2      	subs	r2, r2, r3
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a744:	4b0c      	ldr	r3, [pc, #48]	; (800a778 <prvHeapInit+0xb4>)
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	4a0a      	ldr	r2, [pc, #40]	; (800a77c <prvHeapInit+0xb8>)
 800a752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	4a09      	ldr	r2, [pc, #36]	; (800a780 <prvHeapInit+0xbc>)
 800a75a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a75c:	4b09      	ldr	r3, [pc, #36]	; (800a784 <prvHeapInit+0xc0>)
 800a75e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a762:	601a      	str	r2, [r3, #0]
}
 800a764:	bf00      	nop
 800a766:	3714      	adds	r7, #20
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr
 800a770:	24000e54 	.word	0x24000e54
 800a774:	24004a54 	.word	0x24004a54
 800a778:	24004a5c 	.word	0x24004a5c
 800a77c:	24004a64 	.word	0x24004a64
 800a780:	24004a60 	.word	0x24004a60
 800a784:	24004a70 	.word	0x24004a70

0800a788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a790:	4b28      	ldr	r3, [pc, #160]	; (800a834 <prvInsertBlockIntoFreeList+0xac>)
 800a792:	60fb      	str	r3, [r7, #12]
 800a794:	e002      	b.n	800a79c <prvInsertBlockIntoFreeList+0x14>
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	60fb      	str	r3, [r7, #12]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d8f7      	bhi.n	800a796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	68ba      	ldr	r2, [r7, #8]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d108      	bne.n	800a7ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	685a      	ldr	r2, [r3, #4]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	441a      	add	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	441a      	add	r2, r3
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d118      	bne.n	800a810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	4b15      	ldr	r3, [pc, #84]	; (800a838 <prvInsertBlockIntoFreeList+0xb0>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d00d      	beq.n	800a806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	685a      	ldr	r2, [r3, #4]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	441a      	add	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	601a      	str	r2, [r3, #0]
 800a804:	e008      	b.n	800a818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a806:	4b0c      	ldr	r3, [pc, #48]	; (800a838 <prvInsertBlockIntoFreeList+0xb0>)
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	601a      	str	r2, [r3, #0]
 800a80e:	e003      	b.n	800a818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d002      	beq.n	800a826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a826:	bf00      	nop
 800a828:	3714      	adds	r7, #20
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	24004a54 	.word	0x24004a54
 800a838:	24004a5c 	.word	0x24004a5c

0800a83c <atoi>:
 800a83c:	220a      	movs	r2, #10
 800a83e:	2100      	movs	r1, #0
 800a840:	f000 b9d2 	b.w	800abe8 <strtol>

0800a844 <__errno>:
 800a844:	4b01      	ldr	r3, [pc, #4]	; (800a84c <__errno+0x8>)
 800a846:	6818      	ldr	r0, [r3, #0]
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	24000014 	.word	0x24000014

0800a850 <__libc_init_array>:
 800a850:	b570      	push	{r4, r5, r6, lr}
 800a852:	4d0d      	ldr	r5, [pc, #52]	; (800a888 <__libc_init_array+0x38>)
 800a854:	4c0d      	ldr	r4, [pc, #52]	; (800a88c <__libc_init_array+0x3c>)
 800a856:	1b64      	subs	r4, r4, r5
 800a858:	10a4      	asrs	r4, r4, #2
 800a85a:	2600      	movs	r6, #0
 800a85c:	42a6      	cmp	r6, r4
 800a85e:	d109      	bne.n	800a874 <__libc_init_array+0x24>
 800a860:	4d0b      	ldr	r5, [pc, #44]	; (800a890 <__libc_init_array+0x40>)
 800a862:	4c0c      	ldr	r4, [pc, #48]	; (800a894 <__libc_init_array+0x44>)
 800a864:	f000 fd5e 	bl	800b324 <_init>
 800a868:	1b64      	subs	r4, r4, r5
 800a86a:	10a4      	asrs	r4, r4, #2
 800a86c:	2600      	movs	r6, #0
 800a86e:	42a6      	cmp	r6, r4
 800a870:	d105      	bne.n	800a87e <__libc_init_array+0x2e>
 800a872:	bd70      	pop	{r4, r5, r6, pc}
 800a874:	f855 3b04 	ldr.w	r3, [r5], #4
 800a878:	4798      	blx	r3
 800a87a:	3601      	adds	r6, #1
 800a87c:	e7ee      	b.n	800a85c <__libc_init_array+0xc>
 800a87e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a882:	4798      	blx	r3
 800a884:	3601      	adds	r6, #1
 800a886:	e7f2      	b.n	800a86e <__libc_init_array+0x1e>
 800a888:	0800b654 	.word	0x0800b654
 800a88c:	0800b654 	.word	0x0800b654
 800a890:	0800b654 	.word	0x0800b654
 800a894:	0800b658 	.word	0x0800b658

0800a898 <__retarget_lock_acquire_recursive>:
 800a898:	4770      	bx	lr

0800a89a <__retarget_lock_release_recursive>:
 800a89a:	4770      	bx	lr

0800a89c <memcpy>:
 800a89c:	440a      	add	r2, r1
 800a89e:	4291      	cmp	r1, r2
 800a8a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a8a4:	d100      	bne.n	800a8a8 <memcpy+0xc>
 800a8a6:	4770      	bx	lr
 800a8a8:	b510      	push	{r4, lr}
 800a8aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8b2:	4291      	cmp	r1, r2
 800a8b4:	d1f9      	bne.n	800a8aa <memcpy+0xe>
 800a8b6:	bd10      	pop	{r4, pc}

0800a8b8 <memset>:
 800a8b8:	4402      	add	r2, r0
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d100      	bne.n	800a8c2 <memset+0xa>
 800a8c0:	4770      	bx	lr
 800a8c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a8c6:	e7f9      	b.n	800a8bc <memset+0x4>

0800a8c8 <_malloc_r>:
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	1ccd      	adds	r5, r1, #3
 800a8cc:	f025 0503 	bic.w	r5, r5, #3
 800a8d0:	3508      	adds	r5, #8
 800a8d2:	2d0c      	cmp	r5, #12
 800a8d4:	bf38      	it	cc
 800a8d6:	250c      	movcc	r5, #12
 800a8d8:	2d00      	cmp	r5, #0
 800a8da:	4606      	mov	r6, r0
 800a8dc:	db01      	blt.n	800a8e2 <_malloc_r+0x1a>
 800a8de:	42a9      	cmp	r1, r5
 800a8e0:	d903      	bls.n	800a8ea <_malloc_r+0x22>
 800a8e2:	230c      	movs	r3, #12
 800a8e4:	6033      	str	r3, [r6, #0]
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ea:	f000 f987 	bl	800abfc <__malloc_lock>
 800a8ee:	4921      	ldr	r1, [pc, #132]	; (800a974 <_malloc_r+0xac>)
 800a8f0:	680a      	ldr	r2, [r1, #0]
 800a8f2:	4614      	mov	r4, r2
 800a8f4:	b99c      	cbnz	r4, 800a91e <_malloc_r+0x56>
 800a8f6:	4f20      	ldr	r7, [pc, #128]	; (800a978 <_malloc_r+0xb0>)
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	b923      	cbnz	r3, 800a906 <_malloc_r+0x3e>
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	4630      	mov	r0, r6
 800a900:	f000 f8a6 	bl	800aa50 <_sbrk_r>
 800a904:	6038      	str	r0, [r7, #0]
 800a906:	4629      	mov	r1, r5
 800a908:	4630      	mov	r0, r6
 800a90a:	f000 f8a1 	bl	800aa50 <_sbrk_r>
 800a90e:	1c43      	adds	r3, r0, #1
 800a910:	d123      	bne.n	800a95a <_malloc_r+0x92>
 800a912:	230c      	movs	r3, #12
 800a914:	6033      	str	r3, [r6, #0]
 800a916:	4630      	mov	r0, r6
 800a918:	f000 f976 	bl	800ac08 <__malloc_unlock>
 800a91c:	e7e3      	b.n	800a8e6 <_malloc_r+0x1e>
 800a91e:	6823      	ldr	r3, [r4, #0]
 800a920:	1b5b      	subs	r3, r3, r5
 800a922:	d417      	bmi.n	800a954 <_malloc_r+0x8c>
 800a924:	2b0b      	cmp	r3, #11
 800a926:	d903      	bls.n	800a930 <_malloc_r+0x68>
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	441c      	add	r4, r3
 800a92c:	6025      	str	r5, [r4, #0]
 800a92e:	e004      	b.n	800a93a <_malloc_r+0x72>
 800a930:	6863      	ldr	r3, [r4, #4]
 800a932:	42a2      	cmp	r2, r4
 800a934:	bf0c      	ite	eq
 800a936:	600b      	streq	r3, [r1, #0]
 800a938:	6053      	strne	r3, [r2, #4]
 800a93a:	4630      	mov	r0, r6
 800a93c:	f000 f964 	bl	800ac08 <__malloc_unlock>
 800a940:	f104 000b 	add.w	r0, r4, #11
 800a944:	1d23      	adds	r3, r4, #4
 800a946:	f020 0007 	bic.w	r0, r0, #7
 800a94a:	1ac2      	subs	r2, r0, r3
 800a94c:	d0cc      	beq.n	800a8e8 <_malloc_r+0x20>
 800a94e:	1a1b      	subs	r3, r3, r0
 800a950:	50a3      	str	r3, [r4, r2]
 800a952:	e7c9      	b.n	800a8e8 <_malloc_r+0x20>
 800a954:	4622      	mov	r2, r4
 800a956:	6864      	ldr	r4, [r4, #4]
 800a958:	e7cc      	b.n	800a8f4 <_malloc_r+0x2c>
 800a95a:	1cc4      	adds	r4, r0, #3
 800a95c:	f024 0403 	bic.w	r4, r4, #3
 800a960:	42a0      	cmp	r0, r4
 800a962:	d0e3      	beq.n	800a92c <_malloc_r+0x64>
 800a964:	1a21      	subs	r1, r4, r0
 800a966:	4630      	mov	r0, r6
 800a968:	f000 f872 	bl	800aa50 <_sbrk_r>
 800a96c:	3001      	adds	r0, #1
 800a96e:	d1dd      	bne.n	800a92c <_malloc_r+0x64>
 800a970:	e7cf      	b.n	800a912 <_malloc_r+0x4a>
 800a972:	bf00      	nop
 800a974:	24004a74 	.word	0x24004a74
 800a978:	24004a78 	.word	0x24004a78

0800a97c <cleanup_glue>:
 800a97c:	b538      	push	{r3, r4, r5, lr}
 800a97e:	460c      	mov	r4, r1
 800a980:	6809      	ldr	r1, [r1, #0]
 800a982:	4605      	mov	r5, r0
 800a984:	b109      	cbz	r1, 800a98a <cleanup_glue+0xe>
 800a986:	f7ff fff9 	bl	800a97c <cleanup_glue>
 800a98a:	4621      	mov	r1, r4
 800a98c:	4628      	mov	r0, r5
 800a98e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a992:	f000 b93f 	b.w	800ac14 <_free_r>
	...

0800a998 <_reclaim_reent>:
 800a998:	4b2c      	ldr	r3, [pc, #176]	; (800aa4c <_reclaim_reent+0xb4>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4283      	cmp	r3, r0
 800a99e:	b570      	push	{r4, r5, r6, lr}
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	d051      	beq.n	800aa48 <_reclaim_reent+0xb0>
 800a9a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a9a6:	b143      	cbz	r3, 800a9ba <_reclaim_reent+0x22>
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d14a      	bne.n	800aa44 <_reclaim_reent+0xac>
 800a9ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9b0:	6819      	ldr	r1, [r3, #0]
 800a9b2:	b111      	cbz	r1, 800a9ba <_reclaim_reent+0x22>
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f000 f92d 	bl	800ac14 <_free_r>
 800a9ba:	6961      	ldr	r1, [r4, #20]
 800a9bc:	b111      	cbz	r1, 800a9c4 <_reclaim_reent+0x2c>
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f000 f928 	bl	800ac14 <_free_r>
 800a9c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a9c6:	b111      	cbz	r1, 800a9ce <_reclaim_reent+0x36>
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f000 f923 	bl	800ac14 <_free_r>
 800a9ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a9d0:	b111      	cbz	r1, 800a9d8 <_reclaim_reent+0x40>
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f000 f91e 	bl	800ac14 <_free_r>
 800a9d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a9da:	b111      	cbz	r1, 800a9e2 <_reclaim_reent+0x4a>
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f000 f919 	bl	800ac14 <_free_r>
 800a9e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a9e4:	b111      	cbz	r1, 800a9ec <_reclaim_reent+0x54>
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f000 f914 	bl	800ac14 <_free_r>
 800a9ec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a9ee:	b111      	cbz	r1, 800a9f6 <_reclaim_reent+0x5e>
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f000 f90f 	bl	800ac14 <_free_r>
 800a9f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a9f8:	b111      	cbz	r1, 800aa00 <_reclaim_reent+0x68>
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 f90a 	bl	800ac14 <_free_r>
 800aa00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa02:	b111      	cbz	r1, 800aa0a <_reclaim_reent+0x72>
 800aa04:	4620      	mov	r0, r4
 800aa06:	f000 f905 	bl	800ac14 <_free_r>
 800aa0a:	69a3      	ldr	r3, [r4, #24]
 800aa0c:	b1e3      	cbz	r3, 800aa48 <_reclaim_reent+0xb0>
 800aa0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aa10:	4620      	mov	r0, r4
 800aa12:	4798      	blx	r3
 800aa14:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aa16:	b1b9      	cbz	r1, 800aa48 <_reclaim_reent+0xb0>
 800aa18:	4620      	mov	r0, r4
 800aa1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa1e:	f7ff bfad 	b.w	800a97c <cleanup_glue>
 800aa22:	5949      	ldr	r1, [r1, r5]
 800aa24:	b941      	cbnz	r1, 800aa38 <_reclaim_reent+0xa0>
 800aa26:	3504      	adds	r5, #4
 800aa28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa2a:	2d80      	cmp	r5, #128	; 0x80
 800aa2c:	68d9      	ldr	r1, [r3, #12]
 800aa2e:	d1f8      	bne.n	800aa22 <_reclaim_reent+0x8a>
 800aa30:	4620      	mov	r0, r4
 800aa32:	f000 f8ef 	bl	800ac14 <_free_r>
 800aa36:	e7ba      	b.n	800a9ae <_reclaim_reent+0x16>
 800aa38:	680e      	ldr	r6, [r1, #0]
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	f000 f8ea 	bl	800ac14 <_free_r>
 800aa40:	4631      	mov	r1, r6
 800aa42:	e7ef      	b.n	800aa24 <_reclaim_reent+0x8c>
 800aa44:	2500      	movs	r5, #0
 800aa46:	e7ef      	b.n	800aa28 <_reclaim_reent+0x90>
 800aa48:	bd70      	pop	{r4, r5, r6, pc}
 800aa4a:	bf00      	nop
 800aa4c:	24000014 	.word	0x24000014

0800aa50 <_sbrk_r>:
 800aa50:	b538      	push	{r3, r4, r5, lr}
 800aa52:	4d06      	ldr	r5, [pc, #24]	; (800aa6c <_sbrk_r+0x1c>)
 800aa54:	2300      	movs	r3, #0
 800aa56:	4604      	mov	r4, r0
 800aa58:	4608      	mov	r0, r1
 800aa5a:	602b      	str	r3, [r5, #0]
 800aa5c:	f7f6 f9ac 	bl	8000db8 <_sbrk>
 800aa60:	1c43      	adds	r3, r0, #1
 800aa62:	d102      	bne.n	800aa6a <_sbrk_r+0x1a>
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	b103      	cbz	r3, 800aa6a <_sbrk_r+0x1a>
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	24004c34 	.word	0x24004c34

0800aa70 <siprintf>:
 800aa70:	b40e      	push	{r1, r2, r3}
 800aa72:	b500      	push	{lr}
 800aa74:	b09c      	sub	sp, #112	; 0x70
 800aa76:	ab1d      	add	r3, sp, #116	; 0x74
 800aa78:	9002      	str	r0, [sp, #8]
 800aa7a:	9006      	str	r0, [sp, #24]
 800aa7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa80:	4809      	ldr	r0, [pc, #36]	; (800aaa8 <siprintf+0x38>)
 800aa82:	9107      	str	r1, [sp, #28]
 800aa84:	9104      	str	r1, [sp, #16]
 800aa86:	4909      	ldr	r1, [pc, #36]	; (800aaac <siprintf+0x3c>)
 800aa88:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa8c:	9105      	str	r1, [sp, #20]
 800aa8e:	6800      	ldr	r0, [r0, #0]
 800aa90:	9301      	str	r3, [sp, #4]
 800aa92:	a902      	add	r1, sp, #8
 800aa94:	f000 f96a 	bl	800ad6c <_svfiprintf_r>
 800aa98:	9b02      	ldr	r3, [sp, #8]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	701a      	strb	r2, [r3, #0]
 800aa9e:	b01c      	add	sp, #112	; 0x70
 800aaa0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aaa4:	b003      	add	sp, #12
 800aaa6:	4770      	bx	lr
 800aaa8:	24000014 	.word	0x24000014
 800aaac:	ffff0208 	.word	0xffff0208

0800aab0 <strstr>:
 800aab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aab2:	780c      	ldrb	r4, [r1, #0]
 800aab4:	b164      	cbz	r4, 800aad0 <strstr+0x20>
 800aab6:	4603      	mov	r3, r0
 800aab8:	781a      	ldrb	r2, [r3, #0]
 800aaba:	4618      	mov	r0, r3
 800aabc:	1c5e      	adds	r6, r3, #1
 800aabe:	b90a      	cbnz	r2, 800aac4 <strstr+0x14>
 800aac0:	4610      	mov	r0, r2
 800aac2:	e005      	b.n	800aad0 <strstr+0x20>
 800aac4:	4294      	cmp	r4, r2
 800aac6:	d108      	bne.n	800aada <strstr+0x2a>
 800aac8:	460d      	mov	r5, r1
 800aaca:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800aace:	b902      	cbnz	r2, 800aad2 <strstr+0x22>
 800aad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aad2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800aad6:	4297      	cmp	r7, r2
 800aad8:	d0f7      	beq.n	800aaca <strstr+0x1a>
 800aada:	4633      	mov	r3, r6
 800aadc:	e7ec      	b.n	800aab8 <strstr+0x8>
	...

0800aae0 <_strtol_l.isra.0>:
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aae6:	d001      	beq.n	800aaec <_strtol_l.isra.0+0xc>
 800aae8:	2b24      	cmp	r3, #36	; 0x24
 800aaea:	d906      	bls.n	800aafa <_strtol_l.isra.0+0x1a>
 800aaec:	f7ff feaa 	bl	800a844 <__errno>
 800aaf0:	2316      	movs	r3, #22
 800aaf2:	6003      	str	r3, [r0, #0]
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aafa:	4f3a      	ldr	r7, [pc, #232]	; (800abe4 <_strtol_l.isra.0+0x104>)
 800aafc:	468e      	mov	lr, r1
 800aafe:	4676      	mov	r6, lr
 800ab00:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ab04:	5de5      	ldrb	r5, [r4, r7]
 800ab06:	f015 0508 	ands.w	r5, r5, #8
 800ab0a:	d1f8      	bne.n	800aafe <_strtol_l.isra.0+0x1e>
 800ab0c:	2c2d      	cmp	r4, #45	; 0x2d
 800ab0e:	d134      	bne.n	800ab7a <_strtol_l.isra.0+0x9a>
 800ab10:	f89e 4000 	ldrb.w	r4, [lr]
 800ab14:	f04f 0801 	mov.w	r8, #1
 800ab18:	f106 0e02 	add.w	lr, r6, #2
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d05c      	beq.n	800abda <_strtol_l.isra.0+0xfa>
 800ab20:	2b10      	cmp	r3, #16
 800ab22:	d10c      	bne.n	800ab3e <_strtol_l.isra.0+0x5e>
 800ab24:	2c30      	cmp	r4, #48	; 0x30
 800ab26:	d10a      	bne.n	800ab3e <_strtol_l.isra.0+0x5e>
 800ab28:	f89e 4000 	ldrb.w	r4, [lr]
 800ab2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ab30:	2c58      	cmp	r4, #88	; 0x58
 800ab32:	d14d      	bne.n	800abd0 <_strtol_l.isra.0+0xf0>
 800ab34:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ab38:	2310      	movs	r3, #16
 800ab3a:	f10e 0e02 	add.w	lr, lr, #2
 800ab3e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ab42:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800ab46:	2600      	movs	r6, #0
 800ab48:	fbbc f9f3 	udiv	r9, ip, r3
 800ab4c:	4635      	mov	r5, r6
 800ab4e:	fb03 ca19 	mls	sl, r3, r9, ip
 800ab52:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ab56:	2f09      	cmp	r7, #9
 800ab58:	d818      	bhi.n	800ab8c <_strtol_l.isra.0+0xac>
 800ab5a:	463c      	mov	r4, r7
 800ab5c:	42a3      	cmp	r3, r4
 800ab5e:	dd24      	ble.n	800abaa <_strtol_l.isra.0+0xca>
 800ab60:	2e00      	cmp	r6, #0
 800ab62:	db1f      	blt.n	800aba4 <_strtol_l.isra.0+0xc4>
 800ab64:	45a9      	cmp	r9, r5
 800ab66:	d31d      	bcc.n	800aba4 <_strtol_l.isra.0+0xc4>
 800ab68:	d101      	bne.n	800ab6e <_strtol_l.isra.0+0x8e>
 800ab6a:	45a2      	cmp	sl, r4
 800ab6c:	db1a      	blt.n	800aba4 <_strtol_l.isra.0+0xc4>
 800ab6e:	fb05 4503 	mla	r5, r5, r3, r4
 800ab72:	2601      	movs	r6, #1
 800ab74:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ab78:	e7eb      	b.n	800ab52 <_strtol_l.isra.0+0x72>
 800ab7a:	2c2b      	cmp	r4, #43	; 0x2b
 800ab7c:	bf08      	it	eq
 800ab7e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ab82:	46a8      	mov	r8, r5
 800ab84:	bf08      	it	eq
 800ab86:	f106 0e02 	addeq.w	lr, r6, #2
 800ab8a:	e7c7      	b.n	800ab1c <_strtol_l.isra.0+0x3c>
 800ab8c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ab90:	2f19      	cmp	r7, #25
 800ab92:	d801      	bhi.n	800ab98 <_strtol_l.isra.0+0xb8>
 800ab94:	3c37      	subs	r4, #55	; 0x37
 800ab96:	e7e1      	b.n	800ab5c <_strtol_l.isra.0+0x7c>
 800ab98:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ab9c:	2f19      	cmp	r7, #25
 800ab9e:	d804      	bhi.n	800abaa <_strtol_l.isra.0+0xca>
 800aba0:	3c57      	subs	r4, #87	; 0x57
 800aba2:	e7db      	b.n	800ab5c <_strtol_l.isra.0+0x7c>
 800aba4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800aba8:	e7e4      	b.n	800ab74 <_strtol_l.isra.0+0x94>
 800abaa:	2e00      	cmp	r6, #0
 800abac:	da05      	bge.n	800abba <_strtol_l.isra.0+0xda>
 800abae:	2322      	movs	r3, #34	; 0x22
 800abb0:	6003      	str	r3, [r0, #0]
 800abb2:	4665      	mov	r5, ip
 800abb4:	b942      	cbnz	r2, 800abc8 <_strtol_l.isra.0+0xe8>
 800abb6:	4628      	mov	r0, r5
 800abb8:	e79d      	b.n	800aaf6 <_strtol_l.isra.0+0x16>
 800abba:	f1b8 0f00 	cmp.w	r8, #0
 800abbe:	d000      	beq.n	800abc2 <_strtol_l.isra.0+0xe2>
 800abc0:	426d      	negs	r5, r5
 800abc2:	2a00      	cmp	r2, #0
 800abc4:	d0f7      	beq.n	800abb6 <_strtol_l.isra.0+0xd6>
 800abc6:	b10e      	cbz	r6, 800abcc <_strtol_l.isra.0+0xec>
 800abc8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800abcc:	6011      	str	r1, [r2, #0]
 800abce:	e7f2      	b.n	800abb6 <_strtol_l.isra.0+0xd6>
 800abd0:	2430      	movs	r4, #48	; 0x30
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d1b3      	bne.n	800ab3e <_strtol_l.isra.0+0x5e>
 800abd6:	2308      	movs	r3, #8
 800abd8:	e7b1      	b.n	800ab3e <_strtol_l.isra.0+0x5e>
 800abda:	2c30      	cmp	r4, #48	; 0x30
 800abdc:	d0a4      	beq.n	800ab28 <_strtol_l.isra.0+0x48>
 800abde:	230a      	movs	r3, #10
 800abe0:	e7ad      	b.n	800ab3e <_strtol_l.isra.0+0x5e>
 800abe2:	bf00      	nop
 800abe4:	0800b519 	.word	0x0800b519

0800abe8 <strtol>:
 800abe8:	4613      	mov	r3, r2
 800abea:	460a      	mov	r2, r1
 800abec:	4601      	mov	r1, r0
 800abee:	4802      	ldr	r0, [pc, #8]	; (800abf8 <strtol+0x10>)
 800abf0:	6800      	ldr	r0, [r0, #0]
 800abf2:	f7ff bf75 	b.w	800aae0 <_strtol_l.isra.0>
 800abf6:	bf00      	nop
 800abf8:	24000014 	.word	0x24000014

0800abfc <__malloc_lock>:
 800abfc:	4801      	ldr	r0, [pc, #4]	; (800ac04 <__malloc_lock+0x8>)
 800abfe:	f7ff be4b 	b.w	800a898 <__retarget_lock_acquire_recursive>
 800ac02:	bf00      	nop
 800ac04:	24004c2c 	.word	0x24004c2c

0800ac08 <__malloc_unlock>:
 800ac08:	4801      	ldr	r0, [pc, #4]	; (800ac10 <__malloc_unlock+0x8>)
 800ac0a:	f7ff be46 	b.w	800a89a <__retarget_lock_release_recursive>
 800ac0e:	bf00      	nop
 800ac10:	24004c2c 	.word	0x24004c2c

0800ac14 <_free_r>:
 800ac14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac16:	2900      	cmp	r1, #0
 800ac18:	d048      	beq.n	800acac <_free_r+0x98>
 800ac1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac1e:	9001      	str	r0, [sp, #4]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f1a1 0404 	sub.w	r4, r1, #4
 800ac26:	bfb8      	it	lt
 800ac28:	18e4      	addlt	r4, r4, r3
 800ac2a:	f7ff ffe7 	bl	800abfc <__malloc_lock>
 800ac2e:	4a20      	ldr	r2, [pc, #128]	; (800acb0 <_free_r+0x9c>)
 800ac30:	9801      	ldr	r0, [sp, #4]
 800ac32:	6813      	ldr	r3, [r2, #0]
 800ac34:	4615      	mov	r5, r2
 800ac36:	b933      	cbnz	r3, 800ac46 <_free_r+0x32>
 800ac38:	6063      	str	r3, [r4, #4]
 800ac3a:	6014      	str	r4, [r2, #0]
 800ac3c:	b003      	add	sp, #12
 800ac3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac42:	f7ff bfe1 	b.w	800ac08 <__malloc_unlock>
 800ac46:	42a3      	cmp	r3, r4
 800ac48:	d90b      	bls.n	800ac62 <_free_r+0x4e>
 800ac4a:	6821      	ldr	r1, [r4, #0]
 800ac4c:	1862      	adds	r2, r4, r1
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	bf04      	itt	eq
 800ac52:	681a      	ldreq	r2, [r3, #0]
 800ac54:	685b      	ldreq	r3, [r3, #4]
 800ac56:	6063      	str	r3, [r4, #4]
 800ac58:	bf04      	itt	eq
 800ac5a:	1852      	addeq	r2, r2, r1
 800ac5c:	6022      	streq	r2, [r4, #0]
 800ac5e:	602c      	str	r4, [r5, #0]
 800ac60:	e7ec      	b.n	800ac3c <_free_r+0x28>
 800ac62:	461a      	mov	r2, r3
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	b10b      	cbz	r3, 800ac6c <_free_r+0x58>
 800ac68:	42a3      	cmp	r3, r4
 800ac6a:	d9fa      	bls.n	800ac62 <_free_r+0x4e>
 800ac6c:	6811      	ldr	r1, [r2, #0]
 800ac6e:	1855      	adds	r5, r2, r1
 800ac70:	42a5      	cmp	r5, r4
 800ac72:	d10b      	bne.n	800ac8c <_free_r+0x78>
 800ac74:	6824      	ldr	r4, [r4, #0]
 800ac76:	4421      	add	r1, r4
 800ac78:	1854      	adds	r4, r2, r1
 800ac7a:	42a3      	cmp	r3, r4
 800ac7c:	6011      	str	r1, [r2, #0]
 800ac7e:	d1dd      	bne.n	800ac3c <_free_r+0x28>
 800ac80:	681c      	ldr	r4, [r3, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	6053      	str	r3, [r2, #4]
 800ac86:	4421      	add	r1, r4
 800ac88:	6011      	str	r1, [r2, #0]
 800ac8a:	e7d7      	b.n	800ac3c <_free_r+0x28>
 800ac8c:	d902      	bls.n	800ac94 <_free_r+0x80>
 800ac8e:	230c      	movs	r3, #12
 800ac90:	6003      	str	r3, [r0, #0]
 800ac92:	e7d3      	b.n	800ac3c <_free_r+0x28>
 800ac94:	6825      	ldr	r5, [r4, #0]
 800ac96:	1961      	adds	r1, r4, r5
 800ac98:	428b      	cmp	r3, r1
 800ac9a:	bf04      	itt	eq
 800ac9c:	6819      	ldreq	r1, [r3, #0]
 800ac9e:	685b      	ldreq	r3, [r3, #4]
 800aca0:	6063      	str	r3, [r4, #4]
 800aca2:	bf04      	itt	eq
 800aca4:	1949      	addeq	r1, r1, r5
 800aca6:	6021      	streq	r1, [r4, #0]
 800aca8:	6054      	str	r4, [r2, #4]
 800acaa:	e7c7      	b.n	800ac3c <_free_r+0x28>
 800acac:	b003      	add	sp, #12
 800acae:	bd30      	pop	{r4, r5, pc}
 800acb0:	24004a74 	.word	0x24004a74

0800acb4 <__ssputs_r>:
 800acb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acb8:	688e      	ldr	r6, [r1, #8]
 800acba:	429e      	cmp	r6, r3
 800acbc:	4682      	mov	sl, r0
 800acbe:	460c      	mov	r4, r1
 800acc0:	4690      	mov	r8, r2
 800acc2:	461f      	mov	r7, r3
 800acc4:	d838      	bhi.n	800ad38 <__ssputs_r+0x84>
 800acc6:	898a      	ldrh	r2, [r1, #12]
 800acc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800accc:	d032      	beq.n	800ad34 <__ssputs_r+0x80>
 800acce:	6825      	ldr	r5, [r4, #0]
 800acd0:	6909      	ldr	r1, [r1, #16]
 800acd2:	eba5 0901 	sub.w	r9, r5, r1
 800acd6:	6965      	ldr	r5, [r4, #20]
 800acd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ace0:	3301      	adds	r3, #1
 800ace2:	444b      	add	r3, r9
 800ace4:	106d      	asrs	r5, r5, #1
 800ace6:	429d      	cmp	r5, r3
 800ace8:	bf38      	it	cc
 800acea:	461d      	movcc	r5, r3
 800acec:	0553      	lsls	r3, r2, #21
 800acee:	d531      	bpl.n	800ad54 <__ssputs_r+0xa0>
 800acf0:	4629      	mov	r1, r5
 800acf2:	f7ff fde9 	bl	800a8c8 <_malloc_r>
 800acf6:	4606      	mov	r6, r0
 800acf8:	b950      	cbnz	r0, 800ad10 <__ssputs_r+0x5c>
 800acfa:	230c      	movs	r3, #12
 800acfc:	f8ca 3000 	str.w	r3, [sl]
 800ad00:	89a3      	ldrh	r3, [r4, #12]
 800ad02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad06:	81a3      	strh	r3, [r4, #12]
 800ad08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad10:	6921      	ldr	r1, [r4, #16]
 800ad12:	464a      	mov	r2, r9
 800ad14:	f7ff fdc2 	bl	800a89c <memcpy>
 800ad18:	89a3      	ldrh	r3, [r4, #12]
 800ad1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad22:	81a3      	strh	r3, [r4, #12]
 800ad24:	6126      	str	r6, [r4, #16]
 800ad26:	6165      	str	r5, [r4, #20]
 800ad28:	444e      	add	r6, r9
 800ad2a:	eba5 0509 	sub.w	r5, r5, r9
 800ad2e:	6026      	str	r6, [r4, #0]
 800ad30:	60a5      	str	r5, [r4, #8]
 800ad32:	463e      	mov	r6, r7
 800ad34:	42be      	cmp	r6, r7
 800ad36:	d900      	bls.n	800ad3a <__ssputs_r+0x86>
 800ad38:	463e      	mov	r6, r7
 800ad3a:	4632      	mov	r2, r6
 800ad3c:	6820      	ldr	r0, [r4, #0]
 800ad3e:	4641      	mov	r1, r8
 800ad40:	f000 faa8 	bl	800b294 <memmove>
 800ad44:	68a3      	ldr	r3, [r4, #8]
 800ad46:	6822      	ldr	r2, [r4, #0]
 800ad48:	1b9b      	subs	r3, r3, r6
 800ad4a:	4432      	add	r2, r6
 800ad4c:	60a3      	str	r3, [r4, #8]
 800ad4e:	6022      	str	r2, [r4, #0]
 800ad50:	2000      	movs	r0, #0
 800ad52:	e7db      	b.n	800ad0c <__ssputs_r+0x58>
 800ad54:	462a      	mov	r2, r5
 800ad56:	f000 fab7 	bl	800b2c8 <_realloc_r>
 800ad5a:	4606      	mov	r6, r0
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d1e1      	bne.n	800ad24 <__ssputs_r+0x70>
 800ad60:	6921      	ldr	r1, [r4, #16]
 800ad62:	4650      	mov	r0, sl
 800ad64:	f7ff ff56 	bl	800ac14 <_free_r>
 800ad68:	e7c7      	b.n	800acfa <__ssputs_r+0x46>
	...

0800ad6c <_svfiprintf_r>:
 800ad6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad70:	4698      	mov	r8, r3
 800ad72:	898b      	ldrh	r3, [r1, #12]
 800ad74:	061b      	lsls	r3, r3, #24
 800ad76:	b09d      	sub	sp, #116	; 0x74
 800ad78:	4607      	mov	r7, r0
 800ad7a:	460d      	mov	r5, r1
 800ad7c:	4614      	mov	r4, r2
 800ad7e:	d50e      	bpl.n	800ad9e <_svfiprintf_r+0x32>
 800ad80:	690b      	ldr	r3, [r1, #16]
 800ad82:	b963      	cbnz	r3, 800ad9e <_svfiprintf_r+0x32>
 800ad84:	2140      	movs	r1, #64	; 0x40
 800ad86:	f7ff fd9f 	bl	800a8c8 <_malloc_r>
 800ad8a:	6028      	str	r0, [r5, #0]
 800ad8c:	6128      	str	r0, [r5, #16]
 800ad8e:	b920      	cbnz	r0, 800ad9a <_svfiprintf_r+0x2e>
 800ad90:	230c      	movs	r3, #12
 800ad92:	603b      	str	r3, [r7, #0]
 800ad94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad98:	e0d1      	b.n	800af3e <_svfiprintf_r+0x1d2>
 800ad9a:	2340      	movs	r3, #64	; 0x40
 800ad9c:	616b      	str	r3, [r5, #20]
 800ad9e:	2300      	movs	r3, #0
 800ada0:	9309      	str	r3, [sp, #36]	; 0x24
 800ada2:	2320      	movs	r3, #32
 800ada4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ada8:	f8cd 800c 	str.w	r8, [sp, #12]
 800adac:	2330      	movs	r3, #48	; 0x30
 800adae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800af58 <_svfiprintf_r+0x1ec>
 800adb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adb6:	f04f 0901 	mov.w	r9, #1
 800adba:	4623      	mov	r3, r4
 800adbc:	469a      	mov	sl, r3
 800adbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adc2:	b10a      	cbz	r2, 800adc8 <_svfiprintf_r+0x5c>
 800adc4:	2a25      	cmp	r2, #37	; 0x25
 800adc6:	d1f9      	bne.n	800adbc <_svfiprintf_r+0x50>
 800adc8:	ebba 0b04 	subs.w	fp, sl, r4
 800adcc:	d00b      	beq.n	800ade6 <_svfiprintf_r+0x7a>
 800adce:	465b      	mov	r3, fp
 800add0:	4622      	mov	r2, r4
 800add2:	4629      	mov	r1, r5
 800add4:	4638      	mov	r0, r7
 800add6:	f7ff ff6d 	bl	800acb4 <__ssputs_r>
 800adda:	3001      	adds	r0, #1
 800addc:	f000 80aa 	beq.w	800af34 <_svfiprintf_r+0x1c8>
 800ade0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ade2:	445a      	add	r2, fp
 800ade4:	9209      	str	r2, [sp, #36]	; 0x24
 800ade6:	f89a 3000 	ldrb.w	r3, [sl]
 800adea:	2b00      	cmp	r3, #0
 800adec:	f000 80a2 	beq.w	800af34 <_svfiprintf_r+0x1c8>
 800adf0:	2300      	movs	r3, #0
 800adf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800adf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adfa:	f10a 0a01 	add.w	sl, sl, #1
 800adfe:	9304      	str	r3, [sp, #16]
 800ae00:	9307      	str	r3, [sp, #28]
 800ae02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae06:	931a      	str	r3, [sp, #104]	; 0x68
 800ae08:	4654      	mov	r4, sl
 800ae0a:	2205      	movs	r2, #5
 800ae0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae10:	4851      	ldr	r0, [pc, #324]	; (800af58 <_svfiprintf_r+0x1ec>)
 800ae12:	f7f5 fa6d 	bl	80002f0 <memchr>
 800ae16:	9a04      	ldr	r2, [sp, #16]
 800ae18:	b9d8      	cbnz	r0, 800ae52 <_svfiprintf_r+0xe6>
 800ae1a:	06d0      	lsls	r0, r2, #27
 800ae1c:	bf44      	itt	mi
 800ae1e:	2320      	movmi	r3, #32
 800ae20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae24:	0711      	lsls	r1, r2, #28
 800ae26:	bf44      	itt	mi
 800ae28:	232b      	movmi	r3, #43	; 0x2b
 800ae2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae2e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae32:	2b2a      	cmp	r3, #42	; 0x2a
 800ae34:	d015      	beq.n	800ae62 <_svfiprintf_r+0xf6>
 800ae36:	9a07      	ldr	r2, [sp, #28]
 800ae38:	4654      	mov	r4, sl
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	f04f 0c0a 	mov.w	ip, #10
 800ae40:	4621      	mov	r1, r4
 800ae42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae46:	3b30      	subs	r3, #48	; 0x30
 800ae48:	2b09      	cmp	r3, #9
 800ae4a:	d94e      	bls.n	800aeea <_svfiprintf_r+0x17e>
 800ae4c:	b1b0      	cbz	r0, 800ae7c <_svfiprintf_r+0x110>
 800ae4e:	9207      	str	r2, [sp, #28]
 800ae50:	e014      	b.n	800ae7c <_svfiprintf_r+0x110>
 800ae52:	eba0 0308 	sub.w	r3, r0, r8
 800ae56:	fa09 f303 	lsl.w	r3, r9, r3
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	9304      	str	r3, [sp, #16]
 800ae5e:	46a2      	mov	sl, r4
 800ae60:	e7d2      	b.n	800ae08 <_svfiprintf_r+0x9c>
 800ae62:	9b03      	ldr	r3, [sp, #12]
 800ae64:	1d19      	adds	r1, r3, #4
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	9103      	str	r1, [sp, #12]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	bfbb      	ittet	lt
 800ae6e:	425b      	neglt	r3, r3
 800ae70:	f042 0202 	orrlt.w	r2, r2, #2
 800ae74:	9307      	strge	r3, [sp, #28]
 800ae76:	9307      	strlt	r3, [sp, #28]
 800ae78:	bfb8      	it	lt
 800ae7a:	9204      	strlt	r2, [sp, #16]
 800ae7c:	7823      	ldrb	r3, [r4, #0]
 800ae7e:	2b2e      	cmp	r3, #46	; 0x2e
 800ae80:	d10c      	bne.n	800ae9c <_svfiprintf_r+0x130>
 800ae82:	7863      	ldrb	r3, [r4, #1]
 800ae84:	2b2a      	cmp	r3, #42	; 0x2a
 800ae86:	d135      	bne.n	800aef4 <_svfiprintf_r+0x188>
 800ae88:	9b03      	ldr	r3, [sp, #12]
 800ae8a:	1d1a      	adds	r2, r3, #4
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	9203      	str	r2, [sp, #12]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	bfb8      	it	lt
 800ae94:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ae98:	3402      	adds	r4, #2
 800ae9a:	9305      	str	r3, [sp, #20]
 800ae9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af68 <_svfiprintf_r+0x1fc>
 800aea0:	7821      	ldrb	r1, [r4, #0]
 800aea2:	2203      	movs	r2, #3
 800aea4:	4650      	mov	r0, sl
 800aea6:	f7f5 fa23 	bl	80002f0 <memchr>
 800aeaa:	b140      	cbz	r0, 800aebe <_svfiprintf_r+0x152>
 800aeac:	2340      	movs	r3, #64	; 0x40
 800aeae:	eba0 000a 	sub.w	r0, r0, sl
 800aeb2:	fa03 f000 	lsl.w	r0, r3, r0
 800aeb6:	9b04      	ldr	r3, [sp, #16]
 800aeb8:	4303      	orrs	r3, r0
 800aeba:	3401      	adds	r4, #1
 800aebc:	9304      	str	r3, [sp, #16]
 800aebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec2:	4826      	ldr	r0, [pc, #152]	; (800af5c <_svfiprintf_r+0x1f0>)
 800aec4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aec8:	2206      	movs	r2, #6
 800aeca:	f7f5 fa11 	bl	80002f0 <memchr>
 800aece:	2800      	cmp	r0, #0
 800aed0:	d038      	beq.n	800af44 <_svfiprintf_r+0x1d8>
 800aed2:	4b23      	ldr	r3, [pc, #140]	; (800af60 <_svfiprintf_r+0x1f4>)
 800aed4:	bb1b      	cbnz	r3, 800af1e <_svfiprintf_r+0x1b2>
 800aed6:	9b03      	ldr	r3, [sp, #12]
 800aed8:	3307      	adds	r3, #7
 800aeda:	f023 0307 	bic.w	r3, r3, #7
 800aede:	3308      	adds	r3, #8
 800aee0:	9303      	str	r3, [sp, #12]
 800aee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee4:	4433      	add	r3, r6
 800aee6:	9309      	str	r3, [sp, #36]	; 0x24
 800aee8:	e767      	b.n	800adba <_svfiprintf_r+0x4e>
 800aeea:	fb0c 3202 	mla	r2, ip, r2, r3
 800aeee:	460c      	mov	r4, r1
 800aef0:	2001      	movs	r0, #1
 800aef2:	e7a5      	b.n	800ae40 <_svfiprintf_r+0xd4>
 800aef4:	2300      	movs	r3, #0
 800aef6:	3401      	adds	r4, #1
 800aef8:	9305      	str	r3, [sp, #20]
 800aefa:	4619      	mov	r1, r3
 800aefc:	f04f 0c0a 	mov.w	ip, #10
 800af00:	4620      	mov	r0, r4
 800af02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af06:	3a30      	subs	r2, #48	; 0x30
 800af08:	2a09      	cmp	r2, #9
 800af0a:	d903      	bls.n	800af14 <_svfiprintf_r+0x1a8>
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d0c5      	beq.n	800ae9c <_svfiprintf_r+0x130>
 800af10:	9105      	str	r1, [sp, #20]
 800af12:	e7c3      	b.n	800ae9c <_svfiprintf_r+0x130>
 800af14:	fb0c 2101 	mla	r1, ip, r1, r2
 800af18:	4604      	mov	r4, r0
 800af1a:	2301      	movs	r3, #1
 800af1c:	e7f0      	b.n	800af00 <_svfiprintf_r+0x194>
 800af1e:	ab03      	add	r3, sp, #12
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	462a      	mov	r2, r5
 800af24:	4b0f      	ldr	r3, [pc, #60]	; (800af64 <_svfiprintf_r+0x1f8>)
 800af26:	a904      	add	r1, sp, #16
 800af28:	4638      	mov	r0, r7
 800af2a:	f3af 8000 	nop.w
 800af2e:	1c42      	adds	r2, r0, #1
 800af30:	4606      	mov	r6, r0
 800af32:	d1d6      	bne.n	800aee2 <_svfiprintf_r+0x176>
 800af34:	89ab      	ldrh	r3, [r5, #12]
 800af36:	065b      	lsls	r3, r3, #25
 800af38:	f53f af2c 	bmi.w	800ad94 <_svfiprintf_r+0x28>
 800af3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af3e:	b01d      	add	sp, #116	; 0x74
 800af40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af44:	ab03      	add	r3, sp, #12
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	462a      	mov	r2, r5
 800af4a:	4b06      	ldr	r3, [pc, #24]	; (800af64 <_svfiprintf_r+0x1f8>)
 800af4c:	a904      	add	r1, sp, #16
 800af4e:	4638      	mov	r0, r7
 800af50:	f000 f87a 	bl	800b048 <_printf_i>
 800af54:	e7eb      	b.n	800af2e <_svfiprintf_r+0x1c2>
 800af56:	bf00      	nop
 800af58:	0800b619 	.word	0x0800b619
 800af5c:	0800b623 	.word	0x0800b623
 800af60:	00000000 	.word	0x00000000
 800af64:	0800acb5 	.word	0x0800acb5
 800af68:	0800b61f 	.word	0x0800b61f

0800af6c <_printf_common>:
 800af6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af70:	4616      	mov	r6, r2
 800af72:	4699      	mov	r9, r3
 800af74:	688a      	ldr	r2, [r1, #8]
 800af76:	690b      	ldr	r3, [r1, #16]
 800af78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af7c:	4293      	cmp	r3, r2
 800af7e:	bfb8      	it	lt
 800af80:	4613      	movlt	r3, r2
 800af82:	6033      	str	r3, [r6, #0]
 800af84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af88:	4607      	mov	r7, r0
 800af8a:	460c      	mov	r4, r1
 800af8c:	b10a      	cbz	r2, 800af92 <_printf_common+0x26>
 800af8e:	3301      	adds	r3, #1
 800af90:	6033      	str	r3, [r6, #0]
 800af92:	6823      	ldr	r3, [r4, #0]
 800af94:	0699      	lsls	r1, r3, #26
 800af96:	bf42      	ittt	mi
 800af98:	6833      	ldrmi	r3, [r6, #0]
 800af9a:	3302      	addmi	r3, #2
 800af9c:	6033      	strmi	r3, [r6, #0]
 800af9e:	6825      	ldr	r5, [r4, #0]
 800afa0:	f015 0506 	ands.w	r5, r5, #6
 800afa4:	d106      	bne.n	800afb4 <_printf_common+0x48>
 800afa6:	f104 0a19 	add.w	sl, r4, #25
 800afaa:	68e3      	ldr	r3, [r4, #12]
 800afac:	6832      	ldr	r2, [r6, #0]
 800afae:	1a9b      	subs	r3, r3, r2
 800afb0:	42ab      	cmp	r3, r5
 800afb2:	dc26      	bgt.n	800b002 <_printf_common+0x96>
 800afb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800afb8:	1e13      	subs	r3, r2, #0
 800afba:	6822      	ldr	r2, [r4, #0]
 800afbc:	bf18      	it	ne
 800afbe:	2301      	movne	r3, #1
 800afc0:	0692      	lsls	r2, r2, #26
 800afc2:	d42b      	bmi.n	800b01c <_printf_common+0xb0>
 800afc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afc8:	4649      	mov	r1, r9
 800afca:	4638      	mov	r0, r7
 800afcc:	47c0      	blx	r8
 800afce:	3001      	adds	r0, #1
 800afd0:	d01e      	beq.n	800b010 <_printf_common+0xa4>
 800afd2:	6823      	ldr	r3, [r4, #0]
 800afd4:	68e5      	ldr	r5, [r4, #12]
 800afd6:	6832      	ldr	r2, [r6, #0]
 800afd8:	f003 0306 	and.w	r3, r3, #6
 800afdc:	2b04      	cmp	r3, #4
 800afde:	bf08      	it	eq
 800afe0:	1aad      	subeq	r5, r5, r2
 800afe2:	68a3      	ldr	r3, [r4, #8]
 800afe4:	6922      	ldr	r2, [r4, #16]
 800afe6:	bf0c      	ite	eq
 800afe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afec:	2500      	movne	r5, #0
 800afee:	4293      	cmp	r3, r2
 800aff0:	bfc4      	itt	gt
 800aff2:	1a9b      	subgt	r3, r3, r2
 800aff4:	18ed      	addgt	r5, r5, r3
 800aff6:	2600      	movs	r6, #0
 800aff8:	341a      	adds	r4, #26
 800affa:	42b5      	cmp	r5, r6
 800affc:	d11a      	bne.n	800b034 <_printf_common+0xc8>
 800affe:	2000      	movs	r0, #0
 800b000:	e008      	b.n	800b014 <_printf_common+0xa8>
 800b002:	2301      	movs	r3, #1
 800b004:	4652      	mov	r2, sl
 800b006:	4649      	mov	r1, r9
 800b008:	4638      	mov	r0, r7
 800b00a:	47c0      	blx	r8
 800b00c:	3001      	adds	r0, #1
 800b00e:	d103      	bne.n	800b018 <_printf_common+0xac>
 800b010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b018:	3501      	adds	r5, #1
 800b01a:	e7c6      	b.n	800afaa <_printf_common+0x3e>
 800b01c:	18e1      	adds	r1, r4, r3
 800b01e:	1c5a      	adds	r2, r3, #1
 800b020:	2030      	movs	r0, #48	; 0x30
 800b022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b026:	4422      	add	r2, r4
 800b028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b02c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b030:	3302      	adds	r3, #2
 800b032:	e7c7      	b.n	800afc4 <_printf_common+0x58>
 800b034:	2301      	movs	r3, #1
 800b036:	4622      	mov	r2, r4
 800b038:	4649      	mov	r1, r9
 800b03a:	4638      	mov	r0, r7
 800b03c:	47c0      	blx	r8
 800b03e:	3001      	adds	r0, #1
 800b040:	d0e6      	beq.n	800b010 <_printf_common+0xa4>
 800b042:	3601      	adds	r6, #1
 800b044:	e7d9      	b.n	800affa <_printf_common+0x8e>
	...

0800b048 <_printf_i>:
 800b048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b04c:	460c      	mov	r4, r1
 800b04e:	4691      	mov	r9, r2
 800b050:	7e27      	ldrb	r7, [r4, #24]
 800b052:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b054:	2f78      	cmp	r7, #120	; 0x78
 800b056:	4680      	mov	r8, r0
 800b058:	469a      	mov	sl, r3
 800b05a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b05e:	d807      	bhi.n	800b070 <_printf_i+0x28>
 800b060:	2f62      	cmp	r7, #98	; 0x62
 800b062:	d80a      	bhi.n	800b07a <_printf_i+0x32>
 800b064:	2f00      	cmp	r7, #0
 800b066:	f000 80d8 	beq.w	800b21a <_printf_i+0x1d2>
 800b06a:	2f58      	cmp	r7, #88	; 0x58
 800b06c:	f000 80a3 	beq.w	800b1b6 <_printf_i+0x16e>
 800b070:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b078:	e03a      	b.n	800b0f0 <_printf_i+0xa8>
 800b07a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b07e:	2b15      	cmp	r3, #21
 800b080:	d8f6      	bhi.n	800b070 <_printf_i+0x28>
 800b082:	a001      	add	r0, pc, #4	; (adr r0, 800b088 <_printf_i+0x40>)
 800b084:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b088:	0800b0e1 	.word	0x0800b0e1
 800b08c:	0800b0f5 	.word	0x0800b0f5
 800b090:	0800b071 	.word	0x0800b071
 800b094:	0800b071 	.word	0x0800b071
 800b098:	0800b071 	.word	0x0800b071
 800b09c:	0800b071 	.word	0x0800b071
 800b0a0:	0800b0f5 	.word	0x0800b0f5
 800b0a4:	0800b071 	.word	0x0800b071
 800b0a8:	0800b071 	.word	0x0800b071
 800b0ac:	0800b071 	.word	0x0800b071
 800b0b0:	0800b071 	.word	0x0800b071
 800b0b4:	0800b201 	.word	0x0800b201
 800b0b8:	0800b125 	.word	0x0800b125
 800b0bc:	0800b1e3 	.word	0x0800b1e3
 800b0c0:	0800b071 	.word	0x0800b071
 800b0c4:	0800b071 	.word	0x0800b071
 800b0c8:	0800b223 	.word	0x0800b223
 800b0cc:	0800b071 	.word	0x0800b071
 800b0d0:	0800b125 	.word	0x0800b125
 800b0d4:	0800b071 	.word	0x0800b071
 800b0d8:	0800b071 	.word	0x0800b071
 800b0dc:	0800b1eb 	.word	0x0800b1eb
 800b0e0:	680b      	ldr	r3, [r1, #0]
 800b0e2:	1d1a      	adds	r2, r3, #4
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	600a      	str	r2, [r1, #0]
 800b0e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b0ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e0a3      	b.n	800b23c <_printf_i+0x1f4>
 800b0f4:	6825      	ldr	r5, [r4, #0]
 800b0f6:	6808      	ldr	r0, [r1, #0]
 800b0f8:	062e      	lsls	r6, r5, #24
 800b0fa:	f100 0304 	add.w	r3, r0, #4
 800b0fe:	d50a      	bpl.n	800b116 <_printf_i+0xce>
 800b100:	6805      	ldr	r5, [r0, #0]
 800b102:	600b      	str	r3, [r1, #0]
 800b104:	2d00      	cmp	r5, #0
 800b106:	da03      	bge.n	800b110 <_printf_i+0xc8>
 800b108:	232d      	movs	r3, #45	; 0x2d
 800b10a:	426d      	negs	r5, r5
 800b10c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b110:	485e      	ldr	r0, [pc, #376]	; (800b28c <_printf_i+0x244>)
 800b112:	230a      	movs	r3, #10
 800b114:	e019      	b.n	800b14a <_printf_i+0x102>
 800b116:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b11a:	6805      	ldr	r5, [r0, #0]
 800b11c:	600b      	str	r3, [r1, #0]
 800b11e:	bf18      	it	ne
 800b120:	b22d      	sxthne	r5, r5
 800b122:	e7ef      	b.n	800b104 <_printf_i+0xbc>
 800b124:	680b      	ldr	r3, [r1, #0]
 800b126:	6825      	ldr	r5, [r4, #0]
 800b128:	1d18      	adds	r0, r3, #4
 800b12a:	6008      	str	r0, [r1, #0]
 800b12c:	0628      	lsls	r0, r5, #24
 800b12e:	d501      	bpl.n	800b134 <_printf_i+0xec>
 800b130:	681d      	ldr	r5, [r3, #0]
 800b132:	e002      	b.n	800b13a <_printf_i+0xf2>
 800b134:	0669      	lsls	r1, r5, #25
 800b136:	d5fb      	bpl.n	800b130 <_printf_i+0xe8>
 800b138:	881d      	ldrh	r5, [r3, #0]
 800b13a:	4854      	ldr	r0, [pc, #336]	; (800b28c <_printf_i+0x244>)
 800b13c:	2f6f      	cmp	r7, #111	; 0x6f
 800b13e:	bf0c      	ite	eq
 800b140:	2308      	moveq	r3, #8
 800b142:	230a      	movne	r3, #10
 800b144:	2100      	movs	r1, #0
 800b146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b14a:	6866      	ldr	r6, [r4, #4]
 800b14c:	60a6      	str	r6, [r4, #8]
 800b14e:	2e00      	cmp	r6, #0
 800b150:	bfa2      	ittt	ge
 800b152:	6821      	ldrge	r1, [r4, #0]
 800b154:	f021 0104 	bicge.w	r1, r1, #4
 800b158:	6021      	strge	r1, [r4, #0]
 800b15a:	b90d      	cbnz	r5, 800b160 <_printf_i+0x118>
 800b15c:	2e00      	cmp	r6, #0
 800b15e:	d04d      	beq.n	800b1fc <_printf_i+0x1b4>
 800b160:	4616      	mov	r6, r2
 800b162:	fbb5 f1f3 	udiv	r1, r5, r3
 800b166:	fb03 5711 	mls	r7, r3, r1, r5
 800b16a:	5dc7      	ldrb	r7, [r0, r7]
 800b16c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b170:	462f      	mov	r7, r5
 800b172:	42bb      	cmp	r3, r7
 800b174:	460d      	mov	r5, r1
 800b176:	d9f4      	bls.n	800b162 <_printf_i+0x11a>
 800b178:	2b08      	cmp	r3, #8
 800b17a:	d10b      	bne.n	800b194 <_printf_i+0x14c>
 800b17c:	6823      	ldr	r3, [r4, #0]
 800b17e:	07df      	lsls	r7, r3, #31
 800b180:	d508      	bpl.n	800b194 <_printf_i+0x14c>
 800b182:	6923      	ldr	r3, [r4, #16]
 800b184:	6861      	ldr	r1, [r4, #4]
 800b186:	4299      	cmp	r1, r3
 800b188:	bfde      	ittt	le
 800b18a:	2330      	movle	r3, #48	; 0x30
 800b18c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b190:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800b194:	1b92      	subs	r2, r2, r6
 800b196:	6122      	str	r2, [r4, #16]
 800b198:	f8cd a000 	str.w	sl, [sp]
 800b19c:	464b      	mov	r3, r9
 800b19e:	aa03      	add	r2, sp, #12
 800b1a0:	4621      	mov	r1, r4
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	f7ff fee2 	bl	800af6c <_printf_common>
 800b1a8:	3001      	adds	r0, #1
 800b1aa:	d14c      	bne.n	800b246 <_printf_i+0x1fe>
 800b1ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1b0:	b004      	add	sp, #16
 800b1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1b6:	4835      	ldr	r0, [pc, #212]	; (800b28c <_printf_i+0x244>)
 800b1b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b1bc:	6823      	ldr	r3, [r4, #0]
 800b1be:	680e      	ldr	r6, [r1, #0]
 800b1c0:	061f      	lsls	r7, r3, #24
 800b1c2:	f856 5b04 	ldr.w	r5, [r6], #4
 800b1c6:	600e      	str	r6, [r1, #0]
 800b1c8:	d514      	bpl.n	800b1f4 <_printf_i+0x1ac>
 800b1ca:	07d9      	lsls	r1, r3, #31
 800b1cc:	bf44      	itt	mi
 800b1ce:	f043 0320 	orrmi.w	r3, r3, #32
 800b1d2:	6023      	strmi	r3, [r4, #0]
 800b1d4:	b91d      	cbnz	r5, 800b1de <_printf_i+0x196>
 800b1d6:	6823      	ldr	r3, [r4, #0]
 800b1d8:	f023 0320 	bic.w	r3, r3, #32
 800b1dc:	6023      	str	r3, [r4, #0]
 800b1de:	2310      	movs	r3, #16
 800b1e0:	e7b0      	b.n	800b144 <_printf_i+0xfc>
 800b1e2:	6823      	ldr	r3, [r4, #0]
 800b1e4:	f043 0320 	orr.w	r3, r3, #32
 800b1e8:	6023      	str	r3, [r4, #0]
 800b1ea:	2378      	movs	r3, #120	; 0x78
 800b1ec:	4828      	ldr	r0, [pc, #160]	; (800b290 <_printf_i+0x248>)
 800b1ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1f2:	e7e3      	b.n	800b1bc <_printf_i+0x174>
 800b1f4:	065e      	lsls	r6, r3, #25
 800b1f6:	bf48      	it	mi
 800b1f8:	b2ad      	uxthmi	r5, r5
 800b1fa:	e7e6      	b.n	800b1ca <_printf_i+0x182>
 800b1fc:	4616      	mov	r6, r2
 800b1fe:	e7bb      	b.n	800b178 <_printf_i+0x130>
 800b200:	680b      	ldr	r3, [r1, #0]
 800b202:	6826      	ldr	r6, [r4, #0]
 800b204:	6960      	ldr	r0, [r4, #20]
 800b206:	1d1d      	adds	r5, r3, #4
 800b208:	600d      	str	r5, [r1, #0]
 800b20a:	0635      	lsls	r5, r6, #24
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	d501      	bpl.n	800b214 <_printf_i+0x1cc>
 800b210:	6018      	str	r0, [r3, #0]
 800b212:	e002      	b.n	800b21a <_printf_i+0x1d2>
 800b214:	0671      	lsls	r1, r6, #25
 800b216:	d5fb      	bpl.n	800b210 <_printf_i+0x1c8>
 800b218:	8018      	strh	r0, [r3, #0]
 800b21a:	2300      	movs	r3, #0
 800b21c:	6123      	str	r3, [r4, #16]
 800b21e:	4616      	mov	r6, r2
 800b220:	e7ba      	b.n	800b198 <_printf_i+0x150>
 800b222:	680b      	ldr	r3, [r1, #0]
 800b224:	1d1a      	adds	r2, r3, #4
 800b226:	600a      	str	r2, [r1, #0]
 800b228:	681e      	ldr	r6, [r3, #0]
 800b22a:	6862      	ldr	r2, [r4, #4]
 800b22c:	2100      	movs	r1, #0
 800b22e:	4630      	mov	r0, r6
 800b230:	f7f5 f85e 	bl	80002f0 <memchr>
 800b234:	b108      	cbz	r0, 800b23a <_printf_i+0x1f2>
 800b236:	1b80      	subs	r0, r0, r6
 800b238:	6060      	str	r0, [r4, #4]
 800b23a:	6863      	ldr	r3, [r4, #4]
 800b23c:	6123      	str	r3, [r4, #16]
 800b23e:	2300      	movs	r3, #0
 800b240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b244:	e7a8      	b.n	800b198 <_printf_i+0x150>
 800b246:	6923      	ldr	r3, [r4, #16]
 800b248:	4632      	mov	r2, r6
 800b24a:	4649      	mov	r1, r9
 800b24c:	4640      	mov	r0, r8
 800b24e:	47d0      	blx	sl
 800b250:	3001      	adds	r0, #1
 800b252:	d0ab      	beq.n	800b1ac <_printf_i+0x164>
 800b254:	6823      	ldr	r3, [r4, #0]
 800b256:	079b      	lsls	r3, r3, #30
 800b258:	d413      	bmi.n	800b282 <_printf_i+0x23a>
 800b25a:	68e0      	ldr	r0, [r4, #12]
 800b25c:	9b03      	ldr	r3, [sp, #12]
 800b25e:	4298      	cmp	r0, r3
 800b260:	bfb8      	it	lt
 800b262:	4618      	movlt	r0, r3
 800b264:	e7a4      	b.n	800b1b0 <_printf_i+0x168>
 800b266:	2301      	movs	r3, #1
 800b268:	4632      	mov	r2, r6
 800b26a:	4649      	mov	r1, r9
 800b26c:	4640      	mov	r0, r8
 800b26e:	47d0      	blx	sl
 800b270:	3001      	adds	r0, #1
 800b272:	d09b      	beq.n	800b1ac <_printf_i+0x164>
 800b274:	3501      	adds	r5, #1
 800b276:	68e3      	ldr	r3, [r4, #12]
 800b278:	9903      	ldr	r1, [sp, #12]
 800b27a:	1a5b      	subs	r3, r3, r1
 800b27c:	42ab      	cmp	r3, r5
 800b27e:	dcf2      	bgt.n	800b266 <_printf_i+0x21e>
 800b280:	e7eb      	b.n	800b25a <_printf_i+0x212>
 800b282:	2500      	movs	r5, #0
 800b284:	f104 0619 	add.w	r6, r4, #25
 800b288:	e7f5      	b.n	800b276 <_printf_i+0x22e>
 800b28a:	bf00      	nop
 800b28c:	0800b62a 	.word	0x0800b62a
 800b290:	0800b63b 	.word	0x0800b63b

0800b294 <memmove>:
 800b294:	4288      	cmp	r0, r1
 800b296:	b510      	push	{r4, lr}
 800b298:	eb01 0402 	add.w	r4, r1, r2
 800b29c:	d902      	bls.n	800b2a4 <memmove+0x10>
 800b29e:	4284      	cmp	r4, r0
 800b2a0:	4623      	mov	r3, r4
 800b2a2:	d807      	bhi.n	800b2b4 <memmove+0x20>
 800b2a4:	1e43      	subs	r3, r0, #1
 800b2a6:	42a1      	cmp	r1, r4
 800b2a8:	d008      	beq.n	800b2bc <memmove+0x28>
 800b2aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2b2:	e7f8      	b.n	800b2a6 <memmove+0x12>
 800b2b4:	4402      	add	r2, r0
 800b2b6:	4601      	mov	r1, r0
 800b2b8:	428a      	cmp	r2, r1
 800b2ba:	d100      	bne.n	800b2be <memmove+0x2a>
 800b2bc:	bd10      	pop	{r4, pc}
 800b2be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2c6:	e7f7      	b.n	800b2b8 <memmove+0x24>

0800b2c8 <_realloc_r>:
 800b2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ca:	4607      	mov	r7, r0
 800b2cc:	4614      	mov	r4, r2
 800b2ce:	460e      	mov	r6, r1
 800b2d0:	b921      	cbnz	r1, 800b2dc <_realloc_r+0x14>
 800b2d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b2d6:	4611      	mov	r1, r2
 800b2d8:	f7ff baf6 	b.w	800a8c8 <_malloc_r>
 800b2dc:	b922      	cbnz	r2, 800b2e8 <_realloc_r+0x20>
 800b2de:	f7ff fc99 	bl	800ac14 <_free_r>
 800b2e2:	4625      	mov	r5, r4
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2e8:	f000 f814 	bl	800b314 <_malloc_usable_size_r>
 800b2ec:	42a0      	cmp	r0, r4
 800b2ee:	d20f      	bcs.n	800b310 <_realloc_r+0x48>
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	4638      	mov	r0, r7
 800b2f4:	f7ff fae8 	bl	800a8c8 <_malloc_r>
 800b2f8:	4605      	mov	r5, r0
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	d0f2      	beq.n	800b2e4 <_realloc_r+0x1c>
 800b2fe:	4631      	mov	r1, r6
 800b300:	4622      	mov	r2, r4
 800b302:	f7ff facb 	bl	800a89c <memcpy>
 800b306:	4631      	mov	r1, r6
 800b308:	4638      	mov	r0, r7
 800b30a:	f7ff fc83 	bl	800ac14 <_free_r>
 800b30e:	e7e9      	b.n	800b2e4 <_realloc_r+0x1c>
 800b310:	4635      	mov	r5, r6
 800b312:	e7e7      	b.n	800b2e4 <_realloc_r+0x1c>

0800b314 <_malloc_usable_size_r>:
 800b314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b318:	1f18      	subs	r0, r3, #4
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	bfbc      	itt	lt
 800b31e:	580b      	ldrlt	r3, [r1, r0]
 800b320:	18c0      	addlt	r0, r0, r3
 800b322:	4770      	bx	lr

0800b324 <_init>:
 800b324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b326:	bf00      	nop
 800b328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b32a:	bc08      	pop	{r3}
 800b32c:	469e      	mov	lr, r3
 800b32e:	4770      	bx	lr

0800b330 <_fini>:
 800b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b332:	bf00      	nop
 800b334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b336:	bc08      	pop	{r3}
 800b338:	469e      	mov	lr, r3
 800b33a:	4770      	bx	lr
