
blinky-queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082f8  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  080085a8  080085a8  000185a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008768  08008768  00018768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008770  08008770  00018770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008774  08008774  00018774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08008778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ba8  24000078  080087f0  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004c20  080087f0  00024c20  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fec5  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004bc7  00000000  00000000  0004ff6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001868  00000000  00000000  00054b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000016f0  00000000  00000000  000563a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032ede  00000000  00000000  00057a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e532  00000000  00000000  0008a96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014935f  00000000  00000000  000a8ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001f21ff  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006948  00000000  00000000  001f2254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008590 	.word	0x08008590

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	08008590 	.word	0x08008590

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandsToBlink */
  CommandsToBlinkHandle = osMessageQueueNew (16, sizeof(uint8_t), &CommandsToBlink_attributes);
 80005ec:	4a18      	ldr	r2, [pc, #96]	; (8000650 <MX_FREERTOS_Init+0x68>)
 80005ee:	2101      	movs	r1, #1
 80005f0:	2010      	movs	r0, #16
 80005f2:	f005 f99c 	bl	800592e <osMessageQueueNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a16      	ldr	r2, [pc, #88]	; (8000654 <MX_FREERTOS_Init+0x6c>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of times_blinked */
  times_blinkedHandle = osMessageQueueNew (16, sizeof(uint8_t), &times_blinked_attributes);
 80005fc:	4a16      	ldr	r2, [pc, #88]	; (8000658 <MX_FREERTOS_Init+0x70>)
 80005fe:	2101      	movs	r1, #1
 8000600:	2010      	movs	r0, #16
 8000602:	f005 f994 	bl	800592e <osMessageQueueNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a14      	ldr	r2, [pc, #80]	; (800065c <MX_FREERTOS_Init+0x74>)
 800060a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CommandLine */
  CommandLineHandle = osThreadNew(StartCommandLine, NULL, &CommandLine_attributes);
 800060c:	4a14      	ldr	r2, [pc, #80]	; (8000660 <MX_FREERTOS_Init+0x78>)
 800060e:	2100      	movs	r1, #0
 8000610:	4814      	ldr	r0, [pc, #80]	; (8000664 <MX_FREERTOS_Init+0x7c>)
 8000612:	f005 f8df 	bl	80057d4 <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a13      	ldr	r2, [pc, #76]	; (8000668 <MX_FREERTOS_Init+0x80>)
 800061a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker1 */
  Blinker1Handle = osThreadNew(StartBlinker1, NULL, &Blinker1_attributes);
 800061c:	4a13      	ldr	r2, [pc, #76]	; (800066c <MX_FREERTOS_Init+0x84>)
 800061e:	2100      	movs	r1, #0
 8000620:	4813      	ldr	r0, [pc, #76]	; (8000670 <MX_FREERTOS_Init+0x88>)
 8000622:	f005 f8d7 	bl	80057d4 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_FREERTOS_Init+0x8c>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker2 */
  Blinker2Handle = osThreadNew(StartBlinker2, NULL, &Blinker2_attributes);
 800062c:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_FREERTOS_Init+0x90>)
 800062e:	2100      	movs	r1, #0
 8000630:	4812      	ldr	r0, [pc, #72]	; (800067c <MX_FREERTOS_Init+0x94>)
 8000632:	f005 f8cf 	bl	80057d4 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a11      	ldr	r2, [pc, #68]	; (8000680 <MX_FREERTOS_Init+0x98>)
 800063a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker3 */
  Blinker3Handle = osThreadNew(StartBlinker3, NULL, &Blinker3_attributes);
 800063c:	4a11      	ldr	r2, [pc, #68]	; (8000684 <MX_FREERTOS_Init+0x9c>)
 800063e:	2100      	movs	r1, #0
 8000640:	4811      	ldr	r0, [pc, #68]	; (8000688 <MX_FREERTOS_Init+0xa0>)
 8000642:	f005 f8c7 	bl	80057d4 <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a10      	ldr	r2, [pc, #64]	; (800068c <MX_FREERTOS_Init+0xa4>)
 800064a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	080086a0 	.word	0x080086a0
 8000654:	24004aec 	.word	0x24004aec
 8000658:	080086b8 	.word	0x080086b8
 800065c:	24004af0 	.word	0x24004af0
 8000660:	08008610 	.word	0x08008610
 8000664:	08000691 	.word	0x08000691
 8000668:	24004ad4 	.word	0x24004ad4
 800066c:	08008634 	.word	0x08008634
 8000670:	08000701 	.word	0x08000701
 8000674:	24004ad0 	.word	0x24004ad0
 8000678:	08008658 	.word	0x08008658
 800067c:	08000711 	.word	0x08000711
 8000680:	24004ae4 	.word	0x24004ae4
 8000684:	0800867c 	.word	0x0800867c
 8000688:	08000721 	.word	0x08000721
 800068c:	24004ae8 	.word	0x24004ae8

08000690 <StartCommandLine>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCommandLine */
void StartCommandLine(void *argument)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandLine */
	uint8_t local_pointer = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
  for(;;)
  {
	 HAL_StatusTypeDef ret = HAL_UART_Receive(&huart3,rx_buffer ,1, 100);
 800069c:	2364      	movs	r3, #100	; 0x64
 800069e:	2201      	movs	r2, #1
 80006a0:	4914      	ldr	r1, [pc, #80]	; (80006f4 <StartCommandLine+0x64>)
 80006a2:	4815      	ldr	r0, [pc, #84]	; (80006f8 <StartCommandLine+0x68>)
 80006a4:	f003 fe1e 	bl	80042e4 <HAL_UART_Receive>
 80006a8:	4603      	mov	r3, r0
 80006aa:	73bb      	strb	r3, [r7, #14]
	 if(ret == HAL_OK){
 80006ac:	7bbb      	ldrb	r3, [r7, #14]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d11c      	bne.n	80006ec <StartCommandLine+0x5c>
		  HAL_UART_Transmit(&huart3, rx_buffer, 1, 100);
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	2201      	movs	r2, #1
 80006b6:	490f      	ldr	r1, [pc, #60]	; (80006f4 <StartCommandLine+0x64>)
 80006b8:	480f      	ldr	r0, [pc, #60]	; (80006f8 <StartCommandLine+0x68>)
 80006ba:	f003 fd7d 	bl	80041b8 <HAL_UART_Transmit>
		 local_buffer[local_pointer] = rx_buffer[0];
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <StartCommandLine+0x64>)
 80006c2:	7811      	ldrb	r1, [r2, #0]
 80006c4:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <StartCommandLine+0x6c>)
 80006c6:	54d1      	strb	r1, [r2, r3]
		 if(local_buffer[local_pointer] == '\n' || local_buffer[local_pointer] == '\r'){
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	4a0c      	ldr	r2, [pc, #48]	; (80006fc <StartCommandLine+0x6c>)
 80006cc:	5cd3      	ldrb	r3, [r2, r3]
 80006ce:	2b0a      	cmp	r3, #10
 80006d0:	d00c      	beq.n	80006ec <StartCommandLine+0x5c>
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	4a09      	ldr	r2, [pc, #36]	; (80006fc <StartCommandLine+0x6c>)
 80006d6:	5cd3      	ldrb	r3, [r2, r3]
 80006d8:	2b0d      	cmp	r3, #13
 80006da:	d007      	beq.n	80006ec <StartCommandLine+0x5c>

		 }else{
			 local_pointer++;
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	3301      	adds	r3, #1
 80006e0:	73fb      	strb	r3, [r7, #15]
			 if(local_pointer > RX_BUFFER_LENGTH){
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	2b64      	cmp	r3, #100	; 0x64
 80006e6:	d901      	bls.n	80006ec <StartCommandLine+0x5c>
				 local_pointer = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
			 }
		 }
	 }
    osDelay(10);
 80006ec:	200a      	movs	r0, #10
 80006ee:	f005 f903 	bl	80058f8 <osDelay>
  {
 80006f2:	e7d3      	b.n	800069c <StartCommandLine+0xc>
 80006f4:	24004ad8 	.word	0x24004ad8
 80006f8:	24004b40 	.word	0x24004b40
 80006fc:	24004a68 	.word	0x24004a68

08000700 <StartBlinker1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinker1 */
void StartBlinker1(void *argument)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000708:	2001      	movs	r0, #1
 800070a:	f005 f8f5 	bl	80058f8 <osDelay>
 800070e:	e7fb      	b.n	8000708 <StartBlinker1+0x8>

08000710 <StartBlinker2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinker2 */
void StartBlinker2(void *argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000718:	2001      	movs	r0, #1
 800071a:	f005 f8ed 	bl	80058f8 <osDelay>
 800071e:	e7fb      	b.n	8000718 <StartBlinker2+0x8>

08000720 <StartBlinker3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinker3 */
void StartBlinker3(void *argument)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker3 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000728:	2001      	movs	r0, #1
 800072a:	f005 f8e5 	bl	80058f8 <osDelay>
 800072e:	e7fb      	b.n	8000728 <StartBlinker3+0x8>

08000730 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08e      	sub	sp, #56	; 0x38
 8000734:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	4b80      	ldr	r3, [pc, #512]	; (8000948 <MX_GPIO_Init+0x218>)
 8000748:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800074c:	4a7e      	ldr	r2, [pc, #504]	; (8000948 <MX_GPIO_Init+0x218>)
 800074e:	f043 0304 	orr.w	r3, r3, #4
 8000752:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000756:	4b7c      	ldr	r3, [pc, #496]	; (8000948 <MX_GPIO_Init+0x218>)
 8000758:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800075c:	f003 0304 	and.w	r3, r3, #4
 8000760:	623b      	str	r3, [r7, #32]
 8000762:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000764:	4b78      	ldr	r3, [pc, #480]	; (8000948 <MX_GPIO_Init+0x218>)
 8000766:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800076a:	4a77      	ldr	r2, [pc, #476]	; (8000948 <MX_GPIO_Init+0x218>)
 800076c:	f043 0320 	orr.w	r3, r3, #32
 8000770:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000774:	4b74      	ldr	r3, [pc, #464]	; (8000948 <MX_GPIO_Init+0x218>)
 8000776:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800077a:	f003 0320 	and.w	r3, r3, #32
 800077e:	61fb      	str	r3, [r7, #28]
 8000780:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	4b71      	ldr	r3, [pc, #452]	; (8000948 <MX_GPIO_Init+0x218>)
 8000784:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000788:	4a6f      	ldr	r2, [pc, #444]	; (8000948 <MX_GPIO_Init+0x218>)
 800078a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000792:	4b6d      	ldr	r3, [pc, #436]	; (8000948 <MX_GPIO_Init+0x218>)
 8000794:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a0:	4b69      	ldr	r3, [pc, #420]	; (8000948 <MX_GPIO_Init+0x218>)
 80007a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007a6:	4a68      	ldr	r2, [pc, #416]	; (8000948 <MX_GPIO_Init+0x218>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007b0:	4b65      	ldr	r3, [pc, #404]	; (8000948 <MX_GPIO_Init+0x218>)
 80007b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	4b62      	ldr	r3, [pc, #392]	; (8000948 <MX_GPIO_Init+0x218>)
 80007c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007c4:	4a60      	ldr	r2, [pc, #384]	; (8000948 <MX_GPIO_Init+0x218>)
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007ce:	4b5e      	ldr	r3, [pc, #376]	; (8000948 <MX_GPIO_Init+0x218>)
 80007d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007d4:	f003 0308 	and.w	r3, r3, #8
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007dc:	4b5a      	ldr	r3, [pc, #360]	; (8000948 <MX_GPIO_Init+0x218>)
 80007de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e2:	4a59      	ldr	r2, [pc, #356]	; (8000948 <MX_GPIO_Init+0x218>)
 80007e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007ec:	4b56      	ldr	r3, [pc, #344]	; (8000948 <MX_GPIO_Init+0x218>)
 80007ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b53      	ldr	r3, [pc, #332]	; (8000948 <MX_GPIO_Init+0x218>)
 80007fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000800:	4a51      	ldr	r2, [pc, #324]	; (8000948 <MX_GPIO_Init+0x218>)
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800080a:	4b4f      	ldr	r3, [pc, #316]	; (8000948 <MX_GPIO_Init+0x218>)
 800080c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000818:	4b4b      	ldr	r3, [pc, #300]	; (8000948 <MX_GPIO_Init+0x218>)
 800081a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800081e:	4a4a      	ldr	r2, [pc, #296]	; (8000948 <MX_GPIO_Init+0x218>)
 8000820:	f043 0310 	orr.w	r3, r3, #16
 8000824:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000828:	4b47      	ldr	r3, [pc, #284]	; (8000948 <MX_GPIO_Init+0x218>)
 800082a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800082e:	f003 0310 	and.w	r3, r3, #16
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083c:	4843      	ldr	r0, [pc, #268]	; (800094c <MX_GPIO_Init+0x21c>)
 800083e:	f000 fe1d 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f244 0101 	movw	r1, #16385	; 0x4001
 8000848:	4841      	ldr	r0, [pc, #260]	; (8000950 <MX_GPIO_Init+0x220>)
 800084a:	f000 fe17 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2102      	movs	r1, #2
 8000852:	4840      	ldr	r0, [pc, #256]	; (8000954 <MX_GPIO_Init+0x224>)
 8000854:	f000 fe12 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086a:	4619      	mov	r1, r3
 800086c:	483a      	ldr	r0, [pc, #232]	; (8000958 <MX_GPIO_Init+0x228>)
 800086e:	f000 fc55 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000888:	4619      	mov	r1, r3
 800088a:	4830      	ldr	r0, [pc, #192]	; (800094c <MX_GPIO_Init+0x21c>)
 800088c:	f000 fc46 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000890:	f244 0301 	movw	r3, #16385	; 0x4001
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a6:	4619      	mov	r1, r3
 80008a8:	4829      	ldr	r0, [pc, #164]	; (8000950 <MX_GPIO_Init+0x220>)
 80008aa:	f000 fc37 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c0:	4619      	mov	r1, r3
 80008c2:	4826      	ldr	r0, [pc, #152]	; (800095c <MX_GPIO_Init+0x22c>)
 80008c4:	f000 fc2a 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80008c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008da:	4619      	mov	r1, r3
 80008dc:	4820      	ldr	r0, [pc, #128]	; (8000960 <MX_GPIO_Init+0x230>)
 80008de:	f000 fc1d 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80008e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80008f4:	230a      	movs	r3, #10
 80008f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fc:	4619      	mov	r1, r3
 80008fe:	4818      	ldr	r0, [pc, #96]	; (8000960 <MX_GPIO_Init+0x230>)
 8000900:	f000 fc0c 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000904:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	4619      	mov	r1, r3
 800091c:	4810      	ldr	r0, [pc, #64]	; (8000960 <MX_GPIO_Init+0x230>)
 800091e:	f000 fbfd 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000922:	2302      	movs	r3, #2
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	4619      	mov	r1, r3
 8000938:	4806      	ldr	r0, [pc, #24]	; (8000954 <MX_GPIO_Init+0x224>)
 800093a:	f000 fbef 	bl	800111c <HAL_GPIO_Init>

}
 800093e:	bf00      	nop
 8000940:	3738      	adds	r7, #56	; 0x38
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	58024400 	.word	0x58024400
 800094c:	58021400 	.word	0x58021400
 8000950:	58020400 	.word	0x58020400
 8000954:	58021000 	.word	0x58021000
 8000958:	58020800 	.word	0x58020800
 800095c:	58021800 	.word	0x58021800
 8000960:	58020000 	.word	0x58020000

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000968:	f000 fa9c 	bl	8000ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096c:	f000 f80e 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000970:	f7ff fede 	bl	8000730 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000974:	f000 f9b2 	bl	8000cdc <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000978:	f000 fa62 	bl	8000e40 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800097c:	f004 fee0 	bl	8005740 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000980:	f7ff fe32 	bl	80005e8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000984:	f004 ff00 	bl	8005788 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000988:	e7fe      	b.n	8000988 <main+0x24>
	...

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b09c      	sub	sp, #112	; 0x70
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	224c      	movs	r2, #76	; 0x4c
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f007 fd2a 	bl	80083f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2220      	movs	r2, #32
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f007 fd24 	bl	80083f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009ac:	2004      	movs	r0, #4
 80009ae:	f000 fd7f 	bl	80014b0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <SystemClock_Config+0xd8>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	4a2a      	ldr	r2, [pc, #168]	; (8000a64 <SystemClock_Config+0xd8>)
 80009bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009c0:	6193      	str	r3, [r2, #24]
 80009c2:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <SystemClock_Config+0xd8>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009ce:	bf00      	nop
 80009d0:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <SystemClock_Config+0xd8>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009dc:	d1f8      	bne.n	80009d0 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80009de:	2321      	movs	r3, #33	; 0x21
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009e2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009e8:	2301      	movs	r3, #1
 80009ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
 80009ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f0:	2302      	movs	r3, #2
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80009f8:	2318      	movs	r3, #24
 80009fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a00:	2304      	movs	r3, #4
 8000a02:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a08:	230c      	movs	r3, #12
 8000a0a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 fda3 	bl	8001564 <HAL_RCC_OscConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a24:	f000 f832 	bl	8000a8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a28:	233f      	movs	r3, #63	; 0x3f
 8000a2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2102      	movs	r1, #2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 f98d 	bl	8001d6c <HAL_RCC_ClockConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a58:	f000 f818 	bl	8000a8c <Error_Handler>
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	3770      	adds	r7, #112	; 0x70
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	58024800 	.word	0x58024800

08000a68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d101      	bne.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a7a:	f000 fa4f 	bl	8000f1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40001400 	.word	0x40001400

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <HAL_MspInit+0x38>)
 8000aa0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000aa4:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <HAL_MspInit+0x38>)
 8000aa6:	f043 0302 	orr.w	r3, r3, #2
 8000aaa:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_MspInit+0x38>)
 8000ab0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	210f      	movs	r1, #15
 8000ac0:	f06f 0001 	mvn.w	r0, #1
 8000ac4:	f000 fb02 	bl	80010cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	58024400 	.word	0x58024400

08000ad4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b090      	sub	sp, #64	; 0x40
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b0f      	cmp	r3, #15
 8000ae0:	d827      	bhi.n	8000b32 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	2037      	movs	r0, #55	; 0x37
 8000ae8:	f000 faf0 	bl	80010cc <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000aec:	2037      	movs	r0, #55	; 0x37
 8000aee:	f000 fb07 	bl	8001100 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000af2:	4a29      	ldr	r2, [pc, #164]	; (8000b98 <HAL_InitTick+0xc4>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000af8:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <HAL_InitTick+0xc8>)
 8000afa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000afe:	4a27      	ldr	r2, [pc, #156]	; (8000b9c <HAL_InitTick+0xc8>)
 8000b00:	f043 0320 	orr.w	r3, r3, #32
 8000b04:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000b08:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <HAL_InitTick+0xc8>)
 8000b0a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b0e:	f003 0320 	and.w	r3, r3, #32
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b16:	f107 0210 	add.w	r2, r7, #16
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 fcaf 	bl	8002484 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b28:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d106      	bne.n	8000b3e <HAL_InitTick+0x6a>
 8000b30:	e001      	b.n	8000b36 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e02b      	b.n	8000b8e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b36:	f001 fc79 	bl	800242c <HAL_RCC_GetPCLK1Freq>
 8000b3a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000b3c:	e004      	b.n	8000b48 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b3e:	f001 fc75 	bl	800242c <HAL_RCC_GetPCLK1Freq>
 8000b42:	4603      	mov	r3, r0
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b4a:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <HAL_InitTick+0xcc>)
 8000b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b50:	0c9b      	lsrs	r3, r3, #18
 8000b52:	3b01      	subs	r3, #1
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <HAL_InitTick+0xd0>)
 8000b58:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <HAL_InitTick+0xd4>)
 8000b5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_InitTick+0xd0>)
 8000b5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b62:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000b64:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <HAL_InitTick+0xd0>)
 8000b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b68:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <HAL_InitTick+0xd0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <HAL_InitTick+0xd0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000b76:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <HAL_InitTick+0xd0>)
 8000b78:	f002 fff4 	bl	8003b64 <HAL_TIM_Base_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d104      	bne.n	8000b8c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000b82:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <HAL_InitTick+0xd0>)
 8000b84:	f003 f850 	bl	8003c28 <HAL_TIM_Base_Start_IT>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	e000      	b.n	8000b8e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3740      	adds	r7, #64	; 0x40
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	24000008 	.word	0x24000008
 8000b9c:	58024400 	.word	0x58024400
 8000ba0:	431bde83 	.word	0x431bde83
 8000ba4:	24004af4 	.word	0x24004af4
 8000ba8:	40001400 	.word	0x40001400

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <TIM7_IRQHandler+0x10>)
 8000bde:	f003 f89b 	bl	8003d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	24004af4 	.word	0x24004af4

08000bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b32      	ldr	r3, [pc, #200]	; (8000cbc <SystemInit+0xd0>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf6:	4a31      	ldr	r2, [pc, #196]	; (8000cbc <SystemInit+0xd0>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c00:	4b2f      	ldr	r3, [pc, #188]	; (8000cc0 <SystemInit+0xd4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 030f 	and.w	r3, r3, #15
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d807      	bhi.n	8000c1c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c0c:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <SystemInit+0xd4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f023 030f 	bic.w	r3, r3, #15
 8000c14:	4a2a      	ldr	r2, [pc, #168]	; (8000cc0 <SystemInit+0xd4>)
 8000c16:	f043 0303 	orr.w	r3, r3, #3
 8000c1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c1c:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <SystemInit+0xd8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a28      	ldr	r2, [pc, #160]	; (8000cc4 <SystemInit+0xd8>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c28:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <SystemInit+0xd8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c2e:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <SystemInit+0xd8>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4924      	ldr	r1, [pc, #144]	; (8000cc4 <SystemInit+0xd8>)
 8000c34:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <SystemInit+0xdc>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <SystemInit+0xd4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 030c 	and.w	r3, r3, #12
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d007      	beq.n	8000c56 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c46:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <SystemInit+0xd4>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f023 030f 	bic.w	r3, r3, #15
 8000c4e:	4a1c      	ldr	r2, [pc, #112]	; (8000cc0 <SystemInit+0xd4>)
 8000c50:	f043 0303 	orr.w	r3, r3, #3
 8000c54:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <SystemInit+0xd8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000c5c:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <SystemInit+0xd8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <SystemInit+0xd8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <SystemInit+0xd8>)
 8000c6a:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <SystemInit+0xe0>)
 8000c6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <SystemInit+0xd8>)
 8000c70:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <SystemInit+0xe4>)
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <SystemInit+0xd8>)
 8000c76:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <SystemInit+0xe8>)
 8000c78:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c7a:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <SystemInit+0xd8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <SystemInit+0xd8>)
 8000c82:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <SystemInit+0xe8>)
 8000c84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <SystemInit+0xd8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <SystemInit+0xd8>)
 8000c8e:	4a11      	ldr	r2, [pc, #68]	; (8000cd4 <SystemInit+0xe8>)
 8000c90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <SystemInit+0xd8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c98:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <SystemInit+0xd8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a09      	ldr	r2, [pc, #36]	; (8000cc4 <SystemInit+0xd8>)
 8000c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <SystemInit+0xd8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <SystemInit+0xec>)
 8000cac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000cb0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00
 8000cc0:	52002000 	.word	0x52002000
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ccc:	02020200 	.word	0x02020200
 8000cd0:	01ff0000 	.word	0x01ff0000
 8000cd4:	01010280 	.word	0x01010280
 8000cd8:	52004000 	.word	0x52004000

08000cdc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ce0:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <MX_USART3_UART_Init+0x90>)
 8000ce2:	4a23      	ldr	r2, [pc, #140]	; (8000d70 <MX_USART3_UART_Init+0x94>)
 8000ce4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <MX_USART3_UART_Init+0x90>)
 8000ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <MX_USART3_UART_Init+0x90>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <MX_USART3_UART_Init+0x90>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <MX_USART3_UART_Init+0x90>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d00:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d02:	220c      	movs	r2, #12
 8000d04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d12:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d24:	4811      	ldr	r0, [pc, #68]	; (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d26:	f003 f9f7 	bl	8004118 <HAL_UART_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d30:	f7ff feac 	bl	8000a8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d34:	2100      	movs	r1, #0
 8000d36:	480d      	ldr	r0, [pc, #52]	; (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d38:	f004 fbf4 	bl	8005524 <HAL_UARTEx_SetTxFifoThreshold>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d42:	f7ff fea3 	bl	8000a8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d46:	2100      	movs	r1, #0
 8000d48:	4808      	ldr	r0, [pc, #32]	; (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d4a:	f004 fc29 	bl	80055a0 <HAL_UARTEx_SetRxFifoThreshold>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d54:	f7ff fe9a 	bl	8000a8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d58:	4804      	ldr	r0, [pc, #16]	; (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d5a:	f004 fbaa 	bl	80054b2 <HAL_UARTEx_DisableFifoMode>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d64:	f7ff fe92 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	24004b40 	.word	0x24004b40
 8000d70:	40004800 	.word	0x40004800

08000d74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b0b8      	sub	sp, #224	; 0xe0
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	22b8      	movs	r2, #184	; 0xb8
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f007 fb2d 	bl	80083f4 <memset>
  if(uartHandle->Instance==USART3)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a25      	ldr	r2, [pc, #148]	; (8000e34 <HAL_UART_MspInit+0xc0>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d142      	bne.n	8000e2a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000da4:	2302      	movs	r3, #2
 8000da6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 fba8 	bl	8002508 <HAL_RCCEx_PeriphCLKConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dbe:	f7ff fe65 	bl	8000a8c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <HAL_UART_MspInit+0xc4>)
 8000dc4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000dc8:	4a1b      	ldr	r2, [pc, #108]	; (8000e38 <HAL_UART_MspInit+0xc4>)
 8000dca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dce:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_UART_MspInit+0xc4>)
 8000dd4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_UART_MspInit+0xc4>)
 8000de2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000de6:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <HAL_UART_MspInit+0xc4>)
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_UART_MspInit+0xc4>)
 8000df2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000dfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e18:	2307      	movs	r3, #7
 8000e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_UART_MspInit+0xc8>)
 8000e26:	f000 f979 	bl	800111c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	37e0      	adds	r7, #224	; 0xe0
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40004800 	.word	0x40004800
 8000e38:	58024400 	.word	0x58024400
 8000e3c:	58020c00 	.word	0x58020c00

08000e40 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e88 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e54:	f7ff feca 	bl	8000bec <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e58:	480c      	ldr	r0, [pc, #48]	; (8000e8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5a:	490d      	ldr	r1, [pc, #52]	; (8000e90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e70:	4c0a      	ldr	r4, [pc, #40]	; (8000e9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f007 fa85 	bl	800838c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e82:	f7ff fd6f 	bl	8000964 <main>
  bx  lr
 8000e86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e88:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000e8c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e90:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000e94:	08008778 	.word	0x08008778
  ldr r2, =_sbss
 8000e98:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000e9c:	24004c20 	.word	0x24004c20

08000ea0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eaa:	2003      	movs	r0, #3
 8000eac:	f000 f903 	bl	80010b6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000eb0:	f001 f912 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <HAL_Init+0x68>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	0a1b      	lsrs	r3, r3, #8
 8000ebc:	f003 030f 	and.w	r3, r3, #15
 8000ec0:	4913      	ldr	r1, [pc, #76]	; (8000f10 <HAL_Init+0x6c>)
 8000ec2:	5ccb      	ldrb	r3, [r1, r3]
 8000ec4:	f003 031f 	and.w	r3, r3, #31
 8000ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ecc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_Init+0x68>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <HAL_Init+0x6c>)
 8000ed8:	5cd3      	ldrb	r3, [r2, r3]
 8000eda:	f003 031f 	and.w	r3, r3, #31
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee4:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <HAL_Init+0x70>)
 8000ee6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ee8:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <HAL_Init+0x74>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eee:	200f      	movs	r0, #15
 8000ef0:	f7ff fdf0 	bl	8000ad4 <HAL_InitTick>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e002      	b.n	8000f04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000efe:	f7ff fdcb 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	58024400 	.word	0x58024400
 8000f10:	080086d0 	.word	0x080086d0
 8000f14:	24000004 	.word	0x24000004
 8000f18:	24000000 	.word	0x24000000

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	2400000c 	.word	0x2400000c
 8000f40:	24004bd0 	.word	0x24004bd0

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	24004bd0 	.word	0x24004bd0

08000f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <__NVIC_SetPriorityGrouping+0x40>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	4313      	orrs	r3, r2
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <__NVIC_SetPriorityGrouping+0x40>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00
 8000fa0:	05fa0000 	.word	0x05fa0000

08000fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <__NVIC_GetPriorityGrouping+0x18>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	f003 0307 	and.w	r3, r3, #7
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	db0b      	blt.n	8000fea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	f003 021f 	and.w	r2, r3, #31
 8000fd8:	4907      	ldr	r1, [pc, #28]	; (8000ff8 <__NVIC_EnableIRQ+0x38>)
 8000fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000e100 	.word	0xe000e100

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	; (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	; (800104c <__NVIC_SetPriority+0x50>)
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
         );
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	; 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ff4c 	bl	8000f5c <__NVIC_SetPriorityGrouping>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010da:	f7ff ff63 	bl	8000fa4 <__NVIC_GetPriorityGrouping>
 80010de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	6978      	ldr	r0, [r7, #20]
 80010e6:	f7ff ffb3 	bl	8001050 <NVIC_EncodePriority>
 80010ea:	4602      	mov	r2, r0
 80010ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010f0:	4611      	mov	r1, r2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff82 	bl	8000ffc <__NVIC_SetPriority>
}
 80010f8:	bf00      	nop
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff56 	bl	8000fc0 <__NVIC_EnableIRQ>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800112a:	4b89      	ldr	r3, [pc, #548]	; (8001350 <HAL_GPIO_Init+0x234>)
 800112c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800112e:	e194      	b.n	800145a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	2101      	movs	r1, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 8186 	beq.w	8001454 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b01      	cmp	r3, #1
 8001152:	d005      	beq.n	8001160 <HAL_GPIO_Init+0x44>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d130      	bne.n	80011c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001196:	2201      	movs	r2, #1
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	f003 0201 	and.w	r2, r3, #1
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d017      	beq.n	80011fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d123      	bne.n	8001252 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	08da      	lsrs	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3208      	adds	r2, #8
 8001212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	691a      	ldr	r2, [r3, #16]
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	08da      	lsrs	r2, r3, #3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3208      	adds	r2, #8
 800124c:	69b9      	ldr	r1, [r7, #24]
 800124e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0203 	and.w	r2, r3, #3
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 80e0 	beq.w	8001454 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001294:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <HAL_GPIO_Init+0x238>)
 8001296:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800129a:	4a2e      	ldr	r2, [pc, #184]	; (8001354 <HAL_GPIO_Init+0x238>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <HAL_GPIO_Init+0x238>)
 80012a6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012b2:	4a29      	ldr	r2, [pc, #164]	; (8001358 <HAL_GPIO_Init+0x23c>)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	3302      	adds	r3, #2
 80012ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	220f      	movs	r2, #15
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a20      	ldr	r2, [pc, #128]	; (800135c <HAL_GPIO_Init+0x240>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d052      	beq.n	8001384 <HAL_GPIO_Init+0x268>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <HAL_GPIO_Init+0x244>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d031      	beq.n	800134a <HAL_GPIO_Init+0x22e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a1e      	ldr	r2, [pc, #120]	; (8001364 <HAL_GPIO_Init+0x248>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d02b      	beq.n	8001346 <HAL_GPIO_Init+0x22a>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a1d      	ldr	r2, [pc, #116]	; (8001368 <HAL_GPIO_Init+0x24c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d025      	beq.n	8001342 <HAL_GPIO_Init+0x226>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a1c      	ldr	r2, [pc, #112]	; (800136c <HAL_GPIO_Init+0x250>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d01f      	beq.n	800133e <HAL_GPIO_Init+0x222>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a1b      	ldr	r2, [pc, #108]	; (8001370 <HAL_GPIO_Init+0x254>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d019      	beq.n	800133a <HAL_GPIO_Init+0x21e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a1a      	ldr	r2, [pc, #104]	; (8001374 <HAL_GPIO_Init+0x258>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_GPIO_Init+0x21a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a19      	ldr	r2, [pc, #100]	; (8001378 <HAL_GPIO_Init+0x25c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00d      	beq.n	8001332 <HAL_GPIO_Init+0x216>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a18      	ldr	r2, [pc, #96]	; (800137c <HAL_GPIO_Init+0x260>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d007      	beq.n	800132e <HAL_GPIO_Init+0x212>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a17      	ldr	r2, [pc, #92]	; (8001380 <HAL_GPIO_Init+0x264>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_GPIO_Init+0x20e>
 8001326:	2309      	movs	r3, #9
 8001328:	e02d      	b.n	8001386 <HAL_GPIO_Init+0x26a>
 800132a:	230a      	movs	r3, #10
 800132c:	e02b      	b.n	8001386 <HAL_GPIO_Init+0x26a>
 800132e:	2308      	movs	r3, #8
 8001330:	e029      	b.n	8001386 <HAL_GPIO_Init+0x26a>
 8001332:	2307      	movs	r3, #7
 8001334:	e027      	b.n	8001386 <HAL_GPIO_Init+0x26a>
 8001336:	2306      	movs	r3, #6
 8001338:	e025      	b.n	8001386 <HAL_GPIO_Init+0x26a>
 800133a:	2305      	movs	r3, #5
 800133c:	e023      	b.n	8001386 <HAL_GPIO_Init+0x26a>
 800133e:	2304      	movs	r3, #4
 8001340:	e021      	b.n	8001386 <HAL_GPIO_Init+0x26a>
 8001342:	2303      	movs	r3, #3
 8001344:	e01f      	b.n	8001386 <HAL_GPIO_Init+0x26a>
 8001346:	2302      	movs	r3, #2
 8001348:	e01d      	b.n	8001386 <HAL_GPIO_Init+0x26a>
 800134a:	2301      	movs	r3, #1
 800134c:	e01b      	b.n	8001386 <HAL_GPIO_Init+0x26a>
 800134e:	bf00      	nop
 8001350:	58000080 	.word	0x58000080
 8001354:	58024400 	.word	0x58024400
 8001358:	58000400 	.word	0x58000400
 800135c:	58020000 	.word	0x58020000
 8001360:	58020400 	.word	0x58020400
 8001364:	58020800 	.word	0x58020800
 8001368:	58020c00 	.word	0x58020c00
 800136c:	58021000 	.word	0x58021000
 8001370:	58021400 	.word	0x58021400
 8001374:	58021800 	.word	0x58021800
 8001378:	58021c00 	.word	0x58021c00
 800137c:	58022000 	.word	0x58022000
 8001380:	58022400 	.word	0x58022400
 8001384:	2300      	movs	r3, #0
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	f002 0203 	and.w	r2, r2, #3
 800138c:	0092      	lsls	r2, r2, #2
 800138e:	4093      	lsls	r3, r2
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001396:	4938      	ldr	r1, [pc, #224]	; (8001478 <HAL_GPIO_Init+0x35c>)
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3302      	adds	r3, #2
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80013ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80013f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	3301      	adds	r3, #1
 8001458:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fa22 f303 	lsr.w	r3, r2, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	f47f ae63 	bne.w	8001130 <HAL_GPIO_Init+0x14>
  }
}
 800146a:	bf00      	nop
 800146c:	bf00      	nop
 800146e:	3724      	adds	r7, #36	; 0x24
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	58000400 	.word	0x58000400

0800147c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
 8001488:	4613      	mov	r3, r2
 800148a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800148c:	787b      	ldrb	r3, [r7, #1]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001498:	e003      	b.n	80014a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	041a      	lsls	r2, r3, #16
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	619a      	str	r2, [r3, #24]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80014b8:	4b29      	ldr	r3, [pc, #164]	; (8001560 <HAL_PWREx_ConfigSupply+0xb0>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	2b06      	cmp	r3, #6
 80014c2:	d00a      	beq.n	80014da <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <HAL_PWREx_ConfigSupply+0xb0>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d001      	beq.n	80014d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e040      	b.n	8001558 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e03e      	b.n	8001558 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <HAL_PWREx_ConfigSupply+0xb0>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80014e2:	491f      	ldr	r1, [pc, #124]	; (8001560 <HAL_PWREx_ConfigSupply+0xb0>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80014ea:	f7ff fd2b 	bl	8000f44 <HAL_GetTick>
 80014ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014f0:	e009      	b.n	8001506 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014f2:	f7ff fd27 	bl	8000f44 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001500:	d901      	bls.n	8001506 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e028      	b.n	8001558 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <HAL_PWREx_ConfigSupply+0xb0>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800150e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001512:	d1ee      	bne.n	80014f2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b1e      	cmp	r3, #30
 8001518:	d008      	beq.n	800152c <HAL_PWREx_ConfigSupply+0x7c>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b2e      	cmp	r3, #46	; 0x2e
 800151e:	d005      	beq.n	800152c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b1d      	cmp	r3, #29
 8001524:	d002      	beq.n	800152c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b2d      	cmp	r3, #45	; 0x2d
 800152a:	d114      	bne.n	8001556 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800152c:	f7ff fd0a 	bl	8000f44 <HAL_GetTick>
 8001530:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001532:	e009      	b.n	8001548 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001534:	f7ff fd06 	bl	8000f44 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001542:	d901      	bls.n	8001548 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e007      	b.n	8001558 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_PWREx_ConfigSupply+0xb0>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001554:	d1ee      	bne.n	8001534 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	58024800 	.word	0x58024800

08001564 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08c      	sub	sp, #48	; 0x30
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e3f3      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 80b3 	beq.w	80016ea <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001584:	4b9e      	ldr	r3, [pc, #632]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800158e:	4b9c      	ldr	r3, [pc, #624]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001596:	2b10      	cmp	r3, #16
 8001598:	d007      	beq.n	80015aa <HAL_RCC_OscConfig+0x46>
 800159a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159c:	2b18      	cmp	r3, #24
 800159e:	d112      	bne.n	80015c6 <HAL_RCC_OscConfig+0x62>
 80015a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d10d      	bne.n	80015c6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015aa:	4b95      	ldr	r3, [pc, #596]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8098 	beq.w	80016e8 <HAL_RCC_OscConfig+0x184>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f040 8093 	bne.w	80016e8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e3cb      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ce:	d106      	bne.n	80015de <HAL_RCC_OscConfig+0x7a>
 80015d0:	4b8b      	ldr	r3, [pc, #556]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a8a      	ldr	r2, [pc, #552]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 80015d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	e058      	b.n	8001690 <HAL_RCC_OscConfig+0x12c>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d112      	bne.n	800160c <HAL_RCC_OscConfig+0xa8>
 80015e6:	4b86      	ldr	r3, [pc, #536]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a85      	ldr	r2, [pc, #532]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 80015ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b83      	ldr	r3, [pc, #524]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a82      	ldr	r2, [pc, #520]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 80015f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b80      	ldr	r3, [pc, #512]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a7f      	ldr	r2, [pc, #508]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001604:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	e041      	b.n	8001690 <HAL_RCC_OscConfig+0x12c>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001614:	d112      	bne.n	800163c <HAL_RCC_OscConfig+0xd8>
 8001616:	4b7a      	ldr	r3, [pc, #488]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a79      	ldr	r2, [pc, #484]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 800161c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4b77      	ldr	r3, [pc, #476]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a76      	ldr	r2, [pc, #472]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001628:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	4b74      	ldr	r3, [pc, #464]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a73      	ldr	r2, [pc, #460]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e029      	b.n	8001690 <HAL_RCC_OscConfig+0x12c>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001644:	d112      	bne.n	800166c <HAL_RCC_OscConfig+0x108>
 8001646:	4b6e      	ldr	r3, [pc, #440]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a6d      	ldr	r2, [pc, #436]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 800164c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b6b      	ldr	r3, [pc, #428]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a6a      	ldr	r2, [pc, #424]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b68      	ldr	r3, [pc, #416]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a67      	ldr	r2, [pc, #412]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e011      	b.n	8001690 <HAL_RCC_OscConfig+0x12c>
 800166c:	4b64      	ldr	r3, [pc, #400]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a63      	ldr	r2, [pc, #396]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b61      	ldr	r3, [pc, #388]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a60      	ldr	r2, [pc, #384]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 800167e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b5e      	ldr	r3, [pc, #376]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a5d      	ldr	r2, [pc, #372]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 800168a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800168e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d013      	beq.n	80016c0 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff fc54 	bl	8000f44 <HAL_GetTick>
 800169c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fc50 	bl	8000f44 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e355      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016b2:	4b53      	ldr	r3, [pc, #332]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x13c>
 80016be:	e014      	b.n	80016ea <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fc40 	bl	8000f44 <HAL_GetTick>
 80016c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fc3c 	bl	8000f44 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e341      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016da:	4b49      	ldr	r3, [pc, #292]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x164>
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 808c 	beq.w	8001810 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016f8:	4b41      	ldr	r3, [pc, #260]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001700:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001702:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d007      	beq.n	800171e <HAL_RCC_OscConfig+0x1ba>
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	2b18      	cmp	r3, #24
 8001712:	d137      	bne.n	8001784 <HAL_RCC_OscConfig+0x220>
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d132      	bne.n	8001784 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800171e:	4b38      	ldr	r3, [pc, #224]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	2b00      	cmp	r3, #0
 8001728:	d005      	beq.n	8001736 <HAL_RCC_OscConfig+0x1d2>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e313      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001736:	4b32      	ldr	r3, [pc, #200]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 0219 	bic.w	r2, r3, #25
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	492f      	ldr	r1, [pc, #188]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001744:	4313      	orrs	r3, r2
 8001746:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001748:	f7ff fbfc 	bl	8000f44 <HAL_GetTick>
 800174c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001750:	f7ff fbf8 	bl	8000f44 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e2fd      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001762:	4b27      	ldr	r3, [pc, #156]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	4b24      	ldr	r3, [pc, #144]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	061b      	lsls	r3, r3, #24
 800177c:	4920      	ldr	r1, [pc, #128]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001782:	e045      	b.n	8001810 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d026      	beq.n	80017da <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f023 0219 	bic.w	r2, r3, #25
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4919      	ldr	r1, [pc, #100]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff fbd1 	bl	8000f44 <HAL_GetTick>
 80017a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a6:	f7ff fbcd 	bl	8000f44 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e2d2      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	061b      	lsls	r3, r3, #24
 80017d2:	490b      	ldr	r1, [pc, #44]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
 80017d8:	e01a      	b.n	8001810 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a08      	ldr	r2, [pc, #32]	; (8001800 <HAL_RCC_OscConfig+0x29c>)
 80017e0:	f023 0301 	bic.w	r3, r3, #1
 80017e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e6:	f7ff fbad 	bl	8000f44 <HAL_GetTick>
 80017ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ee:	f7ff fba9 	bl	8000f44 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d903      	bls.n	8001804 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e2ae      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
 8001800:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001804:	4b99      	ldr	r3, [pc, #612]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ee      	bne.n	80017ee <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0310 	and.w	r3, r3, #16
 8001818:	2b00      	cmp	r3, #0
 800181a:	d06a      	beq.n	80018f2 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800181c:	4b93      	ldr	r3, [pc, #588]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001824:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001826:	4b91      	ldr	r3, [pc, #580]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2b08      	cmp	r3, #8
 8001830:	d007      	beq.n	8001842 <HAL_RCC_OscConfig+0x2de>
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	2b18      	cmp	r3, #24
 8001836:	d11b      	bne.n	8001870 <HAL_RCC_OscConfig+0x30c>
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b01      	cmp	r3, #1
 8001840:	d116      	bne.n	8001870 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001842:	4b8a      	ldr	r3, [pc, #552]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <HAL_RCC_OscConfig+0x2f6>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	2b80      	cmp	r3, #128	; 0x80
 8001854:	d001      	beq.n	800185a <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e281      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800185a:	4b84      	ldr	r3, [pc, #528]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	061b      	lsls	r3, r3, #24
 8001868:	4980      	ldr	r1, [pc, #512]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 800186a:	4313      	orrs	r3, r2
 800186c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800186e:	e040      	b.n	80018f2 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d023      	beq.n	80018c0 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001878:	4b7c      	ldr	r3, [pc, #496]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a7b      	ldr	r2, [pc, #492]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 800187e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff fb5e 	bl	8000f44 <HAL_GetTick>
 8001888:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800188c:	f7ff fb5a 	bl	8000f44 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e25f      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800189e:	4b73      	ldr	r3, [pc, #460]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018aa:	4b70      	ldr	r3, [pc, #448]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	061b      	lsls	r3, r3, #24
 80018b8:	496c      	ldr	r1, [pc, #432]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	60cb      	str	r3, [r1, #12]
 80018be:	e018      	b.n	80018f2 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018c0:	4b6a      	ldr	r3, [pc, #424]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a69      	ldr	r2, [pc, #420]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 80018c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff fb3a 	bl	8000f44 <HAL_GetTick>
 80018d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80018d4:	f7ff fb36 	bl	8000f44 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e23b      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018e6:	4b61      	ldr	r3, [pc, #388]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d036      	beq.n	800196c <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d019      	beq.n	800193a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001906:	4b59      	ldr	r3, [pc, #356]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 8001908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800190a:	4a58      	ldr	r2, [pc, #352]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001912:	f7ff fb17 	bl	8000f44 <HAL_GetTick>
 8001916:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800191a:	f7ff fb13 	bl	8000f44 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e218      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800192c:	4b4f      	ldr	r3, [pc, #316]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 800192e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x3b6>
 8001938:	e018      	b.n	800196c <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193a:	4b4c      	ldr	r3, [pc, #304]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 800193c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800193e:	4a4b      	ldr	r2, [pc, #300]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7ff fafd 	bl	8000f44 <HAL_GetTick>
 800194a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800194e:	f7ff faf9 	bl	8000f44 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e1fe      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001960:	4b42      	ldr	r3, [pc, #264]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 8001962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f0      	bne.n	800194e <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	2b00      	cmp	r3, #0
 8001976:	d036      	beq.n	80019e6 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d019      	beq.n	80019b4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001980:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a39      	ldr	r2, [pc, #228]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 8001986:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800198a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800198c:	f7ff fada 	bl	8000f44 <HAL_GetTick>
 8001990:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001994:	f7ff fad6 	bl	8000f44 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e1db      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019a6:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x430>
 80019b2:	e018      	b.n	80019e6 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019b4:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a2c      	ldr	r2, [pc, #176]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 80019ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019c0:	f7ff fac0 	bl	8000f44 <HAL_GetTick>
 80019c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80019c8:	f7ff fabc 	bl	8000f44 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e1c1      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019da:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 80af 	beq.w	8001b52 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80019f4:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 80019fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a00:	f7ff faa0 	bl	8000f44 <HAL_GetTick>
 8001a04:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a08:	f7ff fa9c 	bl	8000f44 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	; 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e1a1      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d106      	bne.n	8001a3c <HAL_RCC_OscConfig+0x4d8>
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 8001a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a32:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3a:	e05b      	b.n	8001af4 <HAL_RCC_OscConfig+0x590>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d117      	bne.n	8001a74 <HAL_RCC_OscConfig+0x510>
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a48:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 8001a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	4a02      	ldr	r2, [pc, #8]	; (8001a6c <HAL_RCC_OscConfig+0x508>)
 8001a62:	f023 0304 	bic.w	r3, r3, #4
 8001a66:	6713      	str	r3, [r2, #112]	; 0x70
 8001a68:	e044      	b.n	8001af4 <HAL_RCC_OscConfig+0x590>
 8001a6a:	bf00      	nop
 8001a6c:	58024400 	.word	0x58024400
 8001a70:	58024800 	.word	0x58024800
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	d112      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x53e>
 8001a7c:	4b95      	ldr	r3, [pc, #596]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a80:	4a94      	ldr	r2, [pc, #592]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	6713      	str	r3, [r2, #112]	; 0x70
 8001a88:	4b92      	ldr	r3, [pc, #584]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8c:	4a91      	ldr	r2, [pc, #580]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a92:	6713      	str	r3, [r2, #112]	; 0x70
 8001a94:	4b8f      	ldr	r3, [pc, #572]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a98:	4a8e      	ldr	r2, [pc, #568]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa0:	e028      	b.n	8001af4 <HAL_RCC_OscConfig+0x590>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b85      	cmp	r3, #133	; 0x85
 8001aa8:	d112      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x56c>
 8001aaa:	4b8a      	ldr	r3, [pc, #552]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aae:	4a89      	ldr	r2, [pc, #548]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab6:	4b87      	ldr	r3, [pc, #540]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aba:	4a86      	ldr	r2, [pc, #536]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac2:	4b84      	ldr	r3, [pc, #528]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac6:	4a83      	ldr	r2, [pc, #524]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ace:	e011      	b.n	8001af4 <HAL_RCC_OscConfig+0x590>
 8001ad0:	4b80      	ldr	r3, [pc, #512]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad4:	4a7f      	ldr	r2, [pc, #508]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	6713      	str	r3, [r2, #112]	; 0x70
 8001adc:	4b7d      	ldr	r3, [pc, #500]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae0:	4a7c      	ldr	r2, [pc, #496]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001ae2:	f023 0304 	bic.w	r3, r3, #4
 8001ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae8:	4b7a      	ldr	r3, [pc, #488]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aec:	4a79      	ldr	r2, [pc, #484]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001af2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d015      	beq.n	8001b28 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afc:	f7ff fa22 	bl	8000f44 <HAL_GetTick>
 8001b00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b04:	f7ff fa1e 	bl	8000f44 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e121      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b1a:	4b6e      	ldr	r3, [pc, #440]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0ee      	beq.n	8001b04 <HAL_RCC_OscConfig+0x5a0>
 8001b26:	e014      	b.n	8001b52 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b28:	f7ff fa0c 	bl	8000f44 <HAL_GetTick>
 8001b2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b2e:	e00a      	b.n	8001b46 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b30:	f7ff fa08 	bl	8000f44 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e10b      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b46:	4b63      	ldr	r3, [pc, #396]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1ee      	bne.n	8001b30 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8100 	beq.w	8001d5c <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b5c:	4b5d      	ldr	r3, [pc, #372]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b64:	2b18      	cmp	r3, #24
 8001b66:	f000 80bb 	beq.w	8001ce0 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	f040 8095 	bne.w	8001c9e <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b74:	4b57      	ldr	r3, [pc, #348]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a56      	ldr	r2, [pc, #344]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001b7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7ff f9e0 	bl	8000f44 <HAL_GetTick>
 8001b84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff f9dc 	bl	8000f44 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e0e1      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b9a:	4b4e      	ldr	r3, [pc, #312]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba6:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001baa:	4b4b      	ldr	r3, [pc, #300]	; (8001cd8 <HAL_RCC_OscConfig+0x774>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	4946      	ldr	r1, [pc, #280]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	628b      	str	r3, [r1, #40]	; 0x28
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	025b      	lsls	r3, r3, #9
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	041b      	lsls	r3, r3, #16
 8001bde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be8:	3b01      	subs	r3, #1
 8001bea:	061b      	lsls	r3, r3, #24
 8001bec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001bf0:	4938      	ldr	r1, [pc, #224]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001bf6:	4b37      	ldr	r3, [pc, #220]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	4a36      	ldr	r2, [pc, #216]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c02:	4b34      	ldr	r3, [pc, #208]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c06:	4b35      	ldr	r3, [pc, #212]	; (8001cdc <HAL_RCC_OscConfig+0x778>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c0e:	00d2      	lsls	r2, r2, #3
 8001c10:	4930      	ldr	r1, [pc, #192]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c16:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	f023 020c 	bic.w	r2, r3, #12
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	492c      	ldr	r1, [pc, #176]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c28:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	f023 0202 	bic.w	r2, r3, #2
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	4927      	ldr	r1, [pc, #156]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	4a25      	ldr	r2, [pc, #148]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c46:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4a:	4a22      	ldr	r2, [pc, #136]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c56:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a19      	ldr	r2, [pc, #100]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001c70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c76:	f7ff f965 	bl	8000f44 <HAL_GetTick>
 8001c7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff f961 	bl	8000f44 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e066      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c90:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x71a>
 8001c9c:	e05e      	b.n	8001d5c <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a0c      	ldr	r2, [pc, #48]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001ca4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001caa:	f7ff f94b 	bl	8000f44 <HAL_GetTick>
 8001cae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb2:	f7ff f947 	bl	8000f44 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e04c      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_RCC_OscConfig+0x770>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1f0      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x74e>
 8001cd0:	e044      	b.n	8001d5c <HAL_RCC_OscConfig+0x7f8>
 8001cd2:	bf00      	nop
 8001cd4:	58024400 	.word	0x58024400
 8001cd8:	fffffc0c 	.word	0xfffffc0c
 8001cdc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ce0:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <HAL_RCC_OscConfig+0x804>)
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ce6:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <HAL_RCC_OscConfig+0x804>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d031      	beq.n	8001d58 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	f003 0203 	and.w	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d12a      	bne.n	8001d58 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d122      	bne.n	8001d58 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d11a      	bne.n	8001d58 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	0a5b      	lsrs	r3, r3, #9
 8001d26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d111      	bne.n	8001d58 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	0c1b      	lsrs	r3, r3, #16
 8001d38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d40:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d108      	bne.n	8001d58 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	0e1b      	lsrs	r3, r3, #24
 8001d4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d52:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3730      	adds	r7, #48	; 0x30
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	58024400 	.word	0x58024400

08001d6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e19c      	b.n	80020ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b8a      	ldr	r3, [pc, #552]	; (8001fac <HAL_RCC_ClockConfig+0x240>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d910      	bls.n	8001db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b87      	ldr	r3, [pc, #540]	; (8001fac <HAL_RCC_ClockConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 020f 	bic.w	r2, r3, #15
 8001d96:	4985      	ldr	r1, [pc, #532]	; (8001fac <HAL_RCC_ClockConfig+0x240>)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	4b83      	ldr	r3, [pc, #524]	; (8001fac <HAL_RCC_ClockConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e184      	b.n	80020ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d010      	beq.n	8001dde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	4b7b      	ldr	r3, [pc, #492]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d908      	bls.n	8001dde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001dcc:	4b78      	ldr	r3, [pc, #480]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	4975      	ldr	r1, [pc, #468]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d010      	beq.n	8001e0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	4b70      	ldr	r3, [pc, #448]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d908      	bls.n	8001e0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001dfa:	4b6d      	ldr	r3, [pc, #436]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	496a      	ldr	r1, [pc, #424]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d010      	beq.n	8001e3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699a      	ldr	r2, [r3, #24]
 8001e1c:	4b64      	ldr	r3, [pc, #400]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d908      	bls.n	8001e3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e28:	4b61      	ldr	r3, [pc, #388]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	495e      	ldr	r1, [pc, #376]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d010      	beq.n	8001e68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	4b59      	ldr	r3, [pc, #356]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d908      	bls.n	8001e68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e56:	4b56      	ldr	r3, [pc, #344]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	4953      	ldr	r1, [pc, #332]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d010      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	4b4d      	ldr	r3, [pc, #308]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d908      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e84:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f023 020f 	bic.w	r2, r3, #15
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4947      	ldr	r1, [pc, #284]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d055      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ea2:	4b43      	ldr	r3, [pc, #268]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	4940      	ldr	r1, [pc, #256]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d107      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ebc:	4b3c      	ldr	r3, [pc, #240]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d121      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0f6      	b.n	80020ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ed4:	4b36      	ldr	r3, [pc, #216]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d115      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0ea      	b.n	80020ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001eec:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0de      	b.n	80020ba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001efc:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0d6      	b.n	80020ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f0c:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	f023 0207 	bic.w	r2, r3, #7
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4925      	ldr	r1, [pc, #148]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1e:	f7ff f811 	bl	8000f44 <HAL_GetTick>
 8001f22:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f26:	f7ff f80d 	bl	8000f44 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e0be      	b.n	80020ba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d1eb      	bne.n	8001f26 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d010      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d208      	bcs.n	8001f7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	f023 020f 	bic.w	r2, r3, #15
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	490e      	ldr	r1, [pc, #56]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_RCC_ClockConfig+0x240>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d214      	bcs.n	8001fb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_RCC_ClockConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 020f 	bic.w	r2, r3, #15
 8001f92:	4906      	ldr	r1, [pc, #24]	; (8001fac <HAL_RCC_ClockConfig+0x240>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <HAL_RCC_ClockConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e086      	b.n	80020ba <HAL_RCC_ClockConfig+0x34e>
 8001fac:	52002000 	.word	0x52002000
 8001fb0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d010      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	4b3f      	ldr	r3, [pc, #252]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d208      	bcs.n	8001fe2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fd0:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	4939      	ldr	r1, [pc, #228]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d010      	beq.n	8002010 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d208      	bcs.n	8002010 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ffe:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	492e      	ldr	r1, [pc, #184]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 800200c:	4313      	orrs	r3, r2
 800200e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	d010      	beq.n	800203e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699a      	ldr	r2, [r3, #24]
 8002020:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002028:	429a      	cmp	r2, r3
 800202a:	d208      	bcs.n	800203e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800202c:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4922      	ldr	r1, [pc, #136]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 800203a:	4313      	orrs	r3, r2
 800203c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b00      	cmp	r3, #0
 8002048:	d010      	beq.n	800206c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69da      	ldr	r2, [r3, #28]
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002056:	429a      	cmp	r2, r3
 8002058:	d208      	bcs.n	800206c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	4917      	ldr	r1, [pc, #92]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 8002068:	4313      	orrs	r3, r2
 800206a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800206c:	f000 f834 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002070:	4602      	mov	r2, r0
 8002072:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	0a1b      	lsrs	r3, r3, #8
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	4912      	ldr	r1, [pc, #72]	; (80020c8 <HAL_RCC_ClockConfig+0x35c>)
 800207e:	5ccb      	ldrb	r3, [r1, r3]
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
 8002088:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	4a0d      	ldr	r2, [pc, #52]	; (80020c8 <HAL_RCC_ClockConfig+0x35c>)
 8002094:	5cd3      	ldrb	r3, [r2, r3]
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
 80020a0:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <HAL_RCC_ClockConfig+0x360>)
 80020a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020a4:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <HAL_RCC_ClockConfig+0x364>)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80020aa:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <HAL_RCC_ClockConfig+0x368>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fd10 	bl	8000ad4 <HAL_InitTick>
 80020b4:	4603      	mov	r3, r0
 80020b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	58024400 	.word	0x58024400
 80020c8:	080086d0 	.word	0x080086d0
 80020cc:	24000004 	.word	0x24000004
 80020d0:	24000000 	.word	0x24000000
 80020d4:	24000008 	.word	0x24000008

080020d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020de:	4bb3      	ldr	r3, [pc, #716]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020e6:	2b18      	cmp	r3, #24
 80020e8:	f200 8155 	bhi.w	8002396 <HAL_RCC_GetSysClockFreq+0x2be>
 80020ec:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80020ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f2:	bf00      	nop
 80020f4:	08002159 	.word	0x08002159
 80020f8:	08002397 	.word	0x08002397
 80020fc:	08002397 	.word	0x08002397
 8002100:	08002397 	.word	0x08002397
 8002104:	08002397 	.word	0x08002397
 8002108:	08002397 	.word	0x08002397
 800210c:	08002397 	.word	0x08002397
 8002110:	08002397 	.word	0x08002397
 8002114:	0800217f 	.word	0x0800217f
 8002118:	08002397 	.word	0x08002397
 800211c:	08002397 	.word	0x08002397
 8002120:	08002397 	.word	0x08002397
 8002124:	08002397 	.word	0x08002397
 8002128:	08002397 	.word	0x08002397
 800212c:	08002397 	.word	0x08002397
 8002130:	08002397 	.word	0x08002397
 8002134:	08002185 	.word	0x08002185
 8002138:	08002397 	.word	0x08002397
 800213c:	08002397 	.word	0x08002397
 8002140:	08002397 	.word	0x08002397
 8002144:	08002397 	.word	0x08002397
 8002148:	08002397 	.word	0x08002397
 800214c:	08002397 	.word	0x08002397
 8002150:	08002397 	.word	0x08002397
 8002154:	0800218b 	.word	0x0800218b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002158:	4b94      	ldr	r3, [pc, #592]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0320 	and.w	r3, r3, #32
 8002160:	2b00      	cmp	r3, #0
 8002162:	d009      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002164:	4b91      	ldr	r3, [pc, #580]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	08db      	lsrs	r3, r3, #3
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	4a90      	ldr	r2, [pc, #576]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
 8002174:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002176:	e111      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002178:	4b8d      	ldr	r3, [pc, #564]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800217a:	61bb      	str	r3, [r7, #24]
    break;
 800217c:	e10e      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800217e:	4b8d      	ldr	r3, [pc, #564]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002180:	61bb      	str	r3, [r7, #24]
    break;
 8002182:	e10b      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002184:	4b8c      	ldr	r3, [pc, #560]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002186:	61bb      	str	r3, [r7, #24]
    break;
 8002188:	e108      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800218a:	4b88      	ldr	r3, [pc, #544]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002194:	4b85      	ldr	r3, [pc, #532]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800219e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021a0:	4b82      	ldr	r3, [pc, #520]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80021aa:	4b80      	ldr	r3, [pc, #512]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ae:	08db      	lsrs	r3, r3, #3
 80021b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	fb02 f303 	mul.w	r3, r2, r3
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80e1 	beq.w	8002390 <HAL_RCC_GetSysClockFreq+0x2b8>
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	f000 8083 	beq.w	80022dc <HAL_RCC_GetSysClockFreq+0x204>
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	f200 80a1 	bhi.w	8002320 <HAL_RCC_GetSysClockFreq+0x248>
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0x114>
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d056      	beq.n	8002298 <HAL_RCC_GetSysClockFreq+0x1c0>
 80021ea:	e099      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021ec:	4b6f      	ldr	r3, [pc, #444]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d02d      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80021f8:	4b6c      	ldr	r3, [pc, #432]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	08db      	lsrs	r3, r3, #3
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	4a6b      	ldr	r2, [pc, #428]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
 8002208:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	ee07 3a90 	vmov	s15, r3
 8002210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	ee07 3a90 	vmov	s15, r3
 800221a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800221e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002222:	4b62      	ldr	r3, [pc, #392]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002232:	ed97 6a02 	vldr	s12, [r7, #8]
 8002236:	eddf 5a61 	vldr	s11, [pc, #388]	; 80023bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800223a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800223e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800224a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002252:	e087      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800225e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80023c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002266:	4b51      	ldr	r3, [pc, #324]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800226e:	ee07 3a90 	vmov	s15, r3
 8002272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002276:	ed97 6a02 	vldr	s12, [r7, #8]
 800227a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80023bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800227e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800228a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800228e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002296:	e065      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80023c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80022a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022aa:	4b40      	ldr	r3, [pc, #256]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022b2:	ee07 3a90 	vmov	s15, r3
 80022b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80022be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80023bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80022c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022da:	e043      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80023c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80022ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ee:	4b2f      	ldr	r3, [pc, #188]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f6:	ee07 3a90 	vmov	s15, r3
 80022fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002302:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80023bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800230a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800230e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800231e:	e021      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800232a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80023c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800232e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002332:	4b1e      	ldr	r3, [pc, #120]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800233a:	ee07 3a90 	vmov	s15, r3
 800233e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002342:	ed97 6a02 	vldr	s12, [r7, #8]
 8002346:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80023bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800234a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800234e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800235a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002362:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	0a5b      	lsrs	r3, r3, #9
 800236a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800236e:	3301      	adds	r3, #1
 8002370:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800237c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002388:	ee17 3a90 	vmov	r3, s15
 800238c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800238e:	e005      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	61bb      	str	r3, [r7, #24]
    break;
 8002394:	e002      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002398:	61bb      	str	r3, [r7, #24]
    break;
 800239a:	bf00      	nop
  }

  return sysclockfreq;
 800239c:	69bb      	ldr	r3, [r7, #24]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	58024400 	.word	0x58024400
 80023b0:	03d09000 	.word	0x03d09000
 80023b4:	003d0900 	.word	0x003d0900
 80023b8:	007a1200 	.word	0x007a1200
 80023bc:	46000000 	.word	0x46000000
 80023c0:	4c742400 	.word	0x4c742400
 80023c4:	4a742400 	.word	0x4a742400
 80023c8:	4af42400 	.word	0x4af42400

080023cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80023d2:	f7ff fe81 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 80023d6:	4602      	mov	r2, r0
 80023d8:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_RCC_GetHCLKFreq+0x50>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	490f      	ldr	r1, [pc, #60]	; (8002420 <HAL_RCC_GetHCLKFreq+0x54>)
 80023e4:	5ccb      	ldrb	r3, [r1, r3]
 80023e6:	f003 031f 	and.w	r3, r3, #31
 80023ea:	fa22 f303 	lsr.w	r3, r2, r3
 80023ee:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <HAL_RCC_GetHCLKFreq+0x50>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	4a09      	ldr	r2, [pc, #36]	; (8002420 <HAL_RCC_GetHCLKFreq+0x54>)
 80023fa:	5cd3      	ldrb	r3, [r2, r3]
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	fa22 f303 	lsr.w	r3, r2, r3
 8002406:	4a07      	ldr	r2, [pc, #28]	; (8002424 <HAL_RCC_GetHCLKFreq+0x58>)
 8002408:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800240a:	4a07      	ldr	r2, [pc, #28]	; (8002428 <HAL_RCC_GetHCLKFreq+0x5c>)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <HAL_RCC_GetHCLKFreq+0x58>)
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	58024400 	.word	0x58024400
 8002420:	080086d0 	.word	0x080086d0
 8002424:	24000004 	.word	0x24000004
 8002428:	24000000 	.word	0x24000000

0800242c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002430:	f7ff ffcc 	bl	80023cc <HAL_RCC_GetHCLKFreq>
 8002434:	4602      	mov	r2, r0
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	4904      	ldr	r1, [pc, #16]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002442:	5ccb      	ldrb	r3, [r1, r3]
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800244c:	4618      	mov	r0, r3
 800244e:	bd80      	pop	{r7, pc}
 8002450:	58024400 	.word	0x58024400
 8002454:	080086d0 	.word	0x080086d0

08002458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800245c:	f7ff ffb6 	bl	80023cc <HAL_RCC_GetHCLKFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	0a1b      	lsrs	r3, r3, #8
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4904      	ldr	r1, [pc, #16]	; (8002480 <HAL_RCC_GetPCLK2Freq+0x28>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	58024400 	.word	0x58024400
 8002480:	080086d0 	.word	0x080086d0

08002484 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	223f      	movs	r2, #63	; 0x3f
 8002492:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002494:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <HAL_RCC_GetClockConfig+0x7c>)
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f003 0207 	and.w	r2, r3, #7
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80024a0:	4b17      	ldr	r3, [pc, #92]	; (8002500 <HAL_RCC_GetClockConfig+0x7c>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <HAL_RCC_GetClockConfig+0x7c>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 020f 	and.w	r2, r3, #15
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_RCC_GetClockConfig+0x7c>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80024c4:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <HAL_RCC_GetClockConfig+0x7c>)
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_GetClockConfig+0x7c>)
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_RCC_GetClockConfig+0x7c>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_RCC_GetClockConfig+0x80>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 020f 	and.w	r2, r3, #15
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	601a      	str	r2, [r3, #0]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	58024400 	.word	0x58024400
 8002504:	52002000 	.word	0x52002000

08002508 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002510:	2300      	movs	r3, #0
 8002512:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002514:	2300      	movs	r3, #0
 8002516:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d03f      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002528:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800252c:	d02a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800252e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002532:	d824      	bhi.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002534:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002538:	d018      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800253a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800253e:	d81e      	bhi.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002548:	d007      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800254a:	e018      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800254c:	4ba6      	ldr	r3, [pc, #664]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	4aa5      	ldr	r2, [pc, #660]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002556:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002558:	e015      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3304      	adds	r3, #4
 800255e:	2102      	movs	r1, #2
 8002560:	4618      	mov	r0, r3
 8002562:	f001 f99b 	bl	800389c <RCCEx_PLL2_Config>
 8002566:	4603      	mov	r3, r0
 8002568:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800256a:	e00c      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3324      	adds	r3, #36	; 0x24
 8002570:	2102      	movs	r1, #2
 8002572:	4618      	mov	r0, r3
 8002574:	f001 fa44 	bl	8003a00 <RCCEx_PLL3_Config>
 8002578:	4603      	mov	r3, r0
 800257a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800257c:	e003      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	75fb      	strb	r3, [r7, #23]
      break;
 8002582:	e000      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002586:	7dfb      	ldrb	r3, [r7, #23]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800258c:	4b96      	ldr	r3, [pc, #600]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800258e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002590:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002598:	4993      	ldr	r1, [pc, #588]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800259a:	4313      	orrs	r3, r2
 800259c:	650b      	str	r3, [r1, #80]	; 0x50
 800259e:	e001      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d03d      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d826      	bhi.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80025b8:	a201      	add	r2, pc, #4	; (adr r2, 80025c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80025ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025be:	bf00      	nop
 80025c0:	080025d5 	.word	0x080025d5
 80025c4:	080025e3 	.word	0x080025e3
 80025c8:	080025f5 	.word	0x080025f5
 80025cc:	0800260d 	.word	0x0800260d
 80025d0:	0800260d 	.word	0x0800260d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025d4:	4b84      	ldr	r3, [pc, #528]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	4a83      	ldr	r2, [pc, #524]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80025da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025e0:	e015      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3304      	adds	r3, #4
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f001 f957 	bl	800389c <RCCEx_PLL2_Config>
 80025ee:	4603      	mov	r3, r0
 80025f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025f2:	e00c      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3324      	adds	r3, #36	; 0x24
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f001 fa00 	bl	8003a00 <RCCEx_PLL3_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002604:	e003      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	75fb      	strb	r3, [r7, #23]
      break;
 800260a:	e000      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800260c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800260e:	7dfb      	ldrb	r3, [r7, #23]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d109      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002614:	4b74      	ldr	r3, [pc, #464]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002618:	f023 0207 	bic.w	r2, r3, #7
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002620:	4971      	ldr	r1, [pc, #452]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002622:	4313      	orrs	r3, r2
 8002624:	650b      	str	r3, [r1, #80]	; 0x50
 8002626:	e001      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002628:	7dfb      	ldrb	r3, [r7, #23]
 800262a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002634:	2b00      	cmp	r3, #0
 8002636:	d04a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002640:	d031      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8002642:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002646:	d82b      	bhi.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800264c:	d02d      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800264e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002652:	d825      	bhi.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002654:	2bc0      	cmp	r3, #192	; 0xc0
 8002656:	d02a      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002658:	2bc0      	cmp	r3, #192	; 0xc0
 800265a:	d821      	bhi.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800265c:	2b80      	cmp	r3, #128	; 0x80
 800265e:	d016      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002660:	2b80      	cmp	r3, #128	; 0x80
 8002662:	d81d      	bhi.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002668:	2b40      	cmp	r3, #64	; 0x40
 800266a:	d007      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x174>
 800266c:	e018      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800266e:	4b5e      	ldr	r3, [pc, #376]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	4a5d      	ldr	r2, [pc, #372]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002678:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800267a:	e019      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3304      	adds	r3, #4
 8002680:	2100      	movs	r1, #0
 8002682:	4618      	mov	r0, r3
 8002684:	f001 f90a 	bl	800389c <RCCEx_PLL2_Config>
 8002688:	4603      	mov	r3, r0
 800268a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800268c:	e010      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3324      	adds	r3, #36	; 0x24
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f001 f9b3 	bl	8003a00 <RCCEx_PLL3_Config>
 800269a:	4603      	mov	r3, r0
 800269c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800269e:	e007      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	75fb      	strb	r3, [r7, #23]
      break;
 80026a4:	e004      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80026a6:	bf00      	nop
 80026a8:	e002      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80026aa:	bf00      	nop
 80026ac:	e000      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80026ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80026b6:	4b4c      	ldr	r3, [pc, #304]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	4949      	ldr	r1, [pc, #292]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	650b      	str	r3, [r1, #80]	; 0x50
 80026c8:	e001      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
 80026cc:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d04f      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026de:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80026e2:	d036      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80026e4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80026e8:	d830      	bhi.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80026ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ee:	d032      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80026f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026f4:	d82a      	bhi.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80026f6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80026fa:	d02e      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x252>
 80026fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002700:	d824      	bhi.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002706:	d018      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270c:	d81e      	bhi.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002716:	d007      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8002718:	e018      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800271a:	4b33      	ldr	r3, [pc, #204]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	4a32      	ldr	r2, [pc, #200]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002724:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002726:	e019      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3304      	adds	r3, #4
 800272c:	2100      	movs	r1, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f001 f8b4 	bl	800389c <RCCEx_PLL2_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002738:	e010      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3324      	adds	r3, #36	; 0x24
 800273e:	2100      	movs	r1, #0
 8002740:	4618      	mov	r0, r3
 8002742:	f001 f95d 	bl	8003a00 <RCCEx_PLL3_Config>
 8002746:	4603      	mov	r3, r0
 8002748:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800274a:	e007      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	75fb      	strb	r3, [r7, #23]
      break;
 8002750:	e004      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002752:	bf00      	nop
 8002754:	e002      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002756:	bf00      	nop
 8002758:	e000      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800275a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800275c:	7dfb      	ldrb	r3, [r7, #23]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002762:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002766:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276e:	491e      	ldr	r1, [pc, #120]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002770:	4313      	orrs	r3, r2
 8002772:	650b      	str	r3, [r1, #80]	; 0x50
 8002774:	e001      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002776:	7dfb      	ldrb	r3, [r7, #23]
 8002778:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d034      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278a:	2b30      	cmp	r3, #48	; 0x30
 800278c:	d01c      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800278e:	2b30      	cmp	r3, #48	; 0x30
 8002790:	d817      	bhi.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002792:	2b20      	cmp	r3, #32
 8002794:	d00c      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002796:	2b20      	cmp	r3, #32
 8002798:	d813      	bhi.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800279a:	2b00      	cmp	r3, #0
 800279c:	d016      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800279e:	2b10      	cmp	r3, #16
 80027a0:	d10f      	bne.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	4a10      	ldr	r2, [pc, #64]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80027ae:	e00e      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3304      	adds	r3, #4
 80027b4:	2102      	movs	r1, #2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f001 f870 	bl	800389c <RCCEx_PLL2_Config>
 80027bc:	4603      	mov	r3, r0
 80027be:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80027c0:	e005      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	75fb      	strb	r3, [r7, #23]
      break;
 80027c6:	e002      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80027c8:	bf00      	nop
 80027ca:	e000      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80027cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10b      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e0:	4901      	ldr	r1, [pc, #4]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80027e6:	e003      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80027e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ec:	7dfb      	ldrb	r3, [r7, #23]
 80027ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d047      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002804:	d030      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800280a:	d82a      	bhi.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800280c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002810:	d02c      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8002812:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002816:	d824      	bhi.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800281c:	d018      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800281e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002822:	d81e      	bhi.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8002828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282c:	d007      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800282e:	e018      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002830:	4bb0      	ldr	r3, [pc, #704]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	4aaf      	ldr	r2, [pc, #700]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800283c:	e017      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f001 f829 	bl	800389c <RCCEx_PLL2_Config>
 800284a:	4603      	mov	r3, r0
 800284c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800284e:	e00e      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3324      	adds	r3, #36	; 0x24
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f001 f8d2 	bl	8003a00 <RCCEx_PLL3_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002860:	e005      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	75fb      	strb	r3, [r7, #23]
      break;
 8002866:	e002      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002868:	bf00      	nop
 800286a:	e000      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800286c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800286e:	7dfb      	ldrb	r3, [r7, #23]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d109      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002874:	4b9f      	ldr	r3, [pc, #636]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002878:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002880:	499c      	ldr	r1, [pc, #624]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002882:	4313      	orrs	r3, r2
 8002884:	650b      	str	r3, [r1, #80]	; 0x50
 8002886:	e001      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002888:	7dfb      	ldrb	r3, [r7, #23]
 800288a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d049      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800289c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a0:	d02e      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80028a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a6:	d828      	bhi.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80028a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028ac:	d02a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80028ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028b2:	d822      	bhi.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80028b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028b8:	d026      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80028ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028be:	d81c      	bhi.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80028c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028c4:	d010      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80028c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028ca:	d816      	bhi.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01d      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x404>
 80028d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d4:	d111      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3304      	adds	r3, #4
 80028da:	2101      	movs	r1, #1
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 ffdd 	bl	800389c <RCCEx_PLL2_Config>
 80028e2:	4603      	mov	r3, r0
 80028e4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80028e6:	e012      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3324      	adds	r3, #36	; 0x24
 80028ec:	2101      	movs	r1, #1
 80028ee:	4618      	mov	r0, r3
 80028f0:	f001 f886 	bl	8003a00 <RCCEx_PLL3_Config>
 80028f4:	4603      	mov	r3, r0
 80028f6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80028f8:	e009      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	75fb      	strb	r3, [r7, #23]
      break;
 80028fe:	e006      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002900:	bf00      	nop
 8002902:	e004      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002904:	bf00      	nop
 8002906:	e002      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002908:	bf00      	nop
 800290a:	e000      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800290c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800290e:	7dfb      	ldrb	r3, [r7, #23]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d109      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002914:	4b77      	ldr	r3, [pc, #476]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002918:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002920:	4974      	ldr	r1, [pc, #464]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002922:	4313      	orrs	r3, r2
 8002924:	650b      	str	r3, [r1, #80]	; 0x50
 8002926:	e001      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002928:	7dfb      	ldrb	r3, [r7, #23]
 800292a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d053      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800293e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002942:	d034      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002944:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002948:	d82e      	bhi.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800294a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800294e:	d030      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8002950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002954:	d828      	bhi.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295a:	d02c      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002960:	d822      	bhi.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002962:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002966:	d028      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002968:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800296c:	d81c      	bhi.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800296e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002972:	d010      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8002974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002978:	d816      	bhi.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800297a:	2b00      	cmp	r3, #0
 800297c:	d01f      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800297e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002982:	d111      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3304      	adds	r3, #4
 8002988:	2101      	movs	r1, #1
 800298a:	4618      	mov	r0, r3
 800298c:	f000 ff86 	bl	800389c <RCCEx_PLL2_Config>
 8002990:	4603      	mov	r3, r0
 8002992:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002994:	e014      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3324      	adds	r3, #36	; 0x24
 800299a:	2101      	movs	r1, #1
 800299c:	4618      	mov	r0, r3
 800299e:	f001 f82f 	bl	8003a00 <RCCEx_PLL3_Config>
 80029a2:	4603      	mov	r3, r0
 80029a4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80029a6:	e00b      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	75fb      	strb	r3, [r7, #23]
      break;
 80029ac:	e008      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80029ae:	bf00      	nop
 80029b0:	e006      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80029b2:	bf00      	nop
 80029b4:	e004      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80029b6:	bf00      	nop
 80029b8:	e002      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80029ba:	bf00      	nop
 80029bc:	e000      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80029be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10a      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80029c6:	4b4b      	ldr	r3, [pc, #300]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80029d4:	4947      	ldr	r1, [pc, #284]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	658b      	str	r3, [r1, #88]	; 0x58
 80029da:	e001      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029dc:	7dfb      	ldrb	r3, [r7, #23]
 80029de:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d02f      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029f4:	d00e      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80029f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029fa:	d814      	bhi.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d015      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002a00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a04:	d10f      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a06:	4b3b      	ldr	r3, [pc, #236]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	4a3a      	ldr	r2, [pc, #232]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002a12:	e00c      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	2101      	movs	r1, #1
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 ff3e 	bl	800389c <RCCEx_PLL2_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002a24:	e003      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	75fb      	strb	r3, [r7, #23]
      break;
 8002a2a:	e000      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a34:	4b2f      	ldr	r3, [pc, #188]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a40:	492c      	ldr	r1, [pc, #176]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	650b      	str	r3, [r1, #80]	; 0x50
 8002a46:	e001      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d032      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d81b      	bhi.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8002a60:	a201      	add	r2, pc, #4	; (adr r2, 8002a68 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a66:	bf00      	nop
 8002a68:	08002a9f 	.word	0x08002a9f
 8002a6c:	08002a79 	.word	0x08002a79
 8002a70:	08002a87 	.word	0x08002a87
 8002a74:	08002a9f 	.word	0x08002a9f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a78:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002a84:	e00c      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 ff05 	bl	800389c <RCCEx_PLL2_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002a96:	e003      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8002a9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d109      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002aa6:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aaa:	f023 0203 	bic.w	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	4910      	ldr	r1, [pc, #64]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002ab8:	e001      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aba:	7dfb      	ldrb	r3, [r7, #23]
 8002abc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 808a 	beq.w	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002acc:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a09      	ldr	r2, [pc, #36]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ad8:	f7fe fa34 	bl	8000f44 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ade:	e00d      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae0:	f7fe fa30 	bl	8000f44 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	; 0x64
 8002aec:	d906      	bls.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	75fb      	strb	r3, [r7, #23]
        break;
 8002af2:	e009      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002af4:	58024400 	.word	0x58024400
 8002af8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002afc:	4bba      	ldr	r3, [pc, #744]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0eb      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d166      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b0e:	4bb7      	ldr	r3, [pc, #732]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b18:	4053      	eors	r3, r2
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d013      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b22:	4bb2      	ldr	r3, [pc, #712]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b2a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b2c:	4baf      	ldr	r3, [pc, #700]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	4aae      	ldr	r2, [pc, #696]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b36:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b38:	4bac      	ldr	r3, [pc, #688]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	4aab      	ldr	r2, [pc, #684]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b42:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002b44:	4aa9      	ldr	r2, [pc, #676]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b54:	d115      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7fe f9f5 	bl	8000f44 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b5c:	e00b      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5e:	f7fe f9f1 	bl	8000f44 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d902      	bls.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	75fb      	strb	r3, [r7, #23]
            break;
 8002b74:	e005      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b76:	4b9d      	ldr	r3, [pc, #628]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0ed      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d126      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b96:	d10d      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8002b98:	4b94      	ldr	r3, [pc, #592]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ba6:	0919      	lsrs	r1, r3, #4
 8002ba8:	4b91      	ldr	r3, [pc, #580]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002baa:	400b      	ands	r3, r1
 8002bac:	498f      	ldr	r1, [pc, #572]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	610b      	str	r3, [r1, #16]
 8002bb2:	e005      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8002bb4:	4b8d      	ldr	r3, [pc, #564]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	4a8c      	ldr	r2, [pc, #560]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002bbe:	6113      	str	r3, [r2, #16]
 8002bc0:	4b8a      	ldr	r3, [pc, #552]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bce:	4987      	ldr	r1, [pc, #540]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	670b      	str	r3, [r1, #112]	; 0x70
 8002bd4:	e004      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bd6:	7dfb      	ldrb	r3, [r7, #23]
 8002bd8:	75bb      	strb	r3, [r7, #22]
 8002bda:	e001      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
 8002bde:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d07f      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf2:	2b28      	cmp	r3, #40	; 0x28
 8002bf4:	d866      	bhi.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8002bf6:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8002bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfc:	08002ccb 	.word	0x08002ccb
 8002c00:	08002cc5 	.word	0x08002cc5
 8002c04:	08002cc5 	.word	0x08002cc5
 8002c08:	08002cc5 	.word	0x08002cc5
 8002c0c:	08002cc5 	.word	0x08002cc5
 8002c10:	08002cc5 	.word	0x08002cc5
 8002c14:	08002cc5 	.word	0x08002cc5
 8002c18:	08002cc5 	.word	0x08002cc5
 8002c1c:	08002ca1 	.word	0x08002ca1
 8002c20:	08002cc5 	.word	0x08002cc5
 8002c24:	08002cc5 	.word	0x08002cc5
 8002c28:	08002cc5 	.word	0x08002cc5
 8002c2c:	08002cc5 	.word	0x08002cc5
 8002c30:	08002cc5 	.word	0x08002cc5
 8002c34:	08002cc5 	.word	0x08002cc5
 8002c38:	08002cc5 	.word	0x08002cc5
 8002c3c:	08002cb3 	.word	0x08002cb3
 8002c40:	08002cc5 	.word	0x08002cc5
 8002c44:	08002cc5 	.word	0x08002cc5
 8002c48:	08002cc5 	.word	0x08002cc5
 8002c4c:	08002cc5 	.word	0x08002cc5
 8002c50:	08002cc5 	.word	0x08002cc5
 8002c54:	08002cc5 	.word	0x08002cc5
 8002c58:	08002cc5 	.word	0x08002cc5
 8002c5c:	08002ccb 	.word	0x08002ccb
 8002c60:	08002cc5 	.word	0x08002cc5
 8002c64:	08002cc5 	.word	0x08002cc5
 8002c68:	08002cc5 	.word	0x08002cc5
 8002c6c:	08002cc5 	.word	0x08002cc5
 8002c70:	08002cc5 	.word	0x08002cc5
 8002c74:	08002cc5 	.word	0x08002cc5
 8002c78:	08002cc5 	.word	0x08002cc5
 8002c7c:	08002ccb 	.word	0x08002ccb
 8002c80:	08002cc5 	.word	0x08002cc5
 8002c84:	08002cc5 	.word	0x08002cc5
 8002c88:	08002cc5 	.word	0x08002cc5
 8002c8c:	08002cc5 	.word	0x08002cc5
 8002c90:	08002cc5 	.word	0x08002cc5
 8002c94:	08002cc5 	.word	0x08002cc5
 8002c98:	08002cc5 	.word	0x08002cc5
 8002c9c:	08002ccb 	.word	0x08002ccb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fdf8 	bl	800389c <RCCEx_PLL2_Config>
 8002cac:	4603      	mov	r3, r0
 8002cae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002cb0:	e00c      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3324      	adds	r3, #36	; 0x24
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fea1 	bl	8003a00 <RCCEx_PLL3_Config>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002cc2:	e003      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc8:	e000      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8002cca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10a      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002cd2:	4b46      	ldr	r3, [pc, #280]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ce0:	4942      	ldr	r1, [pc, #264]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	654b      	str	r3, [r1, #84]	; 0x54
 8002ce6:	e001      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce8:	7dfb      	ldrb	r3, [r7, #23]
 8002cea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d038      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cfc:	2b05      	cmp	r3, #5
 8002cfe:	d821      	bhi.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002d00:	a201      	add	r2, pc, #4	; (adr r2, 8002d08 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d06:	bf00      	nop
 8002d08:	08002d4b 	.word	0x08002d4b
 8002d0c:	08002d21 	.word	0x08002d21
 8002d10:	08002d33 	.word	0x08002d33
 8002d14:	08002d4b 	.word	0x08002d4b
 8002d18:	08002d4b 	.word	0x08002d4b
 8002d1c:	08002d4b 	.word	0x08002d4b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3304      	adds	r3, #4
 8002d24:	2101      	movs	r1, #1
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fdb8 	bl	800389c <RCCEx_PLL2_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002d30:	e00c      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3324      	adds	r3, #36	; 0x24
 8002d36:	2101      	movs	r1, #1
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fe61 	bl	8003a00 <RCCEx_PLL3_Config>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002d42:	e003      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	75fb      	strb	r3, [r7, #23]
      break;
 8002d48:	e000      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8002d4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d4c:	7dfb      	ldrb	r3, [r7, #23]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002d52:	4b26      	ldr	r3, [pc, #152]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d56:	f023 0207 	bic.w	r2, r3, #7
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d5e:	4923      	ldr	r1, [pc, #140]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	654b      	str	r3, [r1, #84]	; 0x54
 8002d64:	e001      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d66:	7dfb      	ldrb	r3, [r7, #23]
 8002d68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d040      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	d821      	bhi.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8002d80:	a201      	add	r2, pc, #4	; (adr r2, 8002d88 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d86:	bf00      	nop
 8002d88:	08002dcb 	.word	0x08002dcb
 8002d8c:	08002da1 	.word	0x08002da1
 8002d90:	08002db3 	.word	0x08002db3
 8002d94:	08002dcb 	.word	0x08002dcb
 8002d98:	08002dcb 	.word	0x08002dcb
 8002d9c:	08002dcb 	.word	0x08002dcb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3304      	adds	r3, #4
 8002da4:	2101      	movs	r1, #1
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 fd78 	bl	800389c <RCCEx_PLL2_Config>
 8002dac:	4603      	mov	r3, r0
 8002dae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002db0:	e00c      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3324      	adds	r3, #36	; 0x24
 8002db6:	2101      	movs	r1, #1
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 fe21 	bl	8003a00 <RCCEx_PLL3_Config>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002dc2:	e003      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002dc8:	e000      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8002dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dcc:	7dfb      	ldrb	r3, [r7, #23]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d110      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	f023 0207 	bic.w	r2, r3, #7
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002de0:	4902      	ldr	r1, [pc, #8]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	658b      	str	r3, [r1, #88]	; 0x58
 8002de6:	e007      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8002de8:	58024800 	.word	0x58024800
 8002dec:	58024400 	.word	0x58024400
 8002df0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df4:	7dfb      	ldrb	r3, [r7, #23]
 8002df6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d04b      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e0e:	d02e      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8002e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e14:	d828      	bhi.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1a:	d02a      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8002e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e20:	d822      	bhi.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002e22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e26:	d026      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002e28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e2c:	d81c      	bhi.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e32:	d010      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8002e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e38:	d816      	bhi.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01d      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8002e3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e42:	d111      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3304      	adds	r3, #4
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fd26 	bl	800389c <RCCEx_PLL2_Config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002e54:	e012      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3324      	adds	r3, #36	; 0x24
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fdcf 	bl	8003a00 <RCCEx_PLL3_Config>
 8002e62:	4603      	mov	r3, r0
 8002e64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002e66:	e009      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e6c:	e006      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002e6e:	bf00      	nop
 8002e70:	e004      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002e72:	bf00      	nop
 8002e74:	e002      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002e76:	bf00      	nop
 8002e78:	e000      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10a      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e82:	4bb3      	ldr	r3, [pc, #716]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e90:	49af      	ldr	r1, [pc, #700]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	654b      	str	r3, [r1, #84]	; 0x54
 8002e96:	e001      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
 8002e9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d04b      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002eae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002eb2:	d02e      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8002eb4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002eb8:	d828      	bhi.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ebe:	d02a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec4:	d822      	bhi.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002ec6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002eca:	d026      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002ecc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ed0:	d81c      	bhi.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ed6:	d010      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8002ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002edc:	d816      	bhi.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d01d      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee6:	d111      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3304      	adds	r3, #4
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fcd4 	bl	800389c <RCCEx_PLL2_Config>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002ef8:	e012      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3324      	adds	r3, #36	; 0x24
 8002efe:	2102      	movs	r1, #2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fd7d 	bl	8003a00 <RCCEx_PLL3_Config>
 8002f06:	4603      	mov	r3, r0
 8002f08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002f0a:	e009      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f10:	e006      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f12:	bf00      	nop
 8002f14:	e004      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f16:	bf00      	nop
 8002f18:	e002      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f1a:	bf00      	nop
 8002f1c:	e000      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f20:	7dfb      	ldrb	r3, [r7, #23]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10a      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f26:	4b8a      	ldr	r3, [pc, #552]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f34:	4986      	ldr	r1, [pc, #536]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	658b      	str	r3, [r1, #88]	; 0x58
 8002f3a:	e001      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f3c:	7dfb      	ldrb	r3, [r7, #23]
 8002f3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d04b      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f52:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002f56:	d02e      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8002f58:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002f5c:	d828      	bhi.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f62:	d02a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8002f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f68:	d822      	bhi.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002f6a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002f6e:	d026      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8002f70:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002f74:	d81c      	bhi.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002f76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f7a:	d010      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8002f7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f80:	d816      	bhi.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d01d      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8002f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f8a:	d111      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fc82 	bl	800389c <RCCEx_PLL2_Config>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002f9c:	e012      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3324      	adds	r3, #36	; 0x24
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fd2b 	bl	8003a00 <RCCEx_PLL3_Config>
 8002faa:	4603      	mov	r3, r0
 8002fac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002fae:	e009      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8002fb4:	e006      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002fb6:	bf00      	nop
 8002fb8:	e004      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002fba:	bf00      	nop
 8002fbc:	e002      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002fbe:	bf00      	nop
 8002fc0:	e000      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002fc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10a      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002fca:	4b61      	ldr	r3, [pc, #388]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fd8:	495d      	ldr	r1, [pc, #372]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	658b      	str	r3, [r1, #88]	; 0x58
 8002fde:	e001      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe0:	7dfb      	ldrb	r3, [r7, #23]
 8002fe2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d01a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffa:	d10a      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3324      	adds	r3, #36	; 0x24
 8003000:	2102      	movs	r1, #2
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fcfc 	bl	8003a00 <RCCEx_PLL3_Config>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003012:	4b4f      	ldr	r3, [pc, #316]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003016:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003020:	494b      	ldr	r1, [pc, #300]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003022:	4313      	orrs	r3, r2
 8003024:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01a      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800303c:	d10a      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3324      	adds	r3, #36	; 0x24
 8003042:	2102      	movs	r1, #2
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fcdb 	bl	8003a00 <RCCEx_PLL3_Config>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003054:	4b3e      	ldr	r3, [pc, #248]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003062:	493b      	ldr	r1, [pc, #236]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003064:	4313      	orrs	r3, r2
 8003066:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d034      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800307a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800307e:	d01d      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003084:	d817      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800308a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308e:	d009      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003090:	e011      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3304      	adds	r3, #4
 8003096:	2100      	movs	r1, #0
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fbff 	bl	800389c <RCCEx_PLL2_Config>
 800309e:	4603      	mov	r3, r0
 80030a0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80030a2:	e00c      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3324      	adds	r3, #36	; 0x24
 80030a8:	2102      	movs	r1, #2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fca8 	bl	8003a00 <RCCEx_PLL3_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80030b4:	e003      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
      break;
 80030ba:	e000      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80030bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030be:	7dfb      	ldrb	r3, [r7, #23]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030c4:	4b22      	ldr	r3, [pc, #136]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030d2:	491f      	ldr	r1, [pc, #124]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	658b      	str	r3, [r1, #88]	; 0x58
 80030d8:	e001      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030da:	7dfb      	ldrb	r3, [r7, #23]
 80030dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d036      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030f4:	d01c      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80030f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030fa:	d816      	bhi.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80030fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003100:	d003      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003102:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003106:	d007      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003108:	e00f      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	4a10      	ldr	r2, [pc, #64]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003114:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003116:	e00c      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3324      	adds	r3, #36	; 0x24
 800311c:	2101      	movs	r1, #1
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fc6e 	bl	8003a00 <RCCEx_PLL3_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003128:	e003      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	75fb      	strb	r3, [r7, #23]
      break;
 800312e:	e000      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003132:	7dfb      	ldrb	r3, [r7, #23]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10d      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800313a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003146:	4902      	ldr	r1, [pc, #8]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003148:	4313      	orrs	r3, r2
 800314a:	654b      	str	r3, [r1, #84]	; 0x54
 800314c:	e004      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800314e:	bf00      	nop
 8003150:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d029      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800316c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003170:	d007      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8003172:	e00f      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003174:	4b69      	ldr	r3, [pc, #420]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	4a68      	ldr	r2, [pc, #416]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800317a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800317e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003180:	e00b      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3304      	adds	r3, #4
 8003186:	2102      	movs	r1, #2
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fb87 	bl	800389c <RCCEx_PLL2_Config>
 800318e:	4603      	mov	r3, r0
 8003190:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003192:	e002      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	75fb      	strb	r3, [r7, #23]
      break;
 8003198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800319a:	7dfb      	ldrb	r3, [r7, #23]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d109      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80031a0:	4b5e      	ldr	r3, [pc, #376]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ac:	495b      	ldr	r1, [pc, #364]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80031b2:	e001      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
 80031b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3324      	adds	r3, #36	; 0x24
 80031c8:	2102      	movs	r1, #2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fc18 	bl	8003a00 <RCCEx_PLL3_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d032      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031f0:	d017      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 80031f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031f6:	d811      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80031f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031fc:	d013      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 80031fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003202:	d80b      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d010      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8003208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800320c:	d106      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800320e:	4b43      	ldr	r3, [pc, #268]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003212:	4a42      	ldr	r2, [pc, #264]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003218:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800321a:	e007      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	75fb      	strb	r3, [r7, #23]
      break;
 8003220:	e004      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003222:	bf00      	nop
 8003224:	e002      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003226:	bf00      	nop
 8003228:	e000      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800322a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800322c:	7dfb      	ldrb	r3, [r7, #23]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003232:	4b3a      	ldr	r3, [pc, #232]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003236:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003240:	4936      	ldr	r1, [pc, #216]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003242:	4313      	orrs	r3, r2
 8003244:	654b      	str	r3, [r1, #84]	; 0x54
 8003246:	e001      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003248:	7dfb      	ldrb	r3, [r7, #23]
 800324a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003258:	4b30      	ldr	r3, [pc, #192]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800325a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800325c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003264:	492d      	ldr	r1, [pc, #180]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003266:	4313      	orrs	r3, r2
 8003268:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d008      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003276:	4b29      	ldr	r3, [pc, #164]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003282:	4926      	ldr	r1, [pc, #152]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003284:	4313      	orrs	r3, r2
 8003286:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003294:	4b21      	ldr	r3, [pc, #132]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003298:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	491e      	ldr	r1, [pc, #120]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00d      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032b2:	4b1a      	ldr	r3, [pc, #104]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	4a19      	ldr	r2, [pc, #100]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80032bc:	6113      	str	r3, [r2, #16]
 80032be:	4b17      	ldr	r3, [pc, #92]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80032c8:	4914      	ldr	r1, [pc, #80]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	da08      	bge.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80032d6:	4b11      	ldr	r3, [pc, #68]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e2:	490e      	ldr	r1, [pc, #56]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d009      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032f4:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	4906      	ldr	r1, [pc, #24]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003304:	4313      	orrs	r3, r2
 8003306:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003308:	7dbb      	ldrb	r3, [r7, #22]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	e000      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	58024400 	.word	0x58024400

08003320 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003324:	f7ff f852 	bl	80023cc <HAL_RCC_GetHCLKFreq>
 8003328:	4602      	mov	r2, r0
 800332a:	4b06      	ldr	r3, [pc, #24]	; (8003344 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	091b      	lsrs	r3, r3, #4
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	4904      	ldr	r1, [pc, #16]	; (8003348 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003336:	5ccb      	ldrb	r3, [r1, r3]
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003340:	4618      	mov	r0, r3
 8003342:	bd80      	pop	{r7, pc}
 8003344:	58024400 	.word	0x58024400
 8003348:	080086d0 	.word	0x080086d0

0800334c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	; 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003354:	4ba1      	ldr	r3, [pc, #644]	; (80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800335e:	4b9f      	ldr	r3, [pc, #636]	; (80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	0b1b      	lsrs	r3, r3, #12
 8003364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003368:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800336a:	4b9c      	ldr	r3, [pc, #624]	; (80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	091b      	lsrs	r3, r3, #4
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003376:	4b99      	ldr	r3, [pc, #612]	; (80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337a:	08db      	lsrs	r3, r3, #3
 800337c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	fb02 f303 	mul.w	r3, r2, r3
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8111 	beq.w	80035bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	2b02      	cmp	r3, #2
 800339e:	f000 8083 	beq.w	80034a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	f200 80a1 	bhi.w	80034ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d056      	beq.n	8003464 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80033b6:	e099      	b.n	80034ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033b8:	4b88      	ldr	r3, [pc, #544]	; (80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d02d      	beq.n	8003420 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033c4:	4b85      	ldr	r3, [pc, #532]	; (80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	08db      	lsrs	r3, r3, #3
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	4a84      	ldr	r2, [pc, #528]	; (80035e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
 80033d4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	ee07 3a90 	vmov	s15, r3
 80033dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	ee07 3a90 	vmov	s15, r3
 80033e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ee:	4b7b      	ldr	r3, [pc, #492]	; (80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f6:	ee07 3a90 	vmov	s15, r3
 80033fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003402:	eddf 5a78 	vldr	s11, [pc, #480]	; 80035e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800340a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800340e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800341e:	e087      	b.n	8003530 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80035e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800342e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003432:	4b6a      	ldr	r3, [pc, #424]	; (80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003442:	ed97 6a03 	vldr	s12, [r7, #12]
 8003446:	eddf 5a67 	vldr	s11, [pc, #412]	; 80035e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800344a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800344e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800345a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003462:	e065      	b.n	8003530 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80035ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003476:	4b59      	ldr	r3, [pc, #356]	; (80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003486:	ed97 6a03 	vldr	s12, [r7, #12]
 800348a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80035e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800348e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800349a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800349e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034a6:	e043      	b.n	8003530 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	ee07 3a90 	vmov	s15, r3
 80034ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80034b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ba:	4b48      	ldr	r3, [pc, #288]	; (80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c2:	ee07 3a90 	vmov	s15, r3
 80034c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80034ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80035e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80034d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034ea:	e021      	b.n	8003530 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	ee07 3a90 	vmov	s15, r3
 80034f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80035ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80034fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034fe:	4b37      	ldr	r3, [pc, #220]	; (80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003506:	ee07 3a90 	vmov	s15, r3
 800350a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800350e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003512:	eddf 5a34 	vldr	s11, [pc, #208]	; 80035e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800351a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800351e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800352a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800352e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003530:	4b2a      	ldr	r3, [pc, #168]	; (80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	0a5b      	lsrs	r3, r3, #9
 8003536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003542:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003546:	ee37 7a87 	vadd.f32	s14, s15, s14
 800354a:	edd7 6a07 	vldr	s13, [r7, #28]
 800354e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003556:	ee17 2a90 	vmov	r2, s15
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800355e:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	0c1b      	lsrs	r3, r3, #16
 8003564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003568:	ee07 3a90 	vmov	s15, r3
 800356c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003570:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003574:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003578:	edd7 6a07 	vldr	s13, [r7, #28]
 800357c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003584:	ee17 2a90 	vmov	r2, s15
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800358c:	4b13      	ldr	r3, [pc, #76]	; (80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800358e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003590:	0e1b      	lsrs	r3, r3, #24
 8003592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80035aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035b2:	ee17 2a90 	vmov	r2, s15
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80035ba:	e008      	b.n	80035ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	609a      	str	r2, [r3, #8]
}
 80035ce:	bf00      	nop
 80035d0:	3724      	adds	r7, #36	; 0x24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	58024400 	.word	0x58024400
 80035e0:	03d09000 	.word	0x03d09000
 80035e4:	46000000 	.word	0x46000000
 80035e8:	4c742400 	.word	0x4c742400
 80035ec:	4a742400 	.word	0x4a742400
 80035f0:	4af42400 	.word	0x4af42400

080035f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b089      	sub	sp, #36	; 0x24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035fc:	4ba1      	ldr	r3, [pc, #644]	; (8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003606:	4b9f      	ldr	r3, [pc, #636]	; (8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	0d1b      	lsrs	r3, r3, #20
 800360c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003610:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003612:	4b9c      	ldr	r3, [pc, #624]	; (8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003616:	0a1b      	lsrs	r3, r3, #8
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800361e:	4b99      	ldr	r3, [pc, #612]	; (8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	08db      	lsrs	r3, r3, #3
 8003624:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	fb02 f303 	mul.w	r3, r2, r3
 800362e:	ee07 3a90 	vmov	s15, r3
 8003632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003636:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8111 	beq.w	8003864 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	2b02      	cmp	r3, #2
 8003646:	f000 8083 	beq.w	8003750 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	2b02      	cmp	r3, #2
 800364e:	f200 80a1 	bhi.w	8003794 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d056      	beq.n	800370c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800365e:	e099      	b.n	8003794 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003660:	4b88      	ldr	r3, [pc, #544]	; (8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d02d      	beq.n	80036c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800366c:	4b85      	ldr	r3, [pc, #532]	; (8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	08db      	lsrs	r3, r3, #3
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	4a84      	ldr	r2, [pc, #528]	; (8003888 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
 800367c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	ee07 3a90 	vmov	s15, r3
 8003684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	ee07 3a90 	vmov	s15, r3
 800368e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003696:	4b7b      	ldr	r3, [pc, #492]	; (8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800369e:	ee07 3a90 	vmov	s15, r3
 80036a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80036aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800388c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80036ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80036c6:	e087      	b.n	80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003890 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80036d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036da:	4b6a      	ldr	r3, [pc, #424]	; (8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80036ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800388c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80036f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003706:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800370a:	e065      	b.n	80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	ee07 3a90 	vmov	s15, r3
 8003712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003716:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800371a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800371e:	4b59      	ldr	r3, [pc, #356]	; (8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800372e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003732:	eddf 5a56 	vldr	s11, [pc, #344]	; 800388c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800373a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800373e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800374a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800374e:	e043      	b.n	80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	ee07 3a90 	vmov	s15, r3
 8003756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800375a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003898 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800375e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003762:	4b48      	ldr	r3, [pc, #288]	; (8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800376a:	ee07 3a90 	vmov	s15, r3
 800376e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003772:	ed97 6a03 	vldr	s12, [r7, #12]
 8003776:	eddf 5a45 	vldr	s11, [pc, #276]	; 800388c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800377a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800377e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800378a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003792:	e021      	b.n	80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80037a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037a6:	4b37      	ldr	r3, [pc, #220]	; (8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80037ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800388c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80037be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80037d8:	4b2a      	ldr	r3, [pc, #168]	; (8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	0a5b      	lsrs	r3, r3, #9
 80037de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80037f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037fe:	ee17 2a90 	vmov	r2, s15
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003806:	4b1f      	ldr	r3, [pc, #124]	; (8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	0c1b      	lsrs	r3, r3, #16
 800380c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003810:	ee07 3a90 	vmov	s15, r3
 8003814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003818:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800381c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003820:	edd7 6a07 	vldr	s13, [r7, #28]
 8003824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800382c:	ee17 2a90 	vmov	r2, s15
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003834:	4b13      	ldr	r3, [pc, #76]	; (8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	0e1b      	lsrs	r3, r3, #24
 800383a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003846:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800384a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800384e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800385a:	ee17 2a90 	vmov	r2, s15
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003862:	e008      	b.n	8003876 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	609a      	str	r2, [r3, #8]
}
 8003876:	bf00      	nop
 8003878:	3724      	adds	r7, #36	; 0x24
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	58024400 	.word	0x58024400
 8003888:	03d09000 	.word	0x03d09000
 800388c:	46000000 	.word	0x46000000
 8003890:	4c742400 	.word	0x4c742400
 8003894:	4a742400 	.word	0x4a742400
 8003898:	4af42400 	.word	0x4af42400

0800389c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80038aa:	4b53      	ldr	r3, [pc, #332]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d101      	bne.n	80038ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e099      	b.n	80039ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80038ba:	4b4f      	ldr	r3, [pc, #316]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a4e      	ldr	r2, [pc, #312]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 80038c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c6:	f7fd fb3d 	bl	8000f44 <HAL_GetTick>
 80038ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80038cc:	e008      	b.n	80038e0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80038ce:	f7fd fb39 	bl	8000f44 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e086      	b.n	80039ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80038e0:	4b45      	ldr	r3, [pc, #276]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f0      	bne.n	80038ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80038ec:	4b42      	ldr	r3, [pc, #264]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 80038ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	031b      	lsls	r3, r3, #12
 80038fa:	493f      	ldr	r1, [pc, #252]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	628b      	str	r3, [r1, #40]	; 0x28
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	3b01      	subs	r3, #1
 8003906:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	3b01      	subs	r3, #1
 8003910:	025b      	lsls	r3, r3, #9
 8003912:	b29b      	uxth	r3, r3
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	3b01      	subs	r3, #1
 800391c:	041b      	lsls	r3, r3, #16
 800391e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	3b01      	subs	r3, #1
 800392a:	061b      	lsls	r3, r3, #24
 800392c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003930:	4931      	ldr	r1, [pc, #196]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 8003932:	4313      	orrs	r3, r2
 8003934:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003936:	4b30      	ldr	r3, [pc, #192]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	492d      	ldr	r1, [pc, #180]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 8003944:	4313      	orrs	r3, r2
 8003946:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003948:	4b2b      	ldr	r3, [pc, #172]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	f023 0220 	bic.w	r2, r3, #32
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	4928      	ldr	r1, [pc, #160]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 8003956:	4313      	orrs	r3, r2
 8003958:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800395a:	4b27      	ldr	r3, [pc, #156]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	4a26      	ldr	r2, [pc, #152]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 8003960:	f023 0310 	bic.w	r3, r3, #16
 8003964:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003966:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 8003968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800396a:	4b24      	ldr	r3, [pc, #144]	; (80039fc <RCCEx_PLL2_Config+0x160>)
 800396c:	4013      	ands	r3, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	69d2      	ldr	r2, [r2, #28]
 8003972:	00d2      	lsls	r2, r2, #3
 8003974:	4920      	ldr	r1, [pc, #128]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 8003976:	4313      	orrs	r3, r2
 8003978:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800397a:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 8003980:	f043 0310 	orr.w	r3, r3, #16
 8003984:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d106      	bne.n	800399a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800398c:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	4a19      	ldr	r2, [pc, #100]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 8003992:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003996:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003998:	e00f      	b.n	80039ba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d106      	bne.n	80039ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80039a0:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	4a14      	ldr	r2, [pc, #80]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 80039a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039ac:	e005      	b.n	80039ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80039ae:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	4a11      	ldr	r2, [pc, #68]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 80039b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80039ba:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a0e      	ldr	r2, [pc, #56]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 80039c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c6:	f7fd fabd 	bl	8000f44 <HAL_GetTick>
 80039ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80039cc:	e008      	b.n	80039e0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80039ce:	f7fd fab9 	bl	8000f44 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e006      	b.n	80039ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <RCCEx_PLL2_Config+0x15c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f0      	beq.n	80039ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	58024400 	.word	0x58024400
 80039fc:	ffff0007 	.word	0xffff0007

08003a00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a0e:	4b53      	ldr	r3, [pc, #332]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d101      	bne.n	8003a1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e099      	b.n	8003b52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003a1e:	4b4f      	ldr	r3, [pc, #316]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a4e      	ldr	r2, [pc, #312]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a2a:	f7fd fa8b 	bl	8000f44 <HAL_GetTick>
 8003a2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003a30:	e008      	b.n	8003a44 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003a32:	f7fd fa87 	bl	8000f44 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e086      	b.n	8003b52 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003a44:	4b45      	ldr	r3, [pc, #276]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f0      	bne.n	8003a32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003a50:	4b42      	ldr	r3, [pc, #264]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	051b      	lsls	r3, r3, #20
 8003a5e:	493f      	ldr	r1, [pc, #252]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	628b      	str	r3, [r1, #40]	; 0x28
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	025b      	lsls	r3, r3, #9
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	041b      	lsls	r3, r3, #16
 8003a82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	061b      	lsls	r3, r3, #24
 8003a90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a94:	4931      	ldr	r1, [pc, #196]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003a9a:	4b30      	ldr	r3, [pc, #192]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	492d      	ldr	r1, [pc, #180]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003aac:	4b2b      	ldr	r3, [pc, #172]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	4928      	ldr	r1, [pc, #160]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003abe:	4b27      	ldr	r3, [pc, #156]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac2:	4a26      	ldr	r2, [pc, #152]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003aca:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ace:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <RCCEx_PLL3_Config+0x160>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	69d2      	ldr	r2, [r2, #28]
 8003ad6:	00d2      	lsls	r2, r2, #3
 8003ad8:	4920      	ldr	r1, [pc, #128]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003ade:	4b1f      	ldr	r3, [pc, #124]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	4a1e      	ldr	r2, [pc, #120]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d106      	bne.n	8003afe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003af0:	4b1a      	ldr	r3, [pc, #104]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	4a19      	ldr	r2, [pc, #100]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003af6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003afa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003afc:	e00f      	b.n	8003b1e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d106      	bne.n	8003b12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003b04:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003b0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b10:	e005      	b.n	8003b1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003b12:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	4a11      	ldr	r2, [pc, #68]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003b18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a0e      	ldr	r2, [pc, #56]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b2a:	f7fd fa0b 	bl	8000f44 <HAL_GetTick>
 8003b2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003b30:	e008      	b.n	8003b44 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003b32:	f7fd fa07 	bl	8000f44 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e006      	b.n	8003b52 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <RCCEx_PLL3_Config+0x15c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	58024400 	.word	0x58024400
 8003b60:	ffff0007 	.word	0xffff0007

08003b64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e049      	b.n	8003c0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f841 	bl	8003c12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	f000 fa00 	bl	8003fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d001      	beq.n	8003c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e054      	b.n	8003cea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a26      	ldr	r2, [pc, #152]	; (8003cf8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d022      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x80>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6a:	d01d      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x80>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a22      	ldr	r2, [pc, #136]	; (8003cfc <HAL_TIM_Base_Start_IT+0xd4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d018      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x80>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a21      	ldr	r2, [pc, #132]	; (8003d00 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d013      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x80>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1f      	ldr	r2, [pc, #124]	; (8003d04 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00e      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x80>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1e      	ldr	r2, [pc, #120]	; (8003d08 <HAL_TIM_Base_Start_IT+0xe0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d009      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x80>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1c      	ldr	r2, [pc, #112]	; (8003d0c <HAL_TIM_Base_Start_IT+0xe4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x80>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1b      	ldr	r2, [pc, #108]	; (8003d10 <HAL_TIM_Base_Start_IT+0xe8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d115      	bne.n	8003cd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	4b19      	ldr	r3, [pc, #100]	; (8003d14 <HAL_TIM_Base_Start_IT+0xec>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b06      	cmp	r3, #6
 8003cb8:	d015      	beq.n	8003ce6 <HAL_TIM_Base_Start_IT+0xbe>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc0:	d011      	beq.n	8003ce6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0201 	orr.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd2:	e008      	b.n	8003ce6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e000      	b.n	8003ce8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40010000 	.word	0x40010000
 8003cfc:	40000400 	.word	0x40000400
 8003d00:	40000800 	.word	0x40000800
 8003d04:	40000c00 	.word	0x40000c00
 8003d08:	40010400 	.word	0x40010400
 8003d0c:	40001800 	.word	0x40001800
 8003d10:	40014000 	.word	0x40014000
 8003d14:	00010007 	.word	0x00010007

08003d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d122      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d11b      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0202 	mvn.w	r2, #2
 8003d44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f905 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
 8003d60:	e005      	b.n	8003d6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f8f7 	bl	8003f56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f908 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d122      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d11b      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0204 	mvn.w	r2, #4
 8003d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f8db 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
 8003db4:	e005      	b.n	8003dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f8cd 	bl	8003f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f8de 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d122      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d11b      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0208 	mvn.w	r2, #8
 8003dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2204      	movs	r2, #4
 8003df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f8b1 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
 8003e08:	e005      	b.n	8003e16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f8a3 	bl	8003f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f8b4 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d122      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d11b      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0210 	mvn.w	r2, #16
 8003e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2208      	movs	r2, #8
 8003e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f887 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
 8003e5c:	e005      	b.n	8003e6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f879 	bl	8003f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f88a 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d10e      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d107      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0201 	mvn.w	r2, #1
 8003e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fc fde6 	bl	8000a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea6:	2b80      	cmp	r3, #128	; 0x80
 8003ea8:	d10e      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb4:	2b80      	cmp	r3, #128	; 0x80
 8003eb6:	d107      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f914 	bl	80040f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed6:	d10e      	bne.n	8003ef6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	2b80      	cmp	r3, #128	; 0x80
 8003ee4:	d107      	bne.n	8003ef6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f907 	bl	8004104 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f00:	2b40      	cmp	r3, #64	; 0x40
 8003f02:	d10e      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b40      	cmp	r3, #64	; 0x40
 8003f10:	d107      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f838 	bl	8003f92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d10e      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d107      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f06f 0220 	mvn.w	r2, #32
 8003f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f8c7 	bl	80040dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
	...

08003fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a40      	ldr	r2, [pc, #256]	; (80040bc <TIM_Base_SetConfig+0x114>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d013      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc6:	d00f      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a3d      	ldr	r2, [pc, #244]	; (80040c0 <TIM_Base_SetConfig+0x118>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00b      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a3c      	ldr	r2, [pc, #240]	; (80040c4 <TIM_Base_SetConfig+0x11c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d007      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a3b      	ldr	r2, [pc, #236]	; (80040c8 <TIM_Base_SetConfig+0x120>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d003      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a3a      	ldr	r2, [pc, #232]	; (80040cc <TIM_Base_SetConfig+0x124>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d108      	bne.n	8003ffa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a2f      	ldr	r2, [pc, #188]	; (80040bc <TIM_Base_SetConfig+0x114>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d01f      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004008:	d01b      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a2c      	ldr	r2, [pc, #176]	; (80040c0 <TIM_Base_SetConfig+0x118>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d017      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a2b      	ldr	r2, [pc, #172]	; (80040c4 <TIM_Base_SetConfig+0x11c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2a      	ldr	r2, [pc, #168]	; (80040c8 <TIM_Base_SetConfig+0x120>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00f      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a29      	ldr	r2, [pc, #164]	; (80040cc <TIM_Base_SetConfig+0x124>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00b      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a28      	ldr	r2, [pc, #160]	; (80040d0 <TIM_Base_SetConfig+0x128>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d007      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a27      	ldr	r2, [pc, #156]	; (80040d4 <TIM_Base_SetConfig+0x12c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d003      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a26      	ldr	r2, [pc, #152]	; (80040d8 <TIM_Base_SetConfig+0x130>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d108      	bne.n	8004054 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a10      	ldr	r2, [pc, #64]	; (80040bc <TIM_Base_SetConfig+0x114>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00f      	beq.n	80040a0 <TIM_Base_SetConfig+0xf8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a12      	ldr	r2, [pc, #72]	; (80040cc <TIM_Base_SetConfig+0x124>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d00b      	beq.n	80040a0 <TIM_Base_SetConfig+0xf8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a11      	ldr	r2, [pc, #68]	; (80040d0 <TIM_Base_SetConfig+0x128>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d007      	beq.n	80040a0 <TIM_Base_SetConfig+0xf8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a10      	ldr	r2, [pc, #64]	; (80040d4 <TIM_Base_SetConfig+0x12c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d003      	beq.n	80040a0 <TIM_Base_SetConfig+0xf8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a0f      	ldr	r2, [pc, #60]	; (80040d8 <TIM_Base_SetConfig+0x130>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d103      	bne.n	80040a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	615a      	str	r2, [r3, #20]
}
 80040ae:	bf00      	nop
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40010000 	.word	0x40010000
 80040c0:	40000400 	.word	0x40000400
 80040c4:	40000800 	.word	0x40000800
 80040c8:	40000c00 	.word	0x40000c00
 80040cc:	40010400 	.word	0x40010400
 80040d0:	40014000 	.word	0x40014000
 80040d4:	40014400 	.word	0x40014400
 80040d8:	40014800 	.word	0x40014800

080040dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e042      	b.n	80041b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004130:	2b00      	cmp	r3, #0
 8004132:	d106      	bne.n	8004142 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7fc fe19 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2224      	movs	r2, #36	; 0x24
 8004146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0201 	bic.w	r2, r2, #1
 8004158:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f996 	bl	800448c <UART_SetConfig>
 8004160:	4603      	mov	r3, r0
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e022      	b.n	80041b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 ffe8 	bl	8005148 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f001 f86f 	bl	800528c <UART_CheckIdleState>
 80041ae:	4603      	mov	r3, r0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08a      	sub	sp, #40	; 0x28
 80041bc:	af02      	add	r7, sp, #8
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	4613      	mov	r3, r2
 80041c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	f040 8083 	bne.w	80042da <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_UART_Transmit+0x28>
 80041da:	88fb      	ldrh	r3, [r7, #6]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e07b      	b.n	80042dc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_UART_Transmit+0x3a>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e074      	b.n	80042dc <HAL_UART_Transmit+0x124>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2221      	movs	r2, #33	; 0x21
 8004206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800420a:	f7fc fe9b 	bl	8000f44 <HAL_GetTick>
 800420e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	88fa      	ldrh	r2, [r7, #6]
 8004214:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	88fa      	ldrh	r2, [r7, #6]
 800421c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004228:	d108      	bne.n	800423c <HAL_UART_Transmit+0x84>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d104      	bne.n	800423c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	e003      	b.n	8004244 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004240:	2300      	movs	r3, #0
 8004242:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800424c:	e02c      	b.n	80042a8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	2180      	movs	r1, #128	; 0x80
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f001 f862 	bl	8005322 <UART_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e039      	b.n	80042dc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10b      	bne.n	8004286 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800427c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	3302      	adds	r3, #2
 8004282:	61bb      	str	r3, [r7, #24]
 8004284:	e007      	b.n	8004296 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	781a      	ldrb	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	3301      	adds	r3, #1
 8004294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1cc      	bne.n	800424e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2200      	movs	r2, #0
 80042bc:	2140      	movs	r1, #64	; 0x40
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f001 f82f 	bl	8005322 <UART_WaitOnFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e006      	b.n	80042dc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	e000      	b.n	80042dc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80042da:	2302      	movs	r3, #2
  }
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3720      	adds	r7, #32
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08a      	sub	sp, #40	; 0x28
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	4613      	mov	r3, r2
 80042f2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	f040 80c0 	bne.w	8004480 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_UART_Receive+0x28>
 8004306:	88fb      	ldrh	r3, [r7, #6]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0b8      	b.n	8004482 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004316:	2b01      	cmp	r3, #1
 8004318:	d101      	bne.n	800431e <HAL_UART_Receive+0x3a>
 800431a:	2302      	movs	r3, #2
 800431c:	e0b1      	b.n	8004482 <HAL_UART_Receive+0x19e>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2222      	movs	r2, #34	; 0x22
 8004332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800433c:	f7fc fe02 	bl	8000f44 <HAL_GetTick>
 8004340:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	88fa      	ldrh	r2, [r7, #6]
 8004346:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	88fa      	ldrh	r2, [r7, #6]
 800434e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435a:	d10e      	bne.n	800437a <HAL_UART_Receive+0x96>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <HAL_UART_Receive+0x8c>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f240 12ff 	movw	r2, #511	; 0x1ff
 800436a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800436e:	e02d      	b.n	80043cc <HAL_UART_Receive+0xe8>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	22ff      	movs	r2, #255	; 0xff
 8004374:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004378:	e028      	b.n	80043cc <HAL_UART_Receive+0xe8>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10d      	bne.n	800439e <HAL_UART_Receive+0xba>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d104      	bne.n	8004394 <HAL_UART_Receive+0xb0>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	22ff      	movs	r2, #255	; 0xff
 800438e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004392:	e01b      	b.n	80043cc <HAL_UART_Receive+0xe8>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	227f      	movs	r2, #127	; 0x7f
 8004398:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800439c:	e016      	b.n	80043cc <HAL_UART_Receive+0xe8>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043a6:	d10d      	bne.n	80043c4 <HAL_UART_Receive+0xe0>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d104      	bne.n	80043ba <HAL_UART_Receive+0xd6>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	227f      	movs	r2, #127	; 0x7f
 80043b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80043b8:	e008      	b.n	80043cc <HAL_UART_Receive+0xe8>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	223f      	movs	r2, #63	; 0x3f
 80043be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80043c2:	e003      	b.n	80043cc <HAL_UART_Receive+0xe8>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80043d2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043dc:	d108      	bne.n	80043f0 <HAL_UART_Receive+0x10c>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d104      	bne.n	80043f0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	e003      	b.n	80043f8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004400:	e032      	b.n	8004468 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2200      	movs	r2, #0
 800440a:	2120      	movs	r1, #32
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 ff88 	bl	8005322 <UART_WaitOnFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e032      	b.n	8004482 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10c      	bne.n	800443c <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	b29a      	uxth	r2, r3
 800442a:	8a7b      	ldrh	r3, [r7, #18]
 800442c:	4013      	ands	r3, r2
 800442e:	b29a      	uxth	r2, r3
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	3302      	adds	r3, #2
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	e00c      	b.n	8004456 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	b2da      	uxtb	r2, r3
 8004444:	8a7b      	ldrh	r3, [r7, #18]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	4013      	ands	r3, r2
 800444a:	b2da      	uxtb	r2, r3
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	3301      	adds	r3, #1
 8004454:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1c6      	bne.n	8004402 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	e000      	b.n	8004482 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8004480:	2302      	movs	r3, #2
  }
}
 8004482:	4618      	mov	r0, r3
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800448c:	b5b0      	push	{r4, r5, r7, lr}
 800448e:	b08e      	sub	sp, #56	; 0x38
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	4bbf      	ldr	r3, [pc, #764]	; (80047b8 <UART_SetConfig+0x32c>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80044c2:	430b      	orrs	r3, r1
 80044c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4ab5      	ldr	r2, [pc, #724]	; (80047bc <UART_SetConfig+0x330>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044f2:	4313      	orrs	r3, r2
 80044f4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	4bb0      	ldr	r3, [pc, #704]	; (80047c0 <UART_SetConfig+0x334>)
 80044fe:	4013      	ands	r3, r2
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004506:	430b      	orrs	r3, r1
 8004508:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	f023 010f 	bic.w	r1, r3, #15
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4aa7      	ldr	r2, [pc, #668]	; (80047c4 <UART_SetConfig+0x338>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d176      	bne.n	8004618 <UART_SetConfig+0x18c>
 800452a:	4ba7      	ldr	r3, [pc, #668]	; (80047c8 <UART_SetConfig+0x33c>)
 800452c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004532:	2b28      	cmp	r3, #40	; 0x28
 8004534:	d86c      	bhi.n	8004610 <UART_SetConfig+0x184>
 8004536:	a201      	add	r2, pc, #4	; (adr r2, 800453c <UART_SetConfig+0xb0>)
 8004538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453c:	080045e1 	.word	0x080045e1
 8004540:	08004611 	.word	0x08004611
 8004544:	08004611 	.word	0x08004611
 8004548:	08004611 	.word	0x08004611
 800454c:	08004611 	.word	0x08004611
 8004550:	08004611 	.word	0x08004611
 8004554:	08004611 	.word	0x08004611
 8004558:	08004611 	.word	0x08004611
 800455c:	080045e9 	.word	0x080045e9
 8004560:	08004611 	.word	0x08004611
 8004564:	08004611 	.word	0x08004611
 8004568:	08004611 	.word	0x08004611
 800456c:	08004611 	.word	0x08004611
 8004570:	08004611 	.word	0x08004611
 8004574:	08004611 	.word	0x08004611
 8004578:	08004611 	.word	0x08004611
 800457c:	080045f1 	.word	0x080045f1
 8004580:	08004611 	.word	0x08004611
 8004584:	08004611 	.word	0x08004611
 8004588:	08004611 	.word	0x08004611
 800458c:	08004611 	.word	0x08004611
 8004590:	08004611 	.word	0x08004611
 8004594:	08004611 	.word	0x08004611
 8004598:	08004611 	.word	0x08004611
 800459c:	080045f9 	.word	0x080045f9
 80045a0:	08004611 	.word	0x08004611
 80045a4:	08004611 	.word	0x08004611
 80045a8:	08004611 	.word	0x08004611
 80045ac:	08004611 	.word	0x08004611
 80045b0:	08004611 	.word	0x08004611
 80045b4:	08004611 	.word	0x08004611
 80045b8:	08004611 	.word	0x08004611
 80045bc:	08004601 	.word	0x08004601
 80045c0:	08004611 	.word	0x08004611
 80045c4:	08004611 	.word	0x08004611
 80045c8:	08004611 	.word	0x08004611
 80045cc:	08004611 	.word	0x08004611
 80045d0:	08004611 	.word	0x08004611
 80045d4:	08004611 	.word	0x08004611
 80045d8:	08004611 	.word	0x08004611
 80045dc:	08004609 	.word	0x08004609
 80045e0:	2301      	movs	r3, #1
 80045e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045e6:	e326      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80045e8:	2304      	movs	r3, #4
 80045ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045ee:	e322      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80045f0:	2308      	movs	r3, #8
 80045f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045f6:	e31e      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80045f8:	2310      	movs	r3, #16
 80045fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045fe:	e31a      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004600:	2320      	movs	r3, #32
 8004602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004606:	e316      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004608:	2340      	movs	r3, #64	; 0x40
 800460a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800460e:	e312      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004610:	2380      	movs	r3, #128	; 0x80
 8004612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004616:	e30e      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a6b      	ldr	r2, [pc, #428]	; (80047cc <UART_SetConfig+0x340>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d130      	bne.n	8004684 <UART_SetConfig+0x1f8>
 8004622:	4b69      	ldr	r3, [pc, #420]	; (80047c8 <UART_SetConfig+0x33c>)
 8004624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	2b05      	cmp	r3, #5
 800462c:	d826      	bhi.n	800467c <UART_SetConfig+0x1f0>
 800462e:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <UART_SetConfig+0x1a8>)
 8004630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004634:	0800464d 	.word	0x0800464d
 8004638:	08004655 	.word	0x08004655
 800463c:	0800465d 	.word	0x0800465d
 8004640:	08004665 	.word	0x08004665
 8004644:	0800466d 	.word	0x0800466d
 8004648:	08004675 	.word	0x08004675
 800464c:	2300      	movs	r3, #0
 800464e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004652:	e2f0      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004654:	2304      	movs	r3, #4
 8004656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800465a:	e2ec      	b.n	8004c36 <UART_SetConfig+0x7aa>
 800465c:	2308      	movs	r3, #8
 800465e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004662:	e2e8      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004664:	2310      	movs	r3, #16
 8004666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800466a:	e2e4      	b.n	8004c36 <UART_SetConfig+0x7aa>
 800466c:	2320      	movs	r3, #32
 800466e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004672:	e2e0      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004674:	2340      	movs	r3, #64	; 0x40
 8004676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800467a:	e2dc      	b.n	8004c36 <UART_SetConfig+0x7aa>
 800467c:	2380      	movs	r3, #128	; 0x80
 800467e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004682:	e2d8      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a51      	ldr	r2, [pc, #324]	; (80047d0 <UART_SetConfig+0x344>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d130      	bne.n	80046f0 <UART_SetConfig+0x264>
 800468e:	4b4e      	ldr	r3, [pc, #312]	; (80047c8 <UART_SetConfig+0x33c>)
 8004690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	2b05      	cmp	r3, #5
 8004698:	d826      	bhi.n	80046e8 <UART_SetConfig+0x25c>
 800469a:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <UART_SetConfig+0x214>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	080046b9 	.word	0x080046b9
 80046a4:	080046c1 	.word	0x080046c1
 80046a8:	080046c9 	.word	0x080046c9
 80046ac:	080046d1 	.word	0x080046d1
 80046b0:	080046d9 	.word	0x080046d9
 80046b4:	080046e1 	.word	0x080046e1
 80046b8:	2300      	movs	r3, #0
 80046ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046be:	e2ba      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80046c0:	2304      	movs	r3, #4
 80046c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046c6:	e2b6      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80046c8:	2308      	movs	r3, #8
 80046ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046ce:	e2b2      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80046d0:	2310      	movs	r3, #16
 80046d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046d6:	e2ae      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80046d8:	2320      	movs	r3, #32
 80046da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046de:	e2aa      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80046e0:	2340      	movs	r3, #64	; 0x40
 80046e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046e6:	e2a6      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046ee:	e2a2      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a37      	ldr	r2, [pc, #220]	; (80047d4 <UART_SetConfig+0x348>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d130      	bne.n	800475c <UART_SetConfig+0x2d0>
 80046fa:	4b33      	ldr	r3, [pc, #204]	; (80047c8 <UART_SetConfig+0x33c>)
 80046fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	2b05      	cmp	r3, #5
 8004704:	d826      	bhi.n	8004754 <UART_SetConfig+0x2c8>
 8004706:	a201      	add	r2, pc, #4	; (adr r2, 800470c <UART_SetConfig+0x280>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	08004725 	.word	0x08004725
 8004710:	0800472d 	.word	0x0800472d
 8004714:	08004735 	.word	0x08004735
 8004718:	0800473d 	.word	0x0800473d
 800471c:	08004745 	.word	0x08004745
 8004720:	0800474d 	.word	0x0800474d
 8004724:	2300      	movs	r3, #0
 8004726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800472a:	e284      	b.n	8004c36 <UART_SetConfig+0x7aa>
 800472c:	2304      	movs	r3, #4
 800472e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004732:	e280      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004734:	2308      	movs	r3, #8
 8004736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800473a:	e27c      	b.n	8004c36 <UART_SetConfig+0x7aa>
 800473c:	2310      	movs	r3, #16
 800473e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004742:	e278      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004744:	2320      	movs	r3, #32
 8004746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800474a:	e274      	b.n	8004c36 <UART_SetConfig+0x7aa>
 800474c:	2340      	movs	r3, #64	; 0x40
 800474e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004752:	e270      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004754:	2380      	movs	r3, #128	; 0x80
 8004756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800475a:	e26c      	b.n	8004c36 <UART_SetConfig+0x7aa>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a1d      	ldr	r2, [pc, #116]	; (80047d8 <UART_SetConfig+0x34c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d142      	bne.n	80047ec <UART_SetConfig+0x360>
 8004766:	4b18      	ldr	r3, [pc, #96]	; (80047c8 <UART_SetConfig+0x33c>)
 8004768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	2b05      	cmp	r3, #5
 8004770:	d838      	bhi.n	80047e4 <UART_SetConfig+0x358>
 8004772:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <UART_SetConfig+0x2ec>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	08004791 	.word	0x08004791
 800477c:	08004799 	.word	0x08004799
 8004780:	080047a1 	.word	0x080047a1
 8004784:	080047a9 	.word	0x080047a9
 8004788:	080047b1 	.word	0x080047b1
 800478c:	080047dd 	.word	0x080047dd
 8004790:	2300      	movs	r3, #0
 8004792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004796:	e24e      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004798:	2304      	movs	r3, #4
 800479a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800479e:	e24a      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80047a0:	2308      	movs	r3, #8
 80047a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047a6:	e246      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80047a8:	2310      	movs	r3, #16
 80047aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ae:	e242      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80047b0:	2320      	movs	r3, #32
 80047b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047b6:	e23e      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80047b8:	cfff69f3 	.word	0xcfff69f3
 80047bc:	58000c00 	.word	0x58000c00
 80047c0:	11fff4ff 	.word	0x11fff4ff
 80047c4:	40011000 	.word	0x40011000
 80047c8:	58024400 	.word	0x58024400
 80047cc:	40004400 	.word	0x40004400
 80047d0:	40004800 	.word	0x40004800
 80047d4:	40004c00 	.word	0x40004c00
 80047d8:	40005000 	.word	0x40005000
 80047dc:	2340      	movs	r3, #64	; 0x40
 80047de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047e2:	e228      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80047e4:	2380      	movs	r3, #128	; 0x80
 80047e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ea:	e224      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4ab1      	ldr	r2, [pc, #708]	; (8004ab8 <UART_SetConfig+0x62c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d176      	bne.n	80048e4 <UART_SetConfig+0x458>
 80047f6:	4bb1      	ldr	r3, [pc, #708]	; (8004abc <UART_SetConfig+0x630>)
 80047f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047fe:	2b28      	cmp	r3, #40	; 0x28
 8004800:	d86c      	bhi.n	80048dc <UART_SetConfig+0x450>
 8004802:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <UART_SetConfig+0x37c>)
 8004804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004808:	080048ad 	.word	0x080048ad
 800480c:	080048dd 	.word	0x080048dd
 8004810:	080048dd 	.word	0x080048dd
 8004814:	080048dd 	.word	0x080048dd
 8004818:	080048dd 	.word	0x080048dd
 800481c:	080048dd 	.word	0x080048dd
 8004820:	080048dd 	.word	0x080048dd
 8004824:	080048dd 	.word	0x080048dd
 8004828:	080048b5 	.word	0x080048b5
 800482c:	080048dd 	.word	0x080048dd
 8004830:	080048dd 	.word	0x080048dd
 8004834:	080048dd 	.word	0x080048dd
 8004838:	080048dd 	.word	0x080048dd
 800483c:	080048dd 	.word	0x080048dd
 8004840:	080048dd 	.word	0x080048dd
 8004844:	080048dd 	.word	0x080048dd
 8004848:	080048bd 	.word	0x080048bd
 800484c:	080048dd 	.word	0x080048dd
 8004850:	080048dd 	.word	0x080048dd
 8004854:	080048dd 	.word	0x080048dd
 8004858:	080048dd 	.word	0x080048dd
 800485c:	080048dd 	.word	0x080048dd
 8004860:	080048dd 	.word	0x080048dd
 8004864:	080048dd 	.word	0x080048dd
 8004868:	080048c5 	.word	0x080048c5
 800486c:	080048dd 	.word	0x080048dd
 8004870:	080048dd 	.word	0x080048dd
 8004874:	080048dd 	.word	0x080048dd
 8004878:	080048dd 	.word	0x080048dd
 800487c:	080048dd 	.word	0x080048dd
 8004880:	080048dd 	.word	0x080048dd
 8004884:	080048dd 	.word	0x080048dd
 8004888:	080048cd 	.word	0x080048cd
 800488c:	080048dd 	.word	0x080048dd
 8004890:	080048dd 	.word	0x080048dd
 8004894:	080048dd 	.word	0x080048dd
 8004898:	080048dd 	.word	0x080048dd
 800489c:	080048dd 	.word	0x080048dd
 80048a0:	080048dd 	.word	0x080048dd
 80048a4:	080048dd 	.word	0x080048dd
 80048a8:	080048d5 	.word	0x080048d5
 80048ac:	2301      	movs	r3, #1
 80048ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048b2:	e1c0      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80048b4:	2304      	movs	r3, #4
 80048b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ba:	e1bc      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80048bc:	2308      	movs	r3, #8
 80048be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048c2:	e1b8      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80048c4:	2310      	movs	r3, #16
 80048c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ca:	e1b4      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80048cc:	2320      	movs	r3, #32
 80048ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048d2:	e1b0      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80048d4:	2340      	movs	r3, #64	; 0x40
 80048d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048da:	e1ac      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048e2:	e1a8      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a75      	ldr	r2, [pc, #468]	; (8004ac0 <UART_SetConfig+0x634>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d130      	bne.n	8004950 <UART_SetConfig+0x4c4>
 80048ee:	4b73      	ldr	r3, [pc, #460]	; (8004abc <UART_SetConfig+0x630>)
 80048f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	2b05      	cmp	r3, #5
 80048f8:	d826      	bhi.n	8004948 <UART_SetConfig+0x4bc>
 80048fa:	a201      	add	r2, pc, #4	; (adr r2, 8004900 <UART_SetConfig+0x474>)
 80048fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004900:	08004919 	.word	0x08004919
 8004904:	08004921 	.word	0x08004921
 8004908:	08004929 	.word	0x08004929
 800490c:	08004931 	.word	0x08004931
 8004910:	08004939 	.word	0x08004939
 8004914:	08004941 	.word	0x08004941
 8004918:	2300      	movs	r3, #0
 800491a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800491e:	e18a      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004920:	2304      	movs	r3, #4
 8004922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004926:	e186      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004928:	2308      	movs	r3, #8
 800492a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800492e:	e182      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004930:	2310      	movs	r3, #16
 8004932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004936:	e17e      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004938:	2320      	movs	r3, #32
 800493a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800493e:	e17a      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004940:	2340      	movs	r3, #64	; 0x40
 8004942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004946:	e176      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004948:	2380      	movs	r3, #128	; 0x80
 800494a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800494e:	e172      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a5b      	ldr	r2, [pc, #364]	; (8004ac4 <UART_SetConfig+0x638>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d130      	bne.n	80049bc <UART_SetConfig+0x530>
 800495a:	4b58      	ldr	r3, [pc, #352]	; (8004abc <UART_SetConfig+0x630>)
 800495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	2b05      	cmp	r3, #5
 8004964:	d826      	bhi.n	80049b4 <UART_SetConfig+0x528>
 8004966:	a201      	add	r2, pc, #4	; (adr r2, 800496c <UART_SetConfig+0x4e0>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	08004985 	.word	0x08004985
 8004970:	0800498d 	.word	0x0800498d
 8004974:	08004995 	.word	0x08004995
 8004978:	0800499d 	.word	0x0800499d
 800497c:	080049a5 	.word	0x080049a5
 8004980:	080049ad 	.word	0x080049ad
 8004984:	2300      	movs	r3, #0
 8004986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800498a:	e154      	b.n	8004c36 <UART_SetConfig+0x7aa>
 800498c:	2304      	movs	r3, #4
 800498e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004992:	e150      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004994:	2308      	movs	r3, #8
 8004996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800499a:	e14c      	b.n	8004c36 <UART_SetConfig+0x7aa>
 800499c:	2310      	movs	r3, #16
 800499e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049a2:	e148      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80049a4:	2320      	movs	r3, #32
 80049a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049aa:	e144      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80049ac:	2340      	movs	r3, #64	; 0x40
 80049ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049b2:	e140      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80049b4:	2380      	movs	r3, #128	; 0x80
 80049b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049ba:	e13c      	b.n	8004c36 <UART_SetConfig+0x7aa>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a41      	ldr	r2, [pc, #260]	; (8004ac8 <UART_SetConfig+0x63c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	f040 8082 	bne.w	8004acc <UART_SetConfig+0x640>
 80049c8:	4b3c      	ldr	r3, [pc, #240]	; (8004abc <UART_SetConfig+0x630>)
 80049ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049d0:	2b28      	cmp	r3, #40	; 0x28
 80049d2:	d86d      	bhi.n	8004ab0 <UART_SetConfig+0x624>
 80049d4:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <UART_SetConfig+0x550>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	08004a81 	.word	0x08004a81
 80049e0:	08004ab1 	.word	0x08004ab1
 80049e4:	08004ab1 	.word	0x08004ab1
 80049e8:	08004ab1 	.word	0x08004ab1
 80049ec:	08004ab1 	.word	0x08004ab1
 80049f0:	08004ab1 	.word	0x08004ab1
 80049f4:	08004ab1 	.word	0x08004ab1
 80049f8:	08004ab1 	.word	0x08004ab1
 80049fc:	08004a89 	.word	0x08004a89
 8004a00:	08004ab1 	.word	0x08004ab1
 8004a04:	08004ab1 	.word	0x08004ab1
 8004a08:	08004ab1 	.word	0x08004ab1
 8004a0c:	08004ab1 	.word	0x08004ab1
 8004a10:	08004ab1 	.word	0x08004ab1
 8004a14:	08004ab1 	.word	0x08004ab1
 8004a18:	08004ab1 	.word	0x08004ab1
 8004a1c:	08004a91 	.word	0x08004a91
 8004a20:	08004ab1 	.word	0x08004ab1
 8004a24:	08004ab1 	.word	0x08004ab1
 8004a28:	08004ab1 	.word	0x08004ab1
 8004a2c:	08004ab1 	.word	0x08004ab1
 8004a30:	08004ab1 	.word	0x08004ab1
 8004a34:	08004ab1 	.word	0x08004ab1
 8004a38:	08004ab1 	.word	0x08004ab1
 8004a3c:	08004a99 	.word	0x08004a99
 8004a40:	08004ab1 	.word	0x08004ab1
 8004a44:	08004ab1 	.word	0x08004ab1
 8004a48:	08004ab1 	.word	0x08004ab1
 8004a4c:	08004ab1 	.word	0x08004ab1
 8004a50:	08004ab1 	.word	0x08004ab1
 8004a54:	08004ab1 	.word	0x08004ab1
 8004a58:	08004ab1 	.word	0x08004ab1
 8004a5c:	08004aa1 	.word	0x08004aa1
 8004a60:	08004ab1 	.word	0x08004ab1
 8004a64:	08004ab1 	.word	0x08004ab1
 8004a68:	08004ab1 	.word	0x08004ab1
 8004a6c:	08004ab1 	.word	0x08004ab1
 8004a70:	08004ab1 	.word	0x08004ab1
 8004a74:	08004ab1 	.word	0x08004ab1
 8004a78:	08004ab1 	.word	0x08004ab1
 8004a7c:	08004aa9 	.word	0x08004aa9
 8004a80:	2301      	movs	r3, #1
 8004a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a86:	e0d6      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004a88:	2304      	movs	r3, #4
 8004a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a8e:	e0d2      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004a90:	2308      	movs	r3, #8
 8004a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a96:	e0ce      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004a98:	2310      	movs	r3, #16
 8004a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a9e:	e0ca      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004aa0:	2320      	movs	r3, #32
 8004aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aa6:	e0c6      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004aa8:	2340      	movs	r3, #64	; 0x40
 8004aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aae:	e0c2      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004ab0:	2380      	movs	r3, #128	; 0x80
 8004ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ab6:	e0be      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004ab8:	40011400 	.word	0x40011400
 8004abc:	58024400 	.word	0x58024400
 8004ac0:	40007800 	.word	0x40007800
 8004ac4:	40007c00 	.word	0x40007c00
 8004ac8:	40011800 	.word	0x40011800
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4aad      	ldr	r2, [pc, #692]	; (8004d88 <UART_SetConfig+0x8fc>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d176      	bne.n	8004bc4 <UART_SetConfig+0x738>
 8004ad6:	4bad      	ldr	r3, [pc, #692]	; (8004d8c <UART_SetConfig+0x900>)
 8004ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ada:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ade:	2b28      	cmp	r3, #40	; 0x28
 8004ae0:	d86c      	bhi.n	8004bbc <UART_SetConfig+0x730>
 8004ae2:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <UART_SetConfig+0x65c>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b8d 	.word	0x08004b8d
 8004aec:	08004bbd 	.word	0x08004bbd
 8004af0:	08004bbd 	.word	0x08004bbd
 8004af4:	08004bbd 	.word	0x08004bbd
 8004af8:	08004bbd 	.word	0x08004bbd
 8004afc:	08004bbd 	.word	0x08004bbd
 8004b00:	08004bbd 	.word	0x08004bbd
 8004b04:	08004bbd 	.word	0x08004bbd
 8004b08:	08004b95 	.word	0x08004b95
 8004b0c:	08004bbd 	.word	0x08004bbd
 8004b10:	08004bbd 	.word	0x08004bbd
 8004b14:	08004bbd 	.word	0x08004bbd
 8004b18:	08004bbd 	.word	0x08004bbd
 8004b1c:	08004bbd 	.word	0x08004bbd
 8004b20:	08004bbd 	.word	0x08004bbd
 8004b24:	08004bbd 	.word	0x08004bbd
 8004b28:	08004b9d 	.word	0x08004b9d
 8004b2c:	08004bbd 	.word	0x08004bbd
 8004b30:	08004bbd 	.word	0x08004bbd
 8004b34:	08004bbd 	.word	0x08004bbd
 8004b38:	08004bbd 	.word	0x08004bbd
 8004b3c:	08004bbd 	.word	0x08004bbd
 8004b40:	08004bbd 	.word	0x08004bbd
 8004b44:	08004bbd 	.word	0x08004bbd
 8004b48:	08004ba5 	.word	0x08004ba5
 8004b4c:	08004bbd 	.word	0x08004bbd
 8004b50:	08004bbd 	.word	0x08004bbd
 8004b54:	08004bbd 	.word	0x08004bbd
 8004b58:	08004bbd 	.word	0x08004bbd
 8004b5c:	08004bbd 	.word	0x08004bbd
 8004b60:	08004bbd 	.word	0x08004bbd
 8004b64:	08004bbd 	.word	0x08004bbd
 8004b68:	08004bad 	.word	0x08004bad
 8004b6c:	08004bbd 	.word	0x08004bbd
 8004b70:	08004bbd 	.word	0x08004bbd
 8004b74:	08004bbd 	.word	0x08004bbd
 8004b78:	08004bbd 	.word	0x08004bbd
 8004b7c:	08004bbd 	.word	0x08004bbd
 8004b80:	08004bbd 	.word	0x08004bbd
 8004b84:	08004bbd 	.word	0x08004bbd
 8004b88:	08004bb5 	.word	0x08004bb5
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b92:	e050      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004b94:	2304      	movs	r3, #4
 8004b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b9a:	e04c      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004b9c:	2308      	movs	r3, #8
 8004b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ba2:	e048      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004ba4:	2310      	movs	r3, #16
 8004ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004baa:	e044      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004bac:	2320      	movs	r3, #32
 8004bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bb2:	e040      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004bb4:	2340      	movs	r3, #64	; 0x40
 8004bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bba:	e03c      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004bbc:	2380      	movs	r3, #128	; 0x80
 8004bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bc2:	e038      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a71      	ldr	r2, [pc, #452]	; (8004d90 <UART_SetConfig+0x904>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d130      	bne.n	8004c30 <UART_SetConfig+0x7a4>
 8004bce:	4b6f      	ldr	r3, [pc, #444]	; (8004d8c <UART_SetConfig+0x900>)
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	2b05      	cmp	r3, #5
 8004bd8:	d826      	bhi.n	8004c28 <UART_SetConfig+0x79c>
 8004bda:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <UART_SetConfig+0x754>)
 8004bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be0:	08004bf9 	.word	0x08004bf9
 8004be4:	08004c01 	.word	0x08004c01
 8004be8:	08004c09 	.word	0x08004c09
 8004bec:	08004c11 	.word	0x08004c11
 8004bf0:	08004c19 	.word	0x08004c19
 8004bf4:	08004c21 	.word	0x08004c21
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bfe:	e01a      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004c00:	2304      	movs	r3, #4
 8004c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c06:	e016      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004c08:	2308      	movs	r3, #8
 8004c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c0e:	e012      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004c10:	2310      	movs	r3, #16
 8004c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c16:	e00e      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004c18:	2320      	movs	r3, #32
 8004c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c1e:	e00a      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004c20:	2340      	movs	r3, #64	; 0x40
 8004c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c26:	e006      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004c28:	2380      	movs	r3, #128	; 0x80
 8004c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c2e:	e002      	b.n	8004c36 <UART_SetConfig+0x7aa>
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a55      	ldr	r2, [pc, #340]	; (8004d90 <UART_SetConfig+0x904>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	f040 80f0 	bne.w	8004e22 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	dc46      	bgt.n	8004cd8 <UART_SetConfig+0x84c>
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	db75      	blt.n	8004d3a <UART_SetConfig+0x8ae>
 8004c4e:	3b02      	subs	r3, #2
 8004c50:	2b1e      	cmp	r3, #30
 8004c52:	d872      	bhi.n	8004d3a <UART_SetConfig+0x8ae>
 8004c54:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <UART_SetConfig+0x7d0>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004cdf 	.word	0x08004cdf
 8004c60:	08004d3b 	.word	0x08004d3b
 8004c64:	08004ce7 	.word	0x08004ce7
 8004c68:	08004d3b 	.word	0x08004d3b
 8004c6c:	08004d3b 	.word	0x08004d3b
 8004c70:	08004d3b 	.word	0x08004d3b
 8004c74:	08004cf7 	.word	0x08004cf7
 8004c78:	08004d3b 	.word	0x08004d3b
 8004c7c:	08004d3b 	.word	0x08004d3b
 8004c80:	08004d3b 	.word	0x08004d3b
 8004c84:	08004d3b 	.word	0x08004d3b
 8004c88:	08004d3b 	.word	0x08004d3b
 8004c8c:	08004d3b 	.word	0x08004d3b
 8004c90:	08004d3b 	.word	0x08004d3b
 8004c94:	08004d07 	.word	0x08004d07
 8004c98:	08004d3b 	.word	0x08004d3b
 8004c9c:	08004d3b 	.word	0x08004d3b
 8004ca0:	08004d3b 	.word	0x08004d3b
 8004ca4:	08004d3b 	.word	0x08004d3b
 8004ca8:	08004d3b 	.word	0x08004d3b
 8004cac:	08004d3b 	.word	0x08004d3b
 8004cb0:	08004d3b 	.word	0x08004d3b
 8004cb4:	08004d3b 	.word	0x08004d3b
 8004cb8:	08004d3b 	.word	0x08004d3b
 8004cbc:	08004d3b 	.word	0x08004d3b
 8004cc0:	08004d3b 	.word	0x08004d3b
 8004cc4:	08004d3b 	.word	0x08004d3b
 8004cc8:	08004d3b 	.word	0x08004d3b
 8004ccc:	08004d3b 	.word	0x08004d3b
 8004cd0:	08004d3b 	.word	0x08004d3b
 8004cd4:	08004d2d 	.word	0x08004d2d
 8004cd8:	2b40      	cmp	r3, #64	; 0x40
 8004cda:	d02a      	beq.n	8004d32 <UART_SetConfig+0x8a6>
 8004cdc:	e02d      	b.n	8004d3a <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004cde:	f7fe fb1f 	bl	8003320 <HAL_RCCEx_GetD3PCLK1Freq>
 8004ce2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004ce4:	e02f      	b.n	8004d46 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ce6:	f107 0314 	add.w	r3, r7, #20
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fe fb2e 	bl	800334c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004cf4:	e027      	b.n	8004d46 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cf6:	f107 0308 	add.w	r3, r7, #8
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe fc7a 	bl	80035f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d04:	e01f      	b.n	8004d46 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d06:	4b21      	ldr	r3, [pc, #132]	; (8004d8c <UART_SetConfig+0x900>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d009      	beq.n	8004d26 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d12:	4b1e      	ldr	r3, [pc, #120]	; (8004d8c <UART_SetConfig+0x900>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	08db      	lsrs	r3, r3, #3
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	4a1d      	ldr	r2, [pc, #116]	; (8004d94 <UART_SetConfig+0x908>)
 8004d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d24:	e00f      	b.n	8004d46 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8004d26:	4b1b      	ldr	r3, [pc, #108]	; (8004d94 <UART_SetConfig+0x908>)
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d2a:	e00c      	b.n	8004d46 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d2c:	4b1a      	ldr	r3, [pc, #104]	; (8004d98 <UART_SetConfig+0x90c>)
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d30:	e009      	b.n	8004d46 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d38:	e005      	b.n	8004d46 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004d44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 81e6 	beq.w	800511a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	4a12      	ldr	r2, [pc, #72]	; (8004d9c <UART_SetConfig+0x910>)
 8004d54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d60:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	4413      	add	r3, r2
 8004d6c:	6a3a      	ldr	r2, [r7, #32]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d305      	bcc.n	8004d7e <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d78:	6a3a      	ldr	r2, [r7, #32]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d910      	bls.n	8004da0 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004d84:	e1c9      	b.n	800511a <UART_SetConfig+0xc8e>
 8004d86:	bf00      	nop
 8004d88:	40011c00 	.word	0x40011c00
 8004d8c:	58024400 	.word	0x58024400
 8004d90:	58000c00 	.word	0x58000c00
 8004d94:	03d09000 	.word	0x03d09000
 8004d98:	003d0900 	.word	0x003d0900
 8004d9c:	080086e0 	.word	0x080086e0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da2:	4618      	mov	r0, r3
 8004da4:	f04f 0100 	mov.w	r1, #0
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	4ac1      	ldr	r2, [pc, #772]	; (80050b4 <UART_SetConfig+0xc28>)
 8004dae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	f7fb fa9a 	bl	80002f0 <__aeabi_uldivmod>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	020b      	lsls	r3, r1, #8
 8004dce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004dd2:	0202      	lsls	r2, r0, #8
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	6849      	ldr	r1, [r1, #4]
 8004dd8:	0849      	lsrs	r1, r1, #1
 8004dda:	4608      	mov	r0, r1
 8004ddc:	f04f 0100 	mov.w	r1, #0
 8004de0:	1814      	adds	r4, r2, r0
 8004de2:	eb43 0501 	adc.w	r5, r3, r1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	461a      	mov	r2, r3
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	4620      	mov	r0, r4
 8004df2:	4629      	mov	r1, r5
 8004df4:	f7fb fa7c 	bl	80002f0 <__aeabi_uldivmod>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e06:	d308      	bcc.n	8004e1a <UART_SetConfig+0x98e>
 8004e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e0e:	d204      	bcs.n	8004e1a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e16:	60da      	str	r2, [r3, #12]
 8004e18:	e17f      	b.n	800511a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004e20:	e17b      	b.n	800511a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e2a:	f040 80bd 	bne.w	8004fa8 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8004e2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	dc48      	bgt.n	8004ec8 <UART_SetConfig+0xa3c>
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	db7b      	blt.n	8004f32 <UART_SetConfig+0xaa6>
 8004e3a:	2b20      	cmp	r3, #32
 8004e3c:	d879      	bhi.n	8004f32 <UART_SetConfig+0xaa6>
 8004e3e:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <UART_SetConfig+0x9b8>)
 8004e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e44:	08004ecf 	.word	0x08004ecf
 8004e48:	08004ed7 	.word	0x08004ed7
 8004e4c:	08004f33 	.word	0x08004f33
 8004e50:	08004f33 	.word	0x08004f33
 8004e54:	08004edf 	.word	0x08004edf
 8004e58:	08004f33 	.word	0x08004f33
 8004e5c:	08004f33 	.word	0x08004f33
 8004e60:	08004f33 	.word	0x08004f33
 8004e64:	08004eef 	.word	0x08004eef
 8004e68:	08004f33 	.word	0x08004f33
 8004e6c:	08004f33 	.word	0x08004f33
 8004e70:	08004f33 	.word	0x08004f33
 8004e74:	08004f33 	.word	0x08004f33
 8004e78:	08004f33 	.word	0x08004f33
 8004e7c:	08004f33 	.word	0x08004f33
 8004e80:	08004f33 	.word	0x08004f33
 8004e84:	08004eff 	.word	0x08004eff
 8004e88:	08004f33 	.word	0x08004f33
 8004e8c:	08004f33 	.word	0x08004f33
 8004e90:	08004f33 	.word	0x08004f33
 8004e94:	08004f33 	.word	0x08004f33
 8004e98:	08004f33 	.word	0x08004f33
 8004e9c:	08004f33 	.word	0x08004f33
 8004ea0:	08004f33 	.word	0x08004f33
 8004ea4:	08004f33 	.word	0x08004f33
 8004ea8:	08004f33 	.word	0x08004f33
 8004eac:	08004f33 	.word	0x08004f33
 8004eb0:	08004f33 	.word	0x08004f33
 8004eb4:	08004f33 	.word	0x08004f33
 8004eb8:	08004f33 	.word	0x08004f33
 8004ebc:	08004f33 	.word	0x08004f33
 8004ec0:	08004f33 	.word	0x08004f33
 8004ec4:	08004f25 	.word	0x08004f25
 8004ec8:	2b40      	cmp	r3, #64	; 0x40
 8004eca:	d02e      	beq.n	8004f2a <UART_SetConfig+0xa9e>
 8004ecc:	e031      	b.n	8004f32 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ece:	f7fd faad 	bl	800242c <HAL_RCC_GetPCLK1Freq>
 8004ed2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004ed4:	e033      	b.n	8004f3e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ed6:	f7fd fabf 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 8004eda:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004edc:	e02f      	b.n	8004f3e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ede:	f107 0314 	add.w	r3, r7, #20
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe fa32 	bl	800334c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004eec:	e027      	b.n	8004f3e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004eee:	f107 0308 	add.w	r3, r7, #8
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fe fb7e 	bl	80035f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004efc:	e01f      	b.n	8004f3e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004efe:	4b6e      	ldr	r3, [pc, #440]	; (80050b8 <UART_SetConfig+0xc2c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0320 	and.w	r3, r3, #32
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d009      	beq.n	8004f1e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f0a:	4b6b      	ldr	r3, [pc, #428]	; (80050b8 <UART_SetConfig+0xc2c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	08db      	lsrs	r3, r3, #3
 8004f10:	f003 0303 	and.w	r3, r3, #3
 8004f14:	4a69      	ldr	r2, [pc, #420]	; (80050bc <UART_SetConfig+0xc30>)
 8004f16:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f1c:	e00f      	b.n	8004f3e <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8004f1e:	4b67      	ldr	r3, [pc, #412]	; (80050bc <UART_SetConfig+0xc30>)
 8004f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f22:	e00c      	b.n	8004f3e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f24:	4b66      	ldr	r3, [pc, #408]	; (80050c0 <UART_SetConfig+0xc34>)
 8004f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f28:	e009      	b.n	8004f3e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f30:	e005      	b.n	8004f3e <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004f3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 80ea 	beq.w	800511a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	4a5a      	ldr	r2, [pc, #360]	; (80050b4 <UART_SetConfig+0xc28>)
 8004f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f50:	461a      	mov	r2, r3
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f58:	005a      	lsls	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	441a      	add	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6e:	2b0f      	cmp	r3, #15
 8004f70:	d916      	bls.n	8004fa0 <UART_SetConfig+0xb14>
 8004f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f78:	d212      	bcs.n	8004fa0 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f023 030f 	bic.w	r3, r3, #15
 8004f82:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	085b      	lsrs	r3, r3, #1
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f92:	4313      	orrs	r3, r2
 8004f94:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004f9c:	60da      	str	r2, [r3, #12]
 8004f9e:	e0bc      	b.n	800511a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004fa6:	e0b8      	b.n	800511a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fa8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	dc4b      	bgt.n	8005048 <UART_SetConfig+0xbbc>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f2c0 8087 	blt.w	80050c4 <UART_SetConfig+0xc38>
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	f200 8084 	bhi.w	80050c4 <UART_SetConfig+0xc38>
 8004fbc:	a201      	add	r2, pc, #4	; (adr r2, 8004fc4 <UART_SetConfig+0xb38>)
 8004fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc2:	bf00      	nop
 8004fc4:	0800504f 	.word	0x0800504f
 8004fc8:	08005057 	.word	0x08005057
 8004fcc:	080050c5 	.word	0x080050c5
 8004fd0:	080050c5 	.word	0x080050c5
 8004fd4:	0800505f 	.word	0x0800505f
 8004fd8:	080050c5 	.word	0x080050c5
 8004fdc:	080050c5 	.word	0x080050c5
 8004fe0:	080050c5 	.word	0x080050c5
 8004fe4:	0800506f 	.word	0x0800506f
 8004fe8:	080050c5 	.word	0x080050c5
 8004fec:	080050c5 	.word	0x080050c5
 8004ff0:	080050c5 	.word	0x080050c5
 8004ff4:	080050c5 	.word	0x080050c5
 8004ff8:	080050c5 	.word	0x080050c5
 8004ffc:	080050c5 	.word	0x080050c5
 8005000:	080050c5 	.word	0x080050c5
 8005004:	0800507f 	.word	0x0800507f
 8005008:	080050c5 	.word	0x080050c5
 800500c:	080050c5 	.word	0x080050c5
 8005010:	080050c5 	.word	0x080050c5
 8005014:	080050c5 	.word	0x080050c5
 8005018:	080050c5 	.word	0x080050c5
 800501c:	080050c5 	.word	0x080050c5
 8005020:	080050c5 	.word	0x080050c5
 8005024:	080050c5 	.word	0x080050c5
 8005028:	080050c5 	.word	0x080050c5
 800502c:	080050c5 	.word	0x080050c5
 8005030:	080050c5 	.word	0x080050c5
 8005034:	080050c5 	.word	0x080050c5
 8005038:	080050c5 	.word	0x080050c5
 800503c:	080050c5 	.word	0x080050c5
 8005040:	080050c5 	.word	0x080050c5
 8005044:	080050a5 	.word	0x080050a5
 8005048:	2b40      	cmp	r3, #64	; 0x40
 800504a:	d02e      	beq.n	80050aa <UART_SetConfig+0xc1e>
 800504c:	e03a      	b.n	80050c4 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800504e:	f7fd f9ed 	bl	800242c <HAL_RCC_GetPCLK1Freq>
 8005052:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005054:	e03c      	b.n	80050d0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005056:	f7fd f9ff 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 800505a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800505c:	e038      	b.n	80050d0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800505e:	f107 0314 	add.w	r3, r7, #20
 8005062:	4618      	mov	r0, r3
 8005064:	f7fe f972 	bl	800334c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800506c:	e030      	b.n	80050d0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800506e:	f107 0308 	add.w	r3, r7, #8
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe fabe 	bl	80035f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800507c:	e028      	b.n	80050d0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800507e:	4b0e      	ldr	r3, [pc, #56]	; (80050b8 <UART_SetConfig+0xc2c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b00      	cmp	r3, #0
 8005088:	d009      	beq.n	800509e <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800508a:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <UART_SetConfig+0xc2c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	08db      	lsrs	r3, r3, #3
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	4a09      	ldr	r2, [pc, #36]	; (80050bc <UART_SetConfig+0xc30>)
 8005096:	fa22 f303 	lsr.w	r3, r2, r3
 800509a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800509c:	e018      	b.n	80050d0 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800509e:	4b07      	ldr	r3, [pc, #28]	; (80050bc <UART_SetConfig+0xc30>)
 80050a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050a2:	e015      	b.n	80050d0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80050a4:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <UART_SetConfig+0xc34>)
 80050a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050a8:	e012      	b.n	80050d0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050b0:	e00e      	b.n	80050d0 <UART_SetConfig+0xc44>
 80050b2:	bf00      	nop
 80050b4:	080086e0 	.word	0x080086e0
 80050b8:	58024400 	.word	0x58024400
 80050bc:	03d09000 	.word	0x03d09000
 80050c0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80050ce:	bf00      	nop
    }

    if (pclk != 0U)
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d021      	beq.n	800511a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	4a1a      	ldr	r2, [pc, #104]	; (8005144 <UART_SetConfig+0xcb8>)
 80050dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050e0:	461a      	mov	r2, r3
 80050e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	085b      	lsrs	r3, r3, #1
 80050ee:	441a      	add	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fc:	2b0f      	cmp	r3, #15
 80050fe:	d909      	bls.n	8005114 <UART_SetConfig+0xc88>
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005106:	d205      	bcs.n	8005114 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	b29a      	uxth	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60da      	str	r2, [r3, #12]
 8005112:	e002      	b.n	800511a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005136:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800513a:	4618      	mov	r0, r3
 800513c:	3738      	adds	r7, #56	; 0x38
 800513e:	46bd      	mov	sp, r7
 8005140:	bdb0      	pop	{r4, r5, r7, pc}
 8005142:	bf00      	nop
 8005144:	080086e0 	.word	0x080086e0

08005148 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	f003 0310 	and.w	r3, r3, #16
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01a      	beq.n	800525e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005246:	d10a      	bne.n	800525e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	605a      	str	r2, [r3, #4]
  }
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af02      	add	r7, sp, #8
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800529c:	f7fb fe52 	bl	8000f44 <HAL_GetTick>
 80052a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0308 	and.w	r3, r3, #8
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d10e      	bne.n	80052ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f82f 	bl	8005322 <UART_WaitOnFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e025      	b.n	800531a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b04      	cmp	r3, #4
 80052da:	d10e      	bne.n	80052fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f819 	bl	8005322 <UART_WaitOnFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e00f      	b.n	800531a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b09c      	sub	sp, #112	; 0x70
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	603b      	str	r3, [r7, #0]
 800532e:	4613      	mov	r3, r2
 8005330:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005332:	e0a9      	b.n	8005488 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800533a:	f000 80a5 	beq.w	8005488 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533e:	f7fb fe01 	bl	8000f44 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800534a:	429a      	cmp	r2, r3
 800534c:	d302      	bcc.n	8005354 <UART_WaitOnFlagUntilTimeout+0x32>
 800534e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005350:	2b00      	cmp	r3, #0
 8005352:	d140      	bne.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005364:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005368:	667b      	str	r3, [r7, #100]	; 0x64
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005372:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005374:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005378:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e6      	bne.n	8005354 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3308      	adds	r3, #8
 800538c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	f023 0301 	bic.w	r3, r3, #1
 800539c:	663b      	str	r3, [r7, #96]	; 0x60
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3308      	adds	r3, #8
 80053a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80053a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1e5      	bne.n	8005386 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2220      	movs	r2, #32
 80053be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e069      	b.n	80054aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d051      	beq.n	8005488 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f2:	d149      	bne.n	8005488 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	e853 3f00 	ldrex	r3, [r3]
 800540a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005412:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	461a      	mov	r2, r3
 800541a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541c:	637b      	str	r3, [r7, #52]	; 0x34
 800541e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e6      	bne.n	80053fe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3308      	adds	r3, #8
 8005436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	613b      	str	r3, [r7, #16]
   return(result);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f023 0301 	bic.w	r3, r3, #1
 8005446:	66bb      	str	r3, [r7, #104]	; 0x68
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3308      	adds	r3, #8
 800544e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005450:	623a      	str	r2, [r7, #32]
 8005452:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	69f9      	ldr	r1, [r7, #28]
 8005456:	6a3a      	ldr	r2, [r7, #32]
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	61bb      	str	r3, [r7, #24]
   return(result);
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e5      	bne.n	8005430 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2220      	movs	r2, #32
 8005478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e010      	b.n	80054aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69da      	ldr	r2, [r3, #28]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	4013      	ands	r3, r2
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	429a      	cmp	r2, r3
 8005496:	bf0c      	ite	eq
 8005498:	2301      	moveq	r3, #1
 800549a:	2300      	movne	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	461a      	mov	r2, r3
 80054a0:	79fb      	ldrb	r3, [r7, #7]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	f43f af46 	beq.w	8005334 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3770      	adds	r7, #112	; 0x70
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e027      	b.n	8005518 <HAL_UARTEx_DisableFifoMode+0x66>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2224      	movs	r2, #36	; 0x24
 80054d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0201 	bic.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80054f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005538:	2302      	movs	r3, #2
 800553a:	e02d      	b.n	8005598 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2224      	movs	r2, #36	; 0x24
 8005548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0201 	bic.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f84f 	bl	800561c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2220      	movs	r2, #32
 800558a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e02d      	b.n	8005614 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2224      	movs	r2, #36	; 0x24
 80055c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0201 	bic.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f811 	bl	800561c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2220      	movs	r2, #32
 8005606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005628:	2b00      	cmp	r3, #0
 800562a:	d108      	bne.n	800563e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800563c:	e031      	b.n	80056a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800563e:	2310      	movs	r3, #16
 8005640:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005642:	2310      	movs	r3, #16
 8005644:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	0e5b      	lsrs	r3, r3, #25
 800564e:	b2db      	uxtb	r3, r3
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	0f5b      	lsrs	r3, r3, #29
 800565e:	b2db      	uxtb	r3, r3
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005666:	7bbb      	ldrb	r3, [r7, #14]
 8005668:	7b3a      	ldrb	r2, [r7, #12]
 800566a:	4911      	ldr	r1, [pc, #68]	; (80056b0 <UARTEx_SetNbDataToProcess+0x94>)
 800566c:	5c8a      	ldrb	r2, [r1, r2]
 800566e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005672:	7b3a      	ldrb	r2, [r7, #12]
 8005674:	490f      	ldr	r1, [pc, #60]	; (80056b4 <UARTEx_SetNbDataToProcess+0x98>)
 8005676:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005678:	fb93 f3f2 	sdiv	r3, r3, r2
 800567c:	b29a      	uxth	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	7b7a      	ldrb	r2, [r7, #13]
 8005688:	4909      	ldr	r1, [pc, #36]	; (80056b0 <UARTEx_SetNbDataToProcess+0x94>)
 800568a:	5c8a      	ldrb	r2, [r1, r2]
 800568c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005690:	7b7a      	ldrb	r2, [r7, #13]
 8005692:	4908      	ldr	r1, [pc, #32]	; (80056b4 <UARTEx_SetNbDataToProcess+0x98>)
 8005694:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005696:	fb93 f3f2 	sdiv	r3, r3, r2
 800569a:	b29a      	uxth	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056a2:	bf00      	nop
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	080086f8 	.word	0x080086f8
 80056b4:	08008700 	.word	0x08008700

080056b8 <__NVIC_SetPriority>:
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	6039      	str	r1, [r7, #0]
 80056c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80056c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	db0a      	blt.n	80056e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	490c      	ldr	r1, [pc, #48]	; (8005704 <__NVIC_SetPriority+0x4c>)
 80056d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056d6:	0112      	lsls	r2, r2, #4
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	440b      	add	r3, r1
 80056dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80056e0:	e00a      	b.n	80056f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	4908      	ldr	r1, [pc, #32]	; (8005708 <__NVIC_SetPriority+0x50>)
 80056e8:	88fb      	ldrh	r3, [r7, #6]
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	3b04      	subs	r3, #4
 80056f0:	0112      	lsls	r2, r2, #4
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	440b      	add	r3, r1
 80056f6:	761a      	strb	r2, [r3, #24]
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	e000e100 	.word	0xe000e100
 8005708:	e000ed00 	.word	0xe000ed00

0800570c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <SysTick_Handler+0x1c>)
 8005712:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005714:	f001 fdd4 	bl	80072c0 <xTaskGetSchedulerState>
 8005718:	4603      	mov	r3, r0
 800571a:	2b01      	cmp	r3, #1
 800571c:	d001      	beq.n	8005722 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800571e:	f002 fbbb 	bl	8007e98 <xPortSysTickHandler>
  }
}
 8005722:	bf00      	nop
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	e000e010 	.word	0xe000e010

0800572c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005730:	2100      	movs	r1, #0
 8005732:	f06f 0004 	mvn.w	r0, #4
 8005736:	f7ff ffbf 	bl	80056b8 <__NVIC_SetPriority>
#endif
}
 800573a:	bf00      	nop
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005746:	f3ef 8305 	mrs	r3, IPSR
 800574a:	603b      	str	r3, [r7, #0]
  return(result);
 800574c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005752:	f06f 0305 	mvn.w	r3, #5
 8005756:	607b      	str	r3, [r7, #4]
 8005758:	e00c      	b.n	8005774 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800575a:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <osKernelInitialize+0x44>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d105      	bne.n	800576e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005762:	4b08      	ldr	r3, [pc, #32]	; (8005784 <osKernelInitialize+0x44>)
 8005764:	2201      	movs	r2, #1
 8005766:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005768:	2300      	movs	r3, #0
 800576a:	607b      	str	r3, [r7, #4]
 800576c:	e002      	b.n	8005774 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800576e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005772:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005774:	687b      	ldr	r3, [r7, #4]
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	24000094 	.word	0x24000094

08005788 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800578e:	f3ef 8305 	mrs	r3, IPSR
 8005792:	603b      	str	r3, [r7, #0]
  return(result);
 8005794:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800579a:	f06f 0305 	mvn.w	r3, #5
 800579e:	607b      	str	r3, [r7, #4]
 80057a0:	e010      	b.n	80057c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80057a2:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <osKernelStart+0x48>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d109      	bne.n	80057be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80057aa:	f7ff ffbf 	bl	800572c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80057ae:	4b08      	ldr	r3, [pc, #32]	; (80057d0 <osKernelStart+0x48>)
 80057b0:	2202      	movs	r2, #2
 80057b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80057b4:	f001 f928 	bl	8006a08 <vTaskStartScheduler>
      stat = osOK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	607b      	str	r3, [r7, #4]
 80057bc:	e002      	b.n	80057c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80057be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80057c4:	687b      	ldr	r3, [r7, #4]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	24000094 	.word	0x24000094

080057d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08e      	sub	sp, #56	; 0x38
 80057d8:	af04      	add	r7, sp, #16
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057e4:	f3ef 8305 	mrs	r3, IPSR
 80057e8:	617b      	str	r3, [r7, #20]
  return(result);
 80057ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d17e      	bne.n	80058ee <osThreadNew+0x11a>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d07b      	beq.n	80058ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80057f6:	2380      	movs	r3, #128	; 0x80
 80057f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80057fa:	2318      	movs	r3, #24
 80057fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005806:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d045      	beq.n	800589a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <osThreadNew+0x48>
        name = attr->name;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d008      	beq.n	8005842 <osThreadNew+0x6e>
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	2b38      	cmp	r3, #56	; 0x38
 8005834:	d805      	bhi.n	8005842 <osThreadNew+0x6e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <osThreadNew+0x72>
        return (NULL);
 8005842:	2300      	movs	r3, #0
 8005844:	e054      	b.n	80058f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	089b      	lsrs	r3, r3, #2
 8005854:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00e      	beq.n	800587c <osThreadNew+0xa8>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	2bbb      	cmp	r3, #187	; 0xbb
 8005864:	d90a      	bls.n	800587c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800586a:	2b00      	cmp	r3, #0
 800586c:	d006      	beq.n	800587c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <osThreadNew+0xa8>
        mem = 1;
 8005876:	2301      	movs	r3, #1
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	e010      	b.n	800589e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10c      	bne.n	800589e <osThreadNew+0xca>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d108      	bne.n	800589e <osThreadNew+0xca>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d104      	bne.n	800589e <osThreadNew+0xca>
          mem = 0;
 8005894:	2300      	movs	r3, #0
 8005896:	61bb      	str	r3, [r7, #24]
 8005898:	e001      	b.n	800589e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800589a:	2300      	movs	r3, #0
 800589c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d110      	bne.n	80058c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058ac:	9202      	str	r2, [sp, #8]
 80058ae:	9301      	str	r3, [sp, #4]
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	6a3a      	ldr	r2, [r7, #32]
 80058b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 feb8 	bl	8006630 <xTaskCreateStatic>
 80058c0:	4603      	mov	r3, r0
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	e013      	b.n	80058ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d110      	bne.n	80058ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	f107 0310 	add.w	r3, r7, #16
 80058d4:	9301      	str	r3, [sp, #4]
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 ff03 	bl	80066ea <xTaskCreate>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d001      	beq.n	80058ee <osThreadNew+0x11a>
            hTask = NULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80058ee:	693b      	ldr	r3, [r7, #16]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3728      	adds	r7, #40	; 0x28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005900:	f3ef 8305 	mrs	r3, IPSR
 8005904:	60bb      	str	r3, [r7, #8]
  return(result);
 8005906:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <osDelay+0x1c>
    stat = osErrorISR;
 800590c:	f06f 0305 	mvn.w	r3, #5
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	e007      	b.n	8005924 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005914:	2300      	movs	r3, #0
 8005916:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <osDelay+0x2c>
      vTaskDelay(ticks);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f001 f83e 	bl	80069a0 <vTaskDelay>
    }
  }

  return (stat);
 8005924:	68fb      	ldr	r3, [r7, #12]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800592e:	b580      	push	{r7, lr}
 8005930:	b08a      	sub	sp, #40	; 0x28
 8005932:	af02      	add	r7, sp, #8
 8005934:	60f8      	str	r0, [r7, #12]
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800593a:	2300      	movs	r3, #0
 800593c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800593e:	f3ef 8305 	mrs	r3, IPSR
 8005942:	613b      	str	r3, [r7, #16]
  return(result);
 8005944:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005946:	2b00      	cmp	r3, #0
 8005948:	d15f      	bne.n	8005a0a <osMessageQueueNew+0xdc>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d05c      	beq.n	8005a0a <osMessageQueueNew+0xdc>
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d059      	beq.n	8005a0a <osMessageQueueNew+0xdc>
    mem = -1;
 8005956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800595a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d029      	beq.n	80059b6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d012      	beq.n	8005990 <osMessageQueueNew+0x62>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	2b4f      	cmp	r3, #79	; 0x4f
 8005970:	d90e      	bls.n	8005990 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	695a      	ldr	r2, [r3, #20]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	fb01 f303 	mul.w	r3, r1, r3
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <osMessageQueueNew+0x62>
        mem = 1;
 800598a:	2301      	movs	r3, #1
 800598c:	61bb      	str	r3, [r7, #24]
 800598e:	e014      	b.n	80059ba <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d110      	bne.n	80059ba <osMessageQueueNew+0x8c>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10c      	bne.n	80059ba <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d108      	bne.n	80059ba <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d104      	bne.n	80059ba <osMessageQueueNew+0x8c>
          mem = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	61bb      	str	r3, [r7, #24]
 80059b4:	e001      	b.n	80059ba <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80059b6:	2300      	movs	r3, #0
 80059b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d10b      	bne.n	80059d8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	2100      	movs	r1, #0
 80059ca:	9100      	str	r1, [sp, #0]
 80059cc:	68b9      	ldr	r1, [r7, #8]
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 f970 	bl	8005cb4 <xQueueGenericCreateStatic>
 80059d4:	61f8      	str	r0, [r7, #28]
 80059d6:	e008      	b.n	80059ea <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d105      	bne.n	80059ea <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80059de:	2200      	movs	r2, #0
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 f9de 	bl	8005da4 <xQueueGenericCreate>
 80059e8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00c      	beq.n	8005a0a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <osMessageQueueNew+0xd0>
        name = attr->name;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	e001      	b.n	8005a02 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005a02:	6979      	ldr	r1, [r7, #20]
 8005a04:	69f8      	ldr	r0, [r7, #28]
 8005a06:	f000 fdb5 	bl	8006574 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005a0a:	69fb      	ldr	r3, [r7, #28]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3720      	adds	r7, #32
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4a07      	ldr	r2, [pc, #28]	; (8005a40 <vApplicationGetIdleTaskMemory+0x2c>)
 8005a24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	4a06      	ldr	r2, [pc, #24]	; (8005a44 <vApplicationGetIdleTaskMemory+0x30>)
 8005a2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2280      	movs	r2, #128	; 0x80
 8005a30:	601a      	str	r2, [r3, #0]
}
 8005a32:	bf00      	nop
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	24000098 	.word	0x24000098
 8005a44:	24000154 	.word	0x24000154

08005a48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4a07      	ldr	r2, [pc, #28]	; (8005a74 <vApplicationGetTimerTaskMemory+0x2c>)
 8005a58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	4a06      	ldr	r2, [pc, #24]	; (8005a78 <vApplicationGetTimerTaskMemory+0x30>)
 8005a5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a66:	601a      	str	r2, [r3, #0]
}
 8005a68:	bf00      	nop
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	24000354 	.word	0x24000354
 8005a78:	24000410 	.word	0x24000410

08005a7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f103 0208 	add.w	r2, r3, #8
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f103 0208 	add.w	r2, r3, #8
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f103 0208 	add.w	r2, r3, #8
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b085      	sub	sp, #20
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	601a      	str	r2, [r3, #0]
}
 8005b12:	bf00      	nop
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b34:	d103      	bne.n	8005b3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	e00c      	b.n	8005b58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3308      	adds	r3, #8
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	e002      	b.n	8005b4c <vListInsert+0x2e>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d2f6      	bcs.n	8005b46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	601a      	str	r2, [r3, #0]
}
 8005b84:	bf00      	nop
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6892      	ldr	r2, [r2, #8]
 8005ba6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	6852      	ldr	r2, [r2, #4]
 8005bb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d103      	bne.n	8005bc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	1e5a      	subs	r2, r3, #1
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10a      	bne.n	8005c0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c0a:	bf00      	nop
 8005c0c:	e7fe      	b.n	8005c0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c0e:	f002 f8b1 	bl	8007d74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1a:	68f9      	ldr	r1, [r7, #12]
 8005c1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c1e:	fb01 f303 	mul.w	r3, r1, r3
 8005c22:	441a      	add	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	68f9      	ldr	r1, [r7, #12]
 8005c42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c44:	fb01 f303 	mul.w	r3, r1, r3
 8005c48:	441a      	add	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	22ff      	movs	r2, #255	; 0xff
 8005c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	22ff      	movs	r2, #255	; 0xff
 8005c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d114      	bne.n	8005c8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d01a      	beq.n	8005ca2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3310      	adds	r3, #16
 8005c70:	4618      	mov	r0, r3
 8005c72:	f001 f963 	bl	8006f3c <xTaskRemoveFromEventList>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d012      	beq.n	8005ca2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c7c:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <xQueueGenericReset+0xcc>)
 8005c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	e009      	b.n	8005ca2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	3310      	adds	r3, #16
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff fef2 	bl	8005a7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	3324      	adds	r3, #36	; 0x24
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff feed 	bl	8005a7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ca2:	f002 f897 	bl	8007dd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ca6:	2301      	movs	r3, #1
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	e000ed04 	.word	0xe000ed04

08005cb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b08e      	sub	sp, #56	; 0x38
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
 8005cc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10a      	bne.n	8005cde <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cda:	bf00      	nop
 8005cdc:	e7fe      	b.n	8005cdc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cf6:	bf00      	nop
 8005cf8:	e7fe      	b.n	8005cf8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <xQueueGenericCreateStatic+0x52>
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <xQueueGenericCreateStatic+0x56>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e000      	b.n	8005d0c <xQueueGenericCreateStatic+0x58>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10a      	bne.n	8005d26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	623b      	str	r3, [r7, #32]
}
 8005d22:	bf00      	nop
 8005d24:	e7fe      	b.n	8005d24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d102      	bne.n	8005d32 <xQueueGenericCreateStatic+0x7e>
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <xQueueGenericCreateStatic+0x82>
 8005d32:	2301      	movs	r3, #1
 8005d34:	e000      	b.n	8005d38 <xQueueGenericCreateStatic+0x84>
 8005d36:	2300      	movs	r3, #0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10a      	bne.n	8005d52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	61fb      	str	r3, [r7, #28]
}
 8005d4e:	bf00      	nop
 8005d50:	e7fe      	b.n	8005d50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d52:	2350      	movs	r3, #80	; 0x50
 8005d54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b50      	cmp	r3, #80	; 0x50
 8005d5a:	d00a      	beq.n	8005d72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	61bb      	str	r3, [r7, #24]
}
 8005d6e:	bf00      	nop
 8005d70:	e7fe      	b.n	8005d70 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d72:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00d      	beq.n	8005d9a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	68b9      	ldr	r1, [r7, #8]
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 f83f 	bl	8005e18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3730      	adds	r7, #48	; 0x30
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08a      	sub	sp, #40	; 0x28
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	4613      	mov	r3, r2
 8005db0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <xQueueGenericCreate+0x2a>
	__asm volatile
 8005db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	613b      	str	r3, [r7, #16]
}
 8005dca:	bf00      	nop
 8005dcc:	e7fe      	b.n	8005dcc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	fb02 f303 	mul.w	r3, r2, r3
 8005dd6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	3350      	adds	r3, #80	; 0x50
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f002 f8eb 	bl	8007fb8 <pvPortMalloc>
 8005de2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d011      	beq.n	8005e0e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	3350      	adds	r3, #80	; 0x50
 8005df2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005dfc:	79fa      	ldrb	r2, [r7, #7]
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	4613      	mov	r3, r2
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 f805 	bl	8005e18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
	}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3720      	adds	r7, #32
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d103      	bne.n	8005e34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	e002      	b.n	8005e3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e46:	2101      	movs	r1, #1
 8005e48:	69b8      	ldr	r0, [r7, #24]
 8005e4a:	f7ff fecb 	bl	8005be4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	78fa      	ldrb	r2, [r7, #3]
 8005e52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e56:	bf00      	nop
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08e      	sub	sp, #56	; 0x38
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <xQueueGenericSend+0x32>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d103      	bne.n	8005ea0 <xQueueGenericSend+0x40>
 8005e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <xQueueGenericSend+0x44>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e000      	b.n	8005ea6 <xQueueGenericSend+0x46>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10a      	bne.n	8005ec0 <xQueueGenericSend+0x60>
	__asm volatile
 8005eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ebc:	bf00      	nop
 8005ebe:	e7fe      	b.n	8005ebe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d103      	bne.n	8005ece <xQueueGenericSend+0x6e>
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d101      	bne.n	8005ed2 <xQueueGenericSend+0x72>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e000      	b.n	8005ed4 <xQueueGenericSend+0x74>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <xQueueGenericSend+0x8e>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	623b      	str	r3, [r7, #32]
}
 8005eea:	bf00      	nop
 8005eec:	e7fe      	b.n	8005eec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005eee:	f001 f9e7 	bl	80072c0 <xTaskGetSchedulerState>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d102      	bne.n	8005efe <xQueueGenericSend+0x9e>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <xQueueGenericSend+0xa2>
 8005efe:	2301      	movs	r3, #1
 8005f00:	e000      	b.n	8005f04 <xQueueGenericSend+0xa4>
 8005f02:	2300      	movs	r3, #0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10a      	bne.n	8005f1e <xQueueGenericSend+0xbe>
	__asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	61fb      	str	r3, [r7, #28]
}
 8005f1a:	bf00      	nop
 8005f1c:	e7fe      	b.n	8005f1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f1e:	f001 ff29 	bl	8007d74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d302      	bcc.n	8005f34 <xQueueGenericSend+0xd4>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d129      	bne.n	8005f88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	68b9      	ldr	r1, [r7, #8]
 8005f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f3a:	f000 fa0b 	bl	8006354 <prvCopyDataToQueue>
 8005f3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d010      	beq.n	8005f6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4a:	3324      	adds	r3, #36	; 0x24
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 fff5 	bl	8006f3c <xTaskRemoveFromEventList>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d013      	beq.n	8005f80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f58:	4b3f      	ldr	r3, [pc, #252]	; (8006058 <xQueueGenericSend+0x1f8>)
 8005f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	e00a      	b.n	8005f80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d007      	beq.n	8005f80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f70:	4b39      	ldr	r3, [pc, #228]	; (8006058 <xQueueGenericSend+0x1f8>)
 8005f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f80:	f001 ff28 	bl	8007dd4 <vPortExitCritical>
				return pdPASS;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e063      	b.n	8006050 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d103      	bne.n	8005f96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f8e:	f001 ff21 	bl	8007dd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	e05c      	b.n	8006050 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d106      	bne.n	8005faa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f9c:	f107 0314 	add.w	r3, r7, #20
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f001 f82f 	bl	8007004 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005faa:	f001 ff13 	bl	8007dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fae:	f000 fd9b 	bl	8006ae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fb2:	f001 fedf 	bl	8007d74 <vPortEnterCritical>
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fbc:	b25b      	sxtb	r3, r3
 8005fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fc2:	d103      	bne.n	8005fcc <xQueueGenericSend+0x16c>
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fd2:	b25b      	sxtb	r3, r3
 8005fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fd8:	d103      	bne.n	8005fe2 <xQueueGenericSend+0x182>
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fe2:	f001 fef7 	bl	8007dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fe6:	1d3a      	adds	r2, r7, #4
 8005fe8:	f107 0314 	add.w	r3, r7, #20
 8005fec:	4611      	mov	r1, r2
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f001 f81e 	bl	8007030 <xTaskCheckForTimeOut>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d124      	bne.n	8006044 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ffa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ffc:	f000 faa2 	bl	8006544 <prvIsQueueFull>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d018      	beq.n	8006038 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	3310      	adds	r3, #16
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	4611      	mov	r1, r2
 800600e:	4618      	mov	r0, r3
 8006010:	f000 ff44 	bl	8006e9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006016:	f000 fa2d 	bl	8006474 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800601a:	f000 fd73 	bl	8006b04 <xTaskResumeAll>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	f47f af7c 	bne.w	8005f1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006026:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <xQueueGenericSend+0x1f8>)
 8006028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	e772      	b.n	8005f1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800603a:	f000 fa1b 	bl	8006474 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800603e:	f000 fd61 	bl	8006b04 <xTaskResumeAll>
 8006042:	e76c      	b.n	8005f1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006046:	f000 fa15 	bl	8006474 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800604a:	f000 fd5b 	bl	8006b04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800604e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006050:	4618      	mov	r0, r3
 8006052:	3738      	adds	r7, #56	; 0x38
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	e000ed04 	.word	0xe000ed04

0800605c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b090      	sub	sp, #64	; 0x40
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800606e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10a      	bne.n	800608a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006086:	bf00      	nop
 8006088:	e7fe      	b.n	8006088 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d103      	bne.n	8006098 <xQueueGenericSendFromISR+0x3c>
 8006090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <xQueueGenericSendFromISR+0x40>
 8006098:	2301      	movs	r3, #1
 800609a:	e000      	b.n	800609e <xQueueGenericSendFromISR+0x42>
 800609c:	2300      	movs	r3, #0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10a      	bne.n	80060b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060b4:	bf00      	nop
 80060b6:	e7fe      	b.n	80060b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d103      	bne.n	80060c6 <xQueueGenericSendFromISR+0x6a>
 80060be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d101      	bne.n	80060ca <xQueueGenericSendFromISR+0x6e>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <xQueueGenericSendFromISR+0x70>
 80060ca:	2300      	movs	r3, #0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10a      	bne.n	80060e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	623b      	str	r3, [r7, #32]
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060e6:	f001 ff27 	bl	8007f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060ea:	f3ef 8211 	mrs	r2, BASEPRI
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	61fa      	str	r2, [r7, #28]
 8006100:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006102:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006104:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800610a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610e:	429a      	cmp	r2, r3
 8006110:	d302      	bcc.n	8006118 <xQueueGenericSendFromISR+0xbc>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d12f      	bne.n	8006178 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800611e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006126:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800612e:	f000 f911 	bl	8006354 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006132:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800613a:	d112      	bne.n	8006162 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	2b00      	cmp	r3, #0
 8006142:	d016      	beq.n	8006172 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	3324      	adds	r3, #36	; 0x24
 8006148:	4618      	mov	r0, r3
 800614a:	f000 fef7 	bl	8006f3c <xTaskRemoveFromEventList>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00e      	beq.n	8006172 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00b      	beq.n	8006172 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	e007      	b.n	8006172 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006162:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006166:	3301      	adds	r3, #1
 8006168:	b2db      	uxtb	r3, r3
 800616a:	b25a      	sxtb	r2, r3
 800616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006172:	2301      	movs	r3, #1
 8006174:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006176:	e001      	b.n	800617c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006178:	2300      	movs	r3, #0
 800617a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800617c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006186:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800618a:	4618      	mov	r0, r3
 800618c:	3740      	adds	r7, #64	; 0x40
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
	...

08006194 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08c      	sub	sp, #48	; 0x30
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061a0:	2300      	movs	r3, #0
 80061a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10a      	bne.n	80061c4 <xQueueReceive+0x30>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	623b      	str	r3, [r7, #32]
}
 80061c0:	bf00      	nop
 80061c2:	e7fe      	b.n	80061c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d103      	bne.n	80061d2 <xQueueReceive+0x3e>
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <xQueueReceive+0x42>
 80061d2:	2301      	movs	r3, #1
 80061d4:	e000      	b.n	80061d8 <xQueueReceive+0x44>
 80061d6:	2300      	movs	r3, #0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10a      	bne.n	80061f2 <xQueueReceive+0x5e>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	61fb      	str	r3, [r7, #28]
}
 80061ee:	bf00      	nop
 80061f0:	e7fe      	b.n	80061f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061f2:	f001 f865 	bl	80072c0 <xTaskGetSchedulerState>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d102      	bne.n	8006202 <xQueueReceive+0x6e>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <xQueueReceive+0x72>
 8006202:	2301      	movs	r3, #1
 8006204:	e000      	b.n	8006208 <xQueueReceive+0x74>
 8006206:	2300      	movs	r3, #0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10a      	bne.n	8006222 <xQueueReceive+0x8e>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	61bb      	str	r3, [r7, #24]
}
 800621e:	bf00      	nop
 8006220:	e7fe      	b.n	8006220 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006222:	f001 fda7 	bl	8007d74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	2b00      	cmp	r3, #0
 8006230:	d01f      	beq.n	8006272 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006232:	68b9      	ldr	r1, [r7, #8]
 8006234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006236:	f000 f8f7 	bl	8006428 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	1e5a      	subs	r2, r3, #1
 800623e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006240:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00f      	beq.n	800626a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624c:	3310      	adds	r3, #16
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fe74 	bl	8006f3c <xTaskRemoveFromEventList>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800625a:	4b3d      	ldr	r3, [pc, #244]	; (8006350 <xQueueReceive+0x1bc>)
 800625c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800626a:	f001 fdb3 	bl	8007dd4 <vPortExitCritical>
				return pdPASS;
 800626e:	2301      	movs	r3, #1
 8006270:	e069      	b.n	8006346 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d103      	bne.n	8006280 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006278:	f001 fdac 	bl	8007dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800627c:	2300      	movs	r3, #0
 800627e:	e062      	b.n	8006346 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	2b00      	cmp	r3, #0
 8006284:	d106      	bne.n	8006294 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006286:	f107 0310 	add.w	r3, r7, #16
 800628a:	4618      	mov	r0, r3
 800628c:	f000 feba 	bl	8007004 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006290:	2301      	movs	r3, #1
 8006292:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006294:	f001 fd9e 	bl	8007dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006298:	f000 fc26 	bl	8006ae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800629c:	f001 fd6a 	bl	8007d74 <vPortEnterCritical>
 80062a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062a6:	b25b      	sxtb	r3, r3
 80062a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ac:	d103      	bne.n	80062b6 <xQueueReceive+0x122>
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062bc:	b25b      	sxtb	r3, r3
 80062be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062c2:	d103      	bne.n	80062cc <xQueueReceive+0x138>
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062cc:	f001 fd82 	bl	8007dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062d0:	1d3a      	adds	r2, r7, #4
 80062d2:	f107 0310 	add.w	r3, r7, #16
 80062d6:	4611      	mov	r1, r2
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 fea9 	bl	8007030 <xTaskCheckForTimeOut>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d123      	bne.n	800632c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062e6:	f000 f917 	bl	8006518 <prvIsQueueEmpty>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d017      	beq.n	8006320 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	3324      	adds	r3, #36	; 0x24
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	4611      	mov	r1, r2
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fdcf 	bl	8006e9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006300:	f000 f8b8 	bl	8006474 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006304:	f000 fbfe 	bl	8006b04 <xTaskResumeAll>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d189      	bne.n	8006222 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800630e:	4b10      	ldr	r3, [pc, #64]	; (8006350 <xQueueReceive+0x1bc>)
 8006310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	e780      	b.n	8006222 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006322:	f000 f8a7 	bl	8006474 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006326:	f000 fbed 	bl	8006b04 <xTaskResumeAll>
 800632a:	e77a      	b.n	8006222 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800632c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800632e:	f000 f8a1 	bl	8006474 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006332:	f000 fbe7 	bl	8006b04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006338:	f000 f8ee 	bl	8006518 <prvIsQueueEmpty>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	f43f af6f 	beq.w	8006222 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006344:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006346:	4618      	mov	r0, r3
 8006348:	3730      	adds	r7, #48	; 0x30
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	e000ed04 	.word	0xe000ed04

08006354 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006360:	2300      	movs	r3, #0
 8006362:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10d      	bne.n	800638e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d14d      	bne.n	8006416 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	4618      	mov	r0, r3
 8006380:	f000 ffbc 	bl	80072fc <xTaskPriorityDisinherit>
 8006384:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	609a      	str	r2, [r3, #8]
 800638c:	e043      	b.n	8006416 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d119      	bne.n	80063c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6858      	ldr	r0, [r3, #4]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639c:	461a      	mov	r2, r3
 800639e:	68b9      	ldr	r1, [r7, #8]
 80063a0:	f002 f81a 	bl	80083d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ac:	441a      	add	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d32b      	bcc.n	8006416 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	605a      	str	r2, [r3, #4]
 80063c6:	e026      	b.n	8006416 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	68d8      	ldr	r0, [r3, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	461a      	mov	r2, r3
 80063d2:	68b9      	ldr	r1, [r7, #8]
 80063d4:	f002 f800 	bl	80083d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e0:	425b      	negs	r3, r3
 80063e2:	441a      	add	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d207      	bcs.n	8006404 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	425b      	negs	r3, r3
 80063fe:	441a      	add	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b02      	cmp	r3, #2
 8006408:	d105      	bne.n	8006416 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	3b01      	subs	r3, #1
 8006414:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800641e:	697b      	ldr	r3, [r7, #20]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d018      	beq.n	800646c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	441a      	add	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	429a      	cmp	r2, r3
 8006452:	d303      	bcc.n	800645c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68d9      	ldr	r1, [r3, #12]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006464:	461a      	mov	r2, r3
 8006466:	6838      	ldr	r0, [r7, #0]
 8006468:	f001 ffb6 	bl	80083d8 <memcpy>
	}
}
 800646c:	bf00      	nop
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800647c:	f001 fc7a 	bl	8007d74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006486:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006488:	e011      	b.n	80064ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	2b00      	cmp	r3, #0
 8006490:	d012      	beq.n	80064b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3324      	adds	r3, #36	; 0x24
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fd50 	bl	8006f3c <xTaskRemoveFromEventList>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064a2:	f000 fe27 	bl	80070f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	dce9      	bgt.n	800648a <prvUnlockQueue+0x16>
 80064b6:	e000      	b.n	80064ba <prvUnlockQueue+0x46>
					break;
 80064b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	22ff      	movs	r2, #255	; 0xff
 80064be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80064c2:	f001 fc87 	bl	8007dd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064c6:	f001 fc55 	bl	8007d74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064d2:	e011      	b.n	80064f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d012      	beq.n	8006502 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3310      	adds	r3, #16
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 fd2b 	bl	8006f3c <xTaskRemoveFromEventList>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80064ec:	f000 fe02 	bl	80070f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	dce9      	bgt.n	80064d4 <prvUnlockQueue+0x60>
 8006500:	e000      	b.n	8006504 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006502:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	22ff      	movs	r2, #255	; 0xff
 8006508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800650c:	f001 fc62 	bl	8007dd4 <vPortExitCritical>
}
 8006510:	bf00      	nop
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006520:	f001 fc28 	bl	8007d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	2b00      	cmp	r3, #0
 800652a:	d102      	bne.n	8006532 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800652c:	2301      	movs	r3, #1
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	e001      	b.n	8006536 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006532:	2300      	movs	r3, #0
 8006534:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006536:	f001 fc4d 	bl	8007dd4 <vPortExitCritical>

	return xReturn;
 800653a:	68fb      	ldr	r3, [r7, #12]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800654c:	f001 fc12 	bl	8007d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006558:	429a      	cmp	r2, r3
 800655a:	d102      	bne.n	8006562 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800655c:	2301      	movs	r3, #1
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	e001      	b.n	8006566 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006566:	f001 fc35 	bl	8007dd4 <vPortExitCritical>

	return xReturn;
 800656a:	68fb      	ldr	r3, [r7, #12]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]
 8006582:	e014      	b.n	80065ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006584:	4a0f      	ldr	r2, [pc, #60]	; (80065c4 <vQueueAddToRegistry+0x50>)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10b      	bne.n	80065a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006590:	490c      	ldr	r1, [pc, #48]	; (80065c4 <vQueueAddToRegistry+0x50>)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800659a:	4a0a      	ldr	r2, [pc, #40]	; (80065c4 <vQueueAddToRegistry+0x50>)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	4413      	add	r3, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065a6:	e006      	b.n	80065b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3301      	adds	r3, #1
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b07      	cmp	r3, #7
 80065b2:	d9e7      	bls.n	8006584 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	24004bd4 	.word	0x24004bd4

080065c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065d8:	f001 fbcc 	bl	8007d74 <vPortEnterCritical>
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065e2:	b25b      	sxtb	r3, r3
 80065e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065e8:	d103      	bne.n	80065f2 <vQueueWaitForMessageRestricted+0x2a>
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065f8:	b25b      	sxtb	r3, r3
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065fe:	d103      	bne.n	8006608 <vQueueWaitForMessageRestricted+0x40>
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006608:	f001 fbe4 	bl	8007dd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006610:	2b00      	cmp	r3, #0
 8006612:	d106      	bne.n	8006622 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	3324      	adds	r3, #36	; 0x24
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	68b9      	ldr	r1, [r7, #8]
 800661c:	4618      	mov	r0, r3
 800661e:	f000 fc61 	bl	8006ee4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006622:	6978      	ldr	r0, [r7, #20]
 8006624:	f7ff ff26 	bl	8006474 <prvUnlockQueue>
	}
 8006628:	bf00      	nop
 800662a:	3718      	adds	r7, #24
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08e      	sub	sp, #56	; 0x38
 8006634:	af04      	add	r7, sp, #16
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800663e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10a      	bne.n	800665a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	623b      	str	r3, [r7, #32]
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <xTaskCreateStatic+0x46>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	61fb      	str	r3, [r7, #28]
}
 8006672:	bf00      	nop
 8006674:	e7fe      	b.n	8006674 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006676:	23bc      	movs	r3, #188	; 0xbc
 8006678:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	2bbc      	cmp	r3, #188	; 0xbc
 800667e:	d00a      	beq.n	8006696 <xTaskCreateStatic+0x66>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	61bb      	str	r3, [r7, #24]
}
 8006692:	bf00      	nop
 8006694:	e7fe      	b.n	8006694 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006696:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669a:	2b00      	cmp	r3, #0
 800669c:	d01e      	beq.n	80066dc <xTaskCreateStatic+0xac>
 800669e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d01b      	beq.n	80066dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	2202      	movs	r2, #2
 80066b2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066b6:	2300      	movs	r3, #0
 80066b8:	9303      	str	r3, [sp, #12]
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	9302      	str	r3, [sp, #8]
 80066be:	f107 0314 	add.w	r3, r7, #20
 80066c2:	9301      	str	r3, [sp, #4]
 80066c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 f850 	bl	8006774 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066d6:	f000 f8f3 	bl	80068c0 <prvAddNewTaskToReadyList>
 80066da:	e001      	b.n	80066e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80066dc:	2300      	movs	r3, #0
 80066de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066e0:	697b      	ldr	r3, [r7, #20]
	}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3728      	adds	r7, #40	; 0x28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b08c      	sub	sp, #48	; 0x30
 80066ee:	af04      	add	r7, sp, #16
 80066f0:	60f8      	str	r0, [r7, #12]
 80066f2:	60b9      	str	r1, [r7, #8]
 80066f4:	603b      	str	r3, [r7, #0]
 80066f6:	4613      	mov	r3, r2
 80066f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066fa:	88fb      	ldrh	r3, [r7, #6]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4618      	mov	r0, r3
 8006700:	f001 fc5a 	bl	8007fb8 <pvPortMalloc>
 8006704:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00e      	beq.n	800672a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800670c:	20bc      	movs	r0, #188	; 0xbc
 800670e:	f001 fc53 	bl	8007fb8 <pvPortMalloc>
 8006712:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	631a      	str	r2, [r3, #48]	; 0x30
 8006720:	e005      	b.n	800672e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006722:	6978      	ldr	r0, [r7, #20]
 8006724:	f001 fd14 	bl	8008150 <vPortFree>
 8006728:	e001      	b.n	800672e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800672a:	2300      	movs	r3, #0
 800672c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d017      	beq.n	8006764 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800673c:	88fa      	ldrh	r2, [r7, #6]
 800673e:	2300      	movs	r3, #0
 8006740:	9303      	str	r3, [sp, #12]
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	9302      	str	r3, [sp, #8]
 8006746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006748:	9301      	str	r3, [sp, #4]
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 f80e 	bl	8006774 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006758:	69f8      	ldr	r0, [r7, #28]
 800675a:	f000 f8b1 	bl	80068c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800675e:	2301      	movs	r3, #1
 8006760:	61bb      	str	r3, [r7, #24]
 8006762:	e002      	b.n	800676a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006768:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800676a:	69bb      	ldr	r3, [r7, #24]
	}
 800676c:	4618      	mov	r0, r3
 800676e:	3720      	adds	r7, #32
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b088      	sub	sp, #32
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	461a      	mov	r2, r3
 800678c:	21a5      	movs	r1, #165	; 0xa5
 800678e:	f001 fe31 	bl	80083f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006796:	6879      	ldr	r1, [r7, #4]
 8006798:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800679c:	440b      	add	r3, r1
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	f023 0307 	bic.w	r3, r3, #7
 80067aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	f003 0307 	and.w	r3, r3, #7
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <prvInitialiseNewTask+0x58>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	617b      	str	r3, [r7, #20]
}
 80067c8:	bf00      	nop
 80067ca:	e7fe      	b.n	80067ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d01f      	beq.n	8006812 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067d2:	2300      	movs	r3, #0
 80067d4:	61fb      	str	r3, [r7, #28]
 80067d6:	e012      	b.n	80067fe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	4413      	add	r3, r2
 80067de:	7819      	ldrb	r1, [r3, #0]
 80067e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	4413      	add	r3, r2
 80067e6:	3334      	adds	r3, #52	; 0x34
 80067e8:	460a      	mov	r2, r1
 80067ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d006      	beq.n	8006806 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	3301      	adds	r3, #1
 80067fc:	61fb      	str	r3, [r7, #28]
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	2b0f      	cmp	r3, #15
 8006802:	d9e9      	bls.n	80067d8 <prvInitialiseNewTask+0x64>
 8006804:	e000      	b.n	8006808 <prvInitialiseNewTask+0x94>
			{
				break;
 8006806:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006810:	e003      	b.n	800681a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681c:	2b37      	cmp	r3, #55	; 0x37
 800681e:	d901      	bls.n	8006824 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006820:	2337      	movs	r3, #55	; 0x37
 8006822:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006828:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800682e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	2200      	movs	r2, #0
 8006834:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	3304      	adds	r3, #4
 800683a:	4618      	mov	r0, r3
 800683c:	f7ff f93e 	bl	8005abc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	3318      	adds	r3, #24
 8006844:	4618      	mov	r0, r3
 8006846:	f7ff f939 	bl	8005abc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800684e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006862:	2200      	movs	r2, #0
 8006864:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686a:	2200      	movs	r2, #0
 800686c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	3354      	adds	r3, #84	; 0x54
 8006874:	2260      	movs	r2, #96	; 0x60
 8006876:	2100      	movs	r1, #0
 8006878:	4618      	mov	r0, r3
 800687a:	f001 fdbb 	bl	80083f4 <memset>
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	4a0c      	ldr	r2, [pc, #48]	; (80068b4 <prvInitialiseNewTask+0x140>)
 8006882:	659a      	str	r2, [r3, #88]	; 0x58
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	4a0c      	ldr	r2, [pc, #48]	; (80068b8 <prvInitialiseNewTask+0x144>)
 8006888:	65da      	str	r2, [r3, #92]	; 0x5c
 800688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688c:	4a0b      	ldr	r2, [pc, #44]	; (80068bc <prvInitialiseNewTask+0x148>)
 800688e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	68f9      	ldr	r1, [r7, #12]
 8006894:	69b8      	ldr	r0, [r7, #24]
 8006896:	f001 f941 	bl	8007b1c <pxPortInitialiseStack>
 800689a:	4602      	mov	r2, r0
 800689c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068ac:	bf00      	nop
 80068ae:	3720      	adds	r7, #32
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	08008728 	.word	0x08008728
 80068b8:	08008748 	.word	0x08008748
 80068bc:	08008708 	.word	0x08008708

080068c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068c8:	f001 fa54 	bl	8007d74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068cc:	4b2d      	ldr	r3, [pc, #180]	; (8006984 <prvAddNewTaskToReadyList+0xc4>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3301      	adds	r3, #1
 80068d2:	4a2c      	ldr	r2, [pc, #176]	; (8006984 <prvAddNewTaskToReadyList+0xc4>)
 80068d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068d6:	4b2c      	ldr	r3, [pc, #176]	; (8006988 <prvAddNewTaskToReadyList+0xc8>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d109      	bne.n	80068f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068de:	4a2a      	ldr	r2, [pc, #168]	; (8006988 <prvAddNewTaskToReadyList+0xc8>)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068e4:	4b27      	ldr	r3, [pc, #156]	; (8006984 <prvAddNewTaskToReadyList+0xc4>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d110      	bne.n	800690e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068ec:	f000 fc26 	bl	800713c <prvInitialiseTaskLists>
 80068f0:	e00d      	b.n	800690e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068f2:	4b26      	ldr	r3, [pc, #152]	; (800698c <prvAddNewTaskToReadyList+0xcc>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d109      	bne.n	800690e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068fa:	4b23      	ldr	r3, [pc, #140]	; (8006988 <prvAddNewTaskToReadyList+0xc8>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	429a      	cmp	r2, r3
 8006906:	d802      	bhi.n	800690e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006908:	4a1f      	ldr	r2, [pc, #124]	; (8006988 <prvAddNewTaskToReadyList+0xc8>)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800690e:	4b20      	ldr	r3, [pc, #128]	; (8006990 <prvAddNewTaskToReadyList+0xd0>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3301      	adds	r3, #1
 8006914:	4a1e      	ldr	r2, [pc, #120]	; (8006990 <prvAddNewTaskToReadyList+0xd0>)
 8006916:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006918:	4b1d      	ldr	r3, [pc, #116]	; (8006990 <prvAddNewTaskToReadyList+0xd0>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006924:	4b1b      	ldr	r3, [pc, #108]	; (8006994 <prvAddNewTaskToReadyList+0xd4>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	429a      	cmp	r2, r3
 800692a:	d903      	bls.n	8006934 <prvAddNewTaskToReadyList+0x74>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006930:	4a18      	ldr	r2, [pc, #96]	; (8006994 <prvAddNewTaskToReadyList+0xd4>)
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006938:	4613      	mov	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4a15      	ldr	r2, [pc, #84]	; (8006998 <prvAddNewTaskToReadyList+0xd8>)
 8006942:	441a      	add	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	3304      	adds	r3, #4
 8006948:	4619      	mov	r1, r3
 800694a:	4610      	mov	r0, r2
 800694c:	f7ff f8c3 	bl	8005ad6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006950:	f001 fa40 	bl	8007dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006954:	4b0d      	ldr	r3, [pc, #52]	; (800698c <prvAddNewTaskToReadyList+0xcc>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00e      	beq.n	800697a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800695c:	4b0a      	ldr	r3, [pc, #40]	; (8006988 <prvAddNewTaskToReadyList+0xc8>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006966:	429a      	cmp	r2, r3
 8006968:	d207      	bcs.n	800697a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800696a:	4b0c      	ldr	r3, [pc, #48]	; (800699c <prvAddNewTaskToReadyList+0xdc>)
 800696c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800697a:	bf00      	nop
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	24000ce4 	.word	0x24000ce4
 8006988:	24000810 	.word	0x24000810
 800698c:	24000cf0 	.word	0x24000cf0
 8006990:	24000d00 	.word	0x24000d00
 8006994:	24000cec 	.word	0x24000cec
 8006998:	24000814 	.word	0x24000814
 800699c:	e000ed04 	.word	0xe000ed04

080069a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069a8:	2300      	movs	r3, #0
 80069aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d017      	beq.n	80069e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069b2:	4b13      	ldr	r3, [pc, #76]	; (8006a00 <vTaskDelay+0x60>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <vTaskDelay+0x30>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	60bb      	str	r3, [r7, #8]
}
 80069cc:	bf00      	nop
 80069ce:	e7fe      	b.n	80069ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069d0:	f000 f88a 	bl	8006ae8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069d4:	2100      	movs	r1, #0
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fcfe 	bl	80073d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069dc:	f000 f892 	bl	8006b04 <xTaskResumeAll>
 80069e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d107      	bne.n	80069f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80069e8:	4b06      	ldr	r3, [pc, #24]	; (8006a04 <vTaskDelay+0x64>)
 80069ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069f8:	bf00      	nop
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	24000d0c 	.word	0x24000d0c
 8006a04:	e000ed04 	.word	0xe000ed04

08006a08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08a      	sub	sp, #40	; 0x28
 8006a0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a12:	2300      	movs	r3, #0
 8006a14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a16:	463a      	mov	r2, r7
 8006a18:	1d39      	adds	r1, r7, #4
 8006a1a:	f107 0308 	add.w	r3, r7, #8
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe fff8 	bl	8005a14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	9202      	str	r2, [sp, #8]
 8006a2c:	9301      	str	r3, [sp, #4]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	2300      	movs	r3, #0
 8006a34:	460a      	mov	r2, r1
 8006a36:	4924      	ldr	r1, [pc, #144]	; (8006ac8 <vTaskStartScheduler+0xc0>)
 8006a38:	4824      	ldr	r0, [pc, #144]	; (8006acc <vTaskStartScheduler+0xc4>)
 8006a3a:	f7ff fdf9 	bl	8006630 <xTaskCreateStatic>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	4a23      	ldr	r2, [pc, #140]	; (8006ad0 <vTaskStartScheduler+0xc8>)
 8006a42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a44:	4b22      	ldr	r3, [pc, #136]	; (8006ad0 <vTaskStartScheduler+0xc8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	617b      	str	r3, [r7, #20]
 8006a50:	e001      	b.n	8006a56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a52:	2300      	movs	r3, #0
 8006a54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d102      	bne.n	8006a62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a5c:	f000 fd10 	bl	8007480 <xTimerCreateTimerTask>
 8006a60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d11b      	bne.n	8006aa0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	613b      	str	r3, [r7, #16]
}
 8006a7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a7c:	4b15      	ldr	r3, [pc, #84]	; (8006ad4 <vTaskStartScheduler+0xcc>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3354      	adds	r3, #84	; 0x54
 8006a82:	4a15      	ldr	r2, [pc, #84]	; (8006ad8 <vTaskStartScheduler+0xd0>)
 8006a84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a86:	4b15      	ldr	r3, [pc, #84]	; (8006adc <vTaskStartScheduler+0xd4>)
 8006a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a8e:	4b14      	ldr	r3, [pc, #80]	; (8006ae0 <vTaskStartScheduler+0xd8>)
 8006a90:	2201      	movs	r2, #1
 8006a92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a94:	4b13      	ldr	r3, [pc, #76]	; (8006ae4 <vTaskStartScheduler+0xdc>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a9a:	f001 f8c9 	bl	8007c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a9e:	e00e      	b.n	8006abe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aa6:	d10a      	bne.n	8006abe <vTaskStartScheduler+0xb6>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	60fb      	str	r3, [r7, #12]
}
 8006aba:	bf00      	nop
 8006abc:	e7fe      	b.n	8006abc <vTaskStartScheduler+0xb4>
}
 8006abe:	bf00      	nop
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	080085f8 	.word	0x080085f8
 8006acc:	0800710d 	.word	0x0800710d
 8006ad0:	24000d08 	.word	0x24000d08
 8006ad4:	24000810 	.word	0x24000810
 8006ad8:	24000014 	.word	0x24000014
 8006adc:	24000d04 	.word	0x24000d04
 8006ae0:	24000cf0 	.word	0x24000cf0
 8006ae4:	24000ce8 	.word	0x24000ce8

08006ae8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006aec:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <vTaskSuspendAll+0x18>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3301      	adds	r3, #1
 8006af2:	4a03      	ldr	r2, [pc, #12]	; (8006b00 <vTaskSuspendAll+0x18>)
 8006af4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006af6:	bf00      	nop
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	24000d0c 	.word	0x24000d0c

08006b04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b12:	4b42      	ldr	r3, [pc, #264]	; (8006c1c <xTaskResumeAll+0x118>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10a      	bne.n	8006b30 <xTaskResumeAll+0x2c>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	603b      	str	r3, [r7, #0]
}
 8006b2c:	bf00      	nop
 8006b2e:	e7fe      	b.n	8006b2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b30:	f001 f920 	bl	8007d74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b34:	4b39      	ldr	r3, [pc, #228]	; (8006c1c <xTaskResumeAll+0x118>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	4a38      	ldr	r2, [pc, #224]	; (8006c1c <xTaskResumeAll+0x118>)
 8006b3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b3e:	4b37      	ldr	r3, [pc, #220]	; (8006c1c <xTaskResumeAll+0x118>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d162      	bne.n	8006c0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b46:	4b36      	ldr	r3, [pc, #216]	; (8006c20 <xTaskResumeAll+0x11c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d05e      	beq.n	8006c0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b4e:	e02f      	b.n	8006bb0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b50:	4b34      	ldr	r3, [pc, #208]	; (8006c24 <xTaskResumeAll+0x120>)
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	3318      	adds	r3, #24
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7ff f817 	bl	8005b90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3304      	adds	r3, #4
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7ff f812 	bl	8005b90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b70:	4b2d      	ldr	r3, [pc, #180]	; (8006c28 <xTaskResumeAll+0x124>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d903      	bls.n	8006b80 <xTaskResumeAll+0x7c>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	4a2a      	ldr	r2, [pc, #168]	; (8006c28 <xTaskResumeAll+0x124>)
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4a27      	ldr	r2, [pc, #156]	; (8006c2c <xTaskResumeAll+0x128>)
 8006b8e:	441a      	add	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3304      	adds	r3, #4
 8006b94:	4619      	mov	r1, r3
 8006b96:	4610      	mov	r0, r2
 8006b98:	f7fe ff9d 	bl	8005ad6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba0:	4b23      	ldr	r3, [pc, #140]	; (8006c30 <xTaskResumeAll+0x12c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d302      	bcc.n	8006bb0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006baa:	4b22      	ldr	r3, [pc, #136]	; (8006c34 <xTaskResumeAll+0x130>)
 8006bac:	2201      	movs	r2, #1
 8006bae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bb0:	4b1c      	ldr	r3, [pc, #112]	; (8006c24 <xTaskResumeAll+0x120>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1cb      	bne.n	8006b50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bbe:	f000 fb5f 	bl	8007280 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006bc2:	4b1d      	ldr	r3, [pc, #116]	; (8006c38 <xTaskResumeAll+0x134>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d010      	beq.n	8006bf0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bce:	f000 f847 	bl	8006c60 <xTaskIncrementTick>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006bd8:	4b16      	ldr	r3, [pc, #88]	; (8006c34 <xTaskResumeAll+0x130>)
 8006bda:	2201      	movs	r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1f1      	bne.n	8006bce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006bea:	4b13      	ldr	r3, [pc, #76]	; (8006c38 <xTaskResumeAll+0x134>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006bf0:	4b10      	ldr	r3, [pc, #64]	; (8006c34 <xTaskResumeAll+0x130>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d009      	beq.n	8006c0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006bfc:	4b0f      	ldr	r3, [pc, #60]	; (8006c3c <xTaskResumeAll+0x138>)
 8006bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c0c:	f001 f8e2 	bl	8007dd4 <vPortExitCritical>

	return xAlreadyYielded;
 8006c10:	68bb      	ldr	r3, [r7, #8]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	24000d0c 	.word	0x24000d0c
 8006c20:	24000ce4 	.word	0x24000ce4
 8006c24:	24000ca4 	.word	0x24000ca4
 8006c28:	24000cec 	.word	0x24000cec
 8006c2c:	24000814 	.word	0x24000814
 8006c30:	24000810 	.word	0x24000810
 8006c34:	24000cf8 	.word	0x24000cf8
 8006c38:	24000cf4 	.word	0x24000cf4
 8006c3c:	e000ed04 	.word	0xe000ed04

08006c40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c46:	4b05      	ldr	r3, [pc, #20]	; (8006c5c <xTaskGetTickCount+0x1c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c4c:	687b      	ldr	r3, [r7, #4]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	24000ce8 	.word	0x24000ce8

08006c60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c66:	2300      	movs	r3, #0
 8006c68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c6a:	4b4f      	ldr	r3, [pc, #316]	; (8006da8 <xTaskIncrementTick+0x148>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f040 808f 	bne.w	8006d92 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c74:	4b4d      	ldr	r3, [pc, #308]	; (8006dac <xTaskIncrementTick+0x14c>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c7c:	4a4b      	ldr	r2, [pc, #300]	; (8006dac <xTaskIncrementTick+0x14c>)
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d120      	bne.n	8006cca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c88:	4b49      	ldr	r3, [pc, #292]	; (8006db0 <xTaskIncrementTick+0x150>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00a      	beq.n	8006ca8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	603b      	str	r3, [r7, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	e7fe      	b.n	8006ca6 <xTaskIncrementTick+0x46>
 8006ca8:	4b41      	ldr	r3, [pc, #260]	; (8006db0 <xTaskIncrementTick+0x150>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	60fb      	str	r3, [r7, #12]
 8006cae:	4b41      	ldr	r3, [pc, #260]	; (8006db4 <xTaskIncrementTick+0x154>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a3f      	ldr	r2, [pc, #252]	; (8006db0 <xTaskIncrementTick+0x150>)
 8006cb4:	6013      	str	r3, [r2, #0]
 8006cb6:	4a3f      	ldr	r2, [pc, #252]	; (8006db4 <xTaskIncrementTick+0x154>)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	4b3e      	ldr	r3, [pc, #248]	; (8006db8 <xTaskIncrementTick+0x158>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	4a3d      	ldr	r2, [pc, #244]	; (8006db8 <xTaskIncrementTick+0x158>)
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	f000 fadb 	bl	8007280 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cca:	4b3c      	ldr	r3, [pc, #240]	; (8006dbc <xTaskIncrementTick+0x15c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d349      	bcc.n	8006d68 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cd4:	4b36      	ldr	r3, [pc, #216]	; (8006db0 <xTaskIncrementTick+0x150>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d104      	bne.n	8006ce8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cde:	4b37      	ldr	r3, [pc, #220]	; (8006dbc <xTaskIncrementTick+0x15c>)
 8006ce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ce4:	601a      	str	r2, [r3, #0]
					break;
 8006ce6:	e03f      	b.n	8006d68 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ce8:	4b31      	ldr	r3, [pc, #196]	; (8006db0 <xTaskIncrementTick+0x150>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d203      	bcs.n	8006d08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d00:	4a2e      	ldr	r2, [pc, #184]	; (8006dbc <xTaskIncrementTick+0x15c>)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d06:	e02f      	b.n	8006d68 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fe ff3f 	bl	8005b90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d004      	beq.n	8006d24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	3318      	adds	r3, #24
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe ff36 	bl	8005b90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d28:	4b25      	ldr	r3, [pc, #148]	; (8006dc0 <xTaskIncrementTick+0x160>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d903      	bls.n	8006d38 <xTaskIncrementTick+0xd8>
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	4a22      	ldr	r2, [pc, #136]	; (8006dc0 <xTaskIncrementTick+0x160>)
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4a1f      	ldr	r2, [pc, #124]	; (8006dc4 <xTaskIncrementTick+0x164>)
 8006d46:	441a      	add	r2, r3
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	4610      	mov	r0, r2
 8006d50:	f7fe fec1 	bl	8005ad6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d58:	4b1b      	ldr	r3, [pc, #108]	; (8006dc8 <xTaskIncrementTick+0x168>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d3b8      	bcc.n	8006cd4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006d62:	2301      	movs	r3, #1
 8006d64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d66:	e7b5      	b.n	8006cd4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d68:	4b17      	ldr	r3, [pc, #92]	; (8006dc8 <xTaskIncrementTick+0x168>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6e:	4915      	ldr	r1, [pc, #84]	; (8006dc4 <xTaskIncrementTick+0x164>)
 8006d70:	4613      	mov	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	440b      	add	r3, r1
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d901      	bls.n	8006d84 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006d80:	2301      	movs	r3, #1
 8006d82:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d84:	4b11      	ldr	r3, [pc, #68]	; (8006dcc <xTaskIncrementTick+0x16c>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d007      	beq.n	8006d9c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	617b      	str	r3, [r7, #20]
 8006d90:	e004      	b.n	8006d9c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006d92:	4b0f      	ldr	r3, [pc, #60]	; (8006dd0 <xTaskIncrementTick+0x170>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3301      	adds	r3, #1
 8006d98:	4a0d      	ldr	r2, [pc, #52]	; (8006dd0 <xTaskIncrementTick+0x170>)
 8006d9a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006d9c:	697b      	ldr	r3, [r7, #20]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	24000d0c 	.word	0x24000d0c
 8006dac:	24000ce8 	.word	0x24000ce8
 8006db0:	24000c9c 	.word	0x24000c9c
 8006db4:	24000ca0 	.word	0x24000ca0
 8006db8:	24000cfc 	.word	0x24000cfc
 8006dbc:	24000d04 	.word	0x24000d04
 8006dc0:	24000cec 	.word	0x24000cec
 8006dc4:	24000814 	.word	0x24000814
 8006dc8:	24000810 	.word	0x24000810
 8006dcc:	24000cf8 	.word	0x24000cf8
 8006dd0:	24000cf4 	.word	0x24000cf4

08006dd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dda:	4b2a      	ldr	r3, [pc, #168]	; (8006e84 <vTaskSwitchContext+0xb0>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006de2:	4b29      	ldr	r3, [pc, #164]	; (8006e88 <vTaskSwitchContext+0xb4>)
 8006de4:	2201      	movs	r2, #1
 8006de6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006de8:	e046      	b.n	8006e78 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006dea:	4b27      	ldr	r3, [pc, #156]	; (8006e88 <vTaskSwitchContext+0xb4>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006df0:	4b26      	ldr	r3, [pc, #152]	; (8006e8c <vTaskSwitchContext+0xb8>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	e010      	b.n	8006e1a <vTaskSwitchContext+0x46>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10a      	bne.n	8006e14 <vTaskSwitchContext+0x40>
	__asm volatile
 8006dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	607b      	str	r3, [r7, #4]
}
 8006e10:	bf00      	nop
 8006e12:	e7fe      	b.n	8006e12 <vTaskSwitchContext+0x3e>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	491d      	ldr	r1, [pc, #116]	; (8006e90 <vTaskSwitchContext+0xbc>)
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	440b      	add	r3, r1
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d0e4      	beq.n	8006df8 <vTaskSwitchContext+0x24>
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	4613      	mov	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4a15      	ldr	r2, [pc, #84]	; (8006e90 <vTaskSwitchContext+0xbc>)
 8006e3a:	4413      	add	r3, r2
 8006e3c:	60bb      	str	r3, [r7, #8]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	605a      	str	r2, [r3, #4]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	3308      	adds	r3, #8
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d104      	bne.n	8006e5e <vTaskSwitchContext+0x8a>
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	605a      	str	r2, [r3, #4]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	4a0b      	ldr	r2, [pc, #44]	; (8006e94 <vTaskSwitchContext+0xc0>)
 8006e66:	6013      	str	r3, [r2, #0]
 8006e68:	4a08      	ldr	r2, [pc, #32]	; (8006e8c <vTaskSwitchContext+0xb8>)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e6e:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <vTaskSwitchContext+0xc0>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3354      	adds	r3, #84	; 0x54
 8006e74:	4a08      	ldr	r2, [pc, #32]	; (8006e98 <vTaskSwitchContext+0xc4>)
 8006e76:	6013      	str	r3, [r2, #0]
}
 8006e78:	bf00      	nop
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	24000d0c 	.word	0x24000d0c
 8006e88:	24000cf8 	.word	0x24000cf8
 8006e8c:	24000cec 	.word	0x24000cec
 8006e90:	24000814 	.word	0x24000814
 8006e94:	24000810 	.word	0x24000810
 8006e98:	24000014 	.word	0x24000014

08006e9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10a      	bne.n	8006ec2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	60fb      	str	r3, [r7, #12]
}
 8006ebe:	bf00      	nop
 8006ec0:	e7fe      	b.n	8006ec0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ec2:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <vTaskPlaceOnEventList+0x44>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3318      	adds	r3, #24
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7fe fe27 	bl	8005b1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	6838      	ldr	r0, [r7, #0]
 8006ed4:	f000 fa80 	bl	80073d8 <prvAddCurrentTaskToDelayedList>
}
 8006ed8:	bf00      	nop
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	24000810 	.word	0x24000810

08006ee4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10a      	bne.n	8006f0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	617b      	str	r3, [r7, #20]
}
 8006f08:	bf00      	nop
 8006f0a:	e7fe      	b.n	8006f0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f0c:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <vTaskPlaceOnEventListRestricted+0x54>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3318      	adds	r3, #24
 8006f12:	4619      	mov	r1, r3
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f7fe fdde 	bl	8005ad6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f26:	6879      	ldr	r1, [r7, #4]
 8006f28:	68b8      	ldr	r0, [r7, #8]
 8006f2a:	f000 fa55 	bl	80073d8 <prvAddCurrentTaskToDelayedList>
	}
 8006f2e:	bf00      	nop
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	24000810 	.word	0x24000810

08006f3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	60fb      	str	r3, [r7, #12]
}
 8006f64:	bf00      	nop
 8006f66:	e7fe      	b.n	8006f66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	3318      	adds	r3, #24
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fe fe0f 	bl	8005b90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f72:	4b1e      	ldr	r3, [pc, #120]	; (8006fec <xTaskRemoveFromEventList+0xb0>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d11d      	bne.n	8006fb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	3304      	adds	r3, #4
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fe fe06 	bl	8005b90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f88:	4b19      	ldr	r3, [pc, #100]	; (8006ff0 <xTaskRemoveFromEventList+0xb4>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d903      	bls.n	8006f98 <xTaskRemoveFromEventList+0x5c>
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	4a16      	ldr	r2, [pc, #88]	; (8006ff0 <xTaskRemoveFromEventList+0xb4>)
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4a13      	ldr	r2, [pc, #76]	; (8006ff4 <xTaskRemoveFromEventList+0xb8>)
 8006fa6:	441a      	add	r2, r3
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	3304      	adds	r3, #4
 8006fac:	4619      	mov	r1, r3
 8006fae:	4610      	mov	r0, r2
 8006fb0:	f7fe fd91 	bl	8005ad6 <vListInsertEnd>
 8006fb4:	e005      	b.n	8006fc2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	3318      	adds	r3, #24
 8006fba:	4619      	mov	r1, r3
 8006fbc:	480e      	ldr	r0, [pc, #56]	; (8006ff8 <xTaskRemoveFromEventList+0xbc>)
 8006fbe:	f7fe fd8a 	bl	8005ad6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc6:	4b0d      	ldr	r3, [pc, #52]	; (8006ffc <xTaskRemoveFromEventList+0xc0>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d905      	bls.n	8006fdc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fd4:	4b0a      	ldr	r3, [pc, #40]	; (8007000 <xTaskRemoveFromEventList+0xc4>)
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	e001      	b.n	8006fe0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006fe0:	697b      	ldr	r3, [r7, #20]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	24000d0c 	.word	0x24000d0c
 8006ff0:	24000cec 	.word	0x24000cec
 8006ff4:	24000814 	.word	0x24000814
 8006ff8:	24000ca4 	.word	0x24000ca4
 8006ffc:	24000810 	.word	0x24000810
 8007000:	24000cf8 	.word	0x24000cf8

08007004 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800700c:	4b06      	ldr	r3, [pc, #24]	; (8007028 <vTaskInternalSetTimeOutState+0x24>)
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007014:	4b05      	ldr	r3, [pc, #20]	; (800702c <vTaskInternalSetTimeOutState+0x28>)
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	605a      	str	r2, [r3, #4]
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	24000cfc 	.word	0x24000cfc
 800702c:	24000ce8 	.word	0x24000ce8

08007030 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b088      	sub	sp, #32
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10a      	bne.n	8007056 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	613b      	str	r3, [r7, #16]
}
 8007052:	bf00      	nop
 8007054:	e7fe      	b.n	8007054 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	60fb      	str	r3, [r7, #12]
}
 800706e:	bf00      	nop
 8007070:	e7fe      	b.n	8007070 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007072:	f000 fe7f 	bl	8007d74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007076:	4b1d      	ldr	r3, [pc, #116]	; (80070ec <xTaskCheckForTimeOut+0xbc>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800708e:	d102      	bne.n	8007096 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007090:	2300      	movs	r3, #0
 8007092:	61fb      	str	r3, [r7, #28]
 8007094:	e023      	b.n	80070de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	4b15      	ldr	r3, [pc, #84]	; (80070f0 <xTaskCheckForTimeOut+0xc0>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d007      	beq.n	80070b2 <xTaskCheckForTimeOut+0x82>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d302      	bcc.n	80070b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070ac:	2301      	movs	r3, #1
 80070ae:	61fb      	str	r3, [r7, #28]
 80070b0:	e015      	b.n	80070de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d20b      	bcs.n	80070d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	1ad2      	subs	r2, r2, r3
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7ff ff9b 	bl	8007004 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070ce:	2300      	movs	r3, #0
 80070d0:	61fb      	str	r3, [r7, #28]
 80070d2:	e004      	b.n	80070de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2200      	movs	r2, #0
 80070d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070da:	2301      	movs	r3, #1
 80070dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070de:	f000 fe79 	bl	8007dd4 <vPortExitCritical>

	return xReturn;
 80070e2:	69fb      	ldr	r3, [r7, #28]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3720      	adds	r7, #32
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	24000ce8 	.word	0x24000ce8
 80070f0:	24000cfc 	.word	0x24000cfc

080070f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070f4:	b480      	push	{r7}
 80070f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070f8:	4b03      	ldr	r3, [pc, #12]	; (8007108 <vTaskMissedYield+0x14>)
 80070fa:	2201      	movs	r2, #1
 80070fc:	601a      	str	r2, [r3, #0]
}
 80070fe:	bf00      	nop
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	24000cf8 	.word	0x24000cf8

0800710c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007114:	f000 f852 	bl	80071bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007118:	4b06      	ldr	r3, [pc, #24]	; (8007134 <prvIdleTask+0x28>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d9f9      	bls.n	8007114 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007120:	4b05      	ldr	r3, [pc, #20]	; (8007138 <prvIdleTask+0x2c>)
 8007122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007130:	e7f0      	b.n	8007114 <prvIdleTask+0x8>
 8007132:	bf00      	nop
 8007134:	24000814 	.word	0x24000814
 8007138:	e000ed04 	.word	0xe000ed04

0800713c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007142:	2300      	movs	r3, #0
 8007144:	607b      	str	r3, [r7, #4]
 8007146:	e00c      	b.n	8007162 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	4613      	mov	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4a12      	ldr	r2, [pc, #72]	; (800719c <prvInitialiseTaskLists+0x60>)
 8007154:	4413      	add	r3, r2
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe fc90 	bl	8005a7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3301      	adds	r3, #1
 8007160:	607b      	str	r3, [r7, #4]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b37      	cmp	r3, #55	; 0x37
 8007166:	d9ef      	bls.n	8007148 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007168:	480d      	ldr	r0, [pc, #52]	; (80071a0 <prvInitialiseTaskLists+0x64>)
 800716a:	f7fe fc87 	bl	8005a7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800716e:	480d      	ldr	r0, [pc, #52]	; (80071a4 <prvInitialiseTaskLists+0x68>)
 8007170:	f7fe fc84 	bl	8005a7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007174:	480c      	ldr	r0, [pc, #48]	; (80071a8 <prvInitialiseTaskLists+0x6c>)
 8007176:	f7fe fc81 	bl	8005a7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800717a:	480c      	ldr	r0, [pc, #48]	; (80071ac <prvInitialiseTaskLists+0x70>)
 800717c:	f7fe fc7e 	bl	8005a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007180:	480b      	ldr	r0, [pc, #44]	; (80071b0 <prvInitialiseTaskLists+0x74>)
 8007182:	f7fe fc7b 	bl	8005a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007186:	4b0b      	ldr	r3, [pc, #44]	; (80071b4 <prvInitialiseTaskLists+0x78>)
 8007188:	4a05      	ldr	r2, [pc, #20]	; (80071a0 <prvInitialiseTaskLists+0x64>)
 800718a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800718c:	4b0a      	ldr	r3, [pc, #40]	; (80071b8 <prvInitialiseTaskLists+0x7c>)
 800718e:	4a05      	ldr	r2, [pc, #20]	; (80071a4 <prvInitialiseTaskLists+0x68>)
 8007190:	601a      	str	r2, [r3, #0]
}
 8007192:	bf00      	nop
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	24000814 	.word	0x24000814
 80071a0:	24000c74 	.word	0x24000c74
 80071a4:	24000c88 	.word	0x24000c88
 80071a8:	24000ca4 	.word	0x24000ca4
 80071ac:	24000cb8 	.word	0x24000cb8
 80071b0:	24000cd0 	.word	0x24000cd0
 80071b4:	24000c9c 	.word	0x24000c9c
 80071b8:	24000ca0 	.word	0x24000ca0

080071bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071c2:	e019      	b.n	80071f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071c4:	f000 fdd6 	bl	8007d74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071c8:	4b10      	ldr	r3, [pc, #64]	; (800720c <prvCheckTasksWaitingTermination+0x50>)
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	3304      	adds	r3, #4
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe fcdb 	bl	8005b90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071da:	4b0d      	ldr	r3, [pc, #52]	; (8007210 <prvCheckTasksWaitingTermination+0x54>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3b01      	subs	r3, #1
 80071e0:	4a0b      	ldr	r2, [pc, #44]	; (8007210 <prvCheckTasksWaitingTermination+0x54>)
 80071e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071e4:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <prvCheckTasksWaitingTermination+0x58>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3b01      	subs	r3, #1
 80071ea:	4a0a      	ldr	r2, [pc, #40]	; (8007214 <prvCheckTasksWaitingTermination+0x58>)
 80071ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071ee:	f000 fdf1 	bl	8007dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f810 	bl	8007218 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071f8:	4b06      	ldr	r3, [pc, #24]	; (8007214 <prvCheckTasksWaitingTermination+0x58>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e1      	bne.n	80071c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007200:	bf00      	nop
 8007202:	bf00      	nop
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	24000cb8 	.word	0x24000cb8
 8007210:	24000ce4 	.word	0x24000ce4
 8007214:	24000ccc 	.word	0x24000ccc

08007218 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3354      	adds	r3, #84	; 0x54
 8007224:	4618      	mov	r0, r3
 8007226:	f001 f8fb 	bl	8008420 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007230:	2b00      	cmp	r3, #0
 8007232:	d108      	bne.n	8007246 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007238:	4618      	mov	r0, r3
 800723a:	f000 ff89 	bl	8008150 <vPortFree>
				vPortFree( pxTCB );
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 ff86 	bl	8008150 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007244:	e018      	b.n	8007278 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800724c:	2b01      	cmp	r3, #1
 800724e:	d103      	bne.n	8007258 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 ff7d 	bl	8008150 <vPortFree>
	}
 8007256:	e00f      	b.n	8007278 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800725e:	2b02      	cmp	r3, #2
 8007260:	d00a      	beq.n	8007278 <prvDeleteTCB+0x60>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	60fb      	str	r3, [r7, #12]
}
 8007274:	bf00      	nop
 8007276:	e7fe      	b.n	8007276 <prvDeleteTCB+0x5e>
	}
 8007278:	bf00      	nop
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007286:	4b0c      	ldr	r3, [pc, #48]	; (80072b8 <prvResetNextTaskUnblockTime+0x38>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d104      	bne.n	800729a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007290:	4b0a      	ldr	r3, [pc, #40]	; (80072bc <prvResetNextTaskUnblockTime+0x3c>)
 8007292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007296:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007298:	e008      	b.n	80072ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800729a:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <prvResetNextTaskUnblockTime+0x38>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	4a04      	ldr	r2, [pc, #16]	; (80072bc <prvResetNextTaskUnblockTime+0x3c>)
 80072aa:	6013      	str	r3, [r2, #0]
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	24000c9c 	.word	0x24000c9c
 80072bc:	24000d04 	.word	0x24000d04

080072c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072c6:	4b0b      	ldr	r3, [pc, #44]	; (80072f4 <xTaskGetSchedulerState+0x34>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d102      	bne.n	80072d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072ce:	2301      	movs	r3, #1
 80072d0:	607b      	str	r3, [r7, #4]
 80072d2:	e008      	b.n	80072e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072d4:	4b08      	ldr	r3, [pc, #32]	; (80072f8 <xTaskGetSchedulerState+0x38>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d102      	bne.n	80072e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072dc:	2302      	movs	r3, #2
 80072de:	607b      	str	r3, [r7, #4]
 80072e0:	e001      	b.n	80072e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072e2:	2300      	movs	r3, #0
 80072e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072e6:	687b      	ldr	r3, [r7, #4]
	}
 80072e8:	4618      	mov	r0, r3
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	24000cf0 	.word	0x24000cf0
 80072f8:	24000d0c 	.word	0x24000d0c

080072fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007308:	2300      	movs	r3, #0
 800730a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d056      	beq.n	80073c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007312:	4b2e      	ldr	r3, [pc, #184]	; (80073cc <xTaskPriorityDisinherit+0xd0>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	429a      	cmp	r2, r3
 800731a:	d00a      	beq.n	8007332 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	60fb      	str	r3, [r7, #12]
}
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10a      	bne.n	8007350 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800733a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	60bb      	str	r3, [r7, #8]
}
 800734c:	bf00      	nop
 800734e:	e7fe      	b.n	800734e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007354:	1e5a      	subs	r2, r3, #1
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007362:	429a      	cmp	r2, r3
 8007364:	d02c      	beq.n	80073c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800736a:	2b00      	cmp	r3, #0
 800736c:	d128      	bne.n	80073c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	3304      	adds	r3, #4
 8007372:	4618      	mov	r0, r3
 8007374:	f7fe fc0c 	bl	8005b90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007390:	4b0f      	ldr	r3, [pc, #60]	; (80073d0 <xTaskPriorityDisinherit+0xd4>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d903      	bls.n	80073a0 <xTaskPriorityDisinherit+0xa4>
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	4a0c      	ldr	r2, [pc, #48]	; (80073d0 <xTaskPriorityDisinherit+0xd4>)
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a4:	4613      	mov	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4a09      	ldr	r2, [pc, #36]	; (80073d4 <xTaskPriorityDisinherit+0xd8>)
 80073ae:	441a      	add	r2, r3
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	3304      	adds	r3, #4
 80073b4:	4619      	mov	r1, r3
 80073b6:	4610      	mov	r0, r2
 80073b8:	f7fe fb8d 	bl	8005ad6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80073bc:	2301      	movs	r3, #1
 80073be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073c0:	697b      	ldr	r3, [r7, #20]
	}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	24000810 	.word	0x24000810
 80073d0:	24000cec 	.word	0x24000cec
 80073d4:	24000814 	.word	0x24000814

080073d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073e2:	4b21      	ldr	r3, [pc, #132]	; (8007468 <prvAddCurrentTaskToDelayedList+0x90>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073e8:	4b20      	ldr	r3, [pc, #128]	; (800746c <prvAddCurrentTaskToDelayedList+0x94>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3304      	adds	r3, #4
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fe fbce 	bl	8005b90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073fa:	d10a      	bne.n	8007412 <prvAddCurrentTaskToDelayedList+0x3a>
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d007      	beq.n	8007412 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007402:	4b1a      	ldr	r3, [pc, #104]	; (800746c <prvAddCurrentTaskToDelayedList+0x94>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3304      	adds	r3, #4
 8007408:	4619      	mov	r1, r3
 800740a:	4819      	ldr	r0, [pc, #100]	; (8007470 <prvAddCurrentTaskToDelayedList+0x98>)
 800740c:	f7fe fb63 	bl	8005ad6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007410:	e026      	b.n	8007460 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4413      	add	r3, r2
 8007418:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800741a:	4b14      	ldr	r3, [pc, #80]	; (800746c <prvAddCurrentTaskToDelayedList+0x94>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	429a      	cmp	r2, r3
 8007428:	d209      	bcs.n	800743e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800742a:	4b12      	ldr	r3, [pc, #72]	; (8007474 <prvAddCurrentTaskToDelayedList+0x9c>)
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	4b0f      	ldr	r3, [pc, #60]	; (800746c <prvAddCurrentTaskToDelayedList+0x94>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3304      	adds	r3, #4
 8007434:	4619      	mov	r1, r3
 8007436:	4610      	mov	r0, r2
 8007438:	f7fe fb71 	bl	8005b1e <vListInsert>
}
 800743c:	e010      	b.n	8007460 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800743e:	4b0e      	ldr	r3, [pc, #56]	; (8007478 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	4b0a      	ldr	r3, [pc, #40]	; (800746c <prvAddCurrentTaskToDelayedList+0x94>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3304      	adds	r3, #4
 8007448:	4619      	mov	r1, r3
 800744a:	4610      	mov	r0, r2
 800744c:	f7fe fb67 	bl	8005b1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007450:	4b0a      	ldr	r3, [pc, #40]	; (800747c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	429a      	cmp	r2, r3
 8007458:	d202      	bcs.n	8007460 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800745a:	4a08      	ldr	r2, [pc, #32]	; (800747c <prvAddCurrentTaskToDelayedList+0xa4>)
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	6013      	str	r3, [r2, #0]
}
 8007460:	bf00      	nop
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	24000ce8 	.word	0x24000ce8
 800746c:	24000810 	.word	0x24000810
 8007470:	24000cd0 	.word	0x24000cd0
 8007474:	24000ca0 	.word	0x24000ca0
 8007478:	24000c9c 	.word	0x24000c9c
 800747c:	24000d04 	.word	0x24000d04

08007480 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08a      	sub	sp, #40	; 0x28
 8007484:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007486:	2300      	movs	r3, #0
 8007488:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800748a:	f000 fb07 	bl	8007a9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800748e:	4b1c      	ldr	r3, [pc, #112]	; (8007500 <xTimerCreateTimerTask+0x80>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d021      	beq.n	80074da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007496:	2300      	movs	r3, #0
 8007498:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800749a:	2300      	movs	r3, #0
 800749c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800749e:	1d3a      	adds	r2, r7, #4
 80074a0:	f107 0108 	add.w	r1, r7, #8
 80074a4:	f107 030c 	add.w	r3, r7, #12
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fe facd 	bl	8005a48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80074ae:	6879      	ldr	r1, [r7, #4]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	9202      	str	r2, [sp, #8]
 80074b6:	9301      	str	r3, [sp, #4]
 80074b8:	2302      	movs	r3, #2
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	2300      	movs	r3, #0
 80074be:	460a      	mov	r2, r1
 80074c0:	4910      	ldr	r1, [pc, #64]	; (8007504 <xTimerCreateTimerTask+0x84>)
 80074c2:	4811      	ldr	r0, [pc, #68]	; (8007508 <xTimerCreateTimerTask+0x88>)
 80074c4:	f7ff f8b4 	bl	8006630 <xTaskCreateStatic>
 80074c8:	4603      	mov	r3, r0
 80074ca:	4a10      	ldr	r2, [pc, #64]	; (800750c <xTimerCreateTimerTask+0x8c>)
 80074cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074ce:	4b0f      	ldr	r3, [pc, #60]	; (800750c <xTimerCreateTimerTask+0x8c>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80074d6:	2301      	movs	r3, #1
 80074d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	613b      	str	r3, [r7, #16]
}
 80074f2:	bf00      	nop
 80074f4:	e7fe      	b.n	80074f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80074f6:	697b      	ldr	r3, [r7, #20]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	24000d40 	.word	0x24000d40
 8007504:	08008600 	.word	0x08008600
 8007508:	08007645 	.word	0x08007645
 800750c:	24000d44 	.word	0x24000d44

08007510 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b08a      	sub	sp, #40	; 0x28
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800751e:	2300      	movs	r3, #0
 8007520:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10a      	bne.n	800753e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	623b      	str	r3, [r7, #32]
}
 800753a:	bf00      	nop
 800753c:	e7fe      	b.n	800753c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800753e:	4b1a      	ldr	r3, [pc, #104]	; (80075a8 <xTimerGenericCommand+0x98>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d02a      	beq.n	800759c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2b05      	cmp	r3, #5
 8007556:	dc18      	bgt.n	800758a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007558:	f7ff feb2 	bl	80072c0 <xTaskGetSchedulerState>
 800755c:	4603      	mov	r3, r0
 800755e:	2b02      	cmp	r3, #2
 8007560:	d109      	bne.n	8007576 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007562:	4b11      	ldr	r3, [pc, #68]	; (80075a8 <xTimerGenericCommand+0x98>)
 8007564:	6818      	ldr	r0, [r3, #0]
 8007566:	f107 0110 	add.w	r1, r7, #16
 800756a:	2300      	movs	r3, #0
 800756c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800756e:	f7fe fc77 	bl	8005e60 <xQueueGenericSend>
 8007572:	6278      	str	r0, [r7, #36]	; 0x24
 8007574:	e012      	b.n	800759c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007576:	4b0c      	ldr	r3, [pc, #48]	; (80075a8 <xTimerGenericCommand+0x98>)
 8007578:	6818      	ldr	r0, [r3, #0]
 800757a:	f107 0110 	add.w	r1, r7, #16
 800757e:	2300      	movs	r3, #0
 8007580:	2200      	movs	r2, #0
 8007582:	f7fe fc6d 	bl	8005e60 <xQueueGenericSend>
 8007586:	6278      	str	r0, [r7, #36]	; 0x24
 8007588:	e008      	b.n	800759c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800758a:	4b07      	ldr	r3, [pc, #28]	; (80075a8 <xTimerGenericCommand+0x98>)
 800758c:	6818      	ldr	r0, [r3, #0]
 800758e:	f107 0110 	add.w	r1, r7, #16
 8007592:	2300      	movs	r3, #0
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	f7fe fd61 	bl	800605c <xQueueGenericSendFromISR>
 800759a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3728      	adds	r7, #40	; 0x28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	24000d40 	.word	0x24000d40

080075ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af02      	add	r7, sp, #8
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075b6:	4b22      	ldr	r3, [pc, #136]	; (8007640 <prvProcessExpiredTimer+0x94>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	3304      	adds	r3, #4
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fe fae3 	bl	8005b90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075d0:	f003 0304 	and.w	r3, r3, #4
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d022      	beq.n	800761e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	699a      	ldr	r2, [r3, #24]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	18d1      	adds	r1, r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	6978      	ldr	r0, [r7, #20]
 80075e6:	f000 f8d1 	bl	800778c <prvInsertTimerInActiveList>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d01f      	beq.n	8007630 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075f0:	2300      	movs	r3, #0
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	2300      	movs	r3, #0
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	2100      	movs	r1, #0
 80075fa:	6978      	ldr	r0, [r7, #20]
 80075fc:	f7ff ff88 	bl	8007510 <xTimerGenericCommand>
 8007600:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d113      	bne.n	8007630 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760c:	f383 8811 	msr	BASEPRI, r3
 8007610:	f3bf 8f6f 	isb	sy
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	60fb      	str	r3, [r7, #12]
}
 800761a:	bf00      	nop
 800761c:	e7fe      	b.n	800761c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007624:	f023 0301 	bic.w	r3, r3, #1
 8007628:	b2da      	uxtb	r2, r3
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	6978      	ldr	r0, [r7, #20]
 8007636:	4798      	blx	r3
}
 8007638:	bf00      	nop
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	24000d38 	.word	0x24000d38

08007644 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800764c:	f107 0308 	add.w	r3, r7, #8
 8007650:	4618      	mov	r0, r3
 8007652:	f000 f857 	bl	8007704 <prvGetNextExpireTime>
 8007656:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	4619      	mov	r1, r3
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 f803 	bl	8007668 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007662:	f000 f8d5 	bl	8007810 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007666:	e7f1      	b.n	800764c <prvTimerTask+0x8>

08007668 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007672:	f7ff fa39 	bl	8006ae8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007676:	f107 0308 	add.w	r3, r7, #8
 800767a:	4618      	mov	r0, r3
 800767c:	f000 f866 	bl	800774c <prvSampleTimeNow>
 8007680:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d130      	bne.n	80076ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10a      	bne.n	80076a4 <prvProcessTimerOrBlockTask+0x3c>
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	429a      	cmp	r2, r3
 8007694:	d806      	bhi.n	80076a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007696:	f7ff fa35 	bl	8006b04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800769a:	68f9      	ldr	r1, [r7, #12]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7ff ff85 	bl	80075ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80076a2:	e024      	b.n	80076ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d008      	beq.n	80076bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076aa:	4b13      	ldr	r3, [pc, #76]	; (80076f8 <prvProcessTimerOrBlockTask+0x90>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <prvProcessTimerOrBlockTask+0x50>
 80076b4:	2301      	movs	r3, #1
 80076b6:	e000      	b.n	80076ba <prvProcessTimerOrBlockTask+0x52>
 80076b8:	2300      	movs	r3, #0
 80076ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076bc:	4b0f      	ldr	r3, [pc, #60]	; (80076fc <prvProcessTimerOrBlockTask+0x94>)
 80076be:	6818      	ldr	r0, [r3, #0]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	4619      	mov	r1, r3
 80076ca:	f7fe ff7d 	bl	80065c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076ce:	f7ff fa19 	bl	8006b04 <xTaskResumeAll>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10a      	bne.n	80076ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80076d8:	4b09      	ldr	r3, [pc, #36]	; (8007700 <prvProcessTimerOrBlockTask+0x98>)
 80076da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	f3bf 8f6f 	isb	sy
}
 80076e8:	e001      	b.n	80076ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80076ea:	f7ff fa0b 	bl	8006b04 <xTaskResumeAll>
}
 80076ee:	bf00      	nop
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	24000d3c 	.word	0x24000d3c
 80076fc:	24000d40 	.word	0x24000d40
 8007700:	e000ed04 	.word	0xe000ed04

08007704 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800770c:	4b0e      	ldr	r3, [pc, #56]	; (8007748 <prvGetNextExpireTime+0x44>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <prvGetNextExpireTime+0x16>
 8007716:	2201      	movs	r2, #1
 8007718:	e000      	b.n	800771c <prvGetNextExpireTime+0x18>
 800771a:	2200      	movs	r2, #0
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d105      	bne.n	8007734 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007728:	4b07      	ldr	r3, [pc, #28]	; (8007748 <prvGetNextExpireTime+0x44>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	60fb      	str	r3, [r7, #12]
 8007732:	e001      	b.n	8007738 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007738:	68fb      	ldr	r3, [r7, #12]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	24000d38 	.word	0x24000d38

0800774c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007754:	f7ff fa74 	bl	8006c40 <xTaskGetTickCount>
 8007758:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800775a:	4b0b      	ldr	r3, [pc, #44]	; (8007788 <prvSampleTimeNow+0x3c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	429a      	cmp	r2, r3
 8007762:	d205      	bcs.n	8007770 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007764:	f000 f936 	bl	80079d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	e002      	b.n	8007776 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007776:	4a04      	ldr	r2, [pc, #16]	; (8007788 <prvSampleTimeNow+0x3c>)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800777c:	68fb      	ldr	r3, [r7, #12]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	24000d48 	.word	0x24000d48

0800778c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800779a:	2300      	movs	r3, #0
 800779c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d812      	bhi.n	80077d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	1ad2      	subs	r2, r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d302      	bcc.n	80077c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077c0:	2301      	movs	r3, #1
 80077c2:	617b      	str	r3, [r7, #20]
 80077c4:	e01b      	b.n	80077fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077c6:	4b10      	ldr	r3, [pc, #64]	; (8007808 <prvInsertTimerInActiveList+0x7c>)
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3304      	adds	r3, #4
 80077ce:	4619      	mov	r1, r3
 80077d0:	4610      	mov	r0, r2
 80077d2:	f7fe f9a4 	bl	8005b1e <vListInsert>
 80077d6:	e012      	b.n	80077fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d206      	bcs.n	80077ee <prvInsertTimerInActiveList+0x62>
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d302      	bcc.n	80077ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077e8:	2301      	movs	r3, #1
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	e007      	b.n	80077fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077ee:	4b07      	ldr	r3, [pc, #28]	; (800780c <prvInsertTimerInActiveList+0x80>)
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3304      	adds	r3, #4
 80077f6:	4619      	mov	r1, r3
 80077f8:	4610      	mov	r0, r2
 80077fa:	f7fe f990 	bl	8005b1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80077fe:	697b      	ldr	r3, [r7, #20]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	24000d3c 	.word	0x24000d3c
 800780c:	24000d38 	.word	0x24000d38

08007810 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08e      	sub	sp, #56	; 0x38
 8007814:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007816:	e0ca      	b.n	80079ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	da18      	bge.n	8007850 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800781e:	1d3b      	adds	r3, r7, #4
 8007820:	3304      	adds	r3, #4
 8007822:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10a      	bne.n	8007840 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782e:	f383 8811 	msr	BASEPRI, r3
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	61fb      	str	r3, [r7, #28]
}
 800783c:	bf00      	nop
 800783e:	e7fe      	b.n	800783e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007846:	6850      	ldr	r0, [r2, #4]
 8007848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800784a:	6892      	ldr	r2, [r2, #8]
 800784c:	4611      	mov	r1, r2
 800784e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	f2c0 80aa 	blt.w	80079ac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d004      	beq.n	800786e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007866:	3304      	adds	r3, #4
 8007868:	4618      	mov	r0, r3
 800786a:	f7fe f991 	bl	8005b90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800786e:	463b      	mov	r3, r7
 8007870:	4618      	mov	r0, r3
 8007872:	f7ff ff6b 	bl	800774c <prvSampleTimeNow>
 8007876:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b09      	cmp	r3, #9
 800787c:	f200 8097 	bhi.w	80079ae <prvProcessReceivedCommands+0x19e>
 8007880:	a201      	add	r2, pc, #4	; (adr r2, 8007888 <prvProcessReceivedCommands+0x78>)
 8007882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007886:	bf00      	nop
 8007888:	080078b1 	.word	0x080078b1
 800788c:	080078b1 	.word	0x080078b1
 8007890:	080078b1 	.word	0x080078b1
 8007894:	08007925 	.word	0x08007925
 8007898:	08007939 	.word	0x08007939
 800789c:	08007983 	.word	0x08007983
 80078a0:	080078b1 	.word	0x080078b1
 80078a4:	080078b1 	.word	0x080078b1
 80078a8:	08007925 	.word	0x08007925
 80078ac:	08007939 	.word	0x08007939
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078b6:	f043 0301 	orr.w	r3, r3, #1
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	18d1      	adds	r1, r2, r3
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078d0:	f7ff ff5c 	bl	800778c <prvInsertTimerInActiveList>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d069      	beq.n	80079ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078e8:	f003 0304 	and.w	r3, r3, #4
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d05e      	beq.n	80079ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	441a      	add	r2, r3
 80078f8:	2300      	movs	r3, #0
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	2300      	movs	r3, #0
 80078fe:	2100      	movs	r1, #0
 8007900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007902:	f7ff fe05 	bl	8007510 <xTimerGenericCommand>
 8007906:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d14f      	bne.n	80079ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	61bb      	str	r3, [r7, #24]
}
 8007920:	bf00      	nop
 8007922:	e7fe      	b.n	8007922 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800792a:	f023 0301 	bic.w	r3, r3, #1
 800792e:	b2da      	uxtb	r2, r3
 8007930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007936:	e03a      	b.n	80079ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800793e:	f043 0301 	orr.w	r3, r3, #1
 8007942:	b2da      	uxtb	r2, r3
 8007944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10a      	bne.n	800796e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	617b      	str	r3, [r7, #20]
}
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007970:	699a      	ldr	r2, [r3, #24]
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	18d1      	adds	r1, r2, r3
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800797a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800797c:	f7ff ff06 	bl	800778c <prvInsertTimerInActiveList>
					break;
 8007980:	e015      	b.n	80079ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d103      	bne.n	8007998 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007992:	f000 fbdd 	bl	8008150 <vPortFree>
 8007996:	e00a      	b.n	80079ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800799e:	f023 0301 	bic.w	r3, r3, #1
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80079aa:	e000      	b.n	80079ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80079ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079ae:	4b08      	ldr	r3, [pc, #32]	; (80079d0 <prvProcessReceivedCommands+0x1c0>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	1d39      	adds	r1, r7, #4
 80079b4:	2200      	movs	r2, #0
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fe fbec 	bl	8006194 <xQueueReceive>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f47f af2a 	bne.w	8007818 <prvProcessReceivedCommands+0x8>
	}
}
 80079c4:	bf00      	nop
 80079c6:	bf00      	nop
 80079c8:	3730      	adds	r7, #48	; 0x30
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	24000d40 	.word	0x24000d40

080079d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b088      	sub	sp, #32
 80079d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079da:	e048      	b.n	8007a6e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079dc:	4b2d      	ldr	r3, [pc, #180]	; (8007a94 <prvSwitchTimerLists+0xc0>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079e6:	4b2b      	ldr	r3, [pc, #172]	; (8007a94 <prvSwitchTimerLists+0xc0>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3304      	adds	r3, #4
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fe f8cb 	bl	8005b90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a08:	f003 0304 	and.w	r3, r3, #4
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d02e      	beq.n	8007a6e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	4413      	add	r3, r2
 8007a18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d90e      	bls.n	8007a40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a2e:	4b19      	ldr	r3, [pc, #100]	; (8007a94 <prvSwitchTimerLists+0xc0>)
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3304      	adds	r3, #4
 8007a36:	4619      	mov	r1, r3
 8007a38:	4610      	mov	r0, r2
 8007a3a:	f7fe f870 	bl	8005b1e <vListInsert>
 8007a3e:	e016      	b.n	8007a6e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a40:	2300      	movs	r3, #0
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	2300      	movs	r3, #0
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	2100      	movs	r1, #0
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f7ff fd60 	bl	8007510 <xTimerGenericCommand>
 8007a50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10a      	bne.n	8007a6e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5c:	f383 8811 	msr	BASEPRI, r3
 8007a60:	f3bf 8f6f 	isb	sy
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	603b      	str	r3, [r7, #0]
}
 8007a6a:	bf00      	nop
 8007a6c:	e7fe      	b.n	8007a6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a6e:	4b09      	ldr	r3, [pc, #36]	; (8007a94 <prvSwitchTimerLists+0xc0>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1b1      	bne.n	80079dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a78:	4b06      	ldr	r3, [pc, #24]	; (8007a94 <prvSwitchTimerLists+0xc0>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a7e:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <prvSwitchTimerLists+0xc4>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a04      	ldr	r2, [pc, #16]	; (8007a94 <prvSwitchTimerLists+0xc0>)
 8007a84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a86:	4a04      	ldr	r2, [pc, #16]	; (8007a98 <prvSwitchTimerLists+0xc4>)
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	6013      	str	r3, [r2, #0]
}
 8007a8c:	bf00      	nop
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	24000d38 	.word	0x24000d38
 8007a98:	24000d3c 	.word	0x24000d3c

08007a9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007aa2:	f000 f967 	bl	8007d74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007aa6:	4b15      	ldr	r3, [pc, #84]	; (8007afc <prvCheckForValidListAndQueue+0x60>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d120      	bne.n	8007af0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007aae:	4814      	ldr	r0, [pc, #80]	; (8007b00 <prvCheckForValidListAndQueue+0x64>)
 8007ab0:	f7fd ffe4 	bl	8005a7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ab4:	4813      	ldr	r0, [pc, #76]	; (8007b04 <prvCheckForValidListAndQueue+0x68>)
 8007ab6:	f7fd ffe1 	bl	8005a7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007aba:	4b13      	ldr	r3, [pc, #76]	; (8007b08 <prvCheckForValidListAndQueue+0x6c>)
 8007abc:	4a10      	ldr	r2, [pc, #64]	; (8007b00 <prvCheckForValidListAndQueue+0x64>)
 8007abe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ac0:	4b12      	ldr	r3, [pc, #72]	; (8007b0c <prvCheckForValidListAndQueue+0x70>)
 8007ac2:	4a10      	ldr	r2, [pc, #64]	; (8007b04 <prvCheckForValidListAndQueue+0x68>)
 8007ac4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	4b11      	ldr	r3, [pc, #68]	; (8007b10 <prvCheckForValidListAndQueue+0x74>)
 8007acc:	4a11      	ldr	r2, [pc, #68]	; (8007b14 <prvCheckForValidListAndQueue+0x78>)
 8007ace:	2110      	movs	r1, #16
 8007ad0:	200a      	movs	r0, #10
 8007ad2:	f7fe f8ef 	bl	8005cb4 <xQueueGenericCreateStatic>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	4a08      	ldr	r2, [pc, #32]	; (8007afc <prvCheckForValidListAndQueue+0x60>)
 8007ada:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007adc:	4b07      	ldr	r3, [pc, #28]	; (8007afc <prvCheckForValidListAndQueue+0x60>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d005      	beq.n	8007af0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ae4:	4b05      	ldr	r3, [pc, #20]	; (8007afc <prvCheckForValidListAndQueue+0x60>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	490b      	ldr	r1, [pc, #44]	; (8007b18 <prvCheckForValidListAndQueue+0x7c>)
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fe fd42 	bl	8006574 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007af0:	f000 f970 	bl	8007dd4 <vPortExitCritical>
}
 8007af4:	bf00      	nop
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	24000d40 	.word	0x24000d40
 8007b00:	24000d10 	.word	0x24000d10
 8007b04:	24000d24 	.word	0x24000d24
 8007b08:	24000d38 	.word	0x24000d38
 8007b0c:	24000d3c 	.word	0x24000d3c
 8007b10:	24000dec 	.word	0x24000dec
 8007b14:	24000d4c 	.word	0x24000d4c
 8007b18:	08008608 	.word	0x08008608

08007b1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3b04      	subs	r3, #4
 8007b2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	3b04      	subs	r3, #4
 8007b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	f023 0201 	bic.w	r2, r3, #1
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3b04      	subs	r3, #4
 8007b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b4c:	4a0c      	ldr	r2, [pc, #48]	; (8007b80 <pxPortInitialiseStack+0x64>)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3b14      	subs	r3, #20
 8007b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3b04      	subs	r3, #4
 8007b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f06f 0202 	mvn.w	r2, #2
 8007b6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3b20      	subs	r3, #32
 8007b70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b72:	68fb      	ldr	r3, [r7, #12]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	08007b85 	.word	0x08007b85

08007b84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b8e:	4b12      	ldr	r3, [pc, #72]	; (8007bd8 <prvTaskExitError+0x54>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b96:	d00a      	beq.n	8007bae <prvTaskExitError+0x2a>
	__asm volatile
 8007b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	60fb      	str	r3, [r7, #12]
}
 8007baa:	bf00      	nop
 8007bac:	e7fe      	b.n	8007bac <prvTaskExitError+0x28>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	60bb      	str	r3, [r7, #8]
}
 8007bc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bc2:	bf00      	nop
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0fc      	beq.n	8007bc4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bca:	bf00      	nop
 8007bcc:	bf00      	nop
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr
 8007bd8:	24000010 	.word	0x24000010
 8007bdc:	00000000 	.word	0x00000000

08007be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007be0:	4b07      	ldr	r3, [pc, #28]	; (8007c00 <pxCurrentTCBConst2>)
 8007be2:	6819      	ldr	r1, [r3, #0]
 8007be4:	6808      	ldr	r0, [r1, #0]
 8007be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bea:	f380 8809 	msr	PSP, r0
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f04f 0000 	mov.w	r0, #0
 8007bf6:	f380 8811 	msr	BASEPRI, r0
 8007bfa:	4770      	bx	lr
 8007bfc:	f3af 8000 	nop.w

08007c00 <pxCurrentTCBConst2>:
 8007c00:	24000810 	.word	0x24000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop

08007c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c08:	4808      	ldr	r0, [pc, #32]	; (8007c2c <prvPortStartFirstTask+0x24>)
 8007c0a:	6800      	ldr	r0, [r0, #0]
 8007c0c:	6800      	ldr	r0, [r0, #0]
 8007c0e:	f380 8808 	msr	MSP, r0
 8007c12:	f04f 0000 	mov.w	r0, #0
 8007c16:	f380 8814 	msr	CONTROL, r0
 8007c1a:	b662      	cpsie	i
 8007c1c:	b661      	cpsie	f
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	df00      	svc	0
 8007c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c2a:	bf00      	nop
 8007c2c:	e000ed08 	.word	0xe000ed08

08007c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c36:	4b46      	ldr	r3, [pc, #280]	; (8007d50 <xPortStartScheduler+0x120>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a46      	ldr	r2, [pc, #280]	; (8007d54 <xPortStartScheduler+0x124>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d10a      	bne.n	8007c56 <xPortStartScheduler+0x26>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	613b      	str	r3, [r7, #16]
}
 8007c52:	bf00      	nop
 8007c54:	e7fe      	b.n	8007c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c56:	4b3e      	ldr	r3, [pc, #248]	; (8007d50 <xPortStartScheduler+0x120>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a3f      	ldr	r2, [pc, #252]	; (8007d58 <xPortStartScheduler+0x128>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d10a      	bne.n	8007c76 <xPortStartScheduler+0x46>
	__asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	60fb      	str	r3, [r7, #12]
}
 8007c72:	bf00      	nop
 8007c74:	e7fe      	b.n	8007c74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c76:	4b39      	ldr	r3, [pc, #228]	; (8007d5c <xPortStartScheduler+0x12c>)
 8007c78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	22ff      	movs	r2, #255	; 0xff
 8007c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c90:	78fb      	ldrb	r3, [r7, #3]
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	4b31      	ldr	r3, [pc, #196]	; (8007d60 <xPortStartScheduler+0x130>)
 8007c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c9e:	4b31      	ldr	r3, [pc, #196]	; (8007d64 <xPortStartScheduler+0x134>)
 8007ca0:	2207      	movs	r2, #7
 8007ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ca4:	e009      	b.n	8007cba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ca6:	4b2f      	ldr	r3, [pc, #188]	; (8007d64 <xPortStartScheduler+0x134>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3b01      	subs	r3, #1
 8007cac:	4a2d      	ldr	r2, [pc, #180]	; (8007d64 <xPortStartScheduler+0x134>)
 8007cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	005b      	lsls	r3, r3, #1
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cba:	78fb      	ldrb	r3, [r7, #3]
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc2:	2b80      	cmp	r3, #128	; 0x80
 8007cc4:	d0ef      	beq.n	8007ca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cc6:	4b27      	ldr	r3, [pc, #156]	; (8007d64 <xPortStartScheduler+0x134>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f1c3 0307 	rsb	r3, r3, #7
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d00a      	beq.n	8007ce8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	60bb      	str	r3, [r7, #8]
}
 8007ce4:	bf00      	nop
 8007ce6:	e7fe      	b.n	8007ce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ce8:	4b1e      	ldr	r3, [pc, #120]	; (8007d64 <xPortStartScheduler+0x134>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	021b      	lsls	r3, r3, #8
 8007cee:	4a1d      	ldr	r2, [pc, #116]	; (8007d64 <xPortStartScheduler+0x134>)
 8007cf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cf2:	4b1c      	ldr	r3, [pc, #112]	; (8007d64 <xPortStartScheduler+0x134>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cfa:	4a1a      	ldr	r2, [pc, #104]	; (8007d64 <xPortStartScheduler+0x134>)
 8007cfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d06:	4b18      	ldr	r3, [pc, #96]	; (8007d68 <xPortStartScheduler+0x138>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a17      	ldr	r2, [pc, #92]	; (8007d68 <xPortStartScheduler+0x138>)
 8007d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d12:	4b15      	ldr	r3, [pc, #84]	; (8007d68 <xPortStartScheduler+0x138>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a14      	ldr	r2, [pc, #80]	; (8007d68 <xPortStartScheduler+0x138>)
 8007d18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d1e:	f000 f8dd 	bl	8007edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d22:	4b12      	ldr	r3, [pc, #72]	; (8007d6c <xPortStartScheduler+0x13c>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d28:	f000 f8fc 	bl	8007f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d2c:	4b10      	ldr	r3, [pc, #64]	; (8007d70 <xPortStartScheduler+0x140>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a0f      	ldr	r2, [pc, #60]	; (8007d70 <xPortStartScheduler+0x140>)
 8007d32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d38:	f7ff ff66 	bl	8007c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d3c:	f7ff f84a 	bl	8006dd4 <vTaskSwitchContext>
	prvTaskExitError();
 8007d40:	f7ff ff20 	bl	8007b84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	e000ed00 	.word	0xe000ed00
 8007d54:	410fc271 	.word	0x410fc271
 8007d58:	410fc270 	.word	0x410fc270
 8007d5c:	e000e400 	.word	0xe000e400
 8007d60:	24000e3c 	.word	0x24000e3c
 8007d64:	24000e40 	.word	0x24000e40
 8007d68:	e000ed20 	.word	0xe000ed20
 8007d6c:	24000010 	.word	0x24000010
 8007d70:	e000ef34 	.word	0xe000ef34

08007d74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
	__asm volatile
 8007d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	607b      	str	r3, [r7, #4]
}
 8007d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d8e:	4b0f      	ldr	r3, [pc, #60]	; (8007dcc <vPortEnterCritical+0x58>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3301      	adds	r3, #1
 8007d94:	4a0d      	ldr	r2, [pc, #52]	; (8007dcc <vPortEnterCritical+0x58>)
 8007d96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d98:	4b0c      	ldr	r3, [pc, #48]	; (8007dcc <vPortEnterCritical+0x58>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d10f      	bne.n	8007dc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007da0:	4b0b      	ldr	r3, [pc, #44]	; (8007dd0 <vPortEnterCritical+0x5c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00a      	beq.n	8007dc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	603b      	str	r3, [r7, #0]
}
 8007dbc:	bf00      	nop
 8007dbe:	e7fe      	b.n	8007dbe <vPortEnterCritical+0x4a>
	}
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	24000010 	.word	0x24000010
 8007dd0:	e000ed04 	.word	0xe000ed04

08007dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dda:	4b12      	ldr	r3, [pc, #72]	; (8007e24 <vPortExitCritical+0x50>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d10a      	bne.n	8007df8 <vPortExitCritical+0x24>
	__asm volatile
 8007de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de6:	f383 8811 	msr	BASEPRI, r3
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	f3bf 8f4f 	dsb	sy
 8007df2:	607b      	str	r3, [r7, #4]
}
 8007df4:	bf00      	nop
 8007df6:	e7fe      	b.n	8007df6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007df8:	4b0a      	ldr	r3, [pc, #40]	; (8007e24 <vPortExitCritical+0x50>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	4a09      	ldr	r2, [pc, #36]	; (8007e24 <vPortExitCritical+0x50>)
 8007e00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e02:	4b08      	ldr	r3, [pc, #32]	; (8007e24 <vPortExitCritical+0x50>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d105      	bne.n	8007e16 <vPortExitCritical+0x42>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	f383 8811 	msr	BASEPRI, r3
}
 8007e14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e16:	bf00      	nop
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	24000010 	.word	0x24000010
	...

08007e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e30:	f3ef 8009 	mrs	r0, PSP
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	4b15      	ldr	r3, [pc, #84]	; (8007e90 <pxCurrentTCBConst>)
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	f01e 0f10 	tst.w	lr, #16
 8007e40:	bf08      	it	eq
 8007e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e4a:	6010      	str	r0, [r2, #0]
 8007e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e54:	f380 8811 	msr	BASEPRI, r0
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f7fe ffb8 	bl	8006dd4 <vTaskSwitchContext>
 8007e64:	f04f 0000 	mov.w	r0, #0
 8007e68:	f380 8811 	msr	BASEPRI, r0
 8007e6c:	bc09      	pop	{r0, r3}
 8007e6e:	6819      	ldr	r1, [r3, #0]
 8007e70:	6808      	ldr	r0, [r1, #0]
 8007e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e76:	f01e 0f10 	tst.w	lr, #16
 8007e7a:	bf08      	it	eq
 8007e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e80:	f380 8809 	msr	PSP, r0
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	f3af 8000 	nop.w

08007e90 <pxCurrentTCBConst>:
 8007e90:	24000810 	.word	0x24000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e94:	bf00      	nop
 8007e96:	bf00      	nop

08007e98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	607b      	str	r3, [r7, #4]
}
 8007eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007eb2:	f7fe fed5 	bl	8006c60 <xTaskIncrementTick>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ebc:	4b06      	ldr	r3, [pc, #24]	; (8007ed8 <xPortSysTickHandler+0x40>)
 8007ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	f383 8811 	msr	BASEPRI, r3
}
 8007ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ed0:	bf00      	nop
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	e000ed04 	.word	0xe000ed04

08007edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ee0:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <vPortSetupTimerInterrupt+0x34>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ee6:	4b0b      	ldr	r3, [pc, #44]	; (8007f14 <vPortSetupTimerInterrupt+0x38>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007eec:	4b0a      	ldr	r3, [pc, #40]	; (8007f18 <vPortSetupTimerInterrupt+0x3c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a0a      	ldr	r2, [pc, #40]	; (8007f1c <vPortSetupTimerInterrupt+0x40>)
 8007ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef6:	099b      	lsrs	r3, r3, #6
 8007ef8:	4a09      	ldr	r2, [pc, #36]	; (8007f20 <vPortSetupTimerInterrupt+0x44>)
 8007efa:	3b01      	subs	r3, #1
 8007efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007efe:	4b04      	ldr	r3, [pc, #16]	; (8007f10 <vPortSetupTimerInterrupt+0x34>)
 8007f00:	2207      	movs	r2, #7
 8007f02:	601a      	str	r2, [r3, #0]
}
 8007f04:	bf00      	nop
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	e000e010 	.word	0xe000e010
 8007f14:	e000e018 	.word	0xe000e018
 8007f18:	24000000 	.word	0x24000000
 8007f1c:	10624dd3 	.word	0x10624dd3
 8007f20:	e000e014 	.word	0xe000e014

08007f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f34 <vPortEnableVFP+0x10>
 8007f28:	6801      	ldr	r1, [r0, #0]
 8007f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f2e:	6001      	str	r1, [r0, #0]
 8007f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f32:	bf00      	nop
 8007f34:	e000ed88 	.word	0xe000ed88

08007f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f3e:	f3ef 8305 	mrs	r3, IPSR
 8007f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b0f      	cmp	r3, #15
 8007f48:	d914      	bls.n	8007f74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f4a:	4a17      	ldr	r2, [pc, #92]	; (8007fa8 <vPortValidateInterruptPriority+0x70>)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4413      	add	r3, r2
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f54:	4b15      	ldr	r3, [pc, #84]	; (8007fac <vPortValidateInterruptPriority+0x74>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	7afa      	ldrb	r2, [r7, #11]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d20a      	bcs.n	8007f74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	607b      	str	r3, [r7, #4]
}
 8007f70:	bf00      	nop
 8007f72:	e7fe      	b.n	8007f72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f74:	4b0e      	ldr	r3, [pc, #56]	; (8007fb0 <vPortValidateInterruptPriority+0x78>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f7c:	4b0d      	ldr	r3, [pc, #52]	; (8007fb4 <vPortValidateInterruptPriority+0x7c>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d90a      	bls.n	8007f9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	603b      	str	r3, [r7, #0]
}
 8007f96:	bf00      	nop
 8007f98:	e7fe      	b.n	8007f98 <vPortValidateInterruptPriority+0x60>
	}
 8007f9a:	bf00      	nop
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	e000e3f0 	.word	0xe000e3f0
 8007fac:	24000e3c 	.word	0x24000e3c
 8007fb0:	e000ed0c 	.word	0xe000ed0c
 8007fb4:	24000e40 	.word	0x24000e40

08007fb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b08a      	sub	sp, #40	; 0x28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fc4:	f7fe fd90 	bl	8006ae8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fc8:	4b5b      	ldr	r3, [pc, #364]	; (8008138 <pvPortMalloc+0x180>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fd0:	f000 f920 	bl	8008214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fd4:	4b59      	ldr	r3, [pc, #356]	; (800813c <pvPortMalloc+0x184>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4013      	ands	r3, r2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f040 8093 	bne.w	8008108 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d01d      	beq.n	8008024 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007fe8:	2208      	movs	r2, #8
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4413      	add	r3, r2
 8007fee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f003 0307 	and.w	r3, r3, #7
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d014      	beq.n	8008024 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f023 0307 	bic.w	r3, r3, #7
 8008000:	3308      	adds	r3, #8
 8008002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f003 0307 	and.w	r3, r3, #7
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00a      	beq.n	8008024 <pvPortMalloc+0x6c>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	617b      	str	r3, [r7, #20]
}
 8008020:	bf00      	nop
 8008022:	e7fe      	b.n	8008022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d06e      	beq.n	8008108 <pvPortMalloc+0x150>
 800802a:	4b45      	ldr	r3, [pc, #276]	; (8008140 <pvPortMalloc+0x188>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	429a      	cmp	r2, r3
 8008032:	d869      	bhi.n	8008108 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008034:	4b43      	ldr	r3, [pc, #268]	; (8008144 <pvPortMalloc+0x18c>)
 8008036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008038:	4b42      	ldr	r3, [pc, #264]	; (8008144 <pvPortMalloc+0x18c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800803e:	e004      	b.n	800804a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	429a      	cmp	r2, r3
 8008052:	d903      	bls.n	800805c <pvPortMalloc+0xa4>
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1f1      	bne.n	8008040 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800805c:	4b36      	ldr	r3, [pc, #216]	; (8008138 <pvPortMalloc+0x180>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008062:	429a      	cmp	r2, r3
 8008064:	d050      	beq.n	8008108 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2208      	movs	r2, #8
 800806c:	4413      	add	r3, r2
 800806e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	1ad2      	subs	r2, r2, r3
 8008080:	2308      	movs	r3, #8
 8008082:	005b      	lsls	r3, r3, #1
 8008084:	429a      	cmp	r2, r3
 8008086:	d91f      	bls.n	80080c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4413      	add	r3, r2
 800808e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	f003 0307 	and.w	r3, r3, #7
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <pvPortMalloc+0xf8>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	613b      	str	r3, [r7, #16]
}
 80080ac:	bf00      	nop
 80080ae:	e7fe      	b.n	80080ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	1ad2      	subs	r2, r2, r3
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080c2:	69b8      	ldr	r0, [r7, #24]
 80080c4:	f000 f908 	bl	80082d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080c8:	4b1d      	ldr	r3, [pc, #116]	; (8008140 <pvPortMalloc+0x188>)
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	4a1b      	ldr	r2, [pc, #108]	; (8008140 <pvPortMalloc+0x188>)
 80080d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080d6:	4b1a      	ldr	r3, [pc, #104]	; (8008140 <pvPortMalloc+0x188>)
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	4b1b      	ldr	r3, [pc, #108]	; (8008148 <pvPortMalloc+0x190>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d203      	bcs.n	80080ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080e2:	4b17      	ldr	r3, [pc, #92]	; (8008140 <pvPortMalloc+0x188>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a18      	ldr	r2, [pc, #96]	; (8008148 <pvPortMalloc+0x190>)
 80080e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	4b13      	ldr	r3, [pc, #76]	; (800813c <pvPortMalloc+0x184>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	431a      	orrs	r2, r3
 80080f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80080fe:	4b13      	ldr	r3, [pc, #76]	; (800814c <pvPortMalloc+0x194>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3301      	adds	r3, #1
 8008104:	4a11      	ldr	r2, [pc, #68]	; (800814c <pvPortMalloc+0x194>)
 8008106:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008108:	f7fe fcfc 	bl	8006b04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	f003 0307 	and.w	r3, r3, #7
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00a      	beq.n	800812c <pvPortMalloc+0x174>
	__asm volatile
 8008116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	60fb      	str	r3, [r7, #12]
}
 8008128:	bf00      	nop
 800812a:	e7fe      	b.n	800812a <pvPortMalloc+0x172>
	return pvReturn;
 800812c:	69fb      	ldr	r3, [r7, #28]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3728      	adds	r7, #40	; 0x28
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	24004a4c 	.word	0x24004a4c
 800813c:	24004a60 	.word	0x24004a60
 8008140:	24004a50 	.word	0x24004a50
 8008144:	24004a44 	.word	0x24004a44
 8008148:	24004a54 	.word	0x24004a54
 800814c:	24004a58 	.word	0x24004a58

08008150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d04d      	beq.n	80081fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008162:	2308      	movs	r3, #8
 8008164:	425b      	negs	r3, r3
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	4413      	add	r3, r2
 800816a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	4b24      	ldr	r3, [pc, #144]	; (8008208 <vPortFree+0xb8>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4013      	ands	r3, r2
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10a      	bne.n	8008194 <vPortFree+0x44>
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	60fb      	str	r3, [r7, #12]
}
 8008190:	bf00      	nop
 8008192:	e7fe      	b.n	8008192 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00a      	beq.n	80081b2 <vPortFree+0x62>
	__asm volatile
 800819c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a0:	f383 8811 	msr	BASEPRI, r3
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	60bb      	str	r3, [r7, #8]
}
 80081ae:	bf00      	nop
 80081b0:	e7fe      	b.n	80081b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	685a      	ldr	r2, [r3, #4]
 80081b6:	4b14      	ldr	r3, [pc, #80]	; (8008208 <vPortFree+0xb8>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4013      	ands	r3, r2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d01e      	beq.n	80081fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d11a      	bne.n	80081fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	4b0e      	ldr	r3, [pc, #56]	; (8008208 <vPortFree+0xb8>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	43db      	mvns	r3, r3
 80081d2:	401a      	ands	r2, r3
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081d8:	f7fe fc86 	bl	8006ae8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	4b0a      	ldr	r3, [pc, #40]	; (800820c <vPortFree+0xbc>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4413      	add	r3, r2
 80081e6:	4a09      	ldr	r2, [pc, #36]	; (800820c <vPortFree+0xbc>)
 80081e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081ea:	6938      	ldr	r0, [r7, #16]
 80081ec:	f000 f874 	bl	80082d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80081f0:	4b07      	ldr	r3, [pc, #28]	; (8008210 <vPortFree+0xc0>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3301      	adds	r3, #1
 80081f6:	4a06      	ldr	r2, [pc, #24]	; (8008210 <vPortFree+0xc0>)
 80081f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80081fa:	f7fe fc83 	bl	8006b04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081fe:	bf00      	nop
 8008200:	3718      	adds	r7, #24
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	24004a60 	.word	0x24004a60
 800820c:	24004a50 	.word	0x24004a50
 8008210:	24004a5c 	.word	0x24004a5c

08008214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800821a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800821e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008220:	4b27      	ldr	r3, [pc, #156]	; (80082c0 <prvHeapInit+0xac>)
 8008222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f003 0307 	and.w	r3, r3, #7
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00c      	beq.n	8008248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3307      	adds	r3, #7
 8008232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f023 0307 	bic.w	r3, r3, #7
 800823a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	4a1f      	ldr	r2, [pc, #124]	; (80082c0 <prvHeapInit+0xac>)
 8008244:	4413      	add	r3, r2
 8008246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800824c:	4a1d      	ldr	r2, [pc, #116]	; (80082c4 <prvHeapInit+0xb0>)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008252:	4b1c      	ldr	r3, [pc, #112]	; (80082c4 <prvHeapInit+0xb0>)
 8008254:	2200      	movs	r2, #0
 8008256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	4413      	add	r3, r2
 800825e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008260:	2208      	movs	r2, #8
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	1a9b      	subs	r3, r3, r2
 8008266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f023 0307 	bic.w	r3, r3, #7
 800826e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	4a15      	ldr	r2, [pc, #84]	; (80082c8 <prvHeapInit+0xb4>)
 8008274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008276:	4b14      	ldr	r3, [pc, #80]	; (80082c8 <prvHeapInit+0xb4>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2200      	movs	r2, #0
 800827c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800827e:	4b12      	ldr	r3, [pc, #72]	; (80082c8 <prvHeapInit+0xb4>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2200      	movs	r2, #0
 8008284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	1ad2      	subs	r2, r2, r3
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008294:	4b0c      	ldr	r3, [pc, #48]	; (80082c8 <prvHeapInit+0xb4>)
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	4a0a      	ldr	r2, [pc, #40]	; (80082cc <prvHeapInit+0xb8>)
 80082a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	4a09      	ldr	r2, [pc, #36]	; (80082d0 <prvHeapInit+0xbc>)
 80082aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082ac:	4b09      	ldr	r3, [pc, #36]	; (80082d4 <prvHeapInit+0xc0>)
 80082ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082b2:	601a      	str	r2, [r3, #0]
}
 80082b4:	bf00      	nop
 80082b6:	3714      	adds	r7, #20
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	24000e44 	.word	0x24000e44
 80082c4:	24004a44 	.word	0x24004a44
 80082c8:	24004a4c 	.word	0x24004a4c
 80082cc:	24004a54 	.word	0x24004a54
 80082d0:	24004a50 	.word	0x24004a50
 80082d4:	24004a60 	.word	0x24004a60

080082d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082e0:	4b28      	ldr	r3, [pc, #160]	; (8008384 <prvInsertBlockIntoFreeList+0xac>)
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	e002      	b.n	80082ec <prvInsertBlockIntoFreeList+0x14>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	60fb      	str	r3, [r7, #12]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d8f7      	bhi.n	80082e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	4413      	add	r3, r2
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	429a      	cmp	r2, r3
 8008306:	d108      	bne.n	800831a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	685a      	ldr	r2, [r3, #4]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	441a      	add	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	441a      	add	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	429a      	cmp	r2, r3
 800832c:	d118      	bne.n	8008360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	4b15      	ldr	r3, [pc, #84]	; (8008388 <prvInsertBlockIntoFreeList+0xb0>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	429a      	cmp	r2, r3
 8008338:	d00d      	beq.n	8008356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685a      	ldr	r2, [r3, #4]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	441a      	add	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	601a      	str	r2, [r3, #0]
 8008354:	e008      	b.n	8008368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008356:	4b0c      	ldr	r3, [pc, #48]	; (8008388 <prvInsertBlockIntoFreeList+0xb0>)
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	e003      	b.n	8008368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	429a      	cmp	r2, r3
 800836e:	d002      	beq.n	8008376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008376:	bf00      	nop
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	24004a44 	.word	0x24004a44
 8008388:	24004a4c 	.word	0x24004a4c

0800838c <__libc_init_array>:
 800838c:	b570      	push	{r4, r5, r6, lr}
 800838e:	4d0d      	ldr	r5, [pc, #52]	; (80083c4 <__libc_init_array+0x38>)
 8008390:	4c0d      	ldr	r4, [pc, #52]	; (80083c8 <__libc_init_array+0x3c>)
 8008392:	1b64      	subs	r4, r4, r5
 8008394:	10a4      	asrs	r4, r4, #2
 8008396:	2600      	movs	r6, #0
 8008398:	42a6      	cmp	r6, r4
 800839a:	d109      	bne.n	80083b0 <__libc_init_array+0x24>
 800839c:	4d0b      	ldr	r5, [pc, #44]	; (80083cc <__libc_init_array+0x40>)
 800839e:	4c0c      	ldr	r4, [pc, #48]	; (80083d0 <__libc_init_array+0x44>)
 80083a0:	f000 f8f6 	bl	8008590 <_init>
 80083a4:	1b64      	subs	r4, r4, r5
 80083a6:	10a4      	asrs	r4, r4, #2
 80083a8:	2600      	movs	r6, #0
 80083aa:	42a6      	cmp	r6, r4
 80083ac:	d105      	bne.n	80083ba <__libc_init_array+0x2e>
 80083ae:	bd70      	pop	{r4, r5, r6, pc}
 80083b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b4:	4798      	blx	r3
 80083b6:	3601      	adds	r6, #1
 80083b8:	e7ee      	b.n	8008398 <__libc_init_array+0xc>
 80083ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80083be:	4798      	blx	r3
 80083c0:	3601      	adds	r6, #1
 80083c2:	e7f2      	b.n	80083aa <__libc_init_array+0x1e>
 80083c4:	08008770 	.word	0x08008770
 80083c8:	08008770 	.word	0x08008770
 80083cc:	08008770 	.word	0x08008770
 80083d0:	08008774 	.word	0x08008774

080083d4 <__retarget_lock_acquire_recursive>:
 80083d4:	4770      	bx	lr

080083d6 <__retarget_lock_release_recursive>:
 80083d6:	4770      	bx	lr

080083d8 <memcpy>:
 80083d8:	440a      	add	r2, r1
 80083da:	4291      	cmp	r1, r2
 80083dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80083e0:	d100      	bne.n	80083e4 <memcpy+0xc>
 80083e2:	4770      	bx	lr
 80083e4:	b510      	push	{r4, lr}
 80083e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083ee:	4291      	cmp	r1, r2
 80083f0:	d1f9      	bne.n	80083e6 <memcpy+0xe>
 80083f2:	bd10      	pop	{r4, pc}

080083f4 <memset>:
 80083f4:	4402      	add	r2, r0
 80083f6:	4603      	mov	r3, r0
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d100      	bne.n	80083fe <memset+0xa>
 80083fc:	4770      	bx	lr
 80083fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008402:	e7f9      	b.n	80083f8 <memset+0x4>

08008404 <cleanup_glue>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	460c      	mov	r4, r1
 8008408:	6809      	ldr	r1, [r1, #0]
 800840a:	4605      	mov	r5, r0
 800840c:	b109      	cbz	r1, 8008412 <cleanup_glue+0xe>
 800840e:	f7ff fff9 	bl	8008404 <cleanup_glue>
 8008412:	4621      	mov	r1, r4
 8008414:	4628      	mov	r0, r5
 8008416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800841a:	f000 b869 	b.w	80084f0 <_free_r>
	...

08008420 <_reclaim_reent>:
 8008420:	4b2c      	ldr	r3, [pc, #176]	; (80084d4 <_reclaim_reent+0xb4>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4283      	cmp	r3, r0
 8008426:	b570      	push	{r4, r5, r6, lr}
 8008428:	4604      	mov	r4, r0
 800842a:	d051      	beq.n	80084d0 <_reclaim_reent+0xb0>
 800842c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800842e:	b143      	cbz	r3, 8008442 <_reclaim_reent+0x22>
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d14a      	bne.n	80084cc <_reclaim_reent+0xac>
 8008436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008438:	6819      	ldr	r1, [r3, #0]
 800843a:	b111      	cbz	r1, 8008442 <_reclaim_reent+0x22>
 800843c:	4620      	mov	r0, r4
 800843e:	f000 f857 	bl	80084f0 <_free_r>
 8008442:	6961      	ldr	r1, [r4, #20]
 8008444:	b111      	cbz	r1, 800844c <_reclaim_reent+0x2c>
 8008446:	4620      	mov	r0, r4
 8008448:	f000 f852 	bl	80084f0 <_free_r>
 800844c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800844e:	b111      	cbz	r1, 8008456 <_reclaim_reent+0x36>
 8008450:	4620      	mov	r0, r4
 8008452:	f000 f84d 	bl	80084f0 <_free_r>
 8008456:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008458:	b111      	cbz	r1, 8008460 <_reclaim_reent+0x40>
 800845a:	4620      	mov	r0, r4
 800845c:	f000 f848 	bl	80084f0 <_free_r>
 8008460:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008462:	b111      	cbz	r1, 800846a <_reclaim_reent+0x4a>
 8008464:	4620      	mov	r0, r4
 8008466:	f000 f843 	bl	80084f0 <_free_r>
 800846a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800846c:	b111      	cbz	r1, 8008474 <_reclaim_reent+0x54>
 800846e:	4620      	mov	r0, r4
 8008470:	f000 f83e 	bl	80084f0 <_free_r>
 8008474:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008476:	b111      	cbz	r1, 800847e <_reclaim_reent+0x5e>
 8008478:	4620      	mov	r0, r4
 800847a:	f000 f839 	bl	80084f0 <_free_r>
 800847e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008480:	b111      	cbz	r1, 8008488 <_reclaim_reent+0x68>
 8008482:	4620      	mov	r0, r4
 8008484:	f000 f834 	bl	80084f0 <_free_r>
 8008488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800848a:	b111      	cbz	r1, 8008492 <_reclaim_reent+0x72>
 800848c:	4620      	mov	r0, r4
 800848e:	f000 f82f 	bl	80084f0 <_free_r>
 8008492:	69a3      	ldr	r3, [r4, #24]
 8008494:	b1e3      	cbz	r3, 80084d0 <_reclaim_reent+0xb0>
 8008496:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008498:	4620      	mov	r0, r4
 800849a:	4798      	blx	r3
 800849c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800849e:	b1b9      	cbz	r1, 80084d0 <_reclaim_reent+0xb0>
 80084a0:	4620      	mov	r0, r4
 80084a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80084a6:	f7ff bfad 	b.w	8008404 <cleanup_glue>
 80084aa:	5949      	ldr	r1, [r1, r5]
 80084ac:	b941      	cbnz	r1, 80084c0 <_reclaim_reent+0xa0>
 80084ae:	3504      	adds	r5, #4
 80084b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084b2:	2d80      	cmp	r5, #128	; 0x80
 80084b4:	68d9      	ldr	r1, [r3, #12]
 80084b6:	d1f8      	bne.n	80084aa <_reclaim_reent+0x8a>
 80084b8:	4620      	mov	r0, r4
 80084ba:	f000 f819 	bl	80084f0 <_free_r>
 80084be:	e7ba      	b.n	8008436 <_reclaim_reent+0x16>
 80084c0:	680e      	ldr	r6, [r1, #0]
 80084c2:	4620      	mov	r0, r4
 80084c4:	f000 f814 	bl	80084f0 <_free_r>
 80084c8:	4631      	mov	r1, r6
 80084ca:	e7ef      	b.n	80084ac <_reclaim_reent+0x8c>
 80084cc:	2500      	movs	r5, #0
 80084ce:	e7ef      	b.n	80084b0 <_reclaim_reent+0x90>
 80084d0:	bd70      	pop	{r4, r5, r6, pc}
 80084d2:	bf00      	nop
 80084d4:	24000014 	.word	0x24000014

080084d8 <__malloc_lock>:
 80084d8:	4801      	ldr	r0, [pc, #4]	; (80084e0 <__malloc_lock+0x8>)
 80084da:	f7ff bf7b 	b.w	80083d4 <__retarget_lock_acquire_recursive>
 80084de:	bf00      	nop
 80084e0:	24004c18 	.word	0x24004c18

080084e4 <__malloc_unlock>:
 80084e4:	4801      	ldr	r0, [pc, #4]	; (80084ec <__malloc_unlock+0x8>)
 80084e6:	f7ff bf76 	b.w	80083d6 <__retarget_lock_release_recursive>
 80084ea:	bf00      	nop
 80084ec:	24004c18 	.word	0x24004c18

080084f0 <_free_r>:
 80084f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084f2:	2900      	cmp	r1, #0
 80084f4:	d048      	beq.n	8008588 <_free_r+0x98>
 80084f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084fa:	9001      	str	r0, [sp, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f1a1 0404 	sub.w	r4, r1, #4
 8008502:	bfb8      	it	lt
 8008504:	18e4      	addlt	r4, r4, r3
 8008506:	f7ff ffe7 	bl	80084d8 <__malloc_lock>
 800850a:	4a20      	ldr	r2, [pc, #128]	; (800858c <_free_r+0x9c>)
 800850c:	9801      	ldr	r0, [sp, #4]
 800850e:	6813      	ldr	r3, [r2, #0]
 8008510:	4615      	mov	r5, r2
 8008512:	b933      	cbnz	r3, 8008522 <_free_r+0x32>
 8008514:	6063      	str	r3, [r4, #4]
 8008516:	6014      	str	r4, [r2, #0]
 8008518:	b003      	add	sp, #12
 800851a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800851e:	f7ff bfe1 	b.w	80084e4 <__malloc_unlock>
 8008522:	42a3      	cmp	r3, r4
 8008524:	d90b      	bls.n	800853e <_free_r+0x4e>
 8008526:	6821      	ldr	r1, [r4, #0]
 8008528:	1862      	adds	r2, r4, r1
 800852a:	4293      	cmp	r3, r2
 800852c:	bf04      	itt	eq
 800852e:	681a      	ldreq	r2, [r3, #0]
 8008530:	685b      	ldreq	r3, [r3, #4]
 8008532:	6063      	str	r3, [r4, #4]
 8008534:	bf04      	itt	eq
 8008536:	1852      	addeq	r2, r2, r1
 8008538:	6022      	streq	r2, [r4, #0]
 800853a:	602c      	str	r4, [r5, #0]
 800853c:	e7ec      	b.n	8008518 <_free_r+0x28>
 800853e:	461a      	mov	r2, r3
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	b10b      	cbz	r3, 8008548 <_free_r+0x58>
 8008544:	42a3      	cmp	r3, r4
 8008546:	d9fa      	bls.n	800853e <_free_r+0x4e>
 8008548:	6811      	ldr	r1, [r2, #0]
 800854a:	1855      	adds	r5, r2, r1
 800854c:	42a5      	cmp	r5, r4
 800854e:	d10b      	bne.n	8008568 <_free_r+0x78>
 8008550:	6824      	ldr	r4, [r4, #0]
 8008552:	4421      	add	r1, r4
 8008554:	1854      	adds	r4, r2, r1
 8008556:	42a3      	cmp	r3, r4
 8008558:	6011      	str	r1, [r2, #0]
 800855a:	d1dd      	bne.n	8008518 <_free_r+0x28>
 800855c:	681c      	ldr	r4, [r3, #0]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	6053      	str	r3, [r2, #4]
 8008562:	4421      	add	r1, r4
 8008564:	6011      	str	r1, [r2, #0]
 8008566:	e7d7      	b.n	8008518 <_free_r+0x28>
 8008568:	d902      	bls.n	8008570 <_free_r+0x80>
 800856a:	230c      	movs	r3, #12
 800856c:	6003      	str	r3, [r0, #0]
 800856e:	e7d3      	b.n	8008518 <_free_r+0x28>
 8008570:	6825      	ldr	r5, [r4, #0]
 8008572:	1961      	adds	r1, r4, r5
 8008574:	428b      	cmp	r3, r1
 8008576:	bf04      	itt	eq
 8008578:	6819      	ldreq	r1, [r3, #0]
 800857a:	685b      	ldreq	r3, [r3, #4]
 800857c:	6063      	str	r3, [r4, #4]
 800857e:	bf04      	itt	eq
 8008580:	1949      	addeq	r1, r1, r5
 8008582:	6021      	streq	r1, [r4, #0]
 8008584:	6054      	str	r4, [r2, #4]
 8008586:	e7c7      	b.n	8008518 <_free_r+0x28>
 8008588:	b003      	add	sp, #12
 800858a:	bd30      	pop	{r4, r5, pc}
 800858c:	24004a64 	.word	0x24004a64

08008590 <_init>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	bf00      	nop
 8008594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008596:	bc08      	pop	{r3}
 8008598:	469e      	mov	lr, r3
 800859a:	4770      	bx	lr

0800859c <_fini>:
 800859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859e:	bf00      	nop
 80085a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a2:	bc08      	pop	{r3}
 80085a4:	469e      	mov	lr, r3
 80085a6:	4770      	bx	lr
