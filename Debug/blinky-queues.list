
blinky-queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008788  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08008a38  08008a38  00018a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008d04  08008d04  00018d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008d0c  08008d0c  00018d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008d10  08008d10  00018d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08008d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ba8  24000078  08008d8c  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004c20  08008d8c  00024c20  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002ffc5  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004bcc  00000000  00000000  0005006b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001868  00000000  00000000  00054c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000016f0  00000000  00000000  000564a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000330c5  00000000  00000000  00057b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e5c6  00000000  00000000  0008ac55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149be0  00000000  00000000  000a921b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001f2dfb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a2c  00000000  00000000  001f2e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008a20 	.word	0x08008a20

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	08008a20 	.word	0x08008a20

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandsToBlink */
  CommandsToBlinkHandle = osMessageQueueNew (16, sizeof(uint16_t), &CommandsToBlink_attributes);
 80005ec:	4a18      	ldr	r2, [pc, #96]	; (8000650 <MX_FREERTOS_Init+0x68>)
 80005ee:	2102      	movs	r1, #2
 80005f0:	2010      	movs	r0, #16
 80005f2:	f005 f9f2 	bl	80059da <osMessageQueueNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a16      	ldr	r2, [pc, #88]	; (8000654 <MX_FREERTOS_Init+0x6c>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of times_blinked */
  times_blinkedHandle = osMessageQueueNew (16, sizeof(uint16_t), &times_blinked_attributes);
 80005fc:	4a16      	ldr	r2, [pc, #88]	; (8000658 <MX_FREERTOS_Init+0x70>)
 80005fe:	2102      	movs	r1, #2
 8000600:	2010      	movs	r0, #16
 8000602:	f005 f9ea 	bl	80059da <osMessageQueueNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a14      	ldr	r2, [pc, #80]	; (800065c <MX_FREERTOS_Init+0x74>)
 800060a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CommandLine */
  CommandLineHandle = osThreadNew(StartCommandLine, NULL, &CommandLine_attributes);
 800060c:	4a14      	ldr	r2, [pc, #80]	; (8000660 <MX_FREERTOS_Init+0x78>)
 800060e:	2100      	movs	r1, #0
 8000610:	4814      	ldr	r0, [pc, #80]	; (8000664 <MX_FREERTOS_Init+0x7c>)
 8000612:	f005 f935 	bl	8005880 <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a13      	ldr	r2, [pc, #76]	; (8000668 <MX_FREERTOS_Init+0x80>)
 800061a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker1 */
  Blinker1Handle = osThreadNew(StartBlinker1, NULL, &Blinker1_attributes);
 800061c:	4a13      	ldr	r2, [pc, #76]	; (800066c <MX_FREERTOS_Init+0x84>)
 800061e:	2100      	movs	r1, #0
 8000620:	4813      	ldr	r0, [pc, #76]	; (8000670 <MX_FREERTOS_Init+0x88>)
 8000622:	f005 f92d 	bl	8005880 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_FREERTOS_Init+0x8c>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker2 */
  Blinker2Handle = osThreadNew(StartBlinker2, NULL, &Blinker2_attributes);
 800062c:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_FREERTOS_Init+0x90>)
 800062e:	2100      	movs	r1, #0
 8000630:	4812      	ldr	r0, [pc, #72]	; (800067c <MX_FREERTOS_Init+0x94>)
 8000632:	f005 f925 	bl	8005880 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a11      	ldr	r2, [pc, #68]	; (8000680 <MX_FREERTOS_Init+0x98>)
 800063a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker3 */
  Blinker3Handle = osThreadNew(StartBlinker3, NULL, &Blinker3_attributes);
 800063c:	4a11      	ldr	r2, [pc, #68]	; (8000684 <MX_FREERTOS_Init+0x9c>)
 800063e:	2100      	movs	r1, #0
 8000640:	4811      	ldr	r0, [pc, #68]	; (8000688 <MX_FREERTOS_Init+0xa0>)
 8000642:	f005 f91d 	bl	8005880 <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a10      	ldr	r2, [pc, #64]	; (800068c <MX_FREERTOS_Init+0xa4>)
 800064a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	08008b38 	.word	0x08008b38
 8000654:	24004aec 	.word	0x24004aec
 8000658:	08008b50 	.word	0x08008b50
 800065c:	24004af0 	.word	0x24004af0
 8000660:	08008aa8 	.word	0x08008aa8
 8000664:	08000691 	.word	0x08000691
 8000668:	24004ad4 	.word	0x24004ad4
 800066c:	08008acc 	.word	0x08008acc
 8000670:	08000751 	.word	0x08000751
 8000674:	24004ad0 	.word	0x24004ad0
 8000678:	08008af0 	.word	0x08008af0
 800067c:	08000789 	.word	0x08000789
 8000680:	24004ae4 	.word	0x24004ae4
 8000684:	08008b14 	.word	0x08008b14
 8000688:	08000799 	.word	0x08000799
 800068c:	24004ae8 	.word	0x24004ae8

08000690 <StartCommandLine>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommandLine */
void StartCommandLine(void *argument)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandLine */
	uint8_t local_pointer = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	75fb      	strb	r3, [r7, #23]
	char* delay_ptr = NULL;
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]
	uint16_t delay_len = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	81bb      	strh	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		HAL_StatusTypeDef ret = HAL_UART_Receive(&huart3,(uint8_t*)rx_buffer ,1, 100);
 80006a4:	2364      	movs	r3, #100	; 0x64
 80006a6:	2201      	movs	r2, #1
 80006a8:	4924      	ldr	r1, [pc, #144]	; (800073c <StartCommandLine+0xac>)
 80006aa:	4825      	ldr	r0, [pc, #148]	; (8000740 <StartCommandLine+0xb0>)
 80006ac:	f003 fe70 	bl	8004390 <HAL_UART_Receive>
 80006b0:	4603      	mov	r3, r0
 80006b2:	73fb      	strb	r3, [r7, #15]
		if(ret == HAL_OK){
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d13c      	bne.n	8000734 <StartCommandLine+0xa4>
			HAL_UART_Transmit(&huart3, (uint8_t*)rx_buffer, 1, 100);
 80006ba:	2364      	movs	r3, #100	; 0x64
 80006bc:	2201      	movs	r2, #1
 80006be:	491f      	ldr	r1, [pc, #124]	; (800073c <StartCommandLine+0xac>)
 80006c0:	481f      	ldr	r0, [pc, #124]	; (8000740 <StartCommandLine+0xb0>)
 80006c2:	f003 fdcf 	bl	8004264 <HAL_UART_Transmit>
			local_buffer[local_pointer] = rx_buffer[0];
 80006c6:	7dfb      	ldrb	r3, [r7, #23]
 80006c8:	4a1c      	ldr	r2, [pc, #112]	; (800073c <StartCommandLine+0xac>)
 80006ca:	7811      	ldrb	r1, [r2, #0]
 80006cc:	4a1d      	ldr	r2, [pc, #116]	; (8000744 <StartCommandLine+0xb4>)
 80006ce:	54d1      	strb	r1, [r2, r3]
			if(local_buffer[local_pointer] == '\n' || local_buffer[local_pointer] == '\r'){
 80006d0:	7dfb      	ldrb	r3, [r7, #23]
 80006d2:	4a1c      	ldr	r2, [pc, #112]	; (8000744 <StartCommandLine+0xb4>)
 80006d4:	5cd3      	ldrb	r3, [r2, r3]
 80006d6:	2b0a      	cmp	r3, #10
 80006d8:	d004      	beq.n	80006e4 <StartCommandLine+0x54>
 80006da:	7dfb      	ldrb	r3, [r7, #23]
 80006dc:	4a19      	ldr	r2, [pc, #100]	; (8000744 <StartCommandLine+0xb4>)
 80006de:	5cd3      	ldrb	r3, [r2, r3]
 80006e0:	2b0d      	cmp	r3, #13
 80006e2:	d11f      	bne.n	8000724 <StartCommandLine+0x94>
				delay_ptr = strstr(local_buffer, DELAY_TRIGGER_WORD);
 80006e4:	4918      	ldr	r1, [pc, #96]	; (8000748 <StartCommandLine+0xb8>)
 80006e6:	4817      	ldr	r0, [pc, #92]	; (8000744 <StartCommandLine+0xb4>)
 80006e8:	f008 f898 	bl	800881c <strstr>
 80006ec:	6138      	str	r0, [r7, #16]
				if (delay_ptr != NULL) {
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d01f      	beq.n	8000734 <StartCommandLine+0xa4>
					delay_len = atoi(delay_ptr + 5);
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	3305      	adds	r3, #5
 80006f8:	4618      	mov	r0, r3
 80006fa:	f007 ffdf 	bl	80086bc <atoi>
 80006fe:	4603      	mov	r3, r0
 8000700:	b29b      	uxth	r3, r3
 8000702:	81bb      	strh	r3, [r7, #12]
					osMessageQueuePut(CommandsToBlinkHandle, &delay_len, 0, 0);
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <StartCommandLine+0xbc>)
 8000706:	6818      	ldr	r0, [r3, #0]
 8000708:	f107 010c 	add.w	r1, r7, #12
 800070c:	2300      	movs	r3, #0
 800070e:	2200      	movs	r2, #0
 8000710:	f005 f9d6 	bl	8005ac0 <osMessageQueuePut>
					memset(local_buffer,0,RX_BUFFER_LENGTH);
 8000714:	2264      	movs	r2, #100	; 0x64
 8000716:	2100      	movs	r1, #0
 8000718:	480a      	ldr	r0, [pc, #40]	; (8000744 <StartCommandLine+0xb4>)
 800071a:	f008 f80d 	bl	8008738 <memset>
					local_pointer = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	75fb      	strb	r3, [r7, #23]
				if (delay_ptr != NULL) {
 8000722:	e007      	b.n	8000734 <StartCommandLine+0xa4>
				}
			}else{
				local_pointer++;
 8000724:	7dfb      	ldrb	r3, [r7, #23]
 8000726:	3301      	adds	r3, #1
 8000728:	75fb      	strb	r3, [r7, #23]
				if(local_pointer > RX_BUFFER_LENGTH){
 800072a:	7dfb      	ldrb	r3, [r7, #23]
 800072c:	2b64      	cmp	r3, #100	; 0x64
 800072e:	d901      	bls.n	8000734 <StartCommandLine+0xa4>
					local_pointer = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	75fb      	strb	r3, [r7, #23]
				}
			}
		}
		osDelay(10);
 8000734:	200a      	movs	r0, #10
 8000736:	f005 f935 	bl	80059a4 <osDelay>
	{
 800073a:	e7b3      	b.n	80006a4 <StartCommandLine+0x14>
 800073c:	24004ad8 	.word	0x24004ad8
 8000740:	24004b40 	.word	0x24004b40
 8000744:	24004a68 	.word	0x24004a68
 8000748:	08008a88 	.word	0x08008a88
 800074c:	24004aec 	.word	0x24004aec

08000750 <StartBlinker1>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker1 */
void StartBlinker1(void *argument)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker1 */
	uint16_t blink_rate = 1000;
 8000758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075c:	81fb      	strh	r3, [r7, #14]
	/* Infinite loop */
	for(;;)
	{
		osMessageQueueGet(CommandsToBlinkHandle,&blink_rate , NULL, 0);
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <StartBlinker1+0x30>)
 8000760:	6818      	ldr	r0, [r3, #0]
 8000762:	f107 010e 	add.w	r1, r7, #14
 8000766:	2300      	movs	r3, #0
 8000768:	2200      	movs	r2, #0
 800076a:	f005 fa09 	bl	8005b80 <osMessageQueueGet>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800076e:	2101      	movs	r1, #1
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <StartBlinker1+0x34>)
 8000772:	f000 fed8 	bl	8001526 <HAL_GPIO_TogglePin>
		osDelay(blink_rate);
 8000776:	89fb      	ldrh	r3, [r7, #14]
 8000778:	4618      	mov	r0, r3
 800077a:	f005 f913 	bl	80059a4 <osDelay>
		osMessageQueueGet(CommandsToBlinkHandle,&blink_rate , NULL, 0);
 800077e:	e7ee      	b.n	800075e <StartBlinker1+0xe>
 8000780:	24004aec 	.word	0x24004aec
 8000784:	58020400 	.word	0x58020400

08000788 <StartBlinker2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker2 */
void StartBlinker2(void *argument)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker2 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000790:	2001      	movs	r0, #1
 8000792:	f005 f907 	bl	80059a4 <osDelay>
 8000796:	e7fb      	b.n	8000790 <StartBlinker2+0x8>

08000798 <StartBlinker3>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker3 */
void StartBlinker3(void *argument)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker3 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f005 f8ff 	bl	80059a4 <osDelay>
 80007a6:	e7fb      	b.n	80007a0 <StartBlinker3+0x8>

080007a8 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08e      	sub	sp, #56	; 0x38
 80007ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b80      	ldr	r3, [pc, #512]	; (80009c0 <MX_GPIO_Init+0x218>)
 80007c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007c4:	4a7e      	ldr	r2, [pc, #504]	; (80009c0 <MX_GPIO_Init+0x218>)
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007ce:	4b7c      	ldr	r3, [pc, #496]	; (80009c0 <MX_GPIO_Init+0x218>)
 80007d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	623b      	str	r3, [r7, #32]
 80007da:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007dc:	4b78      	ldr	r3, [pc, #480]	; (80009c0 <MX_GPIO_Init+0x218>)
 80007de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e2:	4a77      	ldr	r2, [pc, #476]	; (80009c0 <MX_GPIO_Init+0x218>)
 80007e4:	f043 0320 	orr.w	r3, r3, #32
 80007e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007ec:	4b74      	ldr	r3, [pc, #464]	; (80009c0 <MX_GPIO_Init+0x218>)
 80007ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f2:	f003 0320 	and.w	r3, r3, #32
 80007f6:	61fb      	str	r3, [r7, #28]
 80007f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	4b71      	ldr	r3, [pc, #452]	; (80009c0 <MX_GPIO_Init+0x218>)
 80007fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000800:	4a6f      	ldr	r2, [pc, #444]	; (80009c0 <MX_GPIO_Init+0x218>)
 8000802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000806:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800080a:	4b6d      	ldr	r3, [pc, #436]	; (80009c0 <MX_GPIO_Init+0x218>)
 800080c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000814:	61bb      	str	r3, [r7, #24]
 8000816:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000818:	4b69      	ldr	r3, [pc, #420]	; (80009c0 <MX_GPIO_Init+0x218>)
 800081a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800081e:	4a68      	ldr	r2, [pc, #416]	; (80009c0 <MX_GPIO_Init+0x218>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000828:	4b65      	ldr	r3, [pc, #404]	; (80009c0 <MX_GPIO_Init+0x218>)
 800082a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	4b62      	ldr	r3, [pc, #392]	; (80009c0 <MX_GPIO_Init+0x218>)
 8000838:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800083c:	4a60      	ldr	r2, [pc, #384]	; (80009c0 <MX_GPIO_Init+0x218>)
 800083e:	f043 0308 	orr.w	r3, r3, #8
 8000842:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000846:	4b5e      	ldr	r3, [pc, #376]	; (80009c0 <MX_GPIO_Init+0x218>)
 8000848:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800084c:	f003 0308 	and.w	r3, r3, #8
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000854:	4b5a      	ldr	r3, [pc, #360]	; (80009c0 <MX_GPIO_Init+0x218>)
 8000856:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800085a:	4a59      	ldr	r2, [pc, #356]	; (80009c0 <MX_GPIO_Init+0x218>)
 800085c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000860:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000864:	4b56      	ldr	r3, [pc, #344]	; (80009c0 <MX_GPIO_Init+0x218>)
 8000866:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800086a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b53      	ldr	r3, [pc, #332]	; (80009c0 <MX_GPIO_Init+0x218>)
 8000874:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000878:	4a51      	ldr	r2, [pc, #324]	; (80009c0 <MX_GPIO_Init+0x218>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000882:	4b4f      	ldr	r3, [pc, #316]	; (80009c0 <MX_GPIO_Init+0x218>)
 8000884:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000890:	4b4b      	ldr	r3, [pc, #300]	; (80009c0 <MX_GPIO_Init+0x218>)
 8000892:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000896:	4a4a      	ldr	r2, [pc, #296]	; (80009c0 <MX_GPIO_Init+0x218>)
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008a0:	4b47      	ldr	r3, [pc, #284]	; (80009c0 <MX_GPIO_Init+0x218>)
 80008a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a6:	f003 0310 	and.w	r3, r3, #16
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b4:	4843      	ldr	r0, [pc, #268]	; (80009c4 <MX_GPIO_Init+0x21c>)
 80008b6:	f000 fe1d 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f244 0101 	movw	r1, #16385	; 0x4001
 80008c0:	4841      	ldr	r0, [pc, #260]	; (80009c8 <MX_GPIO_Init+0x220>)
 80008c2:	f000 fe17 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2102      	movs	r1, #2
 80008ca:	4840      	ldr	r0, [pc, #256]	; (80009cc <MX_GPIO_Init+0x224>)
 80008cc:	f000 fe12 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	4619      	mov	r1, r3
 80008e4:	483a      	ldr	r0, [pc, #232]	; (80009d0 <MX_GPIO_Init+0x228>)
 80008e6:	f000 fc55 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80008ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000900:	4619      	mov	r1, r3
 8000902:	4830      	ldr	r0, [pc, #192]	; (80009c4 <MX_GPIO_Init+0x21c>)
 8000904:	f000 fc46 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000908:	f244 0301 	movw	r3, #16385	; 0x4001
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091e:	4619      	mov	r1, r3
 8000920:	4829      	ldr	r0, [pc, #164]	; (80009c8 <MX_GPIO_Init+0x220>)
 8000922:	f000 fc37 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000926:	2380      	movs	r3, #128	; 0x80
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800092a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000938:	4619      	mov	r1, r3
 800093a:	4826      	ldr	r0, [pc, #152]	; (80009d4 <MX_GPIO_Init+0x22c>)
 800093c:	f000 fc2a 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000952:	4619      	mov	r1, r3
 8000954:	4820      	ldr	r0, [pc, #128]	; (80009d8 <MX_GPIO_Init+0x230>)
 8000956:	f000 fc1d 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800095a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800096c:	230a      	movs	r3, #10
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	4818      	ldr	r0, [pc, #96]	; (80009d8 <MX_GPIO_Init+0x230>)
 8000978:	f000 fc0c 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800097c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	4619      	mov	r1, r3
 8000994:	4810      	ldr	r0, [pc, #64]	; (80009d8 <MX_GPIO_Init+0x230>)
 8000996:	f000 fbfd 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800099a:	2302      	movs	r3, #2
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4619      	mov	r1, r3
 80009b0:	4806      	ldr	r0, [pc, #24]	; (80009cc <MX_GPIO_Init+0x224>)
 80009b2:	f000 fbef 	bl	8001194 <HAL_GPIO_Init>

}
 80009b6:	bf00      	nop
 80009b8:	3738      	adds	r7, #56	; 0x38
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	58024400 	.word	0x58024400
 80009c4:	58021400 	.word	0x58021400
 80009c8:	58020400 	.word	0x58020400
 80009cc:	58021000 	.word	0x58021000
 80009d0:	58020800 	.word	0x58020800
 80009d4:	58021800 	.word	0x58021800
 80009d8:	58020000 	.word	0x58020000

080009dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e0:	f000 fa9c 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e4:	f000 f80e 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e8:	f7ff fede 	bl	80007a8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009ec:	f000 f9b2 	bl	8000d54 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80009f0:	f000 fa62 	bl	8000eb8 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80009f4:	f004 fefa 	bl	80057ec <osKernelInitialize>
  MX_FREERTOS_Init();
 80009f8:	f7ff fdf6 	bl	80005e8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80009fc:	f004 ff1a 	bl	8005834 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <main+0x24>
	...

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b09c      	sub	sp, #112	; 0x70
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	224c      	movs	r2, #76	; 0x4c
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f007 fe90 	bl	8008738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2220      	movs	r2, #32
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f007 fe8a 	bl	8008738 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a24:	2004      	movs	r0, #4
 8000a26:	f000 fd99 	bl	800155c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <SystemClock_Config+0xd8>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4a2a      	ldr	r2, [pc, #168]	; (8000adc <SystemClock_Config+0xd8>)
 8000a34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a38:	6193      	str	r3, [r2, #24]
 8000a3a:	4b28      	ldr	r3, [pc, #160]	; (8000adc <SystemClock_Config+0xd8>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a46:	bf00      	nop
 8000a48:	4b24      	ldr	r3, [pc, #144]	; (8000adc <SystemClock_Config+0xd8>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a54:	d1f8      	bne.n	8000a48 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a56:	2321      	movs	r3, #33	; 0x21
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a5a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a60:	2301      	movs	r3, #1
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a64:	2302      	movs	r3, #2
 8000a66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a70:	2318      	movs	r3, #24
 8000a72:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a80:	230c      	movs	r3, #12
 8000a82:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 fdbd 	bl	8001610 <HAL_RCC_OscConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a9c:	f000 f832 	bl	8000b04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa0:	233f      	movs	r3, #63	; 0x3f
 8000aa2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2102      	movs	r1, #2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 f9a7 	bl	8001e18 <HAL_RCC_ClockConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000ad0:	f000 f818 	bl	8000b04 <Error_Handler>
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	3770      	adds	r7, #112	; 0x70
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	58024800 	.word	0x58024800

08000ae0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d101      	bne.n	8000af6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000af2:	f000 fa4f 	bl	8000f94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40001400 	.word	0x40001400

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <Error_Handler+0x8>
	...

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_MspInit+0x38>)
 8000b18:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_MspInit+0x38>)
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_MspInit+0x38>)
 8000b28:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	210f      	movs	r1, #15
 8000b38:	f06f 0001 	mvn.w	r0, #1
 8000b3c:	f000 fb02 	bl	8001144 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	58024400 	.word	0x58024400

08000b4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b090      	sub	sp, #64	; 0x40
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b0f      	cmp	r3, #15
 8000b58:	d827      	bhi.n	8000baa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	6879      	ldr	r1, [r7, #4]
 8000b5e:	2037      	movs	r0, #55	; 0x37
 8000b60:	f000 faf0 	bl	8001144 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b64:	2037      	movs	r0, #55	; 0x37
 8000b66:	f000 fb07 	bl	8001178 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000b6a:	4a29      	ldr	r2, [pc, #164]	; (8000c10 <HAL_InitTick+0xc4>)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000b70:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <HAL_InitTick+0xc8>)
 8000b72:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b76:	4a27      	ldr	r2, [pc, #156]	; (8000c14 <HAL_InitTick+0xc8>)
 8000b78:	f043 0320 	orr.w	r3, r3, #32
 8000b7c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000b80:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <HAL_InitTick+0xc8>)
 8000b82:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b86:	f003 0320 	and.w	r3, r3, #32
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b8e:	f107 0210 	add.w	r2, r7, #16
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 fcc9 	bl	8002530 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d106      	bne.n	8000bb6 <HAL_InitTick+0x6a>
 8000ba8:	e001      	b.n	8000bae <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e02b      	b.n	8000c06 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bae:	f001 fc93 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 8000bb2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000bb4:	e004      	b.n	8000bc0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bb6:	f001 fc8f 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <HAL_InitTick+0xcc>)
 8000bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc8:	0c9b      	lsrs	r3, r3, #18
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <HAL_InitTick+0xd0>)
 8000bd0:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <HAL_InitTick+0xd4>)
 8000bd2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_InitTick+0xd0>)
 8000bd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bda:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000bdc:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <HAL_InitTick+0xd0>)
 8000bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_InitTick+0xd0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_InitTick+0xd0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000bee:	480b      	ldr	r0, [pc, #44]	; (8000c1c <HAL_InitTick+0xd0>)
 8000bf0:	f003 f80e 	bl	8003c10 <HAL_TIM_Base_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d104      	bne.n	8000c04 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000bfa:	4808      	ldr	r0, [pc, #32]	; (8000c1c <HAL_InitTick+0xd0>)
 8000bfc:	f003 f86a 	bl	8003cd4 <HAL_TIM_Base_Start_IT>
 8000c00:	4603      	mov	r3, r0
 8000c02:	e000      	b.n	8000c06 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3740      	adds	r7, #64	; 0x40
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	24000008 	.word	0x24000008
 8000c14:	58024400 	.word	0x58024400
 8000c18:	431bde83 	.word	0x431bde83
 8000c1c:	24004af4 	.word	0x24004af4
 8000c20:	40001400 	.word	0x40001400

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler+0x4>

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler+0x4>

08000c36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <TIM7_IRQHandler+0x10>)
 8000c56:	f003 f8b5 	bl	8003dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	24004af4 	.word	0x24004af4

08000c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c68:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <SystemInit+0xd0>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a31      	ldr	r2, [pc, #196]	; (8000d34 <SystemInit+0xd0>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c78:	4b2f      	ldr	r3, [pc, #188]	; (8000d38 <SystemInit+0xd4>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 030f 	and.w	r3, r3, #15
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d807      	bhi.n	8000c94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c84:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <SystemInit+0xd4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f023 030f 	bic.w	r3, r3, #15
 8000c8c:	4a2a      	ldr	r2, [pc, #168]	; (8000d38 <SystemInit+0xd4>)
 8000c8e:	f043 0303 	orr.w	r3, r3, #3
 8000c92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c94:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <SystemInit+0xd8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a28      	ldr	r2, [pc, #160]	; (8000d3c <SystemInit+0xd8>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <SystemInit+0xd8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ca6:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <SystemInit+0xd8>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4924      	ldr	r1, [pc, #144]	; (8000d3c <SystemInit+0xd8>)
 8000cac:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <SystemInit+0xdc>)
 8000cae:	4013      	ands	r3, r2
 8000cb0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <SystemInit+0xd4>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d007      	beq.n	8000cce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <SystemInit+0xd4>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f023 030f 	bic.w	r3, r3, #15
 8000cc6:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <SystemInit+0xd4>)
 8000cc8:	f043 0303 	orr.w	r3, r3, #3
 8000ccc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000cce:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <SystemInit+0xd8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <SystemInit+0xd8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <SystemInit+0xd8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <SystemInit+0xd8>)
 8000ce2:	4a18      	ldr	r2, [pc, #96]	; (8000d44 <SystemInit+0xe0>)
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <SystemInit+0xd8>)
 8000ce8:	4a17      	ldr	r2, [pc, #92]	; (8000d48 <SystemInit+0xe4>)
 8000cea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <SystemInit+0xd8>)
 8000cee:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <SystemInit+0xe8>)
 8000cf0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <SystemInit+0xd8>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <SystemInit+0xd8>)
 8000cfa:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <SystemInit+0xe8>)
 8000cfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <SystemInit+0xd8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <SystemInit+0xd8>)
 8000d06:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <SystemInit+0xe8>)
 8000d08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <SystemInit+0xd8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <SystemInit+0xd8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a09      	ldr	r2, [pc, #36]	; (8000d3c <SystemInit+0xd8>)
 8000d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <SystemInit+0xd8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <SystemInit+0xec>)
 8000d24:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d28:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00
 8000d38:	52002000 	.word	0x52002000
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d44:	02020200 	.word	0x02020200
 8000d48:	01ff0000 	.word	0x01ff0000
 8000d4c:	01010280 	.word	0x01010280
 8000d50:	52004000 	.word	0x52004000

08000d54 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d5a:	4a23      	ldr	r2, [pc, #140]	; (8000de8 <MX_USART3_UART_Init+0x94>)
 8000d5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d5e:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d66:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d9c:	4811      	ldr	r0, [pc, #68]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d9e:	f003 fa11 	bl	80041c4 <HAL_UART_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000da8:	f7ff feac 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dac:	2100      	movs	r1, #0
 8000dae:	480d      	ldr	r0, [pc, #52]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000db0:	f004 fc0e 	bl	80055d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dba:	f7ff fea3 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4808      	ldr	r0, [pc, #32]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000dc2:	f004 fc43 	bl	800564c <HAL_UARTEx_SetRxFifoThreshold>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dcc:	f7ff fe9a 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000dd2:	f004 fbc4 	bl	800555e <HAL_UARTEx_DisableFifoMode>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ddc:	f7ff fe92 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	24004b40 	.word	0x24004b40
 8000de8:	40004800 	.word	0x40004800

08000dec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0b8      	sub	sp, #224	; 0xe0
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	22b8      	movs	r2, #184	; 0xb8
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f007 fc93 	bl	8008738 <memset>
  if(uartHandle->Instance==USART3)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a25      	ldr	r2, [pc, #148]	; (8000eac <HAL_UART_MspInit+0xc0>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d142      	bne.n	8000ea2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 fbc2 	bl	80025b4 <HAL_RCCEx_PeriphCLKConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e36:	f7ff fe65 	bl	8000b04 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <HAL_UART_MspInit+0xc4>)
 8000e3c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e40:	4a1b      	ldr	r2, [pc, #108]	; (8000eb0 <HAL_UART_MspInit+0xc4>)
 8000e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e46:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_UART_MspInit+0xc4>)
 8000e4c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_UART_MspInit+0xc4>)
 8000e5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e5e:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <HAL_UART_MspInit+0xc4>)
 8000e60:	f043 0308 	orr.w	r3, r3, #8
 8000e64:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_UART_MspInit+0xc4>)
 8000e6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e90:	2307      	movs	r3, #7
 8000e92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e96:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <HAL_UART_MspInit+0xc8>)
 8000e9e:	f000 f979 	bl	8001194 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	37e0      	adds	r7, #224	; 0xe0
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40004800 	.word	0x40004800
 8000eb0:	58024400 	.word	0x58024400
 8000eb4:	58020c00 	.word	0x58020c00

08000eb8 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ecc:	f7ff feca 	bl	8000c64 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed0:	480c      	ldr	r0, [pc, #48]	; (8000f04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ed2:	490d      	ldr	r1, [pc, #52]	; (8000f08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed8:	e002      	b.n	8000ee0 <LoopCopyDataInit>

08000eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ede:	3304      	adds	r3, #4

08000ee0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee4:	d3f9      	bcc.n	8000eda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ee8:	4c0a      	ldr	r4, [pc, #40]	; (8000f14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eec:	e001      	b.n	8000ef2 <LoopFillZerobss>

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef0:	3204      	adds	r2, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f007 fbeb 	bl	80086d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efa:	f7ff fd6f 	bl	80009dc <main>
  bx  lr
 8000efe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f00:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000f04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f08:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000f0c:	08008d14 	.word	0x08008d14
  ldr r2, =_sbss
 8000f10:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000f14:	24004c20 	.word	0x24004c20

08000f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f22:	2003      	movs	r0, #3
 8000f24:	f000 f903 	bl	800112e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000f28:	f001 f92c 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_Init+0x68>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	0a1b      	lsrs	r3, r3, #8
 8000f34:	f003 030f 	and.w	r3, r3, #15
 8000f38:	4913      	ldr	r1, [pc, #76]	; (8000f88 <HAL_Init+0x6c>)
 8000f3a:	5ccb      	ldrb	r3, [r1, r3]
 8000f3c:	f003 031f 	and.w	r3, r3, #31
 8000f40:	fa22 f303 	lsr.w	r3, r2, r3
 8000f44:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_Init+0x68>)
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_Init+0x6c>)
 8000f50:	5cd3      	ldrb	r3, [r2, r3]
 8000f52:	f003 031f 	and.w	r3, r3, #31
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5c:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <HAL_Init+0x70>)
 8000f5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f60:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <HAL_Init+0x74>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f66:	200f      	movs	r0, #15
 8000f68:	f7ff fdf0 	bl	8000b4c <HAL_InitTick>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e002      	b.n	8000f7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f76:	f7ff fdcb 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	58024400 	.word	0x58024400
 8000f88:	08008b68 	.word	0x08008b68
 8000f8c:	24000004 	.word	0x24000004
 8000f90:	24000000 	.word	0x24000000

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	2400000c 	.word	0x2400000c
 8000fb8:	24004bd0 	.word	0x24004bd0

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	24004bd0 	.word	0x24004bd0

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <__NVIC_SetPriorityGrouping+0x40>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00
 8001018:	05fa0000 	.word	0x05fa0000

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ff4c 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001152:	f7ff ff63 	bl	800101c <__NVIC_GetPriorityGrouping>
 8001156:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	68b9      	ldr	r1, [r7, #8]
 800115c:	6978      	ldr	r0, [r7, #20]
 800115e:	f7ff ffb3 	bl	80010c8 <NVIC_EncodePriority>
 8001162:	4602      	mov	r2, r0
 8001164:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001168:	4611      	mov	r1, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff82 	bl	8001074 <__NVIC_SetPriority>
}
 8001170:	bf00      	nop
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff56 	bl	8001038 <__NVIC_EnableIRQ>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011a2:	4b89      	ldr	r3, [pc, #548]	; (80013c8 <HAL_GPIO_Init+0x234>)
 80011a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011a6:	e194      	b.n	80014d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	2101      	movs	r1, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 8186 	beq.w	80014cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d005      	beq.n	80011d8 <HAL_GPIO_Init+0x44>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d130      	bne.n	800123a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800120e:	2201      	movs	r2, #1
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	091b      	lsrs	r3, r3, #4
 8001224:	f003 0201 	and.w	r2, r3, #1
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b03      	cmp	r3, #3
 8001244:	d017      	beq.n	8001276 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d123      	bne.n	80012ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	08da      	lsrs	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3208      	adds	r2, #8
 800128a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	220f      	movs	r2, #15
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	691a      	ldr	r2, [r3, #16]
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	08da      	lsrs	r2, r3, #3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3208      	adds	r2, #8
 80012c4:	69b9      	ldr	r1, [r7, #24]
 80012c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0203 	and.w	r2, r3, #3
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 80e0 	beq.w	80014cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130c:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <HAL_GPIO_Init+0x238>)
 800130e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001312:	4a2e      	ldr	r2, [pc, #184]	; (80013cc <HAL_GPIO_Init+0x238>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <HAL_GPIO_Init+0x238>)
 800131e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132a:	4a29      	ldr	r2, [pc, #164]	; (80013d0 <HAL_GPIO_Init+0x23c>)
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	3302      	adds	r3, #2
 8001332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	220f      	movs	r2, #15
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a20      	ldr	r2, [pc, #128]	; (80013d4 <HAL_GPIO_Init+0x240>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d052      	beq.n	80013fc <HAL_GPIO_Init+0x268>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a1f      	ldr	r2, [pc, #124]	; (80013d8 <HAL_GPIO_Init+0x244>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d031      	beq.n	80013c2 <HAL_GPIO_Init+0x22e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <HAL_GPIO_Init+0x248>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d02b      	beq.n	80013be <HAL_GPIO_Init+0x22a>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a1d      	ldr	r2, [pc, #116]	; (80013e0 <HAL_GPIO_Init+0x24c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d025      	beq.n	80013ba <HAL_GPIO_Init+0x226>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <HAL_GPIO_Init+0x250>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d01f      	beq.n	80013b6 <HAL_GPIO_Init+0x222>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a1b      	ldr	r2, [pc, #108]	; (80013e8 <HAL_GPIO_Init+0x254>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d019      	beq.n	80013b2 <HAL_GPIO_Init+0x21e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a1a      	ldr	r2, [pc, #104]	; (80013ec <HAL_GPIO_Init+0x258>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d013      	beq.n	80013ae <HAL_GPIO_Init+0x21a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a19      	ldr	r2, [pc, #100]	; (80013f0 <HAL_GPIO_Init+0x25c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d00d      	beq.n	80013aa <HAL_GPIO_Init+0x216>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <HAL_GPIO_Init+0x260>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d007      	beq.n	80013a6 <HAL_GPIO_Init+0x212>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <HAL_GPIO_Init+0x264>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d101      	bne.n	80013a2 <HAL_GPIO_Init+0x20e>
 800139e:	2309      	movs	r3, #9
 80013a0:	e02d      	b.n	80013fe <HAL_GPIO_Init+0x26a>
 80013a2:	230a      	movs	r3, #10
 80013a4:	e02b      	b.n	80013fe <HAL_GPIO_Init+0x26a>
 80013a6:	2308      	movs	r3, #8
 80013a8:	e029      	b.n	80013fe <HAL_GPIO_Init+0x26a>
 80013aa:	2307      	movs	r3, #7
 80013ac:	e027      	b.n	80013fe <HAL_GPIO_Init+0x26a>
 80013ae:	2306      	movs	r3, #6
 80013b0:	e025      	b.n	80013fe <HAL_GPIO_Init+0x26a>
 80013b2:	2305      	movs	r3, #5
 80013b4:	e023      	b.n	80013fe <HAL_GPIO_Init+0x26a>
 80013b6:	2304      	movs	r3, #4
 80013b8:	e021      	b.n	80013fe <HAL_GPIO_Init+0x26a>
 80013ba:	2303      	movs	r3, #3
 80013bc:	e01f      	b.n	80013fe <HAL_GPIO_Init+0x26a>
 80013be:	2302      	movs	r3, #2
 80013c0:	e01d      	b.n	80013fe <HAL_GPIO_Init+0x26a>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e01b      	b.n	80013fe <HAL_GPIO_Init+0x26a>
 80013c6:	bf00      	nop
 80013c8:	58000080 	.word	0x58000080
 80013cc:	58024400 	.word	0x58024400
 80013d0:	58000400 	.word	0x58000400
 80013d4:	58020000 	.word	0x58020000
 80013d8:	58020400 	.word	0x58020400
 80013dc:	58020800 	.word	0x58020800
 80013e0:	58020c00 	.word	0x58020c00
 80013e4:	58021000 	.word	0x58021000
 80013e8:	58021400 	.word	0x58021400
 80013ec:	58021800 	.word	0x58021800
 80013f0:	58021c00 	.word	0x58021c00
 80013f4:	58022000 	.word	0x58022000
 80013f8:	58022400 	.word	0x58022400
 80013fc:	2300      	movs	r3, #0
 80013fe:	69fa      	ldr	r2, [r7, #28]
 8001400:	f002 0203 	and.w	r2, r2, #3
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	4093      	lsls	r3, r2
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800140e:	4938      	ldr	r1, [pc, #224]	; (80014f0 <HAL_GPIO_Init+0x35c>)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800141c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001442:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800144a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001470:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	3301      	adds	r3, #1
 80014d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa22 f303 	lsr.w	r3, r2, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f47f ae63 	bne.w	80011a8 <HAL_GPIO_Init+0x14>
  }
}
 80014e2:	bf00      	nop
 80014e4:	bf00      	nop
 80014e6:	3724      	adds	r7, #36	; 0x24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	58000400 	.word	0x58000400

080014f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
 8001500:	4613      	mov	r3, r2
 8001502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001504:	787b      	ldrb	r3, [r7, #1]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150a:	887a      	ldrh	r2, [r7, #2]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001510:	e003      	b.n	800151a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001512:	887b      	ldrh	r3, [r7, #2]
 8001514:	041a      	lsls	r2, r3, #16
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001526:	b480      	push	{r7}
 8001528:	b085      	sub	sp, #20
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	460b      	mov	r3, r1
 8001530:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001538:	887a      	ldrh	r2, [r7, #2]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4013      	ands	r3, r2
 800153e:	041a      	lsls	r2, r3, #16
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43d9      	mvns	r1, r3
 8001544:	887b      	ldrh	r3, [r7, #2]
 8001546:	400b      	ands	r3, r1
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	619a      	str	r2, [r3, #24]
}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001564:	4b29      	ldr	r3, [pc, #164]	; (800160c <HAL_PWREx_ConfigSupply+0xb0>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	2b06      	cmp	r3, #6
 800156e:	d00a      	beq.n	8001586 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001570:	4b26      	ldr	r3, [pc, #152]	; (800160c <HAL_PWREx_ConfigSupply+0xb0>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	429a      	cmp	r2, r3
 800157c:	d001      	beq.n	8001582 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e040      	b.n	8001604 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	e03e      	b.n	8001604 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <HAL_PWREx_ConfigSupply+0xb0>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800158e:	491f      	ldr	r1, [pc, #124]	; (800160c <HAL_PWREx_ConfigSupply+0xb0>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4313      	orrs	r3, r2
 8001594:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001596:	f7ff fd11 	bl	8000fbc <HAL_GetTick>
 800159a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800159c:	e009      	b.n	80015b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800159e:	f7ff fd0d 	bl	8000fbc <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015ac:	d901      	bls.n	80015b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e028      	b.n	8001604 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <HAL_PWREx_ConfigSupply+0xb0>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015be:	d1ee      	bne.n	800159e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b1e      	cmp	r3, #30
 80015c4:	d008      	beq.n	80015d8 <HAL_PWREx_ConfigSupply+0x7c>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b2e      	cmp	r3, #46	; 0x2e
 80015ca:	d005      	beq.n	80015d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b1d      	cmp	r3, #29
 80015d0:	d002      	beq.n	80015d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b2d      	cmp	r3, #45	; 0x2d
 80015d6:	d114      	bne.n	8001602 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80015d8:	f7ff fcf0 	bl	8000fbc <HAL_GetTick>
 80015dc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80015de:	e009      	b.n	80015f4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015e0:	f7ff fcec 	bl	8000fbc <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015ee:	d901      	bls.n	80015f4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e007      	b.n	8001604 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_PWREx_ConfigSupply+0xb0>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001600:	d1ee      	bne.n	80015e0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	58024800 	.word	0x58024800

08001610 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	; 0x30
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e3f3      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 80b3 	beq.w	8001796 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001630:	4b9e      	ldr	r3, [pc, #632]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800163a:	4b9c      	ldr	r3, [pc, #624]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	2b10      	cmp	r3, #16
 8001644:	d007      	beq.n	8001656 <HAL_RCC_OscConfig+0x46>
 8001646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001648:	2b18      	cmp	r3, #24
 800164a:	d112      	bne.n	8001672 <HAL_RCC_OscConfig+0x62>
 800164c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d10d      	bne.n	8001672 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001656:	4b95      	ldr	r3, [pc, #596]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8098 	beq.w	8001794 <HAL_RCC_OscConfig+0x184>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f040 8093 	bne.w	8001794 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e3cb      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800167a:	d106      	bne.n	800168a <HAL_RCC_OscConfig+0x7a>
 800167c:	4b8b      	ldr	r3, [pc, #556]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a8a      	ldr	r2, [pc, #552]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 8001682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	e058      	b.n	800173c <HAL_RCC_OscConfig+0x12c>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d112      	bne.n	80016b8 <HAL_RCC_OscConfig+0xa8>
 8001692:	4b86      	ldr	r3, [pc, #536]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a85      	ldr	r2, [pc, #532]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 8001698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b83      	ldr	r3, [pc, #524]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a82      	ldr	r2, [pc, #520]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 80016a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	4b80      	ldr	r3, [pc, #512]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a7f      	ldr	r2, [pc, #508]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 80016b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e041      	b.n	800173c <HAL_RCC_OscConfig+0x12c>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c0:	d112      	bne.n	80016e8 <HAL_RCC_OscConfig+0xd8>
 80016c2:	4b7a      	ldr	r3, [pc, #488]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a79      	ldr	r2, [pc, #484]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 80016c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	4b77      	ldr	r3, [pc, #476]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a76      	ldr	r2, [pc, #472]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 80016d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	4b74      	ldr	r3, [pc, #464]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a73      	ldr	r2, [pc, #460]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e029      	b.n	800173c <HAL_RCC_OscConfig+0x12c>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80016f0:	d112      	bne.n	8001718 <HAL_RCC_OscConfig+0x108>
 80016f2:	4b6e      	ldr	r3, [pc, #440]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a6d      	ldr	r2, [pc, #436]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 80016f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b6b      	ldr	r3, [pc, #428]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a6a      	ldr	r2, [pc, #424]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 8001704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b68      	ldr	r3, [pc, #416]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a67      	ldr	r2, [pc, #412]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e011      	b.n	800173c <HAL_RCC_OscConfig+0x12c>
 8001718:	4b64      	ldr	r3, [pc, #400]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a63      	ldr	r2, [pc, #396]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 800171e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b61      	ldr	r3, [pc, #388]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a60      	ldr	r2, [pc, #384]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 800172a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b5e      	ldr	r3, [pc, #376]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a5d      	ldr	r2, [pc, #372]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 8001736:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800173a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d013      	beq.n	800176c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fc3a 	bl	8000fbc <HAL_GetTick>
 8001748:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fc36 	bl	8000fbc <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	; 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e355      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800175e:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x13c>
 800176a:	e014      	b.n	8001796 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff fc26 	bl	8000fbc <HAL_GetTick>
 8001770:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fc22 	bl	8000fbc <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e341      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001786:	4b49      	ldr	r3, [pc, #292]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x164>
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 808c 	beq.w	80018bc <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017a4:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017ae:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 80017b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d007      	beq.n	80017ca <HAL_RCC_OscConfig+0x1ba>
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	2b18      	cmp	r3, #24
 80017be:	d137      	bne.n	8001830 <HAL_RCC_OscConfig+0x220>
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d132      	bne.n	8001830 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ca:	4b38      	ldr	r3, [pc, #224]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d005      	beq.n	80017e2 <HAL_RCC_OscConfig+0x1d2>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e313      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017e2:	4b32      	ldr	r3, [pc, #200]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 0219 	bic.w	r2, r3, #25
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	492f      	ldr	r1, [pc, #188]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017f4:	f7ff fbe2 	bl	8000fbc <HAL_GetTick>
 80017f8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fc:	f7ff fbde 	bl	8000fbc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e2fd      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800180e:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181a:	4b24      	ldr	r3, [pc, #144]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	061b      	lsls	r3, r3, #24
 8001828:	4920      	ldr	r1, [pc, #128]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 800182a:	4313      	orrs	r3, r2
 800182c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800182e:	e045      	b.n	80018bc <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d026      	beq.n	8001886 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001838:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f023 0219 	bic.w	r2, r3, #25
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4919      	ldr	r1, [pc, #100]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 8001846:	4313      	orrs	r3, r2
 8001848:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184a:	f7ff fbb7 	bl	8000fbc <HAL_GetTick>
 800184e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001852:	f7ff fbb3 	bl	8000fbc <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e2d2      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001870:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	061b      	lsls	r3, r3, #24
 800187e:	490b      	ldr	r1, [pc, #44]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
 8001884:	e01a      	b.n	80018bc <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a08      	ldr	r2, [pc, #32]	; (80018ac <HAL_RCC_OscConfig+0x29c>)
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7ff fb93 	bl	8000fbc <HAL_GetTick>
 8001896:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189a:	f7ff fb8f 	bl	8000fbc <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d903      	bls.n	80018b0 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e2ae      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
 80018ac:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018b0:	4b99      	ldr	r3, [pc, #612]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1ee      	bne.n	800189a <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0310 	and.w	r3, r3, #16
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d06a      	beq.n	800199e <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c8:	4b93      	ldr	r3, [pc, #588]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018d0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018d2:	4b91      	ldr	r3, [pc, #580]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 80018d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d007      	beq.n	80018ee <HAL_RCC_OscConfig+0x2de>
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b18      	cmp	r3, #24
 80018e2:	d11b      	bne.n	800191c <HAL_RCC_OscConfig+0x30c>
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d116      	bne.n	800191c <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018ee:	4b8a      	ldr	r3, [pc, #552]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <HAL_RCC_OscConfig+0x2f6>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	2b80      	cmp	r3, #128	; 0x80
 8001900:	d001      	beq.n	8001906 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e281      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001906:	4b84      	ldr	r3, [pc, #528]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	061b      	lsls	r3, r3, #24
 8001914:	4980      	ldr	r1, [pc, #512]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001916:	4313      	orrs	r3, r2
 8001918:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800191a:	e040      	b.n	800199e <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d023      	beq.n	800196c <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001924:	4b7c      	ldr	r3, [pc, #496]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a7b      	ldr	r2, [pc, #492]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 800192a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800192e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001930:	f7ff fb44 	bl	8000fbc <HAL_GetTick>
 8001934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001938:	f7ff fb40 	bl	8000fbc <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e25f      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800194a:	4b73      	ldr	r3, [pc, #460]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001956:	4b70      	ldr	r3, [pc, #448]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	061b      	lsls	r3, r3, #24
 8001964:	496c      	ldr	r1, [pc, #432]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001966:	4313      	orrs	r3, r2
 8001968:	60cb      	str	r3, [r1, #12]
 800196a:	e018      	b.n	800199e <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800196c:	4b6a      	ldr	r3, [pc, #424]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a69      	ldr	r2, [pc, #420]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7ff fb20 	bl	8000fbc <HAL_GetTick>
 800197c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001980:	f7ff fb1c 	bl	8000fbc <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e23b      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001992:	4b61      	ldr	r3, [pc, #388]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d036      	beq.n	8001a18 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d019      	beq.n	80019e6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b2:	4b59      	ldr	r3, [pc, #356]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 80019b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b6:	4a58      	ldr	r2, [pc, #352]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019be:	f7ff fafd 	bl	8000fbc <HAL_GetTick>
 80019c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c6:	f7ff faf9 	bl	8000fbc <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e218      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019d8:	4b4f      	ldr	r3, [pc, #316]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 80019da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x3b6>
 80019e4:	e018      	b.n	8001a18 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e6:	4b4c      	ldr	r3, [pc, #304]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 80019e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ea:	4a4b      	ldr	r2, [pc, #300]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f2:	f7ff fae3 	bl	8000fbc <HAL_GetTick>
 80019f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019fa:	f7ff fadf 	bl	8000fbc <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e1fe      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a0c:	4b42      	ldr	r3, [pc, #264]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d036      	beq.n	8001a92 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d019      	beq.n	8001a60 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a2c:	4b3a      	ldr	r3, [pc, #232]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a39      	ldr	r2, [pc, #228]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001a32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a38:	f7ff fac0 	bl	8000fbc <HAL_GetTick>
 8001a3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a40:	f7ff fabc 	bl	8000fbc <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e1db      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a52:	4b31      	ldr	r3, [pc, #196]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x430>
 8001a5e:	e018      	b.n	8001a92 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a60:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a2c      	ldr	r2, [pc, #176]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001a66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a6a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a6c:	f7ff faa6 	bl	8000fbc <HAL_GetTick>
 8001a70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a74:	f7ff faa2 	bl	8000fbc <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e1c1      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a86:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 80af 	beq.w	8001bfe <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <HAL_RCC_OscConfig+0x50c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <HAL_RCC_OscConfig+0x50c>)
 8001aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aaa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001aac:	f7ff fa86 	bl	8000fbc <HAL_GetTick>
 8001ab0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ab4:	f7ff fa82 	bl	8000fbc <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e1a1      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_RCC_OscConfig+0x50c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d106      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4d8>
 8001ada:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ade:	4a0e      	ldr	r2, [pc, #56]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae6:	e05b      	b.n	8001ba0 <HAL_RCC_OscConfig+0x590>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d117      	bne.n	8001b20 <HAL_RCC_OscConfig+0x510>
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af4:	4a08      	ldr	r2, [pc, #32]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001af6:	f023 0301 	bic.w	r3, r3, #1
 8001afa:	6713      	str	r3, [r2, #112]	; 0x70
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b00:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b06:	6713      	str	r3, [r2, #112]	; 0x70
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0c:	4a02      	ldr	r2, [pc, #8]	; (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001b0e:	f023 0304 	bic.w	r3, r3, #4
 8001b12:	6713      	str	r3, [r2, #112]	; 0x70
 8001b14:	e044      	b.n	8001ba0 <HAL_RCC_OscConfig+0x590>
 8001b16:	bf00      	nop
 8001b18:	58024400 	.word	0x58024400
 8001b1c:	58024800 	.word	0x58024800
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b05      	cmp	r3, #5
 8001b26:	d112      	bne.n	8001b4e <HAL_RCC_OscConfig+0x53e>
 8001b28:	4b95      	ldr	r3, [pc, #596]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2c:	4a94      	ldr	r2, [pc, #592]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b2e:	f043 0304 	orr.w	r3, r3, #4
 8001b32:	6713      	str	r3, [r2, #112]	; 0x70
 8001b34:	4b92      	ldr	r3, [pc, #584]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b38:	4a91      	ldr	r2, [pc, #580]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b40:	4b8f      	ldr	r3, [pc, #572]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b44:	4a8e      	ldr	r2, [pc, #568]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4c:	e028      	b.n	8001ba0 <HAL_RCC_OscConfig+0x590>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b85      	cmp	r3, #133	; 0x85
 8001b54:	d112      	bne.n	8001b7c <HAL_RCC_OscConfig+0x56c>
 8001b56:	4b8a      	ldr	r3, [pc, #552]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	4a89      	ldr	r2, [pc, #548]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b5c:	f043 0304 	orr.w	r3, r3, #4
 8001b60:	6713      	str	r3, [r2, #112]	; 0x70
 8001b62:	4b87      	ldr	r3, [pc, #540]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b66:	4a86      	ldr	r2, [pc, #536]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6e:	4b84      	ldr	r3, [pc, #528]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b72:	4a83      	ldr	r2, [pc, #524]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7a:	e011      	b.n	8001ba0 <HAL_RCC_OscConfig+0x590>
 8001b7c:	4b80      	ldr	r3, [pc, #512]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b80:	4a7f      	ldr	r2, [pc, #508]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b82:	f023 0301 	bic.w	r3, r3, #1
 8001b86:	6713      	str	r3, [r2, #112]	; 0x70
 8001b88:	4b7d      	ldr	r3, [pc, #500]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	4a7c      	ldr	r2, [pc, #496]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b8e:	f023 0304 	bic.w	r3, r3, #4
 8001b92:	6713      	str	r3, [r2, #112]	; 0x70
 8001b94:	4b7a      	ldr	r3, [pc, #488]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	4a79      	ldr	r2, [pc, #484]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d015      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba8:	f7ff fa08 	bl	8000fbc <HAL_GetTick>
 8001bac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fa04 	bl	8000fbc <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e121      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bc6:	4b6e      	ldr	r3, [pc, #440]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0ee      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x5a0>
 8001bd2:	e014      	b.n	8001bfe <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd4:	f7ff f9f2 	bl	8000fbc <HAL_GetTick>
 8001bd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bdc:	f7ff f9ee 	bl	8000fbc <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e10b      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bf2:	4b63      	ldr	r3, [pc, #396]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1ee      	bne.n	8001bdc <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8100 	beq.w	8001e08 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c08:	4b5d      	ldr	r3, [pc, #372]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c10:	2b18      	cmp	r3, #24
 8001c12:	f000 80bb 	beq.w	8001d8c <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	f040 8095 	bne.w	8001d4a <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c20:	4b57      	ldr	r3, [pc, #348]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a56      	ldr	r2, [pc, #344]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f9c6 	bl	8000fbc <HAL_GetTick>
 8001c30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c34:	f7ff f9c2 	bl	8000fbc <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e0e1      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c46:	4b4e      	ldr	r3, [pc, #312]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c52:	4b4b      	ldr	r3, [pc, #300]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c56:	4b4b      	ldr	r3, [pc, #300]	; (8001d84 <HAL_RCC_OscConfig+0x774>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c62:	0112      	lsls	r2, r2, #4
 8001c64:	430a      	orrs	r2, r1
 8001c66:	4946      	ldr	r1, [pc, #280]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	628b      	str	r3, [r1, #40]	; 0x28
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	3b01      	subs	r3, #1
 8001c72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	025b      	lsls	r3, r3, #9
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c86:	3b01      	subs	r3, #1
 8001c88:	041b      	lsls	r3, r3, #16
 8001c8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c94:	3b01      	subs	r3, #1
 8001c96:	061b      	lsls	r3, r3, #24
 8001c98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c9c:	4938      	ldr	r1, [pc, #224]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001ca2:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	4a36      	ldr	r2, [pc, #216]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cae:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb2:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <HAL_RCC_OscConfig+0x778>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cba:	00d2      	lsls	r2, r2, #3
 8001cbc:	4930      	ldr	r1, [pc, #192]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001cc2:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc6:	f023 020c 	bic.w	r2, r3, #12
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	492c      	ldr	r1, [pc, #176]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001cd4:	4b2a      	ldr	r3, [pc, #168]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	f023 0202 	bic.w	r2, r3, #2
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce0:	4927      	ldr	r1, [pc, #156]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ce6:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	4a25      	ldr	r2, [pc, #148]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001cf2:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	4a22      	ldr	r2, [pc, #136]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	4a1f      	ldr	r2, [pc, #124]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	4a1c      	ldr	r2, [pc, #112]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a19      	ldr	r2, [pc, #100]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001d1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d22:	f7ff f94b 	bl	8000fbc <HAL_GetTick>
 8001d26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7ff f947 	bl	8000fbc <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e066      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d3c:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x71a>
 8001d48:	e05e      	b.n	8001e08 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001d50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d56:	f7ff f931 	bl	8000fbc <HAL_GetTick>
 8001d5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7ff f92d 	bl	8000fbc <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e04c      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f0      	bne.n	8001d5e <HAL_RCC_OscConfig+0x74e>
 8001d7c:	e044      	b.n	8001e08 <HAL_RCC_OscConfig+0x7f8>
 8001d7e:	bf00      	nop
 8001d80:	58024400 	.word	0x58024400
 8001d84:	fffffc0c 	.word	0xfffffc0c
 8001d88:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d8c:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <HAL_RCC_OscConfig+0x804>)
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d92:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <HAL_RCC_OscConfig+0x804>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d031      	beq.n	8001e04 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	f003 0203 	and.w	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d12a      	bne.n	8001e04 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d122      	bne.n	8001e04 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d11a      	bne.n	8001e04 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	0a5b      	lsrs	r3, r3, #9
 8001dd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dda:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d111      	bne.n	8001e04 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	0c1b      	lsrs	r3, r3, #16
 8001de4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d108      	bne.n	8001e04 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	0e1b      	lsrs	r3, r3, #24
 8001df6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3730      	adds	r7, #48	; 0x30
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	58024400 	.word	0x58024400

08001e18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e19c      	b.n	8002166 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b8a      	ldr	r3, [pc, #552]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d910      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b87      	ldr	r3, [pc, #540]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 020f 	bic.w	r2, r3, #15
 8001e42:	4985      	ldr	r1, [pc, #532]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	4b83      	ldr	r3, [pc, #524]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e184      	b.n	8002166 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d010      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	4b7b      	ldr	r3, [pc, #492]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d908      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e78:	4b78      	ldr	r3, [pc, #480]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	4975      	ldr	r1, [pc, #468]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d010      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695a      	ldr	r2, [r3, #20]
 8001e9a:	4b70      	ldr	r3, [pc, #448]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d908      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ea6:	4b6d      	ldr	r3, [pc, #436]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	496a      	ldr	r1, [pc, #424]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d010      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699a      	ldr	r2, [r3, #24]
 8001ec8:	4b64      	ldr	r3, [pc, #400]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d908      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ed4:	4b61      	ldr	r3, [pc, #388]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	495e      	ldr	r1, [pc, #376]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d010      	beq.n	8001f14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69da      	ldr	r2, [r3, #28]
 8001ef6:	4b59      	ldr	r3, [pc, #356]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d908      	bls.n	8001f14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001f02:	4b56      	ldr	r3, [pc, #344]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4953      	ldr	r1, [pc, #332]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d010      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	4b4d      	ldr	r3, [pc, #308]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d908      	bls.n	8001f42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f30:	4b4a      	ldr	r3, [pc, #296]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f023 020f 	bic.w	r2, r3, #15
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4947      	ldr	r1, [pc, #284]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d055      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f4e:	4b43      	ldr	r3, [pc, #268]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	4940      	ldr	r1, [pc, #256]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d107      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f68:	4b3c      	ldr	r3, [pc, #240]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d121      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0f6      	b.n	8002166 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d107      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f80:	4b36      	ldr	r3, [pc, #216]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d115      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0ea      	b.n	8002166 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f98:	4b30      	ldr	r3, [pc, #192]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d109      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0de      	b.n	8002166 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fa8:	4b2c      	ldr	r3, [pc, #176]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0d6      	b.n	8002166 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fb8:	4b28      	ldr	r3, [pc, #160]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	f023 0207 	bic.w	r2, r3, #7
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4925      	ldr	r1, [pc, #148]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fca:	f7fe fff7 	bl	8000fbc <HAL_GetTick>
 8001fce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd2:	f7fe fff3 	bl	8000fbc <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e0be      	b.n	8002166 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d1eb      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d010      	beq.n	8002028 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	429a      	cmp	r2, r3
 8002014:	d208      	bcs.n	8002028 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f023 020f 	bic.w	r2, r3, #15
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	490e      	ldr	r1, [pc, #56]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8002024:	4313      	orrs	r3, r2
 8002026:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d214      	bcs.n	8002060 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 020f 	bic.w	r2, r3, #15
 800203e:	4906      	ldr	r1, [pc, #24]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	4313      	orrs	r3, r2
 8002044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d005      	beq.n	8002060 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e086      	b.n	8002166 <HAL_RCC_ClockConfig+0x34e>
 8002058:	52002000 	.word	0x52002000
 800205c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d010      	beq.n	800208e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	4b3f      	ldr	r3, [pc, #252]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002078:	429a      	cmp	r2, r3
 800207a:	d208      	bcs.n	800208e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800207c:	4b3c      	ldr	r3, [pc, #240]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	4939      	ldr	r1, [pc, #228]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 800208a:	4313      	orrs	r3, r2
 800208c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d010      	beq.n	80020bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d208      	bcs.n	80020bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020aa:	4b31      	ldr	r3, [pc, #196]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	492e      	ldr	r1, [pc, #184]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d010      	beq.n	80020ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699a      	ldr	r2, [r3, #24]
 80020cc:	4b28      	ldr	r3, [pc, #160]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d208      	bcs.n	80020ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020d8:	4b25      	ldr	r3, [pc, #148]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	4922      	ldr	r1, [pc, #136]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d010      	beq.n	8002118 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69da      	ldr	r2, [r3, #28]
 80020fa:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002102:	429a      	cmp	r2, r3
 8002104:	d208      	bcs.n	8002118 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002106:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	4917      	ldr	r1, [pc, #92]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 8002114:	4313      	orrs	r3, r2
 8002116:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002118:	f000 f834 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 800211c:	4602      	mov	r2, r0
 800211e:	4b14      	ldr	r3, [pc, #80]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	4912      	ldr	r1, [pc, #72]	; (8002174 <HAL_RCC_ClockConfig+0x35c>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
 8002134:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	4a0d      	ldr	r2, [pc, #52]	; (8002174 <HAL_RCC_ClockConfig+0x35c>)
 8002140:	5cd3      	ldrb	r3, [r2, r3]
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
 800214c:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <HAL_RCC_ClockConfig+0x360>)
 800214e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002150:	4a0a      	ldr	r2, [pc, #40]	; (800217c <HAL_RCC_ClockConfig+0x364>)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_RCC_ClockConfig+0x368>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fcf6 	bl	8000b4c <HAL_InitTick>
 8002160:	4603      	mov	r3, r0
 8002162:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002164:	7bfb      	ldrb	r3, [r7, #15]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	58024400 	.word	0x58024400
 8002174:	08008b68 	.word	0x08008b68
 8002178:	24000004 	.word	0x24000004
 800217c:	24000000 	.word	0x24000000
 8002180:	24000008 	.word	0x24000008

08002184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800218a:	4bb3      	ldr	r3, [pc, #716]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002192:	2b18      	cmp	r3, #24
 8002194:	f200 8155 	bhi.w	8002442 <HAL_RCC_GetSysClockFreq+0x2be>
 8002198:	a201      	add	r2, pc, #4	; (adr r2, 80021a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800219a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219e:	bf00      	nop
 80021a0:	08002205 	.word	0x08002205
 80021a4:	08002443 	.word	0x08002443
 80021a8:	08002443 	.word	0x08002443
 80021ac:	08002443 	.word	0x08002443
 80021b0:	08002443 	.word	0x08002443
 80021b4:	08002443 	.word	0x08002443
 80021b8:	08002443 	.word	0x08002443
 80021bc:	08002443 	.word	0x08002443
 80021c0:	0800222b 	.word	0x0800222b
 80021c4:	08002443 	.word	0x08002443
 80021c8:	08002443 	.word	0x08002443
 80021cc:	08002443 	.word	0x08002443
 80021d0:	08002443 	.word	0x08002443
 80021d4:	08002443 	.word	0x08002443
 80021d8:	08002443 	.word	0x08002443
 80021dc:	08002443 	.word	0x08002443
 80021e0:	08002231 	.word	0x08002231
 80021e4:	08002443 	.word	0x08002443
 80021e8:	08002443 	.word	0x08002443
 80021ec:	08002443 	.word	0x08002443
 80021f0:	08002443 	.word	0x08002443
 80021f4:	08002443 	.word	0x08002443
 80021f8:	08002443 	.word	0x08002443
 80021fc:	08002443 	.word	0x08002443
 8002200:	08002237 	.word	0x08002237
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002204:	4b94      	ldr	r3, [pc, #592]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b00      	cmp	r3, #0
 800220e:	d009      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002210:	4b91      	ldr	r3, [pc, #580]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	08db      	lsrs	r3, r3, #3
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	4a90      	ldr	r2, [pc, #576]	; (800245c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
 8002220:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002222:	e111      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002224:	4b8d      	ldr	r3, [pc, #564]	; (800245c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002226:	61bb      	str	r3, [r7, #24]
    break;
 8002228:	e10e      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800222a:	4b8d      	ldr	r3, [pc, #564]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800222c:	61bb      	str	r3, [r7, #24]
    break;
 800222e:	e10b      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002230:	4b8c      	ldr	r3, [pc, #560]	; (8002464 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002232:	61bb      	str	r3, [r7, #24]
    break;
 8002234:	e108      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002236:	4b88      	ldr	r3, [pc, #544]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002240:	4b85      	ldr	r3, [pc, #532]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800224a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800224c:	4b82      	ldr	r3, [pc, #520]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002256:	4b80      	ldr	r3, [pc, #512]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225a:	08db      	lsrs	r3, r3, #3
 800225c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	ee07 3a90 	vmov	s15, r3
 800226a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800226e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80e1 	beq.w	800243c <HAL_RCC_GetSysClockFreq+0x2b8>
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b02      	cmp	r3, #2
 800227e:	f000 8083 	beq.w	8002388 <HAL_RCC_GetSysClockFreq+0x204>
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2b02      	cmp	r3, #2
 8002286:	f200 80a1 	bhi.w	80023cc <HAL_RCC_GetSysClockFreq+0x248>
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_RCC_GetSysClockFreq+0x114>
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d056      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002296:	e099      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002298:	4b6f      	ldr	r3, [pc, #444]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0320 	and.w	r3, r3, #32
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d02d      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022a4:	4b6c      	ldr	r3, [pc, #432]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	08db      	lsrs	r3, r3, #3
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	4a6b      	ldr	r2, [pc, #428]	; (800245c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
 80022b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	ee07 3a90 	vmov	s15, r3
 80022bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	ee07 3a90 	vmov	s15, r3
 80022c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ce:	4b62      	ldr	r3, [pc, #392]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d6:	ee07 3a90 	vmov	s15, r3
 80022da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022de:	ed97 6a02 	vldr	s12, [r7, #8]
 80022e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80022fe:	e087      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	ee07 3a90 	vmov	s15, r3
 8002306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800230a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800246c <HAL_RCC_GetSysClockFreq+0x2e8>
 800230e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002312:	4b51      	ldr	r3, [pc, #324]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800231a:	ee07 3a90 	vmov	s15, r3
 800231e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002322:	ed97 6a02 	vldr	s12, [r7, #8]
 8002326:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002468 <HAL_RCC_GetSysClockFreq+0x2e4>
 800232a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800232e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800233a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002342:	e065      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	ee07 3a90 	vmov	s15, r3
 800234a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800234e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002470 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002356:	4b40      	ldr	r3, [pc, #256]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800235e:	ee07 3a90 	vmov	s15, r3
 8002362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002366:	ed97 6a02 	vldr	s12, [r7, #8]
 800236a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002468 <HAL_RCC_GetSysClockFreq+0x2e4>
 800236e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800237a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800237e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002382:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002386:	e043      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	ee07 3a90 	vmov	s15, r3
 800238e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002392:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002474 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800239a:	4b2f      	ldr	r3, [pc, #188]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a2:	ee07 3a90 	vmov	s15, r3
 80023a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023ca:	e021      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	ee07 3a90 	vmov	s15, r3
 80023d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002470 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023de:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e6:	ee07 3a90 	vmov	s15, r3
 80023ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80023f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800240e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	0a5b      	lsrs	r3, r3, #9
 8002416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800241a:	3301      	adds	r3, #1
 800241c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002428:	edd7 6a07 	vldr	s13, [r7, #28]
 800242c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002434:	ee17 3a90 	vmov	r3, s15
 8002438:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800243a:	e005      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]
    break;
 8002440:	e002      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002444:	61bb      	str	r3, [r7, #24]
    break;
 8002446:	bf00      	nop
  }

  return sysclockfreq;
 8002448:	69bb      	ldr	r3, [r7, #24]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3724      	adds	r7, #36	; 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	58024400 	.word	0x58024400
 800245c:	03d09000 	.word	0x03d09000
 8002460:	003d0900 	.word	0x003d0900
 8002464:	007a1200 	.word	0x007a1200
 8002468:	46000000 	.word	0x46000000
 800246c:	4c742400 	.word	0x4c742400
 8002470:	4a742400 	.word	0x4a742400
 8002474:	4af42400 	.word	0x4af42400

08002478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800247e:	f7ff fe81 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8002482:	4602      	mov	r2, r0
 8002484:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	490f      	ldr	r1, [pc, #60]	; (80024cc <HAL_RCC_GetHCLKFreq+0x54>)
 8002490:	5ccb      	ldrb	r3, [r1, r3]
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	fa22 f303 	lsr.w	r3, r2, r3
 800249a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800249c:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	4a09      	ldr	r2, [pc, #36]	; (80024cc <HAL_RCC_GetHCLKFreq+0x54>)
 80024a6:	5cd3      	ldrb	r3, [r2, r3]
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	fa22 f303 	lsr.w	r3, r2, r3
 80024b2:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80024b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024b6:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	58024400 	.word	0x58024400
 80024cc:	08008b68 	.word	0x08008b68
 80024d0:	24000004 	.word	0x24000004
 80024d4:	24000000 	.word	0x24000000

080024d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80024dc:	f7ff ffcc 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	4904      	ldr	r1, [pc, #16]	; (8002500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024ee:	5ccb      	ldrb	r3, [r1, r3]
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	58024400 	.word	0x58024400
 8002500:	08008b68 	.word	0x08008b68

08002504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002508:	f7ff ffb6 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 800250c:	4602      	mov	r2, r0
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	0a1b      	lsrs	r3, r3, #8
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	4904      	ldr	r1, [pc, #16]	; (800252c <HAL_RCC_GetPCLK2Freq+0x28>)
 800251a:	5ccb      	ldrb	r3, [r1, r3]
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd80      	pop	{r7, pc}
 8002528:	58024400 	.word	0x58024400
 800252c:	08008b68 	.word	0x08008b68

08002530 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	223f      	movs	r2, #63	; 0x3f
 800253e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <HAL_RCC_GetClockConfig+0x7c>)
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f003 0207 	and.w	r2, r3, #7
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800254c:	4b17      	ldr	r3, [pc, #92]	; (80025ac <HAL_RCC_GetClockConfig+0x7c>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <HAL_RCC_GetClockConfig+0x7c>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	f003 020f 	and.w	r2, r3, #15
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_RCC_GetClockConfig+0x7c>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8002570:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <HAL_RCC_GetClockConfig+0x7c>)
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_RCC_GetClockConfig+0x7c>)
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_RCC_GetClockConfig+0x7c>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_RCC_GetClockConfig+0x80>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 020f 	and.w	r2, r3, #15
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	601a      	str	r2, [r3, #0]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	58024400 	.word	0x58024400
 80025b0:	52002000 	.word	0x52002000

080025b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025bc:	2300      	movs	r3, #0
 80025be:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025c0:	2300      	movs	r3, #0
 80025c2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d03f      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80025d8:	d02a      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80025de:	d824      	bhi.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025e4:	d018      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025ea:	d81e      	bhi.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025f4:	d007      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025f6:	e018      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025f8:	4ba6      	ldr	r3, [pc, #664]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	4aa5      	ldr	r2, [pc, #660]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80025fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002604:	e015      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3304      	adds	r3, #4
 800260a:	2102      	movs	r1, #2
 800260c:	4618      	mov	r0, r3
 800260e:	f001 f99b 	bl	8003948 <RCCEx_PLL2_Config>
 8002612:	4603      	mov	r3, r0
 8002614:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002616:	e00c      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3324      	adds	r3, #36	; 0x24
 800261c:	2102      	movs	r1, #2
 800261e:	4618      	mov	r0, r3
 8002620:	f001 fa44 	bl	8003aac <RCCEx_PLL3_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002628:	e003      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	75fb      	strb	r3, [r7, #23]
      break;
 800262e:	e000      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002632:	7dfb      	ldrb	r3, [r7, #23]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d109      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002638:	4b96      	ldr	r3, [pc, #600]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800263a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002644:	4993      	ldr	r1, [pc, #588]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	650b      	str	r3, [r1, #80]	; 0x50
 800264a:	e001      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800264c:	7dfb      	ldrb	r3, [r7, #23]
 800264e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	d03d      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	2b04      	cmp	r3, #4
 8002662:	d826      	bhi.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002664:	a201      	add	r2, pc, #4	; (adr r2, 800266c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266a:	bf00      	nop
 800266c:	08002681 	.word	0x08002681
 8002670:	0800268f 	.word	0x0800268f
 8002674:	080026a1 	.word	0x080026a1
 8002678:	080026b9 	.word	0x080026b9
 800267c:	080026b9 	.word	0x080026b9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002680:	4b84      	ldr	r3, [pc, #528]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	4a83      	ldr	r2, [pc, #524]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800268a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800268c:	e015      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3304      	adds	r3, #4
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f001 f957 	bl	8003948 <RCCEx_PLL2_Config>
 800269a:	4603      	mov	r3, r0
 800269c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800269e:	e00c      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3324      	adds	r3, #36	; 0x24
 80026a4:	2100      	movs	r1, #0
 80026a6:	4618      	mov	r0, r3
 80026a8:	f001 fa00 	bl	8003aac <RCCEx_PLL3_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026b0:	e003      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	75fb      	strb	r3, [r7, #23]
      break;
 80026b6:	e000      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80026b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ba:	7dfb      	ldrb	r3, [r7, #23]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d109      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026c0:	4b74      	ldr	r3, [pc, #464]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c4:	f023 0207 	bic.w	r2, r3, #7
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026cc:	4971      	ldr	r1, [pc, #452]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	650b      	str	r3, [r1, #80]	; 0x50
 80026d2:	e001      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d04a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80026ec:	d031      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80026ee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80026f2:	d82b      	bhi.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x198>
 80026f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f8:	d02d      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80026fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026fe:	d825      	bhi.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002700:	2bc0      	cmp	r3, #192	; 0xc0
 8002702:	d02a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002704:	2bc0      	cmp	r3, #192	; 0xc0
 8002706:	d821      	bhi.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002708:	2b80      	cmp	r3, #128	; 0x80
 800270a:	d016      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800270c:	2b80      	cmp	r3, #128	; 0x80
 800270e:	d81d      	bhi.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002714:	2b40      	cmp	r3, #64	; 0x40
 8002716:	d007      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002718:	e018      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800271a:	4b5e      	ldr	r3, [pc, #376]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	4a5d      	ldr	r2, [pc, #372]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002724:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002726:	e019      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3304      	adds	r3, #4
 800272c:	2100      	movs	r1, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f001 f90a 	bl	8003948 <RCCEx_PLL2_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002738:	e010      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3324      	adds	r3, #36	; 0x24
 800273e:	2100      	movs	r1, #0
 8002740:	4618      	mov	r0, r3
 8002742:	f001 f9b3 	bl	8003aac <RCCEx_PLL3_Config>
 8002746:	4603      	mov	r3, r0
 8002748:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800274a:	e007      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	75fb      	strb	r3, [r7, #23]
      break;
 8002750:	e004      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002752:	bf00      	nop
 8002754:	e002      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002756:	bf00      	nop
 8002758:	e000      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800275a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800275c:	7dfb      	ldrb	r3, [r7, #23]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002762:	4b4c      	ldr	r3, [pc, #304]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002766:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276e:	4949      	ldr	r1, [pc, #292]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002770:	4313      	orrs	r3, r2
 8002772:	650b      	str	r3, [r1, #80]	; 0x50
 8002774:	e001      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002776:	7dfb      	ldrb	r3, [r7, #23]
 8002778:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002782:	2b00      	cmp	r3, #0
 8002784:	d04f      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800278e:	d036      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002790:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002794:	d830      	bhi.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800279a:	d032      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800279c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027a0:	d82a      	bhi.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80027a2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80027a6:	d02e      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x252>
 80027a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80027ac:	d824      	bhi.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80027ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b2:	d018      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
 80027b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b8:	d81e      	bhi.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80027be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c2:	d007      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80027c4:	e018      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027c6:	4b33      	ldr	r3, [pc, #204]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	4a32      	ldr	r2, [pc, #200]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80027d2:	e019      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3304      	adds	r3, #4
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f001 f8b4 	bl	8003948 <RCCEx_PLL2_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80027e4:	e010      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3324      	adds	r3, #36	; 0x24
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f001 f95d 	bl	8003aac <RCCEx_PLL3_Config>
 80027f2:	4603      	mov	r3, r0
 80027f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80027f6:	e007      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	75fb      	strb	r3, [r7, #23]
      break;
 80027fc:	e004      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80027fe:	bf00      	nop
 8002800:	e002      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002802:	bf00      	nop
 8002804:	e000      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002806:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002808:	7dfb      	ldrb	r3, [r7, #23]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800280e:	4b21      	ldr	r3, [pc, #132]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002812:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	491e      	ldr	r1, [pc, #120]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800281c:	4313      	orrs	r3, r2
 800281e:	650b      	str	r3, [r1, #80]	; 0x50
 8002820:	e001      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002822:	7dfb      	ldrb	r3, [r7, #23]
 8002824:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d034      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002836:	2b30      	cmp	r3, #48	; 0x30
 8002838:	d01c      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800283a:	2b30      	cmp	r3, #48	; 0x30
 800283c:	d817      	bhi.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800283e:	2b20      	cmp	r3, #32
 8002840:	d00c      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002842:	2b20      	cmp	r3, #32
 8002844:	d813      	bhi.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002846:	2b00      	cmp	r3, #0
 8002848:	d016      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800284a:	2b10      	cmp	r3, #16
 800284c:	d10f      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	4a10      	ldr	r2, [pc, #64]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002858:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800285a:	e00e      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3304      	adds	r3, #4
 8002860:	2102      	movs	r1, #2
 8002862:	4618      	mov	r0, r3
 8002864:	f001 f870 	bl	8003948 <RCCEx_PLL2_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800286c:	e005      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	75fb      	strb	r3, [r7, #23]
      break;
 8002872:	e002      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002874:	bf00      	nop
 8002876:	e000      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800287a:	7dfb      	ldrb	r3, [r7, #23]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10b      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002884:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800288c:	4901      	ldr	r1, [pc, #4]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800288e:	4313      	orrs	r3, r2
 8002890:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002892:	e003      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002894:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002898:	7dfb      	ldrb	r3, [r7, #23]
 800289a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d047      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028b0:	d030      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80028b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028b6:	d82a      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80028b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80028bc:	d02c      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80028be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80028c2:	d824      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80028c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c8:	d018      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x348>
 80028ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ce:	d81e      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x328>
 80028d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d8:	d007      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x336>
 80028da:	e018      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028dc:	4bb0      	ldr	r3, [pc, #704]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	4aaf      	ldr	r2, [pc, #700]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80028e8:	e017      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3304      	adds	r3, #4
 80028ee:	2100      	movs	r1, #0
 80028f0:	4618      	mov	r0, r3
 80028f2:	f001 f829 	bl	8003948 <RCCEx_PLL2_Config>
 80028f6:	4603      	mov	r3, r0
 80028f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80028fa:	e00e      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3324      	adds	r3, #36	; 0x24
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f001 f8d2 	bl	8003aac <RCCEx_PLL3_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800290c:	e005      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	75fb      	strb	r3, [r7, #23]
      break;
 8002912:	e002      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002914:	bf00      	nop
 8002916:	e000      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002918:	bf00      	nop
    }

    if(ret == HAL_OK)
 800291a:	7dfb      	ldrb	r3, [r7, #23]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d109      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002920:	4b9f      	ldr	r3, [pc, #636]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002924:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292c:	499c      	ldr	r1, [pc, #624]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800292e:	4313      	orrs	r3, r2
 8002930:	650b      	str	r3, [r1, #80]	; 0x50
 8002932:	e001      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002934:	7dfb      	ldrb	r3, [r7, #23]
 8002936:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d049      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800294c:	d02e      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800294e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002952:	d828      	bhi.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002954:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002958:	d02a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800295a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800295e:	d822      	bhi.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002960:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002964:	d026      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002966:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800296a:	d81c      	bhi.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800296c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002970:	d010      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002972:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002976:	d816      	bhi.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01d      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800297c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002980:	d111      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3304      	adds	r3, #4
 8002986:	2101      	movs	r1, #1
 8002988:	4618      	mov	r0, r3
 800298a:	f000 ffdd 	bl	8003948 <RCCEx_PLL2_Config>
 800298e:	4603      	mov	r3, r0
 8002990:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002992:	e012      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3324      	adds	r3, #36	; 0x24
 8002998:	2101      	movs	r1, #1
 800299a:	4618      	mov	r0, r3
 800299c:	f001 f886 	bl	8003aac <RCCEx_PLL3_Config>
 80029a0:	4603      	mov	r3, r0
 80029a2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80029a4:	e009      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	75fb      	strb	r3, [r7, #23]
      break;
 80029aa:	e006      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80029ac:	bf00      	nop
 80029ae:	e004      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80029b0:	bf00      	nop
 80029b2:	e002      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80029b4:	bf00      	nop
 80029b6:	e000      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80029b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d109      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80029c0:	4b77      	ldr	r3, [pc, #476]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029cc:	4974      	ldr	r1, [pc, #464]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	650b      	str	r3, [r1, #80]	; 0x50
 80029d2:	e001      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d053      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80029ea:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80029ee:	d034      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80029f0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80029f4:	d82e      	bhi.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80029f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029fa:	d030      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80029fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a00:	d828      	bhi.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a06:	d02c      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0c:	d822      	bhi.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002a0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a12:	d028      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002a14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a18:	d81c      	bhi.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a1e:	d010      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8002a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a24:	d816      	bhi.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d01f      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002a2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a2e:	d111      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3304      	adds	r3, #4
 8002a34:	2101      	movs	r1, #1
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 ff86 	bl	8003948 <RCCEx_PLL2_Config>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002a40:	e014      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3324      	adds	r3, #36	; 0x24
 8002a46:	2101      	movs	r1, #1
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f001 f82f 	bl	8003aac <RCCEx_PLL3_Config>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002a52:	e00b      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	75fb      	strb	r3, [r7, #23]
      break;
 8002a58:	e008      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a5a:	bf00      	nop
 8002a5c:	e006      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e004      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a62:	bf00      	nop
 8002a64:	e002      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a66:	bf00      	nop
 8002a68:	e000      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a6c:	7dfb      	ldrb	r3, [r7, #23]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10a      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a72:	4b4b      	ldr	r3, [pc, #300]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a76:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a80:	4947      	ldr	r1, [pc, #284]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	658b      	str	r3, [r1, #88]	; 0x58
 8002a86:	e001      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
 8002a8a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d02f      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aa0:	d00e      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aa6:	d814      	bhi.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d015      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002aac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ab0:	d10f      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ab2:	4b3b      	ldr	r3, [pc, #236]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	4a3a      	ldr	r2, [pc, #232]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002abc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002abe:	e00c      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 ff3e 	bl	8003948 <RCCEx_PLL2_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ad0:	e003      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ad6:	e000      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d109      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ae0:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aec:	492c      	ldr	r1, [pc, #176]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	650b      	str	r3, [r1, #80]	; 0x50
 8002af2:	e001      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af4:	7dfb      	ldrb	r3, [r7, #23]
 8002af6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d032      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d81b      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8002b0c:	a201      	add	r2, pc, #4	; (adr r2, 8002b14 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b12:	bf00      	nop
 8002b14:	08002b4b 	.word	0x08002b4b
 8002b18:	08002b25 	.word	0x08002b25
 8002b1c:	08002b33 	.word	0x08002b33
 8002b20:	08002b4b 	.word	0x08002b4b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b24:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	4a1d      	ldr	r2, [pc, #116]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002b30:	e00c      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3304      	adds	r3, #4
 8002b36:	2102      	movs	r1, #2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 ff05 	bl	8003948 <RCCEx_PLL2_Config>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002b42:	e003      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	75fb      	strb	r3, [r7, #23]
      break;
 8002b48:	e000      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8002b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002b52:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b56:	f023 0203 	bic.w	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	4910      	ldr	r1, [pc, #64]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b64:	e001      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
 8002b68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 808a 	beq.w	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b78:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b84:	f7fe fa1a 	bl	8000fbc <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b8a:	e00d      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8c:	f7fe fa16 	bl	8000fbc <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d906      	bls.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	75fb      	strb	r3, [r7, #23]
        break;
 8002b9e:	e009      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002ba0:	58024400 	.word	0x58024400
 8002ba4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ba8:	4bba      	ldr	r3, [pc, #744]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0eb      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8002bb4:	7dfb      	ldrb	r3, [r7, #23]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d166      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002bba:	4bb7      	ldr	r3, [pc, #732]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bc4:	4053      	eors	r3, r2
 8002bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d013      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bce:	4bb2      	ldr	r3, [pc, #712]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bd8:	4baf      	ldr	r3, [pc, #700]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bdc:	4aae      	ldr	r2, [pc, #696]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002be4:	4bac      	ldr	r3, [pc, #688]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	4aab      	ldr	r2, [pc, #684]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bee:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002bf0:	4aa9      	ldr	r2, [pc, #676]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c00:	d115      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c02:	f7fe f9db 	bl	8000fbc <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c08:	e00b      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0a:	f7fe f9d7 	bl	8000fbc <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d902      	bls.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	75fb      	strb	r3, [r7, #23]
            break;
 8002c20:	e005      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c22:	4b9d      	ldr	r3, [pc, #628]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0ed      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8002c2e:	7dfb      	ldrb	r3, [r7, #23]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d126      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c42:	d10d      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8002c44:	4b94      	ldr	r3, [pc, #592]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c52:	0919      	lsrs	r1, r3, #4
 8002c54:	4b91      	ldr	r3, [pc, #580]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002c56:	400b      	ands	r3, r1
 8002c58:	498f      	ldr	r1, [pc, #572]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	610b      	str	r3, [r1, #16]
 8002c5e:	e005      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8002c60:	4b8d      	ldr	r3, [pc, #564]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	4a8c      	ldr	r2, [pc, #560]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c66:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c6a:	6113      	str	r3, [r2, #16]
 8002c6c:	4b8a      	ldr	r3, [pc, #552]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7a:	4987      	ldr	r1, [pc, #540]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	670b      	str	r3, [r1, #112]	; 0x70
 8002c80:	e004      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
 8002c84:	75bb      	strb	r3, [r7, #22]
 8002c86:	e001      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d07f      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c9e:	2b28      	cmp	r3, #40	; 0x28
 8002ca0:	d866      	bhi.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8002ca2:	a201      	add	r2, pc, #4	; (adr r2, 8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8002ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca8:	08002d77 	.word	0x08002d77
 8002cac:	08002d71 	.word	0x08002d71
 8002cb0:	08002d71 	.word	0x08002d71
 8002cb4:	08002d71 	.word	0x08002d71
 8002cb8:	08002d71 	.word	0x08002d71
 8002cbc:	08002d71 	.word	0x08002d71
 8002cc0:	08002d71 	.word	0x08002d71
 8002cc4:	08002d71 	.word	0x08002d71
 8002cc8:	08002d4d 	.word	0x08002d4d
 8002ccc:	08002d71 	.word	0x08002d71
 8002cd0:	08002d71 	.word	0x08002d71
 8002cd4:	08002d71 	.word	0x08002d71
 8002cd8:	08002d71 	.word	0x08002d71
 8002cdc:	08002d71 	.word	0x08002d71
 8002ce0:	08002d71 	.word	0x08002d71
 8002ce4:	08002d71 	.word	0x08002d71
 8002ce8:	08002d5f 	.word	0x08002d5f
 8002cec:	08002d71 	.word	0x08002d71
 8002cf0:	08002d71 	.word	0x08002d71
 8002cf4:	08002d71 	.word	0x08002d71
 8002cf8:	08002d71 	.word	0x08002d71
 8002cfc:	08002d71 	.word	0x08002d71
 8002d00:	08002d71 	.word	0x08002d71
 8002d04:	08002d71 	.word	0x08002d71
 8002d08:	08002d77 	.word	0x08002d77
 8002d0c:	08002d71 	.word	0x08002d71
 8002d10:	08002d71 	.word	0x08002d71
 8002d14:	08002d71 	.word	0x08002d71
 8002d18:	08002d71 	.word	0x08002d71
 8002d1c:	08002d71 	.word	0x08002d71
 8002d20:	08002d71 	.word	0x08002d71
 8002d24:	08002d71 	.word	0x08002d71
 8002d28:	08002d77 	.word	0x08002d77
 8002d2c:	08002d71 	.word	0x08002d71
 8002d30:	08002d71 	.word	0x08002d71
 8002d34:	08002d71 	.word	0x08002d71
 8002d38:	08002d71 	.word	0x08002d71
 8002d3c:	08002d71 	.word	0x08002d71
 8002d40:	08002d71 	.word	0x08002d71
 8002d44:	08002d71 	.word	0x08002d71
 8002d48:	08002d77 	.word	0x08002d77
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3304      	adds	r3, #4
 8002d50:	2101      	movs	r1, #1
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fdf8 	bl	8003948 <RCCEx_PLL2_Config>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002d5c:	e00c      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3324      	adds	r3, #36	; 0x24
 8002d62:	2101      	movs	r1, #1
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fea1 	bl	8003aac <RCCEx_PLL3_Config>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002d6e:	e003      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	75fb      	strb	r3, [r7, #23]
      break;
 8002d74:	e000      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8002d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10a      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d7e:	4b46      	ldr	r3, [pc, #280]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d82:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d8c:	4942      	ldr	r1, [pc, #264]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	654b      	str	r3, [r1, #84]	; 0x54
 8002d92:	e001      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
 8002d96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d038      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d821      	bhi.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002dac:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db2:	bf00      	nop
 8002db4:	08002df7 	.word	0x08002df7
 8002db8:	08002dcd 	.word	0x08002dcd
 8002dbc:	08002ddf 	.word	0x08002ddf
 8002dc0:	08002df7 	.word	0x08002df7
 8002dc4:	08002df7 	.word	0x08002df7
 8002dc8:	08002df7 	.word	0x08002df7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fdb8 	bl	8003948 <RCCEx_PLL2_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ddc:	e00c      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3324      	adds	r3, #36	; 0x24
 8002de2:	2101      	movs	r1, #1
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fe61 	bl	8003aac <RCCEx_PLL3_Config>
 8002dea:	4603      	mov	r3, r0
 8002dec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002dee:	e003      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	75fb      	strb	r3, [r7, #23]
      break;
 8002df4:	e000      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8002df6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002dfe:	4b26      	ldr	r3, [pc, #152]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e02:	f023 0207 	bic.w	r2, r3, #7
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e0a:	4923      	ldr	r1, [pc, #140]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	654b      	str	r3, [r1, #84]	; 0x54
 8002e10:	e001      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e12:	7dfb      	ldrb	r3, [r7, #23]
 8002e14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d040      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e28:	2b05      	cmp	r3, #5
 8002e2a:	d821      	bhi.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8002e2c:	a201      	add	r2, pc, #4	; (adr r2, 8002e34 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e32:	bf00      	nop
 8002e34:	08002e77 	.word	0x08002e77
 8002e38:	08002e4d 	.word	0x08002e4d
 8002e3c:	08002e5f 	.word	0x08002e5f
 8002e40:	08002e77 	.word	0x08002e77
 8002e44:	08002e77 	.word	0x08002e77
 8002e48:	08002e77 	.word	0x08002e77
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	2101      	movs	r1, #1
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fd78 	bl	8003948 <RCCEx_PLL2_Config>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002e5c:	e00c      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3324      	adds	r3, #36	; 0x24
 8002e62:	2101      	movs	r1, #1
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fe21 	bl	8003aac <RCCEx_PLL3_Config>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002e6e:	e003      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	75fb      	strb	r3, [r7, #23]
      break;
 8002e74:	e000      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8002e76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d110      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e7e:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e82:	f023 0207 	bic.w	r2, r3, #7
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e8c:	4902      	ldr	r1, [pc, #8]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	658b      	str	r3, [r1, #88]	; 0x58
 8002e92:	e007      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8002e94:	58024800 	.word	0x58024800
 8002e98:	58024400 	.word	0x58024400
 8002e9c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d04b      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eba:	d02e      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8002ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ec0:	d828      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec6:	d02a      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8002ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ecc:	d822      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002ece:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ed2:	d026      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002ed4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ed8:	d81c      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ede:	d010      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8002ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ee4:	d816      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01d      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8002eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eee:	d111      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fd26 	bl	8003948 <RCCEx_PLL2_Config>
 8002efc:	4603      	mov	r3, r0
 8002efe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002f00:	e012      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3324      	adds	r3, #36	; 0x24
 8002f06:	2102      	movs	r1, #2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fdcf 	bl	8003aac <RCCEx_PLL3_Config>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002f12:	e009      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	75fb      	strb	r3, [r7, #23]
      break;
 8002f18:	e006      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002f1a:	bf00      	nop
 8002f1c:	e004      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e002      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002f22:	bf00      	nop
 8002f24:	e000      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10a      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f2e:	4bb3      	ldr	r3, [pc, #716]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f3c:	49af      	ldr	r1, [pc, #700]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	654b      	str	r3, [r1, #84]	; 0x54
 8002f42:	e001      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
 8002f46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d04b      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f5e:	d02e      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8002f60:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f64:	d828      	bhi.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6a:	d02a      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f70:	d822      	bhi.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002f72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f76:	d026      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002f78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f7c:	d81c      	bhi.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f82:	d010      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8002f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f88:	d816      	bhi.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d01d      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f92:	d111      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3304      	adds	r3, #4
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fcd4 	bl	8003948 <RCCEx_PLL2_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002fa4:	e012      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3324      	adds	r3, #36	; 0x24
 8002faa:	2102      	movs	r1, #2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fd7d 	bl	8003aac <RCCEx_PLL3_Config>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002fb6:	e009      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	75fb      	strb	r3, [r7, #23]
      break;
 8002fbc:	e006      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002fbe:	bf00      	nop
 8002fc0:	e004      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002fc2:	bf00      	nop
 8002fc4:	e002      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002fc6:	bf00      	nop
 8002fc8:	e000      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002fca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fcc:	7dfb      	ldrb	r3, [r7, #23]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10a      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fd2:	4b8a      	ldr	r3, [pc, #552]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002fe0:	4986      	ldr	r1, [pc, #536]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	658b      	str	r3, [r1, #88]	; 0x58
 8002fe6:	e001      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
 8002fea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d04b      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ffe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003002:	d02e      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003004:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003008:	d828      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800300a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800300e:	d02a      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003014:	d822      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003016:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800301a:	d026      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800301c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003020:	d81c      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003022:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003026:	d010      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800302c:	d816      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01d      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003036:	d111      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3304      	adds	r3, #4
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fc82 	bl	8003948 <RCCEx_PLL2_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003048:	e012      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3324      	adds	r3, #36	; 0x24
 800304e:	2102      	movs	r1, #2
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fd2b 	bl	8003aac <RCCEx_PLL3_Config>
 8003056:	4603      	mov	r3, r0
 8003058:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800305a:	e009      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	75fb      	strb	r3, [r7, #23]
      break;
 8003060:	e006      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003062:	bf00      	nop
 8003064:	e004      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003066:	bf00      	nop
 8003068:	e002      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800306a:	bf00      	nop
 800306c:	e000      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800306e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10a      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003076:	4b61      	ldr	r3, [pc, #388]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003084:	495d      	ldr	r1, [pc, #372]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003086:	4313      	orrs	r3, r2
 8003088:	658b      	str	r3, [r1, #88]	; 0x58
 800308a:	e001      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308c:	7dfb      	ldrb	r3, [r7, #23]
 800308e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a6:	d10a      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3324      	adds	r3, #36	; 0x24
 80030ac:	2102      	movs	r1, #2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fcfc 	bl	8003aac <RCCEx_PLL3_Config>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80030be:	4b4f      	ldr	r3, [pc, #316]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030cc:	494b      	ldr	r1, [pc, #300]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01a      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e8:	d10a      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3324      	adds	r3, #36	; 0x24
 80030ee:	2102      	movs	r1, #2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fcdb 	bl	8003aac <RCCEx_PLL3_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003100:	4b3e      	ldr	r3, [pc, #248]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800310e:	493b      	ldr	r1, [pc, #236]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003110:	4313      	orrs	r3, r2
 8003112:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d034      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003126:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800312a:	d01d      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800312c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003130:	d817      	bhi.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313a:	d009      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800313c:	e011      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3304      	adds	r3, #4
 8003142:	2100      	movs	r1, #0
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fbff 	bl	8003948 <RCCEx_PLL2_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800314e:	e00c      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3324      	adds	r3, #36	; 0x24
 8003154:	2102      	movs	r1, #2
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fca8 	bl	8003aac <RCCEx_PLL3_Config>
 800315c:	4603      	mov	r3, r0
 800315e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003160:	e003      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
      break;
 8003166:	e000      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003168:	bf00      	nop
    }

    if(ret == HAL_OK)
 800316a:	7dfb      	ldrb	r3, [r7, #23]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10a      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003170:	4b22      	ldr	r3, [pc, #136]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800317e:	491f      	ldr	r1, [pc, #124]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003180:	4313      	orrs	r3, r2
 8003182:	658b      	str	r3, [r1, #88]	; 0x58
 8003184:	e001      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003186:	7dfb      	ldrb	r3, [r7, #23]
 8003188:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d036      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800319c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031a0:	d01c      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80031a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031a6:	d816      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80031a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ac:	d003      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80031ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031b2:	d007      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80031b4:	e00f      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031b6:	4b11      	ldr	r3, [pc, #68]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ba:	4a10      	ldr	r2, [pc, #64]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80031c2:	e00c      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3324      	adds	r3, #36	; 0x24
 80031c8:	2101      	movs	r1, #1
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fc6e 	bl	8003aac <RCCEx_PLL3_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80031d4:	e003      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	75fb      	strb	r3, [r7, #23]
      break;
 80031da:	e000      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80031dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10d      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f2:	4902      	ldr	r1, [pc, #8]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	654b      	str	r3, [r1, #84]	; 0x54
 80031f8:	e004      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80031fa:	bf00      	nop
 80031fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003200:	7dfb      	ldrb	r3, [r7, #23]
 8003202:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d029      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800321c:	d007      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800321e:	e00f      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003220:	4b69      	ldr	r3, [pc, #420]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	4a68      	ldr	r2, [pc, #416]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800322a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800322c:	e00b      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3304      	adds	r3, #4
 8003232:	2102      	movs	r1, #2
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fb87 	bl	8003948 <RCCEx_PLL2_Config>
 800323a:	4603      	mov	r3, r0
 800323c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800323e:	e002      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	75fb      	strb	r3, [r7, #23]
      break;
 8003244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003246:	7dfb      	ldrb	r3, [r7, #23]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d109      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800324c:	4b5e      	ldr	r3, [pc, #376]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800324e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003250:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003258:	495b      	ldr	r1, [pc, #364]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800325a:	4313      	orrs	r3, r2
 800325c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800325e:	e001      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3324      	adds	r3, #36	; 0x24
 8003274:	2102      	movs	r1, #2
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fc18 	bl	8003aac <RCCEx_PLL3_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d032      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003298:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800329c:	d017      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 800329e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032a2:	d811      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80032a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a8:	d013      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 80032aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ae:	d80b      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d010      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 80032b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b8:	d106      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ba:	4b43      	ldr	r3, [pc, #268]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	4a42      	ldr	r2, [pc, #264]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80032c6:	e007      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	75fb      	strb	r3, [r7, #23]
      break;
 80032cc:	e004      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80032ce:	bf00      	nop
 80032d0:	e002      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80032d2:	bf00      	nop
 80032d4:	e000      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80032d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032d8:	7dfb      	ldrb	r3, [r7, #23]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10a      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032de:	4b3a      	ldr	r3, [pc, #232]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ec:	4936      	ldr	r1, [pc, #216]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	654b      	str	r3, [r1, #84]	; 0x54
 80032f2:	e001      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
 80032f6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003304:	4b30      	ldr	r3, [pc, #192]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003308:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003310:	492d      	ldr	r1, [pc, #180]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003312:	4313      	orrs	r3, r2
 8003314:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d008      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003322:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003326:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800332e:	4926      	ldr	r1, [pc, #152]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003330:	4313      	orrs	r3, r2
 8003332:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003340:	4b21      	ldr	r3, [pc, #132]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003344:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334c:	491e      	ldr	r1, [pc, #120]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800334e:	4313      	orrs	r3, r2
 8003350:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00d      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800335e:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	4a19      	ldr	r2, [pc, #100]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003364:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003368:	6113      	str	r3, [r2, #16]
 800336a:	4b17      	ldr	r3, [pc, #92]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800336c:	691a      	ldr	r2, [r3, #16]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003374:	4914      	ldr	r1, [pc, #80]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003376:	4313      	orrs	r3, r2
 8003378:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	da08      	bge.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003382:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003386:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338e:	490e      	ldr	r1, [pc, #56]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003390:	4313      	orrs	r3, r2
 8003392:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d009      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033a0:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	4906      	ldr	r1, [pc, #24]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80033b4:	7dbb      	ldrb	r3, [r7, #22]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	e000      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	58024400 	.word	0x58024400

080033cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80033d0:	f7ff f852 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 80033d4:	4602      	mov	r2, r0
 80033d6:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	4904      	ldr	r1, [pc, #16]	; (80033f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80033e2:	5ccb      	ldrb	r3, [r1, r3]
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	58024400 	.word	0x58024400
 80033f4:	08008b68 	.word	0x08008b68

080033f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b089      	sub	sp, #36	; 0x24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003400:	4ba1      	ldr	r3, [pc, #644]	; (8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800340a:	4b9f      	ldr	r3, [pc, #636]	; (8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	0b1b      	lsrs	r3, r3, #12
 8003410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003414:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003416:	4b9c      	ldr	r3, [pc, #624]	; (8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341a:	091b      	lsrs	r3, r3, #4
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003422:	4b99      	ldr	r3, [pc, #612]	; (8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003426:	08db      	lsrs	r3, r3, #3
 8003428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	fb02 f303 	mul.w	r3, r2, r3
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8111 	beq.w	8003668 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2b02      	cmp	r3, #2
 800344a:	f000 8083 	beq.w	8003554 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	2b02      	cmp	r3, #2
 8003452:	f200 80a1 	bhi.w	8003598 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d056      	beq.n	8003510 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003462:	e099      	b.n	8003598 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003464:	4b88      	ldr	r3, [pc, #544]	; (8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b00      	cmp	r3, #0
 800346e:	d02d      	beq.n	80034cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003470:	4b85      	ldr	r3, [pc, #532]	; (8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	08db      	lsrs	r3, r3, #3
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	4a84      	ldr	r2, [pc, #528]	; (800368c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
 8003480:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	ee07 3a90 	vmov	s15, r3
 8003488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	ee07 3a90 	vmov	s15, r3
 8003492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800349a:	4b7b      	ldr	r3, [pc, #492]	; (8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80034ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80034b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80034ca:	e087      	b.n	80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003694 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80034da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034de:	4b6a      	ldr	r3, [pc, #424]	; (8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80034f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80034f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800350a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800350e:	e065      	b.n	80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	ee07 3a90 	vmov	s15, r3
 8003516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800351a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800351e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003522:	4b59      	ldr	r3, [pc, #356]	; (8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003532:	ed97 6a03 	vldr	s12, [r7, #12]
 8003536:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800353a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800353e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800354a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003552:	e043      	b.n	80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	ee07 3a90 	vmov	s15, r3
 800355a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800369c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003566:	4b48      	ldr	r3, [pc, #288]	; (8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356e:	ee07 3a90 	vmov	s15, r3
 8003572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003576:	ed97 6a03 	vldr	s12, [r7, #12]
 800357a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800357e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800358a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800358e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003592:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003596:	e021      	b.n	80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	ee07 3a90 	vmov	s15, r3
 800359e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80035a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035aa:	4b37      	ldr	r3, [pc, #220]	; (8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b2:	ee07 3a90 	vmov	s15, r3
 80035b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80035be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80035dc:	4b2a      	ldr	r3, [pc, #168]	; (8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e0:	0a5b      	lsrs	r3, r3, #9
 80035e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035e6:	ee07 3a90 	vmov	s15, r3
 80035ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80035fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003602:	ee17 2a90 	vmov	r2, s15
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800360a:	4b1f      	ldr	r3, [pc, #124]	; (8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	0c1b      	lsrs	r3, r3, #16
 8003610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003614:	ee07 3a90 	vmov	s15, r3
 8003618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003620:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003624:	edd7 6a07 	vldr	s13, [r7, #28]
 8003628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800362c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003630:	ee17 2a90 	vmov	r2, s15
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003638:	4b13      	ldr	r3, [pc, #76]	; (8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	0e1b      	lsrs	r3, r3, #24
 800363e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800364e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003652:	edd7 6a07 	vldr	s13, [r7, #28]
 8003656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800365a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800365e:	ee17 2a90 	vmov	r2, s15
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003666:	e008      	b.n	800367a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	609a      	str	r2, [r3, #8]
}
 800367a:	bf00      	nop
 800367c:	3724      	adds	r7, #36	; 0x24
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	58024400 	.word	0x58024400
 800368c:	03d09000 	.word	0x03d09000
 8003690:	46000000 	.word	0x46000000
 8003694:	4c742400 	.word	0x4c742400
 8003698:	4a742400 	.word	0x4a742400
 800369c:	4af42400 	.word	0x4af42400

080036a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b089      	sub	sp, #36	; 0x24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036a8:	4ba1      	ldr	r3, [pc, #644]	; (8003930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80036b2:	4b9f      	ldr	r3, [pc, #636]	; (8003930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b6:	0d1b      	lsrs	r3, r3, #20
 80036b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80036be:	4b9c      	ldr	r3, [pc, #624]	; (8003930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	0a1b      	lsrs	r3, r3, #8
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80036ca:	4b99      	ldr	r3, [pc, #612]	; (8003930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	08db      	lsrs	r3, r3, #3
 80036d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	fb02 f303 	mul.w	r3, r2, r3
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 8111 	beq.w	8003910 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	f000 8083 	beq.w	80037fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	f200 80a1 	bhi.w	8003840 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d056      	beq.n	80037b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800370a:	e099      	b.n	8003840 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800370c:	4b88      	ldr	r3, [pc, #544]	; (8003930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	2b00      	cmp	r3, #0
 8003716:	d02d      	beq.n	8003774 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003718:	4b85      	ldr	r3, [pc, #532]	; (8003930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	08db      	lsrs	r3, r3, #3
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	4a84      	ldr	r2, [pc, #528]	; (8003934 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
 8003728:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	ee07 3a90 	vmov	s15, r3
 8003730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800373e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003742:	4b7b      	ldr	r3, [pc, #492]	; (8003930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800374a:	ee07 3a90 	vmov	s15, r3
 800374e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003752:	ed97 6a03 	vldr	s12, [r7, #12]
 8003756:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800375a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800375e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800376a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003772:	e087      	b.n	8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800393c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003786:	4b6a      	ldr	r3, [pc, #424]	; (8003930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003796:	ed97 6a03 	vldr	s12, [r7, #12]
 800379a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800379e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037b6:	e065      	b.n	8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80037c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ca:	4b59      	ldr	r3, [pc, #356]	; (8003930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037da:	ed97 6a03 	vldr	s12, [r7, #12]
 80037de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80037e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037fa:	e043      	b.n	8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003806:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003944 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800380a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800380e:	4b48      	ldr	r3, [pc, #288]	; (8003930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800381e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003822:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800382a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800382e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800383e:	e021      	b.n	8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800384e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003852:	4b37      	ldr	r3, [pc, #220]	; (8003930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003862:	ed97 6a03 	vldr	s12, [r7, #12]
 8003866:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800386a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800386e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800387a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003882:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003884:	4b2a      	ldr	r3, [pc, #168]	; (8003930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	0a5b      	lsrs	r3, r3, #9
 800388a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800388e:	ee07 3a90 	vmov	s15, r3
 8003892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003896:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800389a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800389e:	edd7 6a07 	vldr	s13, [r7, #28]
 80038a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038aa:	ee17 2a90 	vmov	r2, s15
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80038b2:	4b1f      	ldr	r3, [pc, #124]	; (8003930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	0c1b      	lsrs	r3, r3, #16
 80038b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038bc:	ee07 3a90 	vmov	s15, r3
 80038c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80038d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038d8:	ee17 2a90 	vmov	r2, s15
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80038e0:	4b13      	ldr	r3, [pc, #76]	; (8003930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	0e1b      	lsrs	r3, r3, #24
 80038e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ea:	ee07 3a90 	vmov	s15, r3
 80038ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80038fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003906:	ee17 2a90 	vmov	r2, s15
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800390e:	e008      	b.n	8003922 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	609a      	str	r2, [r3, #8]
}
 8003922:	bf00      	nop
 8003924:	3724      	adds	r7, #36	; 0x24
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	58024400 	.word	0x58024400
 8003934:	03d09000 	.word	0x03d09000
 8003938:	46000000 	.word	0x46000000
 800393c:	4c742400 	.word	0x4c742400
 8003940:	4a742400 	.word	0x4a742400
 8003944:	4af42400 	.word	0x4af42400

08003948 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003956:	4b53      	ldr	r3, [pc, #332]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	2b03      	cmp	r3, #3
 8003960:	d101      	bne.n	8003966 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e099      	b.n	8003a9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003966:	4b4f      	ldr	r3, [pc, #316]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a4e      	ldr	r2, [pc, #312]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 800396c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003972:	f7fd fb23 	bl	8000fbc <HAL_GetTick>
 8003976:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003978:	e008      	b.n	800398c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800397a:	f7fd fb1f 	bl	8000fbc <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e086      	b.n	8003a9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800398c:	4b45      	ldr	r3, [pc, #276]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f0      	bne.n	800397a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003998:	4b42      	ldr	r3, [pc, #264]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	031b      	lsls	r3, r3, #12
 80039a6:	493f      	ldr	r1, [pc, #252]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	628b      	str	r3, [r1, #40]	; 0x28
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	3b01      	subs	r3, #1
 80039b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	025b      	lsls	r3, r3, #9
 80039be:	b29b      	uxth	r3, r3
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	041b      	lsls	r3, r3, #16
 80039ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	061b      	lsls	r3, r3, #24
 80039d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039dc:	4931      	ldr	r1, [pc, #196]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80039e2:	4b30      	ldr	r3, [pc, #192]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	492d      	ldr	r1, [pc, #180]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80039f4:	4b2b      	ldr	r3, [pc, #172]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	f023 0220 	bic.w	r2, r3, #32
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	4928      	ldr	r1, [pc, #160]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003a06:	4b27      	ldr	r3, [pc, #156]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	4a26      	ldr	r2, [pc, #152]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 8003a0c:	f023 0310 	bic.w	r3, r3, #16
 8003a10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003a12:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 8003a14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a16:	4b24      	ldr	r3, [pc, #144]	; (8003aa8 <RCCEx_PLL2_Config+0x160>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	69d2      	ldr	r2, [r2, #28]
 8003a1e:	00d2      	lsls	r2, r2, #3
 8003a20:	4920      	ldr	r1, [pc, #128]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003a26:	4b1f      	ldr	r3, [pc, #124]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	4a1e      	ldr	r2, [pc, #120]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 8003a2c:	f043 0310 	orr.w	r3, r3, #16
 8003a30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d106      	bne.n	8003a46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003a38:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 8003a3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a44:	e00f      	b.n	8003a66 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d106      	bne.n	8003a5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003a4c:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	4a14      	ldr	r2, [pc, #80]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 8003a52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a58:	e005      	b.n	8003a66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003a5a:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	4a11      	ldr	r2, [pc, #68]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 8003a60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003a66:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a0e      	ldr	r2, [pc, #56]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 8003a6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a72:	f7fd faa3 	bl	8000fbc <HAL_GetTick>
 8003a76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a78:	e008      	b.n	8003a8c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a7a:	f7fd fa9f 	bl	8000fbc <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e006      	b.n	8003a9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <RCCEx_PLL2_Config+0x15c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	58024400 	.word	0x58024400
 8003aa8:	ffff0007 	.word	0xffff0007

08003aac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003aba:	4b53      	ldr	r3, [pc, #332]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d101      	bne.n	8003aca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e099      	b.n	8003bfe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003aca:	4b4f      	ldr	r3, [pc, #316]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a4e      	ldr	r2, [pc, #312]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad6:	f7fd fa71 	bl	8000fbc <HAL_GetTick>
 8003ada:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003adc:	e008      	b.n	8003af0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003ade:	f7fd fa6d 	bl	8000fbc <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e086      	b.n	8003bfe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003af0:	4b45      	ldr	r3, [pc, #276]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1f0      	bne.n	8003ade <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003afc:	4b42      	ldr	r3, [pc, #264]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	051b      	lsls	r3, r3, #20
 8003b0a:	493f      	ldr	r1, [pc, #252]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	628b      	str	r3, [r1, #40]	; 0x28
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	025b      	lsls	r3, r3, #9
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	041b      	lsls	r3, r3, #16
 8003b2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	061b      	lsls	r3, r3, #24
 8003b3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b40:	4931      	ldr	r1, [pc, #196]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003b46:	4b30      	ldr	r3, [pc, #192]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	492d      	ldr	r1, [pc, #180]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003b58:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	4928      	ldr	r1, [pc, #160]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003b6a:	4b27      	ldr	r3, [pc, #156]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	4a26      	ldr	r2, [pc, #152]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003b76:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b7a:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <RCCEx_PLL3_Config+0x160>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	69d2      	ldr	r2, [r2, #28]
 8003b82:	00d2      	lsls	r2, r2, #3
 8003b84:	4920      	ldr	r1, [pc, #128]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003b8a:	4b1f      	ldr	r3, [pc, #124]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	4a1e      	ldr	r2, [pc, #120]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003b9c:	4b1a      	ldr	r3, [pc, #104]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	4a19      	ldr	r2, [pc, #100]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003ba2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ba8:	e00f      	b.n	8003bca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d106      	bne.n	8003bbe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003bb0:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	4a14      	ldr	r2, [pc, #80]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003bb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bbc:	e005      	b.n	8003bca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	4a11      	ldr	r2, [pc, #68]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003bc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003bca:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a0e      	ldr	r2, [pc, #56]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd6:	f7fd f9f1 	bl	8000fbc <HAL_GetTick>
 8003bda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003bdc:	e008      	b.n	8003bf0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003bde:	f7fd f9ed 	bl	8000fbc <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e006      	b.n	8003bfe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003bf0:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <RCCEx_PLL3_Config+0x15c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0f0      	beq.n	8003bde <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	58024400 	.word	0x58024400
 8003c0c:	ffff0007 	.word	0xffff0007

08003c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e049      	b.n	8003cb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f841 	bl	8003cbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f000 fa00 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
	...

08003cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d001      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e054      	b.n	8003d96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0201 	orr.w	r2, r2, #1
 8003d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d022      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d16:	d01d      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a22      	ldr	r2, [pc, #136]	; (8003da8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d018      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a21      	ldr	r2, [pc, #132]	; (8003dac <HAL_TIM_Base_Start_IT+0xd8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d013      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a1f      	ldr	r2, [pc, #124]	; (8003db0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00e      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1e      	ldr	r2, [pc, #120]	; (8003db4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d009      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1c      	ldr	r2, [pc, #112]	; (8003db8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d004      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1b      	ldr	r2, [pc, #108]	; (8003dbc <HAL_TIM_Base_Start_IT+0xe8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d115      	bne.n	8003d80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	4b19      	ldr	r3, [pc, #100]	; (8003dc0 <HAL_TIM_Base_Start_IT+0xec>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b06      	cmp	r3, #6
 8003d64:	d015      	beq.n	8003d92 <HAL_TIM_Base_Start_IT+0xbe>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d6c:	d011      	beq.n	8003d92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0201 	orr.w	r2, r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7e:	e008      	b.n	8003d92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	e000      	b.n	8003d94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000800 	.word	0x40000800
 8003db0:	40000c00 	.word	0x40000c00
 8003db4:	40010400 	.word	0x40010400
 8003db8:	40001800 	.word	0x40001800
 8003dbc:	40014000 	.word	0x40014000
 8003dc0:	00010007 	.word	0x00010007

08003dc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d122      	bne.n	8003e20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d11b      	bne.n	8003e20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0202 	mvn.w	r2, #2
 8003df0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f905 	bl	8004016 <HAL_TIM_IC_CaptureCallback>
 8003e0c:	e005      	b.n	8003e1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f8f7 	bl	8004002 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f908 	bl	800402a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d122      	bne.n	8003e74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d11b      	bne.n	8003e74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0204 	mvn.w	r2, #4
 8003e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2202      	movs	r2, #2
 8003e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f8db 	bl	8004016 <HAL_TIM_IC_CaptureCallback>
 8003e60:	e005      	b.n	8003e6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f8cd 	bl	8004002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f8de 	bl	800402a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d122      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d11b      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0208 	mvn.w	r2, #8
 8003e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f8b1 	bl	8004016 <HAL_TIM_IC_CaptureCallback>
 8003eb4:	e005      	b.n	8003ec2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f8a3 	bl	8004002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f8b4 	bl	800402a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0310 	and.w	r3, r3, #16
 8003ed2:	2b10      	cmp	r3, #16
 8003ed4:	d122      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d11b      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0210 	mvn.w	r2, #16
 8003eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2208      	movs	r2, #8
 8003ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f887 	bl	8004016 <HAL_TIM_IC_CaptureCallback>
 8003f08:	e005      	b.n	8003f16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f879 	bl	8004002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f88a 	bl	800402a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d10e      	bne.n	8003f48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d107      	bne.n	8003f48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f06f 0201 	mvn.w	r2, #1
 8003f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fc fdcc 	bl	8000ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f52:	2b80      	cmp	r3, #128	; 0x80
 8003f54:	d10e      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f60:	2b80      	cmp	r3, #128	; 0x80
 8003f62:	d107      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f914 	bl	800419c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f82:	d10e      	bne.n	8003fa2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8e:	2b80      	cmp	r3, #128	; 0x80
 8003f90:	d107      	bne.n	8003fa2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f907 	bl	80041b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b40      	cmp	r3, #64	; 0x40
 8003fae:	d10e      	bne.n	8003fce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fba:	2b40      	cmp	r3, #64	; 0x40
 8003fbc:	d107      	bne.n	8003fce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f838 	bl	800403e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d10e      	bne.n	8003ffa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b20      	cmp	r3, #32
 8003fe8:	d107      	bne.n	8003ffa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f06f 0220 	mvn.w	r2, #32
 8003ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f8c7 	bl	8004188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a40      	ldr	r2, [pc, #256]	; (8004168 <TIM_Base_SetConfig+0x114>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004072:	d00f      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a3d      	ldr	r2, [pc, #244]	; (800416c <TIM_Base_SetConfig+0x118>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00b      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a3c      	ldr	r2, [pc, #240]	; (8004170 <TIM_Base_SetConfig+0x11c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d007      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a3b      	ldr	r2, [pc, #236]	; (8004174 <TIM_Base_SetConfig+0x120>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a3a      	ldr	r2, [pc, #232]	; (8004178 <TIM_Base_SetConfig+0x124>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d108      	bne.n	80040a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a2f      	ldr	r2, [pc, #188]	; (8004168 <TIM_Base_SetConfig+0x114>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d01f      	beq.n	80040ee <TIM_Base_SetConfig+0x9a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b4:	d01b      	beq.n	80040ee <TIM_Base_SetConfig+0x9a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a2c      	ldr	r2, [pc, #176]	; (800416c <TIM_Base_SetConfig+0x118>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d017      	beq.n	80040ee <TIM_Base_SetConfig+0x9a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a2b      	ldr	r2, [pc, #172]	; (8004170 <TIM_Base_SetConfig+0x11c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <TIM_Base_SetConfig+0x9a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a2a      	ldr	r2, [pc, #168]	; (8004174 <TIM_Base_SetConfig+0x120>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00f      	beq.n	80040ee <TIM_Base_SetConfig+0x9a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a29      	ldr	r2, [pc, #164]	; (8004178 <TIM_Base_SetConfig+0x124>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00b      	beq.n	80040ee <TIM_Base_SetConfig+0x9a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a28      	ldr	r2, [pc, #160]	; (800417c <TIM_Base_SetConfig+0x128>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d007      	beq.n	80040ee <TIM_Base_SetConfig+0x9a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a27      	ldr	r2, [pc, #156]	; (8004180 <TIM_Base_SetConfig+0x12c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d003      	beq.n	80040ee <TIM_Base_SetConfig+0x9a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a26      	ldr	r2, [pc, #152]	; (8004184 <TIM_Base_SetConfig+0x130>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d108      	bne.n	8004100 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a10      	ldr	r2, [pc, #64]	; (8004168 <TIM_Base_SetConfig+0x114>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00f      	beq.n	800414c <TIM_Base_SetConfig+0xf8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a12      	ldr	r2, [pc, #72]	; (8004178 <TIM_Base_SetConfig+0x124>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00b      	beq.n	800414c <TIM_Base_SetConfig+0xf8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a11      	ldr	r2, [pc, #68]	; (800417c <TIM_Base_SetConfig+0x128>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d007      	beq.n	800414c <TIM_Base_SetConfig+0xf8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a10      	ldr	r2, [pc, #64]	; (8004180 <TIM_Base_SetConfig+0x12c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d003      	beq.n	800414c <TIM_Base_SetConfig+0xf8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a0f      	ldr	r2, [pc, #60]	; (8004184 <TIM_Base_SetConfig+0x130>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d103      	bne.n	8004154 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	615a      	str	r2, [r3, #20]
}
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40010000 	.word	0x40010000
 800416c:	40000400 	.word	0x40000400
 8004170:	40000800 	.word	0x40000800
 8004174:	40000c00 	.word	0x40000c00
 8004178:	40010400 	.word	0x40010400
 800417c:	40014000 	.word	0x40014000
 8004180:	40014400 	.word	0x40014400
 8004184:	40014800 	.word	0x40014800

08004188 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e042      	b.n	800425c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d106      	bne.n	80041ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7fc fdff 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2224      	movs	r2, #36	; 0x24
 80041f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0201 	bic.w	r2, r2, #1
 8004204:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f996 	bl	8004538 <UART_SetConfig>
 800420c:	4603      	mov	r3, r0
 800420e:	2b01      	cmp	r3, #1
 8004210:	d101      	bne.n	8004216 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e022      	b.n	800425c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 ffe8 	bl	80051f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f001 f86f 	bl	8005338 <UART_CheckIdleState>
 800425a:	4603      	mov	r3, r0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800427a:	2b20      	cmp	r3, #32
 800427c:	f040 8083 	bne.w	8004386 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_UART_Transmit+0x28>
 8004286:	88fb      	ldrh	r3, [r7, #6]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e07b      	b.n	8004388 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_UART_Transmit+0x3a>
 800429a:	2302      	movs	r3, #2
 800429c:	e074      	b.n	8004388 <HAL_UART_Transmit+0x124>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2221      	movs	r2, #33	; 0x21
 80042b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042b6:	f7fc fe81 	bl	8000fbc <HAL_GetTick>
 80042ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	88fa      	ldrh	r2, [r7, #6]
 80042c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	88fa      	ldrh	r2, [r7, #6]
 80042c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d4:	d108      	bne.n	80042e8 <HAL_UART_Transmit+0x84>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d104      	bne.n	80042e8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	e003      	b.n	80042f0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80042f8:	e02c      	b.n	8004354 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2200      	movs	r2, #0
 8004302:	2180      	movs	r1, #128	; 0x80
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f001 f862 	bl	80053ce <UART_WaitOnFlagUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e039      	b.n	8004388 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004328:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	3302      	adds	r3, #2
 800432e:	61bb      	str	r3, [r7, #24]
 8004330:	e007      	b.n	8004342 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	781a      	ldrb	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	3301      	adds	r3, #1
 8004340:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1cc      	bne.n	80042fa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2200      	movs	r2, #0
 8004368:	2140      	movs	r1, #64	; 0x40
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f001 f82f 	bl	80053ce <UART_WaitOnFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e006      	b.n	8004388 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	e000      	b.n	8004388 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004386:	2302      	movs	r3, #2
  }
}
 8004388:	4618      	mov	r0, r3
 800438a:	3720      	adds	r7, #32
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08a      	sub	sp, #40	; 0x28
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	4613      	mov	r3, r2
 800439e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a6:	2b20      	cmp	r3, #32
 80043a8:	f040 80c0 	bne.w	800452c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <HAL_UART_Receive+0x28>
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0b8      	b.n	800452e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_UART_Receive+0x3a>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e0b1      	b.n	800452e <HAL_UART_Receive+0x19e>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2222      	movs	r2, #34	; 0x22
 80043de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043e8:	f7fc fde8 	bl	8000fbc <HAL_GetTick>
 80043ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	88fa      	ldrh	r2, [r7, #6]
 80043f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	88fa      	ldrh	r2, [r7, #6]
 80043fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004406:	d10e      	bne.n	8004426 <HAL_UART_Receive+0x96>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d105      	bne.n	800441c <HAL_UART_Receive+0x8c>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004416:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800441a:	e02d      	b.n	8004478 <HAL_UART_Receive+0xe8>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	22ff      	movs	r2, #255	; 0xff
 8004420:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004424:	e028      	b.n	8004478 <HAL_UART_Receive+0xe8>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10d      	bne.n	800444a <HAL_UART_Receive+0xba>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d104      	bne.n	8004440 <HAL_UART_Receive+0xb0>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	22ff      	movs	r2, #255	; 0xff
 800443a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800443e:	e01b      	b.n	8004478 <HAL_UART_Receive+0xe8>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	227f      	movs	r2, #127	; 0x7f
 8004444:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004448:	e016      	b.n	8004478 <HAL_UART_Receive+0xe8>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004452:	d10d      	bne.n	8004470 <HAL_UART_Receive+0xe0>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d104      	bne.n	8004466 <HAL_UART_Receive+0xd6>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	227f      	movs	r2, #127	; 0x7f
 8004460:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004464:	e008      	b.n	8004478 <HAL_UART_Receive+0xe8>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	223f      	movs	r2, #63	; 0x3f
 800446a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800446e:	e003      	b.n	8004478 <HAL_UART_Receive+0xe8>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800447e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004488:	d108      	bne.n	800449c <HAL_UART_Receive+0x10c>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d104      	bne.n	800449c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8004492:	2300      	movs	r3, #0
 8004494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	61bb      	str	r3, [r7, #24]
 800449a:	e003      	b.n	80044a4 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80044ac:	e032      	b.n	8004514 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2200      	movs	r2, #0
 80044b6:	2120      	movs	r1, #32
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 ff88 	bl	80053ce <UART_WaitOnFlagUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e032      	b.n	800452e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10c      	bne.n	80044e8 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	8a7b      	ldrh	r3, [r7, #18]
 80044d8:	4013      	ands	r3, r2
 80044da:	b29a      	uxth	r2, r3
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	3302      	adds	r3, #2
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	e00c      	b.n	8004502 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	8a7b      	ldrh	r3, [r7, #18]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	4013      	ands	r3, r2
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	3301      	adds	r3, #1
 8004500:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1c6      	bne.n	80044ae <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	e000      	b.n	800452e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800452c:	2302      	movs	r3, #2
  }
}
 800452e:	4618      	mov	r0, r3
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004538:	b5b0      	push	{r4, r5, r7, lr}
 800453a:	b08e      	sub	sp, #56	; 0x38
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	4313      	orrs	r3, r2
 800455c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	4bbf      	ldr	r3, [pc, #764]	; (8004864 <UART_SetConfig+0x32c>)
 8004566:	4013      	ands	r3, r2
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6812      	ldr	r2, [r2, #0]
 800456c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800456e:	430b      	orrs	r3, r1
 8004570:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4ab5      	ldr	r2, [pc, #724]	; (8004868 <UART_SetConfig+0x330>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d004      	beq.n	80045a2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800459e:	4313      	orrs	r3, r2
 80045a0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	4bb0      	ldr	r3, [pc, #704]	; (800486c <UART_SetConfig+0x334>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6812      	ldr	r2, [r2, #0]
 80045b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80045b2:	430b      	orrs	r3, r1
 80045b4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	f023 010f 	bic.w	r1, r3, #15
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4aa7      	ldr	r2, [pc, #668]	; (8004870 <UART_SetConfig+0x338>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d176      	bne.n	80046c4 <UART_SetConfig+0x18c>
 80045d6:	4ba7      	ldr	r3, [pc, #668]	; (8004874 <UART_SetConfig+0x33c>)
 80045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045de:	2b28      	cmp	r3, #40	; 0x28
 80045e0:	d86c      	bhi.n	80046bc <UART_SetConfig+0x184>
 80045e2:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <UART_SetConfig+0xb0>)
 80045e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e8:	0800468d 	.word	0x0800468d
 80045ec:	080046bd 	.word	0x080046bd
 80045f0:	080046bd 	.word	0x080046bd
 80045f4:	080046bd 	.word	0x080046bd
 80045f8:	080046bd 	.word	0x080046bd
 80045fc:	080046bd 	.word	0x080046bd
 8004600:	080046bd 	.word	0x080046bd
 8004604:	080046bd 	.word	0x080046bd
 8004608:	08004695 	.word	0x08004695
 800460c:	080046bd 	.word	0x080046bd
 8004610:	080046bd 	.word	0x080046bd
 8004614:	080046bd 	.word	0x080046bd
 8004618:	080046bd 	.word	0x080046bd
 800461c:	080046bd 	.word	0x080046bd
 8004620:	080046bd 	.word	0x080046bd
 8004624:	080046bd 	.word	0x080046bd
 8004628:	0800469d 	.word	0x0800469d
 800462c:	080046bd 	.word	0x080046bd
 8004630:	080046bd 	.word	0x080046bd
 8004634:	080046bd 	.word	0x080046bd
 8004638:	080046bd 	.word	0x080046bd
 800463c:	080046bd 	.word	0x080046bd
 8004640:	080046bd 	.word	0x080046bd
 8004644:	080046bd 	.word	0x080046bd
 8004648:	080046a5 	.word	0x080046a5
 800464c:	080046bd 	.word	0x080046bd
 8004650:	080046bd 	.word	0x080046bd
 8004654:	080046bd 	.word	0x080046bd
 8004658:	080046bd 	.word	0x080046bd
 800465c:	080046bd 	.word	0x080046bd
 8004660:	080046bd 	.word	0x080046bd
 8004664:	080046bd 	.word	0x080046bd
 8004668:	080046ad 	.word	0x080046ad
 800466c:	080046bd 	.word	0x080046bd
 8004670:	080046bd 	.word	0x080046bd
 8004674:	080046bd 	.word	0x080046bd
 8004678:	080046bd 	.word	0x080046bd
 800467c:	080046bd 	.word	0x080046bd
 8004680:	080046bd 	.word	0x080046bd
 8004684:	080046bd 	.word	0x080046bd
 8004688:	080046b5 	.word	0x080046b5
 800468c:	2301      	movs	r3, #1
 800468e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004692:	e326      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004694:	2304      	movs	r3, #4
 8004696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800469a:	e322      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 800469c:	2308      	movs	r3, #8
 800469e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046a2:	e31e      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 80046a4:	2310      	movs	r3, #16
 80046a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046aa:	e31a      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 80046ac:	2320      	movs	r3, #32
 80046ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046b2:	e316      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 80046b4:	2340      	movs	r3, #64	; 0x40
 80046b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046ba:	e312      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 80046bc:	2380      	movs	r3, #128	; 0x80
 80046be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046c2:	e30e      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a6b      	ldr	r2, [pc, #428]	; (8004878 <UART_SetConfig+0x340>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d130      	bne.n	8004730 <UART_SetConfig+0x1f8>
 80046ce:	4b69      	ldr	r3, [pc, #420]	; (8004874 <UART_SetConfig+0x33c>)
 80046d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	2b05      	cmp	r3, #5
 80046d8:	d826      	bhi.n	8004728 <UART_SetConfig+0x1f0>
 80046da:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <UART_SetConfig+0x1a8>)
 80046dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e0:	080046f9 	.word	0x080046f9
 80046e4:	08004701 	.word	0x08004701
 80046e8:	08004709 	.word	0x08004709
 80046ec:	08004711 	.word	0x08004711
 80046f0:	08004719 	.word	0x08004719
 80046f4:	08004721 	.word	0x08004721
 80046f8:	2300      	movs	r3, #0
 80046fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046fe:	e2f0      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004700:	2304      	movs	r3, #4
 8004702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004706:	e2ec      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004708:	2308      	movs	r3, #8
 800470a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800470e:	e2e8      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004710:	2310      	movs	r3, #16
 8004712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004716:	e2e4      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004718:	2320      	movs	r3, #32
 800471a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800471e:	e2e0      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004720:	2340      	movs	r3, #64	; 0x40
 8004722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004726:	e2dc      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004728:	2380      	movs	r3, #128	; 0x80
 800472a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800472e:	e2d8      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a51      	ldr	r2, [pc, #324]	; (800487c <UART_SetConfig+0x344>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d130      	bne.n	800479c <UART_SetConfig+0x264>
 800473a:	4b4e      	ldr	r3, [pc, #312]	; (8004874 <UART_SetConfig+0x33c>)
 800473c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	2b05      	cmp	r3, #5
 8004744:	d826      	bhi.n	8004794 <UART_SetConfig+0x25c>
 8004746:	a201      	add	r2, pc, #4	; (adr r2, 800474c <UART_SetConfig+0x214>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	08004765 	.word	0x08004765
 8004750:	0800476d 	.word	0x0800476d
 8004754:	08004775 	.word	0x08004775
 8004758:	0800477d 	.word	0x0800477d
 800475c:	08004785 	.word	0x08004785
 8004760:	0800478d 	.word	0x0800478d
 8004764:	2300      	movs	r3, #0
 8004766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800476a:	e2ba      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 800476c:	2304      	movs	r3, #4
 800476e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004772:	e2b6      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004774:	2308      	movs	r3, #8
 8004776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800477a:	e2b2      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 800477c:	2310      	movs	r3, #16
 800477e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004782:	e2ae      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004784:	2320      	movs	r3, #32
 8004786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800478a:	e2aa      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 800478c:	2340      	movs	r3, #64	; 0x40
 800478e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004792:	e2a6      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004794:	2380      	movs	r3, #128	; 0x80
 8004796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800479a:	e2a2      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a37      	ldr	r2, [pc, #220]	; (8004880 <UART_SetConfig+0x348>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d130      	bne.n	8004808 <UART_SetConfig+0x2d0>
 80047a6:	4b33      	ldr	r3, [pc, #204]	; (8004874 <UART_SetConfig+0x33c>)
 80047a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	2b05      	cmp	r3, #5
 80047b0:	d826      	bhi.n	8004800 <UART_SetConfig+0x2c8>
 80047b2:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <UART_SetConfig+0x280>)
 80047b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b8:	080047d1 	.word	0x080047d1
 80047bc:	080047d9 	.word	0x080047d9
 80047c0:	080047e1 	.word	0x080047e1
 80047c4:	080047e9 	.word	0x080047e9
 80047c8:	080047f1 	.word	0x080047f1
 80047cc:	080047f9 	.word	0x080047f9
 80047d0:	2300      	movs	r3, #0
 80047d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047d6:	e284      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 80047d8:	2304      	movs	r3, #4
 80047da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047de:	e280      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 80047e0:	2308      	movs	r3, #8
 80047e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047e6:	e27c      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 80047e8:	2310      	movs	r3, #16
 80047ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ee:	e278      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 80047f0:	2320      	movs	r3, #32
 80047f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047f6:	e274      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 80047f8:	2340      	movs	r3, #64	; 0x40
 80047fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047fe:	e270      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004800:	2380      	movs	r3, #128	; 0x80
 8004802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004806:	e26c      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1d      	ldr	r2, [pc, #116]	; (8004884 <UART_SetConfig+0x34c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d142      	bne.n	8004898 <UART_SetConfig+0x360>
 8004812:	4b18      	ldr	r3, [pc, #96]	; (8004874 <UART_SetConfig+0x33c>)
 8004814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	2b05      	cmp	r3, #5
 800481c:	d838      	bhi.n	8004890 <UART_SetConfig+0x358>
 800481e:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <UART_SetConfig+0x2ec>)
 8004820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004824:	0800483d 	.word	0x0800483d
 8004828:	08004845 	.word	0x08004845
 800482c:	0800484d 	.word	0x0800484d
 8004830:	08004855 	.word	0x08004855
 8004834:	0800485d 	.word	0x0800485d
 8004838:	08004889 	.word	0x08004889
 800483c:	2300      	movs	r3, #0
 800483e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004842:	e24e      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004844:	2304      	movs	r3, #4
 8004846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800484a:	e24a      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 800484c:	2308      	movs	r3, #8
 800484e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004852:	e246      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004854:	2310      	movs	r3, #16
 8004856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800485a:	e242      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 800485c:	2320      	movs	r3, #32
 800485e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004862:	e23e      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004864:	cfff69f3 	.word	0xcfff69f3
 8004868:	58000c00 	.word	0x58000c00
 800486c:	11fff4ff 	.word	0x11fff4ff
 8004870:	40011000 	.word	0x40011000
 8004874:	58024400 	.word	0x58024400
 8004878:	40004400 	.word	0x40004400
 800487c:	40004800 	.word	0x40004800
 8004880:	40004c00 	.word	0x40004c00
 8004884:	40005000 	.word	0x40005000
 8004888:	2340      	movs	r3, #64	; 0x40
 800488a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800488e:	e228      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004890:	2380      	movs	r3, #128	; 0x80
 8004892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004896:	e224      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4ab1      	ldr	r2, [pc, #708]	; (8004b64 <UART_SetConfig+0x62c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d176      	bne.n	8004990 <UART_SetConfig+0x458>
 80048a2:	4bb1      	ldr	r3, [pc, #708]	; (8004b68 <UART_SetConfig+0x630>)
 80048a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048aa:	2b28      	cmp	r3, #40	; 0x28
 80048ac:	d86c      	bhi.n	8004988 <UART_SetConfig+0x450>
 80048ae:	a201      	add	r2, pc, #4	; (adr r2, 80048b4 <UART_SetConfig+0x37c>)
 80048b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b4:	08004959 	.word	0x08004959
 80048b8:	08004989 	.word	0x08004989
 80048bc:	08004989 	.word	0x08004989
 80048c0:	08004989 	.word	0x08004989
 80048c4:	08004989 	.word	0x08004989
 80048c8:	08004989 	.word	0x08004989
 80048cc:	08004989 	.word	0x08004989
 80048d0:	08004989 	.word	0x08004989
 80048d4:	08004961 	.word	0x08004961
 80048d8:	08004989 	.word	0x08004989
 80048dc:	08004989 	.word	0x08004989
 80048e0:	08004989 	.word	0x08004989
 80048e4:	08004989 	.word	0x08004989
 80048e8:	08004989 	.word	0x08004989
 80048ec:	08004989 	.word	0x08004989
 80048f0:	08004989 	.word	0x08004989
 80048f4:	08004969 	.word	0x08004969
 80048f8:	08004989 	.word	0x08004989
 80048fc:	08004989 	.word	0x08004989
 8004900:	08004989 	.word	0x08004989
 8004904:	08004989 	.word	0x08004989
 8004908:	08004989 	.word	0x08004989
 800490c:	08004989 	.word	0x08004989
 8004910:	08004989 	.word	0x08004989
 8004914:	08004971 	.word	0x08004971
 8004918:	08004989 	.word	0x08004989
 800491c:	08004989 	.word	0x08004989
 8004920:	08004989 	.word	0x08004989
 8004924:	08004989 	.word	0x08004989
 8004928:	08004989 	.word	0x08004989
 800492c:	08004989 	.word	0x08004989
 8004930:	08004989 	.word	0x08004989
 8004934:	08004979 	.word	0x08004979
 8004938:	08004989 	.word	0x08004989
 800493c:	08004989 	.word	0x08004989
 8004940:	08004989 	.word	0x08004989
 8004944:	08004989 	.word	0x08004989
 8004948:	08004989 	.word	0x08004989
 800494c:	08004989 	.word	0x08004989
 8004950:	08004989 	.word	0x08004989
 8004954:	08004981 	.word	0x08004981
 8004958:	2301      	movs	r3, #1
 800495a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800495e:	e1c0      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004960:	2304      	movs	r3, #4
 8004962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004966:	e1bc      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004968:	2308      	movs	r3, #8
 800496a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800496e:	e1b8      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004970:	2310      	movs	r3, #16
 8004972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004976:	e1b4      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004978:	2320      	movs	r3, #32
 800497a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800497e:	e1b0      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004980:	2340      	movs	r3, #64	; 0x40
 8004982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004986:	e1ac      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004988:	2380      	movs	r3, #128	; 0x80
 800498a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800498e:	e1a8      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a75      	ldr	r2, [pc, #468]	; (8004b6c <UART_SetConfig+0x634>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d130      	bne.n	80049fc <UART_SetConfig+0x4c4>
 800499a:	4b73      	ldr	r3, [pc, #460]	; (8004b68 <UART_SetConfig+0x630>)
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	2b05      	cmp	r3, #5
 80049a4:	d826      	bhi.n	80049f4 <UART_SetConfig+0x4bc>
 80049a6:	a201      	add	r2, pc, #4	; (adr r2, 80049ac <UART_SetConfig+0x474>)
 80049a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ac:	080049c5 	.word	0x080049c5
 80049b0:	080049cd 	.word	0x080049cd
 80049b4:	080049d5 	.word	0x080049d5
 80049b8:	080049dd 	.word	0x080049dd
 80049bc:	080049e5 	.word	0x080049e5
 80049c0:	080049ed 	.word	0x080049ed
 80049c4:	2300      	movs	r3, #0
 80049c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049ca:	e18a      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 80049cc:	2304      	movs	r3, #4
 80049ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049d2:	e186      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 80049d4:	2308      	movs	r3, #8
 80049d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049da:	e182      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 80049dc:	2310      	movs	r3, #16
 80049de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049e2:	e17e      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 80049e4:	2320      	movs	r3, #32
 80049e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049ea:	e17a      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 80049ec:	2340      	movs	r3, #64	; 0x40
 80049ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049f2:	e176      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 80049f4:	2380      	movs	r3, #128	; 0x80
 80049f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049fa:	e172      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a5b      	ldr	r2, [pc, #364]	; (8004b70 <UART_SetConfig+0x638>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d130      	bne.n	8004a68 <UART_SetConfig+0x530>
 8004a06:	4b58      	ldr	r3, [pc, #352]	; (8004b68 <UART_SetConfig+0x630>)
 8004a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	2b05      	cmp	r3, #5
 8004a10:	d826      	bhi.n	8004a60 <UART_SetConfig+0x528>
 8004a12:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <UART_SetConfig+0x4e0>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004a31 	.word	0x08004a31
 8004a1c:	08004a39 	.word	0x08004a39
 8004a20:	08004a41 	.word	0x08004a41
 8004a24:	08004a49 	.word	0x08004a49
 8004a28:	08004a51 	.word	0x08004a51
 8004a2c:	08004a59 	.word	0x08004a59
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a36:	e154      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004a38:	2304      	movs	r3, #4
 8004a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a3e:	e150      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004a40:	2308      	movs	r3, #8
 8004a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a46:	e14c      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004a48:	2310      	movs	r3, #16
 8004a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a4e:	e148      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004a50:	2320      	movs	r3, #32
 8004a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a56:	e144      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004a58:	2340      	movs	r3, #64	; 0x40
 8004a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a5e:	e140      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004a60:	2380      	movs	r3, #128	; 0x80
 8004a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a66:	e13c      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a41      	ldr	r2, [pc, #260]	; (8004b74 <UART_SetConfig+0x63c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	f040 8082 	bne.w	8004b78 <UART_SetConfig+0x640>
 8004a74:	4b3c      	ldr	r3, [pc, #240]	; (8004b68 <UART_SetConfig+0x630>)
 8004a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a7c:	2b28      	cmp	r3, #40	; 0x28
 8004a7e:	d86d      	bhi.n	8004b5c <UART_SetConfig+0x624>
 8004a80:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <UART_SetConfig+0x550>)
 8004a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a86:	bf00      	nop
 8004a88:	08004b2d 	.word	0x08004b2d
 8004a8c:	08004b5d 	.word	0x08004b5d
 8004a90:	08004b5d 	.word	0x08004b5d
 8004a94:	08004b5d 	.word	0x08004b5d
 8004a98:	08004b5d 	.word	0x08004b5d
 8004a9c:	08004b5d 	.word	0x08004b5d
 8004aa0:	08004b5d 	.word	0x08004b5d
 8004aa4:	08004b5d 	.word	0x08004b5d
 8004aa8:	08004b35 	.word	0x08004b35
 8004aac:	08004b5d 	.word	0x08004b5d
 8004ab0:	08004b5d 	.word	0x08004b5d
 8004ab4:	08004b5d 	.word	0x08004b5d
 8004ab8:	08004b5d 	.word	0x08004b5d
 8004abc:	08004b5d 	.word	0x08004b5d
 8004ac0:	08004b5d 	.word	0x08004b5d
 8004ac4:	08004b5d 	.word	0x08004b5d
 8004ac8:	08004b3d 	.word	0x08004b3d
 8004acc:	08004b5d 	.word	0x08004b5d
 8004ad0:	08004b5d 	.word	0x08004b5d
 8004ad4:	08004b5d 	.word	0x08004b5d
 8004ad8:	08004b5d 	.word	0x08004b5d
 8004adc:	08004b5d 	.word	0x08004b5d
 8004ae0:	08004b5d 	.word	0x08004b5d
 8004ae4:	08004b5d 	.word	0x08004b5d
 8004ae8:	08004b45 	.word	0x08004b45
 8004aec:	08004b5d 	.word	0x08004b5d
 8004af0:	08004b5d 	.word	0x08004b5d
 8004af4:	08004b5d 	.word	0x08004b5d
 8004af8:	08004b5d 	.word	0x08004b5d
 8004afc:	08004b5d 	.word	0x08004b5d
 8004b00:	08004b5d 	.word	0x08004b5d
 8004b04:	08004b5d 	.word	0x08004b5d
 8004b08:	08004b4d 	.word	0x08004b4d
 8004b0c:	08004b5d 	.word	0x08004b5d
 8004b10:	08004b5d 	.word	0x08004b5d
 8004b14:	08004b5d 	.word	0x08004b5d
 8004b18:	08004b5d 	.word	0x08004b5d
 8004b1c:	08004b5d 	.word	0x08004b5d
 8004b20:	08004b5d 	.word	0x08004b5d
 8004b24:	08004b5d 	.word	0x08004b5d
 8004b28:	08004b55 	.word	0x08004b55
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b32:	e0d6      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004b34:	2304      	movs	r3, #4
 8004b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b3a:	e0d2      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004b3c:	2308      	movs	r3, #8
 8004b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b42:	e0ce      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004b44:	2310      	movs	r3, #16
 8004b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b4a:	e0ca      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004b4c:	2320      	movs	r3, #32
 8004b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b52:	e0c6      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004b54:	2340      	movs	r3, #64	; 0x40
 8004b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b5a:	e0c2      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004b5c:	2380      	movs	r3, #128	; 0x80
 8004b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b62:	e0be      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004b64:	40011400 	.word	0x40011400
 8004b68:	58024400 	.word	0x58024400
 8004b6c:	40007800 	.word	0x40007800
 8004b70:	40007c00 	.word	0x40007c00
 8004b74:	40011800 	.word	0x40011800
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4aad      	ldr	r2, [pc, #692]	; (8004e34 <UART_SetConfig+0x8fc>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d176      	bne.n	8004c70 <UART_SetConfig+0x738>
 8004b82:	4bad      	ldr	r3, [pc, #692]	; (8004e38 <UART_SetConfig+0x900>)
 8004b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b8a:	2b28      	cmp	r3, #40	; 0x28
 8004b8c:	d86c      	bhi.n	8004c68 <UART_SetConfig+0x730>
 8004b8e:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <UART_SetConfig+0x65c>)
 8004b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b94:	08004c39 	.word	0x08004c39
 8004b98:	08004c69 	.word	0x08004c69
 8004b9c:	08004c69 	.word	0x08004c69
 8004ba0:	08004c69 	.word	0x08004c69
 8004ba4:	08004c69 	.word	0x08004c69
 8004ba8:	08004c69 	.word	0x08004c69
 8004bac:	08004c69 	.word	0x08004c69
 8004bb0:	08004c69 	.word	0x08004c69
 8004bb4:	08004c41 	.word	0x08004c41
 8004bb8:	08004c69 	.word	0x08004c69
 8004bbc:	08004c69 	.word	0x08004c69
 8004bc0:	08004c69 	.word	0x08004c69
 8004bc4:	08004c69 	.word	0x08004c69
 8004bc8:	08004c69 	.word	0x08004c69
 8004bcc:	08004c69 	.word	0x08004c69
 8004bd0:	08004c69 	.word	0x08004c69
 8004bd4:	08004c49 	.word	0x08004c49
 8004bd8:	08004c69 	.word	0x08004c69
 8004bdc:	08004c69 	.word	0x08004c69
 8004be0:	08004c69 	.word	0x08004c69
 8004be4:	08004c69 	.word	0x08004c69
 8004be8:	08004c69 	.word	0x08004c69
 8004bec:	08004c69 	.word	0x08004c69
 8004bf0:	08004c69 	.word	0x08004c69
 8004bf4:	08004c51 	.word	0x08004c51
 8004bf8:	08004c69 	.word	0x08004c69
 8004bfc:	08004c69 	.word	0x08004c69
 8004c00:	08004c69 	.word	0x08004c69
 8004c04:	08004c69 	.word	0x08004c69
 8004c08:	08004c69 	.word	0x08004c69
 8004c0c:	08004c69 	.word	0x08004c69
 8004c10:	08004c69 	.word	0x08004c69
 8004c14:	08004c59 	.word	0x08004c59
 8004c18:	08004c69 	.word	0x08004c69
 8004c1c:	08004c69 	.word	0x08004c69
 8004c20:	08004c69 	.word	0x08004c69
 8004c24:	08004c69 	.word	0x08004c69
 8004c28:	08004c69 	.word	0x08004c69
 8004c2c:	08004c69 	.word	0x08004c69
 8004c30:	08004c69 	.word	0x08004c69
 8004c34:	08004c61 	.word	0x08004c61
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c3e:	e050      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004c40:	2304      	movs	r3, #4
 8004c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c46:	e04c      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004c48:	2308      	movs	r3, #8
 8004c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c4e:	e048      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004c50:	2310      	movs	r3, #16
 8004c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c56:	e044      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004c58:	2320      	movs	r3, #32
 8004c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c5e:	e040      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004c60:	2340      	movs	r3, #64	; 0x40
 8004c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c66:	e03c      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004c68:	2380      	movs	r3, #128	; 0x80
 8004c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c6e:	e038      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a71      	ldr	r2, [pc, #452]	; (8004e3c <UART_SetConfig+0x904>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d130      	bne.n	8004cdc <UART_SetConfig+0x7a4>
 8004c7a:	4b6f      	ldr	r3, [pc, #444]	; (8004e38 <UART_SetConfig+0x900>)
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	2b05      	cmp	r3, #5
 8004c84:	d826      	bhi.n	8004cd4 <UART_SetConfig+0x79c>
 8004c86:	a201      	add	r2, pc, #4	; (adr r2, 8004c8c <UART_SetConfig+0x754>)
 8004c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8c:	08004ca5 	.word	0x08004ca5
 8004c90:	08004cad 	.word	0x08004cad
 8004c94:	08004cb5 	.word	0x08004cb5
 8004c98:	08004cbd 	.word	0x08004cbd
 8004c9c:	08004cc5 	.word	0x08004cc5
 8004ca0:	08004ccd 	.word	0x08004ccd
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004caa:	e01a      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004cac:	2304      	movs	r3, #4
 8004cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cb2:	e016      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004cb4:	2308      	movs	r3, #8
 8004cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cba:	e012      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004cbc:	2310      	movs	r3, #16
 8004cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cc2:	e00e      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004cc4:	2320      	movs	r3, #32
 8004cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cca:	e00a      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004ccc:	2340      	movs	r3, #64	; 0x40
 8004cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cd2:	e006      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004cd4:	2380      	movs	r3, #128	; 0x80
 8004cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cda:	e002      	b.n	8004ce2 <UART_SetConfig+0x7aa>
 8004cdc:	2380      	movs	r3, #128	; 0x80
 8004cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a55      	ldr	r2, [pc, #340]	; (8004e3c <UART_SetConfig+0x904>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	f040 80f0 	bne.w	8004ece <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	dc46      	bgt.n	8004d84 <UART_SetConfig+0x84c>
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	db75      	blt.n	8004de6 <UART_SetConfig+0x8ae>
 8004cfa:	3b02      	subs	r3, #2
 8004cfc:	2b1e      	cmp	r3, #30
 8004cfe:	d872      	bhi.n	8004de6 <UART_SetConfig+0x8ae>
 8004d00:	a201      	add	r2, pc, #4	; (adr r2, 8004d08 <UART_SetConfig+0x7d0>)
 8004d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d06:	bf00      	nop
 8004d08:	08004d8b 	.word	0x08004d8b
 8004d0c:	08004de7 	.word	0x08004de7
 8004d10:	08004d93 	.word	0x08004d93
 8004d14:	08004de7 	.word	0x08004de7
 8004d18:	08004de7 	.word	0x08004de7
 8004d1c:	08004de7 	.word	0x08004de7
 8004d20:	08004da3 	.word	0x08004da3
 8004d24:	08004de7 	.word	0x08004de7
 8004d28:	08004de7 	.word	0x08004de7
 8004d2c:	08004de7 	.word	0x08004de7
 8004d30:	08004de7 	.word	0x08004de7
 8004d34:	08004de7 	.word	0x08004de7
 8004d38:	08004de7 	.word	0x08004de7
 8004d3c:	08004de7 	.word	0x08004de7
 8004d40:	08004db3 	.word	0x08004db3
 8004d44:	08004de7 	.word	0x08004de7
 8004d48:	08004de7 	.word	0x08004de7
 8004d4c:	08004de7 	.word	0x08004de7
 8004d50:	08004de7 	.word	0x08004de7
 8004d54:	08004de7 	.word	0x08004de7
 8004d58:	08004de7 	.word	0x08004de7
 8004d5c:	08004de7 	.word	0x08004de7
 8004d60:	08004de7 	.word	0x08004de7
 8004d64:	08004de7 	.word	0x08004de7
 8004d68:	08004de7 	.word	0x08004de7
 8004d6c:	08004de7 	.word	0x08004de7
 8004d70:	08004de7 	.word	0x08004de7
 8004d74:	08004de7 	.word	0x08004de7
 8004d78:	08004de7 	.word	0x08004de7
 8004d7c:	08004de7 	.word	0x08004de7
 8004d80:	08004dd9 	.word	0x08004dd9
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	d02a      	beq.n	8004dde <UART_SetConfig+0x8a6>
 8004d88:	e02d      	b.n	8004de6 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004d8a:	f7fe fb1f 	bl	80033cc <HAL_RCCEx_GetD3PCLK1Freq>
 8004d8e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004d90:	e02f      	b.n	8004df2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d92:	f107 0314 	add.w	r3, r7, #20
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fe fb2e 	bl	80033f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004da0:	e027      	b.n	8004df2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004da2:	f107 0308 	add.w	r3, r7, #8
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe fc7a 	bl	80036a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004db0:	e01f      	b.n	8004df2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004db2:	4b21      	ldr	r3, [pc, #132]	; (8004e38 <UART_SetConfig+0x900>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d009      	beq.n	8004dd2 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004dbe:	4b1e      	ldr	r3, [pc, #120]	; (8004e38 <UART_SetConfig+0x900>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	08db      	lsrs	r3, r3, #3
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	4a1d      	ldr	r2, [pc, #116]	; (8004e40 <UART_SetConfig+0x908>)
 8004dca:	fa22 f303 	lsr.w	r3, r2, r3
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004dd0:	e00f      	b.n	8004df2 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8004dd2:	4b1b      	ldr	r3, [pc, #108]	; (8004e40 <UART_SetConfig+0x908>)
 8004dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004dd6:	e00c      	b.n	8004df2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004dd8:	4b1a      	ldr	r3, [pc, #104]	; (8004e44 <UART_SetConfig+0x90c>)
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ddc:	e009      	b.n	8004df2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004de2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004de4:	e005      	b.n	8004df2 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004df0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 81e6 	beq.w	80051c6 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	4a12      	ldr	r2, [pc, #72]	; (8004e48 <UART_SetConfig+0x910>)
 8004e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e04:	461a      	mov	r2, r3
 8004e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e0c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	4413      	add	r3, r2
 8004e18:	6a3a      	ldr	r2, [r7, #32]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d305      	bcc.n	8004e2a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e24:	6a3a      	ldr	r2, [r7, #32]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d910      	bls.n	8004e4c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004e30:	e1c9      	b.n	80051c6 <UART_SetConfig+0xc8e>
 8004e32:	bf00      	nop
 8004e34:	40011c00 	.word	0x40011c00
 8004e38:	58024400 	.word	0x58024400
 8004e3c:	58000c00 	.word	0x58000c00
 8004e40:	03d09000 	.word	0x03d09000
 8004e44:	003d0900 	.word	0x003d0900
 8004e48:	08008b78 	.word	0x08008b78
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f04f 0100 	mov.w	r1, #0
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	4ac1      	ldr	r2, [pc, #772]	; (8005160 <UART_SetConfig+0xc28>)
 8004e5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	f7fb fa44 	bl	80002f0 <__aeabi_uldivmod>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	4619      	mov	r1, r3
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	020b      	lsls	r3, r1, #8
 8004e7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e7e:	0202      	lsls	r2, r0, #8
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	6849      	ldr	r1, [r1, #4]
 8004e84:	0849      	lsrs	r1, r1, #1
 8004e86:	4608      	mov	r0, r1
 8004e88:	f04f 0100 	mov.w	r1, #0
 8004e8c:	1814      	adds	r4, r2, r0
 8004e8e:	eb43 0501 	adc.w	r5, r3, r1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	461a      	mov	r2, r3
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	f7fb fa26 	bl	80002f0 <__aeabi_uldivmod>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eb2:	d308      	bcc.n	8004ec6 <UART_SetConfig+0x98e>
 8004eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eba:	d204      	bcs.n	8004ec6 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ec2:	60da      	str	r2, [r3, #12]
 8004ec4:	e17f      	b.n	80051c6 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004ecc:	e17b      	b.n	80051c6 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed6:	f040 80bd 	bne.w	8005054 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8004eda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ede:	2b20      	cmp	r3, #32
 8004ee0:	dc48      	bgt.n	8004f74 <UART_SetConfig+0xa3c>
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	db7b      	blt.n	8004fde <UART_SetConfig+0xaa6>
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	d879      	bhi.n	8004fde <UART_SetConfig+0xaa6>
 8004eea:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <UART_SetConfig+0x9b8>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f7b 	.word	0x08004f7b
 8004ef4:	08004f83 	.word	0x08004f83
 8004ef8:	08004fdf 	.word	0x08004fdf
 8004efc:	08004fdf 	.word	0x08004fdf
 8004f00:	08004f8b 	.word	0x08004f8b
 8004f04:	08004fdf 	.word	0x08004fdf
 8004f08:	08004fdf 	.word	0x08004fdf
 8004f0c:	08004fdf 	.word	0x08004fdf
 8004f10:	08004f9b 	.word	0x08004f9b
 8004f14:	08004fdf 	.word	0x08004fdf
 8004f18:	08004fdf 	.word	0x08004fdf
 8004f1c:	08004fdf 	.word	0x08004fdf
 8004f20:	08004fdf 	.word	0x08004fdf
 8004f24:	08004fdf 	.word	0x08004fdf
 8004f28:	08004fdf 	.word	0x08004fdf
 8004f2c:	08004fdf 	.word	0x08004fdf
 8004f30:	08004fab 	.word	0x08004fab
 8004f34:	08004fdf 	.word	0x08004fdf
 8004f38:	08004fdf 	.word	0x08004fdf
 8004f3c:	08004fdf 	.word	0x08004fdf
 8004f40:	08004fdf 	.word	0x08004fdf
 8004f44:	08004fdf 	.word	0x08004fdf
 8004f48:	08004fdf 	.word	0x08004fdf
 8004f4c:	08004fdf 	.word	0x08004fdf
 8004f50:	08004fdf 	.word	0x08004fdf
 8004f54:	08004fdf 	.word	0x08004fdf
 8004f58:	08004fdf 	.word	0x08004fdf
 8004f5c:	08004fdf 	.word	0x08004fdf
 8004f60:	08004fdf 	.word	0x08004fdf
 8004f64:	08004fdf 	.word	0x08004fdf
 8004f68:	08004fdf 	.word	0x08004fdf
 8004f6c:	08004fdf 	.word	0x08004fdf
 8004f70:	08004fd1 	.word	0x08004fd1
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	d02e      	beq.n	8004fd6 <UART_SetConfig+0xa9e>
 8004f78:	e031      	b.n	8004fde <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f7a:	f7fd faad 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 8004f7e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004f80:	e033      	b.n	8004fea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f82:	f7fd fabf 	bl	8002504 <HAL_RCC_GetPCLK2Freq>
 8004f86:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004f88:	e02f      	b.n	8004fea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f8a:	f107 0314 	add.w	r3, r7, #20
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fe fa32 	bl	80033f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f98:	e027      	b.n	8004fea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f9a:	f107 0308 	add.w	r3, r7, #8
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fe fb7e 	bl	80036a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fa8:	e01f      	b.n	8004fea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004faa:	4b6e      	ldr	r3, [pc, #440]	; (8005164 <UART_SetConfig+0xc2c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d009      	beq.n	8004fca <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004fb6:	4b6b      	ldr	r3, [pc, #428]	; (8005164 <UART_SetConfig+0xc2c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	08db      	lsrs	r3, r3, #3
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	4a69      	ldr	r2, [pc, #420]	; (8005168 <UART_SetConfig+0xc30>)
 8004fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004fc8:	e00f      	b.n	8004fea <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8004fca:	4b67      	ldr	r3, [pc, #412]	; (8005168 <UART_SetConfig+0xc30>)
 8004fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fce:	e00c      	b.n	8004fea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004fd0:	4b66      	ldr	r3, [pc, #408]	; (800516c <UART_SetConfig+0xc34>)
 8004fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fd4:	e009      	b.n	8004fea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fdc:	e005      	b.n	8004fea <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004fe8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 80ea 	beq.w	80051c6 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	4a5a      	ldr	r2, [pc, #360]	; (8005160 <UART_SetConfig+0xc28>)
 8004ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	fbb3 f3f2 	udiv	r3, r3, r2
 8005004:	005a      	lsls	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	085b      	lsrs	r3, r3, #1
 800500c:	441a      	add	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	fbb2 f3f3 	udiv	r3, r2, r3
 8005016:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	2b0f      	cmp	r3, #15
 800501c:	d916      	bls.n	800504c <UART_SetConfig+0xb14>
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005024:	d212      	bcs.n	800504c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005028:	b29b      	uxth	r3, r3
 800502a:	f023 030f 	bic.w	r3, r3, #15
 800502e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	085b      	lsrs	r3, r3, #1
 8005034:	b29b      	uxth	r3, r3
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	b29a      	uxth	r2, r3
 800503c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800503e:	4313      	orrs	r3, r2
 8005040:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005048:	60da      	str	r2, [r3, #12]
 800504a:	e0bc      	b.n	80051c6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005052:	e0b8      	b.n	80051c6 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005054:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005058:	2b20      	cmp	r3, #32
 800505a:	dc4b      	bgt.n	80050f4 <UART_SetConfig+0xbbc>
 800505c:	2b00      	cmp	r3, #0
 800505e:	f2c0 8087 	blt.w	8005170 <UART_SetConfig+0xc38>
 8005062:	2b20      	cmp	r3, #32
 8005064:	f200 8084 	bhi.w	8005170 <UART_SetConfig+0xc38>
 8005068:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <UART_SetConfig+0xb38>)
 800506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506e:	bf00      	nop
 8005070:	080050fb 	.word	0x080050fb
 8005074:	08005103 	.word	0x08005103
 8005078:	08005171 	.word	0x08005171
 800507c:	08005171 	.word	0x08005171
 8005080:	0800510b 	.word	0x0800510b
 8005084:	08005171 	.word	0x08005171
 8005088:	08005171 	.word	0x08005171
 800508c:	08005171 	.word	0x08005171
 8005090:	0800511b 	.word	0x0800511b
 8005094:	08005171 	.word	0x08005171
 8005098:	08005171 	.word	0x08005171
 800509c:	08005171 	.word	0x08005171
 80050a0:	08005171 	.word	0x08005171
 80050a4:	08005171 	.word	0x08005171
 80050a8:	08005171 	.word	0x08005171
 80050ac:	08005171 	.word	0x08005171
 80050b0:	0800512b 	.word	0x0800512b
 80050b4:	08005171 	.word	0x08005171
 80050b8:	08005171 	.word	0x08005171
 80050bc:	08005171 	.word	0x08005171
 80050c0:	08005171 	.word	0x08005171
 80050c4:	08005171 	.word	0x08005171
 80050c8:	08005171 	.word	0x08005171
 80050cc:	08005171 	.word	0x08005171
 80050d0:	08005171 	.word	0x08005171
 80050d4:	08005171 	.word	0x08005171
 80050d8:	08005171 	.word	0x08005171
 80050dc:	08005171 	.word	0x08005171
 80050e0:	08005171 	.word	0x08005171
 80050e4:	08005171 	.word	0x08005171
 80050e8:	08005171 	.word	0x08005171
 80050ec:	08005171 	.word	0x08005171
 80050f0:	08005151 	.word	0x08005151
 80050f4:	2b40      	cmp	r3, #64	; 0x40
 80050f6:	d02e      	beq.n	8005156 <UART_SetConfig+0xc1e>
 80050f8:	e03a      	b.n	8005170 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050fa:	f7fd f9ed 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 80050fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005100:	e03c      	b.n	800517c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005102:	f7fd f9ff 	bl	8002504 <HAL_RCC_GetPCLK2Freq>
 8005106:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005108:	e038      	b.n	800517c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800510a:	f107 0314 	add.w	r3, r7, #20
 800510e:	4618      	mov	r0, r3
 8005110:	f7fe f972 	bl	80033f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005118:	e030      	b.n	800517c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800511a:	f107 0308 	add.w	r3, r7, #8
 800511e:	4618      	mov	r0, r3
 8005120:	f7fe fabe 	bl	80036a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005128:	e028      	b.n	800517c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800512a:	4b0e      	ldr	r3, [pc, #56]	; (8005164 <UART_SetConfig+0xc2c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b00      	cmp	r3, #0
 8005134:	d009      	beq.n	800514a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005136:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <UART_SetConfig+0xc2c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	08db      	lsrs	r3, r3, #3
 800513c:	f003 0303 	and.w	r3, r3, #3
 8005140:	4a09      	ldr	r2, [pc, #36]	; (8005168 <UART_SetConfig+0xc30>)
 8005142:	fa22 f303 	lsr.w	r3, r2, r3
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005148:	e018      	b.n	800517c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800514a:	4b07      	ldr	r3, [pc, #28]	; (8005168 <UART_SetConfig+0xc30>)
 800514c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800514e:	e015      	b.n	800517c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005150:	4b06      	ldr	r3, [pc, #24]	; (800516c <UART_SetConfig+0xc34>)
 8005152:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005154:	e012      	b.n	800517c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800515c:	e00e      	b.n	800517c <UART_SetConfig+0xc44>
 800515e:	bf00      	nop
 8005160:	08008b78 	.word	0x08008b78
 8005164:	58024400 	.word	0x58024400
 8005168:	03d09000 	.word	0x03d09000
 800516c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800517a:	bf00      	nop
    }

    if (pclk != 0U)
 800517c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d021      	beq.n	80051c6 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	4a1a      	ldr	r2, [pc, #104]	; (80051f0 <UART_SetConfig+0xcb8>)
 8005188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800518c:	461a      	mov	r2, r3
 800518e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005190:	fbb3 f2f2 	udiv	r2, r3, r2
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	441a      	add	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	2b0f      	cmp	r3, #15
 80051aa:	d909      	bls.n	80051c0 <UART_SetConfig+0xc88>
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b2:	d205      	bcs.n	80051c0 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60da      	str	r2, [r3, #12]
 80051be:	e002      	b.n	80051c6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80051e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3738      	adds	r7, #56	; 0x38
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bdb0      	pop	{r4, r5, r7, pc}
 80051ee:	bf00      	nop
 80051f0:	08008b78 	.word	0x08008b78

080051f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00a      	beq.n	80052a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01a      	beq.n	800530a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052f2:	d10a      	bne.n	800530a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	605a      	str	r2, [r3, #4]
  }
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af02      	add	r7, sp, #8
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005348:	f7fb fe38 	bl	8000fbc <HAL_GetTick>
 800534c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b08      	cmp	r3, #8
 800535a:	d10e      	bne.n	800537a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800535c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f82f 	bl	80053ce <UART_WaitOnFlagUntilTimeout>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e025      	b.n	80053c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b04      	cmp	r3, #4
 8005386:	d10e      	bne.n	80053a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005388:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f819 	bl	80053ce <UART_WaitOnFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e00f      	b.n	80053c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b09c      	sub	sp, #112	; 0x70
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	603b      	str	r3, [r7, #0]
 80053da:	4613      	mov	r3, r2
 80053dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053de:	e0a9      	b.n	8005534 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053e6:	f000 80a5 	beq.w	8005534 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ea:	f7fb fde7 	bl	8000fbc <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d302      	bcc.n	8005400 <UART_WaitOnFlagUntilTimeout+0x32>
 80053fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d140      	bne.n	8005482 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800540e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005410:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005414:	667b      	str	r3, [r7, #100]	; 0x64
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800541e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005420:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005424:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800542c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1e6      	bne.n	8005400 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3308      	adds	r3, #8
 8005438:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543c:	e853 3f00 	ldrex	r3, [r3]
 8005440:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	f023 0301 	bic.w	r3, r3, #1
 8005448:	663b      	str	r3, [r7, #96]	; 0x60
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3308      	adds	r3, #8
 8005450:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005452:	64ba      	str	r2, [r7, #72]	; 0x48
 8005454:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005456:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800545a:	e841 2300 	strex	r3, r2, [r1]
 800545e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1e5      	bne.n	8005432 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2220      	movs	r2, #32
 800546a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e069      	b.n	8005556 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	d051      	beq.n	8005534 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800549a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800549e:	d149      	bne.n	8005534 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e6      	bne.n	80054aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3308      	adds	r3, #8
 80054e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	613b      	str	r3, [r7, #16]
   return(result);
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f023 0301 	bic.w	r3, r3, #1
 80054f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3308      	adds	r3, #8
 80054fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054fc:	623a      	str	r2, [r7, #32]
 80054fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	69f9      	ldr	r1, [r7, #28]
 8005502:	6a3a      	ldr	r2, [r7, #32]
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	61bb      	str	r3, [r7, #24]
   return(result);
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e5      	bne.n	80054dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2220      	movs	r2, #32
 800551c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2220      	movs	r2, #32
 8005524:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e010      	b.n	8005556 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	69da      	ldr	r2, [r3, #28]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	4013      	ands	r3, r2
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	429a      	cmp	r2, r3
 8005542:	bf0c      	ite	eq
 8005544:	2301      	moveq	r3, #1
 8005546:	2300      	movne	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	461a      	mov	r2, r3
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	429a      	cmp	r2, r3
 8005550:	f43f af46 	beq.w	80053e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3770      	adds	r7, #112	; 0x70
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800555e:	b480      	push	{r7}
 8005560:	b085      	sub	sp, #20
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_UARTEx_DisableFifoMode+0x16>
 8005570:	2302      	movs	r3, #2
 8005572:	e027      	b.n	80055c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2224      	movs	r2, #36	; 0x24
 8005580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0201 	bic.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80055a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e02d      	b.n	8005644 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2224      	movs	r2, #36	; 0x24
 80055f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0201 	bic.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f84f 	bl	80056c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2220      	movs	r2, #32
 8005636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005660:	2302      	movs	r3, #2
 8005662:	e02d      	b.n	80056c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2224      	movs	r2, #36	; 0x24
 8005670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f811 	bl	80056c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d108      	bne.n	80056ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056e8:	e031      	b.n	800574e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056ea:	2310      	movs	r3, #16
 80056ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056ee:	2310      	movs	r3, #16
 80056f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	0e5b      	lsrs	r3, r3, #25
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	0f5b      	lsrs	r3, r3, #29
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005712:	7bbb      	ldrb	r3, [r7, #14]
 8005714:	7b3a      	ldrb	r2, [r7, #12]
 8005716:	4911      	ldr	r1, [pc, #68]	; (800575c <UARTEx_SetNbDataToProcess+0x94>)
 8005718:	5c8a      	ldrb	r2, [r1, r2]
 800571a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800571e:	7b3a      	ldrb	r2, [r7, #12]
 8005720:	490f      	ldr	r1, [pc, #60]	; (8005760 <UARTEx_SetNbDataToProcess+0x98>)
 8005722:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005724:	fb93 f3f2 	sdiv	r3, r3, r2
 8005728:	b29a      	uxth	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	7b7a      	ldrb	r2, [r7, #13]
 8005734:	4909      	ldr	r1, [pc, #36]	; (800575c <UARTEx_SetNbDataToProcess+0x94>)
 8005736:	5c8a      	ldrb	r2, [r1, r2]
 8005738:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800573c:	7b7a      	ldrb	r2, [r7, #13]
 800573e:	4908      	ldr	r1, [pc, #32]	; (8005760 <UARTEx_SetNbDataToProcess+0x98>)
 8005740:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005742:	fb93 f3f2 	sdiv	r3, r3, r2
 8005746:	b29a      	uxth	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800574e:	bf00      	nop
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	08008b90 	.word	0x08008b90
 8005760:	08008b98 	.word	0x08008b98

08005764 <__NVIC_SetPriority>:
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	6039      	str	r1, [r7, #0]
 800576e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005774:	2b00      	cmp	r3, #0
 8005776:	db0a      	blt.n	800578e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	b2da      	uxtb	r2, r3
 800577c:	490c      	ldr	r1, [pc, #48]	; (80057b0 <__NVIC_SetPriority+0x4c>)
 800577e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005782:	0112      	lsls	r2, r2, #4
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	440b      	add	r3, r1
 8005788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800578c:	e00a      	b.n	80057a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	4908      	ldr	r1, [pc, #32]	; (80057b4 <__NVIC_SetPriority+0x50>)
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	3b04      	subs	r3, #4
 800579c:	0112      	lsls	r2, r2, #4
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	440b      	add	r3, r1
 80057a2:	761a      	strb	r2, [r3, #24]
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	e000e100 	.word	0xe000e100
 80057b4:	e000ed00 	.word	0xe000ed00

080057b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <SysTick_Handler+0x1c>)
 80057be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80057c0:	f001 ff12 	bl	80075e8 <xTaskGetSchedulerState>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d001      	beq.n	80057ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80057ca:	f002 fcfd 	bl	80081c8 <xPortSysTickHandler>
  }
}
 80057ce:	bf00      	nop
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	e000e010 	.word	0xe000e010

080057d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80057dc:	2100      	movs	r1, #0
 80057de:	f06f 0004 	mvn.w	r0, #4
 80057e2:	f7ff ffbf 	bl	8005764 <__NVIC_SetPriority>
#endif
}
 80057e6:	bf00      	nop
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057f2:	f3ef 8305 	mrs	r3, IPSR
 80057f6:	603b      	str	r3, [r7, #0]
  return(result);
 80057f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80057fe:	f06f 0305 	mvn.w	r3, #5
 8005802:	607b      	str	r3, [r7, #4]
 8005804:	e00c      	b.n	8005820 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005806:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <osKernelInitialize+0x44>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d105      	bne.n	800581a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800580e:	4b08      	ldr	r3, [pc, #32]	; (8005830 <osKernelInitialize+0x44>)
 8005810:	2201      	movs	r2, #1
 8005812:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005814:	2300      	movs	r3, #0
 8005816:	607b      	str	r3, [r7, #4]
 8005818:	e002      	b.n	8005820 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800581a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800581e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005820:	687b      	ldr	r3, [r7, #4]
}
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	24000094 	.word	0x24000094

08005834 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800583a:	f3ef 8305 	mrs	r3, IPSR
 800583e:	603b      	str	r3, [r7, #0]
  return(result);
 8005840:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005846:	f06f 0305 	mvn.w	r3, #5
 800584a:	607b      	str	r3, [r7, #4]
 800584c:	e010      	b.n	8005870 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800584e:	4b0b      	ldr	r3, [pc, #44]	; (800587c <osKernelStart+0x48>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d109      	bne.n	800586a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005856:	f7ff ffbf 	bl	80057d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800585a:	4b08      	ldr	r3, [pc, #32]	; (800587c <osKernelStart+0x48>)
 800585c:	2202      	movs	r2, #2
 800585e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005860:	f001 fa66 	bl	8006d30 <vTaskStartScheduler>
      stat = osOK;
 8005864:	2300      	movs	r3, #0
 8005866:	607b      	str	r3, [r7, #4]
 8005868:	e002      	b.n	8005870 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800586a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800586e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005870:	687b      	ldr	r3, [r7, #4]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	24000094 	.word	0x24000094

08005880 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005880:	b580      	push	{r7, lr}
 8005882:	b08e      	sub	sp, #56	; 0x38
 8005884:	af04      	add	r7, sp, #16
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800588c:	2300      	movs	r3, #0
 800588e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005890:	f3ef 8305 	mrs	r3, IPSR
 8005894:	617b      	str	r3, [r7, #20]
  return(result);
 8005896:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005898:	2b00      	cmp	r3, #0
 800589a:	d17e      	bne.n	800599a <osThreadNew+0x11a>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d07b      	beq.n	800599a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80058a2:	2380      	movs	r3, #128	; 0x80
 80058a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80058a6:	2318      	movs	r3, #24
 80058a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80058ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d045      	beq.n	8005946 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <osThreadNew+0x48>
        name = attr->name;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d008      	beq.n	80058ee <osThreadNew+0x6e>
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	2b38      	cmp	r3, #56	; 0x38
 80058e0:	d805      	bhi.n	80058ee <osThreadNew+0x6e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <osThreadNew+0x72>
        return (NULL);
 80058ee:	2300      	movs	r3, #0
 80058f0:	e054      	b.n	800599c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	089b      	lsrs	r3, r3, #2
 8005900:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00e      	beq.n	8005928 <osThreadNew+0xa8>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	2bbb      	cmp	r3, #187	; 0xbb
 8005910:	d90a      	bls.n	8005928 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005916:	2b00      	cmp	r3, #0
 8005918:	d006      	beq.n	8005928 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <osThreadNew+0xa8>
        mem = 1;
 8005922:	2301      	movs	r3, #1
 8005924:	61bb      	str	r3, [r7, #24]
 8005926:	e010      	b.n	800594a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10c      	bne.n	800594a <osThreadNew+0xca>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d108      	bne.n	800594a <osThreadNew+0xca>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d104      	bne.n	800594a <osThreadNew+0xca>
          mem = 0;
 8005940:	2300      	movs	r3, #0
 8005942:	61bb      	str	r3, [r7, #24]
 8005944:	e001      	b.n	800594a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005946:	2300      	movs	r3, #0
 8005948:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d110      	bne.n	8005972 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005958:	9202      	str	r2, [sp, #8]
 800595a:	9301      	str	r3, [sp, #4]
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	6a3a      	ldr	r2, [r7, #32]
 8005964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 fff6 	bl	8006958 <xTaskCreateStatic>
 800596c:	4603      	mov	r3, r0
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	e013      	b.n	800599a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d110      	bne.n	800599a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	b29a      	uxth	r2, r3
 800597c:	f107 0310 	add.w	r3, r7, #16
 8005980:	9301      	str	r3, [sp, #4]
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f001 f841 	bl	8006a12 <xTaskCreate>
 8005990:	4603      	mov	r3, r0
 8005992:	2b01      	cmp	r3, #1
 8005994:	d001      	beq.n	800599a <osThreadNew+0x11a>
            hTask = NULL;
 8005996:	2300      	movs	r3, #0
 8005998:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800599a:	693b      	ldr	r3, [r7, #16]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3728      	adds	r7, #40	; 0x28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059ac:	f3ef 8305 	mrs	r3, IPSR
 80059b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80059b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <osDelay+0x1c>
    stat = osErrorISR;
 80059b8:	f06f 0305 	mvn.w	r3, #5
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	e007      	b.n	80059d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f001 f97c 	bl	8006cc8 <vTaskDelay>
    }
  }

  return (stat);
 80059d0:	68fb      	ldr	r3, [r7, #12]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80059da:	b580      	push	{r7, lr}
 80059dc:	b08a      	sub	sp, #40	; 0x28
 80059de:	af02      	add	r7, sp, #8
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059ea:	f3ef 8305 	mrs	r3, IPSR
 80059ee:	613b      	str	r3, [r7, #16]
  return(result);
 80059f0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d15f      	bne.n	8005ab6 <osMessageQueueNew+0xdc>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d05c      	beq.n	8005ab6 <osMessageQueueNew+0xdc>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d059      	beq.n	8005ab6 <osMessageQueueNew+0xdc>
    mem = -1;
 8005a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d029      	beq.n	8005a62 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d012      	beq.n	8005a3c <osMessageQueueNew+0x62>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	2b4f      	cmp	r3, #79	; 0x4f
 8005a1c:	d90e      	bls.n	8005a3c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695a      	ldr	r2, [r3, #20]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	fb01 f303 	mul.w	r3, r1, r3
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d302      	bcc.n	8005a3c <osMessageQueueNew+0x62>
        mem = 1;
 8005a36:	2301      	movs	r3, #1
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	e014      	b.n	8005a66 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d110      	bne.n	8005a66 <osMessageQueueNew+0x8c>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10c      	bne.n	8005a66 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d108      	bne.n	8005a66 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <osMessageQueueNew+0x8c>
          mem = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61bb      	str	r3, [r7, #24]
 8005a60:	e001      	b.n	8005a66 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d10b      	bne.n	8005a84 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	2100      	movs	r1, #0
 8005a76:	9100      	str	r1, [sp, #0]
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 fa2e 	bl	8005edc <xQueueGenericCreateStatic>
 8005a80:	61f8      	str	r0, [r7, #28]
 8005a82:	e008      	b.n	8005a96 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d105      	bne.n	8005a96 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 fa9c 	bl	8005fcc <xQueueGenericCreate>
 8005a94:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00c      	beq.n	8005ab6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <osMessageQueueNew+0xd0>
        name = attr->name;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	e001      	b.n	8005aae <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005aae:	6979      	ldr	r1, [r7, #20]
 8005ab0:	69f8      	ldr	r0, [r7, #28]
 8005ab2:	f000 fef3 	bl	800689c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005ab6:	69fb      	ldr	r3, [r7, #28]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3720      	adds	r7, #32
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	4613      	mov	r3, r2
 8005ace:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ad8:	f3ef 8305 	mrs	r3, IPSR
 8005adc:	617b      	str	r3, [r7, #20]
  return(result);
 8005ade:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d028      	beq.n	8005b36 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <osMessageQueuePut+0x36>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <osMessageQueuePut+0x36>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005af6:	f06f 0303 	mvn.w	r3, #3
 8005afa:	61fb      	str	r3, [r7, #28]
 8005afc:	e038      	b.n	8005b70 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005afe:	2300      	movs	r3, #0
 8005b00:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005b02:	f107 0210 	add.w	r2, r7, #16
 8005b06:	2300      	movs	r3, #0
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	69b8      	ldr	r0, [r7, #24]
 8005b0c:	f000 fbba 	bl	8006284 <xQueueGenericSendFromISR>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d003      	beq.n	8005b1e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005b16:	f06f 0302 	mvn.w	r3, #2
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	e028      	b.n	8005b70 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d025      	beq.n	8005b70 <osMessageQueuePut+0xb0>
 8005b24:	4b15      	ldr	r3, [pc, #84]	; (8005b7c <osMessageQueuePut+0xbc>)
 8005b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	e01c      	b.n	8005b70 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <osMessageQueuePut+0x82>
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d103      	bne.n	8005b4a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005b42:	f06f 0303 	mvn.w	r3, #3
 8005b46:	61fb      	str	r3, [r7, #28]
 8005b48:	e012      	b.n	8005b70 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	69b8      	ldr	r0, [r7, #24]
 8005b52:	f000 fa99 	bl	8006088 <xQueueGenericSend>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d009      	beq.n	8005b70 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005b62:	f06f 0301 	mvn.w	r3, #1
 8005b66:	61fb      	str	r3, [r7, #28]
 8005b68:	e002      	b.n	8005b70 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005b6a:	f06f 0302 	mvn.w	r3, #2
 8005b6e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005b70:	69fb      	ldr	r3, [r7, #28]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3720      	adds	r7, #32
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	e000ed04 	.word	0xe000ed04

08005b80 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b96:	f3ef 8305 	mrs	r3, IPSR
 8005b9a:	617b      	str	r3, [r7, #20]
  return(result);
 8005b9c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d028      	beq.n	8005bf4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d005      	beq.n	8005bb4 <osMessageQueueGet+0x34>
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <osMessageQueueGet+0x34>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005bb4:	f06f 0303 	mvn.w	r3, #3
 8005bb8:	61fb      	str	r3, [r7, #28]
 8005bba:	e037      	b.n	8005c2c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005bc0:	f107 0310 	add.w	r3, r7, #16
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	69b8      	ldr	r0, [r7, #24]
 8005bca:	f000 fcd7 	bl	800657c <xQueueReceiveFromISR>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d003      	beq.n	8005bdc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005bd4:	f06f 0302 	mvn.w	r3, #2
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	e027      	b.n	8005c2c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d024      	beq.n	8005c2c <osMessageQueueGet+0xac>
 8005be2:	4b15      	ldr	r3, [pc, #84]	; (8005c38 <osMessageQueueGet+0xb8>)
 8005be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	e01b      	b.n	8005c2c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <osMessageQueueGet+0x80>
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d103      	bne.n	8005c08 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005c00:	f06f 0303 	mvn.w	r3, #3
 8005c04:	61fb      	str	r3, [r7, #28]
 8005c06:	e011      	b.n	8005c2c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	69b8      	ldr	r0, [r7, #24]
 8005c0e:	f000 fbd5 	bl	80063bc <xQueueReceive>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d009      	beq.n	8005c2c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005c1e:	f06f 0301 	mvn.w	r3, #1
 8005c22:	61fb      	str	r3, [r7, #28]
 8005c24:	e002      	b.n	8005c2c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005c26:	f06f 0302 	mvn.w	r3, #2
 8005c2a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005c2c:	69fb      	ldr	r3, [r7, #28]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3720      	adds	r7, #32
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	e000ed04 	.word	0xe000ed04

08005c3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4a07      	ldr	r2, [pc, #28]	; (8005c68 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	4a06      	ldr	r2, [pc, #24]	; (8005c6c <vApplicationGetIdleTaskMemory+0x30>)
 8005c52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2280      	movs	r2, #128	; 0x80
 8005c58:	601a      	str	r2, [r3, #0]
}
 8005c5a:	bf00      	nop
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	24000098 	.word	0x24000098
 8005c6c:	24000154 	.word	0x24000154

08005c70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4a07      	ldr	r2, [pc, #28]	; (8005c9c <vApplicationGetTimerTaskMemory+0x2c>)
 8005c80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	4a06      	ldr	r2, [pc, #24]	; (8005ca0 <vApplicationGetTimerTaskMemory+0x30>)
 8005c86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c8e:	601a      	str	r2, [r3, #0]
}
 8005c90:	bf00      	nop
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	24000354 	.word	0x24000354
 8005ca0:	24000410 	.word	0x24000410

08005ca4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f103 0208 	add.w	r2, r3, #8
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f103 0208 	add.w	r2, r3, #8
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f103 0208 	add.w	r2, r3, #8
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	601a      	str	r2, [r3, #0]
}
 8005d3a:	bf00      	nop
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d5c:	d103      	bne.n	8005d66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	e00c      	b.n	8005d80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	3308      	adds	r3, #8
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	e002      	b.n	8005d74 <vListInsert+0x2e>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d2f6      	bcs.n	8005d6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	601a      	str	r2, [r3, #0]
}
 8005dac:	bf00      	nop
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6892      	ldr	r2, [r2, #8]
 8005dce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	6852      	ldr	r2, [r2, #4]
 8005dd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d103      	bne.n	8005dec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	1e5a      	subs	r2, r3, #1
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10a      	bne.n	8005e36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e32:	bf00      	nop
 8005e34:	e7fe      	b.n	8005e34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e36:	f002 f935 	bl	80080a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e42:	68f9      	ldr	r1, [r7, #12]
 8005e44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e46:	fb01 f303 	mul.w	r3, r1, r3
 8005e4a:	441a      	add	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e66:	3b01      	subs	r3, #1
 8005e68:	68f9      	ldr	r1, [r7, #12]
 8005e6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e6c:	fb01 f303 	mul.w	r3, r1, r3
 8005e70:	441a      	add	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	22ff      	movs	r2, #255	; 0xff
 8005e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	22ff      	movs	r2, #255	; 0xff
 8005e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d114      	bne.n	8005eb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01a      	beq.n	8005eca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3310      	adds	r3, #16
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f001 f9e3 	bl	8007264 <xTaskRemoveFromEventList>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d012      	beq.n	8005eca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <xQueueGenericReset+0xcc>)
 8005ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	e009      	b.n	8005eca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3310      	adds	r3, #16
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff fef2 	bl	8005ca4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	3324      	adds	r3, #36	; 0x24
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7ff feed 	bl	8005ca4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005eca:	f002 f91b 	bl	8008104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ece:	2301      	movs	r3, #1
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	e000ed04 	.word	0xe000ed04

08005edc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08e      	sub	sp, #56	; 0x38
 8005ee0:	af02      	add	r7, sp, #8
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <xQueueGenericCreateStatic+0x52>
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <xQueueGenericCreateStatic+0x56>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <xQueueGenericCreateStatic+0x58>
 8005f32:	2300      	movs	r3, #0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	623b      	str	r3, [r7, #32]
}
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d102      	bne.n	8005f5a <xQueueGenericCreateStatic+0x7e>
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <xQueueGenericCreateStatic+0x82>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e000      	b.n	8005f60 <xQueueGenericCreateStatic+0x84>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10a      	bne.n	8005f7a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	61fb      	str	r3, [r7, #28]
}
 8005f76:	bf00      	nop
 8005f78:	e7fe      	b.n	8005f78 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f7a:	2350      	movs	r3, #80	; 0x50
 8005f7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b50      	cmp	r3, #80	; 0x50
 8005f82:	d00a      	beq.n	8005f9a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	61bb      	str	r3, [r7, #24]
}
 8005f96:	bf00      	nop
 8005f98:	e7fe      	b.n	8005f98 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f9a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00d      	beq.n	8005fc2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	68b9      	ldr	r1, [r7, #8]
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f83f 	bl	8006040 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3730      	adds	r7, #48	; 0x30
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08a      	sub	sp, #40	; 0x28
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10a      	bne.n	8005ff6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	613b      	str	r3, [r7, #16]
}
 8005ff2:	bf00      	nop
 8005ff4:	e7fe      	b.n	8005ff4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	fb02 f303 	mul.w	r3, r2, r3
 8005ffe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	3350      	adds	r3, #80	; 0x50
 8006004:	4618      	mov	r0, r3
 8006006:	f002 f96f 	bl	80082e8 <pvPortMalloc>
 800600a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d011      	beq.n	8006036 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	3350      	adds	r3, #80	; 0x50
 800601a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006024:	79fa      	ldrb	r2, [r7, #7]
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	4613      	mov	r3, r2
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	68b9      	ldr	r1, [r7, #8]
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 f805 	bl	8006040 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006036:	69bb      	ldr	r3, [r7, #24]
	}
 8006038:	4618      	mov	r0, r3
 800603a:	3720      	adds	r7, #32
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d103      	bne.n	800605c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	601a      	str	r2, [r3, #0]
 800605a:	e002      	b.n	8006062 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800606e:	2101      	movs	r1, #1
 8006070:	69b8      	ldr	r0, [r7, #24]
 8006072:	f7ff fecb 	bl	8005e0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	78fa      	ldrb	r2, [r7, #3]
 800607a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800607e:	bf00      	nop
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08e      	sub	sp, #56	; 0x38
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
 8006094:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006096:	2300      	movs	r3, #0
 8006098:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10a      	bne.n	80060ba <xQueueGenericSend+0x32>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060b6:	bf00      	nop
 80060b8:	e7fe      	b.n	80060b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d103      	bne.n	80060c8 <xQueueGenericSend+0x40>
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <xQueueGenericSend+0x44>
 80060c8:	2301      	movs	r3, #1
 80060ca:	e000      	b.n	80060ce <xQueueGenericSend+0x46>
 80060cc:	2300      	movs	r3, #0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10a      	bne.n	80060e8 <xQueueGenericSend+0x60>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060e4:	bf00      	nop
 80060e6:	e7fe      	b.n	80060e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d103      	bne.n	80060f6 <xQueueGenericSend+0x6e>
 80060ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <xQueueGenericSend+0x72>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <xQueueGenericSend+0x74>
 80060fa:	2300      	movs	r3, #0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <xQueueGenericSend+0x8e>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	623b      	str	r3, [r7, #32]
}
 8006112:	bf00      	nop
 8006114:	e7fe      	b.n	8006114 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006116:	f001 fa67 	bl	80075e8 <xTaskGetSchedulerState>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d102      	bne.n	8006126 <xQueueGenericSend+0x9e>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <xQueueGenericSend+0xa2>
 8006126:	2301      	movs	r3, #1
 8006128:	e000      	b.n	800612c <xQueueGenericSend+0xa4>
 800612a:	2300      	movs	r3, #0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10a      	bne.n	8006146 <xQueueGenericSend+0xbe>
	__asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	61fb      	str	r3, [r7, #28]
}
 8006142:	bf00      	nop
 8006144:	e7fe      	b.n	8006144 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006146:	f001 ffad 	bl	80080a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006152:	429a      	cmp	r2, r3
 8006154:	d302      	bcc.n	800615c <xQueueGenericSend+0xd4>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b02      	cmp	r3, #2
 800615a:	d129      	bne.n	80061b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006162:	f000 fa8b 	bl	800667c <prvCopyDataToQueue>
 8006166:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	2b00      	cmp	r3, #0
 800616e:	d010      	beq.n	8006192 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006172:	3324      	adds	r3, #36	; 0x24
 8006174:	4618      	mov	r0, r3
 8006176:	f001 f875 	bl	8007264 <xTaskRemoveFromEventList>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d013      	beq.n	80061a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006180:	4b3f      	ldr	r3, [pc, #252]	; (8006280 <xQueueGenericSend+0x1f8>)
 8006182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	e00a      	b.n	80061a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006194:	2b00      	cmp	r3, #0
 8006196:	d007      	beq.n	80061a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006198:	4b39      	ldr	r3, [pc, #228]	; (8006280 <xQueueGenericSend+0x1f8>)
 800619a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061a8:	f001 ffac 	bl	8008104 <vPortExitCritical>
				return pdPASS;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e063      	b.n	8006278 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d103      	bne.n	80061be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061b6:	f001 ffa5 	bl	8008104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	e05c      	b.n	8006278 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d106      	bne.n	80061d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061c4:	f107 0314 	add.w	r3, r7, #20
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 f8af 	bl	800732c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061ce:	2301      	movs	r3, #1
 80061d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061d2:	f001 ff97 	bl	8008104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061d6:	f000 fe1b 	bl	8006e10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061da:	f001 ff63 	bl	80080a4 <vPortEnterCritical>
 80061de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061e4:	b25b      	sxtb	r3, r3
 80061e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061ea:	d103      	bne.n	80061f4 <xQueueGenericSend+0x16c>
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061fa:	b25b      	sxtb	r3, r3
 80061fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006200:	d103      	bne.n	800620a <xQueueGenericSend+0x182>
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800620a:	f001 ff7b 	bl	8008104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800620e:	1d3a      	adds	r2, r7, #4
 8006210:	f107 0314 	add.w	r3, r7, #20
 8006214:	4611      	mov	r1, r2
 8006216:	4618      	mov	r0, r3
 8006218:	f001 f89e 	bl	8007358 <xTaskCheckForTimeOut>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d124      	bne.n	800626c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006222:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006224:	f000 fb22 	bl	800686c <prvIsQueueFull>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d018      	beq.n	8006260 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	3310      	adds	r3, #16
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	4611      	mov	r1, r2
 8006236:	4618      	mov	r0, r3
 8006238:	f000 ffc4 	bl	80071c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800623c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800623e:	f000 faad 	bl	800679c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006242:	f000 fdf3 	bl	8006e2c <xTaskResumeAll>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	f47f af7c 	bne.w	8006146 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800624e:	4b0c      	ldr	r3, [pc, #48]	; (8006280 <xQueueGenericSend+0x1f8>)
 8006250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	e772      	b.n	8006146 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006262:	f000 fa9b 	bl	800679c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006266:	f000 fde1 	bl	8006e2c <xTaskResumeAll>
 800626a:	e76c      	b.n	8006146 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800626c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800626e:	f000 fa95 	bl	800679c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006272:	f000 fddb 	bl	8006e2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006276:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006278:	4618      	mov	r0, r3
 800627a:	3738      	adds	r7, #56	; 0x38
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	e000ed04 	.word	0xe000ed04

08006284 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b090      	sub	sp, #64	; 0x40
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10a      	bne.n	80062b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062ae:	bf00      	nop
 80062b0:	e7fe      	b.n	80062b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d103      	bne.n	80062c0 <xQueueGenericSendFromISR+0x3c>
 80062b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <xQueueGenericSendFromISR+0x40>
 80062c0:	2301      	movs	r3, #1
 80062c2:	e000      	b.n	80062c6 <xQueueGenericSendFromISR+0x42>
 80062c4:	2300      	movs	r3, #0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10a      	bne.n	80062e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062dc:	bf00      	nop
 80062de:	e7fe      	b.n	80062de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d103      	bne.n	80062ee <xQueueGenericSendFromISR+0x6a>
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <xQueueGenericSendFromISR+0x6e>
 80062ee:	2301      	movs	r3, #1
 80062f0:	e000      	b.n	80062f4 <xQueueGenericSendFromISR+0x70>
 80062f2:	2300      	movs	r3, #0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	623b      	str	r3, [r7, #32]
}
 800630a:	bf00      	nop
 800630c:	e7fe      	b.n	800630c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800630e:	f001 ffab 	bl	8008268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006312:	f3ef 8211 	mrs	r2, BASEPRI
 8006316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	61fa      	str	r2, [r7, #28]
 8006328:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800632a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800632c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800632e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006336:	429a      	cmp	r2, r3
 8006338:	d302      	bcc.n	8006340 <xQueueGenericSendFromISR+0xbc>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b02      	cmp	r3, #2
 800633e:	d12f      	bne.n	80063a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006342:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800634a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006356:	f000 f991 	bl	800667c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800635a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800635e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006362:	d112      	bne.n	800638a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	2b00      	cmp	r3, #0
 800636a:	d016      	beq.n	800639a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800636c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636e:	3324      	adds	r3, #36	; 0x24
 8006370:	4618      	mov	r0, r3
 8006372:	f000 ff77 	bl	8007264 <xTaskRemoveFromEventList>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00e      	beq.n	800639a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00b      	beq.n	800639a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	e007      	b.n	800639a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800638a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800638e:	3301      	adds	r3, #1
 8006390:	b2db      	uxtb	r3, r3
 8006392:	b25a      	sxtb	r2, r3
 8006394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800639a:	2301      	movs	r3, #1
 800639c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800639e:	e001      	b.n	80063a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063a0:	2300      	movs	r3, #0
 80063a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3740      	adds	r7, #64	; 0x40
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08c      	sub	sp, #48	; 0x30
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80063c8:	2300      	movs	r3, #0
 80063ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10a      	bne.n	80063ec <xQueueReceive+0x30>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	623b      	str	r3, [r7, #32]
}
 80063e8:	bf00      	nop
 80063ea:	e7fe      	b.n	80063ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d103      	bne.n	80063fa <xQueueReceive+0x3e>
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <xQueueReceive+0x42>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <xQueueReceive+0x44>
 80063fe:	2300      	movs	r3, #0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10a      	bne.n	800641a <xQueueReceive+0x5e>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	61fb      	str	r3, [r7, #28]
}
 8006416:	bf00      	nop
 8006418:	e7fe      	b.n	8006418 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800641a:	f001 f8e5 	bl	80075e8 <xTaskGetSchedulerState>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d102      	bne.n	800642a <xQueueReceive+0x6e>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <xQueueReceive+0x72>
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <xQueueReceive+0x74>
 800642e:	2300      	movs	r3, #0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <xQueueReceive+0x8e>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	61bb      	str	r3, [r7, #24]
}
 8006446:	bf00      	nop
 8006448:	e7fe      	b.n	8006448 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800644a:	f001 fe2b 	bl	80080a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	2b00      	cmp	r3, #0
 8006458:	d01f      	beq.n	800649a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800645a:	68b9      	ldr	r1, [r7, #8]
 800645c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800645e:	f000 f977 	bl	8006750 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	1e5a      	subs	r2, r3, #1
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00f      	beq.n	8006492 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	3310      	adds	r3, #16
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fef4 	bl	8007264 <xTaskRemoveFromEventList>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d007      	beq.n	8006492 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006482:	4b3d      	ldr	r3, [pc, #244]	; (8006578 <xQueueReceive+0x1bc>)
 8006484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006492:	f001 fe37 	bl	8008104 <vPortExitCritical>
				return pdPASS;
 8006496:	2301      	movs	r3, #1
 8006498:	e069      	b.n	800656e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d103      	bne.n	80064a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064a0:	f001 fe30 	bl	8008104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064a4:	2300      	movs	r3, #0
 80064a6:	e062      	b.n	800656e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064ae:	f107 0310 	add.w	r3, r7, #16
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 ff3a 	bl	800732c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064b8:	2301      	movs	r3, #1
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064bc:	f001 fe22 	bl	8008104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064c0:	f000 fca6 	bl	8006e10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064c4:	f001 fdee 	bl	80080a4 <vPortEnterCritical>
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064ce:	b25b      	sxtb	r3, r3
 80064d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064d4:	d103      	bne.n	80064de <xQueueReceive+0x122>
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064e4:	b25b      	sxtb	r3, r3
 80064e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064ea:	d103      	bne.n	80064f4 <xQueueReceive+0x138>
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064f4:	f001 fe06 	bl	8008104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064f8:	1d3a      	adds	r2, r7, #4
 80064fa:	f107 0310 	add.w	r3, r7, #16
 80064fe:	4611      	mov	r1, r2
 8006500:	4618      	mov	r0, r3
 8006502:	f000 ff29 	bl	8007358 <xTaskCheckForTimeOut>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d123      	bne.n	8006554 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800650c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800650e:	f000 f997 	bl	8006840 <prvIsQueueEmpty>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d017      	beq.n	8006548 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	3324      	adds	r3, #36	; 0x24
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	4611      	mov	r1, r2
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fe4f 	bl	80071c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006528:	f000 f938 	bl	800679c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800652c:	f000 fc7e 	bl	8006e2c <xTaskResumeAll>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d189      	bne.n	800644a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006536:	4b10      	ldr	r3, [pc, #64]	; (8006578 <xQueueReceive+0x1bc>)
 8006538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	e780      	b.n	800644a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800654a:	f000 f927 	bl	800679c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800654e:	f000 fc6d 	bl	8006e2c <xTaskResumeAll>
 8006552:	e77a      	b.n	800644a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006556:	f000 f921 	bl	800679c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800655a:	f000 fc67 	bl	8006e2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800655e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006560:	f000 f96e 	bl	8006840 <prvIsQueueEmpty>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	f43f af6f 	beq.w	800644a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800656c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800656e:	4618      	mov	r0, r3
 8006570:	3730      	adds	r7, #48	; 0x30
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	e000ed04 	.word	0xe000ed04

0800657c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08e      	sub	sp, #56	; 0x38
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10a      	bne.n	80065a8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	623b      	str	r3, [r7, #32]
}
 80065a4:	bf00      	nop
 80065a6:	e7fe      	b.n	80065a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d103      	bne.n	80065b6 <xQueueReceiveFromISR+0x3a>
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <xQueueReceiveFromISR+0x3e>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e000      	b.n	80065bc <xQueueReceiveFromISR+0x40>
 80065ba:	2300      	movs	r3, #0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10a      	bne.n	80065d6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	61fb      	str	r3, [r7, #28]
}
 80065d2:	bf00      	nop
 80065d4:	e7fe      	b.n	80065d4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065d6:	f001 fe47 	bl	8008268 <vPortValidateInterruptPriority>
	__asm volatile
 80065da:	f3ef 8211 	mrs	r2, BASEPRI
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	61ba      	str	r2, [r7, #24]
 80065f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80065f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d02f      	beq.n	8006662 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800660c:	68b9      	ldr	r1, [r7, #8]
 800660e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006610:	f000 f89e 	bl	8006750 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006616:	1e5a      	subs	r2, r3, #1
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800661c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006624:	d112      	bne.n	800664c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d016      	beq.n	800665c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	3310      	adds	r3, #16
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fe16 	bl	8007264 <xTaskRemoveFromEventList>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00e      	beq.n	800665c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00b      	beq.n	800665c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	e007      	b.n	800665c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800664c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006650:	3301      	adds	r3, #1
 8006652:	b2db      	uxtb	r3, r3
 8006654:	b25a      	sxtb	r2, r3
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800665c:	2301      	movs	r3, #1
 800665e:	637b      	str	r3, [r7, #52]	; 0x34
 8006660:	e001      	b.n	8006666 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006662:	2300      	movs	r3, #0
 8006664:	637b      	str	r3, [r7, #52]	; 0x34
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006668:	613b      	str	r3, [r7, #16]
	__asm volatile
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f383 8811 	msr	BASEPRI, r3
}
 8006670:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006674:	4618      	mov	r0, r3
 8006676:	3738      	adds	r7, #56	; 0x38
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006688:	2300      	movs	r3, #0
 800668a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006690:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10d      	bne.n	80066b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d14d      	bne.n	800673e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 ffbc 	bl	8007624 <xTaskPriorityDisinherit>
 80066ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	609a      	str	r2, [r3, #8]
 80066b4:	e043      	b.n	800673e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d119      	bne.n	80066f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6858      	ldr	r0, [r3, #4]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c4:	461a      	mov	r2, r3
 80066c6:	68b9      	ldr	r1, [r7, #8]
 80066c8:	f002 f828 	bl	800871c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d4:	441a      	add	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d32b      	bcc.n	800673e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	605a      	str	r2, [r3, #4]
 80066ee:	e026      	b.n	800673e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	68d8      	ldr	r0, [r3, #12]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f8:	461a      	mov	r2, r3
 80066fa:	68b9      	ldr	r1, [r7, #8]
 80066fc:	f002 f80e 	bl	800871c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006708:	425b      	negs	r3, r3
 800670a:	441a      	add	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	429a      	cmp	r2, r3
 800671a:	d207      	bcs.n	800672c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006724:	425b      	negs	r3, r3
 8006726:	441a      	add	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b02      	cmp	r3, #2
 8006730:	d105      	bne.n	800673e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	3b01      	subs	r3, #1
 800673c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006746:	697b      	ldr	r3, [r7, #20]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	2b00      	cmp	r3, #0
 8006760:	d018      	beq.n	8006794 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	441a      	add	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	429a      	cmp	r2, r3
 800677a:	d303      	bcc.n	8006784 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68d9      	ldr	r1, [r3, #12]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678c:	461a      	mov	r2, r3
 800678e:	6838      	ldr	r0, [r7, #0]
 8006790:	f001 ffc4 	bl	800871c <memcpy>
	}
}
 8006794:	bf00      	nop
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067a4:	f001 fc7e 	bl	80080a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067b0:	e011      	b.n	80067d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d012      	beq.n	80067e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3324      	adds	r3, #36	; 0x24
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fd50 	bl	8007264 <xTaskRemoveFromEventList>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067ca:	f000 fe27 	bl	800741c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	dce9      	bgt.n	80067b2 <prvUnlockQueue+0x16>
 80067de:	e000      	b.n	80067e2 <prvUnlockQueue+0x46>
					break;
 80067e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	22ff      	movs	r2, #255	; 0xff
 80067e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067ea:	f001 fc8b 	bl	8008104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067ee:	f001 fc59 	bl	80080a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067fa:	e011      	b.n	8006820 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d012      	beq.n	800682a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3310      	adds	r3, #16
 8006808:	4618      	mov	r0, r3
 800680a:	f000 fd2b 	bl	8007264 <xTaskRemoveFromEventList>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006814:	f000 fe02 	bl	800741c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006818:	7bbb      	ldrb	r3, [r7, #14]
 800681a:	3b01      	subs	r3, #1
 800681c:	b2db      	uxtb	r3, r3
 800681e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006820:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006824:	2b00      	cmp	r3, #0
 8006826:	dce9      	bgt.n	80067fc <prvUnlockQueue+0x60>
 8006828:	e000      	b.n	800682c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800682a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	22ff      	movs	r2, #255	; 0xff
 8006830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006834:	f001 fc66 	bl	8008104 <vPortExitCritical>
}
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006848:	f001 fc2c 	bl	80080a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006850:	2b00      	cmp	r3, #0
 8006852:	d102      	bne.n	800685a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006854:	2301      	movs	r3, #1
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	e001      	b.n	800685e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800685a:	2300      	movs	r3, #0
 800685c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800685e:	f001 fc51 	bl	8008104 <vPortExitCritical>

	return xReturn;
 8006862:	68fb      	ldr	r3, [r7, #12]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006874:	f001 fc16 	bl	80080a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006880:	429a      	cmp	r2, r3
 8006882:	d102      	bne.n	800688a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006884:	2301      	movs	r3, #1
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	e001      	b.n	800688e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800688a:	2300      	movs	r3, #0
 800688c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800688e:	f001 fc39 	bl	8008104 <vPortExitCritical>

	return xReturn;
 8006892:	68fb      	ldr	r3, [r7, #12]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068a6:	2300      	movs	r3, #0
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	e014      	b.n	80068d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068ac:	4a0f      	ldr	r2, [pc, #60]	; (80068ec <vQueueAddToRegistry+0x50>)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10b      	bne.n	80068d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80068b8:	490c      	ldr	r1, [pc, #48]	; (80068ec <vQueueAddToRegistry+0x50>)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068c2:	4a0a      	ldr	r2, [pc, #40]	; (80068ec <vQueueAddToRegistry+0x50>)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	4413      	add	r3, r2
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068ce:	e006      	b.n	80068de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	3301      	adds	r3, #1
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b07      	cmp	r3, #7
 80068da:	d9e7      	bls.n	80068ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068dc:	bf00      	nop
 80068de:	bf00      	nop
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	24004bd4 	.word	0x24004bd4

080068f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006900:	f001 fbd0 	bl	80080a4 <vPortEnterCritical>
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800690a:	b25b      	sxtb	r3, r3
 800690c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006910:	d103      	bne.n	800691a <vQueueWaitForMessageRestricted+0x2a>
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006920:	b25b      	sxtb	r3, r3
 8006922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006926:	d103      	bne.n	8006930 <vQueueWaitForMessageRestricted+0x40>
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006930:	f001 fbe8 	bl	8008104 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	2b00      	cmp	r3, #0
 800693a:	d106      	bne.n	800694a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	3324      	adds	r3, #36	; 0x24
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	68b9      	ldr	r1, [r7, #8]
 8006944:	4618      	mov	r0, r3
 8006946:	f000 fc61 	bl	800720c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800694a:	6978      	ldr	r0, [r7, #20]
 800694c:	f7ff ff26 	bl	800679c <prvUnlockQueue>
	}
 8006950:	bf00      	nop
 8006952:	3718      	adds	r7, #24
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08e      	sub	sp, #56	; 0x38
 800695c:	af04      	add	r7, sp, #16
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
 8006964:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10a      	bne.n	8006982 <xTaskCreateStatic+0x2a>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	623b      	str	r3, [r7, #32]
}
 800697e:	bf00      	nop
 8006980:	e7fe      	b.n	8006980 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10a      	bne.n	800699e <xTaskCreateStatic+0x46>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	61fb      	str	r3, [r7, #28]
}
 800699a:	bf00      	nop
 800699c:	e7fe      	b.n	800699c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800699e:	23bc      	movs	r3, #188	; 0xbc
 80069a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2bbc      	cmp	r3, #188	; 0xbc
 80069a6:	d00a      	beq.n	80069be <xTaskCreateStatic+0x66>
	__asm volatile
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	61bb      	str	r3, [r7, #24]
}
 80069ba:	bf00      	nop
 80069bc:	e7fe      	b.n	80069bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d01e      	beq.n	8006a04 <xTaskCreateStatic+0xac>
 80069c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01b      	beq.n	8006a04 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	2202      	movs	r2, #2
 80069da:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069de:	2300      	movs	r3, #0
 80069e0:	9303      	str	r3, [sp, #12]
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	9302      	str	r3, [sp, #8]
 80069e6:	f107 0314 	add.w	r3, r7, #20
 80069ea:	9301      	str	r3, [sp, #4]
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	68b9      	ldr	r1, [r7, #8]
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 f850 	bl	8006a9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069fe:	f000 f8f3 	bl	8006be8 <prvAddNewTaskToReadyList>
 8006a02:	e001      	b.n	8006a08 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006a04:	2300      	movs	r3, #0
 8006a06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a08:	697b      	ldr	r3, [r7, #20]
	}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3728      	adds	r7, #40	; 0x28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b08c      	sub	sp, #48	; 0x30
 8006a16:	af04      	add	r7, sp, #16
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	60b9      	str	r1, [r7, #8]
 8006a1c:	603b      	str	r3, [r7, #0]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a22:	88fb      	ldrh	r3, [r7, #6]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4618      	mov	r0, r3
 8006a28:	f001 fc5e 	bl	80082e8 <pvPortMalloc>
 8006a2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00e      	beq.n	8006a52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a34:	20bc      	movs	r0, #188	; 0xbc
 8006a36:	f001 fc57 	bl	80082e8 <pvPortMalloc>
 8006a3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	631a      	str	r2, [r3, #48]	; 0x30
 8006a48:	e005      	b.n	8006a56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a4a:	6978      	ldr	r0, [r7, #20]
 8006a4c:	f001 fd18 	bl	8008480 <vPortFree>
 8006a50:	e001      	b.n	8006a56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a52:	2300      	movs	r3, #0
 8006a54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d017      	beq.n	8006a8c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a64:	88fa      	ldrh	r2, [r7, #6]
 8006a66:	2300      	movs	r3, #0
 8006a68:	9303      	str	r3, [sp, #12]
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	9302      	str	r3, [sp, #8]
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a70:	9301      	str	r3, [sp, #4]
 8006a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68b9      	ldr	r1, [r7, #8]
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 f80e 	bl	8006a9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a80:	69f8      	ldr	r0, [r7, #28]
 8006a82:	f000 f8b1 	bl	8006be8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a86:	2301      	movs	r3, #1
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	e002      	b.n	8006a92 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a92:	69bb      	ldr	r3, [r7, #24]
	}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3720      	adds	r7, #32
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b088      	sub	sp, #32
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
 8006aa8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	21a5      	movs	r1, #165	; 0xa5
 8006ab6:	f001 fe3f 	bl	8008738 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006abe:	6879      	ldr	r1, [r7, #4]
 8006ac0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006ac4:	440b      	add	r3, r1
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	f023 0307 	bic.w	r3, r3, #7
 8006ad2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00a      	beq.n	8006af4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	617b      	str	r3, [r7, #20]
}
 8006af0:	bf00      	nop
 8006af2:	e7fe      	b.n	8006af2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d01f      	beq.n	8006b3a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006afa:	2300      	movs	r3, #0
 8006afc:	61fb      	str	r3, [r7, #28]
 8006afe:	e012      	b.n	8006b26 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	4413      	add	r3, r2
 8006b06:	7819      	ldrb	r1, [r3, #0]
 8006b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	3334      	adds	r3, #52	; 0x34
 8006b10:	460a      	mov	r2, r1
 8006b12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	4413      	add	r3, r2
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d006      	beq.n	8006b2e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	3301      	adds	r3, #1
 8006b24:	61fb      	str	r3, [r7, #28]
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	2b0f      	cmp	r3, #15
 8006b2a:	d9e9      	bls.n	8006b00 <prvInitialiseNewTask+0x64>
 8006b2c:	e000      	b.n	8006b30 <prvInitialiseNewTask+0x94>
			{
				break;
 8006b2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b38:	e003      	b.n	8006b42 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	2b37      	cmp	r3, #55	; 0x37
 8006b46:	d901      	bls.n	8006b4c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b48:	2337      	movs	r3, #55	; 0x37
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	3304      	adds	r3, #4
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7ff f8be 	bl	8005ce4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	3318      	adds	r3, #24
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7ff f8b9 	bl	8005ce4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	3354      	adds	r3, #84	; 0x54
 8006b9c:	2260      	movs	r2, #96	; 0x60
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f001 fdc9 	bl	8008738 <memset>
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	4a0c      	ldr	r2, [pc, #48]	; (8006bdc <prvInitialiseNewTask+0x140>)
 8006baa:	659a      	str	r2, [r3, #88]	; 0x58
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	4a0c      	ldr	r2, [pc, #48]	; (8006be0 <prvInitialiseNewTask+0x144>)
 8006bb0:	65da      	str	r2, [r3, #92]	; 0x5c
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	4a0b      	ldr	r2, [pc, #44]	; (8006be4 <prvInitialiseNewTask+0x148>)
 8006bb6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	68f9      	ldr	r1, [r7, #12]
 8006bbc:	69b8      	ldr	r0, [r7, #24]
 8006bbe:	f001 f941 	bl	8007e44 <pxPortInitialiseStack>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bd4:	bf00      	nop
 8006bd6:	3720      	adds	r7, #32
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	08008bc0 	.word	0x08008bc0
 8006be0:	08008be0 	.word	0x08008be0
 8006be4:	08008ba0 	.word	0x08008ba0

08006be8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bf0:	f001 fa58 	bl	80080a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bf4:	4b2d      	ldr	r3, [pc, #180]	; (8006cac <prvAddNewTaskToReadyList+0xc4>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	4a2c      	ldr	r2, [pc, #176]	; (8006cac <prvAddNewTaskToReadyList+0xc4>)
 8006bfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006bfe:	4b2c      	ldr	r3, [pc, #176]	; (8006cb0 <prvAddNewTaskToReadyList+0xc8>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c06:	4a2a      	ldr	r2, [pc, #168]	; (8006cb0 <prvAddNewTaskToReadyList+0xc8>)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c0c:	4b27      	ldr	r3, [pc, #156]	; (8006cac <prvAddNewTaskToReadyList+0xc4>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d110      	bne.n	8006c36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c14:	f000 fc26 	bl	8007464 <prvInitialiseTaskLists>
 8006c18:	e00d      	b.n	8006c36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c1a:	4b26      	ldr	r3, [pc, #152]	; (8006cb4 <prvAddNewTaskToReadyList+0xcc>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d109      	bne.n	8006c36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c22:	4b23      	ldr	r3, [pc, #140]	; (8006cb0 <prvAddNewTaskToReadyList+0xc8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d802      	bhi.n	8006c36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c30:	4a1f      	ldr	r2, [pc, #124]	; (8006cb0 <prvAddNewTaskToReadyList+0xc8>)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c36:	4b20      	ldr	r3, [pc, #128]	; (8006cb8 <prvAddNewTaskToReadyList+0xd0>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	4a1e      	ldr	r2, [pc, #120]	; (8006cb8 <prvAddNewTaskToReadyList+0xd0>)
 8006c3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c40:	4b1d      	ldr	r3, [pc, #116]	; (8006cb8 <prvAddNewTaskToReadyList+0xd0>)
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4c:	4b1b      	ldr	r3, [pc, #108]	; (8006cbc <prvAddNewTaskToReadyList+0xd4>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d903      	bls.n	8006c5c <prvAddNewTaskToReadyList+0x74>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	4a18      	ldr	r2, [pc, #96]	; (8006cbc <prvAddNewTaskToReadyList+0xd4>)
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c60:	4613      	mov	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4a15      	ldr	r2, [pc, #84]	; (8006cc0 <prvAddNewTaskToReadyList+0xd8>)
 8006c6a:	441a      	add	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	3304      	adds	r3, #4
 8006c70:	4619      	mov	r1, r3
 8006c72:	4610      	mov	r0, r2
 8006c74:	f7ff f843 	bl	8005cfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c78:	f001 fa44 	bl	8008104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c7c:	4b0d      	ldr	r3, [pc, #52]	; (8006cb4 <prvAddNewTaskToReadyList+0xcc>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00e      	beq.n	8006ca2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c84:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <prvAddNewTaskToReadyList+0xc8>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d207      	bcs.n	8006ca2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c92:	4b0c      	ldr	r3, [pc, #48]	; (8006cc4 <prvAddNewTaskToReadyList+0xdc>)
 8006c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ca2:	bf00      	nop
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	24000ce4 	.word	0x24000ce4
 8006cb0:	24000810 	.word	0x24000810
 8006cb4:	24000cf0 	.word	0x24000cf0
 8006cb8:	24000d00 	.word	0x24000d00
 8006cbc:	24000cec 	.word	0x24000cec
 8006cc0:	24000814 	.word	0x24000814
 8006cc4:	e000ed04 	.word	0xe000ed04

08006cc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d017      	beq.n	8006d0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cda:	4b13      	ldr	r3, [pc, #76]	; (8006d28 <vTaskDelay+0x60>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <vTaskDelay+0x30>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	60bb      	str	r3, [r7, #8]
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006cf8:	f000 f88a 	bl	8006e10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fcfe 	bl	8007700 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d04:	f000 f892 	bl	8006e2c <xTaskResumeAll>
 8006d08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d107      	bne.n	8006d20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d10:	4b06      	ldr	r3, [pc, #24]	; (8006d2c <vTaskDelay+0x64>)
 8006d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d20:	bf00      	nop
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	24000d0c 	.word	0x24000d0c
 8006d2c:	e000ed04 	.word	0xe000ed04

08006d30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08a      	sub	sp, #40	; 0x28
 8006d34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d3e:	463a      	mov	r2, r7
 8006d40:	1d39      	adds	r1, r7, #4
 8006d42:	f107 0308 	add.w	r3, r7, #8
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe ff78 	bl	8005c3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	9202      	str	r2, [sp, #8]
 8006d54:	9301      	str	r3, [sp, #4]
 8006d56:	2300      	movs	r3, #0
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	460a      	mov	r2, r1
 8006d5e:	4924      	ldr	r1, [pc, #144]	; (8006df0 <vTaskStartScheduler+0xc0>)
 8006d60:	4824      	ldr	r0, [pc, #144]	; (8006df4 <vTaskStartScheduler+0xc4>)
 8006d62:	f7ff fdf9 	bl	8006958 <xTaskCreateStatic>
 8006d66:	4603      	mov	r3, r0
 8006d68:	4a23      	ldr	r2, [pc, #140]	; (8006df8 <vTaskStartScheduler+0xc8>)
 8006d6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d6c:	4b22      	ldr	r3, [pc, #136]	; (8006df8 <vTaskStartScheduler+0xc8>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d74:	2301      	movs	r3, #1
 8006d76:	617b      	str	r3, [r7, #20]
 8006d78:	e001      	b.n	8006d7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d102      	bne.n	8006d8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d84:	f000 fd10 	bl	80077a8 <xTimerCreateTimerTask>
 8006d88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d11b      	bne.n	8006dc8 <vTaskStartScheduler+0x98>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	613b      	str	r3, [r7, #16]
}
 8006da2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006da4:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <vTaskStartScheduler+0xcc>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3354      	adds	r3, #84	; 0x54
 8006daa:	4a15      	ldr	r2, [pc, #84]	; (8006e00 <vTaskStartScheduler+0xd0>)
 8006dac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dae:	4b15      	ldr	r3, [pc, #84]	; (8006e04 <vTaskStartScheduler+0xd4>)
 8006db0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006db4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006db6:	4b14      	ldr	r3, [pc, #80]	; (8006e08 <vTaskStartScheduler+0xd8>)
 8006db8:	2201      	movs	r2, #1
 8006dba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006dbc:	4b13      	ldr	r3, [pc, #76]	; (8006e0c <vTaskStartScheduler+0xdc>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006dc2:	f001 f8cd 	bl	8007f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006dc6:	e00e      	b.n	8006de6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dce:	d10a      	bne.n	8006de6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	60fb      	str	r3, [r7, #12]
}
 8006de2:	bf00      	nop
 8006de4:	e7fe      	b.n	8006de4 <vTaskStartScheduler+0xb4>
}
 8006de6:	bf00      	nop
 8006de8:	3718      	adds	r7, #24
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	08008a90 	.word	0x08008a90
 8006df4:	08007435 	.word	0x08007435
 8006df8:	24000d08 	.word	0x24000d08
 8006dfc:	24000810 	.word	0x24000810
 8006e00:	24000014 	.word	0x24000014
 8006e04:	24000d04 	.word	0x24000d04
 8006e08:	24000cf0 	.word	0x24000cf0
 8006e0c:	24000ce8 	.word	0x24000ce8

08006e10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e14:	4b04      	ldr	r3, [pc, #16]	; (8006e28 <vTaskSuspendAll+0x18>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	4a03      	ldr	r2, [pc, #12]	; (8006e28 <vTaskSuspendAll+0x18>)
 8006e1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e1e:	bf00      	nop
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr
 8006e28:	24000d0c 	.word	0x24000d0c

08006e2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e36:	2300      	movs	r3, #0
 8006e38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e3a:	4b42      	ldr	r3, [pc, #264]	; (8006f44 <xTaskResumeAll+0x118>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10a      	bne.n	8006e58 <xTaskResumeAll+0x2c>
	__asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	603b      	str	r3, [r7, #0]
}
 8006e54:	bf00      	nop
 8006e56:	e7fe      	b.n	8006e56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e58:	f001 f924 	bl	80080a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e5c:	4b39      	ldr	r3, [pc, #228]	; (8006f44 <xTaskResumeAll+0x118>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	4a38      	ldr	r2, [pc, #224]	; (8006f44 <xTaskResumeAll+0x118>)
 8006e64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e66:	4b37      	ldr	r3, [pc, #220]	; (8006f44 <xTaskResumeAll+0x118>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d162      	bne.n	8006f34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e6e:	4b36      	ldr	r3, [pc, #216]	; (8006f48 <xTaskResumeAll+0x11c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d05e      	beq.n	8006f34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e76:	e02f      	b.n	8006ed8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e78:	4b34      	ldr	r3, [pc, #208]	; (8006f4c <xTaskResumeAll+0x120>)
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3318      	adds	r3, #24
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fe ff97 	bl	8005db8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe ff92 	bl	8005db8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e98:	4b2d      	ldr	r3, [pc, #180]	; (8006f50 <xTaskResumeAll+0x124>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d903      	bls.n	8006ea8 <xTaskResumeAll+0x7c>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea4:	4a2a      	ldr	r2, [pc, #168]	; (8006f50 <xTaskResumeAll+0x124>)
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eac:	4613      	mov	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4a27      	ldr	r2, [pc, #156]	; (8006f54 <xTaskResumeAll+0x128>)
 8006eb6:	441a      	add	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	3304      	adds	r3, #4
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	f7fe ff1d 	bl	8005cfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec8:	4b23      	ldr	r3, [pc, #140]	; (8006f58 <xTaskResumeAll+0x12c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d302      	bcc.n	8006ed8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006ed2:	4b22      	ldr	r3, [pc, #136]	; (8006f5c <xTaskResumeAll+0x130>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ed8:	4b1c      	ldr	r3, [pc, #112]	; (8006f4c <xTaskResumeAll+0x120>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1cb      	bne.n	8006e78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ee6:	f000 fb5f 	bl	80075a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006eea:	4b1d      	ldr	r3, [pc, #116]	; (8006f60 <xTaskResumeAll+0x134>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d010      	beq.n	8006f18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ef6:	f000 f847 	bl	8006f88 <xTaskIncrementTick>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f00:	4b16      	ldr	r3, [pc, #88]	; (8006f5c <xTaskResumeAll+0x130>)
 8006f02:	2201      	movs	r2, #1
 8006f04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f1      	bne.n	8006ef6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f12:	4b13      	ldr	r3, [pc, #76]	; (8006f60 <xTaskResumeAll+0x134>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f18:	4b10      	ldr	r3, [pc, #64]	; (8006f5c <xTaskResumeAll+0x130>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d009      	beq.n	8006f34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f20:	2301      	movs	r3, #1
 8006f22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f24:	4b0f      	ldr	r3, [pc, #60]	; (8006f64 <xTaskResumeAll+0x138>)
 8006f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f34:	f001 f8e6 	bl	8008104 <vPortExitCritical>

	return xAlreadyYielded;
 8006f38:	68bb      	ldr	r3, [r7, #8]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	24000d0c 	.word	0x24000d0c
 8006f48:	24000ce4 	.word	0x24000ce4
 8006f4c:	24000ca4 	.word	0x24000ca4
 8006f50:	24000cec 	.word	0x24000cec
 8006f54:	24000814 	.word	0x24000814
 8006f58:	24000810 	.word	0x24000810
 8006f5c:	24000cf8 	.word	0x24000cf8
 8006f60:	24000cf4 	.word	0x24000cf4
 8006f64:	e000ed04 	.word	0xe000ed04

08006f68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f6e:	4b05      	ldr	r3, [pc, #20]	; (8006f84 <xTaskGetTickCount+0x1c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f74:	687b      	ldr	r3, [r7, #4]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	24000ce8 	.word	0x24000ce8

08006f88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f92:	4b4f      	ldr	r3, [pc, #316]	; (80070d0 <xTaskIncrementTick+0x148>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f040 808f 	bne.w	80070ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f9c:	4b4d      	ldr	r3, [pc, #308]	; (80070d4 <xTaskIncrementTick+0x14c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fa4:	4a4b      	ldr	r2, [pc, #300]	; (80070d4 <xTaskIncrementTick+0x14c>)
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d120      	bne.n	8006ff2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fb0:	4b49      	ldr	r3, [pc, #292]	; (80070d8 <xTaskIncrementTick+0x150>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <xTaskIncrementTick+0x48>
	__asm volatile
 8006fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	603b      	str	r3, [r7, #0]
}
 8006fcc:	bf00      	nop
 8006fce:	e7fe      	b.n	8006fce <xTaskIncrementTick+0x46>
 8006fd0:	4b41      	ldr	r3, [pc, #260]	; (80070d8 <xTaskIncrementTick+0x150>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	60fb      	str	r3, [r7, #12]
 8006fd6:	4b41      	ldr	r3, [pc, #260]	; (80070dc <xTaskIncrementTick+0x154>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a3f      	ldr	r2, [pc, #252]	; (80070d8 <xTaskIncrementTick+0x150>)
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	4a3f      	ldr	r2, [pc, #252]	; (80070dc <xTaskIncrementTick+0x154>)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6013      	str	r3, [r2, #0]
 8006fe4:	4b3e      	ldr	r3, [pc, #248]	; (80070e0 <xTaskIncrementTick+0x158>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	4a3d      	ldr	r2, [pc, #244]	; (80070e0 <xTaskIncrementTick+0x158>)
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	f000 fadb 	bl	80075a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ff2:	4b3c      	ldr	r3, [pc, #240]	; (80070e4 <xTaskIncrementTick+0x15c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d349      	bcc.n	8007090 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ffc:	4b36      	ldr	r3, [pc, #216]	; (80070d8 <xTaskIncrementTick+0x150>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d104      	bne.n	8007010 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007006:	4b37      	ldr	r3, [pc, #220]	; (80070e4 <xTaskIncrementTick+0x15c>)
 8007008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800700c:	601a      	str	r2, [r3, #0]
					break;
 800700e:	e03f      	b.n	8007090 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007010:	4b31      	ldr	r3, [pc, #196]	; (80070d8 <xTaskIncrementTick+0x150>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	429a      	cmp	r2, r3
 8007026:	d203      	bcs.n	8007030 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007028:	4a2e      	ldr	r2, [pc, #184]	; (80070e4 <xTaskIncrementTick+0x15c>)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800702e:	e02f      	b.n	8007090 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	3304      	adds	r3, #4
 8007034:	4618      	mov	r0, r3
 8007036:	f7fe febf 	bl	8005db8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703e:	2b00      	cmp	r3, #0
 8007040:	d004      	beq.n	800704c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	3318      	adds	r3, #24
 8007046:	4618      	mov	r0, r3
 8007048:	f7fe feb6 	bl	8005db8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007050:	4b25      	ldr	r3, [pc, #148]	; (80070e8 <xTaskIncrementTick+0x160>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	429a      	cmp	r2, r3
 8007056:	d903      	bls.n	8007060 <xTaskIncrementTick+0xd8>
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705c:	4a22      	ldr	r2, [pc, #136]	; (80070e8 <xTaskIncrementTick+0x160>)
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007064:	4613      	mov	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4a1f      	ldr	r2, [pc, #124]	; (80070ec <xTaskIncrementTick+0x164>)
 800706e:	441a      	add	r2, r3
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	3304      	adds	r3, #4
 8007074:	4619      	mov	r1, r3
 8007076:	4610      	mov	r0, r2
 8007078:	f7fe fe41 	bl	8005cfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007080:	4b1b      	ldr	r3, [pc, #108]	; (80070f0 <xTaskIncrementTick+0x168>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007086:	429a      	cmp	r2, r3
 8007088:	d3b8      	bcc.n	8006ffc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800708a:	2301      	movs	r3, #1
 800708c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800708e:	e7b5      	b.n	8006ffc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007090:	4b17      	ldr	r3, [pc, #92]	; (80070f0 <xTaskIncrementTick+0x168>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007096:	4915      	ldr	r1, [pc, #84]	; (80070ec <xTaskIncrementTick+0x164>)
 8007098:	4613      	mov	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	440b      	add	r3, r1
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d901      	bls.n	80070ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80070a8:	2301      	movs	r3, #1
 80070aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070ac:	4b11      	ldr	r3, [pc, #68]	; (80070f4 <xTaskIncrementTick+0x16c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d007      	beq.n	80070c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80070b4:	2301      	movs	r3, #1
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	e004      	b.n	80070c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80070ba:	4b0f      	ldr	r3, [pc, #60]	; (80070f8 <xTaskIncrementTick+0x170>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3301      	adds	r3, #1
 80070c0:	4a0d      	ldr	r2, [pc, #52]	; (80070f8 <xTaskIncrementTick+0x170>)
 80070c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80070c4:	697b      	ldr	r3, [r7, #20]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	24000d0c 	.word	0x24000d0c
 80070d4:	24000ce8 	.word	0x24000ce8
 80070d8:	24000c9c 	.word	0x24000c9c
 80070dc:	24000ca0 	.word	0x24000ca0
 80070e0:	24000cfc 	.word	0x24000cfc
 80070e4:	24000d04 	.word	0x24000d04
 80070e8:	24000cec 	.word	0x24000cec
 80070ec:	24000814 	.word	0x24000814
 80070f0:	24000810 	.word	0x24000810
 80070f4:	24000cf8 	.word	0x24000cf8
 80070f8:	24000cf4 	.word	0x24000cf4

080070fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007102:	4b2a      	ldr	r3, [pc, #168]	; (80071ac <vTaskSwitchContext+0xb0>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800710a:	4b29      	ldr	r3, [pc, #164]	; (80071b0 <vTaskSwitchContext+0xb4>)
 800710c:	2201      	movs	r2, #1
 800710e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007110:	e046      	b.n	80071a0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007112:	4b27      	ldr	r3, [pc, #156]	; (80071b0 <vTaskSwitchContext+0xb4>)
 8007114:	2200      	movs	r2, #0
 8007116:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007118:	4b26      	ldr	r3, [pc, #152]	; (80071b4 <vTaskSwitchContext+0xb8>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	e010      	b.n	8007142 <vTaskSwitchContext+0x46>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10a      	bne.n	800713c <vTaskSwitchContext+0x40>
	__asm volatile
 8007126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	607b      	str	r3, [r7, #4]
}
 8007138:	bf00      	nop
 800713a:	e7fe      	b.n	800713a <vTaskSwitchContext+0x3e>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3b01      	subs	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	491d      	ldr	r1, [pc, #116]	; (80071b8 <vTaskSwitchContext+0xbc>)
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	4613      	mov	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	440b      	add	r3, r1
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d0e4      	beq.n	8007120 <vTaskSwitchContext+0x24>
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	4613      	mov	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4a15      	ldr	r2, [pc, #84]	; (80071b8 <vTaskSwitchContext+0xbc>)
 8007162:	4413      	add	r3, r2
 8007164:	60bb      	str	r3, [r7, #8]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	605a      	str	r2, [r3, #4]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	3308      	adds	r3, #8
 8007178:	429a      	cmp	r2, r3
 800717a:	d104      	bne.n	8007186 <vTaskSwitchContext+0x8a>
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	605a      	str	r2, [r3, #4]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	4a0b      	ldr	r2, [pc, #44]	; (80071bc <vTaskSwitchContext+0xc0>)
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	4a08      	ldr	r2, [pc, #32]	; (80071b4 <vTaskSwitchContext+0xb8>)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007196:	4b09      	ldr	r3, [pc, #36]	; (80071bc <vTaskSwitchContext+0xc0>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3354      	adds	r3, #84	; 0x54
 800719c:	4a08      	ldr	r2, [pc, #32]	; (80071c0 <vTaskSwitchContext+0xc4>)
 800719e:	6013      	str	r3, [r2, #0]
}
 80071a0:	bf00      	nop
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	24000d0c 	.word	0x24000d0c
 80071b0:	24000cf8 	.word	0x24000cf8
 80071b4:	24000cec 	.word	0x24000cec
 80071b8:	24000814 	.word	0x24000814
 80071bc:	24000810 	.word	0x24000810
 80071c0:	24000014 	.word	0x24000014

080071c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10a      	bne.n	80071ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	60fb      	str	r3, [r7, #12]
}
 80071e6:	bf00      	nop
 80071e8:	e7fe      	b.n	80071e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071ea:	4b07      	ldr	r3, [pc, #28]	; (8007208 <vTaskPlaceOnEventList+0x44>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3318      	adds	r3, #24
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7fe fda7 	bl	8005d46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071f8:	2101      	movs	r1, #1
 80071fa:	6838      	ldr	r0, [r7, #0]
 80071fc:	f000 fa80 	bl	8007700 <prvAddCurrentTaskToDelayedList>
}
 8007200:	bf00      	nop
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	24000810 	.word	0x24000810

0800720c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10a      	bne.n	8007234 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	617b      	str	r3, [r7, #20]
}
 8007230:	bf00      	nop
 8007232:	e7fe      	b.n	8007232 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007234:	4b0a      	ldr	r3, [pc, #40]	; (8007260 <vTaskPlaceOnEventListRestricted+0x54>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3318      	adds	r3, #24
 800723a:	4619      	mov	r1, r3
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f7fe fd5e 	bl	8005cfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800724c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800724e:	6879      	ldr	r1, [r7, #4]
 8007250:	68b8      	ldr	r0, [r7, #8]
 8007252:	f000 fa55 	bl	8007700 <prvAddCurrentTaskToDelayedList>
	}
 8007256:	bf00      	nop
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	24000810 	.word	0x24000810

08007264 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10a      	bne.n	8007290 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	60fb      	str	r3, [r7, #12]
}
 800728c:	bf00      	nop
 800728e:	e7fe      	b.n	800728e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	3318      	adds	r3, #24
 8007294:	4618      	mov	r0, r3
 8007296:	f7fe fd8f 	bl	8005db8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800729a:	4b1e      	ldr	r3, [pc, #120]	; (8007314 <xTaskRemoveFromEventList+0xb0>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d11d      	bne.n	80072de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	3304      	adds	r3, #4
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fe fd86 	bl	8005db8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b0:	4b19      	ldr	r3, [pc, #100]	; (8007318 <xTaskRemoveFromEventList+0xb4>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d903      	bls.n	80072c0 <xTaskRemoveFromEventList+0x5c>
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	4a16      	ldr	r2, [pc, #88]	; (8007318 <xTaskRemoveFromEventList+0xb4>)
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c4:	4613      	mov	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4a13      	ldr	r2, [pc, #76]	; (800731c <xTaskRemoveFromEventList+0xb8>)
 80072ce:	441a      	add	r2, r3
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	3304      	adds	r3, #4
 80072d4:	4619      	mov	r1, r3
 80072d6:	4610      	mov	r0, r2
 80072d8:	f7fe fd11 	bl	8005cfe <vListInsertEnd>
 80072dc:	e005      	b.n	80072ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	3318      	adds	r3, #24
 80072e2:	4619      	mov	r1, r3
 80072e4:	480e      	ldr	r0, [pc, #56]	; (8007320 <xTaskRemoveFromEventList+0xbc>)
 80072e6:	f7fe fd0a 	bl	8005cfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ee:	4b0d      	ldr	r3, [pc, #52]	; (8007324 <xTaskRemoveFromEventList+0xc0>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d905      	bls.n	8007304 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072f8:	2301      	movs	r3, #1
 80072fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072fc:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <xTaskRemoveFromEventList+0xc4>)
 80072fe:	2201      	movs	r2, #1
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	e001      	b.n	8007308 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007304:	2300      	movs	r3, #0
 8007306:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007308:	697b      	ldr	r3, [r7, #20]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3718      	adds	r7, #24
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	24000d0c 	.word	0x24000d0c
 8007318:	24000cec 	.word	0x24000cec
 800731c:	24000814 	.word	0x24000814
 8007320:	24000ca4 	.word	0x24000ca4
 8007324:	24000810 	.word	0x24000810
 8007328:	24000cf8 	.word	0x24000cf8

0800732c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007334:	4b06      	ldr	r3, [pc, #24]	; (8007350 <vTaskInternalSetTimeOutState+0x24>)
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800733c:	4b05      	ldr	r3, [pc, #20]	; (8007354 <vTaskInternalSetTimeOutState+0x28>)
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	605a      	str	r2, [r3, #4]
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	24000cfc 	.word	0x24000cfc
 8007354:	24000ce8 	.word	0x24000ce8

08007358 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	613b      	str	r3, [r7, #16]
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10a      	bne.n	800739a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	60fb      	str	r3, [r7, #12]
}
 8007396:	bf00      	nop
 8007398:	e7fe      	b.n	8007398 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800739a:	f000 fe83 	bl	80080a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800739e:	4b1d      	ldr	r3, [pc, #116]	; (8007414 <xTaskCheckForTimeOut+0xbc>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073b6:	d102      	bne.n	80073be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073b8:	2300      	movs	r3, #0
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	e023      	b.n	8007406 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4b15      	ldr	r3, [pc, #84]	; (8007418 <xTaskCheckForTimeOut+0xc0>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d007      	beq.n	80073da <xTaskCheckForTimeOut+0x82>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	69ba      	ldr	r2, [r7, #24]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d302      	bcc.n	80073da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073d4:	2301      	movs	r3, #1
 80073d6:	61fb      	str	r3, [r7, #28]
 80073d8:	e015      	b.n	8007406 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d20b      	bcs.n	80073fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	1ad2      	subs	r2, r2, r3
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff ff9b 	bl	800732c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073f6:	2300      	movs	r3, #0
 80073f8:	61fb      	str	r3, [r7, #28]
 80073fa:	e004      	b.n	8007406 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2200      	movs	r2, #0
 8007400:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007402:	2301      	movs	r3, #1
 8007404:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007406:	f000 fe7d 	bl	8008104 <vPortExitCritical>

	return xReturn;
 800740a:	69fb      	ldr	r3, [r7, #28]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3720      	adds	r7, #32
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	24000ce8 	.word	0x24000ce8
 8007418:	24000cfc 	.word	0x24000cfc

0800741c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007420:	4b03      	ldr	r3, [pc, #12]	; (8007430 <vTaskMissedYield+0x14>)
 8007422:	2201      	movs	r2, #1
 8007424:	601a      	str	r2, [r3, #0]
}
 8007426:	bf00      	nop
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	24000cf8 	.word	0x24000cf8

08007434 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800743c:	f000 f852 	bl	80074e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007440:	4b06      	ldr	r3, [pc, #24]	; (800745c <prvIdleTask+0x28>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d9f9      	bls.n	800743c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007448:	4b05      	ldr	r3, [pc, #20]	; (8007460 <prvIdleTask+0x2c>)
 800744a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007458:	e7f0      	b.n	800743c <prvIdleTask+0x8>
 800745a:	bf00      	nop
 800745c:	24000814 	.word	0x24000814
 8007460:	e000ed04 	.word	0xe000ed04

08007464 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800746a:	2300      	movs	r3, #0
 800746c:	607b      	str	r3, [r7, #4]
 800746e:	e00c      	b.n	800748a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4a12      	ldr	r2, [pc, #72]	; (80074c4 <prvInitialiseTaskLists+0x60>)
 800747c:	4413      	add	r3, r2
 800747e:	4618      	mov	r0, r3
 8007480:	f7fe fc10 	bl	8005ca4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3301      	adds	r3, #1
 8007488:	607b      	str	r3, [r7, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b37      	cmp	r3, #55	; 0x37
 800748e:	d9ef      	bls.n	8007470 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007490:	480d      	ldr	r0, [pc, #52]	; (80074c8 <prvInitialiseTaskLists+0x64>)
 8007492:	f7fe fc07 	bl	8005ca4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007496:	480d      	ldr	r0, [pc, #52]	; (80074cc <prvInitialiseTaskLists+0x68>)
 8007498:	f7fe fc04 	bl	8005ca4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800749c:	480c      	ldr	r0, [pc, #48]	; (80074d0 <prvInitialiseTaskLists+0x6c>)
 800749e:	f7fe fc01 	bl	8005ca4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074a2:	480c      	ldr	r0, [pc, #48]	; (80074d4 <prvInitialiseTaskLists+0x70>)
 80074a4:	f7fe fbfe 	bl	8005ca4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074a8:	480b      	ldr	r0, [pc, #44]	; (80074d8 <prvInitialiseTaskLists+0x74>)
 80074aa:	f7fe fbfb 	bl	8005ca4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074ae:	4b0b      	ldr	r3, [pc, #44]	; (80074dc <prvInitialiseTaskLists+0x78>)
 80074b0:	4a05      	ldr	r2, [pc, #20]	; (80074c8 <prvInitialiseTaskLists+0x64>)
 80074b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074b4:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <prvInitialiseTaskLists+0x7c>)
 80074b6:	4a05      	ldr	r2, [pc, #20]	; (80074cc <prvInitialiseTaskLists+0x68>)
 80074b8:	601a      	str	r2, [r3, #0]
}
 80074ba:	bf00      	nop
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	24000814 	.word	0x24000814
 80074c8:	24000c74 	.word	0x24000c74
 80074cc:	24000c88 	.word	0x24000c88
 80074d0:	24000ca4 	.word	0x24000ca4
 80074d4:	24000cb8 	.word	0x24000cb8
 80074d8:	24000cd0 	.word	0x24000cd0
 80074dc:	24000c9c 	.word	0x24000c9c
 80074e0:	24000ca0 	.word	0x24000ca0

080074e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074ea:	e019      	b.n	8007520 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074ec:	f000 fdda 	bl	80080a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074f0:	4b10      	ldr	r3, [pc, #64]	; (8007534 <prvCheckTasksWaitingTermination+0x50>)
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3304      	adds	r3, #4
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fe fc5b 	bl	8005db8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007502:	4b0d      	ldr	r3, [pc, #52]	; (8007538 <prvCheckTasksWaitingTermination+0x54>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3b01      	subs	r3, #1
 8007508:	4a0b      	ldr	r2, [pc, #44]	; (8007538 <prvCheckTasksWaitingTermination+0x54>)
 800750a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800750c:	4b0b      	ldr	r3, [pc, #44]	; (800753c <prvCheckTasksWaitingTermination+0x58>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3b01      	subs	r3, #1
 8007512:	4a0a      	ldr	r2, [pc, #40]	; (800753c <prvCheckTasksWaitingTermination+0x58>)
 8007514:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007516:	f000 fdf5 	bl	8008104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f810 	bl	8007540 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007520:	4b06      	ldr	r3, [pc, #24]	; (800753c <prvCheckTasksWaitingTermination+0x58>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1e1      	bne.n	80074ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007528:	bf00      	nop
 800752a:	bf00      	nop
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	24000cb8 	.word	0x24000cb8
 8007538:	24000ce4 	.word	0x24000ce4
 800753c:	24000ccc 	.word	0x24000ccc

08007540 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3354      	adds	r3, #84	; 0x54
 800754c:	4618      	mov	r0, r3
 800754e:	f001 f909 	bl	8008764 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007558:	2b00      	cmp	r3, #0
 800755a:	d108      	bne.n	800756e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007560:	4618      	mov	r0, r3
 8007562:	f000 ff8d 	bl	8008480 <vPortFree>
				vPortFree( pxTCB );
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 ff8a 	bl	8008480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800756c:	e018      	b.n	80075a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007574:	2b01      	cmp	r3, #1
 8007576:	d103      	bne.n	8007580 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 ff81 	bl	8008480 <vPortFree>
	}
 800757e:	e00f      	b.n	80075a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007586:	2b02      	cmp	r3, #2
 8007588:	d00a      	beq.n	80075a0 <prvDeleteTCB+0x60>
	__asm volatile
 800758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	60fb      	str	r3, [r7, #12]
}
 800759c:	bf00      	nop
 800759e:	e7fe      	b.n	800759e <prvDeleteTCB+0x5e>
	}
 80075a0:	bf00      	nop
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075ae:	4b0c      	ldr	r3, [pc, #48]	; (80075e0 <prvResetNextTaskUnblockTime+0x38>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d104      	bne.n	80075c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075b8:	4b0a      	ldr	r3, [pc, #40]	; (80075e4 <prvResetNextTaskUnblockTime+0x3c>)
 80075ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075c0:	e008      	b.n	80075d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075c2:	4b07      	ldr	r3, [pc, #28]	; (80075e0 <prvResetNextTaskUnblockTime+0x38>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	4a04      	ldr	r2, [pc, #16]	; (80075e4 <prvResetNextTaskUnblockTime+0x3c>)
 80075d2:	6013      	str	r3, [r2, #0]
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	24000c9c 	.word	0x24000c9c
 80075e4:	24000d04 	.word	0x24000d04

080075e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075ee:	4b0b      	ldr	r3, [pc, #44]	; (800761c <xTaskGetSchedulerState+0x34>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d102      	bne.n	80075fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075f6:	2301      	movs	r3, #1
 80075f8:	607b      	str	r3, [r7, #4]
 80075fa:	e008      	b.n	800760e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075fc:	4b08      	ldr	r3, [pc, #32]	; (8007620 <xTaskGetSchedulerState+0x38>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d102      	bne.n	800760a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007604:	2302      	movs	r3, #2
 8007606:	607b      	str	r3, [r7, #4]
 8007608:	e001      	b.n	800760e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800760a:	2300      	movs	r3, #0
 800760c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800760e:	687b      	ldr	r3, [r7, #4]
	}
 8007610:	4618      	mov	r0, r3
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	24000cf0 	.word	0x24000cf0
 8007620:	24000d0c 	.word	0x24000d0c

08007624 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007630:	2300      	movs	r3, #0
 8007632:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d056      	beq.n	80076e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800763a:	4b2e      	ldr	r3, [pc, #184]	; (80076f4 <xTaskPriorityDisinherit+0xd0>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	429a      	cmp	r2, r3
 8007642:	d00a      	beq.n	800765a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	60fb      	str	r3, [r7, #12]
}
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10a      	bne.n	8007678 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	60bb      	str	r3, [r7, #8]
}
 8007674:	bf00      	nop
 8007676:	e7fe      	b.n	8007676 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767c:	1e5a      	subs	r2, r3, #1
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800768a:	429a      	cmp	r2, r3
 800768c:	d02c      	beq.n	80076e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007692:	2b00      	cmp	r3, #0
 8007694:	d128      	bne.n	80076e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	3304      	adds	r3, #4
 800769a:	4618      	mov	r0, r3
 800769c:	f7fe fb8c 	bl	8005db8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b8:	4b0f      	ldr	r3, [pc, #60]	; (80076f8 <xTaskPriorityDisinherit+0xd4>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d903      	bls.n	80076c8 <xTaskPriorityDisinherit+0xa4>
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c4:	4a0c      	ldr	r2, [pc, #48]	; (80076f8 <xTaskPriorityDisinherit+0xd4>)
 80076c6:	6013      	str	r3, [r2, #0]
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076cc:	4613      	mov	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4a09      	ldr	r2, [pc, #36]	; (80076fc <xTaskPriorityDisinherit+0xd8>)
 80076d6:	441a      	add	r2, r3
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	3304      	adds	r3, #4
 80076dc:	4619      	mov	r1, r3
 80076de:	4610      	mov	r0, r2
 80076e0:	f7fe fb0d 	bl	8005cfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076e4:	2301      	movs	r3, #1
 80076e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076e8:	697b      	ldr	r3, [r7, #20]
	}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	24000810 	.word	0x24000810
 80076f8:	24000cec 	.word	0x24000cec
 80076fc:	24000814 	.word	0x24000814

08007700 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800770a:	4b21      	ldr	r3, [pc, #132]	; (8007790 <prvAddCurrentTaskToDelayedList+0x90>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007710:	4b20      	ldr	r3, [pc, #128]	; (8007794 <prvAddCurrentTaskToDelayedList+0x94>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3304      	adds	r3, #4
 8007716:	4618      	mov	r0, r3
 8007718:	f7fe fb4e 	bl	8005db8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007722:	d10a      	bne.n	800773a <prvAddCurrentTaskToDelayedList+0x3a>
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d007      	beq.n	800773a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800772a:	4b1a      	ldr	r3, [pc, #104]	; (8007794 <prvAddCurrentTaskToDelayedList+0x94>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3304      	adds	r3, #4
 8007730:	4619      	mov	r1, r3
 8007732:	4819      	ldr	r0, [pc, #100]	; (8007798 <prvAddCurrentTaskToDelayedList+0x98>)
 8007734:	f7fe fae3 	bl	8005cfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007738:	e026      	b.n	8007788 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4413      	add	r3, r2
 8007740:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007742:	4b14      	ldr	r3, [pc, #80]	; (8007794 <prvAddCurrentTaskToDelayedList+0x94>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	429a      	cmp	r2, r3
 8007750:	d209      	bcs.n	8007766 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007752:	4b12      	ldr	r3, [pc, #72]	; (800779c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	4b0f      	ldr	r3, [pc, #60]	; (8007794 <prvAddCurrentTaskToDelayedList+0x94>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3304      	adds	r3, #4
 800775c:	4619      	mov	r1, r3
 800775e:	4610      	mov	r0, r2
 8007760:	f7fe faf1 	bl	8005d46 <vListInsert>
}
 8007764:	e010      	b.n	8007788 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007766:	4b0e      	ldr	r3, [pc, #56]	; (80077a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	4b0a      	ldr	r3, [pc, #40]	; (8007794 <prvAddCurrentTaskToDelayedList+0x94>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3304      	adds	r3, #4
 8007770:	4619      	mov	r1, r3
 8007772:	4610      	mov	r0, r2
 8007774:	f7fe fae7 	bl	8005d46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007778:	4b0a      	ldr	r3, [pc, #40]	; (80077a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	429a      	cmp	r2, r3
 8007780:	d202      	bcs.n	8007788 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007782:	4a08      	ldr	r2, [pc, #32]	; (80077a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	6013      	str	r3, [r2, #0]
}
 8007788:	bf00      	nop
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	24000ce8 	.word	0x24000ce8
 8007794:	24000810 	.word	0x24000810
 8007798:	24000cd0 	.word	0x24000cd0
 800779c:	24000ca0 	.word	0x24000ca0
 80077a0:	24000c9c 	.word	0x24000c9c
 80077a4:	24000d04 	.word	0x24000d04

080077a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08a      	sub	sp, #40	; 0x28
 80077ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80077b2:	f000 fb07 	bl	8007dc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80077b6:	4b1c      	ldr	r3, [pc, #112]	; (8007828 <xTimerCreateTimerTask+0x80>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d021      	beq.n	8007802 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80077c2:	2300      	movs	r3, #0
 80077c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80077c6:	1d3a      	adds	r2, r7, #4
 80077c8:	f107 0108 	add.w	r1, r7, #8
 80077cc:	f107 030c 	add.w	r3, r7, #12
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fe fa4d 	bl	8005c70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80077d6:	6879      	ldr	r1, [r7, #4]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	9202      	str	r2, [sp, #8]
 80077de:	9301      	str	r3, [sp, #4]
 80077e0:	2302      	movs	r3, #2
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	2300      	movs	r3, #0
 80077e6:	460a      	mov	r2, r1
 80077e8:	4910      	ldr	r1, [pc, #64]	; (800782c <xTimerCreateTimerTask+0x84>)
 80077ea:	4811      	ldr	r0, [pc, #68]	; (8007830 <xTimerCreateTimerTask+0x88>)
 80077ec:	f7ff f8b4 	bl	8006958 <xTaskCreateStatic>
 80077f0:	4603      	mov	r3, r0
 80077f2:	4a10      	ldr	r2, [pc, #64]	; (8007834 <xTimerCreateTimerTask+0x8c>)
 80077f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80077f6:	4b0f      	ldr	r3, [pc, #60]	; (8007834 <xTimerCreateTimerTask+0x8c>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80077fe:	2301      	movs	r3, #1
 8007800:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10a      	bne.n	800781e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	613b      	str	r3, [r7, #16]
}
 800781a:	bf00      	nop
 800781c:	e7fe      	b.n	800781c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800781e:	697b      	ldr	r3, [r7, #20]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3718      	adds	r7, #24
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	24000d40 	.word	0x24000d40
 800782c:	08008a98 	.word	0x08008a98
 8007830:	0800796d 	.word	0x0800796d
 8007834:	24000d44 	.word	0x24000d44

08007838 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b08a      	sub	sp, #40	; 0x28
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
 8007844:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007846:	2300      	movs	r3, #0
 8007848:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10a      	bne.n	8007866 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	623b      	str	r3, [r7, #32]
}
 8007862:	bf00      	nop
 8007864:	e7fe      	b.n	8007864 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007866:	4b1a      	ldr	r3, [pc, #104]	; (80078d0 <xTimerGenericCommand+0x98>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d02a      	beq.n	80078c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b05      	cmp	r3, #5
 800787e:	dc18      	bgt.n	80078b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007880:	f7ff feb2 	bl	80075e8 <xTaskGetSchedulerState>
 8007884:	4603      	mov	r3, r0
 8007886:	2b02      	cmp	r3, #2
 8007888:	d109      	bne.n	800789e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800788a:	4b11      	ldr	r3, [pc, #68]	; (80078d0 <xTimerGenericCommand+0x98>)
 800788c:	6818      	ldr	r0, [r3, #0]
 800788e:	f107 0110 	add.w	r1, r7, #16
 8007892:	2300      	movs	r3, #0
 8007894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007896:	f7fe fbf7 	bl	8006088 <xQueueGenericSend>
 800789a:	6278      	str	r0, [r7, #36]	; 0x24
 800789c:	e012      	b.n	80078c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800789e:	4b0c      	ldr	r3, [pc, #48]	; (80078d0 <xTimerGenericCommand+0x98>)
 80078a0:	6818      	ldr	r0, [r3, #0]
 80078a2:	f107 0110 	add.w	r1, r7, #16
 80078a6:	2300      	movs	r3, #0
 80078a8:	2200      	movs	r2, #0
 80078aa:	f7fe fbed 	bl	8006088 <xQueueGenericSend>
 80078ae:	6278      	str	r0, [r7, #36]	; 0x24
 80078b0:	e008      	b.n	80078c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80078b2:	4b07      	ldr	r3, [pc, #28]	; (80078d0 <xTimerGenericCommand+0x98>)
 80078b4:	6818      	ldr	r0, [r3, #0]
 80078b6:	f107 0110 	add.w	r1, r7, #16
 80078ba:	2300      	movs	r3, #0
 80078bc:	683a      	ldr	r2, [r7, #0]
 80078be:	f7fe fce1 	bl	8006284 <xQueueGenericSendFromISR>
 80078c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3728      	adds	r7, #40	; 0x28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	24000d40 	.word	0x24000d40

080078d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af02      	add	r7, sp, #8
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078de:	4b22      	ldr	r3, [pc, #136]	; (8007968 <prvProcessExpiredTimer+0x94>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	3304      	adds	r3, #4
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fe fa63 	bl	8005db8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078f8:	f003 0304 	and.w	r3, r3, #4
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d022      	beq.n	8007946 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	699a      	ldr	r2, [r3, #24]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	18d1      	adds	r1, r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	6978      	ldr	r0, [r7, #20]
 800790e:	f000 f8d1 	bl	8007ab4 <prvInsertTimerInActiveList>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d01f      	beq.n	8007958 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007918:	2300      	movs	r3, #0
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	2300      	movs	r3, #0
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	2100      	movs	r1, #0
 8007922:	6978      	ldr	r0, [r7, #20]
 8007924:	f7ff ff88 	bl	8007838 <xTimerGenericCommand>
 8007928:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d113      	bne.n	8007958 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	60fb      	str	r3, [r7, #12]
}
 8007942:	bf00      	nop
 8007944:	e7fe      	b.n	8007944 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800794c:	f023 0301 	bic.w	r3, r3, #1
 8007950:	b2da      	uxtb	r2, r3
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	6a1b      	ldr	r3, [r3, #32]
 800795c:	6978      	ldr	r0, [r7, #20]
 800795e:	4798      	blx	r3
}
 8007960:	bf00      	nop
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	24000d38 	.word	0x24000d38

0800796c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007974:	f107 0308 	add.w	r3, r7, #8
 8007978:	4618      	mov	r0, r3
 800797a:	f000 f857 	bl	8007a2c <prvGetNextExpireTime>
 800797e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	4619      	mov	r1, r3
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 f803 	bl	8007990 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800798a:	f000 f8d5 	bl	8007b38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800798e:	e7f1      	b.n	8007974 <prvTimerTask+0x8>

08007990 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800799a:	f7ff fa39 	bl	8006e10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800799e:	f107 0308 	add.w	r3, r7, #8
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 f866 	bl	8007a74 <prvSampleTimeNow>
 80079a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d130      	bne.n	8007a12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10a      	bne.n	80079cc <prvProcessTimerOrBlockTask+0x3c>
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d806      	bhi.n	80079cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80079be:	f7ff fa35 	bl	8006e2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80079c2:	68f9      	ldr	r1, [r7, #12]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff ff85 	bl	80078d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80079ca:	e024      	b.n	8007a16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d008      	beq.n	80079e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80079d2:	4b13      	ldr	r3, [pc, #76]	; (8007a20 <prvProcessTimerOrBlockTask+0x90>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d101      	bne.n	80079e0 <prvProcessTimerOrBlockTask+0x50>
 80079dc:	2301      	movs	r3, #1
 80079de:	e000      	b.n	80079e2 <prvProcessTimerOrBlockTask+0x52>
 80079e0:	2300      	movs	r3, #0
 80079e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80079e4:	4b0f      	ldr	r3, [pc, #60]	; (8007a24 <prvProcessTimerOrBlockTask+0x94>)
 80079e6:	6818      	ldr	r0, [r3, #0]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	4619      	mov	r1, r3
 80079f2:	f7fe ff7d 	bl	80068f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80079f6:	f7ff fa19 	bl	8006e2c <xTaskResumeAll>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10a      	bne.n	8007a16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a00:	4b09      	ldr	r3, [pc, #36]	; (8007a28 <prvProcessTimerOrBlockTask+0x98>)
 8007a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	f3bf 8f6f 	isb	sy
}
 8007a10:	e001      	b.n	8007a16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a12:	f7ff fa0b 	bl	8006e2c <xTaskResumeAll>
}
 8007a16:	bf00      	nop
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	24000d3c 	.word	0x24000d3c
 8007a24:	24000d40 	.word	0x24000d40
 8007a28:	e000ed04 	.word	0xe000ed04

08007a2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a34:	4b0e      	ldr	r3, [pc, #56]	; (8007a70 <prvGetNextExpireTime+0x44>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d101      	bne.n	8007a42 <prvGetNextExpireTime+0x16>
 8007a3e:	2201      	movs	r2, #1
 8007a40:	e000      	b.n	8007a44 <prvGetNextExpireTime+0x18>
 8007a42:	2200      	movs	r2, #0
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d105      	bne.n	8007a5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a50:	4b07      	ldr	r3, [pc, #28]	; (8007a70 <prvGetNextExpireTime+0x44>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	60fb      	str	r3, [r7, #12]
 8007a5a:	e001      	b.n	8007a60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a60:	68fb      	ldr	r3, [r7, #12]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	24000d38 	.word	0x24000d38

08007a74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a7c:	f7ff fa74 	bl	8006f68 <xTaskGetTickCount>
 8007a80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a82:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <prvSampleTimeNow+0x3c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d205      	bcs.n	8007a98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a8c:	f000 f936 	bl	8007cfc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	e002      	b.n	8007a9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a9e:	4a04      	ldr	r2, [pc, #16]	; (8007ab0 <prvSampleTimeNow+0x3c>)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	24000d48 	.word	0x24000d48

08007ab4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d812      	bhi.n	8007b00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	1ad2      	subs	r2, r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d302      	bcc.n	8007aee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	617b      	str	r3, [r7, #20]
 8007aec:	e01b      	b.n	8007b26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007aee:	4b10      	ldr	r3, [pc, #64]	; (8007b30 <prvInsertTimerInActiveList+0x7c>)
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3304      	adds	r3, #4
 8007af6:	4619      	mov	r1, r3
 8007af8:	4610      	mov	r0, r2
 8007afa:	f7fe f924 	bl	8005d46 <vListInsert>
 8007afe:	e012      	b.n	8007b26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d206      	bcs.n	8007b16 <prvInsertTimerInActiveList+0x62>
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d302      	bcc.n	8007b16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b10:	2301      	movs	r3, #1
 8007b12:	617b      	str	r3, [r7, #20]
 8007b14:	e007      	b.n	8007b26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b16:	4b07      	ldr	r3, [pc, #28]	; (8007b34 <prvInsertTimerInActiveList+0x80>)
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4610      	mov	r0, r2
 8007b22:	f7fe f910 	bl	8005d46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b26:	697b      	ldr	r3, [r7, #20]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3718      	adds	r7, #24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	24000d3c 	.word	0x24000d3c
 8007b34:	24000d38 	.word	0x24000d38

08007b38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b08e      	sub	sp, #56	; 0x38
 8007b3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b3e:	e0ca      	b.n	8007cd6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	da18      	bge.n	8007b78 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b46:	1d3b      	adds	r3, r7, #4
 8007b48:	3304      	adds	r3, #4
 8007b4a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10a      	bne.n	8007b68 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	61fb      	str	r3, [r7, #28]
}
 8007b64:	bf00      	nop
 8007b66:	e7fe      	b.n	8007b66 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b6e:	6850      	ldr	r0, [r2, #4]
 8007b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b72:	6892      	ldr	r2, [r2, #8]
 8007b74:	4611      	mov	r1, r2
 8007b76:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f2c0 80aa 	blt.w	8007cd4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d004      	beq.n	8007b96 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fe f911 	bl	8005db8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b96:	463b      	mov	r3, r7
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff ff6b 	bl	8007a74 <prvSampleTimeNow>
 8007b9e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b09      	cmp	r3, #9
 8007ba4:	f200 8097 	bhi.w	8007cd6 <prvProcessReceivedCommands+0x19e>
 8007ba8:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <prvProcessReceivedCommands+0x78>)
 8007baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bae:	bf00      	nop
 8007bb0:	08007bd9 	.word	0x08007bd9
 8007bb4:	08007bd9 	.word	0x08007bd9
 8007bb8:	08007bd9 	.word	0x08007bd9
 8007bbc:	08007c4d 	.word	0x08007c4d
 8007bc0:	08007c61 	.word	0x08007c61
 8007bc4:	08007cab 	.word	0x08007cab
 8007bc8:	08007bd9 	.word	0x08007bd9
 8007bcc:	08007bd9 	.word	0x08007bd9
 8007bd0:	08007c4d 	.word	0x08007c4d
 8007bd4:	08007c61 	.word	0x08007c61
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bde:	f043 0301 	orr.w	r3, r3, #1
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	18d1      	adds	r1, r2, r3
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bf8:	f7ff ff5c 	bl	8007ab4 <prvInsertTimerInActiveList>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d069      	beq.n	8007cd6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d05e      	beq.n	8007cd6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	441a      	add	r2, r3
 8007c20:	2300      	movs	r3, #0
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	2300      	movs	r3, #0
 8007c26:	2100      	movs	r1, #0
 8007c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c2a:	f7ff fe05 	bl	8007838 <xTimerGenericCommand>
 8007c2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c30:	6a3b      	ldr	r3, [r7, #32]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d14f      	bne.n	8007cd6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	61bb      	str	r3, [r7, #24]
}
 8007c48:	bf00      	nop
 8007c4a:	e7fe      	b.n	8007c4a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c52:	f023 0301 	bic.w	r3, r3, #1
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007c5e:	e03a      	b.n	8007cd6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c66:	f043 0301 	orr.w	r3, r3, #1
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c76:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10a      	bne.n	8007c96 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	617b      	str	r3, [r7, #20]
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c98:	699a      	ldr	r2, [r3, #24]
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9c:	18d1      	adds	r1, r2, r3
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca4:	f7ff ff06 	bl	8007ab4 <prvInsertTimerInActiveList>
					break;
 8007ca8:	e015      	b.n	8007cd6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cb0:	f003 0302 	and.w	r3, r3, #2
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d103      	bne.n	8007cc0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cba:	f000 fbe1 	bl	8008480 <vPortFree>
 8007cbe:	e00a      	b.n	8007cd6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cc6:	f023 0301 	bic.w	r3, r3, #1
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007cd2:	e000      	b.n	8007cd6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007cd4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cd6:	4b08      	ldr	r3, [pc, #32]	; (8007cf8 <prvProcessReceivedCommands+0x1c0>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	1d39      	adds	r1, r7, #4
 8007cdc:	2200      	movs	r2, #0
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fe fb6c 	bl	80063bc <xQueueReceive>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f47f af2a 	bne.w	8007b40 <prvProcessReceivedCommands+0x8>
	}
}
 8007cec:	bf00      	nop
 8007cee:	bf00      	nop
 8007cf0:	3730      	adds	r7, #48	; 0x30
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	24000d40 	.word	0x24000d40

08007cfc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d02:	e048      	b.n	8007d96 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d04:	4b2d      	ldr	r3, [pc, #180]	; (8007dbc <prvSwitchTimerLists+0xc0>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d0e:	4b2b      	ldr	r3, [pc, #172]	; (8007dbc <prvSwitchTimerLists+0xc0>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3304      	adds	r3, #4
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fe f84b 	bl	8005db8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d30:	f003 0304 	and.w	r3, r3, #4
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d02e      	beq.n	8007d96 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	4413      	add	r3, r2
 8007d40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d90e      	bls.n	8007d68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d56:	4b19      	ldr	r3, [pc, #100]	; (8007dbc <prvSwitchTimerLists+0xc0>)
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	4619      	mov	r1, r3
 8007d60:	4610      	mov	r0, r2
 8007d62:	f7fd fff0 	bl	8005d46 <vListInsert>
 8007d66:	e016      	b.n	8007d96 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d68:	2300      	movs	r3, #0
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	2100      	movs	r1, #0
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f7ff fd60 	bl	8007838 <xTimerGenericCommand>
 8007d78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10a      	bne.n	8007d96 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	603b      	str	r3, [r7, #0]
}
 8007d92:	bf00      	nop
 8007d94:	e7fe      	b.n	8007d94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d96:	4b09      	ldr	r3, [pc, #36]	; (8007dbc <prvSwitchTimerLists+0xc0>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1b1      	bne.n	8007d04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007da0:	4b06      	ldr	r3, [pc, #24]	; (8007dbc <prvSwitchTimerLists+0xc0>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007da6:	4b06      	ldr	r3, [pc, #24]	; (8007dc0 <prvSwitchTimerLists+0xc4>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a04      	ldr	r2, [pc, #16]	; (8007dbc <prvSwitchTimerLists+0xc0>)
 8007dac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007dae:	4a04      	ldr	r2, [pc, #16]	; (8007dc0 <prvSwitchTimerLists+0xc4>)
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	6013      	str	r3, [r2, #0]
}
 8007db4:	bf00      	nop
 8007db6:	3718      	adds	r7, #24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	24000d38 	.word	0x24000d38
 8007dc0:	24000d3c 	.word	0x24000d3c

08007dc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007dca:	f000 f96b 	bl	80080a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007dce:	4b15      	ldr	r3, [pc, #84]	; (8007e24 <prvCheckForValidListAndQueue+0x60>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d120      	bne.n	8007e18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007dd6:	4814      	ldr	r0, [pc, #80]	; (8007e28 <prvCheckForValidListAndQueue+0x64>)
 8007dd8:	f7fd ff64 	bl	8005ca4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ddc:	4813      	ldr	r0, [pc, #76]	; (8007e2c <prvCheckForValidListAndQueue+0x68>)
 8007dde:	f7fd ff61 	bl	8005ca4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007de2:	4b13      	ldr	r3, [pc, #76]	; (8007e30 <prvCheckForValidListAndQueue+0x6c>)
 8007de4:	4a10      	ldr	r2, [pc, #64]	; (8007e28 <prvCheckForValidListAndQueue+0x64>)
 8007de6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007de8:	4b12      	ldr	r3, [pc, #72]	; (8007e34 <prvCheckForValidListAndQueue+0x70>)
 8007dea:	4a10      	ldr	r2, [pc, #64]	; (8007e2c <prvCheckForValidListAndQueue+0x68>)
 8007dec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007dee:	2300      	movs	r3, #0
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	4b11      	ldr	r3, [pc, #68]	; (8007e38 <prvCheckForValidListAndQueue+0x74>)
 8007df4:	4a11      	ldr	r2, [pc, #68]	; (8007e3c <prvCheckForValidListAndQueue+0x78>)
 8007df6:	2110      	movs	r1, #16
 8007df8:	200a      	movs	r0, #10
 8007dfa:	f7fe f86f 	bl	8005edc <xQueueGenericCreateStatic>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	4a08      	ldr	r2, [pc, #32]	; (8007e24 <prvCheckForValidListAndQueue+0x60>)
 8007e02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e04:	4b07      	ldr	r3, [pc, #28]	; (8007e24 <prvCheckForValidListAndQueue+0x60>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d005      	beq.n	8007e18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e0c:	4b05      	ldr	r3, [pc, #20]	; (8007e24 <prvCheckForValidListAndQueue+0x60>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	490b      	ldr	r1, [pc, #44]	; (8007e40 <prvCheckForValidListAndQueue+0x7c>)
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fe fd42 	bl	800689c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e18:	f000 f974 	bl	8008104 <vPortExitCritical>
}
 8007e1c:	bf00      	nop
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	24000d40 	.word	0x24000d40
 8007e28:	24000d10 	.word	0x24000d10
 8007e2c:	24000d24 	.word	0x24000d24
 8007e30:	24000d38 	.word	0x24000d38
 8007e34:	24000d3c 	.word	0x24000d3c
 8007e38:	24000dec 	.word	0x24000dec
 8007e3c:	24000d4c 	.word	0x24000d4c
 8007e40:	08008aa0 	.word	0x08008aa0

08007e44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3b04      	subs	r3, #4
 8007e54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	3b04      	subs	r3, #4
 8007e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f023 0201 	bic.w	r2, r3, #1
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	3b04      	subs	r3, #4
 8007e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e74:	4a0c      	ldr	r2, [pc, #48]	; (8007ea8 <pxPortInitialiseStack+0x64>)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	3b14      	subs	r3, #20
 8007e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3b04      	subs	r3, #4
 8007e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f06f 0202 	mvn.w	r2, #2
 8007e92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	3b20      	subs	r3, #32
 8007e98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	08007ead 	.word	0x08007ead

08007eac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007eb6:	4b12      	ldr	r3, [pc, #72]	; (8007f00 <prvTaskExitError+0x54>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ebe:	d00a      	beq.n	8007ed6 <prvTaskExitError+0x2a>
	__asm volatile
 8007ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	60fb      	str	r3, [r7, #12]
}
 8007ed2:	bf00      	nop
 8007ed4:	e7fe      	b.n	8007ed4 <prvTaskExitError+0x28>
	__asm volatile
 8007ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	60bb      	str	r3, [r7, #8]
}
 8007ee8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007eea:	bf00      	nop
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0fc      	beq.n	8007eec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	24000010 	.word	0x24000010
	...

08007f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f10:	4b07      	ldr	r3, [pc, #28]	; (8007f30 <pxCurrentTCBConst2>)
 8007f12:	6819      	ldr	r1, [r3, #0]
 8007f14:	6808      	ldr	r0, [r1, #0]
 8007f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1a:	f380 8809 	msr	PSP, r0
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f04f 0000 	mov.w	r0, #0
 8007f26:	f380 8811 	msr	BASEPRI, r0
 8007f2a:	4770      	bx	lr
 8007f2c:	f3af 8000 	nop.w

08007f30 <pxCurrentTCBConst2>:
 8007f30:	24000810 	.word	0x24000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f34:	bf00      	nop
 8007f36:	bf00      	nop

08007f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f38:	4808      	ldr	r0, [pc, #32]	; (8007f5c <prvPortStartFirstTask+0x24>)
 8007f3a:	6800      	ldr	r0, [r0, #0]
 8007f3c:	6800      	ldr	r0, [r0, #0]
 8007f3e:	f380 8808 	msr	MSP, r0
 8007f42:	f04f 0000 	mov.w	r0, #0
 8007f46:	f380 8814 	msr	CONTROL, r0
 8007f4a:	b662      	cpsie	i
 8007f4c:	b661      	cpsie	f
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	df00      	svc	0
 8007f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f5a:	bf00      	nop
 8007f5c:	e000ed08 	.word	0xe000ed08

08007f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f66:	4b46      	ldr	r3, [pc, #280]	; (8008080 <xPortStartScheduler+0x120>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a46      	ldr	r2, [pc, #280]	; (8008084 <xPortStartScheduler+0x124>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d10a      	bne.n	8007f86 <xPortStartScheduler+0x26>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	613b      	str	r3, [r7, #16]
}
 8007f82:	bf00      	nop
 8007f84:	e7fe      	b.n	8007f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f86:	4b3e      	ldr	r3, [pc, #248]	; (8008080 <xPortStartScheduler+0x120>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a3f      	ldr	r2, [pc, #252]	; (8008088 <xPortStartScheduler+0x128>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d10a      	bne.n	8007fa6 <xPortStartScheduler+0x46>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	60fb      	str	r3, [r7, #12]
}
 8007fa2:	bf00      	nop
 8007fa4:	e7fe      	b.n	8007fa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fa6:	4b39      	ldr	r3, [pc, #228]	; (800808c <xPortStartScheduler+0x12c>)
 8007fa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	22ff      	movs	r2, #255	; 0xff
 8007fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	4b31      	ldr	r3, [pc, #196]	; (8008090 <xPortStartScheduler+0x130>)
 8007fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fce:	4b31      	ldr	r3, [pc, #196]	; (8008094 <xPortStartScheduler+0x134>)
 8007fd0:	2207      	movs	r2, #7
 8007fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fd4:	e009      	b.n	8007fea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007fd6:	4b2f      	ldr	r3, [pc, #188]	; (8008094 <xPortStartScheduler+0x134>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	4a2d      	ldr	r2, [pc, #180]	; (8008094 <xPortStartScheduler+0x134>)
 8007fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fea:	78fb      	ldrb	r3, [r7, #3]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff2:	2b80      	cmp	r3, #128	; 0x80
 8007ff4:	d0ef      	beq.n	8007fd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ff6:	4b27      	ldr	r3, [pc, #156]	; (8008094 <xPortStartScheduler+0x134>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f1c3 0307 	rsb	r3, r3, #7
 8007ffe:	2b04      	cmp	r3, #4
 8008000:	d00a      	beq.n	8008018 <xPortStartScheduler+0xb8>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	60bb      	str	r3, [r7, #8]
}
 8008014:	bf00      	nop
 8008016:	e7fe      	b.n	8008016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008018:	4b1e      	ldr	r3, [pc, #120]	; (8008094 <xPortStartScheduler+0x134>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	021b      	lsls	r3, r3, #8
 800801e:	4a1d      	ldr	r2, [pc, #116]	; (8008094 <xPortStartScheduler+0x134>)
 8008020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008022:	4b1c      	ldr	r3, [pc, #112]	; (8008094 <xPortStartScheduler+0x134>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800802a:	4a1a      	ldr	r2, [pc, #104]	; (8008094 <xPortStartScheduler+0x134>)
 800802c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	b2da      	uxtb	r2, r3
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008036:	4b18      	ldr	r3, [pc, #96]	; (8008098 <xPortStartScheduler+0x138>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a17      	ldr	r2, [pc, #92]	; (8008098 <xPortStartScheduler+0x138>)
 800803c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008042:	4b15      	ldr	r3, [pc, #84]	; (8008098 <xPortStartScheduler+0x138>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a14      	ldr	r2, [pc, #80]	; (8008098 <xPortStartScheduler+0x138>)
 8008048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800804c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800804e:	f000 f8dd 	bl	800820c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008052:	4b12      	ldr	r3, [pc, #72]	; (800809c <xPortStartScheduler+0x13c>)
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008058:	f000 f8fc 	bl	8008254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800805c:	4b10      	ldr	r3, [pc, #64]	; (80080a0 <xPortStartScheduler+0x140>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a0f      	ldr	r2, [pc, #60]	; (80080a0 <xPortStartScheduler+0x140>)
 8008062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008068:	f7ff ff66 	bl	8007f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800806c:	f7ff f846 	bl	80070fc <vTaskSwitchContext>
	prvTaskExitError();
 8008070:	f7ff ff1c 	bl	8007eac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3718      	adds	r7, #24
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	e000ed00 	.word	0xe000ed00
 8008084:	410fc271 	.word	0x410fc271
 8008088:	410fc270 	.word	0x410fc270
 800808c:	e000e400 	.word	0xe000e400
 8008090:	24000e3c 	.word	0x24000e3c
 8008094:	24000e40 	.word	0x24000e40
 8008098:	e000ed20 	.word	0xe000ed20
 800809c:	24000010 	.word	0x24000010
 80080a0:	e000ef34 	.word	0xe000ef34

080080a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
	__asm volatile
 80080aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	607b      	str	r3, [r7, #4]
}
 80080bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080be:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <vPortEnterCritical+0x58>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3301      	adds	r3, #1
 80080c4:	4a0d      	ldr	r2, [pc, #52]	; (80080fc <vPortEnterCritical+0x58>)
 80080c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080c8:	4b0c      	ldr	r3, [pc, #48]	; (80080fc <vPortEnterCritical+0x58>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d10f      	bne.n	80080f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080d0:	4b0b      	ldr	r3, [pc, #44]	; (8008100 <vPortEnterCritical+0x5c>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00a      	beq.n	80080f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	603b      	str	r3, [r7, #0]
}
 80080ec:	bf00      	nop
 80080ee:	e7fe      	b.n	80080ee <vPortEnterCritical+0x4a>
	}
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr
 80080fc:	24000010 	.word	0x24000010
 8008100:	e000ed04 	.word	0xe000ed04

08008104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800810a:	4b12      	ldr	r3, [pc, #72]	; (8008154 <vPortExitCritical+0x50>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10a      	bne.n	8008128 <vPortExitCritical+0x24>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	607b      	str	r3, [r7, #4]
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008128:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <vPortExitCritical+0x50>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	3b01      	subs	r3, #1
 800812e:	4a09      	ldr	r2, [pc, #36]	; (8008154 <vPortExitCritical+0x50>)
 8008130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008132:	4b08      	ldr	r3, [pc, #32]	; (8008154 <vPortExitCritical+0x50>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d105      	bne.n	8008146 <vPortExitCritical+0x42>
 800813a:	2300      	movs	r3, #0
 800813c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	f383 8811 	msr	BASEPRI, r3
}
 8008144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008146:	bf00      	nop
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	24000010 	.word	0x24000010
	...

08008160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008160:	f3ef 8009 	mrs	r0, PSP
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	4b15      	ldr	r3, [pc, #84]	; (80081c0 <pxCurrentTCBConst>)
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	f01e 0f10 	tst.w	lr, #16
 8008170:	bf08      	it	eq
 8008172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817a:	6010      	str	r0, [r2, #0]
 800817c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008184:	f380 8811 	msr	BASEPRI, r0
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f7fe ffb4 	bl	80070fc <vTaskSwitchContext>
 8008194:	f04f 0000 	mov.w	r0, #0
 8008198:	f380 8811 	msr	BASEPRI, r0
 800819c:	bc09      	pop	{r0, r3}
 800819e:	6819      	ldr	r1, [r3, #0]
 80081a0:	6808      	ldr	r0, [r1, #0]
 80081a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a6:	f01e 0f10 	tst.w	lr, #16
 80081aa:	bf08      	it	eq
 80081ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081b0:	f380 8809 	msr	PSP, r0
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	f3af 8000 	nop.w

080081c0 <pxCurrentTCBConst>:
 80081c0:	24000810 	.word	0x24000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop

080081c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	607b      	str	r3, [r7, #4]
}
 80081e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081e2:	f7fe fed1 	bl	8006f88 <xTaskIncrementTick>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d003      	beq.n	80081f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081ec:	4b06      	ldr	r3, [pc, #24]	; (8008208 <xPortSysTickHandler+0x40>)
 80081ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	2300      	movs	r3, #0
 80081f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	f383 8811 	msr	BASEPRI, r3
}
 80081fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008200:	bf00      	nop
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	e000ed04 	.word	0xe000ed04

0800820c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008210:	4b0b      	ldr	r3, [pc, #44]	; (8008240 <vPortSetupTimerInterrupt+0x34>)
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008216:	4b0b      	ldr	r3, [pc, #44]	; (8008244 <vPortSetupTimerInterrupt+0x38>)
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800821c:	4b0a      	ldr	r3, [pc, #40]	; (8008248 <vPortSetupTimerInterrupt+0x3c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a0a      	ldr	r2, [pc, #40]	; (800824c <vPortSetupTimerInterrupt+0x40>)
 8008222:	fba2 2303 	umull	r2, r3, r2, r3
 8008226:	099b      	lsrs	r3, r3, #6
 8008228:	4a09      	ldr	r2, [pc, #36]	; (8008250 <vPortSetupTimerInterrupt+0x44>)
 800822a:	3b01      	subs	r3, #1
 800822c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800822e:	4b04      	ldr	r3, [pc, #16]	; (8008240 <vPortSetupTimerInterrupt+0x34>)
 8008230:	2207      	movs	r2, #7
 8008232:	601a      	str	r2, [r3, #0]
}
 8008234:	bf00      	nop
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	e000e010 	.word	0xe000e010
 8008244:	e000e018 	.word	0xe000e018
 8008248:	24000000 	.word	0x24000000
 800824c:	10624dd3 	.word	0x10624dd3
 8008250:	e000e014 	.word	0xe000e014

08008254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008264 <vPortEnableVFP+0x10>
 8008258:	6801      	ldr	r1, [r0, #0]
 800825a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800825e:	6001      	str	r1, [r0, #0]
 8008260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008262:	bf00      	nop
 8008264:	e000ed88 	.word	0xe000ed88

08008268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800826e:	f3ef 8305 	mrs	r3, IPSR
 8008272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b0f      	cmp	r3, #15
 8008278:	d914      	bls.n	80082a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800827a:	4a17      	ldr	r2, [pc, #92]	; (80082d8 <vPortValidateInterruptPriority+0x70>)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008284:	4b15      	ldr	r3, [pc, #84]	; (80082dc <vPortValidateInterruptPriority+0x74>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	7afa      	ldrb	r2, [r7, #11]
 800828a:	429a      	cmp	r2, r3
 800828c:	d20a      	bcs.n	80082a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	607b      	str	r3, [r7, #4]
}
 80082a0:	bf00      	nop
 80082a2:	e7fe      	b.n	80082a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082a4:	4b0e      	ldr	r3, [pc, #56]	; (80082e0 <vPortValidateInterruptPriority+0x78>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80082ac:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <vPortValidateInterruptPriority+0x7c>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d90a      	bls.n	80082ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	603b      	str	r3, [r7, #0]
}
 80082c6:	bf00      	nop
 80082c8:	e7fe      	b.n	80082c8 <vPortValidateInterruptPriority+0x60>
	}
 80082ca:	bf00      	nop
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	e000e3f0 	.word	0xe000e3f0
 80082dc:	24000e3c 	.word	0x24000e3c
 80082e0:	e000ed0c 	.word	0xe000ed0c
 80082e4:	24000e40 	.word	0x24000e40

080082e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08a      	sub	sp, #40	; 0x28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082f0:	2300      	movs	r3, #0
 80082f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082f4:	f7fe fd8c 	bl	8006e10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082f8:	4b5b      	ldr	r3, [pc, #364]	; (8008468 <pvPortMalloc+0x180>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d101      	bne.n	8008304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008300:	f000 f920 	bl	8008544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008304:	4b59      	ldr	r3, [pc, #356]	; (800846c <pvPortMalloc+0x184>)
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4013      	ands	r3, r2
 800830c:	2b00      	cmp	r3, #0
 800830e:	f040 8093 	bne.w	8008438 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d01d      	beq.n	8008354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008318:	2208      	movs	r2, #8
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4413      	add	r3, r2
 800831e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f003 0307 	and.w	r3, r3, #7
 8008326:	2b00      	cmp	r3, #0
 8008328:	d014      	beq.n	8008354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f023 0307 	bic.w	r3, r3, #7
 8008330:	3308      	adds	r3, #8
 8008332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00a      	beq.n	8008354 <pvPortMalloc+0x6c>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	617b      	str	r3, [r7, #20]
}
 8008350:	bf00      	nop
 8008352:	e7fe      	b.n	8008352 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d06e      	beq.n	8008438 <pvPortMalloc+0x150>
 800835a:	4b45      	ldr	r3, [pc, #276]	; (8008470 <pvPortMalloc+0x188>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	429a      	cmp	r2, r3
 8008362:	d869      	bhi.n	8008438 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008364:	4b43      	ldr	r3, [pc, #268]	; (8008474 <pvPortMalloc+0x18c>)
 8008366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008368:	4b42      	ldr	r3, [pc, #264]	; (8008474 <pvPortMalloc+0x18c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800836e:	e004      	b.n	800837a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	429a      	cmp	r2, r3
 8008382:	d903      	bls.n	800838c <pvPortMalloc+0xa4>
 8008384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1f1      	bne.n	8008370 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800838c:	4b36      	ldr	r3, [pc, #216]	; (8008468 <pvPortMalloc+0x180>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008392:	429a      	cmp	r2, r3
 8008394:	d050      	beq.n	8008438 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2208      	movs	r2, #8
 800839c:	4413      	add	r3, r2
 800839e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	6a3b      	ldr	r3, [r7, #32]
 80083a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	685a      	ldr	r2, [r3, #4]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	1ad2      	subs	r2, r2, r3
 80083b0:	2308      	movs	r3, #8
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d91f      	bls.n	80083f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4413      	add	r3, r2
 80083be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00a      	beq.n	80083e0 <pvPortMalloc+0xf8>
	__asm volatile
 80083ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ce:	f383 8811 	msr	BASEPRI, r3
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	613b      	str	r3, [r7, #16]
}
 80083dc:	bf00      	nop
 80083de:	e7fe      	b.n	80083de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	1ad2      	subs	r2, r2, r3
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083f2:	69b8      	ldr	r0, [r7, #24]
 80083f4:	f000 f908 	bl	8008608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083f8:	4b1d      	ldr	r3, [pc, #116]	; (8008470 <pvPortMalloc+0x188>)
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	4a1b      	ldr	r2, [pc, #108]	; (8008470 <pvPortMalloc+0x188>)
 8008404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008406:	4b1a      	ldr	r3, [pc, #104]	; (8008470 <pvPortMalloc+0x188>)
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	4b1b      	ldr	r3, [pc, #108]	; (8008478 <pvPortMalloc+0x190>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	429a      	cmp	r2, r3
 8008410:	d203      	bcs.n	800841a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008412:	4b17      	ldr	r3, [pc, #92]	; (8008470 <pvPortMalloc+0x188>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a18      	ldr	r2, [pc, #96]	; (8008478 <pvPortMalloc+0x190>)
 8008418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	4b13      	ldr	r3, [pc, #76]	; (800846c <pvPortMalloc+0x184>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	431a      	orrs	r2, r3
 8008424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842a:	2200      	movs	r2, #0
 800842c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800842e:	4b13      	ldr	r3, [pc, #76]	; (800847c <pvPortMalloc+0x194>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3301      	adds	r3, #1
 8008434:	4a11      	ldr	r2, [pc, #68]	; (800847c <pvPortMalloc+0x194>)
 8008436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008438:	f7fe fcf8 	bl	8006e2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	f003 0307 	and.w	r3, r3, #7
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00a      	beq.n	800845c <pvPortMalloc+0x174>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	60fb      	str	r3, [r7, #12]
}
 8008458:	bf00      	nop
 800845a:	e7fe      	b.n	800845a <pvPortMalloc+0x172>
	return pvReturn;
 800845c:	69fb      	ldr	r3, [r7, #28]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3728      	adds	r7, #40	; 0x28
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	24004a4c 	.word	0x24004a4c
 800846c:	24004a60 	.word	0x24004a60
 8008470:	24004a50 	.word	0x24004a50
 8008474:	24004a44 	.word	0x24004a44
 8008478:	24004a54 	.word	0x24004a54
 800847c:	24004a58 	.word	0x24004a58

08008480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d04d      	beq.n	800852e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008492:	2308      	movs	r3, #8
 8008494:	425b      	negs	r3, r3
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	4413      	add	r3, r2
 800849a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	685a      	ldr	r2, [r3, #4]
 80084a4:	4b24      	ldr	r3, [pc, #144]	; (8008538 <vPortFree+0xb8>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4013      	ands	r3, r2
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d10a      	bne.n	80084c4 <vPortFree+0x44>
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	60fb      	str	r3, [r7, #12]
}
 80084c0:	bf00      	nop
 80084c2:	e7fe      	b.n	80084c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00a      	beq.n	80084e2 <vPortFree+0x62>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	60bb      	str	r3, [r7, #8]
}
 80084de:	bf00      	nop
 80084e0:	e7fe      	b.n	80084e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	685a      	ldr	r2, [r3, #4]
 80084e6:	4b14      	ldr	r3, [pc, #80]	; (8008538 <vPortFree+0xb8>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4013      	ands	r3, r2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d01e      	beq.n	800852e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d11a      	bne.n	800852e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	4b0e      	ldr	r3, [pc, #56]	; (8008538 <vPortFree+0xb8>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	43db      	mvns	r3, r3
 8008502:	401a      	ands	r2, r3
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008508:	f7fe fc82 	bl	8006e10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	4b0a      	ldr	r3, [pc, #40]	; (800853c <vPortFree+0xbc>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4413      	add	r3, r2
 8008516:	4a09      	ldr	r2, [pc, #36]	; (800853c <vPortFree+0xbc>)
 8008518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800851a:	6938      	ldr	r0, [r7, #16]
 800851c:	f000 f874 	bl	8008608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008520:	4b07      	ldr	r3, [pc, #28]	; (8008540 <vPortFree+0xc0>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3301      	adds	r3, #1
 8008526:	4a06      	ldr	r2, [pc, #24]	; (8008540 <vPortFree+0xc0>)
 8008528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800852a:	f7fe fc7f 	bl	8006e2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800852e:	bf00      	nop
 8008530:	3718      	adds	r7, #24
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	24004a60 	.word	0x24004a60
 800853c:	24004a50 	.word	0x24004a50
 8008540:	24004a5c 	.word	0x24004a5c

08008544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800854a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800854e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008550:	4b27      	ldr	r3, [pc, #156]	; (80085f0 <prvHeapInit+0xac>)
 8008552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f003 0307 	and.w	r3, r3, #7
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00c      	beq.n	8008578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	3307      	adds	r3, #7
 8008562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f023 0307 	bic.w	r3, r3, #7
 800856a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	4a1f      	ldr	r2, [pc, #124]	; (80085f0 <prvHeapInit+0xac>)
 8008574:	4413      	add	r3, r2
 8008576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800857c:	4a1d      	ldr	r2, [pc, #116]	; (80085f4 <prvHeapInit+0xb0>)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008582:	4b1c      	ldr	r3, [pc, #112]	; (80085f4 <prvHeapInit+0xb0>)
 8008584:	2200      	movs	r2, #0
 8008586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	4413      	add	r3, r2
 800858e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008590:	2208      	movs	r2, #8
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	1a9b      	subs	r3, r3, r2
 8008596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f023 0307 	bic.w	r3, r3, #7
 800859e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4a15      	ldr	r2, [pc, #84]	; (80085f8 <prvHeapInit+0xb4>)
 80085a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80085a6:	4b14      	ldr	r3, [pc, #80]	; (80085f8 <prvHeapInit+0xb4>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2200      	movs	r2, #0
 80085ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80085ae:	4b12      	ldr	r3, [pc, #72]	; (80085f8 <prvHeapInit+0xb4>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	1ad2      	subs	r2, r2, r3
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085c4:	4b0c      	ldr	r3, [pc, #48]	; (80085f8 <prvHeapInit+0xb4>)
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	4a0a      	ldr	r2, [pc, #40]	; (80085fc <prvHeapInit+0xb8>)
 80085d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	4a09      	ldr	r2, [pc, #36]	; (8008600 <prvHeapInit+0xbc>)
 80085da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085dc:	4b09      	ldr	r3, [pc, #36]	; (8008604 <prvHeapInit+0xc0>)
 80085de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80085e2:	601a      	str	r2, [r3, #0]
}
 80085e4:	bf00      	nop
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	24000e44 	.word	0x24000e44
 80085f4:	24004a44 	.word	0x24004a44
 80085f8:	24004a4c 	.word	0x24004a4c
 80085fc:	24004a54 	.word	0x24004a54
 8008600:	24004a50 	.word	0x24004a50
 8008604:	24004a60 	.word	0x24004a60

08008608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008610:	4b28      	ldr	r3, [pc, #160]	; (80086b4 <prvInsertBlockIntoFreeList+0xac>)
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	e002      	b.n	800861c <prvInsertBlockIntoFreeList+0x14>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	60fb      	str	r3, [r7, #12]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	429a      	cmp	r2, r3
 8008624:	d8f7      	bhi.n	8008616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	4413      	add	r3, r2
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	429a      	cmp	r2, r3
 8008636:	d108      	bne.n	800864a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	441a      	add	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	441a      	add	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	429a      	cmp	r2, r3
 800865c:	d118      	bne.n	8008690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	4b15      	ldr	r3, [pc, #84]	; (80086b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	429a      	cmp	r2, r3
 8008668:	d00d      	beq.n	8008686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	441a      	add	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	601a      	str	r2, [r3, #0]
 8008684:	e008      	b.n	8008698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008686:	4b0c      	ldr	r3, [pc, #48]	; (80086b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	e003      	b.n	8008698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	429a      	cmp	r2, r3
 800869e:	d002      	beq.n	80086a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086a6:	bf00      	nop
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	24004a44 	.word	0x24004a44
 80086b8:	24004a4c 	.word	0x24004a4c

080086bc <atoi>:
 80086bc:	220a      	movs	r2, #10
 80086be:	2100      	movs	r1, #0
 80086c0:	f000 b948 	b.w	8008954 <strtol>

080086c4 <__errno>:
 80086c4:	4b01      	ldr	r3, [pc, #4]	; (80086cc <__errno+0x8>)
 80086c6:	6818      	ldr	r0, [r3, #0]
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	24000014 	.word	0x24000014

080086d0 <__libc_init_array>:
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	4d0d      	ldr	r5, [pc, #52]	; (8008708 <__libc_init_array+0x38>)
 80086d4:	4c0d      	ldr	r4, [pc, #52]	; (800870c <__libc_init_array+0x3c>)
 80086d6:	1b64      	subs	r4, r4, r5
 80086d8:	10a4      	asrs	r4, r4, #2
 80086da:	2600      	movs	r6, #0
 80086dc:	42a6      	cmp	r6, r4
 80086de:	d109      	bne.n	80086f4 <__libc_init_array+0x24>
 80086e0:	4d0b      	ldr	r5, [pc, #44]	; (8008710 <__libc_init_array+0x40>)
 80086e2:	4c0c      	ldr	r4, [pc, #48]	; (8008714 <__libc_init_array+0x44>)
 80086e4:	f000 f99c 	bl	8008a20 <_init>
 80086e8:	1b64      	subs	r4, r4, r5
 80086ea:	10a4      	asrs	r4, r4, #2
 80086ec:	2600      	movs	r6, #0
 80086ee:	42a6      	cmp	r6, r4
 80086f0:	d105      	bne.n	80086fe <__libc_init_array+0x2e>
 80086f2:	bd70      	pop	{r4, r5, r6, pc}
 80086f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086f8:	4798      	blx	r3
 80086fa:	3601      	adds	r6, #1
 80086fc:	e7ee      	b.n	80086dc <__libc_init_array+0xc>
 80086fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008702:	4798      	blx	r3
 8008704:	3601      	adds	r6, #1
 8008706:	e7f2      	b.n	80086ee <__libc_init_array+0x1e>
 8008708:	08008d0c 	.word	0x08008d0c
 800870c:	08008d0c 	.word	0x08008d0c
 8008710:	08008d0c 	.word	0x08008d0c
 8008714:	08008d10 	.word	0x08008d10

08008718 <__retarget_lock_acquire_recursive>:
 8008718:	4770      	bx	lr

0800871a <__retarget_lock_release_recursive>:
 800871a:	4770      	bx	lr

0800871c <memcpy>:
 800871c:	440a      	add	r2, r1
 800871e:	4291      	cmp	r1, r2
 8008720:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008724:	d100      	bne.n	8008728 <memcpy+0xc>
 8008726:	4770      	bx	lr
 8008728:	b510      	push	{r4, lr}
 800872a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800872e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008732:	4291      	cmp	r1, r2
 8008734:	d1f9      	bne.n	800872a <memcpy+0xe>
 8008736:	bd10      	pop	{r4, pc}

08008738 <memset>:
 8008738:	4402      	add	r2, r0
 800873a:	4603      	mov	r3, r0
 800873c:	4293      	cmp	r3, r2
 800873e:	d100      	bne.n	8008742 <memset+0xa>
 8008740:	4770      	bx	lr
 8008742:	f803 1b01 	strb.w	r1, [r3], #1
 8008746:	e7f9      	b.n	800873c <memset+0x4>

08008748 <cleanup_glue>:
 8008748:	b538      	push	{r3, r4, r5, lr}
 800874a:	460c      	mov	r4, r1
 800874c:	6809      	ldr	r1, [r1, #0]
 800874e:	4605      	mov	r5, r0
 8008750:	b109      	cbz	r1, 8008756 <cleanup_glue+0xe>
 8008752:	f7ff fff9 	bl	8008748 <cleanup_glue>
 8008756:	4621      	mov	r1, r4
 8008758:	4628      	mov	r0, r5
 800875a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800875e:	f000 b90f 	b.w	8008980 <_free_r>
	...

08008764 <_reclaim_reent>:
 8008764:	4b2c      	ldr	r3, [pc, #176]	; (8008818 <_reclaim_reent+0xb4>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4283      	cmp	r3, r0
 800876a:	b570      	push	{r4, r5, r6, lr}
 800876c:	4604      	mov	r4, r0
 800876e:	d051      	beq.n	8008814 <_reclaim_reent+0xb0>
 8008770:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008772:	b143      	cbz	r3, 8008786 <_reclaim_reent+0x22>
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d14a      	bne.n	8008810 <_reclaim_reent+0xac>
 800877a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800877c:	6819      	ldr	r1, [r3, #0]
 800877e:	b111      	cbz	r1, 8008786 <_reclaim_reent+0x22>
 8008780:	4620      	mov	r0, r4
 8008782:	f000 f8fd 	bl	8008980 <_free_r>
 8008786:	6961      	ldr	r1, [r4, #20]
 8008788:	b111      	cbz	r1, 8008790 <_reclaim_reent+0x2c>
 800878a:	4620      	mov	r0, r4
 800878c:	f000 f8f8 	bl	8008980 <_free_r>
 8008790:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008792:	b111      	cbz	r1, 800879a <_reclaim_reent+0x36>
 8008794:	4620      	mov	r0, r4
 8008796:	f000 f8f3 	bl	8008980 <_free_r>
 800879a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800879c:	b111      	cbz	r1, 80087a4 <_reclaim_reent+0x40>
 800879e:	4620      	mov	r0, r4
 80087a0:	f000 f8ee 	bl	8008980 <_free_r>
 80087a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80087a6:	b111      	cbz	r1, 80087ae <_reclaim_reent+0x4a>
 80087a8:	4620      	mov	r0, r4
 80087aa:	f000 f8e9 	bl	8008980 <_free_r>
 80087ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80087b0:	b111      	cbz	r1, 80087b8 <_reclaim_reent+0x54>
 80087b2:	4620      	mov	r0, r4
 80087b4:	f000 f8e4 	bl	8008980 <_free_r>
 80087b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80087ba:	b111      	cbz	r1, 80087c2 <_reclaim_reent+0x5e>
 80087bc:	4620      	mov	r0, r4
 80087be:	f000 f8df 	bl	8008980 <_free_r>
 80087c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80087c4:	b111      	cbz	r1, 80087cc <_reclaim_reent+0x68>
 80087c6:	4620      	mov	r0, r4
 80087c8:	f000 f8da 	bl	8008980 <_free_r>
 80087cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087ce:	b111      	cbz	r1, 80087d6 <_reclaim_reent+0x72>
 80087d0:	4620      	mov	r0, r4
 80087d2:	f000 f8d5 	bl	8008980 <_free_r>
 80087d6:	69a3      	ldr	r3, [r4, #24]
 80087d8:	b1e3      	cbz	r3, 8008814 <_reclaim_reent+0xb0>
 80087da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80087dc:	4620      	mov	r0, r4
 80087de:	4798      	blx	r3
 80087e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80087e2:	b1b9      	cbz	r1, 8008814 <_reclaim_reent+0xb0>
 80087e4:	4620      	mov	r0, r4
 80087e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80087ea:	f7ff bfad 	b.w	8008748 <cleanup_glue>
 80087ee:	5949      	ldr	r1, [r1, r5]
 80087f0:	b941      	cbnz	r1, 8008804 <_reclaim_reent+0xa0>
 80087f2:	3504      	adds	r5, #4
 80087f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087f6:	2d80      	cmp	r5, #128	; 0x80
 80087f8:	68d9      	ldr	r1, [r3, #12]
 80087fa:	d1f8      	bne.n	80087ee <_reclaim_reent+0x8a>
 80087fc:	4620      	mov	r0, r4
 80087fe:	f000 f8bf 	bl	8008980 <_free_r>
 8008802:	e7ba      	b.n	800877a <_reclaim_reent+0x16>
 8008804:	680e      	ldr	r6, [r1, #0]
 8008806:	4620      	mov	r0, r4
 8008808:	f000 f8ba 	bl	8008980 <_free_r>
 800880c:	4631      	mov	r1, r6
 800880e:	e7ef      	b.n	80087f0 <_reclaim_reent+0x8c>
 8008810:	2500      	movs	r5, #0
 8008812:	e7ef      	b.n	80087f4 <_reclaim_reent+0x90>
 8008814:	bd70      	pop	{r4, r5, r6, pc}
 8008816:	bf00      	nop
 8008818:	24000014 	.word	0x24000014

0800881c <strstr>:
 800881c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800881e:	780c      	ldrb	r4, [r1, #0]
 8008820:	b164      	cbz	r4, 800883c <strstr+0x20>
 8008822:	4603      	mov	r3, r0
 8008824:	781a      	ldrb	r2, [r3, #0]
 8008826:	4618      	mov	r0, r3
 8008828:	1c5e      	adds	r6, r3, #1
 800882a:	b90a      	cbnz	r2, 8008830 <strstr+0x14>
 800882c:	4610      	mov	r0, r2
 800882e:	e005      	b.n	800883c <strstr+0x20>
 8008830:	4294      	cmp	r4, r2
 8008832:	d108      	bne.n	8008846 <strstr+0x2a>
 8008834:	460d      	mov	r5, r1
 8008836:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800883a:	b902      	cbnz	r2, 800883e <strstr+0x22>
 800883c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800883e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008842:	4297      	cmp	r7, r2
 8008844:	d0f7      	beq.n	8008836 <strstr+0x1a>
 8008846:	4633      	mov	r3, r6
 8008848:	e7ec      	b.n	8008824 <strstr+0x8>
	...

0800884c <_strtol_l.isra.0>:
 800884c:	2b01      	cmp	r3, #1
 800884e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008852:	d001      	beq.n	8008858 <_strtol_l.isra.0+0xc>
 8008854:	2b24      	cmp	r3, #36	; 0x24
 8008856:	d906      	bls.n	8008866 <_strtol_l.isra.0+0x1a>
 8008858:	f7ff ff34 	bl	80086c4 <__errno>
 800885c:	2316      	movs	r3, #22
 800885e:	6003      	str	r3, [r0, #0]
 8008860:	2000      	movs	r0, #0
 8008862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008866:	4f3a      	ldr	r7, [pc, #232]	; (8008950 <_strtol_l.isra.0+0x104>)
 8008868:	468e      	mov	lr, r1
 800886a:	4676      	mov	r6, lr
 800886c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008870:	5de5      	ldrb	r5, [r4, r7]
 8008872:	f015 0508 	ands.w	r5, r5, #8
 8008876:	d1f8      	bne.n	800886a <_strtol_l.isra.0+0x1e>
 8008878:	2c2d      	cmp	r4, #45	; 0x2d
 800887a:	d134      	bne.n	80088e6 <_strtol_l.isra.0+0x9a>
 800887c:	f89e 4000 	ldrb.w	r4, [lr]
 8008880:	f04f 0801 	mov.w	r8, #1
 8008884:	f106 0e02 	add.w	lr, r6, #2
 8008888:	2b00      	cmp	r3, #0
 800888a:	d05c      	beq.n	8008946 <_strtol_l.isra.0+0xfa>
 800888c:	2b10      	cmp	r3, #16
 800888e:	d10c      	bne.n	80088aa <_strtol_l.isra.0+0x5e>
 8008890:	2c30      	cmp	r4, #48	; 0x30
 8008892:	d10a      	bne.n	80088aa <_strtol_l.isra.0+0x5e>
 8008894:	f89e 4000 	ldrb.w	r4, [lr]
 8008898:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800889c:	2c58      	cmp	r4, #88	; 0x58
 800889e:	d14d      	bne.n	800893c <_strtol_l.isra.0+0xf0>
 80088a0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80088a4:	2310      	movs	r3, #16
 80088a6:	f10e 0e02 	add.w	lr, lr, #2
 80088aa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80088ae:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80088b2:	2600      	movs	r6, #0
 80088b4:	fbbc f9f3 	udiv	r9, ip, r3
 80088b8:	4635      	mov	r5, r6
 80088ba:	fb03 ca19 	mls	sl, r3, r9, ip
 80088be:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80088c2:	2f09      	cmp	r7, #9
 80088c4:	d818      	bhi.n	80088f8 <_strtol_l.isra.0+0xac>
 80088c6:	463c      	mov	r4, r7
 80088c8:	42a3      	cmp	r3, r4
 80088ca:	dd24      	ble.n	8008916 <_strtol_l.isra.0+0xca>
 80088cc:	2e00      	cmp	r6, #0
 80088ce:	db1f      	blt.n	8008910 <_strtol_l.isra.0+0xc4>
 80088d0:	45a9      	cmp	r9, r5
 80088d2:	d31d      	bcc.n	8008910 <_strtol_l.isra.0+0xc4>
 80088d4:	d101      	bne.n	80088da <_strtol_l.isra.0+0x8e>
 80088d6:	45a2      	cmp	sl, r4
 80088d8:	db1a      	blt.n	8008910 <_strtol_l.isra.0+0xc4>
 80088da:	fb05 4503 	mla	r5, r5, r3, r4
 80088de:	2601      	movs	r6, #1
 80088e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80088e4:	e7eb      	b.n	80088be <_strtol_l.isra.0+0x72>
 80088e6:	2c2b      	cmp	r4, #43	; 0x2b
 80088e8:	bf08      	it	eq
 80088ea:	f89e 4000 	ldrbeq.w	r4, [lr]
 80088ee:	46a8      	mov	r8, r5
 80088f0:	bf08      	it	eq
 80088f2:	f106 0e02 	addeq.w	lr, r6, #2
 80088f6:	e7c7      	b.n	8008888 <_strtol_l.isra.0+0x3c>
 80088f8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80088fc:	2f19      	cmp	r7, #25
 80088fe:	d801      	bhi.n	8008904 <_strtol_l.isra.0+0xb8>
 8008900:	3c37      	subs	r4, #55	; 0x37
 8008902:	e7e1      	b.n	80088c8 <_strtol_l.isra.0+0x7c>
 8008904:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008908:	2f19      	cmp	r7, #25
 800890a:	d804      	bhi.n	8008916 <_strtol_l.isra.0+0xca>
 800890c:	3c57      	subs	r4, #87	; 0x57
 800890e:	e7db      	b.n	80088c8 <_strtol_l.isra.0+0x7c>
 8008910:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008914:	e7e4      	b.n	80088e0 <_strtol_l.isra.0+0x94>
 8008916:	2e00      	cmp	r6, #0
 8008918:	da05      	bge.n	8008926 <_strtol_l.isra.0+0xda>
 800891a:	2322      	movs	r3, #34	; 0x22
 800891c:	6003      	str	r3, [r0, #0]
 800891e:	4665      	mov	r5, ip
 8008920:	b942      	cbnz	r2, 8008934 <_strtol_l.isra.0+0xe8>
 8008922:	4628      	mov	r0, r5
 8008924:	e79d      	b.n	8008862 <_strtol_l.isra.0+0x16>
 8008926:	f1b8 0f00 	cmp.w	r8, #0
 800892a:	d000      	beq.n	800892e <_strtol_l.isra.0+0xe2>
 800892c:	426d      	negs	r5, r5
 800892e:	2a00      	cmp	r2, #0
 8008930:	d0f7      	beq.n	8008922 <_strtol_l.isra.0+0xd6>
 8008932:	b10e      	cbz	r6, 8008938 <_strtol_l.isra.0+0xec>
 8008934:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8008938:	6011      	str	r1, [r2, #0]
 800893a:	e7f2      	b.n	8008922 <_strtol_l.isra.0+0xd6>
 800893c:	2430      	movs	r4, #48	; 0x30
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1b3      	bne.n	80088aa <_strtol_l.isra.0+0x5e>
 8008942:	2308      	movs	r3, #8
 8008944:	e7b1      	b.n	80088aa <_strtol_l.isra.0+0x5e>
 8008946:	2c30      	cmp	r4, #48	; 0x30
 8008948:	d0a4      	beq.n	8008894 <_strtol_l.isra.0+0x48>
 800894a:	230a      	movs	r3, #10
 800894c:	e7ad      	b.n	80088aa <_strtol_l.isra.0+0x5e>
 800894e:	bf00      	nop
 8008950:	08008c01 	.word	0x08008c01

08008954 <strtol>:
 8008954:	4613      	mov	r3, r2
 8008956:	460a      	mov	r2, r1
 8008958:	4601      	mov	r1, r0
 800895a:	4802      	ldr	r0, [pc, #8]	; (8008964 <strtol+0x10>)
 800895c:	6800      	ldr	r0, [r0, #0]
 800895e:	f7ff bf75 	b.w	800884c <_strtol_l.isra.0>
 8008962:	bf00      	nop
 8008964:	24000014 	.word	0x24000014

08008968 <__malloc_lock>:
 8008968:	4801      	ldr	r0, [pc, #4]	; (8008970 <__malloc_lock+0x8>)
 800896a:	f7ff bed5 	b.w	8008718 <__retarget_lock_acquire_recursive>
 800896e:	bf00      	nop
 8008970:	24004c18 	.word	0x24004c18

08008974 <__malloc_unlock>:
 8008974:	4801      	ldr	r0, [pc, #4]	; (800897c <__malloc_unlock+0x8>)
 8008976:	f7ff bed0 	b.w	800871a <__retarget_lock_release_recursive>
 800897a:	bf00      	nop
 800897c:	24004c18 	.word	0x24004c18

08008980 <_free_r>:
 8008980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008982:	2900      	cmp	r1, #0
 8008984:	d048      	beq.n	8008a18 <_free_r+0x98>
 8008986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800898a:	9001      	str	r0, [sp, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	f1a1 0404 	sub.w	r4, r1, #4
 8008992:	bfb8      	it	lt
 8008994:	18e4      	addlt	r4, r4, r3
 8008996:	f7ff ffe7 	bl	8008968 <__malloc_lock>
 800899a:	4a20      	ldr	r2, [pc, #128]	; (8008a1c <_free_r+0x9c>)
 800899c:	9801      	ldr	r0, [sp, #4]
 800899e:	6813      	ldr	r3, [r2, #0]
 80089a0:	4615      	mov	r5, r2
 80089a2:	b933      	cbnz	r3, 80089b2 <_free_r+0x32>
 80089a4:	6063      	str	r3, [r4, #4]
 80089a6:	6014      	str	r4, [r2, #0]
 80089a8:	b003      	add	sp, #12
 80089aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089ae:	f7ff bfe1 	b.w	8008974 <__malloc_unlock>
 80089b2:	42a3      	cmp	r3, r4
 80089b4:	d90b      	bls.n	80089ce <_free_r+0x4e>
 80089b6:	6821      	ldr	r1, [r4, #0]
 80089b8:	1862      	adds	r2, r4, r1
 80089ba:	4293      	cmp	r3, r2
 80089bc:	bf04      	itt	eq
 80089be:	681a      	ldreq	r2, [r3, #0]
 80089c0:	685b      	ldreq	r3, [r3, #4]
 80089c2:	6063      	str	r3, [r4, #4]
 80089c4:	bf04      	itt	eq
 80089c6:	1852      	addeq	r2, r2, r1
 80089c8:	6022      	streq	r2, [r4, #0]
 80089ca:	602c      	str	r4, [r5, #0]
 80089cc:	e7ec      	b.n	80089a8 <_free_r+0x28>
 80089ce:	461a      	mov	r2, r3
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	b10b      	cbz	r3, 80089d8 <_free_r+0x58>
 80089d4:	42a3      	cmp	r3, r4
 80089d6:	d9fa      	bls.n	80089ce <_free_r+0x4e>
 80089d8:	6811      	ldr	r1, [r2, #0]
 80089da:	1855      	adds	r5, r2, r1
 80089dc:	42a5      	cmp	r5, r4
 80089de:	d10b      	bne.n	80089f8 <_free_r+0x78>
 80089e0:	6824      	ldr	r4, [r4, #0]
 80089e2:	4421      	add	r1, r4
 80089e4:	1854      	adds	r4, r2, r1
 80089e6:	42a3      	cmp	r3, r4
 80089e8:	6011      	str	r1, [r2, #0]
 80089ea:	d1dd      	bne.n	80089a8 <_free_r+0x28>
 80089ec:	681c      	ldr	r4, [r3, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	6053      	str	r3, [r2, #4]
 80089f2:	4421      	add	r1, r4
 80089f4:	6011      	str	r1, [r2, #0]
 80089f6:	e7d7      	b.n	80089a8 <_free_r+0x28>
 80089f8:	d902      	bls.n	8008a00 <_free_r+0x80>
 80089fa:	230c      	movs	r3, #12
 80089fc:	6003      	str	r3, [r0, #0]
 80089fe:	e7d3      	b.n	80089a8 <_free_r+0x28>
 8008a00:	6825      	ldr	r5, [r4, #0]
 8008a02:	1961      	adds	r1, r4, r5
 8008a04:	428b      	cmp	r3, r1
 8008a06:	bf04      	itt	eq
 8008a08:	6819      	ldreq	r1, [r3, #0]
 8008a0a:	685b      	ldreq	r3, [r3, #4]
 8008a0c:	6063      	str	r3, [r4, #4]
 8008a0e:	bf04      	itt	eq
 8008a10:	1949      	addeq	r1, r1, r5
 8008a12:	6021      	streq	r1, [r4, #0]
 8008a14:	6054      	str	r4, [r2, #4]
 8008a16:	e7c7      	b.n	80089a8 <_free_r+0x28>
 8008a18:	b003      	add	sp, #12
 8008a1a:	bd30      	pop	{r4, r5, pc}
 8008a1c:	24004a64 	.word	0x24004a64

08008a20 <_init>:
 8008a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a22:	bf00      	nop
 8008a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a26:	bc08      	pop	{r3}
 8008a28:	469e      	mov	lr, r3
 8008a2a:	4770      	bx	lr

08008a2c <_fini>:
 8008a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2e:	bf00      	nop
 8008a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a32:	bc08      	pop	{r3}
 8008a34:	469e      	mov	lr, r3
 8008a36:	4770      	bx	lr
