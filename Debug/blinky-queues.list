
blinky-queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090bc  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  0800936c  0800936c  0001936c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800967c  0800967c  0001967c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009684  08009684  00019684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009688  08009688  00019688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800968c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004bb4  24000078  08009704  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004c2c  08009704  00024c2c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030a9d  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004dd0  00000000  00000000  00050b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001888  00000000  00000000  00055918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001700  00000000  00000000  000571a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000333ff  00000000  00000000  000588a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001eaea  00000000  00000000  0008bc9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149f69  00000000  00000000  000aa789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001f46f2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c6c  00000000  00000000  001f4748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009354 	.word	0x08009354

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	08009354 	.word	0x08009354

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandsToBlink */
  CommandsToBlinkHandle = osMessageQueueNew (16, sizeof(uint16_t), &CommandsToBlink_attributes);
 800068c:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <MX_FREERTOS_Init+0x68>)
 800068e:	2102      	movs	r1, #2
 8000690:	2010      	movs	r0, #16
 8000692:	f005 fa7a 	bl	8005b8a <osMessageQueueNew>
 8000696:	4603      	mov	r3, r0
 8000698:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <MX_FREERTOS_Init+0x6c>)
 800069a:	6013      	str	r3, [r2, #0]

  /* creation of times_blinked */
  times_blinkedHandle = osMessageQueueNew (16, sizeof(uint16_t), &times_blinked_attributes);
 800069c:	4a16      	ldr	r2, [pc, #88]	; (80006f8 <MX_FREERTOS_Init+0x70>)
 800069e:	2102      	movs	r1, #2
 80006a0:	2010      	movs	r0, #16
 80006a2:	f005 fa72 	bl	8005b8a <osMessageQueueNew>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a14      	ldr	r2, [pc, #80]	; (80006fc <MX_FREERTOS_Init+0x74>)
 80006aa:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CommandLine */
  CommandLineHandle = osThreadNew(StartCommandLine, NULL, &CommandLine_attributes);
 80006ac:	4a14      	ldr	r2, [pc, #80]	; (8000700 <MX_FREERTOS_Init+0x78>)
 80006ae:	2100      	movs	r1, #0
 80006b0:	4814      	ldr	r0, [pc, #80]	; (8000704 <MX_FREERTOS_Init+0x7c>)
 80006b2:	f005 f9bd 	bl	8005a30 <osThreadNew>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a13      	ldr	r2, [pc, #76]	; (8000708 <MX_FREERTOS_Init+0x80>)
 80006ba:	6013      	str	r3, [r2, #0]

  /* creation of Blinker1 */
  Blinker1Handle = osThreadNew(StartBlinker1, NULL, &Blinker1_attributes);
 80006bc:	4a13      	ldr	r2, [pc, #76]	; (800070c <MX_FREERTOS_Init+0x84>)
 80006be:	2100      	movs	r1, #0
 80006c0:	4813      	ldr	r0, [pc, #76]	; (8000710 <MX_FREERTOS_Init+0x88>)
 80006c2:	f005 f9b5 	bl	8005a30 <osThreadNew>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_FREERTOS_Init+0x8c>)
 80006ca:	6013      	str	r3, [r2, #0]

  /* creation of Blinker2 */
  Blinker2Handle = osThreadNew(StartBlinker2, NULL, &Blinker2_attributes);
 80006cc:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_FREERTOS_Init+0x90>)
 80006ce:	2100      	movs	r1, #0
 80006d0:	4812      	ldr	r0, [pc, #72]	; (800071c <MX_FREERTOS_Init+0x94>)
 80006d2:	f005 f9ad 	bl	8005a30 <osThreadNew>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4a11      	ldr	r2, [pc, #68]	; (8000720 <MX_FREERTOS_Init+0x98>)
 80006da:	6013      	str	r3, [r2, #0]

  /* creation of Blinker3 */
  Blinker3Handle = osThreadNew(StartBlinker3, NULL, &Blinker3_attributes);
 80006dc:	4a11      	ldr	r2, [pc, #68]	; (8000724 <MX_FREERTOS_Init+0x9c>)
 80006de:	2100      	movs	r1, #0
 80006e0:	4811      	ldr	r0, [pc, #68]	; (8000728 <MX_FREERTOS_Init+0xa0>)
 80006e2:	f005 f9a5 	bl	8005a30 <osThreadNew>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a10      	ldr	r2, [pc, #64]	; (800072c <MX_FREERTOS_Init+0xa4>)
 80006ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	08009480 	.word	0x08009480
 80006f4:	24004af4 	.word	0x24004af4
 80006f8:	08009498 	.word	0x08009498
 80006fc:	24004af8 	.word	0x24004af8
 8000700:	080093f0 	.word	0x080093f0
 8000704:	08000731 	.word	0x08000731
 8000708:	24004adc 	.word	0x24004adc
 800070c:	08009414 	.word	0x08009414
 8000710:	08000859 	.word	0x08000859
 8000714:	24004ad8 	.word	0x24004ad8
 8000718:	08009438 	.word	0x08009438
 800071c:	080008cd 	.word	0x080008cd
 8000720:	24004aec 	.word	0x24004aec
 8000724:	0800945c 	.word	0x0800945c
 8000728:	080008dd 	.word	0x080008dd
 800072c:	24004af0 	.word	0x24004af0

08000730 <StartCommandLine>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommandLine */
void StartCommandLine(void *argument)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b092      	sub	sp, #72	; 0x48
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandLine */
	uint8_t local_pointer = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	char* delay_ptr = NULL;
 800073e:	2300      	movs	r3, #0
 8000740:	643b      	str	r3, [r7, #64]	; 0x40
	uint16_t delay_len = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	87bb      	strh	r3, [r7, #60]	; 0x3c
	uint16_t total_blinks = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	877b      	strh	r3, [r7, #58]	; 0x3a
	/* Infinite loop */
	for(;;)
	{
		HAL_StatusTypeDef ret = HAL_UART_Receive(&huart3,(uint8_t*)rx_buffer ,1, 100);
 800074a:	2364      	movs	r3, #100	; 0x64
 800074c:	2201      	movs	r2, #1
 800074e:	493b      	ldr	r1, [pc, #236]	; (800083c <StartCommandLine+0x10c>)
 8000750:	483b      	ldr	r0, [pc, #236]	; (8000840 <StartCommandLine+0x110>)
 8000752:	f003 fef5 	bl	8004540 <HAL_UART_Receive>
 8000756:	4603      	mov	r3, r0
 8000758:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(ret == HAL_OK){
 800075c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000760:	2b00      	cmp	r3, #0
 8000762:	d144      	bne.n	80007ee <StartCommandLine+0xbe>
			HAL_UART_Transmit(&huart3, (uint8_t*)rx_buffer, 1, 100);
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2201      	movs	r2, #1
 8000768:	4934      	ldr	r1, [pc, #208]	; (800083c <StartCommandLine+0x10c>)
 800076a:	4835      	ldr	r0, [pc, #212]	; (8000840 <StartCommandLine+0x110>)
 800076c:	f003 fe52 	bl	8004414 <HAL_UART_Transmit>
			local_buffer[local_pointer] = rx_buffer[0];
 8000770:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000774:	4a31      	ldr	r2, [pc, #196]	; (800083c <StartCommandLine+0x10c>)
 8000776:	7811      	ldrb	r1, [r2, #0]
 8000778:	4a32      	ldr	r2, [pc, #200]	; (8000844 <StartCommandLine+0x114>)
 800077a:	54d1      	strb	r1, [r2, r3]
			if(local_buffer[local_pointer] == '\n' || local_buffer[local_pointer] == '\r'){
 800077c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000780:	4a30      	ldr	r2, [pc, #192]	; (8000844 <StartCommandLine+0x114>)
 8000782:	5cd3      	ldrb	r3, [r2, r3]
 8000784:	2b0a      	cmp	r3, #10
 8000786:	d005      	beq.n	8000794 <StartCommandLine+0x64>
 8000788:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800078c:	4a2d      	ldr	r2, [pc, #180]	; (8000844 <StartCommandLine+0x114>)
 800078e:	5cd3      	ldrb	r3, [r2, r3]
 8000790:	2b0d      	cmp	r3, #13
 8000792:	d120      	bne.n	80007d6 <StartCommandLine+0xa6>
				delay_ptr = strstr(local_buffer, DELAY_TRIGGER_WORD);
 8000794:	492c      	ldr	r1, [pc, #176]	; (8000848 <StartCommandLine+0x118>)
 8000796:	482b      	ldr	r0, [pc, #172]	; (8000844 <StartCommandLine+0x114>)
 8000798:	f008 f9a2 	bl	8008ae0 <strstr>
 800079c:	6438      	str	r0, [r7, #64]	; 0x40
				if (delay_ptr != NULL) {
 800079e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d024      	beq.n	80007ee <StartCommandLine+0xbe>
					delay_len = atoi(delay_ptr + 5);
 80007a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007a6:	3305      	adds	r3, #5
 80007a8:	4618      	mov	r0, r3
 80007aa:	f008 f85f 	bl	800886c <atoi>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
					osMessageQueuePut(CommandsToBlinkHandle, &delay_len, 0, 0);
 80007b4:	4b25      	ldr	r3, [pc, #148]	; (800084c <StartCommandLine+0x11c>)
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80007bc:	2300      	movs	r3, #0
 80007be:	2200      	movs	r2, #0
 80007c0:	f005 fa56 	bl	8005c70 <osMessageQueuePut>
					memset(local_buffer,0,RX_BUFFER_LENGTH);
 80007c4:	2264      	movs	r2, #100	; 0x64
 80007c6:	2100      	movs	r1, #0
 80007c8:	481e      	ldr	r0, [pc, #120]	; (8000844 <StartCommandLine+0x114>)
 80007ca:	f008 f88d 	bl	80088e8 <memset>
					local_pointer = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (delay_ptr != NULL) {
 80007d4:	e00b      	b.n	80007ee <StartCommandLine+0xbe>
				}
			}else{
				local_pointer++;
 80007d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007da:	3301      	adds	r3, #1
 80007dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if(local_pointer > RX_BUFFER_LENGTH){
 80007e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007e4:	2b64      	cmp	r3, #100	; 0x64
 80007e6:	d902      	bls.n	80007ee <StartCommandLine+0xbe>
					local_pointer = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		if (osOK == osMessageQueueGet(times_blinkedHandle, &total_blinks, NULL , 0)) {
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <StartCommandLine+0x120>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 80007f6:	2300      	movs	r3, #0
 80007f8:	2200      	movs	r2, #0
 80007fa:	f005 fa99 	bl	8005d30 <osMessageQueueGet>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d116      	bne.n	8000832 <StartCommandLine+0x102>
			char tx_buffer[50];
			uint8_t tx_len =0;
 8000804:	2300      	movs	r3, #0
 8000806:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			tx_len  = sprintf(tx_buffer,"total blinks: %d\n\r",total_blinks);
 800080a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800080c:	461a      	mov	r2, r3
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	4910      	ldr	r1, [pc, #64]	; (8000854 <StartCommandLine+0x124>)
 8000814:	4618      	mov	r0, r3
 8000816:	f008 f943 	bl	8008aa0 <siprintf>
 800081a:	4603      	mov	r3, r0
 800081c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			HAL_UART_Transmit(&huart3, (uint8_t*)tx_buffer,tx_len , 100);
 8000820:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000824:	b29a      	uxth	r2, r3
 8000826:	f107 0108 	add.w	r1, r7, #8
 800082a:	2364      	movs	r3, #100	; 0x64
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <StartCommandLine+0x110>)
 800082e:	f003 fdf1 	bl	8004414 <HAL_UART_Transmit>
		}
		osDelay(10);
 8000832:	200a      	movs	r0, #10
 8000834:	f005 f98e 	bl	8005b54 <osDelay>
	{
 8000838:	e787      	b.n	800074a <StartCommandLine+0x1a>
 800083a:	bf00      	nop
 800083c:	24004ae0 	.word	0x24004ae0
 8000840:	24004b48 	.word	0x24004b48
 8000844:	24004a70 	.word	0x24004a70
 8000848:	080093bc 	.word	0x080093bc
 800084c:	24004af4 	.word	0x24004af4
 8000850:	24004af8 	.word	0x24004af8
 8000854:	080093c4 	.word	0x080093c4

08000858 <StartBlinker1>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker1 */
void StartBlinker1(void *argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker1 */
	uint16_t blink_rate = 1000;
 8000860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000864:	81fb      	strh	r3, [r7, #14]
	uint16_t blinks = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	81bb      	strh	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		osMessageQueueGet(CommandsToBlinkHandle,&blink_rate , NULL, 0);
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <StartBlinker1+0x64>)
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	f107 010e 	add.w	r1, r7, #14
 8000872:	2300      	movs	r3, #0
 8000874:	2200      	movs	r2, #0
 8000876:	f005 fa5b 	bl	8005d30 <osMessageQueueGet>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800087a:	2101      	movs	r1, #1
 800087c:	4810      	ldr	r0, [pc, #64]	; (80008c0 <StartBlinker1+0x68>)
 800087e:	f000 ff2a 	bl	80016d6 <HAL_GPIO_TogglePin>
		blinks++;
 8000882:	89bb      	ldrh	r3, [r7, #12]
 8000884:	3301      	adds	r3, #1
 8000886:	b29b      	uxth	r3, r3
 8000888:	81bb      	strh	r3, [r7, #12]
		if (blinks%100 == 0) {
 800088a:	89bb      	ldrh	r3, [r7, #12]
 800088c:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <StartBlinker1+0x6c>)
 800088e:	fba2 1203 	umull	r1, r2, r2, r3
 8000892:	0952      	lsrs	r2, r2, #5
 8000894:	2164      	movs	r1, #100	; 0x64
 8000896:	fb01 f202 	mul.w	r2, r1, r2
 800089a:	1a9b      	subs	r3, r3, r2
 800089c:	b29b      	uxth	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d107      	bne.n	80008b2 <StartBlinker1+0x5a>
			osMessageQueuePut(times_blinkedHandle, &blinks , NULL, 0);
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <StartBlinker1+0x70>)
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	f107 010c 	add.w	r1, r7, #12
 80008aa:	2300      	movs	r3, #0
 80008ac:	2200      	movs	r2, #0
 80008ae:	f005 f9df 	bl	8005c70 <osMessageQueuePut>
		}
		osDelay(blink_rate);
 80008b2:	89fb      	ldrh	r3, [r7, #14]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f005 f94d 	bl	8005b54 <osDelay>
		osMessageQueueGet(CommandsToBlinkHandle,&blink_rate , NULL, 0);
 80008ba:	e7d6      	b.n	800086a <StartBlinker1+0x12>
 80008bc:	24004af4 	.word	0x24004af4
 80008c0:	58020400 	.word	0x58020400
 80008c4:	51eb851f 	.word	0x51eb851f
 80008c8:	24004af8 	.word	0x24004af8

080008cc <StartBlinker2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker2 */
void StartBlinker2(void *argument)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker2 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f005 f93d 	bl	8005b54 <osDelay>
 80008da:	e7fb      	b.n	80008d4 <StartBlinker2+0x8>

080008dc <StartBlinker3>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker3 */
void StartBlinker3(void *argument)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker3 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f005 f935 	bl	8005b54 <osDelay>
 80008ea:	e7fb      	b.n	80008e4 <StartBlinker3+0x8>

080008ec <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08e      	sub	sp, #56	; 0x38
 80008f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	4b80      	ldr	r3, [pc, #512]	; (8000b04 <MX_GPIO_Init+0x218>)
 8000904:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000908:	4a7e      	ldr	r2, [pc, #504]	; (8000b04 <MX_GPIO_Init+0x218>)
 800090a:	f043 0304 	orr.w	r3, r3, #4
 800090e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000912:	4b7c      	ldr	r3, [pc, #496]	; (8000b04 <MX_GPIO_Init+0x218>)
 8000914:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000918:	f003 0304 	and.w	r3, r3, #4
 800091c:	623b      	str	r3, [r7, #32]
 800091e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000920:	4b78      	ldr	r3, [pc, #480]	; (8000b04 <MX_GPIO_Init+0x218>)
 8000922:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000926:	4a77      	ldr	r2, [pc, #476]	; (8000b04 <MX_GPIO_Init+0x218>)
 8000928:	f043 0320 	orr.w	r3, r3, #32
 800092c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000930:	4b74      	ldr	r3, [pc, #464]	; (8000b04 <MX_GPIO_Init+0x218>)
 8000932:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000936:	f003 0320 	and.w	r3, r3, #32
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	4b71      	ldr	r3, [pc, #452]	; (8000b04 <MX_GPIO_Init+0x218>)
 8000940:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000944:	4a6f      	ldr	r2, [pc, #444]	; (8000b04 <MX_GPIO_Init+0x218>)
 8000946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800094e:	4b6d      	ldr	r3, [pc, #436]	; (8000b04 <MX_GPIO_Init+0x218>)
 8000950:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000958:	61bb      	str	r3, [r7, #24]
 800095a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095c:	4b69      	ldr	r3, [pc, #420]	; (8000b04 <MX_GPIO_Init+0x218>)
 800095e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000962:	4a68      	ldr	r2, [pc, #416]	; (8000b04 <MX_GPIO_Init+0x218>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800096c:	4b65      	ldr	r3, [pc, #404]	; (8000b04 <MX_GPIO_Init+0x218>)
 800096e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097a:	4b62      	ldr	r3, [pc, #392]	; (8000b04 <MX_GPIO_Init+0x218>)
 800097c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000980:	4a60      	ldr	r2, [pc, #384]	; (8000b04 <MX_GPIO_Init+0x218>)
 8000982:	f043 0308 	orr.w	r3, r3, #8
 8000986:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800098a:	4b5e      	ldr	r3, [pc, #376]	; (8000b04 <MX_GPIO_Init+0x218>)
 800098c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000990:	f003 0308 	and.w	r3, r3, #8
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000998:	4b5a      	ldr	r3, [pc, #360]	; (8000b04 <MX_GPIO_Init+0x218>)
 800099a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800099e:	4a59      	ldr	r2, [pc, #356]	; (8000b04 <MX_GPIO_Init+0x218>)
 80009a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009a8:	4b56      	ldr	r3, [pc, #344]	; (8000b04 <MX_GPIO_Init+0x218>)
 80009aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b53      	ldr	r3, [pc, #332]	; (8000b04 <MX_GPIO_Init+0x218>)
 80009b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009bc:	4a51      	ldr	r2, [pc, #324]	; (8000b04 <MX_GPIO_Init+0x218>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009c6:	4b4f      	ldr	r3, [pc, #316]	; (8000b04 <MX_GPIO_Init+0x218>)
 80009c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d4:	4b4b      	ldr	r3, [pc, #300]	; (8000b04 <MX_GPIO_Init+0x218>)
 80009d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009da:	4a4a      	ldr	r2, [pc, #296]	; (8000b04 <MX_GPIO_Init+0x218>)
 80009dc:	f043 0310 	orr.w	r3, r3, #16
 80009e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009e4:	4b47      	ldr	r3, [pc, #284]	; (8000b04 <MX_GPIO_Init+0x218>)
 80009e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ea:	f003 0310 	and.w	r3, r3, #16
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f8:	4843      	ldr	r0, [pc, #268]	; (8000b08 <MX_GPIO_Init+0x21c>)
 80009fa:	f000 fe53 	bl	80016a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a04:	4841      	ldr	r0, [pc, #260]	; (8000b0c <MX_GPIO_Init+0x220>)
 8000a06:	f000 fe4d 	bl	80016a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	4840      	ldr	r0, [pc, #256]	; (8000b10 <MX_GPIO_Init+0x224>)
 8000a10:	f000 fe48 	bl	80016a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	4619      	mov	r1, r3
 8000a28:	483a      	ldr	r0, [pc, #232]	; (8000b14 <MX_GPIO_Init+0x228>)
 8000a2a:	f000 fc8b 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a44:	4619      	mov	r1, r3
 8000a46:	4830      	ldr	r0, [pc, #192]	; (8000b08 <MX_GPIO_Init+0x21c>)
 8000a48:	f000 fc7c 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a4c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	4619      	mov	r1, r3
 8000a64:	4829      	ldr	r0, [pc, #164]	; (8000b0c <MX_GPIO_Init+0x220>)
 8000a66:	f000 fc6d 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4826      	ldr	r0, [pc, #152]	; (8000b18 <MX_GPIO_Init+0x22c>)
 8000a80:	f000 fc60 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	4820      	ldr	r0, [pc, #128]	; (8000b1c <MX_GPIO_Init+0x230>)
 8000a9a:	f000 fc53 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000ab0:	230a      	movs	r3, #10
 8000ab2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4818      	ldr	r0, [pc, #96]	; (8000b1c <MX_GPIO_Init+0x230>)
 8000abc:	f000 fc42 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000ac0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4810      	ldr	r0, [pc, #64]	; (8000b1c <MX_GPIO_Init+0x230>)
 8000ada:	f000 fc33 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	4806      	ldr	r0, [pc, #24]	; (8000b10 <MX_GPIO_Init+0x224>)
 8000af6:	f000 fc25 	bl	8001344 <HAL_GPIO_Init>

}
 8000afa:	bf00      	nop
 8000afc:	3738      	adds	r7, #56	; 0x38
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	58024400 	.word	0x58024400
 8000b08:	58021400 	.word	0x58021400
 8000b0c:	58020400 	.word	0x58020400
 8000b10:	58021000 	.word	0x58021000
 8000b14:	58020800 	.word	0x58020800
 8000b18:	58021800 	.word	0x58021800
 8000b1c:	58020000 	.word	0x58020000

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b24:	f000 fad2 	bl	80010cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b28:	f000 f80e 	bl	8000b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2c:	f7ff fede 	bl	80008ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b30:	f000 f9e8 	bl	8000f04 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000b34:	f000 fa98 	bl	8001068 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000b38:	f004 ff30 	bl	800599c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000b3c:	f7ff fda4 	bl	8000688 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000b40:	f004 ff50 	bl	80059e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <main+0x24>
	...

08000b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b09c      	sub	sp, #112	; 0x70
 8000b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	224c      	movs	r2, #76	; 0x4c
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f007 fec6 	bl	80088e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	2220      	movs	r2, #32
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f007 fec0 	bl	80088e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b68:	2004      	movs	r0, #4
 8000b6a:	f000 fdcf 	bl	800170c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <SystemClock_Config+0xd8>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	4a2a      	ldr	r2, [pc, #168]	; (8000c20 <SystemClock_Config+0xd8>)
 8000b78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b7c:	6193      	str	r3, [r2, #24]
 8000b7e:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <SystemClock_Config+0xd8>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b8a:	bf00      	nop
 8000b8c:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <SystemClock_Config+0xd8>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b98:	d1f8      	bne.n	8000b8c <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b9a:	2321      	movs	r3, #33	; 0x21
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b9e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bac:	2302      	movs	r3, #2
 8000bae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000bb4:	2318      	movs	r3, #24
 8000bb6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bc4:	230c      	movs	r3, #12
 8000bc6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fdf3 	bl	80017c0 <HAL_RCC_OscConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000be0:	f000 f832 	bl	8000c48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be4:	233f      	movs	r3, #63	; 0x3f
 8000be6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be8:	2303      	movs	r3, #3
 8000bea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2102      	movs	r1, #2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 f9dd 	bl	8001fc8 <HAL_RCC_ClockConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000c14:	f000 f818 	bl	8000c48 <Error_Handler>
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3770      	adds	r7, #112	; 0x70
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	58024800 	.word	0x58024800

08000c24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d101      	bne.n	8000c3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c36:	f000 fa85 	bl	8001144 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40001400 	.word	0x40001400

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <Error_Handler+0x8>
	...

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_MspInit+0x38>)
 8000c5c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c60:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <HAL_MspInit+0x38>)
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_MspInit+0x38>)
 8000c6c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	f06f 0001 	mvn.w	r0, #1
 8000c80:	f000 fb38 	bl	80012f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	58024400 	.word	0x58024400

08000c90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b090      	sub	sp, #64	; 0x40
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b0f      	cmp	r3, #15
 8000c9c:	d827      	bhi.n	8000cee <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	6879      	ldr	r1, [r7, #4]
 8000ca2:	2037      	movs	r0, #55	; 0x37
 8000ca4:	f000 fb26 	bl	80012f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000ca8:	2037      	movs	r0, #55	; 0x37
 8000caa:	f000 fb3d 	bl	8001328 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000cae:	4a29      	ldr	r2, [pc, #164]	; (8000d54 <HAL_InitTick+0xc4>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000cb4:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <HAL_InitTick+0xc8>)
 8000cb6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000cba:	4a27      	ldr	r2, [pc, #156]	; (8000d58 <HAL_InitTick+0xc8>)
 8000cbc:	f043 0320 	orr.w	r3, r3, #32
 8000cc0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000cc4:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <HAL_InitTick+0xc8>)
 8000cc6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000cca:	f003 0320 	and.w	r3, r3, #32
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cd2:	f107 0210 	add.w	r2, r7, #16
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 fcff 	bl	80026e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d106      	bne.n	8000cfa <HAL_InitTick+0x6a>
 8000cec:	e001      	b.n	8000cf2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e02b      	b.n	8000d4a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cf2:	f001 fcc9 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 8000cf6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000cf8:	e004      	b.n	8000d04 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cfa:	f001 fcc5 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d06:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <HAL_InitTick+0xcc>)
 8000d08:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0c:	0c9b      	lsrs	r3, r3, #18
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <HAL_InitTick+0xd0>)
 8000d14:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <HAL_InitTick+0xd4>)
 8000d16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_InitTick+0xd0>)
 8000d1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d1e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000d20:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <HAL_InitTick+0xd0>)
 8000d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d24:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_InitTick+0xd0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_InitTick+0xd0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000d32:	480b      	ldr	r0, [pc, #44]	; (8000d60 <HAL_InitTick+0xd0>)
 8000d34:	f003 f844 	bl	8003dc0 <HAL_TIM_Base_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d104      	bne.n	8000d48 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000d3e:	4808      	ldr	r0, [pc, #32]	; (8000d60 <HAL_InitTick+0xd0>)
 8000d40:	f003 f8a0 	bl	8003e84 <HAL_TIM_Base_Start_IT>
 8000d44:	4603      	mov	r3, r0
 8000d46:	e000      	b.n	8000d4a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3740      	adds	r7, #64	; 0x40
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	24000008 	.word	0x24000008
 8000d58:	58024400 	.word	0x58024400
 8000d5c:	431bde83 	.word	0x431bde83
 8000d60:	24004afc 	.word	0x24004afc
 8000d64:	40001400 	.word	0x40001400

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <TIM7_IRQHandler+0x10>)
 8000d9a:	f003 f8eb 	bl	8003f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	24004afc 	.word	0x24004afc

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f007 fd4c 	bl	8008874 <__errno>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	24100000 	.word	0x24100000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	24000094 	.word	0x24000094
 8000e10:	24004c30 	.word	0x24004c30

08000e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e18:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <SystemInit+0xd0>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1e:	4a31      	ldr	r2, [pc, #196]	; (8000ee4 <SystemInit+0xd0>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e28:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <SystemInit+0xd4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 030f 	and.w	r3, r3, #15
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d807      	bhi.n	8000e44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e34:	4b2c      	ldr	r3, [pc, #176]	; (8000ee8 <SystemInit+0xd4>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f023 030f 	bic.w	r3, r3, #15
 8000e3c:	4a2a      	ldr	r2, [pc, #168]	; (8000ee8 <SystemInit+0xd4>)
 8000e3e:	f043 0303 	orr.w	r3, r3, #3
 8000e42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e44:	4b29      	ldr	r3, [pc, #164]	; (8000eec <SystemInit+0xd8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a28      	ldr	r2, [pc, #160]	; (8000eec <SystemInit+0xd8>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e50:	4b26      	ldr	r3, [pc, #152]	; (8000eec <SystemInit+0xd8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e56:	4b25      	ldr	r3, [pc, #148]	; (8000eec <SystemInit+0xd8>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4924      	ldr	r1, [pc, #144]	; (8000eec <SystemInit+0xd8>)
 8000e5c:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <SystemInit+0xdc>)
 8000e5e:	4013      	ands	r3, r2
 8000e60:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <SystemInit+0xd4>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 030c 	and.w	r3, r3, #12
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d007      	beq.n	8000e7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <SystemInit+0xd4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f023 030f 	bic.w	r3, r3, #15
 8000e76:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <SystemInit+0xd4>)
 8000e78:	f043 0303 	orr.w	r3, r3, #3
 8000e7c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <SystemInit+0xd8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <SystemInit+0xd8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <SystemInit+0xd8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <SystemInit+0xd8>)
 8000e92:	4a18      	ldr	r2, [pc, #96]	; (8000ef4 <SystemInit+0xe0>)
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <SystemInit+0xd8>)
 8000e98:	4a17      	ldr	r2, [pc, #92]	; (8000ef8 <SystemInit+0xe4>)
 8000e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <SystemInit+0xd8>)
 8000e9e:	4a17      	ldr	r2, [pc, #92]	; (8000efc <SystemInit+0xe8>)
 8000ea0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <SystemInit+0xd8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <SystemInit+0xd8>)
 8000eaa:	4a14      	ldr	r2, [pc, #80]	; (8000efc <SystemInit+0xe8>)
 8000eac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <SystemInit+0xd8>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <SystemInit+0xd8>)
 8000eb6:	4a11      	ldr	r2, [pc, #68]	; (8000efc <SystemInit+0xe8>)
 8000eb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <SystemInit+0xd8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <SystemInit+0xd8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a09      	ldr	r2, [pc, #36]	; (8000eec <SystemInit+0xd8>)
 8000ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <SystemInit+0xd8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <SystemInit+0xec>)
 8000ed4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ed8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00
 8000ee8:	52002000 	.word	0x52002000
 8000eec:	58024400 	.word	0x58024400
 8000ef0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ef4:	02020200 	.word	0x02020200
 8000ef8:	01ff0000 	.word	0x01ff0000
 8000efc:	01010280 	.word	0x01010280
 8000f00:	52004000 	.word	0x52004000

08000f04 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f0a:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f16:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f4c:	4811      	ldr	r0, [pc, #68]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f4e:	f003 fa11 	bl	8004374 <HAL_UART_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f58:	f7ff fe76 	bl	8000c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	480d      	ldr	r0, [pc, #52]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f60:	f004 fc0e 	bl	8005780 <HAL_UARTEx_SetTxFifoThreshold>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f6a:	f7ff fe6d 	bl	8000c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4808      	ldr	r0, [pc, #32]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f72:	f004 fc43 	bl	80057fc <HAL_UARTEx_SetRxFifoThreshold>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f7c:	f7ff fe64 	bl	8000c48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f82:	f004 fbc4 	bl	800570e <HAL_UARTEx_DisableFifoMode>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f8c:	f7ff fe5c 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	24004b48 	.word	0x24004b48
 8000f98:	40004800 	.word	0x40004800

08000f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0b8      	sub	sp, #224	; 0xe0
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	22b8      	movs	r2, #184	; 0xb8
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f007 fc93 	bl	80088e8 <memset>
  if(uartHandle->Instance==USART3)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a25      	ldr	r2, [pc, #148]	; (800105c <HAL_UART_MspInit+0xc0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d142      	bne.n	8001052 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 fbc2 	bl	8002764 <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fe6:	f7ff fe2f 	bl	8000c48 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <HAL_UART_MspInit+0xc4>)
 8000fec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <HAL_UART_MspInit+0xc4>)
 8000ff2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <HAL_UART_MspInit+0xc4>)
 8000ffc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_UART_MspInit+0xc4>)
 800100a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800100e:	4a14      	ldr	r2, [pc, #80]	; (8001060 <HAL_UART_MspInit+0xc4>)
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HAL_UART_MspInit+0xc4>)
 800101a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001026:	f44f 7340 	mov.w	r3, #768	; 0x300
 800102a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001040:	2307      	movs	r3, #7
 8001042:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001046:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <HAL_UART_MspInit+0xc8>)
 800104e:	f000 f979 	bl	8001344 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001052:	bf00      	nop
 8001054:	37e0      	adds	r7, #224	; 0xe0
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40004800 	.word	0x40004800
 8001060:	58024400 	.word	0x58024400
 8001064:	58020c00 	.word	0x58020c00

08001068 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800107c:	f7ff feca 	bl	8000e14 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001080:	480c      	ldr	r0, [pc, #48]	; (80010b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001082:	490d      	ldr	r1, [pc, #52]	; (80010b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001098:	4c0a      	ldr	r4, [pc, #40]	; (80010c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010a6:	f007 fbeb 	bl	8008880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010aa:	f7ff fd39 	bl	8000b20 <main>
  bx  lr
 80010ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80010b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010b8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80010bc:	0800968c 	.word	0x0800968c
  ldr r2, =_sbss
 80010c0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80010c4:	24004c2c 	.word	0x24004c2c

080010c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC_IRQHandler>
	...

080010cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d2:	2003      	movs	r0, #3
 80010d4:	f000 f903 	bl	80012de <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80010d8:	f001 f92c 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 80010dc:	4602      	mov	r2, r0
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_Init+0x68>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	f003 030f 	and.w	r3, r3, #15
 80010e8:	4913      	ldr	r1, [pc, #76]	; (8001138 <HAL_Init+0x6c>)
 80010ea:	5ccb      	ldrb	r3, [r1, r3]
 80010ec:	f003 031f 	and.w	r3, r3, #31
 80010f0:	fa22 f303 	lsr.w	r3, r2, r3
 80010f4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_Init+0x68>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <HAL_Init+0x6c>)
 8001100:	5cd3      	ldrb	r3, [r2, r3]
 8001102:	f003 031f 	and.w	r3, r3, #31
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	fa22 f303 	lsr.w	r3, r2, r3
 800110c:	4a0b      	ldr	r2, [pc, #44]	; (800113c <HAL_Init+0x70>)
 800110e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001110:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <HAL_Init+0x74>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001116:	200f      	movs	r0, #15
 8001118:	f7ff fdba 	bl	8000c90 <HAL_InitTick>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e002      	b.n	800112c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001126:	f7ff fd95 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	58024400 	.word	0x58024400
 8001138:	080094b0 	.word	0x080094b0
 800113c:	24000004 	.word	0x24000004
 8001140:	24000000 	.word	0x24000000

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	2400000c 	.word	0x2400000c
 8001168:	24004bd8 	.word	0x24004bd8

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	24004bd8 	.word	0x24004bd8

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <__NVIC_SetPriorityGrouping+0x40>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00
 80011c8:	05fa0000 	.word	0x05fa0000

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	; (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ff4c 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001302:	f7ff ff63 	bl	80011cc <__NVIC_GetPriorityGrouping>
 8001306:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	68b9      	ldr	r1, [r7, #8]
 800130c:	6978      	ldr	r0, [r7, #20]
 800130e:	f7ff ffb3 	bl	8001278 <NVIC_EncodePriority>
 8001312:	4602      	mov	r2, r0
 8001314:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001318:	4611      	mov	r1, r2
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff82 	bl	8001224 <__NVIC_SetPriority>
}
 8001320:	bf00      	nop
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff56 	bl	80011e8 <__NVIC_EnableIRQ>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001352:	4b89      	ldr	r3, [pc, #548]	; (8001578 <HAL_GPIO_Init+0x234>)
 8001354:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001356:	e194      	b.n	8001682 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	2101      	movs	r1, #1
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 8186 	beq.w	800167c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b01      	cmp	r3, #1
 800137a:	d005      	beq.n	8001388 <HAL_GPIO_Init+0x44>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d130      	bne.n	80013ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	2203      	movs	r2, #3
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013be:	2201      	movs	r2, #1
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	091b      	lsrs	r3, r3, #4
 80013d4:	f003 0201 	and.w	r2, r3, #1
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d017      	beq.n	8001426 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	2203      	movs	r2, #3
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d123      	bne.n	800147a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	08da      	lsrs	r2, r3, #3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3208      	adds	r2, #8
 800143a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	220f      	movs	r2, #15
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	691a      	ldr	r2, [r3, #16]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	08da      	lsrs	r2, r3, #3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3208      	adds	r2, #8
 8001474:	69b9      	ldr	r1, [r7, #24]
 8001476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	2203      	movs	r2, #3
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0203 	and.w	r2, r3, #3
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 80e0 	beq.w	800167c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014bc:	4b2f      	ldr	r3, [pc, #188]	; (800157c <HAL_GPIO_Init+0x238>)
 80014be:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80014c2:	4a2e      	ldr	r2, [pc, #184]	; (800157c <HAL_GPIO_Init+0x238>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_GPIO_Init+0x238>)
 80014ce:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014da:	4a29      	ldr	r2, [pc, #164]	; (8001580 <HAL_GPIO_Init+0x23c>)
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	3302      	adds	r3, #2
 80014e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	220f      	movs	r2, #15
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a20      	ldr	r2, [pc, #128]	; (8001584 <HAL_GPIO_Init+0x240>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d052      	beq.n	80015ac <HAL_GPIO_Init+0x268>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a1f      	ldr	r2, [pc, #124]	; (8001588 <HAL_GPIO_Init+0x244>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d031      	beq.n	8001572 <HAL_GPIO_Init+0x22e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a1e      	ldr	r2, [pc, #120]	; (800158c <HAL_GPIO_Init+0x248>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d02b      	beq.n	800156e <HAL_GPIO_Init+0x22a>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a1d      	ldr	r2, [pc, #116]	; (8001590 <HAL_GPIO_Init+0x24c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d025      	beq.n	800156a <HAL_GPIO_Init+0x226>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a1c      	ldr	r2, [pc, #112]	; (8001594 <HAL_GPIO_Init+0x250>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d01f      	beq.n	8001566 <HAL_GPIO_Init+0x222>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <HAL_GPIO_Init+0x254>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d019      	beq.n	8001562 <HAL_GPIO_Init+0x21e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a1a      	ldr	r2, [pc, #104]	; (800159c <HAL_GPIO_Init+0x258>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d013      	beq.n	800155e <HAL_GPIO_Init+0x21a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <HAL_GPIO_Init+0x25c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d00d      	beq.n	800155a <HAL_GPIO_Init+0x216>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <HAL_GPIO_Init+0x260>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d007      	beq.n	8001556 <HAL_GPIO_Init+0x212>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a17      	ldr	r2, [pc, #92]	; (80015a8 <HAL_GPIO_Init+0x264>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d101      	bne.n	8001552 <HAL_GPIO_Init+0x20e>
 800154e:	2309      	movs	r3, #9
 8001550:	e02d      	b.n	80015ae <HAL_GPIO_Init+0x26a>
 8001552:	230a      	movs	r3, #10
 8001554:	e02b      	b.n	80015ae <HAL_GPIO_Init+0x26a>
 8001556:	2308      	movs	r3, #8
 8001558:	e029      	b.n	80015ae <HAL_GPIO_Init+0x26a>
 800155a:	2307      	movs	r3, #7
 800155c:	e027      	b.n	80015ae <HAL_GPIO_Init+0x26a>
 800155e:	2306      	movs	r3, #6
 8001560:	e025      	b.n	80015ae <HAL_GPIO_Init+0x26a>
 8001562:	2305      	movs	r3, #5
 8001564:	e023      	b.n	80015ae <HAL_GPIO_Init+0x26a>
 8001566:	2304      	movs	r3, #4
 8001568:	e021      	b.n	80015ae <HAL_GPIO_Init+0x26a>
 800156a:	2303      	movs	r3, #3
 800156c:	e01f      	b.n	80015ae <HAL_GPIO_Init+0x26a>
 800156e:	2302      	movs	r3, #2
 8001570:	e01d      	b.n	80015ae <HAL_GPIO_Init+0x26a>
 8001572:	2301      	movs	r3, #1
 8001574:	e01b      	b.n	80015ae <HAL_GPIO_Init+0x26a>
 8001576:	bf00      	nop
 8001578:	58000080 	.word	0x58000080
 800157c:	58024400 	.word	0x58024400
 8001580:	58000400 	.word	0x58000400
 8001584:	58020000 	.word	0x58020000
 8001588:	58020400 	.word	0x58020400
 800158c:	58020800 	.word	0x58020800
 8001590:	58020c00 	.word	0x58020c00
 8001594:	58021000 	.word	0x58021000
 8001598:	58021400 	.word	0x58021400
 800159c:	58021800 	.word	0x58021800
 80015a0:	58021c00 	.word	0x58021c00
 80015a4:	58022000 	.word	0x58022000
 80015a8:	58022400 	.word	0x58022400
 80015ac:	2300      	movs	r3, #0
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	f002 0203 	and.w	r2, r2, #3
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	4093      	lsls	r3, r2
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015be:	4938      	ldr	r1, [pc, #224]	; (80016a0 <HAL_GPIO_Init+0x35c>)
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3302      	adds	r3, #2
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001620:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	3301      	adds	r3, #1
 8001680:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	f47f ae63 	bne.w	8001358 <HAL_GPIO_Init+0x14>
  }
}
 8001692:	bf00      	nop
 8001694:	bf00      	nop
 8001696:	3724      	adds	r7, #36	; 0x24
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	58000400 	.word	0x58000400

080016a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	807b      	strh	r3, [r7, #2]
 80016b0:	4613      	mov	r3, r2
 80016b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016b4:	787b      	ldrb	r3, [r7, #1]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ba:	887a      	ldrh	r2, [r7, #2]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80016c0:	e003      	b.n	80016ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016c2:	887b      	ldrh	r3, [r7, #2]
 80016c4:	041a      	lsls	r2, r3, #16
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	619a      	str	r2, [r3, #24]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b085      	sub	sp, #20
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	460b      	mov	r3, r1
 80016e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016e8:	887a      	ldrh	r2, [r7, #2]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4013      	ands	r3, r2
 80016ee:	041a      	lsls	r2, r3, #16
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43d9      	mvns	r1, r3
 80016f4:	887b      	ldrh	r3, [r7, #2]
 80016f6:	400b      	ands	r3, r1
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	619a      	str	r2, [r3, #24]
}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001714:	4b29      	ldr	r3, [pc, #164]	; (80017bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	2b06      	cmp	r3, #6
 800171e:	d00a      	beq.n	8001736 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001720:	4b26      	ldr	r3, [pc, #152]	; (80017bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	429a      	cmp	r2, r3
 800172c:	d001      	beq.n	8001732 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e040      	b.n	80017b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e03e      	b.n	80017b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800173e:	491f      	ldr	r1, [pc, #124]	; (80017bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4313      	orrs	r3, r2
 8001744:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001746:	f7ff fd11 	bl	800116c <HAL_GetTick>
 800174a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800174c:	e009      	b.n	8001762 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800174e:	f7ff fd0d 	bl	800116c <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800175c:	d901      	bls.n	8001762 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e028      	b.n	80017b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800176a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800176e:	d1ee      	bne.n	800174e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b1e      	cmp	r3, #30
 8001774:	d008      	beq.n	8001788 <HAL_PWREx_ConfigSupply+0x7c>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b2e      	cmp	r3, #46	; 0x2e
 800177a:	d005      	beq.n	8001788 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b1d      	cmp	r3, #29
 8001780:	d002      	beq.n	8001788 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b2d      	cmp	r3, #45	; 0x2d
 8001786:	d114      	bne.n	80017b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001788:	f7ff fcf0 	bl	800116c <HAL_GetTick>
 800178c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800178e:	e009      	b.n	80017a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001790:	f7ff fcec 	bl	800116c <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800179e:	d901      	bls.n	80017a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e007      	b.n	80017b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_PWREx_ConfigSupply+0xb0>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b0:	d1ee      	bne.n	8001790 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	58024800 	.word	0x58024800

080017c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08c      	sub	sp, #48	; 0x30
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e3f3      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 80b3 	beq.w	8001946 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017e0:	4b9e      	ldr	r3, [pc, #632]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017ea:	4b9c      	ldr	r3, [pc, #624]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80017ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f2:	2b10      	cmp	r3, #16
 80017f4:	d007      	beq.n	8001806 <HAL_RCC_OscConfig+0x46>
 80017f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f8:	2b18      	cmp	r3, #24
 80017fa:	d112      	bne.n	8001822 <HAL_RCC_OscConfig+0x62>
 80017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d10d      	bne.n	8001822 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001806:	4b95      	ldr	r3, [pc, #596]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8098 	beq.w	8001944 <HAL_RCC_OscConfig+0x184>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	f040 8093 	bne.w	8001944 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e3cb      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182a:	d106      	bne.n	800183a <HAL_RCC_OscConfig+0x7a>
 800182c:	4b8b      	ldr	r3, [pc, #556]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a8a      	ldr	r2, [pc, #552]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	e058      	b.n	80018ec <HAL_RCC_OscConfig+0x12c>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d112      	bne.n	8001868 <HAL_RCC_OscConfig+0xa8>
 8001842:	4b86      	ldr	r3, [pc, #536]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a85      	ldr	r2, [pc, #532]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b83      	ldr	r3, [pc, #524]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a82      	ldr	r2, [pc, #520]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001854:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	4b80      	ldr	r3, [pc, #512]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a7f      	ldr	r2, [pc, #508]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001860:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	e041      	b.n	80018ec <HAL_RCC_OscConfig+0x12c>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001870:	d112      	bne.n	8001898 <HAL_RCC_OscConfig+0xd8>
 8001872:	4b7a      	ldr	r3, [pc, #488]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a79      	ldr	r2, [pc, #484]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	4b77      	ldr	r3, [pc, #476]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a76      	ldr	r2, [pc, #472]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001884:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b74      	ldr	r3, [pc, #464]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a73      	ldr	r2, [pc, #460]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e029      	b.n	80018ec <HAL_RCC_OscConfig+0x12c>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80018a0:	d112      	bne.n	80018c8 <HAL_RCC_OscConfig+0x108>
 80018a2:	4b6e      	ldr	r3, [pc, #440]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a6d      	ldr	r2, [pc, #436]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80018a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b6b      	ldr	r3, [pc, #428]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a6a      	ldr	r2, [pc, #424]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80018b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b68      	ldr	r3, [pc, #416]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a67      	ldr	r2, [pc, #412]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e011      	b.n	80018ec <HAL_RCC_OscConfig+0x12c>
 80018c8:	4b64      	ldr	r3, [pc, #400]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a63      	ldr	r2, [pc, #396]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80018ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b61      	ldr	r3, [pc, #388]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a60      	ldr	r2, [pc, #384]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80018da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b5e      	ldr	r3, [pc, #376]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a5d      	ldr	r2, [pc, #372]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80018e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80018ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d013      	beq.n	800191c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff fc3a 	bl	800116c <HAL_GetTick>
 80018f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff fc36 	bl	800116c <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e355      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800190e:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x13c>
 800191a:	e014      	b.n	8001946 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7ff fc26 	bl	800116c <HAL_GetTick>
 8001920:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fc22 	bl	800116c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e341      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001936:	4b49      	ldr	r3, [pc, #292]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x164>
 8001942:	e000      	b.n	8001946 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 808c 	beq.w	8001a6c <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001954:	4b41      	ldr	r3, [pc, #260]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800195c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800195e:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d007      	beq.n	800197a <HAL_RCC_OscConfig+0x1ba>
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	2b18      	cmp	r3, #24
 800196e:	d137      	bne.n	80019e0 <HAL_RCC_OscConfig+0x220>
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d132      	bne.n	80019e0 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800197a:	4b38      	ldr	r3, [pc, #224]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	2b00      	cmp	r3, #0
 8001984:	d005      	beq.n	8001992 <HAL_RCC_OscConfig+0x1d2>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e313      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001992:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 0219 	bic.w	r2, r3, #25
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	492f      	ldr	r1, [pc, #188]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019a4:	f7ff fbe2 	bl	800116c <HAL_GetTick>
 80019a8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ac:	f7ff fbde 	bl	800116c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e2fd      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019be:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	061b      	lsls	r3, r3, #24
 80019d8:	4920      	ldr	r1, [pc, #128]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019de:	e045      	b.n	8001a6c <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d026      	beq.n	8001a36 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019e8:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f023 0219 	bic.w	r2, r3, #25
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	4919      	ldr	r1, [pc, #100]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff fbb7 	bl	800116c <HAL_GetTick>
 80019fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a02:	f7ff fbb3 	bl	800116c <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e2d2      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	061b      	lsls	r3, r3, #24
 8001a2e:	490b      	ldr	r1, [pc, #44]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
 8001a34:	e01a      	b.n	8001a6c <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <HAL_RCC_OscConfig+0x29c>)
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff fb93 	bl	800116c <HAL_GetTick>
 8001a46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a4a:	f7ff fb8f 	bl	800116c <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d903      	bls.n	8001a60 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e2ae      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
 8001a5c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a60:	4b99      	ldr	r3, [pc, #612]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1ee      	bne.n	8001a4a <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0310 	and.w	r3, r3, #16
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d06a      	beq.n	8001b4e <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a78:	4b93      	ldr	r3, [pc, #588]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a80:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a82:	4b91      	ldr	r3, [pc, #580]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d007      	beq.n	8001a9e <HAL_RCC_OscConfig+0x2de>
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	2b18      	cmp	r3, #24
 8001a92:	d11b      	bne.n	8001acc <HAL_RCC_OscConfig+0x30c>
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d116      	bne.n	8001acc <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a9e:	4b8a      	ldr	r3, [pc, #552]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d005      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x2f6>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	2b80      	cmp	r3, #128	; 0x80
 8001ab0:	d001      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e281      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ab6:	4b84      	ldr	r3, [pc, #528]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	061b      	lsls	r3, r3, #24
 8001ac4:	4980      	ldr	r1, [pc, #512]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001aca:	e040      	b.n	8001b4e <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d023      	beq.n	8001b1c <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ad4:	4b7c      	ldr	r3, [pc, #496]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a7b      	ldr	r2, [pc, #492]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fb44 	bl	800116c <HAL_GetTick>
 8001ae4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001ae8:	f7ff fb40 	bl	800116c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e25f      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001afa:	4b73      	ldr	r3, [pc, #460]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b06:	4b70      	ldr	r3, [pc, #448]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	061b      	lsls	r3, r3, #24
 8001b14:	496c      	ldr	r1, [pc, #432]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60cb      	str	r3, [r1, #12]
 8001b1a:	e018      	b.n	8001b4e <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b1c:	4b6a      	ldr	r3, [pc, #424]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a69      	ldr	r2, [pc, #420]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff fb20 	bl	800116c <HAL_GetTick>
 8001b2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b30:	f7ff fb1c 	bl	800116c <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e23b      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b42:	4b61      	ldr	r3, [pc, #388]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d036      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d019      	beq.n	8001b96 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b59      	ldr	r3, [pc, #356]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b66:	4a58      	ldr	r2, [pc, #352]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fafd 	bl	800116c <HAL_GetTick>
 8001b72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b76:	f7ff faf9 	bl	800116c <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e218      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b88:	4b4f      	ldr	r3, [pc, #316]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f0      	beq.n	8001b76 <HAL_RCC_OscConfig+0x3b6>
 8001b94:	e018      	b.n	8001bc8 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b96:	4b4c      	ldr	r3, [pc, #304]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b9a:	4a4b      	ldr	r2, [pc, #300]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba2:	f7ff fae3 	bl	800116c <HAL_GetTick>
 8001ba6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001baa:	f7ff fadf 	bl	800116c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e1fe      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bbc:	4b42      	ldr	r3, [pc, #264]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0320 	and.w	r3, r3, #32
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d036      	beq.n	8001c42 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d019      	beq.n	8001c10 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bdc:	4b3a      	ldr	r3, [pc, #232]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a39      	ldr	r2, [pc, #228]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001be2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001be6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001be8:	f7ff fac0 	bl	800116c <HAL_GetTick>
 8001bec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001bf0:	f7ff fabc 	bl	800116c <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e1db      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c02:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x430>
 8001c0e:	e018      	b.n	8001c42 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c10:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a2c      	ldr	r2, [pc, #176]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001c16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c1c:	f7ff faa6 	bl	800116c <HAL_GetTick>
 8001c20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c24:	f7ff faa2 	bl	800116c <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e1c1      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c36:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80af 	beq.w	8001dae <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c50:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_RCC_OscConfig+0x50c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1d      	ldr	r2, [pc, #116]	; (8001ccc <HAL_RCC_OscConfig+0x50c>)
 8001c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c5c:	f7ff fa86 	bl	800116c <HAL_GetTick>
 8001c60:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c64:	f7ff fa82 	bl	800116c <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	; 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e1a1      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_RCC_OscConfig+0x50c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d106      	bne.n	8001c98 <HAL_RCC_OscConfig+0x4d8>
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8e:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6713      	str	r3, [r2, #112]	; 0x70
 8001c96:	e05b      	b.n	8001d50 <HAL_RCC_OscConfig+0x590>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d117      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x510>
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	4a08      	ldr	r2, [pc, #32]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001ca6:	f023 0301 	bic.w	r3, r3, #1
 8001caa:	6713      	str	r3, [r2, #112]	; 0x70
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb0:	4a05      	ldr	r2, [pc, #20]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001cb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	4a02      	ldr	r2, [pc, #8]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001cbe:	f023 0304 	bic.w	r3, r3, #4
 8001cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc4:	e044      	b.n	8001d50 <HAL_RCC_OscConfig+0x590>
 8001cc6:	bf00      	nop
 8001cc8:	58024400 	.word	0x58024400
 8001ccc:	58024800 	.word	0x58024800
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d112      	bne.n	8001cfe <HAL_RCC_OscConfig+0x53e>
 8001cd8:	4b95      	ldr	r3, [pc, #596]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cdc:	4a94      	ldr	r2, [pc, #592]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce4:	4b92      	ldr	r3, [pc, #584]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	4a91      	ldr	r2, [pc, #580]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cee:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf0:	4b8f      	ldr	r3, [pc, #572]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf4:	4a8e      	ldr	r2, [pc, #568]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfc:	e028      	b.n	8001d50 <HAL_RCC_OscConfig+0x590>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b85      	cmp	r3, #133	; 0x85
 8001d04:	d112      	bne.n	8001d2c <HAL_RCC_OscConfig+0x56c>
 8001d06:	4b8a      	ldr	r3, [pc, #552]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	4a89      	ldr	r2, [pc, #548]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	6713      	str	r3, [r2, #112]	; 0x70
 8001d12:	4b87      	ldr	r3, [pc, #540]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d16:	4a86      	ldr	r2, [pc, #536]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1e:	4b84      	ldr	r3, [pc, #528]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d22:	4a83      	ldr	r2, [pc, #524]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2a:	e011      	b.n	8001d50 <HAL_RCC_OscConfig+0x590>
 8001d2c:	4b80      	ldr	r3, [pc, #512]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d30:	4a7f      	ldr	r2, [pc, #508]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	6713      	str	r3, [r2, #112]	; 0x70
 8001d38:	4b7d      	ldr	r3, [pc, #500]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	4a7c      	ldr	r2, [pc, #496]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001d3e:	f023 0304 	bic.w	r3, r3, #4
 8001d42:	6713      	str	r3, [r2, #112]	; 0x70
 8001d44:	4b7a      	ldr	r3, [pc, #488]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	4a79      	ldr	r2, [pc, #484]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d015      	beq.n	8001d84 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7ff fa08 	bl	800116c <HAL_GetTick>
 8001d5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d60:	f7ff fa04 	bl	800116c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e121      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d76:	4b6e      	ldr	r3, [pc, #440]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0ee      	beq.n	8001d60 <HAL_RCC_OscConfig+0x5a0>
 8001d82:	e014      	b.n	8001dae <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d84:	f7ff f9f2 	bl	800116c <HAL_GetTick>
 8001d88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8c:	f7ff f9ee 	bl	800116c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e10b      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001da2:	4b63      	ldr	r3, [pc, #396]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1ee      	bne.n	8001d8c <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8100 	beq.w	8001fb8 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001db8:	4b5d      	ldr	r3, [pc, #372]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dc0:	2b18      	cmp	r3, #24
 8001dc2:	f000 80bb 	beq.w	8001f3c <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	f040 8095 	bne.w	8001efa <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd0:	4b57      	ldr	r3, [pc, #348]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a56      	ldr	r2, [pc, #344]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7ff f9c6 	bl	800116c <HAL_GetTick>
 8001de0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de4:	f7ff f9c2 	bl	800116c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e0e1      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001df6:	4b4e      	ldr	r3, [pc, #312]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e02:	4b4b      	ldr	r3, [pc, #300]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001e04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e06:	4b4b      	ldr	r3, [pc, #300]	; (8001f34 <HAL_RCC_OscConfig+0x774>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e12:	0112      	lsls	r2, r2, #4
 8001e14:	430a      	orrs	r2, r1
 8001e16:	4946      	ldr	r1, [pc, #280]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	628b      	str	r3, [r1, #40]	; 0x28
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	3b01      	subs	r3, #1
 8001e22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	025b      	lsls	r3, r3, #9
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e36:	3b01      	subs	r3, #1
 8001e38:	041b      	lsls	r3, r3, #16
 8001e3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e44:	3b01      	subs	r3, #1
 8001e46:	061b      	lsls	r3, r3, #24
 8001e48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e4c:	4938      	ldr	r1, [pc, #224]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001e52:	4b37      	ldr	r3, [pc, #220]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e56:	4a36      	ldr	r2, [pc, #216]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e5e:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e62:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <HAL_RCC_OscConfig+0x778>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e6a:	00d2      	lsls	r2, r2, #3
 8001e6c:	4930      	ldr	r1, [pc, #192]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e72:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	f023 020c 	bic.w	r2, r3, #12
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	492c      	ldr	r1, [pc, #176]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e84:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	f023 0202 	bic.w	r2, r3, #2
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e90:	4927      	ldr	r1, [pc, #156]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e96:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	4a25      	ldr	r2, [pc, #148]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ea2:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea6:	4a22      	ldr	r2, [pc, #136]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001ecc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed2:	f7ff f94b 	bl	800116c <HAL_GetTick>
 8001ed6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eda:	f7ff f947 	bl	800116c <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e066      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001eec:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x71a>
 8001ef8:	e05e      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001f00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f06:	f7ff f931 	bl	800116c <HAL_GetTick>
 8001f0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7ff f92d 	bl	800116c <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e04c      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x74e>
 8001f2c:	e044      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7f8>
 8001f2e:	bf00      	nop
 8001f30:	58024400 	.word	0x58024400
 8001f34:	fffffc0c 	.word	0xfffffc0c
 8001f38:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_RCC_OscConfig+0x804>)
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <HAL_RCC_OscConfig+0x804>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d031      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	f003 0203 	and.w	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d12a      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d122      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d11a      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	0a5b      	lsrs	r3, r3, #9
 8001f82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d111      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	0c1b      	lsrs	r3, r3, #16
 8001f94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d108      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	0e1b      	lsrs	r3, r3, #24
 8001fa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3730      	adds	r7, #48	; 0x30
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	58024400 	.word	0x58024400

08001fc8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e19c      	b.n	8002316 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b8a      	ldr	r3, [pc, #552]	; (8002208 <HAL_RCC_ClockConfig+0x240>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d910      	bls.n	800200c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b87      	ldr	r3, [pc, #540]	; (8002208 <HAL_RCC_ClockConfig+0x240>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 020f 	bic.w	r2, r3, #15
 8001ff2:	4985      	ldr	r1, [pc, #532]	; (8002208 <HAL_RCC_ClockConfig+0x240>)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b83      	ldr	r3, [pc, #524]	; (8002208 <HAL_RCC_ClockConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e184      	b.n	8002316 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d010      	beq.n	800203a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	4b7b      	ldr	r3, [pc, #492]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002024:	429a      	cmp	r2, r3
 8002026:	d908      	bls.n	800203a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002028:	4b78      	ldr	r3, [pc, #480]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	4975      	ldr	r1, [pc, #468]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 8002036:	4313      	orrs	r3, r2
 8002038:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d010      	beq.n	8002068 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695a      	ldr	r2, [r3, #20]
 800204a:	4b70      	ldr	r3, [pc, #448]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002052:	429a      	cmp	r2, r3
 8002054:	d908      	bls.n	8002068 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002056:	4b6d      	ldr	r3, [pc, #436]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	496a      	ldr	r1, [pc, #424]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 8002064:	4313      	orrs	r3, r2
 8002066:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b00      	cmp	r3, #0
 8002072:	d010      	beq.n	8002096 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699a      	ldr	r2, [r3, #24]
 8002078:	4b64      	ldr	r3, [pc, #400]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002080:	429a      	cmp	r2, r3
 8002082:	d908      	bls.n	8002096 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002084:	4b61      	ldr	r3, [pc, #388]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	495e      	ldr	r1, [pc, #376]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 8002092:	4313      	orrs	r3, r2
 8002094:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0320 	and.w	r3, r3, #32
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d010      	beq.n	80020c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69da      	ldr	r2, [r3, #28]
 80020a6:	4b59      	ldr	r3, [pc, #356]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d908      	bls.n	80020c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80020b2:	4b56      	ldr	r3, [pc, #344]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4953      	ldr	r1, [pc, #332]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d010      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	4b4d      	ldr	r3, [pc, #308]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 030f 	and.w	r3, r3, #15
 80020dc:	429a      	cmp	r2, r3
 80020de:	d908      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e0:	4b4a      	ldr	r3, [pc, #296]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f023 020f 	bic.w	r2, r3, #15
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4947      	ldr	r1, [pc, #284]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d055      	beq.n	80021aa <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80020fe:	4b43      	ldr	r3, [pc, #268]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	4940      	ldr	r1, [pc, #256]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 800210c:	4313      	orrs	r3, r2
 800210e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d107      	bne.n	8002128 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002118:	4b3c      	ldr	r3, [pc, #240]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d121      	bne.n	8002168 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0f6      	b.n	8002316 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d107      	bne.n	8002140 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002130:	4b36      	ldr	r3, [pc, #216]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d115      	bne.n	8002168 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0ea      	b.n	8002316 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d107      	bne.n	8002158 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002148:	4b30      	ldr	r3, [pc, #192]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d109      	bne.n	8002168 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0de      	b.n	8002316 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002158:	4b2c      	ldr	r3, [pc, #176]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0d6      	b.n	8002316 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002168:	4b28      	ldr	r3, [pc, #160]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	f023 0207 	bic.w	r2, r3, #7
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4925      	ldr	r1, [pc, #148]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 8002176:	4313      	orrs	r3, r2
 8002178:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217a:	f7fe fff7 	bl	800116c <HAL_GetTick>
 800217e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002180:	e00a      	b.n	8002198 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002182:	f7fe fff3 	bl	800116c <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002190:	4293      	cmp	r3, r2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e0be      	b.n	8002316 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002198:	4b1c      	ldr	r3, [pc, #112]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d1eb      	bne.n	8002182 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d010      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	4b14      	ldr	r3, [pc, #80]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d208      	bcs.n	80021d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f023 020f 	bic.w	r2, r3, #15
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	490e      	ldr	r1, [pc, #56]	; (800220c <HAL_RCC_ClockConfig+0x244>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_RCC_ClockConfig+0x240>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d214      	bcs.n	8002210 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <HAL_RCC_ClockConfig+0x240>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 020f 	bic.w	r2, r3, #15
 80021ee:	4906      	ldr	r1, [pc, #24]	; (8002208 <HAL_RCC_ClockConfig+0x240>)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <HAL_RCC_ClockConfig+0x240>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d005      	beq.n	8002210 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e086      	b.n	8002316 <HAL_RCC_ClockConfig+0x34e>
 8002208:	52002000 	.word	0x52002000
 800220c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d010      	beq.n	800223e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	4b3f      	ldr	r3, [pc, #252]	; (8002320 <HAL_RCC_ClockConfig+0x358>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002228:	429a      	cmp	r2, r3
 800222a:	d208      	bcs.n	800223e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800222c:	4b3c      	ldr	r3, [pc, #240]	; (8002320 <HAL_RCC_ClockConfig+0x358>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	4939      	ldr	r1, [pc, #228]	; (8002320 <HAL_RCC_ClockConfig+0x358>)
 800223a:	4313      	orrs	r3, r2
 800223c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d010      	beq.n	800226c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	4b34      	ldr	r3, [pc, #208]	; (8002320 <HAL_RCC_ClockConfig+0x358>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002256:	429a      	cmp	r2, r3
 8002258:	d208      	bcs.n	800226c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800225a:	4b31      	ldr	r3, [pc, #196]	; (8002320 <HAL_RCC_ClockConfig+0x358>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	492e      	ldr	r1, [pc, #184]	; (8002320 <HAL_RCC_ClockConfig+0x358>)
 8002268:	4313      	orrs	r3, r2
 800226a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	2b00      	cmp	r3, #0
 8002276:	d010      	beq.n	800229a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699a      	ldr	r2, [r3, #24]
 800227c:	4b28      	ldr	r3, [pc, #160]	; (8002320 <HAL_RCC_ClockConfig+0x358>)
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002284:	429a      	cmp	r2, r3
 8002286:	d208      	bcs.n	800229a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002288:	4b25      	ldr	r3, [pc, #148]	; (8002320 <HAL_RCC_ClockConfig+0x358>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	4922      	ldr	r1, [pc, #136]	; (8002320 <HAL_RCC_ClockConfig+0x358>)
 8002296:	4313      	orrs	r3, r2
 8002298:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d010      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69da      	ldr	r2, [r3, #28]
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_RCC_ClockConfig+0x358>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d208      	bcs.n	80022c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80022b6:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <HAL_RCC_ClockConfig+0x358>)
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	4917      	ldr	r1, [pc, #92]	; (8002320 <HAL_RCC_ClockConfig+0x358>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80022c8:	f000 f834 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 80022cc:	4602      	mov	r2, r0
 80022ce:	4b14      	ldr	r3, [pc, #80]	; (8002320 <HAL_RCC_ClockConfig+0x358>)
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	0a1b      	lsrs	r3, r3, #8
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	4912      	ldr	r1, [pc, #72]	; (8002324 <HAL_RCC_ClockConfig+0x35c>)
 80022da:	5ccb      	ldrb	r3, [r1, r3]
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	fa22 f303 	lsr.w	r3, r2, r3
 80022e4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <HAL_RCC_ClockConfig+0x358>)
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <HAL_RCC_ClockConfig+0x35c>)
 80022f0:	5cd3      	ldrb	r3, [r2, r3]
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	fa22 f303 	lsr.w	r3, r2, r3
 80022fc:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <HAL_RCC_ClockConfig+0x360>)
 80022fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002300:	4a0a      	ldr	r2, [pc, #40]	; (800232c <HAL_RCC_ClockConfig+0x364>)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002306:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <HAL_RCC_ClockConfig+0x368>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe fcc0 	bl	8000c90 <HAL_InitTick>
 8002310:	4603      	mov	r3, r0
 8002312:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	58024400 	.word	0x58024400
 8002324:	080094b0 	.word	0x080094b0
 8002328:	24000004 	.word	0x24000004
 800232c:	24000000 	.word	0x24000000
 8002330:	24000008 	.word	0x24000008

08002334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800233a:	4bb3      	ldr	r3, [pc, #716]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002342:	2b18      	cmp	r3, #24
 8002344:	f200 8155 	bhi.w	80025f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002348:	a201      	add	r2, pc, #4	; (adr r2, 8002350 <HAL_RCC_GetSysClockFreq+0x1c>)
 800234a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234e:	bf00      	nop
 8002350:	080023b5 	.word	0x080023b5
 8002354:	080025f3 	.word	0x080025f3
 8002358:	080025f3 	.word	0x080025f3
 800235c:	080025f3 	.word	0x080025f3
 8002360:	080025f3 	.word	0x080025f3
 8002364:	080025f3 	.word	0x080025f3
 8002368:	080025f3 	.word	0x080025f3
 800236c:	080025f3 	.word	0x080025f3
 8002370:	080023db 	.word	0x080023db
 8002374:	080025f3 	.word	0x080025f3
 8002378:	080025f3 	.word	0x080025f3
 800237c:	080025f3 	.word	0x080025f3
 8002380:	080025f3 	.word	0x080025f3
 8002384:	080025f3 	.word	0x080025f3
 8002388:	080025f3 	.word	0x080025f3
 800238c:	080025f3 	.word	0x080025f3
 8002390:	080023e1 	.word	0x080023e1
 8002394:	080025f3 	.word	0x080025f3
 8002398:	080025f3 	.word	0x080025f3
 800239c:	080025f3 	.word	0x080025f3
 80023a0:	080025f3 	.word	0x080025f3
 80023a4:	080025f3 	.word	0x080025f3
 80023a8:	080025f3 	.word	0x080025f3
 80023ac:	080025f3 	.word	0x080025f3
 80023b0:	080023e7 	.word	0x080023e7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023b4:	4b94      	ldr	r3, [pc, #592]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d009      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023c0:	4b91      	ldr	r3, [pc, #580]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	08db      	lsrs	r3, r3, #3
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	4a90      	ldr	r2, [pc, #576]	; (800260c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023cc:	fa22 f303 	lsr.w	r3, r2, r3
 80023d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80023d2:	e111      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80023d4:	4b8d      	ldr	r3, [pc, #564]	; (800260c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023d6:	61bb      	str	r3, [r7, #24]
    break;
 80023d8:	e10e      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80023da:	4b8d      	ldr	r3, [pc, #564]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023dc:	61bb      	str	r3, [r7, #24]
    break;
 80023de:	e10b      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80023e0:	4b8c      	ldr	r3, [pc, #560]	; (8002614 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80023e2:	61bb      	str	r3, [r7, #24]
    break;
 80023e4:	e108      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023e6:	4b88      	ldr	r3, [pc, #544]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80023f0:	4b85      	ldr	r3, [pc, #532]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023fc:	4b82      	ldr	r3, [pc, #520]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002406:	4b80      	ldr	r3, [pc, #512]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240a:	08db      	lsrs	r3, r3, #3
 800240c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800241e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80e1 	beq.w	80025ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b02      	cmp	r3, #2
 800242e:	f000 8083 	beq.w	8002538 <HAL_RCC_GetSysClockFreq+0x204>
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b02      	cmp	r3, #2
 8002436:	f200 80a1 	bhi.w	800257c <HAL_RCC_GetSysClockFreq+0x248>
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x114>
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d056      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002446:	e099      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002448:	4b6f      	ldr	r3, [pc, #444]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	2b00      	cmp	r3, #0
 8002452:	d02d      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002454:	4b6c      	ldr	r3, [pc, #432]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	08db      	lsrs	r3, r3, #3
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	4a6b      	ldr	r2, [pc, #428]	; (800260c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002460:	fa22 f303 	lsr.w	r3, r2, r3
 8002464:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	ee07 3a90 	vmov	s15, r3
 800246c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800247e:	4b62      	ldr	r3, [pc, #392]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002486:	ee07 3a90 	vmov	s15, r3
 800248a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800248e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002492:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002618 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800249a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800249e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80024ae:	e087      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ba:	eddf 6a58 	vldr	s13, [pc, #352]	; 800261c <HAL_RCC_GetSysClockFreq+0x2e8>
 80024be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024c2:	4b51      	ldr	r3, [pc, #324]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ca:	ee07 3a90 	vmov	s15, r3
 80024ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80024d6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002618 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024f2:	e065      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	ee07 3a90 	vmov	s15, r3
 80024fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002620 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002506:	4b40      	ldr	r3, [pc, #256]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250e:	ee07 3a90 	vmov	s15, r3
 8002512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002516:	ed97 6a02 	vldr	s12, [r7, #8]
 800251a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002618 <HAL_RCC_GetSysClockFreq+0x2e4>
 800251e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800252a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800252e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002536:	e043      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002542:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002624 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800254a:	4b2f      	ldr	r3, [pc, #188]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800255a:	ed97 6a02 	vldr	s12, [r7, #8]
 800255e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002618 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800256a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800256e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800257a:	e021      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002586:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002620 <HAL_RCC_GetSysClockFreq+0x2ec>
 800258a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002596:	ee07 3a90 	vmov	s15, r3
 800259a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800259e:	ed97 6a02 	vldr	s12, [r7, #8]
 80025a2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002618 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025be:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	0a5b      	lsrs	r3, r3, #9
 80025c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025ca:	3301      	adds	r3, #1
 80025cc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	ee07 3a90 	vmov	s15, r3
 80025d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80025dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025e4:	ee17 3a90 	vmov	r3, s15
 80025e8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80025ea:	e005      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
    break;
 80025f0:	e002      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025f4:	61bb      	str	r3, [r7, #24]
    break;
 80025f6:	bf00      	nop
  }

  return sysclockfreq;
 80025f8:	69bb      	ldr	r3, [r7, #24]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3724      	adds	r7, #36	; 0x24
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	58024400 	.word	0x58024400
 800260c:	03d09000 	.word	0x03d09000
 8002610:	003d0900 	.word	0x003d0900
 8002614:	007a1200 	.word	0x007a1200
 8002618:	46000000 	.word	0x46000000
 800261c:	4c742400 	.word	0x4c742400
 8002620:	4a742400 	.word	0x4a742400
 8002624:	4af42400 	.word	0x4af42400

08002628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800262e:	f7ff fe81 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 8002632:	4602      	mov	r2, r0
 8002634:	4b10      	ldr	r3, [pc, #64]	; (8002678 <HAL_RCC_GetHCLKFreq+0x50>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	0a1b      	lsrs	r3, r3, #8
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	490f      	ldr	r1, [pc, #60]	; (800267c <HAL_RCC_GetHCLKFreq+0x54>)
 8002640:	5ccb      	ldrb	r3, [r1, r3]
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	fa22 f303 	lsr.w	r3, r2, r3
 800264a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800264c:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <HAL_RCC_GetHCLKFreq+0x50>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	4a09      	ldr	r2, [pc, #36]	; (800267c <HAL_RCC_GetHCLKFreq+0x54>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	4a07      	ldr	r2, [pc, #28]	; (8002680 <HAL_RCC_GetHCLKFreq+0x58>)
 8002664:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002666:	4a07      	ldr	r2, [pc, #28]	; (8002684 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <HAL_RCC_GetHCLKFreq+0x58>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	58024400 	.word	0x58024400
 800267c:	080094b0 	.word	0x080094b0
 8002680:	24000004 	.word	0x24000004
 8002684:	24000000 	.word	0x24000000

08002688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800268c:	f7ff ffcc 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 8002690:	4602      	mov	r2, r0
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	4904      	ldr	r1, [pc, #16]	; (80026b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800269e:	5ccb      	ldrb	r3, [r1, r3]
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	58024400 	.word	0x58024400
 80026b0:	080094b0 	.word	0x080094b0

080026b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80026b8:	f7ff ffb6 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	4904      	ldr	r1, [pc, #16]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80026ca:	5ccb      	ldrb	r3, [r1, r3]
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	58024400 	.word	0x58024400
 80026dc:	080094b0 	.word	0x080094b0

080026e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	223f      	movs	r2, #63	; 0x3f
 80026ee:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026f0:	4b1a      	ldr	r3, [pc, #104]	; (800275c <HAL_RCC_GetClockConfig+0x7c>)
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	f003 0207 	and.w	r2, r3, #7
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80026fc:	4b17      	ldr	r3, [pc, #92]	; (800275c <HAL_RCC_GetClockConfig+0x7c>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <HAL_RCC_GetClockConfig+0x7c>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	f003 020f 	and.w	r2, r3, #15
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_RCC_GetClockConfig+0x7c>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <HAL_RCC_GetClockConfig+0x7c>)
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_RCC_GetClockConfig+0x7c>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_RCC_GetClockConfig+0x7c>)
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_RCC_GetClockConfig+0x80>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 020f 	and.w	r2, r3, #15
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	601a      	str	r2, [r3, #0]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	58024400 	.word	0x58024400
 8002760:	52002000 	.word	0x52002000

08002764 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800276c:	2300      	movs	r3, #0
 800276e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002770:	2300      	movs	r3, #0
 8002772:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d03f      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002784:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002788:	d02a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800278a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800278e:	d824      	bhi.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002790:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002794:	d018      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002796:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800279a:	d81e      	bhi.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027a4:	d007      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027a6:	e018      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027a8:	4ba6      	ldr	r3, [pc, #664]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	4aa5      	ldr	r2, [pc, #660]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027b4:	e015      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3304      	adds	r3, #4
 80027ba:	2102      	movs	r1, #2
 80027bc:	4618      	mov	r0, r3
 80027be:	f001 f99b 	bl	8003af8 <RCCEx_PLL2_Config>
 80027c2:	4603      	mov	r3, r0
 80027c4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027c6:	e00c      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3324      	adds	r3, #36	; 0x24
 80027cc:	2102      	movs	r1, #2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f001 fa44 	bl	8003c5c <RCCEx_PLL3_Config>
 80027d4:	4603      	mov	r3, r0
 80027d6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027d8:	e003      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	75fb      	strb	r3, [r7, #23]
      break;
 80027de:	e000      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d109      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80027e8:	4b96      	ldr	r3, [pc, #600]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027f4:	4993      	ldr	r1, [pc, #588]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	650b      	str	r3, [r1, #80]	; 0x50
 80027fa:	e001      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
 80027fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d03d      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002810:	2b04      	cmp	r3, #4
 8002812:	d826      	bhi.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002814:	a201      	add	r2, pc, #4	; (adr r2, 800281c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281a:	bf00      	nop
 800281c:	08002831 	.word	0x08002831
 8002820:	0800283f 	.word	0x0800283f
 8002824:	08002851 	.word	0x08002851
 8002828:	08002869 	.word	0x08002869
 800282c:	08002869 	.word	0x08002869
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002830:	4b84      	ldr	r3, [pc, #528]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	4a83      	ldr	r2, [pc, #524]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800283c:	e015      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f001 f957 	bl	8003af8 <RCCEx_PLL2_Config>
 800284a:	4603      	mov	r3, r0
 800284c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800284e:	e00c      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3324      	adds	r3, #36	; 0x24
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f001 fa00 	bl	8003c5c <RCCEx_PLL3_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002860:	e003      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	75fb      	strb	r3, [r7, #23]
      break;
 8002866:	e000      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800286a:	7dfb      	ldrb	r3, [r7, #23]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d109      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002870:	4b74      	ldr	r3, [pc, #464]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002874:	f023 0207 	bic.w	r2, r3, #7
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	4971      	ldr	r1, [pc, #452]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800287e:	4313      	orrs	r3, r2
 8002880:	650b      	str	r3, [r1, #80]	; 0x50
 8002882:	e001      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002884:	7dfb      	ldrb	r3, [r7, #23]
 8002886:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002890:	2b00      	cmp	r3, #0
 8002892:	d04a      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002898:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800289c:	d031      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800289e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80028a2:	d82b      	bhi.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80028a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a8:	d02d      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80028aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ae:	d825      	bhi.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80028b0:	2bc0      	cmp	r3, #192	; 0xc0
 80028b2:	d02a      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80028b4:	2bc0      	cmp	r3, #192	; 0xc0
 80028b6:	d821      	bhi.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80028b8:	2b80      	cmp	r3, #128	; 0x80
 80028ba:	d016      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x186>
 80028bc:	2b80      	cmp	r3, #128	; 0x80
 80028be:	d81d      	bhi.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x166>
 80028c4:	2b40      	cmp	r3, #64	; 0x40
 80028c6:	d007      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80028c8:	e018      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028ca:	4b5e      	ldr	r3, [pc, #376]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	4a5d      	ldr	r2, [pc, #372]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80028d6:	e019      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3304      	adds	r3, #4
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f001 f90a 	bl	8003af8 <RCCEx_PLL2_Config>
 80028e4:	4603      	mov	r3, r0
 80028e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80028e8:	e010      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3324      	adds	r3, #36	; 0x24
 80028ee:	2100      	movs	r1, #0
 80028f0:	4618      	mov	r0, r3
 80028f2:	f001 f9b3 	bl	8003c5c <RCCEx_PLL3_Config>
 80028f6:	4603      	mov	r3, r0
 80028f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80028fa:	e007      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	75fb      	strb	r3, [r7, #23]
      break;
 8002900:	e004      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002902:	bf00      	nop
 8002904:	e002      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002906:	bf00      	nop
 8002908:	e000      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800290a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800290c:	7dfb      	ldrb	r3, [r7, #23]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d109      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002912:	4b4c      	ldr	r3, [pc, #304]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002916:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291e:	4949      	ldr	r1, [pc, #292]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002920:	4313      	orrs	r3, r2
 8002922:	650b      	str	r3, [r1, #80]	; 0x50
 8002924:	e001      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002926:	7dfb      	ldrb	r3, [r7, #23]
 8002928:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002932:	2b00      	cmp	r3, #0
 8002934:	d04f      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800293e:	d036      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002940:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002944:	d830      	bhi.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800294a:	d032      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800294c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002950:	d82a      	bhi.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002952:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002956:	d02e      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002958:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800295c:	d824      	bhi.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800295e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002962:	d018      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002968:	d81e      	bhi.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800296e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002972:	d007      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8002974:	e018      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002976:	4b33      	ldr	r3, [pc, #204]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	4a32      	ldr	r2, [pc, #200]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800297c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002980:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002982:	e019      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3304      	adds	r3, #4
 8002988:	2100      	movs	r1, #0
 800298a:	4618      	mov	r0, r3
 800298c:	f001 f8b4 	bl	8003af8 <RCCEx_PLL2_Config>
 8002990:	4603      	mov	r3, r0
 8002992:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002994:	e010      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3324      	adds	r3, #36	; 0x24
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f001 f95d 	bl	8003c5c <RCCEx_PLL3_Config>
 80029a2:	4603      	mov	r3, r0
 80029a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80029a6:	e007      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	75fb      	strb	r3, [r7, #23]
      break;
 80029ac:	e004      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80029ae:	bf00      	nop
 80029b0:	e002      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80029b2:	bf00      	nop
 80029b4:	e000      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80029b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029b8:	7dfb      	ldrb	r3, [r7, #23]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80029be:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c2:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ca:	491e      	ldr	r1, [pc, #120]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	650b      	str	r3, [r1, #80]	; 0x50
 80029d0:	e001      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
 80029d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d034      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e6:	2b30      	cmp	r3, #48	; 0x30
 80029e8:	d01c      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80029ea:	2b30      	cmp	r3, #48	; 0x30
 80029ec:	d817      	bhi.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	d00c      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	d813      	bhi.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d016      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 80029fa:	2b10      	cmp	r3, #16
 80029fc:	d10f      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	4a10      	ldr	r2, [pc, #64]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002a0a:	e00e      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	2102      	movs	r1, #2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f001 f870 	bl	8003af8 <RCCEx_PLL2_Config>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002a1c:	e005      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	75fb      	strb	r3, [r7, #23]
      break;
 8002a22:	e002      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002a24:	bf00      	nop
 8002a26:	e000      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002a28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10b      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a3c:	4901      	ldr	r1, [pc, #4]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a42:	e003      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002a44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d047      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a60:	d030      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002a62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a66:	d82a      	bhi.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002a68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a6c:	d02c      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8002a6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a72:	d824      	bhi.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a78:	d018      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7e:	d81e      	bhi.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8002a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a88:	d007      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002a8a:	e018      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a8c:	4bb0      	ldr	r3, [pc, #704]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	4aaf      	ldr	r2, [pc, #700]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a98:	e017      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f001 f829 	bl	8003af8 <RCCEx_PLL2_Config>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002aaa:	e00e      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3324      	adds	r3, #36	; 0x24
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f001 f8d2 	bl	8003c5c <RCCEx_PLL3_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002abc:	e005      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ac2:	e002      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002ac4:	bf00      	nop
 8002ac6:	e000      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aca:	7dfb      	ldrb	r3, [r7, #23]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d109      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ad0:	4b9f      	ldr	r3, [pc, #636]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002adc:	499c      	ldr	r1, [pc, #624]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	650b      	str	r3, [r1, #80]	; 0x50
 8002ae2:	e001      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d049      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002afc:	d02e      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002afe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b02:	d828      	bhi.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002b04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b08:	d02a      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002b0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b0e:	d822      	bhi.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002b10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b14:	d026      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002b16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b1a:	d81c      	bhi.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002b1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b20:	d010      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002b22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b26:	d816      	bhi.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d01d      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b30:	d111      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3304      	adds	r3, #4
 8002b36:	2101      	movs	r1, #1
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 ffdd 	bl	8003af8 <RCCEx_PLL2_Config>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b42:	e012      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3324      	adds	r3, #36	; 0x24
 8002b48:	2101      	movs	r1, #1
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f001 f886 	bl	8003c5c <RCCEx_PLL3_Config>
 8002b50:	4603      	mov	r3, r0
 8002b52:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b54:	e009      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	75fb      	strb	r3, [r7, #23]
      break;
 8002b5a:	e006      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002b5c:	bf00      	nop
 8002b5e:	e004      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002b60:	bf00      	nop
 8002b62:	e002      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002b64:	bf00      	nop
 8002b66:	e000      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d109      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b70:	4b77      	ldr	r3, [pc, #476]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b74:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b7c:	4974      	ldr	r1, [pc, #464]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	650b      	str	r3, [r1, #80]	; 0x50
 8002b82:	e001      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b84:	7dfb      	ldrb	r3, [r7, #23]
 8002b86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d053      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b9a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002b9e:	d034      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002ba0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002ba4:	d82e      	bhi.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002ba6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002baa:	d030      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8002bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bb0:	d828      	bhi.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb6:	d02c      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bbc:	d822      	bhi.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002bbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bc2:	d028      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002bc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bc8:	d81c      	bhi.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bce:	d010      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8002bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bd4:	d816      	bhi.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01f      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002bda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bde:	d111      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3304      	adds	r3, #4
 8002be4:	2101      	movs	r1, #1
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 ff86 	bl	8003af8 <RCCEx_PLL2_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002bf0:	e014      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3324      	adds	r3, #36	; 0x24
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f001 f82f 	bl	8003c5c <RCCEx_PLL3_Config>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c02:	e00b      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	75fb      	strb	r3, [r7, #23]
      break;
 8002c08:	e008      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002c0a:	bf00      	nop
 8002c0c:	e006      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002c0e:	bf00      	nop
 8002c10:	e004      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002c12:	bf00      	nop
 8002c14:	e002      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002c16:	bf00      	nop
 8002c18:	e000      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10a      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c22:	4b4b      	ldr	r3, [pc, #300]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c30:	4947      	ldr	r1, [pc, #284]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	658b      	str	r3, [r1, #88]	; 0x58
 8002c36:	e001      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c38:	7dfb      	ldrb	r3, [r7, #23]
 8002c3a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d02f      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c50:	d00e      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c56:	d814      	bhi.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d015      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002c5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c60:	d10f      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c62:	4b3b      	ldr	r3, [pc, #236]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	4a3a      	ldr	r2, [pc, #232]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002c6e:	e00c      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3304      	adds	r3, #4
 8002c74:	2101      	movs	r1, #1
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 ff3e 	bl	8003af8 <RCCEx_PLL2_Config>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002c80:	e003      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	75fb      	strb	r3, [r7, #23]
      break;
 8002c86:	e000      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d109      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c90:	4b2f      	ldr	r3, [pc, #188]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c94:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9c:	492c      	ldr	r1, [pc, #176]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	650b      	str	r3, [r1, #80]	; 0x50
 8002ca2:	e001      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d032      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d81b      	bhi.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8002cbc:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002cfb 	.word	0x08002cfb
 8002cc8:	08002cd5 	.word	0x08002cd5
 8002ccc:	08002ce3 	.word	0x08002ce3
 8002cd0:	08002cfb 	.word	0x08002cfb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cd4:	4b1e      	ldr	r3, [pc, #120]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002ce0:	e00c      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	2102      	movs	r1, #2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 ff05 	bl	8003af8 <RCCEx_PLL2_Config>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002cf2:	e003      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cf8:	e000      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8002cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d02:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d06:	f023 0203 	bic.w	r2, r3, #3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	4910      	ldr	r1, [pc, #64]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d14:	e001      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d16:	7dfb      	ldrb	r3, [r7, #23]
 8002d18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 808a 	beq.w	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d28:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a09      	ldr	r2, [pc, #36]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d34:	f7fe fa1a 	bl	800116c <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d3a:	e00d      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3c:	f7fe fa16 	bl	800116c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b64      	cmp	r3, #100	; 0x64
 8002d48:	d906      	bls.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	75fb      	strb	r3, [r7, #23]
        break;
 8002d4e:	e009      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002d50:	58024400 	.word	0x58024400
 8002d54:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d58:	4bba      	ldr	r3, [pc, #744]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0eb      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d166      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d6a:	4bb7      	ldr	r3, [pc, #732]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d74:	4053      	eors	r3, r2
 8002d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d013      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d7e:	4bb2      	ldr	r3, [pc, #712]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d86:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d88:	4baf      	ldr	r3, [pc, #700]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	4aae      	ldr	r2, [pc, #696]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d92:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d94:	4bac      	ldr	r3, [pc, #688]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	4aab      	ldr	r2, [pc, #684]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002da0:	4aa9      	ldr	r2, [pc, #676]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db0:	d115      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fe f9db 	bl	800116c <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002db8:	e00b      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fe f9d7 	bl	800116c <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d902      	bls.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	75fb      	strb	r3, [r7, #23]
            break;
 8002dd0:	e005      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dd2:	4b9d      	ldr	r3, [pc, #628]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0ed      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8002dde:	7dfb      	ldrb	r3, [r7, #23]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d126      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002df2:	d10d      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8002df4:	4b94      	ldr	r3, [pc, #592]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e02:	0919      	lsrs	r1, r3, #4
 8002e04:	4b91      	ldr	r3, [pc, #580]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002e06:	400b      	ands	r3, r1
 8002e08:	498f      	ldr	r1, [pc, #572]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	610b      	str	r3, [r1, #16]
 8002e0e:	e005      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8002e10:	4b8d      	ldr	r3, [pc, #564]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	4a8c      	ldr	r2, [pc, #560]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e1a:	6113      	str	r3, [r2, #16]
 8002e1c:	4b8a      	ldr	r3, [pc, #552]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2a:	4987      	ldr	r1, [pc, #540]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	670b      	str	r3, [r1, #112]	; 0x70
 8002e30:	e004      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
 8002e34:	75bb      	strb	r3, [r7, #22]
 8002e36:	e001      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
 8002e3a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d07f      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e4e:	2b28      	cmp	r3, #40	; 0x28
 8002e50:	d866      	bhi.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8002e52:	a201      	add	r2, pc, #4	; (adr r2, 8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8002e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e58:	08002f27 	.word	0x08002f27
 8002e5c:	08002f21 	.word	0x08002f21
 8002e60:	08002f21 	.word	0x08002f21
 8002e64:	08002f21 	.word	0x08002f21
 8002e68:	08002f21 	.word	0x08002f21
 8002e6c:	08002f21 	.word	0x08002f21
 8002e70:	08002f21 	.word	0x08002f21
 8002e74:	08002f21 	.word	0x08002f21
 8002e78:	08002efd 	.word	0x08002efd
 8002e7c:	08002f21 	.word	0x08002f21
 8002e80:	08002f21 	.word	0x08002f21
 8002e84:	08002f21 	.word	0x08002f21
 8002e88:	08002f21 	.word	0x08002f21
 8002e8c:	08002f21 	.word	0x08002f21
 8002e90:	08002f21 	.word	0x08002f21
 8002e94:	08002f21 	.word	0x08002f21
 8002e98:	08002f0f 	.word	0x08002f0f
 8002e9c:	08002f21 	.word	0x08002f21
 8002ea0:	08002f21 	.word	0x08002f21
 8002ea4:	08002f21 	.word	0x08002f21
 8002ea8:	08002f21 	.word	0x08002f21
 8002eac:	08002f21 	.word	0x08002f21
 8002eb0:	08002f21 	.word	0x08002f21
 8002eb4:	08002f21 	.word	0x08002f21
 8002eb8:	08002f27 	.word	0x08002f27
 8002ebc:	08002f21 	.word	0x08002f21
 8002ec0:	08002f21 	.word	0x08002f21
 8002ec4:	08002f21 	.word	0x08002f21
 8002ec8:	08002f21 	.word	0x08002f21
 8002ecc:	08002f21 	.word	0x08002f21
 8002ed0:	08002f21 	.word	0x08002f21
 8002ed4:	08002f21 	.word	0x08002f21
 8002ed8:	08002f27 	.word	0x08002f27
 8002edc:	08002f21 	.word	0x08002f21
 8002ee0:	08002f21 	.word	0x08002f21
 8002ee4:	08002f21 	.word	0x08002f21
 8002ee8:	08002f21 	.word	0x08002f21
 8002eec:	08002f21 	.word	0x08002f21
 8002ef0:	08002f21 	.word	0x08002f21
 8002ef4:	08002f21 	.word	0x08002f21
 8002ef8:	08002f27 	.word	0x08002f27
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3304      	adds	r3, #4
 8002f00:	2101      	movs	r1, #1
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fdf8 	bl	8003af8 <RCCEx_PLL2_Config>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002f0c:	e00c      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3324      	adds	r3, #36	; 0x24
 8002f12:	2101      	movs	r1, #1
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fea1 	bl	8003c5c <RCCEx_PLL3_Config>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002f1e:	e003      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	75fb      	strb	r3, [r7, #23]
      break;
 8002f24:	e000      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8002f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10a      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f2e:	4b46      	ldr	r3, [pc, #280]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f3c:	4942      	ldr	r1, [pc, #264]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	654b      	str	r3, [r1, #84]	; 0x54
 8002f42:	e001      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
 8002f46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d038      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d821      	bhi.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002f5c:	a201      	add	r2, pc, #4	; (adr r2, 8002f64 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f62:	bf00      	nop
 8002f64:	08002fa7 	.word	0x08002fa7
 8002f68:	08002f7d 	.word	0x08002f7d
 8002f6c:	08002f8f 	.word	0x08002f8f
 8002f70:	08002fa7 	.word	0x08002fa7
 8002f74:	08002fa7 	.word	0x08002fa7
 8002f78:	08002fa7 	.word	0x08002fa7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	2101      	movs	r1, #1
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fdb8 	bl	8003af8 <RCCEx_PLL2_Config>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002f8c:	e00c      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3324      	adds	r3, #36	; 0x24
 8002f92:	2101      	movs	r1, #1
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fe61 	bl	8003c5c <RCCEx_PLL3_Config>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002f9e:	e003      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa4:	e000      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8002fa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d109      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002fae:	4b26      	ldr	r3, [pc, #152]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	f023 0207 	bic.w	r2, r3, #7
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fba:	4923      	ldr	r1, [pc, #140]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	654b      	str	r3, [r1, #84]	; 0x54
 8002fc0:	e001      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc2:	7dfb      	ldrb	r3, [r7, #23]
 8002fc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d040      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fd8:	2b05      	cmp	r3, #5
 8002fda:	d821      	bhi.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8002fdc:	a201      	add	r2, pc, #4	; (adr r2, 8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe2:	bf00      	nop
 8002fe4:	08003027 	.word	0x08003027
 8002fe8:	08002ffd 	.word	0x08002ffd
 8002fec:	0800300f 	.word	0x0800300f
 8002ff0:	08003027 	.word	0x08003027
 8002ff4:	08003027 	.word	0x08003027
 8002ff8:	08003027 	.word	0x08003027
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3304      	adds	r3, #4
 8003000:	2101      	movs	r1, #1
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fd78 	bl	8003af8 <RCCEx_PLL2_Config>
 8003008:	4603      	mov	r3, r0
 800300a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800300c:	e00c      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3324      	adds	r3, #36	; 0x24
 8003012:	2101      	movs	r1, #1
 8003014:	4618      	mov	r0, r3
 8003016:	f000 fe21 	bl	8003c5c <RCCEx_PLL3_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800301e:	e003      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	75fb      	strb	r3, [r7, #23]
      break;
 8003024:	e000      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003028:	7dfb      	ldrb	r3, [r7, #23]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d110      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003032:	f023 0207 	bic.w	r2, r3, #7
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800303c:	4902      	ldr	r1, [pc, #8]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	658b      	str	r3, [r1, #88]	; 0x58
 8003042:	e007      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003044:	58024800 	.word	0x58024800
 8003048:	58024400 	.word	0x58024400
 800304c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b00      	cmp	r3, #0
 800305e:	d04b      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003066:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800306a:	d02e      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x966>
 800306c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003070:	d828      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003076:	d02a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307c:	d822      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800307e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003082:	d026      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003084:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003088:	d81c      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800308a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800308e:	d010      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003094:	d816      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d01d      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800309a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800309e:	d111      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3304      	adds	r3, #4
 80030a4:	2100      	movs	r1, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fd26 	bl	8003af8 <RCCEx_PLL2_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80030b0:	e012      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3324      	adds	r3, #36	; 0x24
 80030b6:	2102      	movs	r1, #2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fdcf 	bl	8003c5c <RCCEx_PLL3_Config>
 80030be:	4603      	mov	r3, r0
 80030c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80030c2:	e009      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	75fb      	strb	r3, [r7, #23]
      break;
 80030c8:	e006      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80030ca:	bf00      	nop
 80030cc:	e004      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80030ce:	bf00      	nop
 80030d0:	e002      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80030d2:	bf00      	nop
 80030d4:	e000      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80030d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10a      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030de:	4bb3      	ldr	r3, [pc, #716]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ec:	49af      	ldr	r1, [pc, #700]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	654b      	str	r3, [r1, #84]	; 0x54
 80030f2:	e001      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f4:	7dfb      	ldrb	r3, [r7, #23]
 80030f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003100:	2b00      	cmp	r3, #0
 8003102:	d04b      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800310a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800310e:	d02e      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003110:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003114:	d828      	bhi.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311a:	d02a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800311c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003120:	d822      	bhi.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003122:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003126:	d026      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003128:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800312c:	d81c      	bhi.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800312e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003132:	d010      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003138:	d816      	bhi.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01d      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800313e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003142:	d111      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3304      	adds	r3, #4
 8003148:	2100      	movs	r1, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fcd4 	bl	8003af8 <RCCEx_PLL2_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003154:	e012      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3324      	adds	r3, #36	; 0x24
 800315a:	2102      	movs	r1, #2
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fd7d 	bl	8003c5c <RCCEx_PLL3_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003166:	e009      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	75fb      	strb	r3, [r7, #23]
      break;
 800316c:	e006      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800316e:	bf00      	nop
 8003170:	e004      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003172:	bf00      	nop
 8003174:	e002      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003176:	bf00      	nop
 8003178:	e000      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800317a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800317c:	7dfb      	ldrb	r3, [r7, #23]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10a      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003182:	4b8a      	ldr	r3, [pc, #552]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003186:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003190:	4986      	ldr	r1, [pc, #536]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003192:	4313      	orrs	r3, r2
 8003194:	658b      	str	r3, [r1, #88]	; 0x58
 8003196:	e001      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003198:	7dfb      	ldrb	r3, [r7, #23]
 800319a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d04b      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80031b2:	d02e      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80031b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80031b8:	d828      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80031ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031be:	d02a      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80031c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c4:	d822      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80031c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80031ca:	d026      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80031cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80031d0:	d81c      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80031d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031d6:	d010      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80031d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031dc:	d816      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d01d      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80031e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e6:	d111      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3304      	adds	r3, #4
 80031ec:	2100      	movs	r1, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fc82 	bl	8003af8 <RCCEx_PLL2_Config>
 80031f4:	4603      	mov	r3, r0
 80031f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80031f8:	e012      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3324      	adds	r3, #36	; 0x24
 80031fe:	2102      	movs	r1, #2
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fd2b 	bl	8003c5c <RCCEx_PLL3_Config>
 8003206:	4603      	mov	r3, r0
 8003208:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800320a:	e009      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	75fb      	strb	r3, [r7, #23]
      break;
 8003210:	e006      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003212:	bf00      	nop
 8003214:	e004      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003216:	bf00      	nop
 8003218:	e002      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800321a:	bf00      	nop
 800321c:	e000      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800321e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003220:	7dfb      	ldrb	r3, [r7, #23]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10a      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003226:	4b61      	ldr	r3, [pc, #388]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003234:	495d      	ldr	r1, [pc, #372]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003236:	4313      	orrs	r3, r2
 8003238:	658b      	str	r3, [r1, #88]	; 0x58
 800323a:	e001      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01a      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003256:	d10a      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3324      	adds	r3, #36	; 0x24
 800325c:	2102      	movs	r1, #2
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fcfc 	bl	8003c5c <RCCEx_PLL3_Config>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800326e:	4b4f      	ldr	r3, [pc, #316]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003272:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	494b      	ldr	r1, [pc, #300]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800327e:	4313      	orrs	r3, r2
 8003280:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b00      	cmp	r3, #0
 800328c:	d01a      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003298:	d10a      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3324      	adds	r3, #36	; 0x24
 800329e:	2102      	movs	r1, #2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fcdb 	bl	8003c5c <RCCEx_PLL3_Config>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032b0:	4b3e      	ldr	r3, [pc, #248]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032be:	493b      	ldr	r1, [pc, #236]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d034      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032da:	d01d      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80032dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032e0:	d817      	bhi.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80032e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ea:	d009      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80032ec:	e011      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3304      	adds	r3, #4
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fbff 	bl	8003af8 <RCCEx_PLL2_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80032fe:	e00c      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3324      	adds	r3, #36	; 0x24
 8003304:	2102      	movs	r1, #2
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fca8 	bl	8003c5c <RCCEx_PLL3_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003310:	e003      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	75fb      	strb	r3, [r7, #23]
      break;
 8003316:	e000      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800331a:	7dfb      	ldrb	r3, [r7, #23]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10a      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003320:	4b22      	ldr	r3, [pc, #136]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800332e:	491f      	ldr	r1, [pc, #124]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003330:	4313      	orrs	r3, r2
 8003332:	658b      	str	r3, [r1, #88]	; 0x58
 8003334:	e001      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d036      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800334c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003350:	d01c      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003352:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003356:	d816      	bhi.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800335c:	d003      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800335e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003362:	d007      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003364:	e00f      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003366:	4b11      	ldr	r3, [pc, #68]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	4a10      	ldr	r2, [pc, #64]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800336c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003370:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003372:	e00c      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3324      	adds	r3, #36	; 0x24
 8003378:	2101      	movs	r1, #1
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fc6e 	bl	8003c5c <RCCEx_PLL3_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003384:	e003      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	75fb      	strb	r3, [r7, #23]
      break;
 800338a:	e000      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800338c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800338e:	7dfb      	ldrb	r3, [r7, #23]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10d      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a2:	4902      	ldr	r1, [pc, #8]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	654b      	str	r3, [r1, #84]	; 0x54
 80033a8:	e004      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80033aa:	bf00      	nop
 80033ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d029      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80033c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033cc:	d007      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80033ce:	e00f      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033d0:	4b69      	ldr	r3, [pc, #420]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	4a68      	ldr	r2, [pc, #416]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80033dc:	e00b      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3304      	adds	r3, #4
 80033e2:	2102      	movs	r1, #2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fb87 	bl	8003af8 <RCCEx_PLL2_Config>
 80033ea:	4603      	mov	r3, r0
 80033ec:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80033ee:	e002      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	75fb      	strb	r3, [r7, #23]
      break;
 80033f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033f6:	7dfb      	ldrb	r3, [r7, #23]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d109      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80033fc:	4b5e      	ldr	r3, [pc, #376]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003400:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003408:	495b      	ldr	r1, [pc, #364]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800340a:	4313      	orrs	r3, r2
 800340c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800340e:	e001      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003410:	7dfb      	ldrb	r3, [r7, #23]
 8003412:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3324      	adds	r3, #36	; 0x24
 8003424:	2102      	movs	r1, #2
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fc18 	bl	8003c5c <RCCEx_PLL3_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d032      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003448:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800344c:	d017      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 800344e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003452:	d811      	bhi.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003458:	d013      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 800345a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800345e:	d80b      	bhi.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d010      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8003464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003468:	d106      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800346a:	4b43      	ldr	r3, [pc, #268]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	4a42      	ldr	r2, [pc, #264]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003474:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003476:	e007      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	75fb      	strb	r3, [r7, #23]
      break;
 800347c:	e004      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800347e:	bf00      	nop
 8003480:	e002      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003482:	bf00      	nop
 8003484:	e000      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003486:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003488:	7dfb      	ldrb	r3, [r7, #23]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800348e:	4b3a      	ldr	r3, [pc, #232]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003492:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800349c:	4936      	ldr	r1, [pc, #216]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	654b      	str	r3, [r1, #84]	; 0x54
 80034a2:	e001      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034b4:	4b30      	ldr	r3, [pc, #192]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80034b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034c0:	492d      	ldr	r1, [pc, #180]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034d2:	4b29      	ldr	r3, [pc, #164]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80034d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034de:	4926      	ldr	r1, [pc, #152]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80034f0:	4b21      	ldr	r3, [pc, #132]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80034f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	491e      	ldr	r1, [pc, #120]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00d      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800350e:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	4a19      	ldr	r2, [pc, #100]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003514:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003518:	6113      	str	r3, [r2, #16]
 800351a:	4b17      	ldr	r3, [pc, #92]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003524:	4914      	ldr	r1, [pc, #80]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003526:	4313      	orrs	r3, r2
 8003528:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	da08      	bge.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003532:	4b11      	ldr	r3, [pc, #68]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003536:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353e:	490e      	ldr	r1, [pc, #56]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003540:	4313      	orrs	r3, r2
 8003542:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d009      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003550:	4b09      	ldr	r3, [pc, #36]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355e:	4906      	ldr	r1, [pc, #24]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003560:	4313      	orrs	r3, r2
 8003562:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003564:	7dbb      	ldrb	r3, [r7, #22]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	e000      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	58024400 	.word	0x58024400

0800357c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003580:	f7ff f852 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	091b      	lsrs	r3, r3, #4
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4904      	ldr	r1, [pc, #16]	; (80035a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800359c:	4618      	mov	r0, r3
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	58024400 	.word	0x58024400
 80035a4:	080094b0 	.word	0x080094b0

080035a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b089      	sub	sp, #36	; 0x24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035b0:	4ba1      	ldr	r3, [pc, #644]	; (8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80035ba:	4b9f      	ldr	r3, [pc, #636]	; (8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	0b1b      	lsrs	r3, r3, #12
 80035c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80035c6:	4b9c      	ldr	r3, [pc, #624]	; (8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80035d2:	4b99      	ldr	r3, [pc, #612]	; (8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d6:	08db      	lsrs	r3, r3, #3
 80035d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8111 	beq.w	8003818 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	f000 8083 	beq.w	8003704 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b02      	cmp	r3, #2
 8003602:	f200 80a1 	bhi.w	8003748 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d056      	beq.n	80036c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003612:	e099      	b.n	8003748 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003614:	4b88      	ldr	r3, [pc, #544]	; (8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b00      	cmp	r3, #0
 800361e:	d02d      	beq.n	800367c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003620:	4b85      	ldr	r3, [pc, #532]	; (8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	08db      	lsrs	r3, r3, #3
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	4a84      	ldr	r2, [pc, #528]	; (800383c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800362c:	fa22 f303 	lsr.w	r3, r2, r3
 8003630:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	ee07 3a90 	vmov	s15, r3
 8003638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800364a:	4b7b      	ldr	r3, [pc, #492]	; (8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800365a:	ed97 6a03 	vldr	s12, [r7, #12]
 800365e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003840 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800366a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800366e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003676:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800367a:	e087      	b.n	800378c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	ee07 3a90 	vmov	s15, r3
 8003682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003686:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003844 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800368a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800368e:	4b6a      	ldr	r3, [pc, #424]	; (8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003696:	ee07 3a90 	vmov	s15, r3
 800369a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800369e:	ed97 6a03 	vldr	s12, [r7, #12]
 80036a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003840 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80036a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036be:	e065      	b.n	800378c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	ee07 3a90 	vmov	s15, r3
 80036c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80036ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036d2:	4b59      	ldr	r3, [pc, #356]	; (8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80036e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003840 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80036ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003702:	e043      	b.n	800378c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003716:	4b48      	ldr	r3, [pc, #288]	; (8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800371e:	ee07 3a90 	vmov	s15, r3
 8003722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003726:	ed97 6a03 	vldr	s12, [r7, #12]
 800372a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003840 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800372e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800373a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800373e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003742:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003746:	e021      	b.n	800378c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	ee07 3a90 	vmov	s15, r3
 800374e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003752:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800375a:	4b37      	ldr	r3, [pc, #220]	; (8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800376a:	ed97 6a03 	vldr	s12, [r7, #12]
 800376e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003840 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800377a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800377e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003786:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800378a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800378c:	4b2a      	ldr	r3, [pc, #168]	; (8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	0a5b      	lsrs	r3, r3, #9
 8003792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80037aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037b2:	ee17 2a90 	vmov	r2, s15
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80037ba:	4b1f      	ldr	r3, [pc, #124]	; (8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	0c1b      	lsrs	r3, r3, #16
 80037c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037c4:	ee07 3a90 	vmov	s15, r3
 80037c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80037d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037e0:	ee17 2a90 	vmov	r2, s15
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80037e8:	4b13      	ldr	r3, [pc, #76]	; (8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ec:	0e1b      	lsrs	r3, r3, #24
 80037ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037f2:	ee07 3a90 	vmov	s15, r3
 80037f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003802:	edd7 6a07 	vldr	s13, [r7, #28]
 8003806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800380a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800380e:	ee17 2a90 	vmov	r2, s15
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003816:	e008      	b.n	800382a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	609a      	str	r2, [r3, #8]
}
 800382a:	bf00      	nop
 800382c:	3724      	adds	r7, #36	; 0x24
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	58024400 	.word	0x58024400
 800383c:	03d09000 	.word	0x03d09000
 8003840:	46000000 	.word	0x46000000
 8003844:	4c742400 	.word	0x4c742400
 8003848:	4a742400 	.word	0x4a742400
 800384c:	4af42400 	.word	0x4af42400

08003850 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	; 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003858:	4ba1      	ldr	r3, [pc, #644]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003862:	4b9f      	ldr	r3, [pc, #636]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	0d1b      	lsrs	r3, r3, #20
 8003868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800386c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800386e:	4b9c      	ldr	r3, [pc, #624]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	0a1b      	lsrs	r3, r3, #8
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800387a:	4b99      	ldr	r3, [pc, #612]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	08db      	lsrs	r3, r3, #3
 8003880:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	fb02 f303 	mul.w	r3, r2, r3
 800388a:	ee07 3a90 	vmov	s15, r3
 800388e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003892:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8111 	beq.w	8003ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	f000 8083 	beq.w	80039ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	f200 80a1 	bhi.w	80039f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d056      	beq.n	8003968 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80038ba:	e099      	b.n	80039f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038bc:	4b88      	ldr	r3, [pc, #544]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d02d      	beq.n	8003924 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038c8:	4b85      	ldr	r3, [pc, #532]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	08db      	lsrs	r3, r3, #3
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	4a84      	ldr	r2, [pc, #528]	; (8003ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80038d4:	fa22 f303 	lsr.w	r3, r2, r3
 80038d8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	ee07 3a90 	vmov	s15, r3
 80038e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038f2:	4b7b      	ldr	r3, [pc, #492]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003902:	ed97 6a03 	vldr	s12, [r7, #12]
 8003906:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800390a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800390e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800391a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003922:	e087      	b.n	8003a34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	ee07 3a90 	vmov	s15, r3
 800392a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003aec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003936:	4b6a      	ldr	r3, [pc, #424]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800393e:	ee07 3a90 	vmov	s15, r3
 8003942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003946:	ed97 6a03 	vldr	s12, [r7, #12]
 800394a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800394e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800395a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800395e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003962:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003966:	e065      	b.n	8003a34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	ee07 3a90 	vmov	s15, r3
 800396e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003972:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003af0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800397a:	4b59      	ldr	r3, [pc, #356]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800398a:	ed97 6a03 	vldr	s12, [r7, #12]
 800398e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800399a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800399e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039aa:	e043      	b.n	8003a34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	ee07 3a90 	vmov	s15, r3
 80039b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003af4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80039ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039be:	4b48      	ldr	r3, [pc, #288]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80039d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80039d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039ee:	e021      	b.n	8003a34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003af0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80039fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a02:	4b37      	ldr	r3, [pc, #220]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003a34:	4b2a      	ldr	r3, [pc, #168]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	0a5b      	lsrs	r3, r3, #9
 8003a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a5a:	ee17 2a90 	vmov	r2, s15
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003a62:	4b1f      	ldr	r3, [pc, #124]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	0c1b      	lsrs	r3, r3, #16
 8003a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a6c:	ee07 3a90 	vmov	s15, r3
 8003a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a88:	ee17 2a90 	vmov	r2, s15
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003a90:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	0e1b      	lsrs	r3, r3, #24
 8003a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003aa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003aaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ab6:	ee17 2a90 	vmov	r2, s15
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003abe:	e008      	b.n	8003ad2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	609a      	str	r2, [r3, #8]
}
 8003ad2:	bf00      	nop
 8003ad4:	3724      	adds	r7, #36	; 0x24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	58024400 	.word	0x58024400
 8003ae4:	03d09000 	.word	0x03d09000
 8003ae8:	46000000 	.word	0x46000000
 8003aec:	4c742400 	.word	0x4c742400
 8003af0:	4a742400 	.word	0x4a742400
 8003af4:	4af42400 	.word	0x4af42400

08003af8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b06:	4b53      	ldr	r3, [pc, #332]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d101      	bne.n	8003b16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e099      	b.n	8003c4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003b16:	4b4f      	ldr	r3, [pc, #316]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a4e      	ldr	r2, [pc, #312]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003b1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b22:	f7fd fb23 	bl	800116c <HAL_GetTick>
 8003b26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b28:	e008      	b.n	8003b3c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003b2a:	f7fd fb1f 	bl	800116c <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e086      	b.n	8003c4a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b3c:	4b45      	ldr	r3, [pc, #276]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1f0      	bne.n	8003b2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003b48:	4b42      	ldr	r3, [pc, #264]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	031b      	lsls	r3, r3, #12
 8003b56:	493f      	ldr	r1, [pc, #252]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	628b      	str	r3, [r1, #40]	; 0x28
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	025b      	lsls	r3, r3, #9
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	041b      	lsls	r3, r3, #16
 8003b7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	061b      	lsls	r3, r3, #24
 8003b88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b8c:	4931      	ldr	r1, [pc, #196]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003b92:	4b30      	ldr	r3, [pc, #192]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	492d      	ldr	r1, [pc, #180]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ba4:	4b2b      	ldr	r3, [pc, #172]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	f023 0220 	bic.w	r2, r3, #32
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	4928      	ldr	r1, [pc, #160]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003bb6:	4b27      	ldr	r3, [pc, #156]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	4a26      	ldr	r2, [pc, #152]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bbc:	f023 0310 	bic.w	r3, r3, #16
 8003bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003bc2:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bc6:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <RCCEx_PLL2_Config+0x160>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	69d2      	ldr	r2, [r2, #28]
 8003bce:	00d2      	lsls	r2, r2, #3
 8003bd0:	4920      	ldr	r1, [pc, #128]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003bd6:	4b1f      	ldr	r3, [pc, #124]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	4a1e      	ldr	r2, [pc, #120]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bdc:	f043 0310 	orr.w	r3, r3, #16
 8003be0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d106      	bne.n	8003bf6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003be8:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	4a19      	ldr	r2, [pc, #100]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bf4:	e00f      	b.n	8003c16 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d106      	bne.n	8003c0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003bfc:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	4a14      	ldr	r2, [pc, #80]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c08:	e005      	b.n	8003c16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003c0a:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	4a11      	ldr	r2, [pc, #68]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003c10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003c16:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a0e      	ldr	r2, [pc, #56]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003c1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c22:	f7fd faa3 	bl	800116c <HAL_GetTick>
 8003c26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c28:	e008      	b.n	8003c3c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003c2a:	f7fd fa9f 	bl	800116c <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e006      	b.n	8003c4a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0f0      	beq.n	8003c2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	58024400 	.word	0x58024400
 8003c58:	ffff0007 	.word	0xffff0007

08003c5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c6a:	4b53      	ldr	r3, [pc, #332]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d101      	bne.n	8003c7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e099      	b.n	8003dae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003c7a:	4b4f      	ldr	r3, [pc, #316]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a4e      	ldr	r2, [pc, #312]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c86:	f7fd fa71 	bl	800116c <HAL_GetTick>
 8003c8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c8c:	e008      	b.n	8003ca0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003c8e:	f7fd fa6d 	bl	800116c <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e086      	b.n	8003dae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ca0:	4b45      	ldr	r3, [pc, #276]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1f0      	bne.n	8003c8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003cac:	4b42      	ldr	r3, [pc, #264]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	051b      	lsls	r3, r3, #20
 8003cba:	493f      	ldr	r1, [pc, #252]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	628b      	str	r3, [r1, #40]	; 0x28
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	025b      	lsls	r3, r3, #9
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	041b      	lsls	r3, r3, #16
 8003cde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	061b      	lsls	r3, r3, #24
 8003cec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003cf0:	4931      	ldr	r1, [pc, #196]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003cf6:	4b30      	ldr	r3, [pc, #192]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	492d      	ldr	r1, [pc, #180]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003d08:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	4928      	ldr	r1, [pc, #160]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003d1a:	4b27      	ldr	r3, [pc, #156]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	4a26      	ldr	r2, [pc, #152]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003d26:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d2a:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <RCCEx_PLL3_Config+0x160>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	69d2      	ldr	r2, [r2, #28]
 8003d32:	00d2      	lsls	r2, r2, #3
 8003d34:	4920      	ldr	r1, [pc, #128]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003d3a:	4b1f      	ldr	r3, [pc, #124]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	4a19      	ldr	r2, [pc, #100]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d58:	e00f      	b.n	8003d7a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d106      	bne.n	8003d6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003d60:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	4a14      	ldr	r2, [pc, #80]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d6c:	e005      	b.n	8003d7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003d6e:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	4a11      	ldr	r2, [pc, #68]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a0e      	ldr	r2, [pc, #56]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d86:	f7fd f9f1 	bl	800116c <HAL_GetTick>
 8003d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d8c:	e008      	b.n	8003da0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d8e:	f7fd f9ed 	bl	800116c <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e006      	b.n	8003dae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	58024400 	.word	0x58024400
 8003dbc:	ffff0007 	.word	0xffff0007

08003dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e049      	b.n	8003e66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f841 	bl	8003e6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	f000 fa00 	bl	8004204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
	...

08003e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d001      	beq.n	8003e9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e054      	b.n	8003f46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a26      	ldr	r2, [pc, #152]	; (8003f54 <HAL_TIM_Base_Start_IT+0xd0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d022      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec6:	d01d      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a22      	ldr	r2, [pc, #136]	; (8003f58 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d018      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a21      	ldr	r2, [pc, #132]	; (8003f5c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d013      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1f      	ldr	r2, [pc, #124]	; (8003f60 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00e      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1e      	ldr	r2, [pc, #120]	; (8003f64 <HAL_TIM_Base_Start_IT+0xe0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d009      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1c      	ldr	r2, [pc, #112]	; (8003f68 <HAL_TIM_Base_Start_IT+0xe4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d004      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1b      	ldr	r2, [pc, #108]	; (8003f6c <HAL_TIM_Base_Start_IT+0xe8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d115      	bne.n	8003f30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <HAL_TIM_Base_Start_IT+0xec>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b06      	cmp	r3, #6
 8003f14:	d015      	beq.n	8003f42 <HAL_TIM_Base_Start_IT+0xbe>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1c:	d011      	beq.n	8003f42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0201 	orr.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2e:	e008      	b.n	8003f42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	e000      	b.n	8003f44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40010000 	.word	0x40010000
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800
 8003f60:	40000c00 	.word	0x40000c00
 8003f64:	40010400 	.word	0x40010400
 8003f68:	40001800 	.word	0x40001800
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	00010007 	.word	0x00010007

08003f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d122      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d11b      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 0202 	mvn.w	r2, #2
 8003fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f905 	bl	80041c6 <HAL_TIM_IC_CaptureCallback>
 8003fbc:	e005      	b.n	8003fca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f8f7 	bl	80041b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f908 	bl	80041da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d122      	bne.n	8004024 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d11b      	bne.n	8004024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0204 	mvn.w	r2, #4
 8003ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f8db 	bl	80041c6 <HAL_TIM_IC_CaptureCallback>
 8004010:	e005      	b.n	800401e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f8cd 	bl	80041b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f8de 	bl	80041da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b08      	cmp	r3, #8
 8004030:	d122      	bne.n	8004078 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b08      	cmp	r3, #8
 800403e:	d11b      	bne.n	8004078 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0208 	mvn.w	r2, #8
 8004048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2204      	movs	r2, #4
 800404e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f8b1 	bl	80041c6 <HAL_TIM_IC_CaptureCallback>
 8004064:	e005      	b.n	8004072 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f8a3 	bl	80041b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f8b4 	bl	80041da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b10      	cmp	r3, #16
 8004084:	d122      	bne.n	80040cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b10      	cmp	r3, #16
 8004092:	d11b      	bne.n	80040cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0210 	mvn.w	r2, #16
 800409c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2208      	movs	r2, #8
 80040a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f887 	bl	80041c6 <HAL_TIM_IC_CaptureCallback>
 80040b8:	e005      	b.n	80040c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f879 	bl	80041b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f88a 	bl	80041da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d10e      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d107      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f06f 0201 	mvn.w	r2, #1
 80040f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fc fd96 	bl	8000c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004102:	2b80      	cmp	r3, #128	; 0x80
 8004104:	d10e      	bne.n	8004124 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004110:	2b80      	cmp	r3, #128	; 0x80
 8004112:	d107      	bne.n	8004124 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800411c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f914 	bl	800434c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004132:	d10e      	bne.n	8004152 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413e:	2b80      	cmp	r3, #128	; 0x80
 8004140:	d107      	bne.n	8004152 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800414a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f907 	bl	8004360 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415c:	2b40      	cmp	r3, #64	; 0x40
 800415e:	d10e      	bne.n	800417e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	d107      	bne.n	800417e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f838 	bl	80041ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f003 0320 	and.w	r3, r3, #32
 8004188:	2b20      	cmp	r3, #32
 800418a:	d10e      	bne.n	80041aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b20      	cmp	r3, #32
 8004198:	d107      	bne.n	80041aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f06f 0220 	mvn.w	r2, #32
 80041a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f8c7 	bl	8004338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041aa:	bf00      	nop
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a40      	ldr	r2, [pc, #256]	; (8004318 <TIM_Base_SetConfig+0x114>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d013      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004222:	d00f      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a3d      	ldr	r2, [pc, #244]	; (800431c <TIM_Base_SetConfig+0x118>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00b      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a3c      	ldr	r2, [pc, #240]	; (8004320 <TIM_Base_SetConfig+0x11c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d007      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a3b      	ldr	r2, [pc, #236]	; (8004324 <TIM_Base_SetConfig+0x120>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a3a      	ldr	r2, [pc, #232]	; (8004328 <TIM_Base_SetConfig+0x124>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d108      	bne.n	8004256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a2f      	ldr	r2, [pc, #188]	; (8004318 <TIM_Base_SetConfig+0x114>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01f      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004264:	d01b      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a2c      	ldr	r2, [pc, #176]	; (800431c <TIM_Base_SetConfig+0x118>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d017      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a2b      	ldr	r2, [pc, #172]	; (8004320 <TIM_Base_SetConfig+0x11c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a2a      	ldr	r2, [pc, #168]	; (8004324 <TIM_Base_SetConfig+0x120>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00f      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a29      	ldr	r2, [pc, #164]	; (8004328 <TIM_Base_SetConfig+0x124>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00b      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a28      	ldr	r2, [pc, #160]	; (800432c <TIM_Base_SetConfig+0x128>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d007      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a27      	ldr	r2, [pc, #156]	; (8004330 <TIM_Base_SetConfig+0x12c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a26      	ldr	r2, [pc, #152]	; (8004334 <TIM_Base_SetConfig+0x130>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d108      	bne.n	80042b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a10      	ldr	r2, [pc, #64]	; (8004318 <TIM_Base_SetConfig+0x114>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00f      	beq.n	80042fc <TIM_Base_SetConfig+0xf8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a12      	ldr	r2, [pc, #72]	; (8004328 <TIM_Base_SetConfig+0x124>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00b      	beq.n	80042fc <TIM_Base_SetConfig+0xf8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a11      	ldr	r2, [pc, #68]	; (800432c <TIM_Base_SetConfig+0x128>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d007      	beq.n	80042fc <TIM_Base_SetConfig+0xf8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a10      	ldr	r2, [pc, #64]	; (8004330 <TIM_Base_SetConfig+0x12c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d003      	beq.n	80042fc <TIM_Base_SetConfig+0xf8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a0f      	ldr	r2, [pc, #60]	; (8004334 <TIM_Base_SetConfig+0x130>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d103      	bne.n	8004304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	615a      	str	r2, [r3, #20]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40010000 	.word	0x40010000
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800
 8004324:	40000c00 	.word	0x40000c00
 8004328:	40010400 	.word	0x40010400
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800

08004338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e042      	b.n	800440c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800438c:	2b00      	cmp	r3, #0
 800438e:	d106      	bne.n	800439e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7fc fdff 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2224      	movs	r2, #36	; 0x24
 80043a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0201 	bic.w	r2, r2, #1
 80043b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f996 	bl	80046e8 <UART_SetConfig>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e022      	b.n	800440c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 ffe8 	bl	80053a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f001 f86f 	bl	80054e8 <UART_CheckIdleState>
 800440a:	4603      	mov	r3, r0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	; 0x28
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	4613      	mov	r3, r2
 8004422:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800442a:	2b20      	cmp	r3, #32
 800442c:	f040 8083 	bne.w	8004536 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <HAL_UART_Transmit+0x28>
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e07b      	b.n	8004538 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <HAL_UART_Transmit+0x3a>
 800444a:	2302      	movs	r3, #2
 800444c:	e074      	b.n	8004538 <HAL_UART_Transmit+0x124>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2221      	movs	r2, #33	; 0x21
 8004462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004466:	f7fc fe81 	bl	800116c <HAL_GetTick>
 800446a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	88fa      	ldrh	r2, [r7, #6]
 8004470:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	88fa      	ldrh	r2, [r7, #6]
 8004478:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004484:	d108      	bne.n	8004498 <HAL_UART_Transmit+0x84>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d104      	bne.n	8004498 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	e003      	b.n	80044a0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800449c:	2300      	movs	r3, #0
 800449e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80044a8:	e02c      	b.n	8004504 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2200      	movs	r2, #0
 80044b2:	2180      	movs	r1, #128	; 0x80
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f001 f862 	bl	800557e <UART_WaitOnFlagUntilTimeout>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e039      	b.n	8004538 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10b      	bne.n	80044e2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	3302      	adds	r3, #2
 80044de:	61bb      	str	r3, [r7, #24]
 80044e0:	e007      	b.n	80044f2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	781a      	ldrb	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	3301      	adds	r3, #1
 80044f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800450a:	b29b      	uxth	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1cc      	bne.n	80044aa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	2200      	movs	r2, #0
 8004518:	2140      	movs	r1, #64	; 0x40
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f001 f82f 	bl	800557e <UART_WaitOnFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e006      	b.n	8004538 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2220      	movs	r2, #32
 800452e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	e000      	b.n	8004538 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004536:	2302      	movs	r3, #2
  }
}
 8004538:	4618      	mov	r0, r3
 800453a:	3720      	adds	r7, #32
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08a      	sub	sp, #40	; 0x28
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	2b20      	cmp	r3, #32
 8004558:	f040 80c0 	bne.w	80046dc <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_UART_Receive+0x28>
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e0b8      	b.n	80046de <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_UART_Receive+0x3a>
 8004576:	2302      	movs	r3, #2
 8004578:	e0b1      	b.n	80046de <HAL_UART_Receive+0x19e>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2222      	movs	r2, #34	; 0x22
 800458e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004598:	f7fc fde8 	bl	800116c <HAL_GetTick>
 800459c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	88fa      	ldrh	r2, [r7, #6]
 80045a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	88fa      	ldrh	r2, [r7, #6]
 80045aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b6:	d10e      	bne.n	80045d6 <HAL_UART_Receive+0x96>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d105      	bne.n	80045cc <HAL_UART_Receive+0x8c>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80045c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045ca:	e02d      	b.n	8004628 <HAL_UART_Receive+0xe8>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	22ff      	movs	r2, #255	; 0xff
 80045d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045d4:	e028      	b.n	8004628 <HAL_UART_Receive+0xe8>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10d      	bne.n	80045fa <HAL_UART_Receive+0xba>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d104      	bne.n	80045f0 <HAL_UART_Receive+0xb0>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	22ff      	movs	r2, #255	; 0xff
 80045ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045ee:	e01b      	b.n	8004628 <HAL_UART_Receive+0xe8>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	227f      	movs	r2, #127	; 0x7f
 80045f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045f8:	e016      	b.n	8004628 <HAL_UART_Receive+0xe8>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004602:	d10d      	bne.n	8004620 <HAL_UART_Receive+0xe0>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d104      	bne.n	8004616 <HAL_UART_Receive+0xd6>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	227f      	movs	r2, #127	; 0x7f
 8004610:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004614:	e008      	b.n	8004628 <HAL_UART_Receive+0xe8>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	223f      	movs	r2, #63	; 0x3f
 800461a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800461e:	e003      	b.n	8004628 <HAL_UART_Receive+0xe8>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800462e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004638:	d108      	bne.n	800464c <HAL_UART_Receive+0x10c>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d104      	bne.n	800464c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	e003      	b.n	8004654 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004650:	2300      	movs	r3, #0
 8004652:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800465c:	e032      	b.n	80046c4 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2200      	movs	r2, #0
 8004666:	2120      	movs	r1, #32
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 ff88 	bl	800557e <UART_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e032      	b.n	80046de <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10c      	bne.n	8004698 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	b29a      	uxth	r2, r3
 8004686:	8a7b      	ldrh	r3, [r7, #18]
 8004688:	4013      	ands	r3, r2
 800468a:	b29a      	uxth	r2, r3
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	3302      	adds	r3, #2
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	e00c      	b.n	80046b2 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	8a7b      	ldrh	r3, [r7, #18]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	4013      	ands	r3, r2
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	3301      	adds	r3, #1
 80046b0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1c6      	bne.n	800465e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	e000      	b.n	80046de <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80046dc:	2302      	movs	r3, #2
  }
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3720      	adds	r7, #32
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046e8:	b5b0      	push	{r4, r5, r7, lr}
 80046ea:	b08e      	sub	sp, #56	; 0x38
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	4313      	orrs	r3, r2
 800470c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4bbf      	ldr	r3, [pc, #764]	; (8004a14 <UART_SetConfig+0x32c>)
 8004716:	4013      	ands	r3, r2
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800471e:	430b      	orrs	r3, r1
 8004720:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4ab5      	ldr	r2, [pc, #724]	; (8004a18 <UART_SetConfig+0x330>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800474e:	4313      	orrs	r3, r2
 8004750:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	4bb0      	ldr	r3, [pc, #704]	; (8004a1c <UART_SetConfig+0x334>)
 800475a:	4013      	ands	r3, r2
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004762:	430b      	orrs	r3, r1
 8004764:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	f023 010f 	bic.w	r1, r3, #15
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4aa7      	ldr	r2, [pc, #668]	; (8004a20 <UART_SetConfig+0x338>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d176      	bne.n	8004874 <UART_SetConfig+0x18c>
 8004786:	4ba7      	ldr	r3, [pc, #668]	; (8004a24 <UART_SetConfig+0x33c>)
 8004788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800478e:	2b28      	cmp	r3, #40	; 0x28
 8004790:	d86c      	bhi.n	800486c <UART_SetConfig+0x184>
 8004792:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <UART_SetConfig+0xb0>)
 8004794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004798:	0800483d 	.word	0x0800483d
 800479c:	0800486d 	.word	0x0800486d
 80047a0:	0800486d 	.word	0x0800486d
 80047a4:	0800486d 	.word	0x0800486d
 80047a8:	0800486d 	.word	0x0800486d
 80047ac:	0800486d 	.word	0x0800486d
 80047b0:	0800486d 	.word	0x0800486d
 80047b4:	0800486d 	.word	0x0800486d
 80047b8:	08004845 	.word	0x08004845
 80047bc:	0800486d 	.word	0x0800486d
 80047c0:	0800486d 	.word	0x0800486d
 80047c4:	0800486d 	.word	0x0800486d
 80047c8:	0800486d 	.word	0x0800486d
 80047cc:	0800486d 	.word	0x0800486d
 80047d0:	0800486d 	.word	0x0800486d
 80047d4:	0800486d 	.word	0x0800486d
 80047d8:	0800484d 	.word	0x0800484d
 80047dc:	0800486d 	.word	0x0800486d
 80047e0:	0800486d 	.word	0x0800486d
 80047e4:	0800486d 	.word	0x0800486d
 80047e8:	0800486d 	.word	0x0800486d
 80047ec:	0800486d 	.word	0x0800486d
 80047f0:	0800486d 	.word	0x0800486d
 80047f4:	0800486d 	.word	0x0800486d
 80047f8:	08004855 	.word	0x08004855
 80047fc:	0800486d 	.word	0x0800486d
 8004800:	0800486d 	.word	0x0800486d
 8004804:	0800486d 	.word	0x0800486d
 8004808:	0800486d 	.word	0x0800486d
 800480c:	0800486d 	.word	0x0800486d
 8004810:	0800486d 	.word	0x0800486d
 8004814:	0800486d 	.word	0x0800486d
 8004818:	0800485d 	.word	0x0800485d
 800481c:	0800486d 	.word	0x0800486d
 8004820:	0800486d 	.word	0x0800486d
 8004824:	0800486d 	.word	0x0800486d
 8004828:	0800486d 	.word	0x0800486d
 800482c:	0800486d 	.word	0x0800486d
 8004830:	0800486d 	.word	0x0800486d
 8004834:	0800486d 	.word	0x0800486d
 8004838:	08004865 	.word	0x08004865
 800483c:	2301      	movs	r3, #1
 800483e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004842:	e326      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004844:	2304      	movs	r3, #4
 8004846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800484a:	e322      	b.n	8004e92 <UART_SetConfig+0x7aa>
 800484c:	2308      	movs	r3, #8
 800484e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004852:	e31e      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004854:	2310      	movs	r3, #16
 8004856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800485a:	e31a      	b.n	8004e92 <UART_SetConfig+0x7aa>
 800485c:	2320      	movs	r3, #32
 800485e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004862:	e316      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004864:	2340      	movs	r3, #64	; 0x40
 8004866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800486a:	e312      	b.n	8004e92 <UART_SetConfig+0x7aa>
 800486c:	2380      	movs	r3, #128	; 0x80
 800486e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004872:	e30e      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a6b      	ldr	r2, [pc, #428]	; (8004a28 <UART_SetConfig+0x340>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d130      	bne.n	80048e0 <UART_SetConfig+0x1f8>
 800487e:	4b69      	ldr	r3, [pc, #420]	; (8004a24 <UART_SetConfig+0x33c>)
 8004880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	2b05      	cmp	r3, #5
 8004888:	d826      	bhi.n	80048d8 <UART_SetConfig+0x1f0>
 800488a:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <UART_SetConfig+0x1a8>)
 800488c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004890:	080048a9 	.word	0x080048a9
 8004894:	080048b1 	.word	0x080048b1
 8004898:	080048b9 	.word	0x080048b9
 800489c:	080048c1 	.word	0x080048c1
 80048a0:	080048c9 	.word	0x080048c9
 80048a4:	080048d1 	.word	0x080048d1
 80048a8:	2300      	movs	r3, #0
 80048aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ae:	e2f0      	b.n	8004e92 <UART_SetConfig+0x7aa>
 80048b0:	2304      	movs	r3, #4
 80048b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048b6:	e2ec      	b.n	8004e92 <UART_SetConfig+0x7aa>
 80048b8:	2308      	movs	r3, #8
 80048ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048be:	e2e8      	b.n	8004e92 <UART_SetConfig+0x7aa>
 80048c0:	2310      	movs	r3, #16
 80048c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048c6:	e2e4      	b.n	8004e92 <UART_SetConfig+0x7aa>
 80048c8:	2320      	movs	r3, #32
 80048ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ce:	e2e0      	b.n	8004e92 <UART_SetConfig+0x7aa>
 80048d0:	2340      	movs	r3, #64	; 0x40
 80048d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048d6:	e2dc      	b.n	8004e92 <UART_SetConfig+0x7aa>
 80048d8:	2380      	movs	r3, #128	; 0x80
 80048da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048de:	e2d8      	b.n	8004e92 <UART_SetConfig+0x7aa>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a51      	ldr	r2, [pc, #324]	; (8004a2c <UART_SetConfig+0x344>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d130      	bne.n	800494c <UART_SetConfig+0x264>
 80048ea:	4b4e      	ldr	r3, [pc, #312]	; (8004a24 <UART_SetConfig+0x33c>)
 80048ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	2b05      	cmp	r3, #5
 80048f4:	d826      	bhi.n	8004944 <UART_SetConfig+0x25c>
 80048f6:	a201      	add	r2, pc, #4	; (adr r2, 80048fc <UART_SetConfig+0x214>)
 80048f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fc:	08004915 	.word	0x08004915
 8004900:	0800491d 	.word	0x0800491d
 8004904:	08004925 	.word	0x08004925
 8004908:	0800492d 	.word	0x0800492d
 800490c:	08004935 	.word	0x08004935
 8004910:	0800493d 	.word	0x0800493d
 8004914:	2300      	movs	r3, #0
 8004916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800491a:	e2ba      	b.n	8004e92 <UART_SetConfig+0x7aa>
 800491c:	2304      	movs	r3, #4
 800491e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004922:	e2b6      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004924:	2308      	movs	r3, #8
 8004926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800492a:	e2b2      	b.n	8004e92 <UART_SetConfig+0x7aa>
 800492c:	2310      	movs	r3, #16
 800492e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004932:	e2ae      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004934:	2320      	movs	r3, #32
 8004936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800493a:	e2aa      	b.n	8004e92 <UART_SetConfig+0x7aa>
 800493c:	2340      	movs	r3, #64	; 0x40
 800493e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004942:	e2a6      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800494a:	e2a2      	b.n	8004e92 <UART_SetConfig+0x7aa>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a37      	ldr	r2, [pc, #220]	; (8004a30 <UART_SetConfig+0x348>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d130      	bne.n	80049b8 <UART_SetConfig+0x2d0>
 8004956:	4b33      	ldr	r3, [pc, #204]	; (8004a24 <UART_SetConfig+0x33c>)
 8004958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	2b05      	cmp	r3, #5
 8004960:	d826      	bhi.n	80049b0 <UART_SetConfig+0x2c8>
 8004962:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <UART_SetConfig+0x280>)
 8004964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004968:	08004981 	.word	0x08004981
 800496c:	08004989 	.word	0x08004989
 8004970:	08004991 	.word	0x08004991
 8004974:	08004999 	.word	0x08004999
 8004978:	080049a1 	.word	0x080049a1
 800497c:	080049a9 	.word	0x080049a9
 8004980:	2300      	movs	r3, #0
 8004982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004986:	e284      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004988:	2304      	movs	r3, #4
 800498a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800498e:	e280      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004990:	2308      	movs	r3, #8
 8004992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004996:	e27c      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004998:	2310      	movs	r3, #16
 800499a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800499e:	e278      	b.n	8004e92 <UART_SetConfig+0x7aa>
 80049a0:	2320      	movs	r3, #32
 80049a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049a6:	e274      	b.n	8004e92 <UART_SetConfig+0x7aa>
 80049a8:	2340      	movs	r3, #64	; 0x40
 80049aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049ae:	e270      	b.n	8004e92 <UART_SetConfig+0x7aa>
 80049b0:	2380      	movs	r3, #128	; 0x80
 80049b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049b6:	e26c      	b.n	8004e92 <UART_SetConfig+0x7aa>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a1d      	ldr	r2, [pc, #116]	; (8004a34 <UART_SetConfig+0x34c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d142      	bne.n	8004a48 <UART_SetConfig+0x360>
 80049c2:	4b18      	ldr	r3, [pc, #96]	; (8004a24 <UART_SetConfig+0x33c>)
 80049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	2b05      	cmp	r3, #5
 80049cc:	d838      	bhi.n	8004a40 <UART_SetConfig+0x358>
 80049ce:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <UART_SetConfig+0x2ec>)
 80049d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d4:	080049ed 	.word	0x080049ed
 80049d8:	080049f5 	.word	0x080049f5
 80049dc:	080049fd 	.word	0x080049fd
 80049e0:	08004a05 	.word	0x08004a05
 80049e4:	08004a0d 	.word	0x08004a0d
 80049e8:	08004a39 	.word	0x08004a39
 80049ec:	2300      	movs	r3, #0
 80049ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049f2:	e24e      	b.n	8004e92 <UART_SetConfig+0x7aa>
 80049f4:	2304      	movs	r3, #4
 80049f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049fa:	e24a      	b.n	8004e92 <UART_SetConfig+0x7aa>
 80049fc:	2308      	movs	r3, #8
 80049fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a02:	e246      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004a04:	2310      	movs	r3, #16
 8004a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a0a:	e242      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004a0c:	2320      	movs	r3, #32
 8004a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a12:	e23e      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004a14:	cfff69f3 	.word	0xcfff69f3
 8004a18:	58000c00 	.word	0x58000c00
 8004a1c:	11fff4ff 	.word	0x11fff4ff
 8004a20:	40011000 	.word	0x40011000
 8004a24:	58024400 	.word	0x58024400
 8004a28:	40004400 	.word	0x40004400
 8004a2c:	40004800 	.word	0x40004800
 8004a30:	40004c00 	.word	0x40004c00
 8004a34:	40005000 	.word	0x40005000
 8004a38:	2340      	movs	r3, #64	; 0x40
 8004a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a3e:	e228      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004a40:	2380      	movs	r3, #128	; 0x80
 8004a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a46:	e224      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4ab1      	ldr	r2, [pc, #708]	; (8004d14 <UART_SetConfig+0x62c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d176      	bne.n	8004b40 <UART_SetConfig+0x458>
 8004a52:	4bb1      	ldr	r3, [pc, #708]	; (8004d18 <UART_SetConfig+0x630>)
 8004a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a5a:	2b28      	cmp	r3, #40	; 0x28
 8004a5c:	d86c      	bhi.n	8004b38 <UART_SetConfig+0x450>
 8004a5e:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <UART_SetConfig+0x37c>)
 8004a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a64:	08004b09 	.word	0x08004b09
 8004a68:	08004b39 	.word	0x08004b39
 8004a6c:	08004b39 	.word	0x08004b39
 8004a70:	08004b39 	.word	0x08004b39
 8004a74:	08004b39 	.word	0x08004b39
 8004a78:	08004b39 	.word	0x08004b39
 8004a7c:	08004b39 	.word	0x08004b39
 8004a80:	08004b39 	.word	0x08004b39
 8004a84:	08004b11 	.word	0x08004b11
 8004a88:	08004b39 	.word	0x08004b39
 8004a8c:	08004b39 	.word	0x08004b39
 8004a90:	08004b39 	.word	0x08004b39
 8004a94:	08004b39 	.word	0x08004b39
 8004a98:	08004b39 	.word	0x08004b39
 8004a9c:	08004b39 	.word	0x08004b39
 8004aa0:	08004b39 	.word	0x08004b39
 8004aa4:	08004b19 	.word	0x08004b19
 8004aa8:	08004b39 	.word	0x08004b39
 8004aac:	08004b39 	.word	0x08004b39
 8004ab0:	08004b39 	.word	0x08004b39
 8004ab4:	08004b39 	.word	0x08004b39
 8004ab8:	08004b39 	.word	0x08004b39
 8004abc:	08004b39 	.word	0x08004b39
 8004ac0:	08004b39 	.word	0x08004b39
 8004ac4:	08004b21 	.word	0x08004b21
 8004ac8:	08004b39 	.word	0x08004b39
 8004acc:	08004b39 	.word	0x08004b39
 8004ad0:	08004b39 	.word	0x08004b39
 8004ad4:	08004b39 	.word	0x08004b39
 8004ad8:	08004b39 	.word	0x08004b39
 8004adc:	08004b39 	.word	0x08004b39
 8004ae0:	08004b39 	.word	0x08004b39
 8004ae4:	08004b29 	.word	0x08004b29
 8004ae8:	08004b39 	.word	0x08004b39
 8004aec:	08004b39 	.word	0x08004b39
 8004af0:	08004b39 	.word	0x08004b39
 8004af4:	08004b39 	.word	0x08004b39
 8004af8:	08004b39 	.word	0x08004b39
 8004afc:	08004b39 	.word	0x08004b39
 8004b00:	08004b39 	.word	0x08004b39
 8004b04:	08004b31 	.word	0x08004b31
 8004b08:	2301      	movs	r3, #1
 8004b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b0e:	e1c0      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004b10:	2304      	movs	r3, #4
 8004b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b16:	e1bc      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004b18:	2308      	movs	r3, #8
 8004b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b1e:	e1b8      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004b20:	2310      	movs	r3, #16
 8004b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b26:	e1b4      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004b28:	2320      	movs	r3, #32
 8004b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b2e:	e1b0      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004b30:	2340      	movs	r3, #64	; 0x40
 8004b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b36:	e1ac      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004b38:	2380      	movs	r3, #128	; 0x80
 8004b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b3e:	e1a8      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a75      	ldr	r2, [pc, #468]	; (8004d1c <UART_SetConfig+0x634>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d130      	bne.n	8004bac <UART_SetConfig+0x4c4>
 8004b4a:	4b73      	ldr	r3, [pc, #460]	; (8004d18 <UART_SetConfig+0x630>)
 8004b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	2b05      	cmp	r3, #5
 8004b54:	d826      	bhi.n	8004ba4 <UART_SetConfig+0x4bc>
 8004b56:	a201      	add	r2, pc, #4	; (adr r2, 8004b5c <UART_SetConfig+0x474>)
 8004b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5c:	08004b75 	.word	0x08004b75
 8004b60:	08004b7d 	.word	0x08004b7d
 8004b64:	08004b85 	.word	0x08004b85
 8004b68:	08004b8d 	.word	0x08004b8d
 8004b6c:	08004b95 	.word	0x08004b95
 8004b70:	08004b9d 	.word	0x08004b9d
 8004b74:	2300      	movs	r3, #0
 8004b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b7a:	e18a      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b82:	e186      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004b84:	2308      	movs	r3, #8
 8004b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b8a:	e182      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b92:	e17e      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004b94:	2320      	movs	r3, #32
 8004b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b9a:	e17a      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004b9c:	2340      	movs	r3, #64	; 0x40
 8004b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ba2:	e176      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004ba4:	2380      	movs	r3, #128	; 0x80
 8004ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004baa:	e172      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a5b      	ldr	r2, [pc, #364]	; (8004d20 <UART_SetConfig+0x638>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d130      	bne.n	8004c18 <UART_SetConfig+0x530>
 8004bb6:	4b58      	ldr	r3, [pc, #352]	; (8004d18 <UART_SetConfig+0x630>)
 8004bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	2b05      	cmp	r3, #5
 8004bc0:	d826      	bhi.n	8004c10 <UART_SetConfig+0x528>
 8004bc2:	a201      	add	r2, pc, #4	; (adr r2, 8004bc8 <UART_SetConfig+0x4e0>)
 8004bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc8:	08004be1 	.word	0x08004be1
 8004bcc:	08004be9 	.word	0x08004be9
 8004bd0:	08004bf1 	.word	0x08004bf1
 8004bd4:	08004bf9 	.word	0x08004bf9
 8004bd8:	08004c01 	.word	0x08004c01
 8004bdc:	08004c09 	.word	0x08004c09
 8004be0:	2300      	movs	r3, #0
 8004be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004be6:	e154      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004be8:	2304      	movs	r3, #4
 8004bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bee:	e150      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bf6:	e14c      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bfe:	e148      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004c00:	2320      	movs	r3, #32
 8004c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c06:	e144      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004c08:	2340      	movs	r3, #64	; 0x40
 8004c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c0e:	e140      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004c10:	2380      	movs	r3, #128	; 0x80
 8004c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c16:	e13c      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a41      	ldr	r2, [pc, #260]	; (8004d24 <UART_SetConfig+0x63c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	f040 8082 	bne.w	8004d28 <UART_SetConfig+0x640>
 8004c24:	4b3c      	ldr	r3, [pc, #240]	; (8004d18 <UART_SetConfig+0x630>)
 8004c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c2c:	2b28      	cmp	r3, #40	; 0x28
 8004c2e:	d86d      	bhi.n	8004d0c <UART_SetConfig+0x624>
 8004c30:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <UART_SetConfig+0x550>)
 8004c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c36:	bf00      	nop
 8004c38:	08004cdd 	.word	0x08004cdd
 8004c3c:	08004d0d 	.word	0x08004d0d
 8004c40:	08004d0d 	.word	0x08004d0d
 8004c44:	08004d0d 	.word	0x08004d0d
 8004c48:	08004d0d 	.word	0x08004d0d
 8004c4c:	08004d0d 	.word	0x08004d0d
 8004c50:	08004d0d 	.word	0x08004d0d
 8004c54:	08004d0d 	.word	0x08004d0d
 8004c58:	08004ce5 	.word	0x08004ce5
 8004c5c:	08004d0d 	.word	0x08004d0d
 8004c60:	08004d0d 	.word	0x08004d0d
 8004c64:	08004d0d 	.word	0x08004d0d
 8004c68:	08004d0d 	.word	0x08004d0d
 8004c6c:	08004d0d 	.word	0x08004d0d
 8004c70:	08004d0d 	.word	0x08004d0d
 8004c74:	08004d0d 	.word	0x08004d0d
 8004c78:	08004ced 	.word	0x08004ced
 8004c7c:	08004d0d 	.word	0x08004d0d
 8004c80:	08004d0d 	.word	0x08004d0d
 8004c84:	08004d0d 	.word	0x08004d0d
 8004c88:	08004d0d 	.word	0x08004d0d
 8004c8c:	08004d0d 	.word	0x08004d0d
 8004c90:	08004d0d 	.word	0x08004d0d
 8004c94:	08004d0d 	.word	0x08004d0d
 8004c98:	08004cf5 	.word	0x08004cf5
 8004c9c:	08004d0d 	.word	0x08004d0d
 8004ca0:	08004d0d 	.word	0x08004d0d
 8004ca4:	08004d0d 	.word	0x08004d0d
 8004ca8:	08004d0d 	.word	0x08004d0d
 8004cac:	08004d0d 	.word	0x08004d0d
 8004cb0:	08004d0d 	.word	0x08004d0d
 8004cb4:	08004d0d 	.word	0x08004d0d
 8004cb8:	08004cfd 	.word	0x08004cfd
 8004cbc:	08004d0d 	.word	0x08004d0d
 8004cc0:	08004d0d 	.word	0x08004d0d
 8004cc4:	08004d0d 	.word	0x08004d0d
 8004cc8:	08004d0d 	.word	0x08004d0d
 8004ccc:	08004d0d 	.word	0x08004d0d
 8004cd0:	08004d0d 	.word	0x08004d0d
 8004cd4:	08004d0d 	.word	0x08004d0d
 8004cd8:	08004d05 	.word	0x08004d05
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ce2:	e0d6      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004ce4:	2304      	movs	r3, #4
 8004ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cea:	e0d2      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004cec:	2308      	movs	r3, #8
 8004cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cf2:	e0ce      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004cf4:	2310      	movs	r3, #16
 8004cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cfa:	e0ca      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004cfc:	2320      	movs	r3, #32
 8004cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d02:	e0c6      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004d04:	2340      	movs	r3, #64	; 0x40
 8004d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d0a:	e0c2      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004d0c:	2380      	movs	r3, #128	; 0x80
 8004d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d12:	e0be      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004d14:	40011400 	.word	0x40011400
 8004d18:	58024400 	.word	0x58024400
 8004d1c:	40007800 	.word	0x40007800
 8004d20:	40007c00 	.word	0x40007c00
 8004d24:	40011800 	.word	0x40011800
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4aad      	ldr	r2, [pc, #692]	; (8004fe4 <UART_SetConfig+0x8fc>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d176      	bne.n	8004e20 <UART_SetConfig+0x738>
 8004d32:	4bad      	ldr	r3, [pc, #692]	; (8004fe8 <UART_SetConfig+0x900>)
 8004d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d3a:	2b28      	cmp	r3, #40	; 0x28
 8004d3c:	d86c      	bhi.n	8004e18 <UART_SetConfig+0x730>
 8004d3e:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <UART_SetConfig+0x65c>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08004de9 	.word	0x08004de9
 8004d48:	08004e19 	.word	0x08004e19
 8004d4c:	08004e19 	.word	0x08004e19
 8004d50:	08004e19 	.word	0x08004e19
 8004d54:	08004e19 	.word	0x08004e19
 8004d58:	08004e19 	.word	0x08004e19
 8004d5c:	08004e19 	.word	0x08004e19
 8004d60:	08004e19 	.word	0x08004e19
 8004d64:	08004df1 	.word	0x08004df1
 8004d68:	08004e19 	.word	0x08004e19
 8004d6c:	08004e19 	.word	0x08004e19
 8004d70:	08004e19 	.word	0x08004e19
 8004d74:	08004e19 	.word	0x08004e19
 8004d78:	08004e19 	.word	0x08004e19
 8004d7c:	08004e19 	.word	0x08004e19
 8004d80:	08004e19 	.word	0x08004e19
 8004d84:	08004df9 	.word	0x08004df9
 8004d88:	08004e19 	.word	0x08004e19
 8004d8c:	08004e19 	.word	0x08004e19
 8004d90:	08004e19 	.word	0x08004e19
 8004d94:	08004e19 	.word	0x08004e19
 8004d98:	08004e19 	.word	0x08004e19
 8004d9c:	08004e19 	.word	0x08004e19
 8004da0:	08004e19 	.word	0x08004e19
 8004da4:	08004e01 	.word	0x08004e01
 8004da8:	08004e19 	.word	0x08004e19
 8004dac:	08004e19 	.word	0x08004e19
 8004db0:	08004e19 	.word	0x08004e19
 8004db4:	08004e19 	.word	0x08004e19
 8004db8:	08004e19 	.word	0x08004e19
 8004dbc:	08004e19 	.word	0x08004e19
 8004dc0:	08004e19 	.word	0x08004e19
 8004dc4:	08004e09 	.word	0x08004e09
 8004dc8:	08004e19 	.word	0x08004e19
 8004dcc:	08004e19 	.word	0x08004e19
 8004dd0:	08004e19 	.word	0x08004e19
 8004dd4:	08004e19 	.word	0x08004e19
 8004dd8:	08004e19 	.word	0x08004e19
 8004ddc:	08004e19 	.word	0x08004e19
 8004de0:	08004e19 	.word	0x08004e19
 8004de4:	08004e11 	.word	0x08004e11
 8004de8:	2301      	movs	r3, #1
 8004dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dee:	e050      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004df0:	2304      	movs	r3, #4
 8004df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004df6:	e04c      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004df8:	2308      	movs	r3, #8
 8004dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dfe:	e048      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004e00:	2310      	movs	r3, #16
 8004e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e06:	e044      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004e08:	2320      	movs	r3, #32
 8004e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e0e:	e040      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004e10:	2340      	movs	r3, #64	; 0x40
 8004e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e16:	e03c      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004e18:	2380      	movs	r3, #128	; 0x80
 8004e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e1e:	e038      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a71      	ldr	r2, [pc, #452]	; (8004fec <UART_SetConfig+0x904>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d130      	bne.n	8004e8c <UART_SetConfig+0x7a4>
 8004e2a:	4b6f      	ldr	r3, [pc, #444]	; (8004fe8 <UART_SetConfig+0x900>)
 8004e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	2b05      	cmp	r3, #5
 8004e34:	d826      	bhi.n	8004e84 <UART_SetConfig+0x79c>
 8004e36:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <UART_SetConfig+0x754>)
 8004e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3c:	08004e55 	.word	0x08004e55
 8004e40:	08004e5d 	.word	0x08004e5d
 8004e44:	08004e65 	.word	0x08004e65
 8004e48:	08004e6d 	.word	0x08004e6d
 8004e4c:	08004e75 	.word	0x08004e75
 8004e50:	08004e7d 	.word	0x08004e7d
 8004e54:	2302      	movs	r3, #2
 8004e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e5a:	e01a      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e62:	e016      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004e64:	2308      	movs	r3, #8
 8004e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e6a:	e012      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e72:	e00e      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004e74:	2320      	movs	r3, #32
 8004e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e7a:	e00a      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004e7c:	2340      	movs	r3, #64	; 0x40
 8004e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e82:	e006      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e8a:	e002      	b.n	8004e92 <UART_SetConfig+0x7aa>
 8004e8c:	2380      	movs	r3, #128	; 0x80
 8004e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a55      	ldr	r2, [pc, #340]	; (8004fec <UART_SetConfig+0x904>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	f040 80f0 	bne.w	800507e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	dc46      	bgt.n	8004f34 <UART_SetConfig+0x84c>
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	db75      	blt.n	8004f96 <UART_SetConfig+0x8ae>
 8004eaa:	3b02      	subs	r3, #2
 8004eac:	2b1e      	cmp	r3, #30
 8004eae:	d872      	bhi.n	8004f96 <UART_SetConfig+0x8ae>
 8004eb0:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <UART_SetConfig+0x7d0>)
 8004eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb6:	bf00      	nop
 8004eb8:	08004f3b 	.word	0x08004f3b
 8004ebc:	08004f97 	.word	0x08004f97
 8004ec0:	08004f43 	.word	0x08004f43
 8004ec4:	08004f97 	.word	0x08004f97
 8004ec8:	08004f97 	.word	0x08004f97
 8004ecc:	08004f97 	.word	0x08004f97
 8004ed0:	08004f53 	.word	0x08004f53
 8004ed4:	08004f97 	.word	0x08004f97
 8004ed8:	08004f97 	.word	0x08004f97
 8004edc:	08004f97 	.word	0x08004f97
 8004ee0:	08004f97 	.word	0x08004f97
 8004ee4:	08004f97 	.word	0x08004f97
 8004ee8:	08004f97 	.word	0x08004f97
 8004eec:	08004f97 	.word	0x08004f97
 8004ef0:	08004f63 	.word	0x08004f63
 8004ef4:	08004f97 	.word	0x08004f97
 8004ef8:	08004f97 	.word	0x08004f97
 8004efc:	08004f97 	.word	0x08004f97
 8004f00:	08004f97 	.word	0x08004f97
 8004f04:	08004f97 	.word	0x08004f97
 8004f08:	08004f97 	.word	0x08004f97
 8004f0c:	08004f97 	.word	0x08004f97
 8004f10:	08004f97 	.word	0x08004f97
 8004f14:	08004f97 	.word	0x08004f97
 8004f18:	08004f97 	.word	0x08004f97
 8004f1c:	08004f97 	.word	0x08004f97
 8004f20:	08004f97 	.word	0x08004f97
 8004f24:	08004f97 	.word	0x08004f97
 8004f28:	08004f97 	.word	0x08004f97
 8004f2c:	08004f97 	.word	0x08004f97
 8004f30:	08004f89 	.word	0x08004f89
 8004f34:	2b40      	cmp	r3, #64	; 0x40
 8004f36:	d02a      	beq.n	8004f8e <UART_SetConfig+0x8a6>
 8004f38:	e02d      	b.n	8004f96 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004f3a:	f7fe fb1f 	bl	800357c <HAL_RCCEx_GetD3PCLK1Freq>
 8004f3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004f40:	e02f      	b.n	8004fa2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f42:	f107 0314 	add.w	r3, r7, #20
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fe fb2e 	bl	80035a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f50:	e027      	b.n	8004fa2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f52:	f107 0308 	add.w	r3, r7, #8
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fe fc7a 	bl	8003850 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f60:	e01f      	b.n	8004fa2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f62:	4b21      	ldr	r3, [pc, #132]	; (8004fe8 <UART_SetConfig+0x900>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d009      	beq.n	8004f82 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f6e:	4b1e      	ldr	r3, [pc, #120]	; (8004fe8 <UART_SetConfig+0x900>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	08db      	lsrs	r3, r3, #3
 8004f74:	f003 0303 	and.w	r3, r3, #3
 8004f78:	4a1d      	ldr	r2, [pc, #116]	; (8004ff0 <UART_SetConfig+0x908>)
 8004f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f80:	e00f      	b.n	8004fa2 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8004f82:	4b1b      	ldr	r3, [pc, #108]	; (8004ff0 <UART_SetConfig+0x908>)
 8004f84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f86:	e00c      	b.n	8004fa2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f88:	4b1a      	ldr	r3, [pc, #104]	; (8004ff4 <UART_SetConfig+0x90c>)
 8004f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f8c:	e009      	b.n	8004fa2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f94:	e005      	b.n	8004fa2 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004fa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 81e6 	beq.w	8005376 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	4a12      	ldr	r2, [pc, #72]	; (8004ff8 <UART_SetConfig+0x910>)
 8004fb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fbc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	4413      	add	r3, r2
 8004fc8:	6a3a      	ldr	r2, [r7, #32]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d305      	bcc.n	8004fda <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fd4:	6a3a      	ldr	r2, [r7, #32]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d910      	bls.n	8004ffc <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004fe0:	e1c9      	b.n	8005376 <UART_SetConfig+0xc8e>
 8004fe2:	bf00      	nop
 8004fe4:	40011c00 	.word	0x40011c00
 8004fe8:	58024400 	.word	0x58024400
 8004fec:	58000c00 	.word	0x58000c00
 8004ff0:	03d09000 	.word	0x03d09000
 8004ff4:	003d0900 	.word	0x003d0900
 8004ff8:	080094c0 	.word	0x080094c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffe:	4618      	mov	r0, r3
 8005000:	f04f 0100 	mov.w	r1, #0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	4ac1      	ldr	r2, [pc, #772]	; (8005310 <UART_SetConfig+0xc28>)
 800500a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800500e:	b29a      	uxth	r2, r3
 8005010:	f04f 0300 	mov.w	r3, #0
 8005014:	f7fb f9bc 	bl	8000390 <__aeabi_uldivmod>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4610      	mov	r0, r2
 800501e:	4619      	mov	r1, r3
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	020b      	lsls	r3, r1, #8
 800502a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800502e:	0202      	lsls	r2, r0, #8
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	6849      	ldr	r1, [r1, #4]
 8005034:	0849      	lsrs	r1, r1, #1
 8005036:	4608      	mov	r0, r1
 8005038:	f04f 0100 	mov.w	r1, #0
 800503c:	1814      	adds	r4, r2, r0
 800503e:	eb43 0501 	adc.w	r5, r3, r1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	461a      	mov	r2, r3
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	4620      	mov	r0, r4
 800504e:	4629      	mov	r1, r5
 8005050:	f7fb f99e 	bl	8000390 <__aeabi_uldivmod>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4613      	mov	r3, r2
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005062:	d308      	bcc.n	8005076 <UART_SetConfig+0x98e>
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800506a:	d204      	bcs.n	8005076 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005072:	60da      	str	r2, [r3, #12]
 8005074:	e17f      	b.n	8005376 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800507c:	e17b      	b.n	8005376 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005086:	f040 80bd 	bne.w	8005204 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800508a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800508e:	2b20      	cmp	r3, #32
 8005090:	dc48      	bgt.n	8005124 <UART_SetConfig+0xa3c>
 8005092:	2b00      	cmp	r3, #0
 8005094:	db7b      	blt.n	800518e <UART_SetConfig+0xaa6>
 8005096:	2b20      	cmp	r3, #32
 8005098:	d879      	bhi.n	800518e <UART_SetConfig+0xaa6>
 800509a:	a201      	add	r2, pc, #4	; (adr r2, 80050a0 <UART_SetConfig+0x9b8>)
 800509c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a0:	0800512b 	.word	0x0800512b
 80050a4:	08005133 	.word	0x08005133
 80050a8:	0800518f 	.word	0x0800518f
 80050ac:	0800518f 	.word	0x0800518f
 80050b0:	0800513b 	.word	0x0800513b
 80050b4:	0800518f 	.word	0x0800518f
 80050b8:	0800518f 	.word	0x0800518f
 80050bc:	0800518f 	.word	0x0800518f
 80050c0:	0800514b 	.word	0x0800514b
 80050c4:	0800518f 	.word	0x0800518f
 80050c8:	0800518f 	.word	0x0800518f
 80050cc:	0800518f 	.word	0x0800518f
 80050d0:	0800518f 	.word	0x0800518f
 80050d4:	0800518f 	.word	0x0800518f
 80050d8:	0800518f 	.word	0x0800518f
 80050dc:	0800518f 	.word	0x0800518f
 80050e0:	0800515b 	.word	0x0800515b
 80050e4:	0800518f 	.word	0x0800518f
 80050e8:	0800518f 	.word	0x0800518f
 80050ec:	0800518f 	.word	0x0800518f
 80050f0:	0800518f 	.word	0x0800518f
 80050f4:	0800518f 	.word	0x0800518f
 80050f8:	0800518f 	.word	0x0800518f
 80050fc:	0800518f 	.word	0x0800518f
 8005100:	0800518f 	.word	0x0800518f
 8005104:	0800518f 	.word	0x0800518f
 8005108:	0800518f 	.word	0x0800518f
 800510c:	0800518f 	.word	0x0800518f
 8005110:	0800518f 	.word	0x0800518f
 8005114:	0800518f 	.word	0x0800518f
 8005118:	0800518f 	.word	0x0800518f
 800511c:	0800518f 	.word	0x0800518f
 8005120:	08005181 	.word	0x08005181
 8005124:	2b40      	cmp	r3, #64	; 0x40
 8005126:	d02e      	beq.n	8005186 <UART_SetConfig+0xa9e>
 8005128:	e031      	b.n	800518e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800512a:	f7fd faad 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 800512e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005130:	e033      	b.n	800519a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005132:	f7fd fabf 	bl	80026b4 <HAL_RCC_GetPCLK2Freq>
 8005136:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005138:	e02f      	b.n	800519a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800513a:	f107 0314 	add.w	r3, r7, #20
 800513e:	4618      	mov	r0, r3
 8005140:	f7fe fa32 	bl	80035a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005148:	e027      	b.n	800519a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800514a:	f107 0308 	add.w	r3, r7, #8
 800514e:	4618      	mov	r0, r3
 8005150:	f7fe fb7e 	bl	8003850 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005158:	e01f      	b.n	800519a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800515a:	4b6e      	ldr	r3, [pc, #440]	; (8005314 <UART_SetConfig+0xc2c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005166:	4b6b      	ldr	r3, [pc, #428]	; (8005314 <UART_SetConfig+0xc2c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	08db      	lsrs	r3, r3, #3
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	4a69      	ldr	r2, [pc, #420]	; (8005318 <UART_SetConfig+0xc30>)
 8005172:	fa22 f303 	lsr.w	r3, r2, r3
 8005176:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005178:	e00f      	b.n	800519a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800517a:	4b67      	ldr	r3, [pc, #412]	; (8005318 <UART_SetConfig+0xc30>)
 800517c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800517e:	e00c      	b.n	800519a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005180:	4b66      	ldr	r3, [pc, #408]	; (800531c <UART_SetConfig+0xc34>)
 8005182:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005184:	e009      	b.n	800519a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800518a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800518c:	e005      	b.n	800519a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005198:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80ea 	beq.w	8005376 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	4a5a      	ldr	r2, [pc, #360]	; (8005310 <UART_SetConfig+0xc28>)
 80051a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051ac:	461a      	mov	r2, r3
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80051b4:	005a      	lsls	r2, r3, #1
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	085b      	lsrs	r3, r3, #1
 80051bc:	441a      	add	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	2b0f      	cmp	r3, #15
 80051cc:	d916      	bls.n	80051fc <UART_SetConfig+0xb14>
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d4:	d212      	bcs.n	80051fc <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d8:	b29b      	uxth	r3, r3
 80051da:	f023 030f 	bic.w	r3, r3, #15
 80051de:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	085b      	lsrs	r3, r3, #1
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051ee:	4313      	orrs	r3, r2
 80051f0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80051f8:	60da      	str	r2, [r3, #12]
 80051fa:	e0bc      	b.n	8005376 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005202:	e0b8      	b.n	8005376 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005204:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005208:	2b20      	cmp	r3, #32
 800520a:	dc4b      	bgt.n	80052a4 <UART_SetConfig+0xbbc>
 800520c:	2b00      	cmp	r3, #0
 800520e:	f2c0 8087 	blt.w	8005320 <UART_SetConfig+0xc38>
 8005212:	2b20      	cmp	r3, #32
 8005214:	f200 8084 	bhi.w	8005320 <UART_SetConfig+0xc38>
 8005218:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <UART_SetConfig+0xb38>)
 800521a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521e:	bf00      	nop
 8005220:	080052ab 	.word	0x080052ab
 8005224:	080052b3 	.word	0x080052b3
 8005228:	08005321 	.word	0x08005321
 800522c:	08005321 	.word	0x08005321
 8005230:	080052bb 	.word	0x080052bb
 8005234:	08005321 	.word	0x08005321
 8005238:	08005321 	.word	0x08005321
 800523c:	08005321 	.word	0x08005321
 8005240:	080052cb 	.word	0x080052cb
 8005244:	08005321 	.word	0x08005321
 8005248:	08005321 	.word	0x08005321
 800524c:	08005321 	.word	0x08005321
 8005250:	08005321 	.word	0x08005321
 8005254:	08005321 	.word	0x08005321
 8005258:	08005321 	.word	0x08005321
 800525c:	08005321 	.word	0x08005321
 8005260:	080052db 	.word	0x080052db
 8005264:	08005321 	.word	0x08005321
 8005268:	08005321 	.word	0x08005321
 800526c:	08005321 	.word	0x08005321
 8005270:	08005321 	.word	0x08005321
 8005274:	08005321 	.word	0x08005321
 8005278:	08005321 	.word	0x08005321
 800527c:	08005321 	.word	0x08005321
 8005280:	08005321 	.word	0x08005321
 8005284:	08005321 	.word	0x08005321
 8005288:	08005321 	.word	0x08005321
 800528c:	08005321 	.word	0x08005321
 8005290:	08005321 	.word	0x08005321
 8005294:	08005321 	.word	0x08005321
 8005298:	08005321 	.word	0x08005321
 800529c:	08005321 	.word	0x08005321
 80052a0:	08005301 	.word	0x08005301
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	d02e      	beq.n	8005306 <UART_SetConfig+0xc1e>
 80052a8:	e03a      	b.n	8005320 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052aa:	f7fd f9ed 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 80052ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80052b0:	e03c      	b.n	800532c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b2:	f7fd f9ff 	bl	80026b4 <HAL_RCC_GetPCLK2Freq>
 80052b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80052b8:	e038      	b.n	800532c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052ba:	f107 0314 	add.w	r3, r7, #20
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe f972 	bl	80035a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052c8:	e030      	b.n	800532c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052ca:	f107 0308 	add.w	r3, r7, #8
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fe fabe 	bl	8003850 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052d8:	e028      	b.n	800532c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052da:	4b0e      	ldr	r3, [pc, #56]	; (8005314 <UART_SetConfig+0xc2c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d009      	beq.n	80052fa <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80052e6:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <UART_SetConfig+0xc2c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	08db      	lsrs	r3, r3, #3
 80052ec:	f003 0303 	and.w	r3, r3, #3
 80052f0:	4a09      	ldr	r2, [pc, #36]	; (8005318 <UART_SetConfig+0xc30>)
 80052f2:	fa22 f303 	lsr.w	r3, r2, r3
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052f8:	e018      	b.n	800532c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80052fa:	4b07      	ldr	r3, [pc, #28]	; (8005318 <UART_SetConfig+0xc30>)
 80052fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052fe:	e015      	b.n	800532c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005300:	4b06      	ldr	r3, [pc, #24]	; (800531c <UART_SetConfig+0xc34>)
 8005302:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005304:	e012      	b.n	800532c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800530a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800530c:	e00e      	b.n	800532c <UART_SetConfig+0xc44>
 800530e:	bf00      	nop
 8005310:	080094c0 	.word	0x080094c0
 8005314:	58024400 	.word	0x58024400
 8005318:	03d09000 	.word	0x03d09000
 800531c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800532a:	bf00      	nop
    }

    if (pclk != 0U)
 800532c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d021      	beq.n	8005376 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	4a1a      	ldr	r2, [pc, #104]	; (80053a0 <UART_SetConfig+0xcb8>)
 8005338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800533c:	461a      	mov	r2, r3
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	fbb3 f2f2 	udiv	r2, r3, r2
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	441a      	add	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	fbb2 f3f3 	udiv	r3, r2, r3
 8005354:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005358:	2b0f      	cmp	r3, #15
 800535a:	d909      	bls.n	8005370 <UART_SetConfig+0xc88>
 800535c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005362:	d205      	bcs.n	8005370 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	b29a      	uxth	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60da      	str	r2, [r3, #12]
 800536e:	e002      	b.n	8005376 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005392:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005396:	4618      	mov	r0, r3
 8005398:	3738      	adds	r7, #56	; 0x38
 800539a:	46bd      	mov	sp, r7
 800539c:	bdb0      	pop	{r4, r5, r7, pc}
 800539e:	bf00      	nop
 80053a0:	080094c0 	.word	0x080094c0

080053a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005416:	f003 0308 	and.w	r3, r3, #8
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545a:	f003 0320 	and.w	r3, r3, #32
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01a      	beq.n	80054ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054a2:	d10a      	bne.n	80054ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	605a      	str	r2, [r3, #4]
  }
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af02      	add	r7, sp, #8
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054f8:	f7fb fe38 	bl	800116c <HAL_GetTick>
 80054fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0308 	and.w	r3, r3, #8
 8005508:	2b08      	cmp	r3, #8
 800550a:	d10e      	bne.n	800552a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800550c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f82f 	bl	800557e <UART_WaitOnFlagUntilTimeout>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e025      	b.n	8005576 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b04      	cmp	r3, #4
 8005536:	d10e      	bne.n	8005556 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005538:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f819 	bl	800557e <UART_WaitOnFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e00f      	b.n	8005576 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2220      	movs	r2, #32
 800555a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2220      	movs	r2, #32
 8005562:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b09c      	sub	sp, #112	; 0x70
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	603b      	str	r3, [r7, #0]
 800558a:	4613      	mov	r3, r2
 800558c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800558e:	e0a9      	b.n	80056e4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005596:	f000 80a5 	beq.w	80056e4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559a:	f7fb fde7 	bl	800116c <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d302      	bcc.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80055aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d140      	bne.n	8005632 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055c4:	667b      	str	r3, [r7, #100]	; 0x64
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e6      	bne.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3308      	adds	r3, #8
 80055e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	663b      	str	r3, [r7, #96]	; 0x60
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3308      	adds	r3, #8
 8005600:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005602:	64ba      	str	r2, [r7, #72]	; 0x48
 8005604:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005608:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e5      	bne.n	80055e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e069      	b.n	8005706 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d051      	beq.n	80056e4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800564a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564e:	d149      	bne.n	80056e4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005658:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	e853 3f00 	ldrex	r3, [r3]
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800566e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005678:	637b      	str	r3, [r7, #52]	; 0x34
 800567a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800567e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005680:	e841 2300 	strex	r3, r2, [r1]
 8005684:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1e6      	bne.n	800565a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3308      	adds	r3, #8
 8005692:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	e853 3f00 	ldrex	r3, [r3]
 800569a:	613b      	str	r3, [r7, #16]
   return(result);
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f023 0301 	bic.w	r3, r3, #1
 80056a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3308      	adds	r3, #8
 80056aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056ac:	623a      	str	r2, [r7, #32]
 80056ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b0:	69f9      	ldr	r1, [r7, #28]
 80056b2:	6a3a      	ldr	r2, [r7, #32]
 80056b4:	e841 2300 	strex	r3, r2, [r1]
 80056b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e5      	bne.n	800568c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e010      	b.n	8005706 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	69da      	ldr	r2, [r3, #28]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	4013      	ands	r3, r2
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	bf0c      	ite	eq
 80056f4:	2301      	moveq	r3, #1
 80056f6:	2300      	movne	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	461a      	mov	r2, r3
 80056fc:	79fb      	ldrb	r3, [r7, #7]
 80056fe:	429a      	cmp	r2, r3
 8005700:	f43f af46 	beq.w	8005590 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3770      	adds	r7, #112	; 0x70
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800570e:	b480      	push	{r7}
 8005710:	b085      	sub	sp, #20
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_UARTEx_DisableFifoMode+0x16>
 8005720:	2302      	movs	r3, #2
 8005722:	e027      	b.n	8005774 <HAL_UARTEx_DisableFifoMode+0x66>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2224      	movs	r2, #36	; 0x24
 8005730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0201 	bic.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005752:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005794:	2302      	movs	r3, #2
 8005796:	e02d      	b.n	80057f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2224      	movs	r2, #36	; 0x24
 80057a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0201 	bic.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f84f 	bl	8005878 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005810:	2302      	movs	r3, #2
 8005812:	e02d      	b.n	8005870 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2224      	movs	r2, #36	; 0x24
 8005820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0201 	bic.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f811 	bl	8005878 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005884:	2b00      	cmp	r3, #0
 8005886:	d108      	bne.n	800589a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005898:	e031      	b.n	80058fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800589a:	2310      	movs	r3, #16
 800589c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800589e:	2310      	movs	r3, #16
 80058a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	0e5b      	lsrs	r3, r3, #25
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	0f5b      	lsrs	r3, r3, #29
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058c2:	7bbb      	ldrb	r3, [r7, #14]
 80058c4:	7b3a      	ldrb	r2, [r7, #12]
 80058c6:	4911      	ldr	r1, [pc, #68]	; (800590c <UARTEx_SetNbDataToProcess+0x94>)
 80058c8:	5c8a      	ldrb	r2, [r1, r2]
 80058ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80058ce:	7b3a      	ldrb	r2, [r7, #12]
 80058d0:	490f      	ldr	r1, [pc, #60]	; (8005910 <UARTEx_SetNbDataToProcess+0x98>)
 80058d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80058d8:	b29a      	uxth	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
 80058e2:	7b7a      	ldrb	r2, [r7, #13]
 80058e4:	4909      	ldr	r1, [pc, #36]	; (800590c <UARTEx_SetNbDataToProcess+0x94>)
 80058e6:	5c8a      	ldrb	r2, [r1, r2]
 80058e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058ec:	7b7a      	ldrb	r2, [r7, #13]
 80058ee:	4908      	ldr	r1, [pc, #32]	; (8005910 <UARTEx_SetNbDataToProcess+0x98>)
 80058f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	080094d8 	.word	0x080094d8
 8005910:	080094e0 	.word	0x080094e0

08005914 <__NVIC_SetPriority>:
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	6039      	str	r1, [r7, #0]
 800591e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005924:	2b00      	cmp	r3, #0
 8005926:	db0a      	blt.n	800593e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	b2da      	uxtb	r2, r3
 800592c:	490c      	ldr	r1, [pc, #48]	; (8005960 <__NVIC_SetPriority+0x4c>)
 800592e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005932:	0112      	lsls	r2, r2, #4
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	440b      	add	r3, r1
 8005938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800593c:	e00a      	b.n	8005954 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	b2da      	uxtb	r2, r3
 8005942:	4908      	ldr	r1, [pc, #32]	; (8005964 <__NVIC_SetPriority+0x50>)
 8005944:	88fb      	ldrh	r3, [r7, #6]
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	3b04      	subs	r3, #4
 800594c:	0112      	lsls	r2, r2, #4
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	440b      	add	r3, r1
 8005952:	761a      	strb	r2, [r3, #24]
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	e000e100 	.word	0xe000e100
 8005964:	e000ed00 	.word	0xe000ed00

08005968 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800596c:	4b05      	ldr	r3, [pc, #20]	; (8005984 <SysTick_Handler+0x1c>)
 800596e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005970:	f001 ff12 	bl	8007798 <xTaskGetSchedulerState>
 8005974:	4603      	mov	r3, r0
 8005976:	2b01      	cmp	r3, #1
 8005978:	d001      	beq.n	800597e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800597a:	f002 fcfd 	bl	8008378 <xPortSysTickHandler>
  }
}
 800597e:	bf00      	nop
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	e000e010 	.word	0xe000e010

08005988 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800598c:	2100      	movs	r1, #0
 800598e:	f06f 0004 	mvn.w	r0, #4
 8005992:	f7ff ffbf 	bl	8005914 <__NVIC_SetPriority>
#endif
}
 8005996:	bf00      	nop
 8005998:	bd80      	pop	{r7, pc}
	...

0800599c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059a2:	f3ef 8305 	mrs	r3, IPSR
 80059a6:	603b      	str	r3, [r7, #0]
  return(result);
 80059a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80059ae:	f06f 0305 	mvn.w	r3, #5
 80059b2:	607b      	str	r3, [r7, #4]
 80059b4:	e00c      	b.n	80059d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80059b6:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <osKernelInitialize+0x44>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d105      	bne.n	80059ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80059be:	4b08      	ldr	r3, [pc, #32]	; (80059e0 <osKernelInitialize+0x44>)
 80059c0:	2201      	movs	r2, #1
 80059c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	607b      	str	r3, [r7, #4]
 80059c8:	e002      	b.n	80059d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80059ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80059d0:	687b      	ldr	r3, [r7, #4]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	24000098 	.word	0x24000098

080059e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059ea:	f3ef 8305 	mrs	r3, IPSR
 80059ee:	603b      	str	r3, [r7, #0]
  return(result);
 80059f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80059f6:	f06f 0305 	mvn.w	r3, #5
 80059fa:	607b      	str	r3, [r7, #4]
 80059fc:	e010      	b.n	8005a20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80059fe:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <osKernelStart+0x48>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d109      	bne.n	8005a1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005a06:	f7ff ffbf 	bl	8005988 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005a0a:	4b08      	ldr	r3, [pc, #32]	; (8005a2c <osKernelStart+0x48>)
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005a10:	f001 fa66 	bl	8006ee0 <vTaskStartScheduler>
      stat = osOK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	607b      	str	r3, [r7, #4]
 8005a18:	e002      	b.n	8005a20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a20:	687b      	ldr	r3, [r7, #4]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	24000098 	.word	0x24000098

08005a30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08e      	sub	sp, #56	; 0x38
 8005a34:	af04      	add	r7, sp, #16
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a40:	f3ef 8305 	mrs	r3, IPSR
 8005a44:	617b      	str	r3, [r7, #20]
  return(result);
 8005a46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d17e      	bne.n	8005b4a <osThreadNew+0x11a>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d07b      	beq.n	8005b4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005a52:	2380      	movs	r3, #128	; 0x80
 8005a54:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005a56:	2318      	movs	r3, #24
 8005a58:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d045      	beq.n	8005af6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <osThreadNew+0x48>
        name = attr->name;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d008      	beq.n	8005a9e <osThreadNew+0x6e>
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	2b38      	cmp	r3, #56	; 0x38
 8005a90:	d805      	bhi.n	8005a9e <osThreadNew+0x6e>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <osThreadNew+0x72>
        return (NULL);
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	e054      	b.n	8005b4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	089b      	lsrs	r3, r3, #2
 8005ab0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00e      	beq.n	8005ad8 <osThreadNew+0xa8>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	2bbb      	cmp	r3, #187	; 0xbb
 8005ac0:	d90a      	bls.n	8005ad8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d006      	beq.n	8005ad8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <osThreadNew+0xa8>
        mem = 1;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	e010      	b.n	8005afa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10c      	bne.n	8005afa <osThreadNew+0xca>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d108      	bne.n	8005afa <osThreadNew+0xca>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d104      	bne.n	8005afa <osThreadNew+0xca>
          mem = 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61bb      	str	r3, [r7, #24]
 8005af4:	e001      	b.n	8005afa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d110      	bne.n	8005b22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b08:	9202      	str	r2, [sp, #8]
 8005b0a:	9301      	str	r3, [sp, #4]
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	6a3a      	ldr	r2, [r7, #32]
 8005b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 fff6 	bl	8006b08 <xTaskCreateStatic>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	e013      	b.n	8005b4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d110      	bne.n	8005b4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	f107 0310 	add.w	r3, r7, #16
 8005b30:	9301      	str	r3, [sp, #4]
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f001 f841 	bl	8006bc2 <xTaskCreate>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d001      	beq.n	8005b4a <osThreadNew+0x11a>
            hTask = NULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b4a:	693b      	ldr	r3, [r7, #16]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3728      	adds	r7, #40	; 0x28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b5c:	f3ef 8305 	mrs	r3, IPSR
 8005b60:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <osDelay+0x1c>
    stat = osErrorISR;
 8005b68:	f06f 0305 	mvn.w	r3, #5
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	e007      	b.n	8005b80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f001 f97c 	bl	8006e78 <vTaskDelay>
    }
  }

  return (stat);
 8005b80:	68fb      	ldr	r3, [r7, #12]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b08a      	sub	sp, #40	; 0x28
 8005b8e:	af02      	add	r7, sp, #8
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b9a:	f3ef 8305 	mrs	r3, IPSR
 8005b9e:	613b      	str	r3, [r7, #16]
  return(result);
 8005ba0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d15f      	bne.n	8005c66 <osMessageQueueNew+0xdc>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d05c      	beq.n	8005c66 <osMessageQueueNew+0xdc>
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d059      	beq.n	8005c66 <osMessageQueueNew+0xdc>
    mem = -1;
 8005bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bb6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d029      	beq.n	8005c12 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d012      	beq.n	8005bec <osMessageQueueNew+0x62>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	2b4f      	cmp	r3, #79	; 0x4f
 8005bcc:	d90e      	bls.n	8005bec <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	695a      	ldr	r2, [r3, #20]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	fb01 f303 	mul.w	r3, r1, r3
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d302      	bcc.n	8005bec <osMessageQueueNew+0x62>
        mem = 1;
 8005be6:	2301      	movs	r3, #1
 8005be8:	61bb      	str	r3, [r7, #24]
 8005bea:	e014      	b.n	8005c16 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d110      	bne.n	8005c16 <osMessageQueueNew+0x8c>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10c      	bne.n	8005c16 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d108      	bne.n	8005c16 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d104      	bne.n	8005c16 <osMessageQueueNew+0x8c>
          mem = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	61bb      	str	r3, [r7, #24]
 8005c10:	e001      	b.n	8005c16 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d10b      	bne.n	8005c34 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	2100      	movs	r1, #0
 8005c26:	9100      	str	r1, [sp, #0]
 8005c28:	68b9      	ldr	r1, [r7, #8]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 fa2e 	bl	800608c <xQueueGenericCreateStatic>
 8005c30:	61f8      	str	r0, [r7, #28]
 8005c32:	e008      	b.n	8005c46 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d105      	bne.n	8005c46 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	68b9      	ldr	r1, [r7, #8]
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 fa9c 	bl	800617c <xQueueGenericCreate>
 8005c44:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00c      	beq.n	8005c66 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <osMessageQueueNew+0xd0>
        name = attr->name;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	e001      	b.n	8005c5e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005c5e:	6979      	ldr	r1, [r7, #20]
 8005c60:	69f8      	ldr	r0, [r7, #28]
 8005c62:	f000 fef3 	bl	8006a4c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005c66:	69fb      	ldr	r3, [r7, #28]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3720      	adds	r7, #32
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	603b      	str	r3, [r7, #0]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c88:	f3ef 8305 	mrs	r3, IPSR
 8005c8c:	617b      	str	r3, [r7, #20]
  return(result);
 8005c8e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d028      	beq.n	8005ce6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d005      	beq.n	8005ca6 <osMessageQueuePut+0x36>
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <osMessageQueuePut+0x36>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005ca6:	f06f 0303 	mvn.w	r3, #3
 8005caa:	61fb      	str	r3, [r7, #28]
 8005cac:	e038      	b.n	8005d20 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005cb2:	f107 0210 	add.w	r2, r7, #16
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	69b8      	ldr	r0, [r7, #24]
 8005cbc:	f000 fbba 	bl	8006434 <xQueueGenericSendFromISR>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d003      	beq.n	8005cce <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005cc6:	f06f 0302 	mvn.w	r3, #2
 8005cca:	61fb      	str	r3, [r7, #28]
 8005ccc:	e028      	b.n	8005d20 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d025      	beq.n	8005d20 <osMessageQueuePut+0xb0>
 8005cd4:	4b15      	ldr	r3, [pc, #84]	; (8005d2c <osMessageQueuePut+0xbc>)
 8005cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	e01c      	b.n	8005d20 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <osMessageQueuePut+0x82>
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d103      	bne.n	8005cfa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005cf2:	f06f 0303 	mvn.w	r3, #3
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	e012      	b.n	8005d20 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	68b9      	ldr	r1, [r7, #8]
 8005d00:	69b8      	ldr	r0, [r7, #24]
 8005d02:	f000 fa99 	bl	8006238 <xQueueGenericSend>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d009      	beq.n	8005d20 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005d12:	f06f 0301 	mvn.w	r3, #1
 8005d16:	61fb      	str	r3, [r7, #28]
 8005d18:	e002      	b.n	8005d20 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005d1a:	f06f 0302 	mvn.w	r3, #2
 8005d1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005d20:	69fb      	ldr	r3, [r7, #28]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3720      	adds	r7, #32
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	e000ed04 	.word	0xe000ed04

08005d30 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d46:	f3ef 8305 	mrs	r3, IPSR
 8005d4a:	617b      	str	r3, [r7, #20]
  return(result);
 8005d4c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d028      	beq.n	8005da4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d005      	beq.n	8005d64 <osMessageQueueGet+0x34>
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <osMessageQueueGet+0x34>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005d64:	f06f 0303 	mvn.w	r3, #3
 8005d68:	61fb      	str	r3, [r7, #28]
 8005d6a:	e037      	b.n	8005ddc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005d70:	f107 0310 	add.w	r3, r7, #16
 8005d74:	461a      	mov	r2, r3
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	69b8      	ldr	r0, [r7, #24]
 8005d7a:	f000 fcd7 	bl	800672c <xQueueReceiveFromISR>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d003      	beq.n	8005d8c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005d84:	f06f 0302 	mvn.w	r3, #2
 8005d88:	61fb      	str	r3, [r7, #28]
 8005d8a:	e027      	b.n	8005ddc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d024      	beq.n	8005ddc <osMessageQueueGet+0xac>
 8005d92:	4b15      	ldr	r3, [pc, #84]	; (8005de8 <osMessageQueueGet+0xb8>)
 8005d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	e01b      	b.n	8005ddc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <osMessageQueueGet+0x80>
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d103      	bne.n	8005db8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005db0:	f06f 0303 	mvn.w	r3, #3
 8005db4:	61fb      	str	r3, [r7, #28]
 8005db6:	e011      	b.n	8005ddc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	68b9      	ldr	r1, [r7, #8]
 8005dbc:	69b8      	ldr	r0, [r7, #24]
 8005dbe:	f000 fbd5 	bl	800656c <xQueueReceive>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d009      	beq.n	8005ddc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005dce:	f06f 0301 	mvn.w	r3, #1
 8005dd2:	61fb      	str	r3, [r7, #28]
 8005dd4:	e002      	b.n	8005ddc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005dd6:	f06f 0302 	mvn.w	r3, #2
 8005dda:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005ddc:	69fb      	ldr	r3, [r7, #28]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3720      	adds	r7, #32
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4a07      	ldr	r2, [pc, #28]	; (8005e18 <vApplicationGetIdleTaskMemory+0x2c>)
 8005dfc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	4a06      	ldr	r2, [pc, #24]	; (8005e1c <vApplicationGetIdleTaskMemory+0x30>)
 8005e02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2280      	movs	r2, #128	; 0x80
 8005e08:	601a      	str	r2, [r3, #0]
}
 8005e0a:	bf00      	nop
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	2400009c 	.word	0x2400009c
 8005e1c:	24000158 	.word	0x24000158

08005e20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4a07      	ldr	r2, [pc, #28]	; (8005e4c <vApplicationGetTimerTaskMemory+0x2c>)
 8005e30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	4a06      	ldr	r2, [pc, #24]	; (8005e50 <vApplicationGetTimerTaskMemory+0x30>)
 8005e36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e3e:	601a      	str	r2, [r3, #0]
}
 8005e40:	bf00      	nop
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	24000358 	.word	0x24000358
 8005e50:	24000414 	.word	0x24000414

08005e54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f103 0208 	add.w	r2, r3, #8
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f103 0208 	add.w	r2, r3, #8
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f103 0208 	add.w	r2, r3, #8
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ea2:	bf00      	nop
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b085      	sub	sp, #20
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	1c5a      	adds	r2, r3, #1
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	601a      	str	r2, [r3, #0]
}
 8005eea:	bf00      	nop
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b085      	sub	sp, #20
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f0c:	d103      	bne.n	8005f16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	e00c      	b.n	8005f30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3308      	adds	r3, #8
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	e002      	b.n	8005f24 <vListInsert+0x2e>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d2f6      	bcs.n	8005f1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	601a      	str	r2, [r3, #0]
}
 8005f5c:	bf00      	nop
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	6892      	ldr	r2, [r2, #8]
 8005f7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	6852      	ldr	r2, [r2, #4]
 8005f88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d103      	bne.n	8005f9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	1e5a      	subs	r2, r3, #1
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005fe2:	bf00      	nop
 8005fe4:	e7fe      	b.n	8005fe4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005fe6:	f002 f935 	bl	8008254 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff2:	68f9      	ldr	r1, [r7, #12]
 8005ff4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ff6:	fb01 f303 	mul.w	r3, r1, r3
 8005ffa:	441a      	add	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006016:	3b01      	subs	r3, #1
 8006018:	68f9      	ldr	r1, [r7, #12]
 800601a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800601c:	fb01 f303 	mul.w	r3, r1, r3
 8006020:	441a      	add	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	22ff      	movs	r2, #255	; 0xff
 800602a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	22ff      	movs	r2, #255	; 0xff
 8006032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d114      	bne.n	8006066 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01a      	beq.n	800607a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3310      	adds	r3, #16
 8006048:	4618      	mov	r0, r3
 800604a:	f001 f9e3 	bl	8007414 <xTaskRemoveFromEventList>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d012      	beq.n	800607a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006054:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <xQueueGenericReset+0xcc>)
 8006056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	e009      	b.n	800607a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3310      	adds	r3, #16
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff fef2 	bl	8005e54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3324      	adds	r3, #36	; 0x24
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff feed 	bl	8005e54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800607a:	f002 f91b 	bl	80082b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800607e:	2301      	movs	r3, #1
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	e000ed04 	.word	0xe000ed04

0800608c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08e      	sub	sp, #56	; 0x38
 8006090:	af02      	add	r7, sp, #8
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10a      	bne.n	80060d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060ce:	bf00      	nop
 80060d0:	e7fe      	b.n	80060d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <xQueueGenericCreateStatic+0x52>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <xQueueGenericCreateStatic+0x56>
 80060de:	2301      	movs	r3, #1
 80060e0:	e000      	b.n	80060e4 <xQueueGenericCreateStatic+0x58>
 80060e2:	2300      	movs	r3, #0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10a      	bne.n	80060fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	623b      	str	r3, [r7, #32]
}
 80060fa:	bf00      	nop
 80060fc:	e7fe      	b.n	80060fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d102      	bne.n	800610a <xQueueGenericCreateStatic+0x7e>
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <xQueueGenericCreateStatic+0x82>
 800610a:	2301      	movs	r3, #1
 800610c:	e000      	b.n	8006110 <xQueueGenericCreateStatic+0x84>
 800610e:	2300      	movs	r3, #0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10a      	bne.n	800612a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	61fb      	str	r3, [r7, #28]
}
 8006126:	bf00      	nop
 8006128:	e7fe      	b.n	8006128 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800612a:	2350      	movs	r3, #80	; 0x50
 800612c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b50      	cmp	r3, #80	; 0x50
 8006132:	d00a      	beq.n	800614a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	61bb      	str	r3, [r7, #24]
}
 8006146:	bf00      	nop
 8006148:	e7fe      	b.n	8006148 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800614a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00d      	beq.n	8006172 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800615e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	4613      	mov	r3, r2
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 f83f 	bl	80061f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006174:	4618      	mov	r0, r3
 8006176:	3730      	adds	r7, #48	; 0x30
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08a      	sub	sp, #40	; 0x28
 8006180:	af02      	add	r7, sp, #8
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	4613      	mov	r3, r2
 8006188:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10a      	bne.n	80061a6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	613b      	str	r3, [r7, #16]
}
 80061a2:	bf00      	nop
 80061a4:	e7fe      	b.n	80061a4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	fb02 f303 	mul.w	r3, r2, r3
 80061ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	3350      	adds	r3, #80	; 0x50
 80061b4:	4618      	mov	r0, r3
 80061b6:	f002 f96f 	bl	8008498 <pvPortMalloc>
 80061ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d011      	beq.n	80061e6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	3350      	adds	r3, #80	; 0x50
 80061ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061d4:	79fa      	ldrb	r2, [r7, #7]
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	4613      	mov	r3, r2
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f805 	bl	80061f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061e6:	69bb      	ldr	r3, [r7, #24]
	}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3720      	adds	r7, #32
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d103      	bne.n	800620c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	e002      	b.n	8006212 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800621e:	2101      	movs	r1, #1
 8006220:	69b8      	ldr	r0, [r7, #24]
 8006222:	f7ff fecb 	bl	8005fbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	78fa      	ldrb	r2, [r7, #3]
 800622a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800622e:	bf00      	nop
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08e      	sub	sp, #56	; 0x38
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006246:	2300      	movs	r3, #0
 8006248:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10a      	bne.n	800626a <xQueueGenericSend+0x32>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006266:	bf00      	nop
 8006268:	e7fe      	b.n	8006268 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d103      	bne.n	8006278 <xQueueGenericSend+0x40>
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <xQueueGenericSend+0x44>
 8006278:	2301      	movs	r3, #1
 800627a:	e000      	b.n	800627e <xQueueGenericSend+0x46>
 800627c:	2300      	movs	r3, #0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10a      	bne.n	8006298 <xQueueGenericSend+0x60>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006294:	bf00      	nop
 8006296:	e7fe      	b.n	8006296 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b02      	cmp	r3, #2
 800629c:	d103      	bne.n	80062a6 <xQueueGenericSend+0x6e>
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <xQueueGenericSend+0x72>
 80062a6:	2301      	movs	r3, #1
 80062a8:	e000      	b.n	80062ac <xQueueGenericSend+0x74>
 80062aa:	2300      	movs	r3, #0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10a      	bne.n	80062c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	623b      	str	r3, [r7, #32]
}
 80062c2:	bf00      	nop
 80062c4:	e7fe      	b.n	80062c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062c6:	f001 fa67 	bl	8007798 <xTaskGetSchedulerState>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d102      	bne.n	80062d6 <xQueueGenericSend+0x9e>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <xQueueGenericSend+0xa2>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e000      	b.n	80062dc <xQueueGenericSend+0xa4>
 80062da:	2300      	movs	r3, #0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10a      	bne.n	80062f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	61fb      	str	r3, [r7, #28]
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062f6:	f001 ffad 	bl	8008254 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006302:	429a      	cmp	r2, r3
 8006304:	d302      	bcc.n	800630c <xQueueGenericSend+0xd4>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b02      	cmp	r3, #2
 800630a:	d129      	bne.n	8006360 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	68b9      	ldr	r1, [r7, #8]
 8006310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006312:	f000 fa8b 	bl	800682c <prvCopyDataToQueue>
 8006316:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	2b00      	cmp	r3, #0
 800631e:	d010      	beq.n	8006342 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	3324      	adds	r3, #36	; 0x24
 8006324:	4618      	mov	r0, r3
 8006326:	f001 f875 	bl	8007414 <xTaskRemoveFromEventList>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d013      	beq.n	8006358 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006330:	4b3f      	ldr	r3, [pc, #252]	; (8006430 <xQueueGenericSend+0x1f8>)
 8006332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	e00a      	b.n	8006358 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d007      	beq.n	8006358 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006348:	4b39      	ldr	r3, [pc, #228]	; (8006430 <xQueueGenericSend+0x1f8>)
 800634a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006358:	f001 ffac 	bl	80082b4 <vPortExitCritical>
				return pdPASS;
 800635c:	2301      	movs	r3, #1
 800635e:	e063      	b.n	8006428 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d103      	bne.n	800636e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006366:	f001 ffa5 	bl	80082b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800636a:	2300      	movs	r3, #0
 800636c:	e05c      	b.n	8006428 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800636e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006370:	2b00      	cmp	r3, #0
 8006372:	d106      	bne.n	8006382 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006374:	f107 0314 	add.w	r3, r7, #20
 8006378:	4618      	mov	r0, r3
 800637a:	f001 f8af 	bl	80074dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800637e:	2301      	movs	r3, #1
 8006380:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006382:	f001 ff97 	bl	80082b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006386:	f000 fe1b 	bl	8006fc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800638a:	f001 ff63 	bl	8008254 <vPortEnterCritical>
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006394:	b25b      	sxtb	r3, r3
 8006396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800639a:	d103      	bne.n	80063a4 <xQueueGenericSend+0x16c>
 800639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063aa:	b25b      	sxtb	r3, r3
 80063ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063b0:	d103      	bne.n	80063ba <xQueueGenericSend+0x182>
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063ba:	f001 ff7b 	bl	80082b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063be:	1d3a      	adds	r2, r7, #4
 80063c0:	f107 0314 	add.w	r3, r7, #20
 80063c4:	4611      	mov	r1, r2
 80063c6:	4618      	mov	r0, r3
 80063c8:	f001 f89e 	bl	8007508 <xTaskCheckForTimeOut>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d124      	bne.n	800641c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063d4:	f000 fb22 	bl	8006a1c <prvIsQueueFull>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d018      	beq.n	8006410 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	3310      	adds	r3, #16
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	4611      	mov	r1, r2
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 ffc4 	bl	8007374 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80063ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063ee:	f000 faad 	bl	800694c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80063f2:	f000 fdf3 	bl	8006fdc <xTaskResumeAll>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f47f af7c 	bne.w	80062f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80063fe:	4b0c      	ldr	r3, [pc, #48]	; (8006430 <xQueueGenericSend+0x1f8>)
 8006400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	e772      	b.n	80062f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006412:	f000 fa9b 	bl	800694c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006416:	f000 fde1 	bl	8006fdc <xTaskResumeAll>
 800641a:	e76c      	b.n	80062f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800641c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800641e:	f000 fa95 	bl	800694c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006422:	f000 fddb 	bl	8006fdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006426:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006428:	4618      	mov	r0, r3
 800642a:	3738      	adds	r7, #56	; 0x38
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	e000ed04 	.word	0xe000ed04

08006434 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b090      	sub	sp, #64	; 0x40
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10a      	bne.n	8006462 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800644c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800645e:	bf00      	nop
 8006460:	e7fe      	b.n	8006460 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d103      	bne.n	8006470 <xQueueGenericSendFromISR+0x3c>
 8006468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <xQueueGenericSendFromISR+0x40>
 8006470:	2301      	movs	r3, #1
 8006472:	e000      	b.n	8006476 <xQueueGenericSendFromISR+0x42>
 8006474:	2300      	movs	r3, #0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10a      	bne.n	8006490 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d103      	bne.n	800649e <xQueueGenericSendFromISR+0x6a>
 8006496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649a:	2b01      	cmp	r3, #1
 800649c:	d101      	bne.n	80064a2 <xQueueGenericSendFromISR+0x6e>
 800649e:	2301      	movs	r3, #1
 80064a0:	e000      	b.n	80064a4 <xQueueGenericSendFromISR+0x70>
 80064a2:	2300      	movs	r3, #0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10a      	bne.n	80064be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80064a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	623b      	str	r3, [r7, #32]
}
 80064ba:	bf00      	nop
 80064bc:	e7fe      	b.n	80064bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064be:	f001 ffab 	bl	8008418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064c2:	f3ef 8211 	mrs	r2, BASEPRI
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	61fa      	str	r2, [r7, #28]
 80064d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d302      	bcc.n	80064f0 <xQueueGenericSendFromISR+0xbc>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d12f      	bne.n	8006550 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	68b9      	ldr	r1, [r7, #8]
 8006504:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006506:	f000 f991 	bl	800682c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800650a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006512:	d112      	bne.n	800653a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	2b00      	cmp	r3, #0
 800651a:	d016      	beq.n	800654a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800651c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651e:	3324      	adds	r3, #36	; 0x24
 8006520:	4618      	mov	r0, r3
 8006522:	f000 ff77 	bl	8007414 <xTaskRemoveFromEventList>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00e      	beq.n	800654a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00b      	beq.n	800654a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	e007      	b.n	800654a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800653a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800653e:	3301      	adds	r3, #1
 8006540:	b2db      	uxtb	r3, r3
 8006542:	b25a      	sxtb	r2, r3
 8006544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800654a:	2301      	movs	r3, #1
 800654c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800654e:	e001      	b.n	8006554 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006550:	2300      	movs	r3, #0
 8006552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006556:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800655e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006562:	4618      	mov	r0, r3
 8006564:	3740      	adds	r7, #64	; 0x40
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08c      	sub	sp, #48	; 0x30
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006578:	2300      	movs	r3, #0
 800657a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10a      	bne.n	800659c <xQueueReceive+0x30>
	__asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	623b      	str	r3, [r7, #32]
}
 8006598:	bf00      	nop
 800659a:	e7fe      	b.n	800659a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d103      	bne.n	80065aa <xQueueReceive+0x3e>
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <xQueueReceive+0x42>
 80065aa:	2301      	movs	r3, #1
 80065ac:	e000      	b.n	80065b0 <xQueueReceive+0x44>
 80065ae:	2300      	movs	r3, #0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <xQueueReceive+0x5e>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	61fb      	str	r3, [r7, #28]
}
 80065c6:	bf00      	nop
 80065c8:	e7fe      	b.n	80065c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065ca:	f001 f8e5 	bl	8007798 <xTaskGetSchedulerState>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d102      	bne.n	80065da <xQueueReceive+0x6e>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <xQueueReceive+0x72>
 80065da:	2301      	movs	r3, #1
 80065dc:	e000      	b.n	80065e0 <xQueueReceive+0x74>
 80065de:	2300      	movs	r3, #0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10a      	bne.n	80065fa <xQueueReceive+0x8e>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	61bb      	str	r3, [r7, #24]
}
 80065f6:	bf00      	nop
 80065f8:	e7fe      	b.n	80065f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065fa:	f001 fe2b 	bl	8008254 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	2b00      	cmp	r3, #0
 8006608:	d01f      	beq.n	800664a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800660a:	68b9      	ldr	r1, [r7, #8]
 800660c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800660e:	f000 f977 	bl	8006900 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	1e5a      	subs	r2, r3, #1
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00f      	beq.n	8006642 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	3310      	adds	r3, #16
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fef4 	bl	8007414 <xTaskRemoveFromEventList>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d007      	beq.n	8006642 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006632:	4b3d      	ldr	r3, [pc, #244]	; (8006728 <xQueueReceive+0x1bc>)
 8006634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006642:	f001 fe37 	bl	80082b4 <vPortExitCritical>
				return pdPASS;
 8006646:	2301      	movs	r3, #1
 8006648:	e069      	b.n	800671e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d103      	bne.n	8006658 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006650:	f001 fe30 	bl	80082b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006654:	2300      	movs	r3, #0
 8006656:	e062      	b.n	800671e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665a:	2b00      	cmp	r3, #0
 800665c:	d106      	bne.n	800666c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800665e:	f107 0310 	add.w	r3, r7, #16
 8006662:	4618      	mov	r0, r3
 8006664:	f000 ff3a 	bl	80074dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006668:	2301      	movs	r3, #1
 800666a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800666c:	f001 fe22 	bl	80082b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006670:	f000 fca6 	bl	8006fc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006674:	f001 fdee 	bl	8008254 <vPortEnterCritical>
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800667e:	b25b      	sxtb	r3, r3
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006684:	d103      	bne.n	800668e <xQueueReceive+0x122>
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006694:	b25b      	sxtb	r3, r3
 8006696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800669a:	d103      	bne.n	80066a4 <xQueueReceive+0x138>
 800669c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066a4:	f001 fe06 	bl	80082b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066a8:	1d3a      	adds	r2, r7, #4
 80066aa:	f107 0310 	add.w	r3, r7, #16
 80066ae:	4611      	mov	r1, r2
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 ff29 	bl	8007508 <xTaskCheckForTimeOut>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d123      	bne.n	8006704 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066be:	f000 f997 	bl	80069f0 <prvIsQueueEmpty>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d017      	beq.n	80066f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ca:	3324      	adds	r3, #36	; 0x24
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	4611      	mov	r1, r2
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fe4f 	bl	8007374 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066d8:	f000 f938 	bl	800694c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066dc:	f000 fc7e 	bl	8006fdc <xTaskResumeAll>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d189      	bne.n	80065fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80066e6:	4b10      	ldr	r3, [pc, #64]	; (8006728 <xQueueReceive+0x1bc>)
 80066e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	e780      	b.n	80065fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80066f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066fa:	f000 f927 	bl	800694c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066fe:	f000 fc6d 	bl	8006fdc <xTaskResumeAll>
 8006702:	e77a      	b.n	80065fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006706:	f000 f921 	bl	800694c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800670a:	f000 fc67 	bl	8006fdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800670e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006710:	f000 f96e 	bl	80069f0 <prvIsQueueEmpty>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	f43f af6f 	beq.w	80065fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800671c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800671e:	4618      	mov	r0, r3
 8006720:	3730      	adds	r7, #48	; 0x30
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	e000ed04 	.word	0xe000ed04

0800672c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08e      	sub	sp, #56	; 0x38
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10a      	bne.n	8006758 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	623b      	str	r3, [r7, #32]
}
 8006754:	bf00      	nop
 8006756:	e7fe      	b.n	8006756 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d103      	bne.n	8006766 <xQueueReceiveFromISR+0x3a>
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <xQueueReceiveFromISR+0x3e>
 8006766:	2301      	movs	r3, #1
 8006768:	e000      	b.n	800676c <xQueueReceiveFromISR+0x40>
 800676a:	2300      	movs	r3, #0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10a      	bne.n	8006786 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	61fb      	str	r3, [r7, #28]
}
 8006782:	bf00      	nop
 8006784:	e7fe      	b.n	8006784 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006786:	f001 fe47 	bl	8008418 <vPortValidateInterruptPriority>
	__asm volatile
 800678a:	f3ef 8211 	mrs	r2, BASEPRI
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	61ba      	str	r2, [r7, #24]
 80067a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80067a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d02f      	beq.n	8006812 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067c0:	f000 f89e 	bl	8006900 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c6:	1e5a      	subs	r2, r3, #1
 80067c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80067cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067d4:	d112      	bne.n	80067fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d016      	beq.n	800680c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e0:	3310      	adds	r3, #16
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fe16 	bl	8007414 <xTaskRemoveFromEventList>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00e      	beq.n	800680c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	e007      	b.n	800680c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80067fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006800:	3301      	adds	r3, #1
 8006802:	b2db      	uxtb	r3, r3
 8006804:	b25a      	sxtb	r2, r3
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800680c:	2301      	movs	r3, #1
 800680e:	637b      	str	r3, [r7, #52]	; 0x34
 8006810:	e001      	b.n	8006816 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006812:	2300      	movs	r3, #0
 8006814:	637b      	str	r3, [r7, #52]	; 0x34
 8006816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006818:	613b      	str	r3, [r7, #16]
	__asm volatile
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f383 8811 	msr	BASEPRI, r3
}
 8006820:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006824:	4618      	mov	r0, r3
 8006826:	3738      	adds	r7, #56	; 0x38
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006838:	2300      	movs	r3, #0
 800683a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006840:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10d      	bne.n	8006866 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d14d      	bne.n	80068ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	4618      	mov	r0, r3
 8006858:	f000 ffbc 	bl	80077d4 <xTaskPriorityDisinherit>
 800685c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	609a      	str	r2, [r3, #8]
 8006864:	e043      	b.n	80068ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d119      	bne.n	80068a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6858      	ldr	r0, [r3, #4]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006874:	461a      	mov	r2, r3
 8006876:	68b9      	ldr	r1, [r7, #8]
 8006878:	f002 f828 	bl	80088cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006884:	441a      	add	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	429a      	cmp	r2, r3
 8006894:	d32b      	bcc.n	80068ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	605a      	str	r2, [r3, #4]
 800689e:	e026      	b.n	80068ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	68d8      	ldr	r0, [r3, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a8:	461a      	mov	r2, r3
 80068aa:	68b9      	ldr	r1, [r7, #8]
 80068ac:	f002 f80e 	bl	80088cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b8:	425b      	negs	r3, r3
 80068ba:	441a      	add	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	68da      	ldr	r2, [r3, #12]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d207      	bcs.n	80068dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d4:	425b      	negs	r3, r3
 80068d6:	441a      	add	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d105      	bne.n	80068ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80068f6:	697b      	ldr	r3, [r7, #20]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3718      	adds	r7, #24
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	2b00      	cmp	r3, #0
 8006910:	d018      	beq.n	8006944 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	441a      	add	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	429a      	cmp	r2, r3
 800692a:	d303      	bcc.n	8006934 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68d9      	ldr	r1, [r3, #12]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693c:	461a      	mov	r2, r3
 800693e:	6838      	ldr	r0, [r7, #0]
 8006940:	f001 ffc4 	bl	80088cc <memcpy>
	}
}
 8006944:	bf00      	nop
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006954:	f001 fc7e 	bl	8008254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800695e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006960:	e011      	b.n	8006986 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	2b00      	cmp	r3, #0
 8006968:	d012      	beq.n	8006990 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	3324      	adds	r3, #36	; 0x24
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fd50 	bl	8007414 <xTaskRemoveFromEventList>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800697a:	f000 fe27 	bl	80075cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	3b01      	subs	r3, #1
 8006982:	b2db      	uxtb	r3, r3
 8006984:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800698a:	2b00      	cmp	r3, #0
 800698c:	dce9      	bgt.n	8006962 <prvUnlockQueue+0x16>
 800698e:	e000      	b.n	8006992 <prvUnlockQueue+0x46>
					break;
 8006990:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	22ff      	movs	r2, #255	; 0xff
 8006996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800699a:	f001 fc8b 	bl	80082b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800699e:	f001 fc59 	bl	8008254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069aa:	e011      	b.n	80069d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d012      	beq.n	80069da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	3310      	adds	r3, #16
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 fd2b 	bl	8007414 <xTaskRemoveFromEventList>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069c4:	f000 fe02 	bl	80075cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	dce9      	bgt.n	80069ac <prvUnlockQueue+0x60>
 80069d8:	e000      	b.n	80069dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	22ff      	movs	r2, #255	; 0xff
 80069e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80069e4:	f001 fc66 	bl	80082b4 <vPortExitCritical>
}
 80069e8:	bf00      	nop
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069f8:	f001 fc2c 	bl	8008254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d102      	bne.n	8006a0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a04:	2301      	movs	r3, #1
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	e001      	b.n	8006a0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a0e:	f001 fc51 	bl	80082b4 <vPortExitCritical>

	return xReturn;
 8006a12:	68fb      	ldr	r3, [r7, #12]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a24:	f001 fc16 	bl	8008254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d102      	bne.n	8006a3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a34:	2301      	movs	r3, #1
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	e001      	b.n	8006a3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a3e:	f001 fc39 	bl	80082b4 <vPortExitCritical>

	return xReturn;
 8006a42:	68fb      	ldr	r3, [r7, #12]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	e014      	b.n	8006a86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a5c:	4a0f      	ldr	r2, [pc, #60]	; (8006a9c <vQueueAddToRegistry+0x50>)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10b      	bne.n	8006a80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a68:	490c      	ldr	r1, [pc, #48]	; (8006a9c <vQueueAddToRegistry+0x50>)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a72:	4a0a      	ldr	r2, [pc, #40]	; (8006a9c <vQueueAddToRegistry+0x50>)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	4413      	add	r3, r2
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a7e:	e006      	b.n	8006a8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3301      	adds	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b07      	cmp	r3, #7
 8006a8a:	d9e7      	bls.n	8006a5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a8c:	bf00      	nop
 8006a8e:	bf00      	nop
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	24004bdc 	.word	0x24004bdc

08006aa0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ab0:	f001 fbd0 	bl	8008254 <vPortEnterCritical>
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006aba:	b25b      	sxtb	r3, r3
 8006abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ac0:	d103      	bne.n	8006aca <vQueueWaitForMessageRestricted+0x2a>
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ad0:	b25b      	sxtb	r3, r3
 8006ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ad6:	d103      	bne.n	8006ae0 <vQueueWaitForMessageRestricted+0x40>
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ae0:	f001 fbe8 	bl	80082b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d106      	bne.n	8006afa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	3324      	adds	r3, #36	; 0x24
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	68b9      	ldr	r1, [r7, #8]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 fc61 	bl	80073bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006afa:	6978      	ldr	r0, [r7, #20]
 8006afc:	f7ff ff26 	bl	800694c <prvUnlockQueue>
	}
 8006b00:	bf00      	nop
 8006b02:	3718      	adds	r7, #24
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08e      	sub	sp, #56	; 0x38
 8006b0c:	af04      	add	r7, sp, #16
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10a      	bne.n	8006b32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	623b      	str	r3, [r7, #32]
}
 8006b2e:	bf00      	nop
 8006b30:	e7fe      	b.n	8006b30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10a      	bne.n	8006b4e <xTaskCreateStatic+0x46>
	__asm volatile
 8006b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	61fb      	str	r3, [r7, #28]
}
 8006b4a:	bf00      	nop
 8006b4c:	e7fe      	b.n	8006b4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b4e:	23bc      	movs	r3, #188	; 0xbc
 8006b50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	2bbc      	cmp	r3, #188	; 0xbc
 8006b56:	d00a      	beq.n	8006b6e <xTaskCreateStatic+0x66>
	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	61bb      	str	r3, [r7, #24]
}
 8006b6a:	bf00      	nop
 8006b6c:	e7fe      	b.n	8006b6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d01e      	beq.n	8006bb4 <xTaskCreateStatic+0xac>
 8006b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d01b      	beq.n	8006bb4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	2202      	movs	r2, #2
 8006b8a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b8e:	2300      	movs	r3, #0
 8006b90:	9303      	str	r3, [sp, #12]
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	9302      	str	r3, [sp, #8]
 8006b96:	f107 0314 	add.w	r3, r7, #20
 8006b9a:	9301      	str	r3, [sp, #4]
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	68b9      	ldr	r1, [r7, #8]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 f850 	bl	8006c4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bae:	f000 f8f3 	bl	8006d98 <prvAddNewTaskToReadyList>
 8006bb2:	e001      	b.n	8006bb8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bb8:	697b      	ldr	r3, [r7, #20]
	}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3728      	adds	r7, #40	; 0x28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b08c      	sub	sp, #48	; 0x30
 8006bc6:	af04      	add	r7, sp, #16
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	603b      	str	r3, [r7, #0]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bd2:	88fb      	ldrh	r3, [r7, #6]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f001 fc5e 	bl	8008498 <pvPortMalloc>
 8006bdc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00e      	beq.n	8006c02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006be4:	20bc      	movs	r0, #188	; 0xbc
 8006be6:	f001 fc57 	bl	8008498 <pvPortMalloc>
 8006bea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	631a      	str	r2, [r3, #48]	; 0x30
 8006bf8:	e005      	b.n	8006c06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bfa:	6978      	ldr	r0, [r7, #20]
 8006bfc:	f001 fd18 	bl	8008630 <vPortFree>
 8006c00:	e001      	b.n	8006c06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d017      	beq.n	8006c3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c14:	88fa      	ldrh	r2, [r7, #6]
 8006c16:	2300      	movs	r3, #0
 8006c18:	9303      	str	r3, [sp, #12]
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	9302      	str	r3, [sp, #8]
 8006c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c20:	9301      	str	r3, [sp, #4]
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 f80e 	bl	8006c4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c30:	69f8      	ldr	r0, [r7, #28]
 8006c32:	f000 f8b1 	bl	8006d98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c36:	2301      	movs	r3, #1
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	e002      	b.n	8006c42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c42:	69bb      	ldr	r3, [r7, #24]
	}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3720      	adds	r7, #32
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
 8006c58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	461a      	mov	r2, r3
 8006c64:	21a5      	movs	r1, #165	; 0xa5
 8006c66:	f001 fe3f 	bl	80088e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006c74:	440b      	add	r3, r1
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	f023 0307 	bic.w	r3, r3, #7
 8006c82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	617b      	str	r3, [r7, #20]
}
 8006ca0:	bf00      	nop
 8006ca2:	e7fe      	b.n	8006ca2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d01f      	beq.n	8006cea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006caa:	2300      	movs	r3, #0
 8006cac:	61fb      	str	r3, [r7, #28]
 8006cae:	e012      	b.n	8006cd6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	7819      	ldrb	r1, [r3, #0]
 8006cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	3334      	adds	r3, #52	; 0x34
 8006cc0:	460a      	mov	r2, r1
 8006cc2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	4413      	add	r3, r2
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d006      	beq.n	8006cde <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	61fb      	str	r3, [r7, #28]
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	2b0f      	cmp	r3, #15
 8006cda:	d9e9      	bls.n	8006cb0 <prvInitialiseNewTask+0x64>
 8006cdc:	e000      	b.n	8006ce0 <prvInitialiseNewTask+0x94>
			{
				break;
 8006cde:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ce8:	e003      	b.n	8006cf2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf4:	2b37      	cmp	r3, #55	; 0x37
 8006cf6:	d901      	bls.n	8006cfc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006cf8:	2337      	movs	r3, #55	; 0x37
 8006cfa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	3304      	adds	r3, #4
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7ff f8be 	bl	8005e94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	3318      	adds	r3, #24
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7ff f8b9 	bl	8005e94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	3354      	adds	r3, #84	; 0x54
 8006d4c:	2260      	movs	r2, #96	; 0x60
 8006d4e:	2100      	movs	r1, #0
 8006d50:	4618      	mov	r0, r3
 8006d52:	f001 fdc9 	bl	80088e8 <memset>
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	4a0c      	ldr	r2, [pc, #48]	; (8006d8c <prvInitialiseNewTask+0x140>)
 8006d5a:	659a      	str	r2, [r3, #88]	; 0x58
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	4a0c      	ldr	r2, [pc, #48]	; (8006d90 <prvInitialiseNewTask+0x144>)
 8006d60:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	4a0b      	ldr	r2, [pc, #44]	; (8006d94 <prvInitialiseNewTask+0x148>)
 8006d66:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	68f9      	ldr	r1, [r7, #12]
 8006d6c:	69b8      	ldr	r0, [r7, #24]
 8006d6e:	f001 f941 	bl	8007ff4 <pxPortInitialiseStack>
 8006d72:	4602      	mov	r2, r0
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d84:	bf00      	nop
 8006d86:	3720      	adds	r7, #32
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	08009508 	.word	0x08009508
 8006d90:	08009528 	.word	0x08009528
 8006d94:	080094e8 	.word	0x080094e8

08006d98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006da0:	f001 fa58 	bl	8008254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006da4:	4b2d      	ldr	r3, [pc, #180]	; (8006e5c <prvAddNewTaskToReadyList+0xc4>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3301      	adds	r3, #1
 8006daa:	4a2c      	ldr	r2, [pc, #176]	; (8006e5c <prvAddNewTaskToReadyList+0xc4>)
 8006dac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006dae:	4b2c      	ldr	r3, [pc, #176]	; (8006e60 <prvAddNewTaskToReadyList+0xc8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d109      	bne.n	8006dca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006db6:	4a2a      	ldr	r2, [pc, #168]	; (8006e60 <prvAddNewTaskToReadyList+0xc8>)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006dbc:	4b27      	ldr	r3, [pc, #156]	; (8006e5c <prvAddNewTaskToReadyList+0xc4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d110      	bne.n	8006de6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006dc4:	f000 fc26 	bl	8007614 <prvInitialiseTaskLists>
 8006dc8:	e00d      	b.n	8006de6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dca:	4b26      	ldr	r3, [pc, #152]	; (8006e64 <prvAddNewTaskToReadyList+0xcc>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d109      	bne.n	8006de6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dd2:	4b23      	ldr	r3, [pc, #140]	; (8006e60 <prvAddNewTaskToReadyList+0xc8>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d802      	bhi.n	8006de6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006de0:	4a1f      	ldr	r2, [pc, #124]	; (8006e60 <prvAddNewTaskToReadyList+0xc8>)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006de6:	4b20      	ldr	r3, [pc, #128]	; (8006e68 <prvAddNewTaskToReadyList+0xd0>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3301      	adds	r3, #1
 8006dec:	4a1e      	ldr	r2, [pc, #120]	; (8006e68 <prvAddNewTaskToReadyList+0xd0>)
 8006dee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006df0:	4b1d      	ldr	r3, [pc, #116]	; (8006e68 <prvAddNewTaskToReadyList+0xd0>)
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfc:	4b1b      	ldr	r3, [pc, #108]	; (8006e6c <prvAddNewTaskToReadyList+0xd4>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d903      	bls.n	8006e0c <prvAddNewTaskToReadyList+0x74>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	4a18      	ldr	r2, [pc, #96]	; (8006e6c <prvAddNewTaskToReadyList+0xd4>)
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e10:	4613      	mov	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4a15      	ldr	r2, [pc, #84]	; (8006e70 <prvAddNewTaskToReadyList+0xd8>)
 8006e1a:	441a      	add	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4619      	mov	r1, r3
 8006e22:	4610      	mov	r0, r2
 8006e24:	f7ff f843 	bl	8005eae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e28:	f001 fa44 	bl	80082b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e2c:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <prvAddNewTaskToReadyList+0xcc>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00e      	beq.n	8006e52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e34:	4b0a      	ldr	r3, [pc, #40]	; (8006e60 <prvAddNewTaskToReadyList+0xc8>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d207      	bcs.n	8006e52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e42:	4b0c      	ldr	r3, [pc, #48]	; (8006e74 <prvAddNewTaskToReadyList+0xdc>)
 8006e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e52:	bf00      	nop
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	24000ce8 	.word	0x24000ce8
 8006e60:	24000814 	.word	0x24000814
 8006e64:	24000cf4 	.word	0x24000cf4
 8006e68:	24000d04 	.word	0x24000d04
 8006e6c:	24000cf0 	.word	0x24000cf0
 8006e70:	24000818 	.word	0x24000818
 8006e74:	e000ed04 	.word	0xe000ed04

08006e78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e80:	2300      	movs	r3, #0
 8006e82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d017      	beq.n	8006eba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e8a:	4b13      	ldr	r3, [pc, #76]	; (8006ed8 <vTaskDelay+0x60>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00a      	beq.n	8006ea8 <vTaskDelay+0x30>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	60bb      	str	r3, [r7, #8]
}
 8006ea4:	bf00      	nop
 8006ea6:	e7fe      	b.n	8006ea6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ea8:	f000 f88a 	bl	8006fc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006eac:	2100      	movs	r1, #0
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fcfe 	bl	80078b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006eb4:	f000 f892 	bl	8006fdc <xTaskResumeAll>
 8006eb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d107      	bne.n	8006ed0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ec0:	4b06      	ldr	r3, [pc, #24]	; (8006edc <vTaskDelay+0x64>)
 8006ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ed0:	bf00      	nop
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	24000d10 	.word	0x24000d10
 8006edc:	e000ed04 	.word	0xe000ed04

08006ee0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08a      	sub	sp, #40	; 0x28
 8006ee4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006eee:	463a      	mov	r2, r7
 8006ef0:	1d39      	adds	r1, r7, #4
 8006ef2:	f107 0308 	add.w	r3, r7, #8
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fe ff78 	bl	8005dec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	9202      	str	r2, [sp, #8]
 8006f04:	9301      	str	r3, [sp, #4]
 8006f06:	2300      	movs	r3, #0
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	460a      	mov	r2, r1
 8006f0e:	4924      	ldr	r1, [pc, #144]	; (8006fa0 <vTaskStartScheduler+0xc0>)
 8006f10:	4824      	ldr	r0, [pc, #144]	; (8006fa4 <vTaskStartScheduler+0xc4>)
 8006f12:	f7ff fdf9 	bl	8006b08 <xTaskCreateStatic>
 8006f16:	4603      	mov	r3, r0
 8006f18:	4a23      	ldr	r2, [pc, #140]	; (8006fa8 <vTaskStartScheduler+0xc8>)
 8006f1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f1c:	4b22      	ldr	r3, [pc, #136]	; (8006fa8 <vTaskStartScheduler+0xc8>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f24:	2301      	movs	r3, #1
 8006f26:	617b      	str	r3, [r7, #20]
 8006f28:	e001      	b.n	8006f2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d102      	bne.n	8006f3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f34:	f000 fd10 	bl	8007958 <xTimerCreateTimerTask>
 8006f38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d11b      	bne.n	8006f78 <vTaskStartScheduler+0x98>
	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	613b      	str	r3, [r7, #16]
}
 8006f52:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f54:	4b15      	ldr	r3, [pc, #84]	; (8006fac <vTaskStartScheduler+0xcc>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3354      	adds	r3, #84	; 0x54
 8006f5a:	4a15      	ldr	r2, [pc, #84]	; (8006fb0 <vTaskStartScheduler+0xd0>)
 8006f5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f5e:	4b15      	ldr	r3, [pc, #84]	; (8006fb4 <vTaskStartScheduler+0xd4>)
 8006f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f66:	4b14      	ldr	r3, [pc, #80]	; (8006fb8 <vTaskStartScheduler+0xd8>)
 8006f68:	2201      	movs	r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f6c:	4b13      	ldr	r3, [pc, #76]	; (8006fbc <vTaskStartScheduler+0xdc>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f72:	f001 f8cd 	bl	8008110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f76:	e00e      	b.n	8006f96 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f7e:	d10a      	bne.n	8006f96 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	60fb      	str	r3, [r7, #12]
}
 8006f92:	bf00      	nop
 8006f94:	e7fe      	b.n	8006f94 <vTaskStartScheduler+0xb4>
}
 8006f96:	bf00      	nop
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	080093d8 	.word	0x080093d8
 8006fa4:	080075e5 	.word	0x080075e5
 8006fa8:	24000d0c 	.word	0x24000d0c
 8006fac:	24000814 	.word	0x24000814
 8006fb0:	24000014 	.word	0x24000014
 8006fb4:	24000d08 	.word	0x24000d08
 8006fb8:	24000cf4 	.word	0x24000cf4
 8006fbc:	24000cec 	.word	0x24000cec

08006fc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006fc4:	4b04      	ldr	r3, [pc, #16]	; (8006fd8 <vTaskSuspendAll+0x18>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	4a03      	ldr	r2, [pc, #12]	; (8006fd8 <vTaskSuspendAll+0x18>)
 8006fcc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006fce:	bf00      	nop
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	24000d10 	.word	0x24000d10

08006fdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fea:	4b42      	ldr	r3, [pc, #264]	; (80070f4 <xTaskResumeAll+0x118>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10a      	bne.n	8007008 <xTaskResumeAll+0x2c>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	603b      	str	r3, [r7, #0]
}
 8007004:	bf00      	nop
 8007006:	e7fe      	b.n	8007006 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007008:	f001 f924 	bl	8008254 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800700c:	4b39      	ldr	r3, [pc, #228]	; (80070f4 <xTaskResumeAll+0x118>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3b01      	subs	r3, #1
 8007012:	4a38      	ldr	r2, [pc, #224]	; (80070f4 <xTaskResumeAll+0x118>)
 8007014:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007016:	4b37      	ldr	r3, [pc, #220]	; (80070f4 <xTaskResumeAll+0x118>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d162      	bne.n	80070e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800701e:	4b36      	ldr	r3, [pc, #216]	; (80070f8 <xTaskResumeAll+0x11c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d05e      	beq.n	80070e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007026:	e02f      	b.n	8007088 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007028:	4b34      	ldr	r3, [pc, #208]	; (80070fc <xTaskResumeAll+0x120>)
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3318      	adds	r3, #24
 8007034:	4618      	mov	r0, r3
 8007036:	f7fe ff97 	bl	8005f68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3304      	adds	r3, #4
 800703e:	4618      	mov	r0, r3
 8007040:	f7fe ff92 	bl	8005f68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007048:	4b2d      	ldr	r3, [pc, #180]	; (8007100 <xTaskResumeAll+0x124>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	429a      	cmp	r2, r3
 800704e:	d903      	bls.n	8007058 <xTaskResumeAll+0x7c>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	4a2a      	ldr	r2, [pc, #168]	; (8007100 <xTaskResumeAll+0x124>)
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705c:	4613      	mov	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4a27      	ldr	r2, [pc, #156]	; (8007104 <xTaskResumeAll+0x128>)
 8007066:	441a      	add	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	3304      	adds	r3, #4
 800706c:	4619      	mov	r1, r3
 800706e:	4610      	mov	r0, r2
 8007070:	f7fe ff1d 	bl	8005eae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007078:	4b23      	ldr	r3, [pc, #140]	; (8007108 <xTaskResumeAll+0x12c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	429a      	cmp	r2, r3
 8007080:	d302      	bcc.n	8007088 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007082:	4b22      	ldr	r3, [pc, #136]	; (800710c <xTaskResumeAll+0x130>)
 8007084:	2201      	movs	r2, #1
 8007086:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007088:	4b1c      	ldr	r3, [pc, #112]	; (80070fc <xTaskResumeAll+0x120>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1cb      	bne.n	8007028 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007096:	f000 fb5f 	bl	8007758 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800709a:	4b1d      	ldr	r3, [pc, #116]	; (8007110 <xTaskResumeAll+0x134>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d010      	beq.n	80070c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070a6:	f000 f847 	bl	8007138 <xTaskIncrementTick>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80070b0:	4b16      	ldr	r3, [pc, #88]	; (800710c <xTaskResumeAll+0x130>)
 80070b2:	2201      	movs	r2, #1
 80070b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	3b01      	subs	r3, #1
 80070ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1f1      	bne.n	80070a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80070c2:	4b13      	ldr	r3, [pc, #76]	; (8007110 <xTaskResumeAll+0x134>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070c8:	4b10      	ldr	r3, [pc, #64]	; (800710c <xTaskResumeAll+0x130>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d009      	beq.n	80070e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070d0:	2301      	movs	r3, #1
 80070d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070d4:	4b0f      	ldr	r3, [pc, #60]	; (8007114 <xTaskResumeAll+0x138>)
 80070d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070e4:	f001 f8e6 	bl	80082b4 <vPortExitCritical>

	return xAlreadyYielded;
 80070e8:	68bb      	ldr	r3, [r7, #8]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	24000d10 	.word	0x24000d10
 80070f8:	24000ce8 	.word	0x24000ce8
 80070fc:	24000ca8 	.word	0x24000ca8
 8007100:	24000cf0 	.word	0x24000cf0
 8007104:	24000818 	.word	0x24000818
 8007108:	24000814 	.word	0x24000814
 800710c:	24000cfc 	.word	0x24000cfc
 8007110:	24000cf8 	.word	0x24000cf8
 8007114:	e000ed04 	.word	0xe000ed04

08007118 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800711e:	4b05      	ldr	r3, [pc, #20]	; (8007134 <xTaskGetTickCount+0x1c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007124:	687b      	ldr	r3, [r7, #4]
}
 8007126:	4618      	mov	r0, r3
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	24000cec 	.word	0x24000cec

08007138 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800713e:	2300      	movs	r3, #0
 8007140:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007142:	4b4f      	ldr	r3, [pc, #316]	; (8007280 <xTaskIncrementTick+0x148>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	f040 808f 	bne.w	800726a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800714c:	4b4d      	ldr	r3, [pc, #308]	; (8007284 <xTaskIncrementTick+0x14c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3301      	adds	r3, #1
 8007152:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007154:	4a4b      	ldr	r2, [pc, #300]	; (8007284 <xTaskIncrementTick+0x14c>)
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d120      	bne.n	80071a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007160:	4b49      	ldr	r3, [pc, #292]	; (8007288 <xTaskIncrementTick+0x150>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <xTaskIncrementTick+0x48>
	__asm volatile
 800716a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	603b      	str	r3, [r7, #0]
}
 800717c:	bf00      	nop
 800717e:	e7fe      	b.n	800717e <xTaskIncrementTick+0x46>
 8007180:	4b41      	ldr	r3, [pc, #260]	; (8007288 <xTaskIncrementTick+0x150>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	60fb      	str	r3, [r7, #12]
 8007186:	4b41      	ldr	r3, [pc, #260]	; (800728c <xTaskIncrementTick+0x154>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a3f      	ldr	r2, [pc, #252]	; (8007288 <xTaskIncrementTick+0x150>)
 800718c:	6013      	str	r3, [r2, #0]
 800718e:	4a3f      	ldr	r2, [pc, #252]	; (800728c <xTaskIncrementTick+0x154>)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	4b3e      	ldr	r3, [pc, #248]	; (8007290 <xTaskIncrementTick+0x158>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3301      	adds	r3, #1
 800719a:	4a3d      	ldr	r2, [pc, #244]	; (8007290 <xTaskIncrementTick+0x158>)
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	f000 fadb 	bl	8007758 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071a2:	4b3c      	ldr	r3, [pc, #240]	; (8007294 <xTaskIncrementTick+0x15c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d349      	bcc.n	8007240 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071ac:	4b36      	ldr	r3, [pc, #216]	; (8007288 <xTaskIncrementTick+0x150>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d104      	bne.n	80071c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071b6:	4b37      	ldr	r3, [pc, #220]	; (8007294 <xTaskIncrementTick+0x15c>)
 80071b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071bc:	601a      	str	r2, [r3, #0]
					break;
 80071be:	e03f      	b.n	8007240 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071c0:	4b31      	ldr	r3, [pc, #196]	; (8007288 <xTaskIncrementTick+0x150>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d203      	bcs.n	80071e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071d8:	4a2e      	ldr	r2, [pc, #184]	; (8007294 <xTaskIncrementTick+0x15c>)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071de:	e02f      	b.n	8007240 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	3304      	adds	r3, #4
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fe febf 	bl	8005f68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d004      	beq.n	80071fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	3318      	adds	r3, #24
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe feb6 	bl	8005f68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007200:	4b25      	ldr	r3, [pc, #148]	; (8007298 <xTaskIncrementTick+0x160>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	429a      	cmp	r2, r3
 8007206:	d903      	bls.n	8007210 <xTaskIncrementTick+0xd8>
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720c:	4a22      	ldr	r2, [pc, #136]	; (8007298 <xTaskIncrementTick+0x160>)
 800720e:	6013      	str	r3, [r2, #0]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007214:	4613      	mov	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4a1f      	ldr	r2, [pc, #124]	; (800729c <xTaskIncrementTick+0x164>)
 800721e:	441a      	add	r2, r3
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	3304      	adds	r3, #4
 8007224:	4619      	mov	r1, r3
 8007226:	4610      	mov	r0, r2
 8007228:	f7fe fe41 	bl	8005eae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007230:	4b1b      	ldr	r3, [pc, #108]	; (80072a0 <xTaskIncrementTick+0x168>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007236:	429a      	cmp	r2, r3
 8007238:	d3b8      	bcc.n	80071ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800723a:	2301      	movs	r3, #1
 800723c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800723e:	e7b5      	b.n	80071ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007240:	4b17      	ldr	r3, [pc, #92]	; (80072a0 <xTaskIncrementTick+0x168>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007246:	4915      	ldr	r1, [pc, #84]	; (800729c <xTaskIncrementTick+0x164>)
 8007248:	4613      	mov	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	440b      	add	r3, r1
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d901      	bls.n	800725c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007258:	2301      	movs	r3, #1
 800725a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800725c:	4b11      	ldr	r3, [pc, #68]	; (80072a4 <xTaskIncrementTick+0x16c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d007      	beq.n	8007274 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007264:	2301      	movs	r3, #1
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	e004      	b.n	8007274 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800726a:	4b0f      	ldr	r3, [pc, #60]	; (80072a8 <xTaskIncrementTick+0x170>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3301      	adds	r3, #1
 8007270:	4a0d      	ldr	r2, [pc, #52]	; (80072a8 <xTaskIncrementTick+0x170>)
 8007272:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007274:	697b      	ldr	r3, [r7, #20]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	24000d10 	.word	0x24000d10
 8007284:	24000cec 	.word	0x24000cec
 8007288:	24000ca0 	.word	0x24000ca0
 800728c:	24000ca4 	.word	0x24000ca4
 8007290:	24000d00 	.word	0x24000d00
 8007294:	24000d08 	.word	0x24000d08
 8007298:	24000cf0 	.word	0x24000cf0
 800729c:	24000818 	.word	0x24000818
 80072a0:	24000814 	.word	0x24000814
 80072a4:	24000cfc 	.word	0x24000cfc
 80072a8:	24000cf8 	.word	0x24000cf8

080072ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072b2:	4b2a      	ldr	r3, [pc, #168]	; (800735c <vTaskSwitchContext+0xb0>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072ba:	4b29      	ldr	r3, [pc, #164]	; (8007360 <vTaskSwitchContext+0xb4>)
 80072bc:	2201      	movs	r2, #1
 80072be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072c0:	e046      	b.n	8007350 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80072c2:	4b27      	ldr	r3, [pc, #156]	; (8007360 <vTaskSwitchContext+0xb4>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072c8:	4b26      	ldr	r3, [pc, #152]	; (8007364 <vTaskSwitchContext+0xb8>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60fb      	str	r3, [r7, #12]
 80072ce:	e010      	b.n	80072f2 <vTaskSwitchContext+0x46>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10a      	bne.n	80072ec <vTaskSwitchContext+0x40>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	607b      	str	r3, [r7, #4]
}
 80072e8:	bf00      	nop
 80072ea:	e7fe      	b.n	80072ea <vTaskSwitchContext+0x3e>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	3b01      	subs	r3, #1
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	491d      	ldr	r1, [pc, #116]	; (8007368 <vTaskSwitchContext+0xbc>)
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	440b      	add	r3, r1
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d0e4      	beq.n	80072d0 <vTaskSwitchContext+0x24>
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4613      	mov	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4a15      	ldr	r2, [pc, #84]	; (8007368 <vTaskSwitchContext+0xbc>)
 8007312:	4413      	add	r3, r2
 8007314:	60bb      	str	r3, [r7, #8]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	605a      	str	r2, [r3, #4]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	685a      	ldr	r2, [r3, #4]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	3308      	adds	r3, #8
 8007328:	429a      	cmp	r2, r3
 800732a:	d104      	bne.n	8007336 <vTaskSwitchContext+0x8a>
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	605a      	str	r2, [r3, #4]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	4a0b      	ldr	r2, [pc, #44]	; (800736c <vTaskSwitchContext+0xc0>)
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	4a08      	ldr	r2, [pc, #32]	; (8007364 <vTaskSwitchContext+0xb8>)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007346:	4b09      	ldr	r3, [pc, #36]	; (800736c <vTaskSwitchContext+0xc0>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3354      	adds	r3, #84	; 0x54
 800734c:	4a08      	ldr	r2, [pc, #32]	; (8007370 <vTaskSwitchContext+0xc4>)
 800734e:	6013      	str	r3, [r2, #0]
}
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	24000d10 	.word	0x24000d10
 8007360:	24000cfc 	.word	0x24000cfc
 8007364:	24000cf0 	.word	0x24000cf0
 8007368:	24000818 	.word	0x24000818
 800736c:	24000814 	.word	0x24000814
 8007370:	24000014 	.word	0x24000014

08007374 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10a      	bne.n	800739a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	60fb      	str	r3, [r7, #12]
}
 8007396:	bf00      	nop
 8007398:	e7fe      	b.n	8007398 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800739a:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <vTaskPlaceOnEventList+0x44>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3318      	adds	r3, #24
 80073a0:	4619      	mov	r1, r3
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7fe fda7 	bl	8005ef6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073a8:	2101      	movs	r1, #1
 80073aa:	6838      	ldr	r0, [r7, #0]
 80073ac:	f000 fa80 	bl	80078b0 <prvAddCurrentTaskToDelayedList>
}
 80073b0:	bf00      	nop
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	24000814 	.word	0x24000814

080073bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10a      	bne.n	80073e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	617b      	str	r3, [r7, #20]
}
 80073e0:	bf00      	nop
 80073e2:	e7fe      	b.n	80073e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073e4:	4b0a      	ldr	r3, [pc, #40]	; (8007410 <vTaskPlaceOnEventListRestricted+0x54>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3318      	adds	r3, #24
 80073ea:	4619      	mov	r1, r3
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f7fe fd5e 	bl	8005eae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80073f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073fe:	6879      	ldr	r1, [r7, #4]
 8007400:	68b8      	ldr	r0, [r7, #8]
 8007402:	f000 fa55 	bl	80078b0 <prvAddCurrentTaskToDelayedList>
	}
 8007406:	bf00      	nop
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	24000814 	.word	0x24000814

08007414 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	60fb      	str	r3, [r7, #12]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	3318      	adds	r3, #24
 8007444:	4618      	mov	r0, r3
 8007446:	f7fe fd8f 	bl	8005f68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800744a:	4b1e      	ldr	r3, [pc, #120]	; (80074c4 <xTaskRemoveFromEventList+0xb0>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d11d      	bne.n	800748e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	3304      	adds	r3, #4
 8007456:	4618      	mov	r0, r3
 8007458:	f7fe fd86 	bl	8005f68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007460:	4b19      	ldr	r3, [pc, #100]	; (80074c8 <xTaskRemoveFromEventList+0xb4>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	429a      	cmp	r2, r3
 8007466:	d903      	bls.n	8007470 <xTaskRemoveFromEventList+0x5c>
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746c:	4a16      	ldr	r2, [pc, #88]	; (80074c8 <xTaskRemoveFromEventList+0xb4>)
 800746e:	6013      	str	r3, [r2, #0]
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007474:	4613      	mov	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4a13      	ldr	r2, [pc, #76]	; (80074cc <xTaskRemoveFromEventList+0xb8>)
 800747e:	441a      	add	r2, r3
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	3304      	adds	r3, #4
 8007484:	4619      	mov	r1, r3
 8007486:	4610      	mov	r0, r2
 8007488:	f7fe fd11 	bl	8005eae <vListInsertEnd>
 800748c:	e005      	b.n	800749a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	3318      	adds	r3, #24
 8007492:	4619      	mov	r1, r3
 8007494:	480e      	ldr	r0, [pc, #56]	; (80074d0 <xTaskRemoveFromEventList+0xbc>)
 8007496:	f7fe fd0a 	bl	8005eae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800749e:	4b0d      	ldr	r3, [pc, #52]	; (80074d4 <xTaskRemoveFromEventList+0xc0>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d905      	bls.n	80074b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80074a8:	2301      	movs	r3, #1
 80074aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80074ac:	4b0a      	ldr	r3, [pc, #40]	; (80074d8 <xTaskRemoveFromEventList+0xc4>)
 80074ae:	2201      	movs	r2, #1
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	e001      	b.n	80074b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80074b4:	2300      	movs	r3, #0
 80074b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80074b8:	697b      	ldr	r3, [r7, #20]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3718      	adds	r7, #24
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	24000d10 	.word	0x24000d10
 80074c8:	24000cf0 	.word	0x24000cf0
 80074cc:	24000818 	.word	0x24000818
 80074d0:	24000ca8 	.word	0x24000ca8
 80074d4:	24000814 	.word	0x24000814
 80074d8:	24000cfc 	.word	0x24000cfc

080074dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074e4:	4b06      	ldr	r3, [pc, #24]	; (8007500 <vTaskInternalSetTimeOutState+0x24>)
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074ec:	4b05      	ldr	r3, [pc, #20]	; (8007504 <vTaskInternalSetTimeOutState+0x28>)
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	605a      	str	r2, [r3, #4]
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	24000d00 	.word	0x24000d00
 8007504:	24000cec 	.word	0x24000cec

08007508 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b088      	sub	sp, #32
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10a      	bne.n	800752e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751c:	f383 8811 	msr	BASEPRI, r3
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	613b      	str	r3, [r7, #16]
}
 800752a:	bf00      	nop
 800752c:	e7fe      	b.n	800752c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	60fb      	str	r3, [r7, #12]
}
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800754a:	f000 fe83 	bl	8008254 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800754e:	4b1d      	ldr	r3, [pc, #116]	; (80075c4 <xTaskCheckForTimeOut+0xbc>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007566:	d102      	bne.n	800756e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007568:	2300      	movs	r3, #0
 800756a:	61fb      	str	r3, [r7, #28]
 800756c:	e023      	b.n	80075b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	4b15      	ldr	r3, [pc, #84]	; (80075c8 <xTaskCheckForTimeOut+0xc0>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	429a      	cmp	r2, r3
 8007578:	d007      	beq.n	800758a <xTaskCheckForTimeOut+0x82>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	69ba      	ldr	r2, [r7, #24]
 8007580:	429a      	cmp	r2, r3
 8007582:	d302      	bcc.n	800758a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007584:	2301      	movs	r3, #1
 8007586:	61fb      	str	r3, [r7, #28]
 8007588:	e015      	b.n	80075b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	429a      	cmp	r2, r3
 8007592:	d20b      	bcs.n	80075ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	1ad2      	subs	r2, r2, r3
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7ff ff9b 	bl	80074dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80075a6:	2300      	movs	r3, #0
 80075a8:	61fb      	str	r3, [r7, #28]
 80075aa:	e004      	b.n	80075b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	2200      	movs	r2, #0
 80075b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80075b2:	2301      	movs	r3, #1
 80075b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80075b6:	f000 fe7d 	bl	80082b4 <vPortExitCritical>

	return xReturn;
 80075ba:	69fb      	ldr	r3, [r7, #28]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3720      	adds	r7, #32
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	24000cec 	.word	0x24000cec
 80075c8:	24000d00 	.word	0x24000d00

080075cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075cc:	b480      	push	{r7}
 80075ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075d0:	4b03      	ldr	r3, [pc, #12]	; (80075e0 <vTaskMissedYield+0x14>)
 80075d2:	2201      	movs	r2, #1
 80075d4:	601a      	str	r2, [r3, #0]
}
 80075d6:	bf00      	nop
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	24000cfc 	.word	0x24000cfc

080075e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075ec:	f000 f852 	bl	8007694 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075f0:	4b06      	ldr	r3, [pc, #24]	; (800760c <prvIdleTask+0x28>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d9f9      	bls.n	80075ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80075f8:	4b05      	ldr	r3, [pc, #20]	; (8007610 <prvIdleTask+0x2c>)
 80075fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007608:	e7f0      	b.n	80075ec <prvIdleTask+0x8>
 800760a:	bf00      	nop
 800760c:	24000818 	.word	0x24000818
 8007610:	e000ed04 	.word	0xe000ed04

08007614 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800761a:	2300      	movs	r3, #0
 800761c:	607b      	str	r3, [r7, #4]
 800761e:	e00c      	b.n	800763a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	4613      	mov	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4a12      	ldr	r2, [pc, #72]	; (8007674 <prvInitialiseTaskLists+0x60>)
 800762c:	4413      	add	r3, r2
 800762e:	4618      	mov	r0, r3
 8007630:	f7fe fc10 	bl	8005e54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	3301      	adds	r3, #1
 8007638:	607b      	str	r3, [r7, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b37      	cmp	r3, #55	; 0x37
 800763e:	d9ef      	bls.n	8007620 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007640:	480d      	ldr	r0, [pc, #52]	; (8007678 <prvInitialiseTaskLists+0x64>)
 8007642:	f7fe fc07 	bl	8005e54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007646:	480d      	ldr	r0, [pc, #52]	; (800767c <prvInitialiseTaskLists+0x68>)
 8007648:	f7fe fc04 	bl	8005e54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800764c:	480c      	ldr	r0, [pc, #48]	; (8007680 <prvInitialiseTaskLists+0x6c>)
 800764e:	f7fe fc01 	bl	8005e54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007652:	480c      	ldr	r0, [pc, #48]	; (8007684 <prvInitialiseTaskLists+0x70>)
 8007654:	f7fe fbfe 	bl	8005e54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007658:	480b      	ldr	r0, [pc, #44]	; (8007688 <prvInitialiseTaskLists+0x74>)
 800765a:	f7fe fbfb 	bl	8005e54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800765e:	4b0b      	ldr	r3, [pc, #44]	; (800768c <prvInitialiseTaskLists+0x78>)
 8007660:	4a05      	ldr	r2, [pc, #20]	; (8007678 <prvInitialiseTaskLists+0x64>)
 8007662:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007664:	4b0a      	ldr	r3, [pc, #40]	; (8007690 <prvInitialiseTaskLists+0x7c>)
 8007666:	4a05      	ldr	r2, [pc, #20]	; (800767c <prvInitialiseTaskLists+0x68>)
 8007668:	601a      	str	r2, [r3, #0]
}
 800766a:	bf00      	nop
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	24000818 	.word	0x24000818
 8007678:	24000c78 	.word	0x24000c78
 800767c:	24000c8c 	.word	0x24000c8c
 8007680:	24000ca8 	.word	0x24000ca8
 8007684:	24000cbc 	.word	0x24000cbc
 8007688:	24000cd4 	.word	0x24000cd4
 800768c:	24000ca0 	.word	0x24000ca0
 8007690:	24000ca4 	.word	0x24000ca4

08007694 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800769a:	e019      	b.n	80076d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800769c:	f000 fdda 	bl	8008254 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076a0:	4b10      	ldr	r3, [pc, #64]	; (80076e4 <prvCheckTasksWaitingTermination+0x50>)
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3304      	adds	r3, #4
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7fe fc5b 	bl	8005f68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80076b2:	4b0d      	ldr	r3, [pc, #52]	; (80076e8 <prvCheckTasksWaitingTermination+0x54>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	4a0b      	ldr	r2, [pc, #44]	; (80076e8 <prvCheckTasksWaitingTermination+0x54>)
 80076ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076bc:	4b0b      	ldr	r3, [pc, #44]	; (80076ec <prvCheckTasksWaitingTermination+0x58>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3b01      	subs	r3, #1
 80076c2:	4a0a      	ldr	r2, [pc, #40]	; (80076ec <prvCheckTasksWaitingTermination+0x58>)
 80076c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076c6:	f000 fdf5 	bl	80082b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f810 	bl	80076f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076d0:	4b06      	ldr	r3, [pc, #24]	; (80076ec <prvCheckTasksWaitingTermination+0x58>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1e1      	bne.n	800769c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076d8:	bf00      	nop
 80076da:	bf00      	nop
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	24000cbc 	.word	0x24000cbc
 80076e8:	24000ce8 	.word	0x24000ce8
 80076ec:	24000cd0 	.word	0x24000cd0

080076f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3354      	adds	r3, #84	; 0x54
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 f963 	bl	80089c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007708:	2b00      	cmp	r3, #0
 800770a:	d108      	bne.n	800771e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007710:	4618      	mov	r0, r3
 8007712:	f000 ff8d 	bl	8008630 <vPortFree>
				vPortFree( pxTCB );
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 ff8a 	bl	8008630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800771c:	e018      	b.n	8007750 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007724:	2b01      	cmp	r3, #1
 8007726:	d103      	bne.n	8007730 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 ff81 	bl	8008630 <vPortFree>
	}
 800772e:	e00f      	b.n	8007750 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007736:	2b02      	cmp	r3, #2
 8007738:	d00a      	beq.n	8007750 <prvDeleteTCB+0x60>
	__asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	60fb      	str	r3, [r7, #12]
}
 800774c:	bf00      	nop
 800774e:	e7fe      	b.n	800774e <prvDeleteTCB+0x5e>
	}
 8007750:	bf00      	nop
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800775e:	4b0c      	ldr	r3, [pc, #48]	; (8007790 <prvResetNextTaskUnblockTime+0x38>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d104      	bne.n	8007772 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007768:	4b0a      	ldr	r3, [pc, #40]	; (8007794 <prvResetNextTaskUnblockTime+0x3c>)
 800776a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800776e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007770:	e008      	b.n	8007784 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007772:	4b07      	ldr	r3, [pc, #28]	; (8007790 <prvResetNextTaskUnblockTime+0x38>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	4a04      	ldr	r2, [pc, #16]	; (8007794 <prvResetNextTaskUnblockTime+0x3c>)
 8007782:	6013      	str	r3, [r2, #0]
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	24000ca0 	.word	0x24000ca0
 8007794:	24000d08 	.word	0x24000d08

08007798 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800779e:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <xTaskGetSchedulerState+0x34>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d102      	bne.n	80077ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80077a6:	2301      	movs	r3, #1
 80077a8:	607b      	str	r3, [r7, #4]
 80077aa:	e008      	b.n	80077be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077ac:	4b08      	ldr	r3, [pc, #32]	; (80077d0 <xTaskGetSchedulerState+0x38>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d102      	bne.n	80077ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80077b4:	2302      	movs	r3, #2
 80077b6:	607b      	str	r3, [r7, #4]
 80077b8:	e001      	b.n	80077be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80077ba:	2300      	movs	r3, #0
 80077bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80077be:	687b      	ldr	r3, [r7, #4]
	}
 80077c0:	4618      	mov	r0, r3
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	24000cf4 	.word	0x24000cf4
 80077d0:	24000d10 	.word	0x24000d10

080077d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077e0:	2300      	movs	r3, #0
 80077e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d056      	beq.n	8007898 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077ea:	4b2e      	ldr	r3, [pc, #184]	; (80078a4 <xTaskPriorityDisinherit+0xd0>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d00a      	beq.n	800780a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80077f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f8:	f383 8811 	msr	BASEPRI, r3
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	60fb      	str	r3, [r7, #12]
}
 8007806:	bf00      	nop
 8007808:	e7fe      	b.n	8007808 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10a      	bne.n	8007828 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	60bb      	str	r3, [r7, #8]
}
 8007824:	bf00      	nop
 8007826:	e7fe      	b.n	8007826 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800782c:	1e5a      	subs	r2, r3, #1
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800783a:	429a      	cmp	r2, r3
 800783c:	d02c      	beq.n	8007898 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007842:	2b00      	cmp	r3, #0
 8007844:	d128      	bne.n	8007898 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	3304      	adds	r3, #4
 800784a:	4618      	mov	r0, r3
 800784c:	f7fe fb8c 	bl	8005f68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007868:	4b0f      	ldr	r3, [pc, #60]	; (80078a8 <xTaskPriorityDisinherit+0xd4>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	429a      	cmp	r2, r3
 800786e:	d903      	bls.n	8007878 <xTaskPriorityDisinherit+0xa4>
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007874:	4a0c      	ldr	r2, [pc, #48]	; (80078a8 <xTaskPriorityDisinherit+0xd4>)
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4a09      	ldr	r2, [pc, #36]	; (80078ac <xTaskPriorityDisinherit+0xd8>)
 8007886:	441a      	add	r2, r3
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	3304      	adds	r3, #4
 800788c:	4619      	mov	r1, r3
 800788e:	4610      	mov	r0, r2
 8007890:	f7fe fb0d 	bl	8005eae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007894:	2301      	movs	r3, #1
 8007896:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007898:	697b      	ldr	r3, [r7, #20]
	}
 800789a:	4618      	mov	r0, r3
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	24000814 	.word	0x24000814
 80078a8:	24000cf0 	.word	0x24000cf0
 80078ac:	24000818 	.word	0x24000818

080078b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078ba:	4b21      	ldr	r3, [pc, #132]	; (8007940 <prvAddCurrentTaskToDelayedList+0x90>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078c0:	4b20      	ldr	r3, [pc, #128]	; (8007944 <prvAddCurrentTaskToDelayedList+0x94>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3304      	adds	r3, #4
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fe fb4e 	bl	8005f68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078d2:	d10a      	bne.n	80078ea <prvAddCurrentTaskToDelayedList+0x3a>
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d007      	beq.n	80078ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078da:	4b1a      	ldr	r3, [pc, #104]	; (8007944 <prvAddCurrentTaskToDelayedList+0x94>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3304      	adds	r3, #4
 80078e0:	4619      	mov	r1, r3
 80078e2:	4819      	ldr	r0, [pc, #100]	; (8007948 <prvAddCurrentTaskToDelayedList+0x98>)
 80078e4:	f7fe fae3 	bl	8005eae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078e8:	e026      	b.n	8007938 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4413      	add	r3, r2
 80078f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078f2:	4b14      	ldr	r3, [pc, #80]	; (8007944 <prvAddCurrentTaskToDelayedList+0x94>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d209      	bcs.n	8007916 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007902:	4b12      	ldr	r3, [pc, #72]	; (800794c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	4b0f      	ldr	r3, [pc, #60]	; (8007944 <prvAddCurrentTaskToDelayedList+0x94>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3304      	adds	r3, #4
 800790c:	4619      	mov	r1, r3
 800790e:	4610      	mov	r0, r2
 8007910:	f7fe faf1 	bl	8005ef6 <vListInsert>
}
 8007914:	e010      	b.n	8007938 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007916:	4b0e      	ldr	r3, [pc, #56]	; (8007950 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	4b0a      	ldr	r3, [pc, #40]	; (8007944 <prvAddCurrentTaskToDelayedList+0x94>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3304      	adds	r3, #4
 8007920:	4619      	mov	r1, r3
 8007922:	4610      	mov	r0, r2
 8007924:	f7fe fae7 	bl	8005ef6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007928:	4b0a      	ldr	r3, [pc, #40]	; (8007954 <prvAddCurrentTaskToDelayedList+0xa4>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	429a      	cmp	r2, r3
 8007930:	d202      	bcs.n	8007938 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007932:	4a08      	ldr	r2, [pc, #32]	; (8007954 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	6013      	str	r3, [r2, #0]
}
 8007938:	bf00      	nop
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	24000cec 	.word	0x24000cec
 8007944:	24000814 	.word	0x24000814
 8007948:	24000cd4 	.word	0x24000cd4
 800794c:	24000ca4 	.word	0x24000ca4
 8007950:	24000ca0 	.word	0x24000ca0
 8007954:	24000d08 	.word	0x24000d08

08007958 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08a      	sub	sp, #40	; 0x28
 800795c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800795e:	2300      	movs	r3, #0
 8007960:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007962:	f000 fb07 	bl	8007f74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007966:	4b1c      	ldr	r3, [pc, #112]	; (80079d8 <xTimerCreateTimerTask+0x80>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d021      	beq.n	80079b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007972:	2300      	movs	r3, #0
 8007974:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007976:	1d3a      	adds	r2, r7, #4
 8007978:	f107 0108 	add.w	r1, r7, #8
 800797c:	f107 030c 	add.w	r3, r7, #12
 8007980:	4618      	mov	r0, r3
 8007982:	f7fe fa4d 	bl	8005e20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007986:	6879      	ldr	r1, [r7, #4]
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	9202      	str	r2, [sp, #8]
 800798e:	9301      	str	r3, [sp, #4]
 8007990:	2302      	movs	r3, #2
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	2300      	movs	r3, #0
 8007996:	460a      	mov	r2, r1
 8007998:	4910      	ldr	r1, [pc, #64]	; (80079dc <xTimerCreateTimerTask+0x84>)
 800799a:	4811      	ldr	r0, [pc, #68]	; (80079e0 <xTimerCreateTimerTask+0x88>)
 800799c:	f7ff f8b4 	bl	8006b08 <xTaskCreateStatic>
 80079a0:	4603      	mov	r3, r0
 80079a2:	4a10      	ldr	r2, [pc, #64]	; (80079e4 <xTimerCreateTimerTask+0x8c>)
 80079a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80079a6:	4b0f      	ldr	r3, [pc, #60]	; (80079e4 <xTimerCreateTimerTask+0x8c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80079ae:	2301      	movs	r3, #1
 80079b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10a      	bne.n	80079ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	613b      	str	r3, [r7, #16]
}
 80079ca:	bf00      	nop
 80079cc:	e7fe      	b.n	80079cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80079ce:	697b      	ldr	r3, [r7, #20]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3718      	adds	r7, #24
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	24000d44 	.word	0x24000d44
 80079dc:	080093e0 	.word	0x080093e0
 80079e0:	08007b1d 	.word	0x08007b1d
 80079e4:	24000d48 	.word	0x24000d48

080079e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b08a      	sub	sp, #40	; 0x28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079f6:	2300      	movs	r3, #0
 80079f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10a      	bne.n	8007a16 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	623b      	str	r3, [r7, #32]
}
 8007a12:	bf00      	nop
 8007a14:	e7fe      	b.n	8007a14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a16:	4b1a      	ldr	r3, [pc, #104]	; (8007a80 <xTimerGenericCommand+0x98>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d02a      	beq.n	8007a74 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2b05      	cmp	r3, #5
 8007a2e:	dc18      	bgt.n	8007a62 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a30:	f7ff feb2 	bl	8007798 <xTaskGetSchedulerState>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d109      	bne.n	8007a4e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a3a:	4b11      	ldr	r3, [pc, #68]	; (8007a80 <xTimerGenericCommand+0x98>)
 8007a3c:	6818      	ldr	r0, [r3, #0]
 8007a3e:	f107 0110 	add.w	r1, r7, #16
 8007a42:	2300      	movs	r3, #0
 8007a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a46:	f7fe fbf7 	bl	8006238 <xQueueGenericSend>
 8007a4a:	6278      	str	r0, [r7, #36]	; 0x24
 8007a4c:	e012      	b.n	8007a74 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a4e:	4b0c      	ldr	r3, [pc, #48]	; (8007a80 <xTimerGenericCommand+0x98>)
 8007a50:	6818      	ldr	r0, [r3, #0]
 8007a52:	f107 0110 	add.w	r1, r7, #16
 8007a56:	2300      	movs	r3, #0
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f7fe fbed 	bl	8006238 <xQueueGenericSend>
 8007a5e:	6278      	str	r0, [r7, #36]	; 0x24
 8007a60:	e008      	b.n	8007a74 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a62:	4b07      	ldr	r3, [pc, #28]	; (8007a80 <xTimerGenericCommand+0x98>)
 8007a64:	6818      	ldr	r0, [r3, #0]
 8007a66:	f107 0110 	add.w	r1, r7, #16
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	f7fe fce1 	bl	8006434 <xQueueGenericSendFromISR>
 8007a72:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3728      	adds	r7, #40	; 0x28
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	24000d44 	.word	0x24000d44

08007a84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b088      	sub	sp, #32
 8007a88:	af02      	add	r7, sp, #8
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a8e:	4b22      	ldr	r3, [pc, #136]	; (8007b18 <prvProcessExpiredTimer+0x94>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fe fa63 	bl	8005f68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007aa8:	f003 0304 	and.w	r3, r3, #4
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d022      	beq.n	8007af6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	699a      	ldr	r2, [r3, #24]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	18d1      	adds	r1, r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	6978      	ldr	r0, [r7, #20]
 8007abe:	f000 f8d1 	bl	8007c64 <prvInsertTimerInActiveList>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d01f      	beq.n	8007b08 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ac8:	2300      	movs	r3, #0
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	2300      	movs	r3, #0
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	6978      	ldr	r0, [r7, #20]
 8007ad4:	f7ff ff88 	bl	80079e8 <xTimerGenericCommand>
 8007ad8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d113      	bne.n	8007b08 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	60fb      	str	r3, [r7, #12]
}
 8007af2:	bf00      	nop
 8007af4:	e7fe      	b.n	8007af4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007afc:	f023 0301 	bic.w	r3, r3, #1
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	6978      	ldr	r0, [r7, #20]
 8007b0e:	4798      	blx	r3
}
 8007b10:	bf00      	nop
 8007b12:	3718      	adds	r7, #24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	24000d3c 	.word	0x24000d3c

08007b1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b24:	f107 0308 	add.w	r3, r7, #8
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 f857 	bl	8007bdc <prvGetNextExpireTime>
 8007b2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	4619      	mov	r1, r3
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 f803 	bl	8007b40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b3a:	f000 f8d5 	bl	8007ce8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b3e:	e7f1      	b.n	8007b24 <prvTimerTask+0x8>

08007b40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b4a:	f7ff fa39 	bl	8006fc0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b4e:	f107 0308 	add.w	r3, r7, #8
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 f866 	bl	8007c24 <prvSampleTimeNow>
 8007b58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d130      	bne.n	8007bc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10a      	bne.n	8007b7c <prvProcessTimerOrBlockTask+0x3c>
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d806      	bhi.n	8007b7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b6e:	f7ff fa35 	bl	8006fdc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b72:	68f9      	ldr	r1, [r7, #12]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff ff85 	bl	8007a84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b7a:	e024      	b.n	8007bc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d008      	beq.n	8007b94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b82:	4b13      	ldr	r3, [pc, #76]	; (8007bd0 <prvProcessTimerOrBlockTask+0x90>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d101      	bne.n	8007b90 <prvProcessTimerOrBlockTask+0x50>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e000      	b.n	8007b92 <prvProcessTimerOrBlockTask+0x52>
 8007b90:	2300      	movs	r3, #0
 8007b92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b94:	4b0f      	ldr	r3, [pc, #60]	; (8007bd4 <prvProcessTimerOrBlockTask+0x94>)
 8007b96:	6818      	ldr	r0, [r3, #0]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	f7fe ff7d 	bl	8006aa0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007ba6:	f7ff fa19 	bl	8006fdc <xTaskResumeAll>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10a      	bne.n	8007bc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007bb0:	4b09      	ldr	r3, [pc, #36]	; (8007bd8 <prvProcessTimerOrBlockTask+0x98>)
 8007bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	f3bf 8f6f 	isb	sy
}
 8007bc0:	e001      	b.n	8007bc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007bc2:	f7ff fa0b 	bl	8006fdc <xTaskResumeAll>
}
 8007bc6:	bf00      	nop
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	24000d40 	.word	0x24000d40
 8007bd4:	24000d44 	.word	0x24000d44
 8007bd8:	e000ed04 	.word	0xe000ed04

08007bdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007be4:	4b0e      	ldr	r3, [pc, #56]	; (8007c20 <prvGetNextExpireTime+0x44>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <prvGetNextExpireTime+0x16>
 8007bee:	2201      	movs	r2, #1
 8007bf0:	e000      	b.n	8007bf4 <prvGetNextExpireTime+0x18>
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d105      	bne.n	8007c0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c00:	4b07      	ldr	r3, [pc, #28]	; (8007c20 <prvGetNextExpireTime+0x44>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	e001      	b.n	8007c10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007c10:	68fb      	ldr	r3, [r7, #12]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	24000d3c 	.word	0x24000d3c

08007c24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c2c:	f7ff fa74 	bl	8007118 <xTaskGetTickCount>
 8007c30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c32:	4b0b      	ldr	r3, [pc, #44]	; (8007c60 <prvSampleTimeNow+0x3c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d205      	bcs.n	8007c48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c3c:	f000 f936 	bl	8007eac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e002      	b.n	8007c4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c4e:	4a04      	ldr	r2, [pc, #16]	; (8007c60 <prvSampleTimeNow+0x3c>)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c54:	68fb      	ldr	r3, [r7, #12]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	24000d4c 	.word	0x24000d4c

08007c64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
 8007c70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c72:	2300      	movs	r3, #0
 8007c74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d812      	bhi.n	8007cb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	1ad2      	subs	r2, r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d302      	bcc.n	8007c9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	617b      	str	r3, [r7, #20]
 8007c9c:	e01b      	b.n	8007cd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c9e:	4b10      	ldr	r3, [pc, #64]	; (8007ce0 <prvInsertTimerInActiveList+0x7c>)
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	4610      	mov	r0, r2
 8007caa:	f7fe f924 	bl	8005ef6 <vListInsert>
 8007cae:	e012      	b.n	8007cd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d206      	bcs.n	8007cc6 <prvInsertTimerInActiveList+0x62>
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d302      	bcc.n	8007cc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	617b      	str	r3, [r7, #20]
 8007cc4:	e007      	b.n	8007cd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cc6:	4b07      	ldr	r3, [pc, #28]	; (8007ce4 <prvInsertTimerInActiveList+0x80>)
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	f7fe f910 	bl	8005ef6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007cd6:	697b      	ldr	r3, [r7, #20]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3718      	adds	r7, #24
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	24000d40 	.word	0x24000d40
 8007ce4:	24000d3c 	.word	0x24000d3c

08007ce8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08e      	sub	sp, #56	; 0x38
 8007cec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cee:	e0ca      	b.n	8007e86 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	da18      	bge.n	8007d28 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007cf6:	1d3b      	adds	r3, r7, #4
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10a      	bne.n	8007d18 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	61fb      	str	r3, [r7, #28]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d1e:	6850      	ldr	r0, [r2, #4]
 8007d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d22:	6892      	ldr	r2, [r2, #8]
 8007d24:	4611      	mov	r1, r2
 8007d26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f2c0 80aa 	blt.w	8007e84 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d004      	beq.n	8007d46 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3e:	3304      	adds	r3, #4
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe f911 	bl	8005f68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d46:	463b      	mov	r3, r7
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff ff6b 	bl	8007c24 <prvSampleTimeNow>
 8007d4e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b09      	cmp	r3, #9
 8007d54:	f200 8097 	bhi.w	8007e86 <prvProcessReceivedCommands+0x19e>
 8007d58:	a201      	add	r2, pc, #4	; (adr r2, 8007d60 <prvProcessReceivedCommands+0x78>)
 8007d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5e:	bf00      	nop
 8007d60:	08007d89 	.word	0x08007d89
 8007d64:	08007d89 	.word	0x08007d89
 8007d68:	08007d89 	.word	0x08007d89
 8007d6c:	08007dfd 	.word	0x08007dfd
 8007d70:	08007e11 	.word	0x08007e11
 8007d74:	08007e5b 	.word	0x08007e5b
 8007d78:	08007d89 	.word	0x08007d89
 8007d7c:	08007d89 	.word	0x08007d89
 8007d80:	08007dfd 	.word	0x08007dfd
 8007d84:	08007e11 	.word	0x08007e11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d8e:	f043 0301 	orr.w	r3, r3, #1
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	18d1      	adds	r1, r2, r3
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007da8:	f7ff ff5c 	bl	8007c64 <prvInsertTimerInActiveList>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d069      	beq.n	8007e86 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007db8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d05e      	beq.n	8007e86 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	441a      	add	r2, r3
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dda:	f7ff fe05 	bl	80079e8 <xTimerGenericCommand>
 8007dde:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d14f      	bne.n	8007e86 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	61bb      	str	r3, [r7, #24]
}
 8007df8:	bf00      	nop
 8007dfa:	e7fe      	b.n	8007dfa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e02:	f023 0301 	bic.w	r3, r3, #1
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007e0e:	e03a      	b.n	8007e86 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e16:	f043 0301 	orr.w	r3, r3, #1
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10a      	bne.n	8007e46 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	617b      	str	r3, [r7, #20]
}
 8007e42:	bf00      	nop
 8007e44:	e7fe      	b.n	8007e44 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e48:	699a      	ldr	r2, [r3, #24]
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	18d1      	adds	r1, r2, r3
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e54:	f7ff ff06 	bl	8007c64 <prvInsertTimerInActiveList>
					break;
 8007e58:	e015      	b.n	8007e86 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e60:	f003 0302 	and.w	r3, r3, #2
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d103      	bne.n	8007e70 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e6a:	f000 fbe1 	bl	8008630 <vPortFree>
 8007e6e:	e00a      	b.n	8007e86 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e76:	f023 0301 	bic.w	r3, r3, #1
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e82:	e000      	b.n	8007e86 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007e84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e86:	4b08      	ldr	r3, [pc, #32]	; (8007ea8 <prvProcessReceivedCommands+0x1c0>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	1d39      	adds	r1, r7, #4
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fe fb6c 	bl	800656c <xQueueReceive>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f47f af2a 	bne.w	8007cf0 <prvProcessReceivedCommands+0x8>
	}
}
 8007e9c:	bf00      	nop
 8007e9e:	bf00      	nop
 8007ea0:	3730      	adds	r7, #48	; 0x30
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	24000d44 	.word	0x24000d44

08007eac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b088      	sub	sp, #32
 8007eb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007eb2:	e048      	b.n	8007f46 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007eb4:	4b2d      	ldr	r3, [pc, #180]	; (8007f6c <prvSwitchTimerLists+0xc0>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ebe:	4b2b      	ldr	r3, [pc, #172]	; (8007f6c <prvSwitchTimerLists+0xc0>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3304      	adds	r3, #4
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fe f84b 	bl	8005f68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ee0:	f003 0304 	and.w	r3, r3, #4
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d02e      	beq.n	8007f46 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	693a      	ldr	r2, [r7, #16]
 8007eee:	4413      	add	r3, r2
 8007ef0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d90e      	bls.n	8007f18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f06:	4b19      	ldr	r3, [pc, #100]	; (8007f6c <prvSwitchTimerLists+0xc0>)
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4610      	mov	r0, r2
 8007f12:	f7fd fff0 	bl	8005ef6 <vListInsert>
 8007f16:	e016      	b.n	8007f46 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f18:	2300      	movs	r3, #0
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	2100      	movs	r1, #0
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f7ff fd60 	bl	80079e8 <xTimerGenericCommand>
 8007f28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10a      	bne.n	8007f46 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	603b      	str	r3, [r7, #0]
}
 8007f42:	bf00      	nop
 8007f44:	e7fe      	b.n	8007f44 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f46:	4b09      	ldr	r3, [pc, #36]	; (8007f6c <prvSwitchTimerLists+0xc0>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1b1      	bne.n	8007eb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f50:	4b06      	ldr	r3, [pc, #24]	; (8007f6c <prvSwitchTimerLists+0xc0>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f56:	4b06      	ldr	r3, [pc, #24]	; (8007f70 <prvSwitchTimerLists+0xc4>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a04      	ldr	r2, [pc, #16]	; (8007f6c <prvSwitchTimerLists+0xc0>)
 8007f5c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f5e:	4a04      	ldr	r2, [pc, #16]	; (8007f70 <prvSwitchTimerLists+0xc4>)
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	6013      	str	r3, [r2, #0]
}
 8007f64:	bf00      	nop
 8007f66:	3718      	adds	r7, #24
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	24000d3c 	.word	0x24000d3c
 8007f70:	24000d40 	.word	0x24000d40

08007f74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f7a:	f000 f96b 	bl	8008254 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f7e:	4b15      	ldr	r3, [pc, #84]	; (8007fd4 <prvCheckForValidListAndQueue+0x60>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d120      	bne.n	8007fc8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f86:	4814      	ldr	r0, [pc, #80]	; (8007fd8 <prvCheckForValidListAndQueue+0x64>)
 8007f88:	f7fd ff64 	bl	8005e54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f8c:	4813      	ldr	r0, [pc, #76]	; (8007fdc <prvCheckForValidListAndQueue+0x68>)
 8007f8e:	f7fd ff61 	bl	8005e54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f92:	4b13      	ldr	r3, [pc, #76]	; (8007fe0 <prvCheckForValidListAndQueue+0x6c>)
 8007f94:	4a10      	ldr	r2, [pc, #64]	; (8007fd8 <prvCheckForValidListAndQueue+0x64>)
 8007f96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f98:	4b12      	ldr	r3, [pc, #72]	; (8007fe4 <prvCheckForValidListAndQueue+0x70>)
 8007f9a:	4a10      	ldr	r2, [pc, #64]	; (8007fdc <prvCheckForValidListAndQueue+0x68>)
 8007f9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	4b11      	ldr	r3, [pc, #68]	; (8007fe8 <prvCheckForValidListAndQueue+0x74>)
 8007fa4:	4a11      	ldr	r2, [pc, #68]	; (8007fec <prvCheckForValidListAndQueue+0x78>)
 8007fa6:	2110      	movs	r1, #16
 8007fa8:	200a      	movs	r0, #10
 8007faa:	f7fe f86f 	bl	800608c <xQueueGenericCreateStatic>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	4a08      	ldr	r2, [pc, #32]	; (8007fd4 <prvCheckForValidListAndQueue+0x60>)
 8007fb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007fb4:	4b07      	ldr	r3, [pc, #28]	; (8007fd4 <prvCheckForValidListAndQueue+0x60>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d005      	beq.n	8007fc8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007fbc:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <prvCheckForValidListAndQueue+0x60>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	490b      	ldr	r1, [pc, #44]	; (8007ff0 <prvCheckForValidListAndQueue+0x7c>)
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fe fd42 	bl	8006a4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fc8:	f000 f974 	bl	80082b4 <vPortExitCritical>
}
 8007fcc:	bf00      	nop
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	24000d44 	.word	0x24000d44
 8007fd8:	24000d14 	.word	0x24000d14
 8007fdc:	24000d28 	.word	0x24000d28
 8007fe0:	24000d3c 	.word	0x24000d3c
 8007fe4:	24000d40 	.word	0x24000d40
 8007fe8:	24000df0 	.word	0x24000df0
 8007fec:	24000d50 	.word	0x24000d50
 8007ff0:	080093e8 	.word	0x080093e8

08007ff4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	3b04      	subs	r3, #4
 8008004:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800800c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	3b04      	subs	r3, #4
 8008012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f023 0201 	bic.w	r2, r3, #1
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3b04      	subs	r3, #4
 8008022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008024:	4a0c      	ldr	r2, [pc, #48]	; (8008058 <pxPortInitialiseStack+0x64>)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	3b14      	subs	r3, #20
 800802e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3b04      	subs	r3, #4
 800803a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f06f 0202 	mvn.w	r2, #2
 8008042:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	3b20      	subs	r3, #32
 8008048:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800804a:	68fb      	ldr	r3, [r7, #12]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3714      	adds	r7, #20
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	0800805d 	.word	0x0800805d

0800805c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008062:	2300      	movs	r3, #0
 8008064:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008066:	4b12      	ldr	r3, [pc, #72]	; (80080b0 <prvTaskExitError+0x54>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800806e:	d00a      	beq.n	8008086 <prvTaskExitError+0x2a>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	60fb      	str	r3, [r7, #12]
}
 8008082:	bf00      	nop
 8008084:	e7fe      	b.n	8008084 <prvTaskExitError+0x28>
	__asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	60bb      	str	r3, [r7, #8]
}
 8008098:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800809a:	bf00      	nop
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d0fc      	beq.n	800809c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080a2:	bf00      	nop
 80080a4:	bf00      	nop
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr
 80080b0:	24000010 	.word	0x24000010
	...

080080c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080c0:	4b07      	ldr	r3, [pc, #28]	; (80080e0 <pxCurrentTCBConst2>)
 80080c2:	6819      	ldr	r1, [r3, #0]
 80080c4:	6808      	ldr	r0, [r1, #0]
 80080c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ca:	f380 8809 	msr	PSP, r0
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	f04f 0000 	mov.w	r0, #0
 80080d6:	f380 8811 	msr	BASEPRI, r0
 80080da:	4770      	bx	lr
 80080dc:	f3af 8000 	nop.w

080080e0 <pxCurrentTCBConst2>:
 80080e0:	24000814 	.word	0x24000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop

080080e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080e8:	4808      	ldr	r0, [pc, #32]	; (800810c <prvPortStartFirstTask+0x24>)
 80080ea:	6800      	ldr	r0, [r0, #0]
 80080ec:	6800      	ldr	r0, [r0, #0]
 80080ee:	f380 8808 	msr	MSP, r0
 80080f2:	f04f 0000 	mov.w	r0, #0
 80080f6:	f380 8814 	msr	CONTROL, r0
 80080fa:	b662      	cpsie	i
 80080fc:	b661      	cpsie	f
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	df00      	svc	0
 8008108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800810a:	bf00      	nop
 800810c:	e000ed08 	.word	0xe000ed08

08008110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008116:	4b46      	ldr	r3, [pc, #280]	; (8008230 <xPortStartScheduler+0x120>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a46      	ldr	r2, [pc, #280]	; (8008234 <xPortStartScheduler+0x124>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d10a      	bne.n	8008136 <xPortStartScheduler+0x26>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	613b      	str	r3, [r7, #16]
}
 8008132:	bf00      	nop
 8008134:	e7fe      	b.n	8008134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008136:	4b3e      	ldr	r3, [pc, #248]	; (8008230 <xPortStartScheduler+0x120>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a3f      	ldr	r2, [pc, #252]	; (8008238 <xPortStartScheduler+0x128>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d10a      	bne.n	8008156 <xPortStartScheduler+0x46>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	60fb      	str	r3, [r7, #12]
}
 8008152:	bf00      	nop
 8008154:	e7fe      	b.n	8008154 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008156:	4b39      	ldr	r3, [pc, #228]	; (800823c <xPortStartScheduler+0x12c>)
 8008158:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	b2db      	uxtb	r3, r3
 8008160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	22ff      	movs	r2, #255	; 0xff
 8008166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	b2db      	uxtb	r3, r3
 800816e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008170:	78fb      	ldrb	r3, [r7, #3]
 8008172:	b2db      	uxtb	r3, r3
 8008174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008178:	b2da      	uxtb	r2, r3
 800817a:	4b31      	ldr	r3, [pc, #196]	; (8008240 <xPortStartScheduler+0x130>)
 800817c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800817e:	4b31      	ldr	r3, [pc, #196]	; (8008244 <xPortStartScheduler+0x134>)
 8008180:	2207      	movs	r2, #7
 8008182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008184:	e009      	b.n	800819a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008186:	4b2f      	ldr	r3, [pc, #188]	; (8008244 <xPortStartScheduler+0x134>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3b01      	subs	r3, #1
 800818c:	4a2d      	ldr	r2, [pc, #180]	; (8008244 <xPortStartScheduler+0x134>)
 800818e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008190:	78fb      	ldrb	r3, [r7, #3]
 8008192:	b2db      	uxtb	r3, r3
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	b2db      	uxtb	r3, r3
 8008198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800819a:	78fb      	ldrb	r3, [r7, #3]
 800819c:	b2db      	uxtb	r3, r3
 800819e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a2:	2b80      	cmp	r3, #128	; 0x80
 80081a4:	d0ef      	beq.n	8008186 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081a6:	4b27      	ldr	r3, [pc, #156]	; (8008244 <xPortStartScheduler+0x134>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f1c3 0307 	rsb	r3, r3, #7
 80081ae:	2b04      	cmp	r3, #4
 80081b0:	d00a      	beq.n	80081c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80081b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	60bb      	str	r3, [r7, #8]
}
 80081c4:	bf00      	nop
 80081c6:	e7fe      	b.n	80081c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081c8:	4b1e      	ldr	r3, [pc, #120]	; (8008244 <xPortStartScheduler+0x134>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	4a1d      	ldr	r2, [pc, #116]	; (8008244 <xPortStartScheduler+0x134>)
 80081d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081d2:	4b1c      	ldr	r3, [pc, #112]	; (8008244 <xPortStartScheduler+0x134>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081da:	4a1a      	ldr	r2, [pc, #104]	; (8008244 <xPortStartScheduler+0x134>)
 80081dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081e6:	4b18      	ldr	r3, [pc, #96]	; (8008248 <xPortStartScheduler+0x138>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a17      	ldr	r2, [pc, #92]	; (8008248 <xPortStartScheduler+0x138>)
 80081ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081f2:	4b15      	ldr	r3, [pc, #84]	; (8008248 <xPortStartScheduler+0x138>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a14      	ldr	r2, [pc, #80]	; (8008248 <xPortStartScheduler+0x138>)
 80081f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80081fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081fe:	f000 f8dd 	bl	80083bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008202:	4b12      	ldr	r3, [pc, #72]	; (800824c <xPortStartScheduler+0x13c>)
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008208:	f000 f8fc 	bl	8008404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800820c:	4b10      	ldr	r3, [pc, #64]	; (8008250 <xPortStartScheduler+0x140>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a0f      	ldr	r2, [pc, #60]	; (8008250 <xPortStartScheduler+0x140>)
 8008212:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008216:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008218:	f7ff ff66 	bl	80080e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800821c:	f7ff f846 	bl	80072ac <vTaskSwitchContext>
	prvTaskExitError();
 8008220:	f7ff ff1c 	bl	800805c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	e000ed00 	.word	0xe000ed00
 8008234:	410fc271 	.word	0x410fc271
 8008238:	410fc270 	.word	0x410fc270
 800823c:	e000e400 	.word	0xe000e400
 8008240:	24000e40 	.word	0x24000e40
 8008244:	24000e44 	.word	0x24000e44
 8008248:	e000ed20 	.word	0xe000ed20
 800824c:	24000010 	.word	0x24000010
 8008250:	e000ef34 	.word	0xe000ef34

08008254 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	607b      	str	r3, [r7, #4]
}
 800826c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800826e:	4b0f      	ldr	r3, [pc, #60]	; (80082ac <vPortEnterCritical+0x58>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	3301      	adds	r3, #1
 8008274:	4a0d      	ldr	r2, [pc, #52]	; (80082ac <vPortEnterCritical+0x58>)
 8008276:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008278:	4b0c      	ldr	r3, [pc, #48]	; (80082ac <vPortEnterCritical+0x58>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d10f      	bne.n	80082a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008280:	4b0b      	ldr	r3, [pc, #44]	; (80082b0 <vPortEnterCritical+0x5c>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800828a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828e:	f383 8811 	msr	BASEPRI, r3
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	603b      	str	r3, [r7, #0]
}
 800829c:	bf00      	nop
 800829e:	e7fe      	b.n	800829e <vPortEnterCritical+0x4a>
	}
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	24000010 	.word	0x24000010
 80082b0:	e000ed04 	.word	0xe000ed04

080082b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082ba:	4b12      	ldr	r3, [pc, #72]	; (8008304 <vPortExitCritical+0x50>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10a      	bne.n	80082d8 <vPortExitCritical+0x24>
	__asm volatile
 80082c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	607b      	str	r3, [r7, #4]
}
 80082d4:	bf00      	nop
 80082d6:	e7fe      	b.n	80082d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082d8:	4b0a      	ldr	r3, [pc, #40]	; (8008304 <vPortExitCritical+0x50>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3b01      	subs	r3, #1
 80082de:	4a09      	ldr	r2, [pc, #36]	; (8008304 <vPortExitCritical+0x50>)
 80082e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082e2:	4b08      	ldr	r3, [pc, #32]	; (8008304 <vPortExitCritical+0x50>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d105      	bne.n	80082f6 <vPortExitCritical+0x42>
 80082ea:	2300      	movs	r3, #0
 80082ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	f383 8811 	msr	BASEPRI, r3
}
 80082f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082f6:	bf00      	nop
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	24000010 	.word	0x24000010
	...

08008310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008310:	f3ef 8009 	mrs	r0, PSP
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	4b15      	ldr	r3, [pc, #84]	; (8008370 <pxCurrentTCBConst>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	f01e 0f10 	tst.w	lr, #16
 8008320:	bf08      	it	eq
 8008322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832a:	6010      	str	r0, [r2, #0]
 800832c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008334:	f380 8811 	msr	BASEPRI, r0
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f7fe ffb4 	bl	80072ac <vTaskSwitchContext>
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	f380 8811 	msr	BASEPRI, r0
 800834c:	bc09      	pop	{r0, r3}
 800834e:	6819      	ldr	r1, [r3, #0]
 8008350:	6808      	ldr	r0, [r1, #0]
 8008352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008356:	f01e 0f10 	tst.w	lr, #16
 800835a:	bf08      	it	eq
 800835c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008360:	f380 8809 	msr	PSP, r0
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	f3af 8000 	nop.w

08008370 <pxCurrentTCBConst>:
 8008370:	24000814 	.word	0x24000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008374:	bf00      	nop
 8008376:	bf00      	nop

08008378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	607b      	str	r3, [r7, #4]
}
 8008390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008392:	f7fe fed1 	bl	8007138 <xTaskIncrementTick>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d003      	beq.n	80083a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800839c:	4b06      	ldr	r3, [pc, #24]	; (80083b8 <xPortSysTickHandler+0x40>)
 800839e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	2300      	movs	r3, #0
 80083a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	f383 8811 	msr	BASEPRI, r3
}
 80083ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80083b0:	bf00      	nop
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	e000ed04 	.word	0xe000ed04

080083bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80083bc:	b480      	push	{r7}
 80083be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083c0:	4b0b      	ldr	r3, [pc, #44]	; (80083f0 <vPortSetupTimerInterrupt+0x34>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083c6:	4b0b      	ldr	r3, [pc, #44]	; (80083f4 <vPortSetupTimerInterrupt+0x38>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083cc:	4b0a      	ldr	r3, [pc, #40]	; (80083f8 <vPortSetupTimerInterrupt+0x3c>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a0a      	ldr	r2, [pc, #40]	; (80083fc <vPortSetupTimerInterrupt+0x40>)
 80083d2:	fba2 2303 	umull	r2, r3, r2, r3
 80083d6:	099b      	lsrs	r3, r3, #6
 80083d8:	4a09      	ldr	r2, [pc, #36]	; (8008400 <vPortSetupTimerInterrupt+0x44>)
 80083da:	3b01      	subs	r3, #1
 80083dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083de:	4b04      	ldr	r3, [pc, #16]	; (80083f0 <vPortSetupTimerInterrupt+0x34>)
 80083e0:	2207      	movs	r2, #7
 80083e2:	601a      	str	r2, [r3, #0]
}
 80083e4:	bf00      	nop
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	e000e010 	.word	0xe000e010
 80083f4:	e000e018 	.word	0xe000e018
 80083f8:	24000000 	.word	0x24000000
 80083fc:	10624dd3 	.word	0x10624dd3
 8008400:	e000e014 	.word	0xe000e014

08008404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008414 <vPortEnableVFP+0x10>
 8008408:	6801      	ldr	r1, [r0, #0]
 800840a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800840e:	6001      	str	r1, [r0, #0]
 8008410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008412:	bf00      	nop
 8008414:	e000ed88 	.word	0xe000ed88

08008418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800841e:	f3ef 8305 	mrs	r3, IPSR
 8008422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2b0f      	cmp	r3, #15
 8008428:	d914      	bls.n	8008454 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800842a:	4a17      	ldr	r2, [pc, #92]	; (8008488 <vPortValidateInterruptPriority+0x70>)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4413      	add	r3, r2
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008434:	4b15      	ldr	r3, [pc, #84]	; (800848c <vPortValidateInterruptPriority+0x74>)
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	7afa      	ldrb	r2, [r7, #11]
 800843a:	429a      	cmp	r2, r3
 800843c:	d20a      	bcs.n	8008454 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800843e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008442:	f383 8811 	msr	BASEPRI, r3
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	607b      	str	r3, [r7, #4]
}
 8008450:	bf00      	nop
 8008452:	e7fe      	b.n	8008452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008454:	4b0e      	ldr	r3, [pc, #56]	; (8008490 <vPortValidateInterruptPriority+0x78>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800845c:	4b0d      	ldr	r3, [pc, #52]	; (8008494 <vPortValidateInterruptPriority+0x7c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	429a      	cmp	r2, r3
 8008462:	d90a      	bls.n	800847a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	603b      	str	r3, [r7, #0]
}
 8008476:	bf00      	nop
 8008478:	e7fe      	b.n	8008478 <vPortValidateInterruptPriority+0x60>
	}
 800847a:	bf00      	nop
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	e000e3f0 	.word	0xe000e3f0
 800848c:	24000e40 	.word	0x24000e40
 8008490:	e000ed0c 	.word	0xe000ed0c
 8008494:	24000e44 	.word	0x24000e44

08008498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08a      	sub	sp, #40	; 0x28
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084a0:	2300      	movs	r3, #0
 80084a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084a4:	f7fe fd8c 	bl	8006fc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084a8:	4b5b      	ldr	r3, [pc, #364]	; (8008618 <pvPortMalloc+0x180>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084b0:	f000 f920 	bl	80086f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084b4:	4b59      	ldr	r3, [pc, #356]	; (800861c <pvPortMalloc+0x184>)
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4013      	ands	r3, r2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f040 8093 	bne.w	80085e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d01d      	beq.n	8008504 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80084c8:	2208      	movs	r2, #8
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4413      	add	r3, r2
 80084ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f003 0307 	and.w	r3, r3, #7
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d014      	beq.n	8008504 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f023 0307 	bic.w	r3, r3, #7
 80084e0:	3308      	adds	r3, #8
 80084e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f003 0307 	and.w	r3, r3, #7
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00a      	beq.n	8008504 <pvPortMalloc+0x6c>
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	617b      	str	r3, [r7, #20]
}
 8008500:	bf00      	nop
 8008502:	e7fe      	b.n	8008502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d06e      	beq.n	80085e8 <pvPortMalloc+0x150>
 800850a:	4b45      	ldr	r3, [pc, #276]	; (8008620 <pvPortMalloc+0x188>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	429a      	cmp	r2, r3
 8008512:	d869      	bhi.n	80085e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008514:	4b43      	ldr	r3, [pc, #268]	; (8008624 <pvPortMalloc+0x18c>)
 8008516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008518:	4b42      	ldr	r3, [pc, #264]	; (8008624 <pvPortMalloc+0x18c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800851e:	e004      	b.n	800852a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	429a      	cmp	r2, r3
 8008532:	d903      	bls.n	800853c <pvPortMalloc+0xa4>
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1f1      	bne.n	8008520 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800853c:	4b36      	ldr	r3, [pc, #216]	; (8008618 <pvPortMalloc+0x180>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008542:	429a      	cmp	r2, r3
 8008544:	d050      	beq.n	80085e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2208      	movs	r2, #8
 800854c:	4413      	add	r3, r2
 800854e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	1ad2      	subs	r2, r2, r3
 8008560:	2308      	movs	r3, #8
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	429a      	cmp	r2, r3
 8008566:	d91f      	bls.n	80085a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4413      	add	r3, r2
 800856e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	f003 0307 	and.w	r3, r3, #7
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00a      	beq.n	8008590 <pvPortMalloc+0xf8>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	613b      	str	r3, [r7, #16]
}
 800858c:	bf00      	nop
 800858e:	e7fe      	b.n	800858e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	1ad2      	subs	r2, r2, r3
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085a2:	69b8      	ldr	r0, [r7, #24]
 80085a4:	f000 f908 	bl	80087b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085a8:	4b1d      	ldr	r3, [pc, #116]	; (8008620 <pvPortMalloc+0x188>)
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	4a1b      	ldr	r2, [pc, #108]	; (8008620 <pvPortMalloc+0x188>)
 80085b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085b6:	4b1a      	ldr	r3, [pc, #104]	; (8008620 <pvPortMalloc+0x188>)
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	4b1b      	ldr	r3, [pc, #108]	; (8008628 <pvPortMalloc+0x190>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d203      	bcs.n	80085ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085c2:	4b17      	ldr	r3, [pc, #92]	; (8008620 <pvPortMalloc+0x188>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a18      	ldr	r2, [pc, #96]	; (8008628 <pvPortMalloc+0x190>)
 80085c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085cc:	685a      	ldr	r2, [r3, #4]
 80085ce:	4b13      	ldr	r3, [pc, #76]	; (800861c <pvPortMalloc+0x184>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	431a      	orrs	r2, r3
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085da:	2200      	movs	r2, #0
 80085dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80085de:	4b13      	ldr	r3, [pc, #76]	; (800862c <pvPortMalloc+0x194>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	3301      	adds	r3, #1
 80085e4:	4a11      	ldr	r2, [pc, #68]	; (800862c <pvPortMalloc+0x194>)
 80085e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085e8:	f7fe fcf8 	bl	8006fdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	f003 0307 	and.w	r3, r3, #7
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00a      	beq.n	800860c <pvPortMalloc+0x174>
	__asm volatile
 80085f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fa:	f383 8811 	msr	BASEPRI, r3
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	60fb      	str	r3, [r7, #12]
}
 8008608:	bf00      	nop
 800860a:	e7fe      	b.n	800860a <pvPortMalloc+0x172>
	return pvReturn;
 800860c:	69fb      	ldr	r3, [r7, #28]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3728      	adds	r7, #40	; 0x28
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	24004a50 	.word	0x24004a50
 800861c:	24004a64 	.word	0x24004a64
 8008620:	24004a54 	.word	0x24004a54
 8008624:	24004a48 	.word	0x24004a48
 8008628:	24004a58 	.word	0x24004a58
 800862c:	24004a5c 	.word	0x24004a5c

08008630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d04d      	beq.n	80086de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008642:	2308      	movs	r3, #8
 8008644:	425b      	negs	r3, r3
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4413      	add	r3, r2
 800864a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	4b24      	ldr	r3, [pc, #144]	; (80086e8 <vPortFree+0xb8>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4013      	ands	r3, r2
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10a      	bne.n	8008674 <vPortFree+0x44>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	60fb      	str	r3, [r7, #12]
}
 8008670:	bf00      	nop
 8008672:	e7fe      	b.n	8008672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00a      	beq.n	8008692 <vPortFree+0x62>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	60bb      	str	r3, [r7, #8]
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	4b14      	ldr	r3, [pc, #80]	; (80086e8 <vPortFree+0xb8>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4013      	ands	r3, r2
 800869c:	2b00      	cmp	r3, #0
 800869e:	d01e      	beq.n	80086de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d11a      	bne.n	80086de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	4b0e      	ldr	r3, [pc, #56]	; (80086e8 <vPortFree+0xb8>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	43db      	mvns	r3, r3
 80086b2:	401a      	ands	r2, r3
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086b8:	f7fe fc82 	bl	8006fc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	685a      	ldr	r2, [r3, #4]
 80086c0:	4b0a      	ldr	r3, [pc, #40]	; (80086ec <vPortFree+0xbc>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4413      	add	r3, r2
 80086c6:	4a09      	ldr	r2, [pc, #36]	; (80086ec <vPortFree+0xbc>)
 80086c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086ca:	6938      	ldr	r0, [r7, #16]
 80086cc:	f000 f874 	bl	80087b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80086d0:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <vPortFree+0xc0>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	3301      	adds	r3, #1
 80086d6:	4a06      	ldr	r2, [pc, #24]	; (80086f0 <vPortFree+0xc0>)
 80086d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80086da:	f7fe fc7f 	bl	8006fdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086de:	bf00      	nop
 80086e0:	3718      	adds	r7, #24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	24004a64 	.word	0x24004a64
 80086ec:	24004a54 	.word	0x24004a54
 80086f0:	24004a60 	.word	0x24004a60

080086f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80086fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008700:	4b27      	ldr	r3, [pc, #156]	; (80087a0 <prvHeapInit+0xac>)
 8008702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f003 0307 	and.w	r3, r3, #7
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00c      	beq.n	8008728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3307      	adds	r3, #7
 8008712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 0307 	bic.w	r3, r3, #7
 800871a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	4a1f      	ldr	r2, [pc, #124]	; (80087a0 <prvHeapInit+0xac>)
 8008724:	4413      	add	r3, r2
 8008726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800872c:	4a1d      	ldr	r2, [pc, #116]	; (80087a4 <prvHeapInit+0xb0>)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008732:	4b1c      	ldr	r3, [pc, #112]	; (80087a4 <prvHeapInit+0xb0>)
 8008734:	2200      	movs	r2, #0
 8008736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	4413      	add	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008740:	2208      	movs	r2, #8
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	1a9b      	subs	r3, r3, r2
 8008746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f023 0307 	bic.w	r3, r3, #7
 800874e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	4a15      	ldr	r2, [pc, #84]	; (80087a8 <prvHeapInit+0xb4>)
 8008754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008756:	4b14      	ldr	r3, [pc, #80]	; (80087a8 <prvHeapInit+0xb4>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2200      	movs	r2, #0
 800875c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800875e:	4b12      	ldr	r3, [pc, #72]	; (80087a8 <prvHeapInit+0xb4>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	1ad2      	subs	r2, r2, r3
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008774:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <prvHeapInit+0xb4>)
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	4a0a      	ldr	r2, [pc, #40]	; (80087ac <prvHeapInit+0xb8>)
 8008782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	4a09      	ldr	r2, [pc, #36]	; (80087b0 <prvHeapInit+0xbc>)
 800878a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800878c:	4b09      	ldr	r3, [pc, #36]	; (80087b4 <prvHeapInit+0xc0>)
 800878e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008792:	601a      	str	r2, [r3, #0]
}
 8008794:	bf00      	nop
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	24000e48 	.word	0x24000e48
 80087a4:	24004a48 	.word	0x24004a48
 80087a8:	24004a50 	.word	0x24004a50
 80087ac:	24004a58 	.word	0x24004a58
 80087b0:	24004a54 	.word	0x24004a54
 80087b4:	24004a64 	.word	0x24004a64

080087b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087c0:	4b28      	ldr	r3, [pc, #160]	; (8008864 <prvInsertBlockIntoFreeList+0xac>)
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	e002      	b.n	80087cc <prvInsertBlockIntoFreeList+0x14>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	60fb      	str	r3, [r7, #12]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d8f7      	bhi.n	80087c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	4413      	add	r3, r2
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d108      	bne.n	80087fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	685a      	ldr	r2, [r3, #4]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	441a      	add	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	441a      	add	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	429a      	cmp	r2, r3
 800880c:	d118      	bne.n	8008840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	4b15      	ldr	r3, [pc, #84]	; (8008868 <prvInsertBlockIntoFreeList+0xb0>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	d00d      	beq.n	8008836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	441a      	add	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	e008      	b.n	8008848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008836:	4b0c      	ldr	r3, [pc, #48]	; (8008868 <prvInsertBlockIntoFreeList+0xb0>)
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	e003      	b.n	8008848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	429a      	cmp	r2, r3
 800884e:	d002      	beq.n	8008856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008856:	bf00      	nop
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	24004a48 	.word	0x24004a48
 8008868:	24004a50 	.word	0x24004a50

0800886c <atoi>:
 800886c:	220a      	movs	r2, #10
 800886e:	2100      	movs	r1, #0
 8008870:	f000 b9d2 	b.w	8008c18 <strtol>

08008874 <__errno>:
 8008874:	4b01      	ldr	r3, [pc, #4]	; (800887c <__errno+0x8>)
 8008876:	6818      	ldr	r0, [r3, #0]
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	24000014 	.word	0x24000014

08008880 <__libc_init_array>:
 8008880:	b570      	push	{r4, r5, r6, lr}
 8008882:	4d0d      	ldr	r5, [pc, #52]	; (80088b8 <__libc_init_array+0x38>)
 8008884:	4c0d      	ldr	r4, [pc, #52]	; (80088bc <__libc_init_array+0x3c>)
 8008886:	1b64      	subs	r4, r4, r5
 8008888:	10a4      	asrs	r4, r4, #2
 800888a:	2600      	movs	r6, #0
 800888c:	42a6      	cmp	r6, r4
 800888e:	d109      	bne.n	80088a4 <__libc_init_array+0x24>
 8008890:	4d0b      	ldr	r5, [pc, #44]	; (80088c0 <__libc_init_array+0x40>)
 8008892:	4c0c      	ldr	r4, [pc, #48]	; (80088c4 <__libc_init_array+0x44>)
 8008894:	f000 fd5e 	bl	8009354 <_init>
 8008898:	1b64      	subs	r4, r4, r5
 800889a:	10a4      	asrs	r4, r4, #2
 800889c:	2600      	movs	r6, #0
 800889e:	42a6      	cmp	r6, r4
 80088a0:	d105      	bne.n	80088ae <__libc_init_array+0x2e>
 80088a2:	bd70      	pop	{r4, r5, r6, pc}
 80088a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80088a8:	4798      	blx	r3
 80088aa:	3601      	adds	r6, #1
 80088ac:	e7ee      	b.n	800888c <__libc_init_array+0xc>
 80088ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80088b2:	4798      	blx	r3
 80088b4:	3601      	adds	r6, #1
 80088b6:	e7f2      	b.n	800889e <__libc_init_array+0x1e>
 80088b8:	08009684 	.word	0x08009684
 80088bc:	08009684 	.word	0x08009684
 80088c0:	08009684 	.word	0x08009684
 80088c4:	08009688 	.word	0x08009688

080088c8 <__retarget_lock_acquire_recursive>:
 80088c8:	4770      	bx	lr

080088ca <__retarget_lock_release_recursive>:
 80088ca:	4770      	bx	lr

080088cc <memcpy>:
 80088cc:	440a      	add	r2, r1
 80088ce:	4291      	cmp	r1, r2
 80088d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80088d4:	d100      	bne.n	80088d8 <memcpy+0xc>
 80088d6:	4770      	bx	lr
 80088d8:	b510      	push	{r4, lr}
 80088da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088e2:	4291      	cmp	r1, r2
 80088e4:	d1f9      	bne.n	80088da <memcpy+0xe>
 80088e6:	bd10      	pop	{r4, pc}

080088e8 <memset>:
 80088e8:	4402      	add	r2, r0
 80088ea:	4603      	mov	r3, r0
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d100      	bne.n	80088f2 <memset+0xa>
 80088f0:	4770      	bx	lr
 80088f2:	f803 1b01 	strb.w	r1, [r3], #1
 80088f6:	e7f9      	b.n	80088ec <memset+0x4>

080088f8 <_malloc_r>:
 80088f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fa:	1ccd      	adds	r5, r1, #3
 80088fc:	f025 0503 	bic.w	r5, r5, #3
 8008900:	3508      	adds	r5, #8
 8008902:	2d0c      	cmp	r5, #12
 8008904:	bf38      	it	cc
 8008906:	250c      	movcc	r5, #12
 8008908:	2d00      	cmp	r5, #0
 800890a:	4606      	mov	r6, r0
 800890c:	db01      	blt.n	8008912 <_malloc_r+0x1a>
 800890e:	42a9      	cmp	r1, r5
 8008910:	d903      	bls.n	800891a <_malloc_r+0x22>
 8008912:	230c      	movs	r3, #12
 8008914:	6033      	str	r3, [r6, #0]
 8008916:	2000      	movs	r0, #0
 8008918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800891a:	f000 f987 	bl	8008c2c <__malloc_lock>
 800891e:	4921      	ldr	r1, [pc, #132]	; (80089a4 <_malloc_r+0xac>)
 8008920:	680a      	ldr	r2, [r1, #0]
 8008922:	4614      	mov	r4, r2
 8008924:	b99c      	cbnz	r4, 800894e <_malloc_r+0x56>
 8008926:	4f20      	ldr	r7, [pc, #128]	; (80089a8 <_malloc_r+0xb0>)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	b923      	cbnz	r3, 8008936 <_malloc_r+0x3e>
 800892c:	4621      	mov	r1, r4
 800892e:	4630      	mov	r0, r6
 8008930:	f000 f8a6 	bl	8008a80 <_sbrk_r>
 8008934:	6038      	str	r0, [r7, #0]
 8008936:	4629      	mov	r1, r5
 8008938:	4630      	mov	r0, r6
 800893a:	f000 f8a1 	bl	8008a80 <_sbrk_r>
 800893e:	1c43      	adds	r3, r0, #1
 8008940:	d123      	bne.n	800898a <_malloc_r+0x92>
 8008942:	230c      	movs	r3, #12
 8008944:	6033      	str	r3, [r6, #0]
 8008946:	4630      	mov	r0, r6
 8008948:	f000 f976 	bl	8008c38 <__malloc_unlock>
 800894c:	e7e3      	b.n	8008916 <_malloc_r+0x1e>
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	1b5b      	subs	r3, r3, r5
 8008952:	d417      	bmi.n	8008984 <_malloc_r+0x8c>
 8008954:	2b0b      	cmp	r3, #11
 8008956:	d903      	bls.n	8008960 <_malloc_r+0x68>
 8008958:	6023      	str	r3, [r4, #0]
 800895a:	441c      	add	r4, r3
 800895c:	6025      	str	r5, [r4, #0]
 800895e:	e004      	b.n	800896a <_malloc_r+0x72>
 8008960:	6863      	ldr	r3, [r4, #4]
 8008962:	42a2      	cmp	r2, r4
 8008964:	bf0c      	ite	eq
 8008966:	600b      	streq	r3, [r1, #0]
 8008968:	6053      	strne	r3, [r2, #4]
 800896a:	4630      	mov	r0, r6
 800896c:	f000 f964 	bl	8008c38 <__malloc_unlock>
 8008970:	f104 000b 	add.w	r0, r4, #11
 8008974:	1d23      	adds	r3, r4, #4
 8008976:	f020 0007 	bic.w	r0, r0, #7
 800897a:	1ac2      	subs	r2, r0, r3
 800897c:	d0cc      	beq.n	8008918 <_malloc_r+0x20>
 800897e:	1a1b      	subs	r3, r3, r0
 8008980:	50a3      	str	r3, [r4, r2]
 8008982:	e7c9      	b.n	8008918 <_malloc_r+0x20>
 8008984:	4622      	mov	r2, r4
 8008986:	6864      	ldr	r4, [r4, #4]
 8008988:	e7cc      	b.n	8008924 <_malloc_r+0x2c>
 800898a:	1cc4      	adds	r4, r0, #3
 800898c:	f024 0403 	bic.w	r4, r4, #3
 8008990:	42a0      	cmp	r0, r4
 8008992:	d0e3      	beq.n	800895c <_malloc_r+0x64>
 8008994:	1a21      	subs	r1, r4, r0
 8008996:	4630      	mov	r0, r6
 8008998:	f000 f872 	bl	8008a80 <_sbrk_r>
 800899c:	3001      	adds	r0, #1
 800899e:	d1dd      	bne.n	800895c <_malloc_r+0x64>
 80089a0:	e7cf      	b.n	8008942 <_malloc_r+0x4a>
 80089a2:	bf00      	nop
 80089a4:	24004a68 	.word	0x24004a68
 80089a8:	24004a6c 	.word	0x24004a6c

080089ac <cleanup_glue>:
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	460c      	mov	r4, r1
 80089b0:	6809      	ldr	r1, [r1, #0]
 80089b2:	4605      	mov	r5, r0
 80089b4:	b109      	cbz	r1, 80089ba <cleanup_glue+0xe>
 80089b6:	f7ff fff9 	bl	80089ac <cleanup_glue>
 80089ba:	4621      	mov	r1, r4
 80089bc:	4628      	mov	r0, r5
 80089be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089c2:	f000 b93f 	b.w	8008c44 <_free_r>
	...

080089c8 <_reclaim_reent>:
 80089c8:	4b2c      	ldr	r3, [pc, #176]	; (8008a7c <_reclaim_reent+0xb4>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4283      	cmp	r3, r0
 80089ce:	b570      	push	{r4, r5, r6, lr}
 80089d0:	4604      	mov	r4, r0
 80089d2:	d051      	beq.n	8008a78 <_reclaim_reent+0xb0>
 80089d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80089d6:	b143      	cbz	r3, 80089ea <_reclaim_reent+0x22>
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d14a      	bne.n	8008a74 <_reclaim_reent+0xac>
 80089de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089e0:	6819      	ldr	r1, [r3, #0]
 80089e2:	b111      	cbz	r1, 80089ea <_reclaim_reent+0x22>
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 f92d 	bl	8008c44 <_free_r>
 80089ea:	6961      	ldr	r1, [r4, #20]
 80089ec:	b111      	cbz	r1, 80089f4 <_reclaim_reent+0x2c>
 80089ee:	4620      	mov	r0, r4
 80089f0:	f000 f928 	bl	8008c44 <_free_r>
 80089f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80089f6:	b111      	cbz	r1, 80089fe <_reclaim_reent+0x36>
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 f923 	bl	8008c44 <_free_r>
 80089fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008a00:	b111      	cbz	r1, 8008a08 <_reclaim_reent+0x40>
 8008a02:	4620      	mov	r0, r4
 8008a04:	f000 f91e 	bl	8008c44 <_free_r>
 8008a08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008a0a:	b111      	cbz	r1, 8008a12 <_reclaim_reent+0x4a>
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f000 f919 	bl	8008c44 <_free_r>
 8008a12:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008a14:	b111      	cbz	r1, 8008a1c <_reclaim_reent+0x54>
 8008a16:	4620      	mov	r0, r4
 8008a18:	f000 f914 	bl	8008c44 <_free_r>
 8008a1c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008a1e:	b111      	cbz	r1, 8008a26 <_reclaim_reent+0x5e>
 8008a20:	4620      	mov	r0, r4
 8008a22:	f000 f90f 	bl	8008c44 <_free_r>
 8008a26:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008a28:	b111      	cbz	r1, 8008a30 <_reclaim_reent+0x68>
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f000 f90a 	bl	8008c44 <_free_r>
 8008a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a32:	b111      	cbz	r1, 8008a3a <_reclaim_reent+0x72>
 8008a34:	4620      	mov	r0, r4
 8008a36:	f000 f905 	bl	8008c44 <_free_r>
 8008a3a:	69a3      	ldr	r3, [r4, #24]
 8008a3c:	b1e3      	cbz	r3, 8008a78 <_reclaim_reent+0xb0>
 8008a3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a40:	4620      	mov	r0, r4
 8008a42:	4798      	blx	r3
 8008a44:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008a46:	b1b9      	cbz	r1, 8008a78 <_reclaim_reent+0xb0>
 8008a48:	4620      	mov	r0, r4
 8008a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a4e:	f7ff bfad 	b.w	80089ac <cleanup_glue>
 8008a52:	5949      	ldr	r1, [r1, r5]
 8008a54:	b941      	cbnz	r1, 8008a68 <_reclaim_reent+0xa0>
 8008a56:	3504      	adds	r5, #4
 8008a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a5a:	2d80      	cmp	r5, #128	; 0x80
 8008a5c:	68d9      	ldr	r1, [r3, #12]
 8008a5e:	d1f8      	bne.n	8008a52 <_reclaim_reent+0x8a>
 8008a60:	4620      	mov	r0, r4
 8008a62:	f000 f8ef 	bl	8008c44 <_free_r>
 8008a66:	e7ba      	b.n	80089de <_reclaim_reent+0x16>
 8008a68:	680e      	ldr	r6, [r1, #0]
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f000 f8ea 	bl	8008c44 <_free_r>
 8008a70:	4631      	mov	r1, r6
 8008a72:	e7ef      	b.n	8008a54 <_reclaim_reent+0x8c>
 8008a74:	2500      	movs	r5, #0
 8008a76:	e7ef      	b.n	8008a58 <_reclaim_reent+0x90>
 8008a78:	bd70      	pop	{r4, r5, r6, pc}
 8008a7a:	bf00      	nop
 8008a7c:	24000014 	.word	0x24000014

08008a80 <_sbrk_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	4d06      	ldr	r5, [pc, #24]	; (8008a9c <_sbrk_r+0x1c>)
 8008a84:	2300      	movs	r3, #0
 8008a86:	4604      	mov	r4, r0
 8008a88:	4608      	mov	r0, r1
 8008a8a:	602b      	str	r3, [r5, #0]
 8008a8c:	f7f8 f98c 	bl	8000da8 <_sbrk>
 8008a90:	1c43      	adds	r3, r0, #1
 8008a92:	d102      	bne.n	8008a9a <_sbrk_r+0x1a>
 8008a94:	682b      	ldr	r3, [r5, #0]
 8008a96:	b103      	cbz	r3, 8008a9a <_sbrk_r+0x1a>
 8008a98:	6023      	str	r3, [r4, #0]
 8008a9a:	bd38      	pop	{r3, r4, r5, pc}
 8008a9c:	24004c28 	.word	0x24004c28

08008aa0 <siprintf>:
 8008aa0:	b40e      	push	{r1, r2, r3}
 8008aa2:	b500      	push	{lr}
 8008aa4:	b09c      	sub	sp, #112	; 0x70
 8008aa6:	ab1d      	add	r3, sp, #116	; 0x74
 8008aa8:	9002      	str	r0, [sp, #8]
 8008aaa:	9006      	str	r0, [sp, #24]
 8008aac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ab0:	4809      	ldr	r0, [pc, #36]	; (8008ad8 <siprintf+0x38>)
 8008ab2:	9107      	str	r1, [sp, #28]
 8008ab4:	9104      	str	r1, [sp, #16]
 8008ab6:	4909      	ldr	r1, [pc, #36]	; (8008adc <siprintf+0x3c>)
 8008ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008abc:	9105      	str	r1, [sp, #20]
 8008abe:	6800      	ldr	r0, [r0, #0]
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	a902      	add	r1, sp, #8
 8008ac4:	f000 f96a 	bl	8008d9c <_svfiprintf_r>
 8008ac8:	9b02      	ldr	r3, [sp, #8]
 8008aca:	2200      	movs	r2, #0
 8008acc:	701a      	strb	r2, [r3, #0]
 8008ace:	b01c      	add	sp, #112	; 0x70
 8008ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ad4:	b003      	add	sp, #12
 8008ad6:	4770      	bx	lr
 8008ad8:	24000014 	.word	0x24000014
 8008adc:	ffff0208 	.word	0xffff0208

08008ae0 <strstr>:
 8008ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ae2:	780c      	ldrb	r4, [r1, #0]
 8008ae4:	b164      	cbz	r4, 8008b00 <strstr+0x20>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	781a      	ldrb	r2, [r3, #0]
 8008aea:	4618      	mov	r0, r3
 8008aec:	1c5e      	adds	r6, r3, #1
 8008aee:	b90a      	cbnz	r2, 8008af4 <strstr+0x14>
 8008af0:	4610      	mov	r0, r2
 8008af2:	e005      	b.n	8008b00 <strstr+0x20>
 8008af4:	4294      	cmp	r4, r2
 8008af6:	d108      	bne.n	8008b0a <strstr+0x2a>
 8008af8:	460d      	mov	r5, r1
 8008afa:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8008afe:	b902      	cbnz	r2, 8008b02 <strstr+0x22>
 8008b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b02:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008b06:	4297      	cmp	r7, r2
 8008b08:	d0f7      	beq.n	8008afa <strstr+0x1a>
 8008b0a:	4633      	mov	r3, r6
 8008b0c:	e7ec      	b.n	8008ae8 <strstr+0x8>
	...

08008b10 <_strtol_l.isra.0>:
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b16:	d001      	beq.n	8008b1c <_strtol_l.isra.0+0xc>
 8008b18:	2b24      	cmp	r3, #36	; 0x24
 8008b1a:	d906      	bls.n	8008b2a <_strtol_l.isra.0+0x1a>
 8008b1c:	f7ff feaa 	bl	8008874 <__errno>
 8008b20:	2316      	movs	r3, #22
 8008b22:	6003      	str	r3, [r0, #0]
 8008b24:	2000      	movs	r0, #0
 8008b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b2a:	4f3a      	ldr	r7, [pc, #232]	; (8008c14 <_strtol_l.isra.0+0x104>)
 8008b2c:	468e      	mov	lr, r1
 8008b2e:	4676      	mov	r6, lr
 8008b30:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008b34:	5de5      	ldrb	r5, [r4, r7]
 8008b36:	f015 0508 	ands.w	r5, r5, #8
 8008b3a:	d1f8      	bne.n	8008b2e <_strtol_l.isra.0+0x1e>
 8008b3c:	2c2d      	cmp	r4, #45	; 0x2d
 8008b3e:	d134      	bne.n	8008baa <_strtol_l.isra.0+0x9a>
 8008b40:	f89e 4000 	ldrb.w	r4, [lr]
 8008b44:	f04f 0801 	mov.w	r8, #1
 8008b48:	f106 0e02 	add.w	lr, r6, #2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d05c      	beq.n	8008c0a <_strtol_l.isra.0+0xfa>
 8008b50:	2b10      	cmp	r3, #16
 8008b52:	d10c      	bne.n	8008b6e <_strtol_l.isra.0+0x5e>
 8008b54:	2c30      	cmp	r4, #48	; 0x30
 8008b56:	d10a      	bne.n	8008b6e <_strtol_l.isra.0+0x5e>
 8008b58:	f89e 4000 	ldrb.w	r4, [lr]
 8008b5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008b60:	2c58      	cmp	r4, #88	; 0x58
 8008b62:	d14d      	bne.n	8008c00 <_strtol_l.isra.0+0xf0>
 8008b64:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008b68:	2310      	movs	r3, #16
 8008b6a:	f10e 0e02 	add.w	lr, lr, #2
 8008b6e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008b72:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008b76:	2600      	movs	r6, #0
 8008b78:	fbbc f9f3 	udiv	r9, ip, r3
 8008b7c:	4635      	mov	r5, r6
 8008b7e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008b82:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008b86:	2f09      	cmp	r7, #9
 8008b88:	d818      	bhi.n	8008bbc <_strtol_l.isra.0+0xac>
 8008b8a:	463c      	mov	r4, r7
 8008b8c:	42a3      	cmp	r3, r4
 8008b8e:	dd24      	ble.n	8008bda <_strtol_l.isra.0+0xca>
 8008b90:	2e00      	cmp	r6, #0
 8008b92:	db1f      	blt.n	8008bd4 <_strtol_l.isra.0+0xc4>
 8008b94:	45a9      	cmp	r9, r5
 8008b96:	d31d      	bcc.n	8008bd4 <_strtol_l.isra.0+0xc4>
 8008b98:	d101      	bne.n	8008b9e <_strtol_l.isra.0+0x8e>
 8008b9a:	45a2      	cmp	sl, r4
 8008b9c:	db1a      	blt.n	8008bd4 <_strtol_l.isra.0+0xc4>
 8008b9e:	fb05 4503 	mla	r5, r5, r3, r4
 8008ba2:	2601      	movs	r6, #1
 8008ba4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008ba8:	e7eb      	b.n	8008b82 <_strtol_l.isra.0+0x72>
 8008baa:	2c2b      	cmp	r4, #43	; 0x2b
 8008bac:	bf08      	it	eq
 8008bae:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008bb2:	46a8      	mov	r8, r5
 8008bb4:	bf08      	it	eq
 8008bb6:	f106 0e02 	addeq.w	lr, r6, #2
 8008bba:	e7c7      	b.n	8008b4c <_strtol_l.isra.0+0x3c>
 8008bbc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008bc0:	2f19      	cmp	r7, #25
 8008bc2:	d801      	bhi.n	8008bc8 <_strtol_l.isra.0+0xb8>
 8008bc4:	3c37      	subs	r4, #55	; 0x37
 8008bc6:	e7e1      	b.n	8008b8c <_strtol_l.isra.0+0x7c>
 8008bc8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008bcc:	2f19      	cmp	r7, #25
 8008bce:	d804      	bhi.n	8008bda <_strtol_l.isra.0+0xca>
 8008bd0:	3c57      	subs	r4, #87	; 0x57
 8008bd2:	e7db      	b.n	8008b8c <_strtol_l.isra.0+0x7c>
 8008bd4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008bd8:	e7e4      	b.n	8008ba4 <_strtol_l.isra.0+0x94>
 8008bda:	2e00      	cmp	r6, #0
 8008bdc:	da05      	bge.n	8008bea <_strtol_l.isra.0+0xda>
 8008bde:	2322      	movs	r3, #34	; 0x22
 8008be0:	6003      	str	r3, [r0, #0]
 8008be2:	4665      	mov	r5, ip
 8008be4:	b942      	cbnz	r2, 8008bf8 <_strtol_l.isra.0+0xe8>
 8008be6:	4628      	mov	r0, r5
 8008be8:	e79d      	b.n	8008b26 <_strtol_l.isra.0+0x16>
 8008bea:	f1b8 0f00 	cmp.w	r8, #0
 8008bee:	d000      	beq.n	8008bf2 <_strtol_l.isra.0+0xe2>
 8008bf0:	426d      	negs	r5, r5
 8008bf2:	2a00      	cmp	r2, #0
 8008bf4:	d0f7      	beq.n	8008be6 <_strtol_l.isra.0+0xd6>
 8008bf6:	b10e      	cbz	r6, 8008bfc <_strtol_l.isra.0+0xec>
 8008bf8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8008bfc:	6011      	str	r1, [r2, #0]
 8008bfe:	e7f2      	b.n	8008be6 <_strtol_l.isra.0+0xd6>
 8008c00:	2430      	movs	r4, #48	; 0x30
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1b3      	bne.n	8008b6e <_strtol_l.isra.0+0x5e>
 8008c06:	2308      	movs	r3, #8
 8008c08:	e7b1      	b.n	8008b6e <_strtol_l.isra.0+0x5e>
 8008c0a:	2c30      	cmp	r4, #48	; 0x30
 8008c0c:	d0a4      	beq.n	8008b58 <_strtol_l.isra.0+0x48>
 8008c0e:	230a      	movs	r3, #10
 8008c10:	e7ad      	b.n	8008b6e <_strtol_l.isra.0+0x5e>
 8008c12:	bf00      	nop
 8008c14:	08009549 	.word	0x08009549

08008c18 <strtol>:
 8008c18:	4613      	mov	r3, r2
 8008c1a:	460a      	mov	r2, r1
 8008c1c:	4601      	mov	r1, r0
 8008c1e:	4802      	ldr	r0, [pc, #8]	; (8008c28 <strtol+0x10>)
 8008c20:	6800      	ldr	r0, [r0, #0]
 8008c22:	f7ff bf75 	b.w	8008b10 <_strtol_l.isra.0>
 8008c26:	bf00      	nop
 8008c28:	24000014 	.word	0x24000014

08008c2c <__malloc_lock>:
 8008c2c:	4801      	ldr	r0, [pc, #4]	; (8008c34 <__malloc_lock+0x8>)
 8008c2e:	f7ff be4b 	b.w	80088c8 <__retarget_lock_acquire_recursive>
 8008c32:	bf00      	nop
 8008c34:	24004c20 	.word	0x24004c20

08008c38 <__malloc_unlock>:
 8008c38:	4801      	ldr	r0, [pc, #4]	; (8008c40 <__malloc_unlock+0x8>)
 8008c3a:	f7ff be46 	b.w	80088ca <__retarget_lock_release_recursive>
 8008c3e:	bf00      	nop
 8008c40:	24004c20 	.word	0x24004c20

08008c44 <_free_r>:
 8008c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c46:	2900      	cmp	r1, #0
 8008c48:	d048      	beq.n	8008cdc <_free_r+0x98>
 8008c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c4e:	9001      	str	r0, [sp, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f1a1 0404 	sub.w	r4, r1, #4
 8008c56:	bfb8      	it	lt
 8008c58:	18e4      	addlt	r4, r4, r3
 8008c5a:	f7ff ffe7 	bl	8008c2c <__malloc_lock>
 8008c5e:	4a20      	ldr	r2, [pc, #128]	; (8008ce0 <_free_r+0x9c>)
 8008c60:	9801      	ldr	r0, [sp, #4]
 8008c62:	6813      	ldr	r3, [r2, #0]
 8008c64:	4615      	mov	r5, r2
 8008c66:	b933      	cbnz	r3, 8008c76 <_free_r+0x32>
 8008c68:	6063      	str	r3, [r4, #4]
 8008c6a:	6014      	str	r4, [r2, #0]
 8008c6c:	b003      	add	sp, #12
 8008c6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c72:	f7ff bfe1 	b.w	8008c38 <__malloc_unlock>
 8008c76:	42a3      	cmp	r3, r4
 8008c78:	d90b      	bls.n	8008c92 <_free_r+0x4e>
 8008c7a:	6821      	ldr	r1, [r4, #0]
 8008c7c:	1862      	adds	r2, r4, r1
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	bf04      	itt	eq
 8008c82:	681a      	ldreq	r2, [r3, #0]
 8008c84:	685b      	ldreq	r3, [r3, #4]
 8008c86:	6063      	str	r3, [r4, #4]
 8008c88:	bf04      	itt	eq
 8008c8a:	1852      	addeq	r2, r2, r1
 8008c8c:	6022      	streq	r2, [r4, #0]
 8008c8e:	602c      	str	r4, [r5, #0]
 8008c90:	e7ec      	b.n	8008c6c <_free_r+0x28>
 8008c92:	461a      	mov	r2, r3
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	b10b      	cbz	r3, 8008c9c <_free_r+0x58>
 8008c98:	42a3      	cmp	r3, r4
 8008c9a:	d9fa      	bls.n	8008c92 <_free_r+0x4e>
 8008c9c:	6811      	ldr	r1, [r2, #0]
 8008c9e:	1855      	adds	r5, r2, r1
 8008ca0:	42a5      	cmp	r5, r4
 8008ca2:	d10b      	bne.n	8008cbc <_free_r+0x78>
 8008ca4:	6824      	ldr	r4, [r4, #0]
 8008ca6:	4421      	add	r1, r4
 8008ca8:	1854      	adds	r4, r2, r1
 8008caa:	42a3      	cmp	r3, r4
 8008cac:	6011      	str	r1, [r2, #0]
 8008cae:	d1dd      	bne.n	8008c6c <_free_r+0x28>
 8008cb0:	681c      	ldr	r4, [r3, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	6053      	str	r3, [r2, #4]
 8008cb6:	4421      	add	r1, r4
 8008cb8:	6011      	str	r1, [r2, #0]
 8008cba:	e7d7      	b.n	8008c6c <_free_r+0x28>
 8008cbc:	d902      	bls.n	8008cc4 <_free_r+0x80>
 8008cbe:	230c      	movs	r3, #12
 8008cc0:	6003      	str	r3, [r0, #0]
 8008cc2:	e7d3      	b.n	8008c6c <_free_r+0x28>
 8008cc4:	6825      	ldr	r5, [r4, #0]
 8008cc6:	1961      	adds	r1, r4, r5
 8008cc8:	428b      	cmp	r3, r1
 8008cca:	bf04      	itt	eq
 8008ccc:	6819      	ldreq	r1, [r3, #0]
 8008cce:	685b      	ldreq	r3, [r3, #4]
 8008cd0:	6063      	str	r3, [r4, #4]
 8008cd2:	bf04      	itt	eq
 8008cd4:	1949      	addeq	r1, r1, r5
 8008cd6:	6021      	streq	r1, [r4, #0]
 8008cd8:	6054      	str	r4, [r2, #4]
 8008cda:	e7c7      	b.n	8008c6c <_free_r+0x28>
 8008cdc:	b003      	add	sp, #12
 8008cde:	bd30      	pop	{r4, r5, pc}
 8008ce0:	24004a68 	.word	0x24004a68

08008ce4 <__ssputs_r>:
 8008ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce8:	688e      	ldr	r6, [r1, #8]
 8008cea:	429e      	cmp	r6, r3
 8008cec:	4682      	mov	sl, r0
 8008cee:	460c      	mov	r4, r1
 8008cf0:	4690      	mov	r8, r2
 8008cf2:	461f      	mov	r7, r3
 8008cf4:	d838      	bhi.n	8008d68 <__ssputs_r+0x84>
 8008cf6:	898a      	ldrh	r2, [r1, #12]
 8008cf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008cfc:	d032      	beq.n	8008d64 <__ssputs_r+0x80>
 8008cfe:	6825      	ldr	r5, [r4, #0]
 8008d00:	6909      	ldr	r1, [r1, #16]
 8008d02:	eba5 0901 	sub.w	r9, r5, r1
 8008d06:	6965      	ldr	r5, [r4, #20]
 8008d08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d10:	3301      	adds	r3, #1
 8008d12:	444b      	add	r3, r9
 8008d14:	106d      	asrs	r5, r5, #1
 8008d16:	429d      	cmp	r5, r3
 8008d18:	bf38      	it	cc
 8008d1a:	461d      	movcc	r5, r3
 8008d1c:	0553      	lsls	r3, r2, #21
 8008d1e:	d531      	bpl.n	8008d84 <__ssputs_r+0xa0>
 8008d20:	4629      	mov	r1, r5
 8008d22:	f7ff fde9 	bl	80088f8 <_malloc_r>
 8008d26:	4606      	mov	r6, r0
 8008d28:	b950      	cbnz	r0, 8008d40 <__ssputs_r+0x5c>
 8008d2a:	230c      	movs	r3, #12
 8008d2c:	f8ca 3000 	str.w	r3, [sl]
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d36:	81a3      	strh	r3, [r4, #12]
 8008d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d40:	6921      	ldr	r1, [r4, #16]
 8008d42:	464a      	mov	r2, r9
 8008d44:	f7ff fdc2 	bl	80088cc <memcpy>
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d52:	81a3      	strh	r3, [r4, #12]
 8008d54:	6126      	str	r6, [r4, #16]
 8008d56:	6165      	str	r5, [r4, #20]
 8008d58:	444e      	add	r6, r9
 8008d5a:	eba5 0509 	sub.w	r5, r5, r9
 8008d5e:	6026      	str	r6, [r4, #0]
 8008d60:	60a5      	str	r5, [r4, #8]
 8008d62:	463e      	mov	r6, r7
 8008d64:	42be      	cmp	r6, r7
 8008d66:	d900      	bls.n	8008d6a <__ssputs_r+0x86>
 8008d68:	463e      	mov	r6, r7
 8008d6a:	4632      	mov	r2, r6
 8008d6c:	6820      	ldr	r0, [r4, #0]
 8008d6e:	4641      	mov	r1, r8
 8008d70:	f000 faa8 	bl	80092c4 <memmove>
 8008d74:	68a3      	ldr	r3, [r4, #8]
 8008d76:	6822      	ldr	r2, [r4, #0]
 8008d78:	1b9b      	subs	r3, r3, r6
 8008d7a:	4432      	add	r2, r6
 8008d7c:	60a3      	str	r3, [r4, #8]
 8008d7e:	6022      	str	r2, [r4, #0]
 8008d80:	2000      	movs	r0, #0
 8008d82:	e7db      	b.n	8008d3c <__ssputs_r+0x58>
 8008d84:	462a      	mov	r2, r5
 8008d86:	f000 fab7 	bl	80092f8 <_realloc_r>
 8008d8a:	4606      	mov	r6, r0
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d1e1      	bne.n	8008d54 <__ssputs_r+0x70>
 8008d90:	6921      	ldr	r1, [r4, #16]
 8008d92:	4650      	mov	r0, sl
 8008d94:	f7ff ff56 	bl	8008c44 <_free_r>
 8008d98:	e7c7      	b.n	8008d2a <__ssputs_r+0x46>
	...

08008d9c <_svfiprintf_r>:
 8008d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da0:	4698      	mov	r8, r3
 8008da2:	898b      	ldrh	r3, [r1, #12]
 8008da4:	061b      	lsls	r3, r3, #24
 8008da6:	b09d      	sub	sp, #116	; 0x74
 8008da8:	4607      	mov	r7, r0
 8008daa:	460d      	mov	r5, r1
 8008dac:	4614      	mov	r4, r2
 8008dae:	d50e      	bpl.n	8008dce <_svfiprintf_r+0x32>
 8008db0:	690b      	ldr	r3, [r1, #16]
 8008db2:	b963      	cbnz	r3, 8008dce <_svfiprintf_r+0x32>
 8008db4:	2140      	movs	r1, #64	; 0x40
 8008db6:	f7ff fd9f 	bl	80088f8 <_malloc_r>
 8008dba:	6028      	str	r0, [r5, #0]
 8008dbc:	6128      	str	r0, [r5, #16]
 8008dbe:	b920      	cbnz	r0, 8008dca <_svfiprintf_r+0x2e>
 8008dc0:	230c      	movs	r3, #12
 8008dc2:	603b      	str	r3, [r7, #0]
 8008dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dc8:	e0d1      	b.n	8008f6e <_svfiprintf_r+0x1d2>
 8008dca:	2340      	movs	r3, #64	; 0x40
 8008dcc:	616b      	str	r3, [r5, #20]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd2:	2320      	movs	r3, #32
 8008dd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ddc:	2330      	movs	r3, #48	; 0x30
 8008dde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008f88 <_svfiprintf_r+0x1ec>
 8008de2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008de6:	f04f 0901 	mov.w	r9, #1
 8008dea:	4623      	mov	r3, r4
 8008dec:	469a      	mov	sl, r3
 8008dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008df2:	b10a      	cbz	r2, 8008df8 <_svfiprintf_r+0x5c>
 8008df4:	2a25      	cmp	r2, #37	; 0x25
 8008df6:	d1f9      	bne.n	8008dec <_svfiprintf_r+0x50>
 8008df8:	ebba 0b04 	subs.w	fp, sl, r4
 8008dfc:	d00b      	beq.n	8008e16 <_svfiprintf_r+0x7a>
 8008dfe:	465b      	mov	r3, fp
 8008e00:	4622      	mov	r2, r4
 8008e02:	4629      	mov	r1, r5
 8008e04:	4638      	mov	r0, r7
 8008e06:	f7ff ff6d 	bl	8008ce4 <__ssputs_r>
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	f000 80aa 	beq.w	8008f64 <_svfiprintf_r+0x1c8>
 8008e10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e12:	445a      	add	r2, fp
 8008e14:	9209      	str	r2, [sp, #36]	; 0x24
 8008e16:	f89a 3000 	ldrb.w	r3, [sl]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 80a2 	beq.w	8008f64 <_svfiprintf_r+0x1c8>
 8008e20:	2300      	movs	r3, #0
 8008e22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e2a:	f10a 0a01 	add.w	sl, sl, #1
 8008e2e:	9304      	str	r3, [sp, #16]
 8008e30:	9307      	str	r3, [sp, #28]
 8008e32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e36:	931a      	str	r3, [sp, #104]	; 0x68
 8008e38:	4654      	mov	r4, sl
 8008e3a:	2205      	movs	r2, #5
 8008e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e40:	4851      	ldr	r0, [pc, #324]	; (8008f88 <_svfiprintf_r+0x1ec>)
 8008e42:	f7f7 fa55 	bl	80002f0 <memchr>
 8008e46:	9a04      	ldr	r2, [sp, #16]
 8008e48:	b9d8      	cbnz	r0, 8008e82 <_svfiprintf_r+0xe6>
 8008e4a:	06d0      	lsls	r0, r2, #27
 8008e4c:	bf44      	itt	mi
 8008e4e:	2320      	movmi	r3, #32
 8008e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e54:	0711      	lsls	r1, r2, #28
 8008e56:	bf44      	itt	mi
 8008e58:	232b      	movmi	r3, #43	; 0x2b
 8008e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e62:	2b2a      	cmp	r3, #42	; 0x2a
 8008e64:	d015      	beq.n	8008e92 <_svfiprintf_r+0xf6>
 8008e66:	9a07      	ldr	r2, [sp, #28]
 8008e68:	4654      	mov	r4, sl
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	f04f 0c0a 	mov.w	ip, #10
 8008e70:	4621      	mov	r1, r4
 8008e72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e76:	3b30      	subs	r3, #48	; 0x30
 8008e78:	2b09      	cmp	r3, #9
 8008e7a:	d94e      	bls.n	8008f1a <_svfiprintf_r+0x17e>
 8008e7c:	b1b0      	cbz	r0, 8008eac <_svfiprintf_r+0x110>
 8008e7e:	9207      	str	r2, [sp, #28]
 8008e80:	e014      	b.n	8008eac <_svfiprintf_r+0x110>
 8008e82:	eba0 0308 	sub.w	r3, r0, r8
 8008e86:	fa09 f303 	lsl.w	r3, r9, r3
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	9304      	str	r3, [sp, #16]
 8008e8e:	46a2      	mov	sl, r4
 8008e90:	e7d2      	b.n	8008e38 <_svfiprintf_r+0x9c>
 8008e92:	9b03      	ldr	r3, [sp, #12]
 8008e94:	1d19      	adds	r1, r3, #4
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	9103      	str	r1, [sp, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	bfbb      	ittet	lt
 8008e9e:	425b      	neglt	r3, r3
 8008ea0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ea4:	9307      	strge	r3, [sp, #28]
 8008ea6:	9307      	strlt	r3, [sp, #28]
 8008ea8:	bfb8      	it	lt
 8008eaa:	9204      	strlt	r2, [sp, #16]
 8008eac:	7823      	ldrb	r3, [r4, #0]
 8008eae:	2b2e      	cmp	r3, #46	; 0x2e
 8008eb0:	d10c      	bne.n	8008ecc <_svfiprintf_r+0x130>
 8008eb2:	7863      	ldrb	r3, [r4, #1]
 8008eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8008eb6:	d135      	bne.n	8008f24 <_svfiprintf_r+0x188>
 8008eb8:	9b03      	ldr	r3, [sp, #12]
 8008eba:	1d1a      	adds	r2, r3, #4
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	9203      	str	r2, [sp, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	bfb8      	it	lt
 8008ec4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ec8:	3402      	adds	r4, #2
 8008eca:	9305      	str	r3, [sp, #20]
 8008ecc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f98 <_svfiprintf_r+0x1fc>
 8008ed0:	7821      	ldrb	r1, [r4, #0]
 8008ed2:	2203      	movs	r2, #3
 8008ed4:	4650      	mov	r0, sl
 8008ed6:	f7f7 fa0b 	bl	80002f0 <memchr>
 8008eda:	b140      	cbz	r0, 8008eee <_svfiprintf_r+0x152>
 8008edc:	2340      	movs	r3, #64	; 0x40
 8008ede:	eba0 000a 	sub.w	r0, r0, sl
 8008ee2:	fa03 f000 	lsl.w	r0, r3, r0
 8008ee6:	9b04      	ldr	r3, [sp, #16]
 8008ee8:	4303      	orrs	r3, r0
 8008eea:	3401      	adds	r4, #1
 8008eec:	9304      	str	r3, [sp, #16]
 8008eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef2:	4826      	ldr	r0, [pc, #152]	; (8008f8c <_svfiprintf_r+0x1f0>)
 8008ef4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ef8:	2206      	movs	r2, #6
 8008efa:	f7f7 f9f9 	bl	80002f0 <memchr>
 8008efe:	2800      	cmp	r0, #0
 8008f00:	d038      	beq.n	8008f74 <_svfiprintf_r+0x1d8>
 8008f02:	4b23      	ldr	r3, [pc, #140]	; (8008f90 <_svfiprintf_r+0x1f4>)
 8008f04:	bb1b      	cbnz	r3, 8008f4e <_svfiprintf_r+0x1b2>
 8008f06:	9b03      	ldr	r3, [sp, #12]
 8008f08:	3307      	adds	r3, #7
 8008f0a:	f023 0307 	bic.w	r3, r3, #7
 8008f0e:	3308      	adds	r3, #8
 8008f10:	9303      	str	r3, [sp, #12]
 8008f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f14:	4433      	add	r3, r6
 8008f16:	9309      	str	r3, [sp, #36]	; 0x24
 8008f18:	e767      	b.n	8008dea <_svfiprintf_r+0x4e>
 8008f1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f1e:	460c      	mov	r4, r1
 8008f20:	2001      	movs	r0, #1
 8008f22:	e7a5      	b.n	8008e70 <_svfiprintf_r+0xd4>
 8008f24:	2300      	movs	r3, #0
 8008f26:	3401      	adds	r4, #1
 8008f28:	9305      	str	r3, [sp, #20]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	f04f 0c0a 	mov.w	ip, #10
 8008f30:	4620      	mov	r0, r4
 8008f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f36:	3a30      	subs	r2, #48	; 0x30
 8008f38:	2a09      	cmp	r2, #9
 8008f3a:	d903      	bls.n	8008f44 <_svfiprintf_r+0x1a8>
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d0c5      	beq.n	8008ecc <_svfiprintf_r+0x130>
 8008f40:	9105      	str	r1, [sp, #20]
 8008f42:	e7c3      	b.n	8008ecc <_svfiprintf_r+0x130>
 8008f44:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f48:	4604      	mov	r4, r0
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e7f0      	b.n	8008f30 <_svfiprintf_r+0x194>
 8008f4e:	ab03      	add	r3, sp, #12
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	462a      	mov	r2, r5
 8008f54:	4b0f      	ldr	r3, [pc, #60]	; (8008f94 <_svfiprintf_r+0x1f8>)
 8008f56:	a904      	add	r1, sp, #16
 8008f58:	4638      	mov	r0, r7
 8008f5a:	f3af 8000 	nop.w
 8008f5e:	1c42      	adds	r2, r0, #1
 8008f60:	4606      	mov	r6, r0
 8008f62:	d1d6      	bne.n	8008f12 <_svfiprintf_r+0x176>
 8008f64:	89ab      	ldrh	r3, [r5, #12]
 8008f66:	065b      	lsls	r3, r3, #25
 8008f68:	f53f af2c 	bmi.w	8008dc4 <_svfiprintf_r+0x28>
 8008f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f6e:	b01d      	add	sp, #116	; 0x74
 8008f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f74:	ab03      	add	r3, sp, #12
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	462a      	mov	r2, r5
 8008f7a:	4b06      	ldr	r3, [pc, #24]	; (8008f94 <_svfiprintf_r+0x1f8>)
 8008f7c:	a904      	add	r1, sp, #16
 8008f7e:	4638      	mov	r0, r7
 8008f80:	f000 f87a 	bl	8009078 <_printf_i>
 8008f84:	e7eb      	b.n	8008f5e <_svfiprintf_r+0x1c2>
 8008f86:	bf00      	nop
 8008f88:	08009649 	.word	0x08009649
 8008f8c:	08009653 	.word	0x08009653
 8008f90:	00000000 	.word	0x00000000
 8008f94:	08008ce5 	.word	0x08008ce5
 8008f98:	0800964f 	.word	0x0800964f

08008f9c <_printf_common>:
 8008f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa0:	4616      	mov	r6, r2
 8008fa2:	4699      	mov	r9, r3
 8008fa4:	688a      	ldr	r2, [r1, #8]
 8008fa6:	690b      	ldr	r3, [r1, #16]
 8008fa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fac:	4293      	cmp	r3, r2
 8008fae:	bfb8      	it	lt
 8008fb0:	4613      	movlt	r3, r2
 8008fb2:	6033      	str	r3, [r6, #0]
 8008fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fb8:	4607      	mov	r7, r0
 8008fba:	460c      	mov	r4, r1
 8008fbc:	b10a      	cbz	r2, 8008fc2 <_printf_common+0x26>
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	6033      	str	r3, [r6, #0]
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	0699      	lsls	r1, r3, #26
 8008fc6:	bf42      	ittt	mi
 8008fc8:	6833      	ldrmi	r3, [r6, #0]
 8008fca:	3302      	addmi	r3, #2
 8008fcc:	6033      	strmi	r3, [r6, #0]
 8008fce:	6825      	ldr	r5, [r4, #0]
 8008fd0:	f015 0506 	ands.w	r5, r5, #6
 8008fd4:	d106      	bne.n	8008fe4 <_printf_common+0x48>
 8008fd6:	f104 0a19 	add.w	sl, r4, #25
 8008fda:	68e3      	ldr	r3, [r4, #12]
 8008fdc:	6832      	ldr	r2, [r6, #0]
 8008fde:	1a9b      	subs	r3, r3, r2
 8008fe0:	42ab      	cmp	r3, r5
 8008fe2:	dc26      	bgt.n	8009032 <_printf_common+0x96>
 8008fe4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fe8:	1e13      	subs	r3, r2, #0
 8008fea:	6822      	ldr	r2, [r4, #0]
 8008fec:	bf18      	it	ne
 8008fee:	2301      	movne	r3, #1
 8008ff0:	0692      	lsls	r2, r2, #26
 8008ff2:	d42b      	bmi.n	800904c <_printf_common+0xb0>
 8008ff4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ff8:	4649      	mov	r1, r9
 8008ffa:	4638      	mov	r0, r7
 8008ffc:	47c0      	blx	r8
 8008ffe:	3001      	adds	r0, #1
 8009000:	d01e      	beq.n	8009040 <_printf_common+0xa4>
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	68e5      	ldr	r5, [r4, #12]
 8009006:	6832      	ldr	r2, [r6, #0]
 8009008:	f003 0306 	and.w	r3, r3, #6
 800900c:	2b04      	cmp	r3, #4
 800900e:	bf08      	it	eq
 8009010:	1aad      	subeq	r5, r5, r2
 8009012:	68a3      	ldr	r3, [r4, #8]
 8009014:	6922      	ldr	r2, [r4, #16]
 8009016:	bf0c      	ite	eq
 8009018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800901c:	2500      	movne	r5, #0
 800901e:	4293      	cmp	r3, r2
 8009020:	bfc4      	itt	gt
 8009022:	1a9b      	subgt	r3, r3, r2
 8009024:	18ed      	addgt	r5, r5, r3
 8009026:	2600      	movs	r6, #0
 8009028:	341a      	adds	r4, #26
 800902a:	42b5      	cmp	r5, r6
 800902c:	d11a      	bne.n	8009064 <_printf_common+0xc8>
 800902e:	2000      	movs	r0, #0
 8009030:	e008      	b.n	8009044 <_printf_common+0xa8>
 8009032:	2301      	movs	r3, #1
 8009034:	4652      	mov	r2, sl
 8009036:	4649      	mov	r1, r9
 8009038:	4638      	mov	r0, r7
 800903a:	47c0      	blx	r8
 800903c:	3001      	adds	r0, #1
 800903e:	d103      	bne.n	8009048 <_printf_common+0xac>
 8009040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009048:	3501      	adds	r5, #1
 800904a:	e7c6      	b.n	8008fda <_printf_common+0x3e>
 800904c:	18e1      	adds	r1, r4, r3
 800904e:	1c5a      	adds	r2, r3, #1
 8009050:	2030      	movs	r0, #48	; 0x30
 8009052:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009056:	4422      	add	r2, r4
 8009058:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800905c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009060:	3302      	adds	r3, #2
 8009062:	e7c7      	b.n	8008ff4 <_printf_common+0x58>
 8009064:	2301      	movs	r3, #1
 8009066:	4622      	mov	r2, r4
 8009068:	4649      	mov	r1, r9
 800906a:	4638      	mov	r0, r7
 800906c:	47c0      	blx	r8
 800906e:	3001      	adds	r0, #1
 8009070:	d0e6      	beq.n	8009040 <_printf_common+0xa4>
 8009072:	3601      	adds	r6, #1
 8009074:	e7d9      	b.n	800902a <_printf_common+0x8e>
	...

08009078 <_printf_i>:
 8009078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800907c:	460c      	mov	r4, r1
 800907e:	4691      	mov	r9, r2
 8009080:	7e27      	ldrb	r7, [r4, #24]
 8009082:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009084:	2f78      	cmp	r7, #120	; 0x78
 8009086:	4680      	mov	r8, r0
 8009088:	469a      	mov	sl, r3
 800908a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800908e:	d807      	bhi.n	80090a0 <_printf_i+0x28>
 8009090:	2f62      	cmp	r7, #98	; 0x62
 8009092:	d80a      	bhi.n	80090aa <_printf_i+0x32>
 8009094:	2f00      	cmp	r7, #0
 8009096:	f000 80d8 	beq.w	800924a <_printf_i+0x1d2>
 800909a:	2f58      	cmp	r7, #88	; 0x58
 800909c:	f000 80a3 	beq.w	80091e6 <_printf_i+0x16e>
 80090a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80090a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090a8:	e03a      	b.n	8009120 <_printf_i+0xa8>
 80090aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090ae:	2b15      	cmp	r3, #21
 80090b0:	d8f6      	bhi.n	80090a0 <_printf_i+0x28>
 80090b2:	a001      	add	r0, pc, #4	; (adr r0, 80090b8 <_printf_i+0x40>)
 80090b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80090b8:	08009111 	.word	0x08009111
 80090bc:	08009125 	.word	0x08009125
 80090c0:	080090a1 	.word	0x080090a1
 80090c4:	080090a1 	.word	0x080090a1
 80090c8:	080090a1 	.word	0x080090a1
 80090cc:	080090a1 	.word	0x080090a1
 80090d0:	08009125 	.word	0x08009125
 80090d4:	080090a1 	.word	0x080090a1
 80090d8:	080090a1 	.word	0x080090a1
 80090dc:	080090a1 	.word	0x080090a1
 80090e0:	080090a1 	.word	0x080090a1
 80090e4:	08009231 	.word	0x08009231
 80090e8:	08009155 	.word	0x08009155
 80090ec:	08009213 	.word	0x08009213
 80090f0:	080090a1 	.word	0x080090a1
 80090f4:	080090a1 	.word	0x080090a1
 80090f8:	08009253 	.word	0x08009253
 80090fc:	080090a1 	.word	0x080090a1
 8009100:	08009155 	.word	0x08009155
 8009104:	080090a1 	.word	0x080090a1
 8009108:	080090a1 	.word	0x080090a1
 800910c:	0800921b 	.word	0x0800921b
 8009110:	680b      	ldr	r3, [r1, #0]
 8009112:	1d1a      	adds	r2, r3, #4
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	600a      	str	r2, [r1, #0]
 8009118:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800911c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009120:	2301      	movs	r3, #1
 8009122:	e0a3      	b.n	800926c <_printf_i+0x1f4>
 8009124:	6825      	ldr	r5, [r4, #0]
 8009126:	6808      	ldr	r0, [r1, #0]
 8009128:	062e      	lsls	r6, r5, #24
 800912a:	f100 0304 	add.w	r3, r0, #4
 800912e:	d50a      	bpl.n	8009146 <_printf_i+0xce>
 8009130:	6805      	ldr	r5, [r0, #0]
 8009132:	600b      	str	r3, [r1, #0]
 8009134:	2d00      	cmp	r5, #0
 8009136:	da03      	bge.n	8009140 <_printf_i+0xc8>
 8009138:	232d      	movs	r3, #45	; 0x2d
 800913a:	426d      	negs	r5, r5
 800913c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009140:	485e      	ldr	r0, [pc, #376]	; (80092bc <_printf_i+0x244>)
 8009142:	230a      	movs	r3, #10
 8009144:	e019      	b.n	800917a <_printf_i+0x102>
 8009146:	f015 0f40 	tst.w	r5, #64	; 0x40
 800914a:	6805      	ldr	r5, [r0, #0]
 800914c:	600b      	str	r3, [r1, #0]
 800914e:	bf18      	it	ne
 8009150:	b22d      	sxthne	r5, r5
 8009152:	e7ef      	b.n	8009134 <_printf_i+0xbc>
 8009154:	680b      	ldr	r3, [r1, #0]
 8009156:	6825      	ldr	r5, [r4, #0]
 8009158:	1d18      	adds	r0, r3, #4
 800915a:	6008      	str	r0, [r1, #0]
 800915c:	0628      	lsls	r0, r5, #24
 800915e:	d501      	bpl.n	8009164 <_printf_i+0xec>
 8009160:	681d      	ldr	r5, [r3, #0]
 8009162:	e002      	b.n	800916a <_printf_i+0xf2>
 8009164:	0669      	lsls	r1, r5, #25
 8009166:	d5fb      	bpl.n	8009160 <_printf_i+0xe8>
 8009168:	881d      	ldrh	r5, [r3, #0]
 800916a:	4854      	ldr	r0, [pc, #336]	; (80092bc <_printf_i+0x244>)
 800916c:	2f6f      	cmp	r7, #111	; 0x6f
 800916e:	bf0c      	ite	eq
 8009170:	2308      	moveq	r3, #8
 8009172:	230a      	movne	r3, #10
 8009174:	2100      	movs	r1, #0
 8009176:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800917a:	6866      	ldr	r6, [r4, #4]
 800917c:	60a6      	str	r6, [r4, #8]
 800917e:	2e00      	cmp	r6, #0
 8009180:	bfa2      	ittt	ge
 8009182:	6821      	ldrge	r1, [r4, #0]
 8009184:	f021 0104 	bicge.w	r1, r1, #4
 8009188:	6021      	strge	r1, [r4, #0]
 800918a:	b90d      	cbnz	r5, 8009190 <_printf_i+0x118>
 800918c:	2e00      	cmp	r6, #0
 800918e:	d04d      	beq.n	800922c <_printf_i+0x1b4>
 8009190:	4616      	mov	r6, r2
 8009192:	fbb5 f1f3 	udiv	r1, r5, r3
 8009196:	fb03 5711 	mls	r7, r3, r1, r5
 800919a:	5dc7      	ldrb	r7, [r0, r7]
 800919c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80091a0:	462f      	mov	r7, r5
 80091a2:	42bb      	cmp	r3, r7
 80091a4:	460d      	mov	r5, r1
 80091a6:	d9f4      	bls.n	8009192 <_printf_i+0x11a>
 80091a8:	2b08      	cmp	r3, #8
 80091aa:	d10b      	bne.n	80091c4 <_printf_i+0x14c>
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	07df      	lsls	r7, r3, #31
 80091b0:	d508      	bpl.n	80091c4 <_printf_i+0x14c>
 80091b2:	6923      	ldr	r3, [r4, #16]
 80091b4:	6861      	ldr	r1, [r4, #4]
 80091b6:	4299      	cmp	r1, r3
 80091b8:	bfde      	ittt	le
 80091ba:	2330      	movle	r3, #48	; 0x30
 80091bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091c0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80091c4:	1b92      	subs	r2, r2, r6
 80091c6:	6122      	str	r2, [r4, #16]
 80091c8:	f8cd a000 	str.w	sl, [sp]
 80091cc:	464b      	mov	r3, r9
 80091ce:	aa03      	add	r2, sp, #12
 80091d0:	4621      	mov	r1, r4
 80091d2:	4640      	mov	r0, r8
 80091d4:	f7ff fee2 	bl	8008f9c <_printf_common>
 80091d8:	3001      	adds	r0, #1
 80091da:	d14c      	bne.n	8009276 <_printf_i+0x1fe>
 80091dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091e0:	b004      	add	sp, #16
 80091e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e6:	4835      	ldr	r0, [pc, #212]	; (80092bc <_printf_i+0x244>)
 80091e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80091ec:	6823      	ldr	r3, [r4, #0]
 80091ee:	680e      	ldr	r6, [r1, #0]
 80091f0:	061f      	lsls	r7, r3, #24
 80091f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80091f6:	600e      	str	r6, [r1, #0]
 80091f8:	d514      	bpl.n	8009224 <_printf_i+0x1ac>
 80091fa:	07d9      	lsls	r1, r3, #31
 80091fc:	bf44      	itt	mi
 80091fe:	f043 0320 	orrmi.w	r3, r3, #32
 8009202:	6023      	strmi	r3, [r4, #0]
 8009204:	b91d      	cbnz	r5, 800920e <_printf_i+0x196>
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	f023 0320 	bic.w	r3, r3, #32
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	2310      	movs	r3, #16
 8009210:	e7b0      	b.n	8009174 <_printf_i+0xfc>
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	f043 0320 	orr.w	r3, r3, #32
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	2378      	movs	r3, #120	; 0x78
 800921c:	4828      	ldr	r0, [pc, #160]	; (80092c0 <_printf_i+0x248>)
 800921e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009222:	e7e3      	b.n	80091ec <_printf_i+0x174>
 8009224:	065e      	lsls	r6, r3, #25
 8009226:	bf48      	it	mi
 8009228:	b2ad      	uxthmi	r5, r5
 800922a:	e7e6      	b.n	80091fa <_printf_i+0x182>
 800922c:	4616      	mov	r6, r2
 800922e:	e7bb      	b.n	80091a8 <_printf_i+0x130>
 8009230:	680b      	ldr	r3, [r1, #0]
 8009232:	6826      	ldr	r6, [r4, #0]
 8009234:	6960      	ldr	r0, [r4, #20]
 8009236:	1d1d      	adds	r5, r3, #4
 8009238:	600d      	str	r5, [r1, #0]
 800923a:	0635      	lsls	r5, r6, #24
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	d501      	bpl.n	8009244 <_printf_i+0x1cc>
 8009240:	6018      	str	r0, [r3, #0]
 8009242:	e002      	b.n	800924a <_printf_i+0x1d2>
 8009244:	0671      	lsls	r1, r6, #25
 8009246:	d5fb      	bpl.n	8009240 <_printf_i+0x1c8>
 8009248:	8018      	strh	r0, [r3, #0]
 800924a:	2300      	movs	r3, #0
 800924c:	6123      	str	r3, [r4, #16]
 800924e:	4616      	mov	r6, r2
 8009250:	e7ba      	b.n	80091c8 <_printf_i+0x150>
 8009252:	680b      	ldr	r3, [r1, #0]
 8009254:	1d1a      	adds	r2, r3, #4
 8009256:	600a      	str	r2, [r1, #0]
 8009258:	681e      	ldr	r6, [r3, #0]
 800925a:	6862      	ldr	r2, [r4, #4]
 800925c:	2100      	movs	r1, #0
 800925e:	4630      	mov	r0, r6
 8009260:	f7f7 f846 	bl	80002f0 <memchr>
 8009264:	b108      	cbz	r0, 800926a <_printf_i+0x1f2>
 8009266:	1b80      	subs	r0, r0, r6
 8009268:	6060      	str	r0, [r4, #4]
 800926a:	6863      	ldr	r3, [r4, #4]
 800926c:	6123      	str	r3, [r4, #16]
 800926e:	2300      	movs	r3, #0
 8009270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009274:	e7a8      	b.n	80091c8 <_printf_i+0x150>
 8009276:	6923      	ldr	r3, [r4, #16]
 8009278:	4632      	mov	r2, r6
 800927a:	4649      	mov	r1, r9
 800927c:	4640      	mov	r0, r8
 800927e:	47d0      	blx	sl
 8009280:	3001      	adds	r0, #1
 8009282:	d0ab      	beq.n	80091dc <_printf_i+0x164>
 8009284:	6823      	ldr	r3, [r4, #0]
 8009286:	079b      	lsls	r3, r3, #30
 8009288:	d413      	bmi.n	80092b2 <_printf_i+0x23a>
 800928a:	68e0      	ldr	r0, [r4, #12]
 800928c:	9b03      	ldr	r3, [sp, #12]
 800928e:	4298      	cmp	r0, r3
 8009290:	bfb8      	it	lt
 8009292:	4618      	movlt	r0, r3
 8009294:	e7a4      	b.n	80091e0 <_printf_i+0x168>
 8009296:	2301      	movs	r3, #1
 8009298:	4632      	mov	r2, r6
 800929a:	4649      	mov	r1, r9
 800929c:	4640      	mov	r0, r8
 800929e:	47d0      	blx	sl
 80092a0:	3001      	adds	r0, #1
 80092a2:	d09b      	beq.n	80091dc <_printf_i+0x164>
 80092a4:	3501      	adds	r5, #1
 80092a6:	68e3      	ldr	r3, [r4, #12]
 80092a8:	9903      	ldr	r1, [sp, #12]
 80092aa:	1a5b      	subs	r3, r3, r1
 80092ac:	42ab      	cmp	r3, r5
 80092ae:	dcf2      	bgt.n	8009296 <_printf_i+0x21e>
 80092b0:	e7eb      	b.n	800928a <_printf_i+0x212>
 80092b2:	2500      	movs	r5, #0
 80092b4:	f104 0619 	add.w	r6, r4, #25
 80092b8:	e7f5      	b.n	80092a6 <_printf_i+0x22e>
 80092ba:	bf00      	nop
 80092bc:	0800965a 	.word	0x0800965a
 80092c0:	0800966b 	.word	0x0800966b

080092c4 <memmove>:
 80092c4:	4288      	cmp	r0, r1
 80092c6:	b510      	push	{r4, lr}
 80092c8:	eb01 0402 	add.w	r4, r1, r2
 80092cc:	d902      	bls.n	80092d4 <memmove+0x10>
 80092ce:	4284      	cmp	r4, r0
 80092d0:	4623      	mov	r3, r4
 80092d2:	d807      	bhi.n	80092e4 <memmove+0x20>
 80092d4:	1e43      	subs	r3, r0, #1
 80092d6:	42a1      	cmp	r1, r4
 80092d8:	d008      	beq.n	80092ec <memmove+0x28>
 80092da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092e2:	e7f8      	b.n	80092d6 <memmove+0x12>
 80092e4:	4402      	add	r2, r0
 80092e6:	4601      	mov	r1, r0
 80092e8:	428a      	cmp	r2, r1
 80092ea:	d100      	bne.n	80092ee <memmove+0x2a>
 80092ec:	bd10      	pop	{r4, pc}
 80092ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092f6:	e7f7      	b.n	80092e8 <memmove+0x24>

080092f8 <_realloc_r>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	4607      	mov	r7, r0
 80092fc:	4614      	mov	r4, r2
 80092fe:	460e      	mov	r6, r1
 8009300:	b921      	cbnz	r1, 800930c <_realloc_r+0x14>
 8009302:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009306:	4611      	mov	r1, r2
 8009308:	f7ff baf6 	b.w	80088f8 <_malloc_r>
 800930c:	b922      	cbnz	r2, 8009318 <_realloc_r+0x20>
 800930e:	f7ff fc99 	bl	8008c44 <_free_r>
 8009312:	4625      	mov	r5, r4
 8009314:	4628      	mov	r0, r5
 8009316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009318:	f000 f814 	bl	8009344 <_malloc_usable_size_r>
 800931c:	42a0      	cmp	r0, r4
 800931e:	d20f      	bcs.n	8009340 <_realloc_r+0x48>
 8009320:	4621      	mov	r1, r4
 8009322:	4638      	mov	r0, r7
 8009324:	f7ff fae8 	bl	80088f8 <_malloc_r>
 8009328:	4605      	mov	r5, r0
 800932a:	2800      	cmp	r0, #0
 800932c:	d0f2      	beq.n	8009314 <_realloc_r+0x1c>
 800932e:	4631      	mov	r1, r6
 8009330:	4622      	mov	r2, r4
 8009332:	f7ff facb 	bl	80088cc <memcpy>
 8009336:	4631      	mov	r1, r6
 8009338:	4638      	mov	r0, r7
 800933a:	f7ff fc83 	bl	8008c44 <_free_r>
 800933e:	e7e9      	b.n	8009314 <_realloc_r+0x1c>
 8009340:	4635      	mov	r5, r6
 8009342:	e7e7      	b.n	8009314 <_realloc_r+0x1c>

08009344 <_malloc_usable_size_r>:
 8009344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009348:	1f18      	subs	r0, r3, #4
 800934a:	2b00      	cmp	r3, #0
 800934c:	bfbc      	itt	lt
 800934e:	580b      	ldrlt	r3, [r1, r0]
 8009350:	18c0      	addlt	r0, r0, r3
 8009352:	4770      	bx	lr

08009354 <_init>:
 8009354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009356:	bf00      	nop
 8009358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800935a:	bc08      	pop	{r3}
 800935c:	469e      	mov	lr, r3
 800935e:	4770      	bx	lr

08009360 <_fini>:
 8009360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009362:	bf00      	nop
 8009364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009366:	bc08      	pop	{r3}
 8009368:	469e      	mov	lr, r3
 800936a:	4770      	bx	lr
