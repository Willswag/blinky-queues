
blinky-queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a628  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800a8d8  0800a8d8  0001a8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800abc0  0800abc0  0001abc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800abc8  0800abc8  0001abc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800abcc  0800abcc  0001abcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800abd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004c10  24000078  0800ac48  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004c88  0800ac48  00024c88  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031ec8  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004ebc  00000000  00000000  00051f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001918  00000000  00000000  00056e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001790  00000000  00000000  00058748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003345c  00000000  00000000  00059ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021021  00000000  00000000  0008d334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014a528  00000000  00000000  000ae355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001f887d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006cf0  00000000  00000000  001f88d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a8c0 	.word	0x0800a8c0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	0800a8c0 	.word	0x0800a8c0

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandsToBlink */
  CommandsToBlinkHandle = osMessageQueueNew (16, sizeof(Command), &CommandsToBlink_attributes);
 80005ec:	4a1c      	ldr	r2, [pc, #112]	; (8000660 <MX_FREERTOS_Init+0x78>)
 80005ee:	2108      	movs	r1, #8
 80005f0:	2010      	movs	r0, #16
 80005f2:	f007 f95e 	bl	80078b2 <osMessageQueueNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a1a      	ldr	r2, [pc, #104]	; (8000664 <MX_FREERTOS_Init+0x7c>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of times_blinked */
  times_blinkedHandle = osMessageQueueNew (16, sizeof(uint16_t), &times_blinked_attributes);
 80005fc:	4a1a      	ldr	r2, [pc, #104]	; (8000668 <MX_FREERTOS_Init+0x80>)
 80005fe:	2102      	movs	r1, #2
 8000600:	2010      	movs	r0, #16
 8000602:	f007 f956 	bl	80078b2 <osMessageQueueNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a18      	ldr	r2, [pc, #96]	; (800066c <MX_FREERTOS_Init+0x84>)
 800060a:	6013      	str	r3, [r2, #0]

  /* creation of rawCommands */
  rawCommandsHandle = osMessageQueueNew (16, sizeof(char), &rawCommands_attributes);
 800060c:	4a18      	ldr	r2, [pc, #96]	; (8000670 <MX_FREERTOS_Init+0x88>)
 800060e:	2101      	movs	r1, #1
 8000610:	2010      	movs	r0, #16
 8000612:	f007 f94e 	bl	80078b2 <osMessageQueueNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a16      	ldr	r2, [pc, #88]	; (8000674 <MX_FREERTOS_Init+0x8c>)
 800061a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CommandLine */
  CommandLineHandle = osThreadNew(StartCommandLine, NULL, &CommandLine_attributes);
 800061c:	4a16      	ldr	r2, [pc, #88]	; (8000678 <MX_FREERTOS_Init+0x90>)
 800061e:	2100      	movs	r1, #0
 8000620:	4816      	ldr	r0, [pc, #88]	; (800067c <MX_FREERTOS_Init+0x94>)
 8000622:	f007 f899 	bl	8007758 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a15      	ldr	r2, [pc, #84]	; (8000680 <MX_FREERTOS_Init+0x98>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker1 */
  Blinker1Handle = osThreadNew(StartBlinker1, NULL, &Blinker1_attributes);
 800062c:	4a15      	ldr	r2, [pc, #84]	; (8000684 <MX_FREERTOS_Init+0x9c>)
 800062e:	2100      	movs	r1, #0
 8000630:	4815      	ldr	r0, [pc, #84]	; (8000688 <MX_FREERTOS_Init+0xa0>)
 8000632:	f007 f891 	bl	8007758 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <MX_FREERTOS_Init+0xa4>)
 800063a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker2 */
  Blinker2Handle = osThreadNew(StartBlinker2, NULL, &Blinker2_attributes);
 800063c:	4a14      	ldr	r2, [pc, #80]	; (8000690 <MX_FREERTOS_Init+0xa8>)
 800063e:	2100      	movs	r1, #0
 8000640:	4814      	ldr	r0, [pc, #80]	; (8000694 <MX_FREERTOS_Init+0xac>)
 8000642:	f007 f889 	bl	8007758 <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <MX_FREERTOS_Init+0xb0>)
 800064a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker3 */
  Blinker3Handle = osThreadNew(StartBlinker3, NULL, &Blinker3_attributes);
 800064c:	4a13      	ldr	r2, [pc, #76]	; (800069c <MX_FREERTOS_Init+0xb4>)
 800064e:	2100      	movs	r1, #0
 8000650:	4813      	ldr	r0, [pc, #76]	; (80006a0 <MX_FREERTOS_Init+0xb8>)
 8000652:	f007 f881 	bl	8007758 <osThreadNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <MX_FREERTOS_Init+0xbc>)
 800065a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	0800a9dc 	.word	0x0800a9dc
 8000664:	24004b50 	.word	0x24004b50
 8000668:	0800a9f4 	.word	0x0800a9f4
 800066c:	24004b58 	.word	0x24004b58
 8000670:	0800aa0c 	.word	0x0800aa0c
 8000674:	24004b54 	.word	0x24004b54
 8000678:	0800a94c 	.word	0x0800a94c
 800067c:	080006a9 	.word	0x080006a9
 8000680:	24004ae0 	.word	0x24004ae0
 8000684:	0800a970 	.word	0x0800a970
 8000688:	08000791 	.word	0x08000791
 800068c:	24004adc 	.word	0x24004adc
 8000690:	0800a994 	.word	0x0800a994
 8000694:	0800080d 	.word	0x0800080d
 8000698:	24004b48 	.word	0x24004b48
 800069c:	0800a9b8 	.word	0x0800a9b8
 80006a0:	0800081d 	.word	0x0800081d
 80006a4:	24004b4c 	.word	0x24004b4c

080006a8 <StartCommandLine>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommandLine */
void StartCommandLine(void *argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandLine */
	uint8_t local_index = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char* delay_ptr = NULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
	uint16_t delay_len = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	837b      	strh	r3, [r7, #26]
	uint16_t total_blinks = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	833b      	strh	r3, [r7, #24]
	char new_char;
	Command loc_com;
	/* Infinite loop */
	for(;;)
	{
		status = osMessageQueueGet(rawCommandsHandle, &new_char, NULL, 0);
 80006c2:	4b31      	ldr	r3, [pc, #196]	; (8000788 <StartCommandLine+0xe0>)
 80006c4:	6818      	ldr	r0, [r3, #0]
 80006c6:	f107 0113 	add.w	r1, r7, #19
 80006ca:	2300      	movs	r3, #0
 80006cc:	2200      	movs	r2, #0
 80006ce:	f007 f9c3 	bl	8007a58 <osMessageQueueGet>
 80006d2:	6178      	str	r0, [r7, #20]
		if(status == osOK)
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d151      	bne.n	800077e <StartCommandLine+0xd6>
		{
			rx_buffer[local_index] = new_char;
 80006da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006de:	7cf9      	ldrb	r1, [r7, #19]
 80006e0:	4a2a      	ldr	r2, [pc, #168]	; (800078c <StartCommandLine+0xe4>)
 80006e2:	54d1      	strb	r1, [r2, r3]
			local_index++;
 80006e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006e8:	3301      	adds	r3, #1
 80006ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(local_index == RX_BUFFER_LENGTH )
 80006ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006f2:	2b64      	cmp	r3, #100	; 0x64
 80006f4:	d102      	bne.n	80006fc <StartCommandLine+0x54>
			{
				local_index = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}

			if(new_char == '\n' || new_char == '\r')
 80006fc:	7cfb      	ldrb	r3, [r7, #19]
 80006fe:	2b0a      	cmp	r3, #10
 8000700:	d002      	beq.n	8000708 <StartCommandLine+0x60>
 8000702:	7cfb      	ldrb	r3, [r7, #19]
 8000704:	2b0d      	cmp	r3, #13
 8000706:	d13a      	bne.n	800077e <StartCommandLine+0xd6>
			{
				char* buff_ptr = rx_buffer;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <StartCommandLine+0xe4>)
 800070a:	623b      	str	r3, [r7, #32]
				while(*buff_ptr != '\r'){
 800070c:	e02b      	b.n	8000766 <StartCommandLine+0xbe>
					switch (*buff_ptr) {
 800070e:	6a3b      	ldr	r3, [r7, #32]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b6c      	cmp	r3, #108	; 0x6c
 8000714:	d006      	beq.n	8000724 <StartCommandLine+0x7c>
 8000716:	2b6c      	cmp	r3, #108	; 0x6c
 8000718:	dc21      	bgt.n	800075e <StartCommandLine+0xb6>
 800071a:	2b62      	cmp	r3, #98	; 0x62
 800071c:	d00c      	beq.n	8000738 <StartCommandLine+0x90>
 800071e:	2b64      	cmp	r3, #100	; 0x64
 8000720:	d014      	beq.n	800074c <StartCommandLine+0xa4>
						case 'd':
							buff_ptr++;
							loc_com.delay_ms = atoi(buff_ptr);
							break;
						default:
							break;
 8000722:	e01c      	b.n	800075e <StartCommandLine+0xb6>
							buff_ptr++;
 8000724:	6a3b      	ldr	r3, [r7, #32]
 8000726:	3301      	adds	r3, #1
 8000728:	623b      	str	r3, [r7, #32]
							loc_com.led = atoi(buff_ptr);
 800072a:	6a38      	ldr	r0, [r7, #32]
 800072c:	f009 ff2e 	bl	800a58c <atoi>
 8000730:	4603      	mov	r3, r0
 8000732:	b2db      	uxtb	r3, r3
 8000734:	723b      	strb	r3, [r7, #8]
							break;
 8000736:	e013      	b.n	8000760 <StartCommandLine+0xb8>
							buff_ptr++;
 8000738:	6a3b      	ldr	r3, [r7, #32]
 800073a:	3301      	adds	r3, #1
 800073c:	623b      	str	r3, [r7, #32]
							loc_com.brightness = atoi(buff_ptr);
 800073e:	6a38      	ldr	r0, [r7, #32]
 8000740:	f009 ff24 	bl	800a58c <atoi>
 8000744:	4603      	mov	r3, r0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	727b      	strb	r3, [r7, #9]
							break;
 800074a:	e009      	b.n	8000760 <StartCommandLine+0xb8>
							buff_ptr++;
 800074c:	6a3b      	ldr	r3, [r7, #32]
 800074e:	3301      	adds	r3, #1
 8000750:	623b      	str	r3, [r7, #32]
							loc_com.delay_ms = atoi(buff_ptr);
 8000752:	6a38      	ldr	r0, [r7, #32]
 8000754:	f009 ff1a 	bl	800a58c <atoi>
 8000758:	4603      	mov	r3, r0
 800075a:	60fb      	str	r3, [r7, #12]
							break;
 800075c:	e000      	b.n	8000760 <StartCommandLine+0xb8>
							break;
 800075e:	bf00      	nop
					}
					buff_ptr++;
 8000760:	6a3b      	ldr	r3, [r7, #32]
 8000762:	3301      	adds	r3, #1
 8000764:	623b      	str	r3, [r7, #32]
				while(*buff_ptr != '\r'){
 8000766:	6a3b      	ldr	r3, [r7, #32]
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b0d      	cmp	r3, #13
 800076c:	d1cf      	bne.n	800070e <StartCommandLine+0x66>
				}
				local_index = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				memset(rx_buffer,0,RX_BUFFER_LENGTH);
 8000774:	2264      	movs	r2, #100	; 0x64
 8000776:	2100      	movs	r1, #0
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <StartCommandLine+0xe4>)
 800077a:	f009 ff45 	bl	800a608 <memset>
			}
		}
		osDelay(10);
 800077e:	200a      	movs	r0, #10
 8000780:	f007 f87c 	bl	800787c <osDelay>
		status = osMessageQueueGet(rawCommandsHandle, &new_char, NULL, 0);
 8000784:	e79d      	b.n	80006c2 <StartCommandLine+0x1a>
 8000786:	bf00      	nop
 8000788:	24004b54 	.word	0x24004b54
 800078c:	24004ae4 	.word	0x24004ae4

08000790 <StartBlinker1>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker1 */
void StartBlinker1(void *argument)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker1 */
	uint16_t blink_rate = 1000;
 8000798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079c:	83fb      	strh	r3, [r7, #30]
	uint16_t blinks = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	827b      	strh	r3, [r7, #18]
	Command next_move;
	osStatus status;
	const led_number = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
	/* Infinite loop */
	for(;;)
	{

		status = osMessageQueueGet(CommandsToBlinkHandle,&next_move , NULL, 0);
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <StartBlinker1+0x6c>)
 80007a8:	6818      	ldr	r0, [r3, #0]
 80007aa:	f107 0108 	add.w	r1, r7, #8
 80007ae:	2300      	movs	r3, #0
 80007b0:	2200      	movs	r2, #0
 80007b2:	f007 f951 	bl	8007a58 <osMessageQueueGet>
 80007b6:	6178      	str	r0, [r7, #20]
		if(status == osOK)
		{
			//process data
		}

		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80007b8:	2101      	movs	r1, #1
 80007ba:	4811      	ldr	r0, [pc, #68]	; (8000800 <StartBlinker1+0x70>)
 80007bc:	f001 fc91 	bl	80020e2 <HAL_GPIO_TogglePin>
		blinks++;
 80007c0:	8a7b      	ldrh	r3, [r7, #18]
 80007c2:	3301      	adds	r3, #1
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	827b      	strh	r3, [r7, #18]
		if (blinks%100 == 0) {
 80007c8:	8a7b      	ldrh	r3, [r7, #18]
 80007ca:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <StartBlinker1+0x74>)
 80007cc:	fba2 1203 	umull	r1, r2, r2, r3
 80007d0:	0952      	lsrs	r2, r2, #5
 80007d2:	2164      	movs	r1, #100	; 0x64
 80007d4:	fb01 f202 	mul.w	r2, r1, r2
 80007d8:	1a9b      	subs	r3, r3, r2
 80007da:	b29b      	uxth	r3, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d107      	bne.n	80007f0 <StartBlinker1+0x60>
			osMessageQueuePut(times_blinkedHandle, &blinks , NULL, 0);
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <StartBlinker1+0x78>)
 80007e2:	6818      	ldr	r0, [r3, #0]
 80007e4:	f107 0112 	add.w	r1, r7, #18
 80007e8:	2300      	movs	r3, #0
 80007ea:	2200      	movs	r2, #0
 80007ec:	f007 f8d4 	bl	8007998 <osMessageQueuePut>
		}
		osDelay(blink_rate);
 80007f0:	8bfb      	ldrh	r3, [r7, #30]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f007 f842 	bl	800787c <osDelay>
		status = osMessageQueueGet(CommandsToBlinkHandle,&next_move , NULL, 0);
 80007f8:	e7d5      	b.n	80007a6 <StartBlinker1+0x16>
 80007fa:	bf00      	nop
 80007fc:	24004b50 	.word	0x24004b50
 8000800:	58020400 	.word	0x58020400
 8000804:	51eb851f 	.word	0x51eb851f
 8000808:	24004b58 	.word	0x24004b58

0800080c <StartBlinker2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker2 */
void StartBlinker2(void *argument)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker2 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000814:	2001      	movs	r0, #1
 8000816:	f007 f831 	bl	800787c <osDelay>
 800081a:	e7fb      	b.n	8000814 <StartBlinker2+0x8>

0800081c <StartBlinker3>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker3 */
void StartBlinker3(void *argument)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker3 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000824:	2001      	movs	r0, #1
 8000826:	f007 f829 	bl	800787c <osDelay>
 800082a:	e7fb      	b.n	8000824 <StartBlinker3+0x8>

0800082c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08e      	sub	sp, #56	; 0x38
 8000830:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	4b80      	ldr	r3, [pc, #512]	; (8000a44 <MX_GPIO_Init+0x218>)
 8000844:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000848:	4a7e      	ldr	r2, [pc, #504]	; (8000a44 <MX_GPIO_Init+0x218>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000852:	4b7c      	ldr	r3, [pc, #496]	; (8000a44 <MX_GPIO_Init+0x218>)
 8000854:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	623b      	str	r3, [r7, #32]
 800085e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000860:	4b78      	ldr	r3, [pc, #480]	; (8000a44 <MX_GPIO_Init+0x218>)
 8000862:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000866:	4a77      	ldr	r2, [pc, #476]	; (8000a44 <MX_GPIO_Init+0x218>)
 8000868:	f043 0320 	orr.w	r3, r3, #32
 800086c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000870:	4b74      	ldr	r3, [pc, #464]	; (8000a44 <MX_GPIO_Init+0x218>)
 8000872:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000876:	f003 0320 	and.w	r3, r3, #32
 800087a:	61fb      	str	r3, [r7, #28]
 800087c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	4b71      	ldr	r3, [pc, #452]	; (8000a44 <MX_GPIO_Init+0x218>)
 8000880:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000884:	4a6f      	ldr	r2, [pc, #444]	; (8000a44 <MX_GPIO_Init+0x218>)
 8000886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800088e:	4b6d      	ldr	r3, [pc, #436]	; (8000a44 <MX_GPIO_Init+0x218>)
 8000890:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000898:	61bb      	str	r3, [r7, #24]
 800089a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089c:	4b69      	ldr	r3, [pc, #420]	; (8000a44 <MX_GPIO_Init+0x218>)
 800089e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a2:	4a68      	ldr	r2, [pc, #416]	; (8000a44 <MX_GPIO_Init+0x218>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ac:	4b65      	ldr	r3, [pc, #404]	; (8000a44 <MX_GPIO_Init+0x218>)
 80008ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ba:	4b62      	ldr	r3, [pc, #392]	; (8000a44 <MX_GPIO_Init+0x218>)
 80008bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c0:	4a60      	ldr	r2, [pc, #384]	; (8000a44 <MX_GPIO_Init+0x218>)
 80008c2:	f043 0308 	orr.w	r3, r3, #8
 80008c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ca:	4b5e      	ldr	r3, [pc, #376]	; (8000a44 <MX_GPIO_Init+0x218>)
 80008cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d8:	4b5a      	ldr	r3, [pc, #360]	; (8000a44 <MX_GPIO_Init+0x218>)
 80008da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008de:	4a59      	ldr	r2, [pc, #356]	; (8000a44 <MX_GPIO_Init+0x218>)
 80008e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008e8:	4b56      	ldr	r3, [pc, #344]	; (8000a44 <MX_GPIO_Init+0x218>)
 80008ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b53      	ldr	r3, [pc, #332]	; (8000a44 <MX_GPIO_Init+0x218>)
 80008f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008fc:	4a51      	ldr	r2, [pc, #324]	; (8000a44 <MX_GPIO_Init+0x218>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000906:	4b4f      	ldr	r3, [pc, #316]	; (8000a44 <MX_GPIO_Init+0x218>)
 8000908:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000914:	4b4b      	ldr	r3, [pc, #300]	; (8000a44 <MX_GPIO_Init+0x218>)
 8000916:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800091a:	4a4a      	ldr	r2, [pc, #296]	; (8000a44 <MX_GPIO_Init+0x218>)
 800091c:	f043 0310 	orr.w	r3, r3, #16
 8000920:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000924:	4b47      	ldr	r3, [pc, #284]	; (8000a44 <MX_GPIO_Init+0x218>)
 8000926:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800092a:	f003 0310 	and.w	r3, r3, #16
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000938:	4843      	ldr	r0, [pc, #268]	; (8000a48 <MX_GPIO_Init+0x21c>)
 800093a:	f001 fbb9 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f244 0101 	movw	r1, #16385	; 0x4001
 8000944:	4841      	ldr	r0, [pc, #260]	; (8000a4c <MX_GPIO_Init+0x220>)
 8000946:	f001 fbb3 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2102      	movs	r1, #2
 800094e:	4840      	ldr	r0, [pc, #256]	; (8000a50 <MX_GPIO_Init+0x224>)
 8000950:	f001 fbae 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000966:	4619      	mov	r1, r3
 8000968:	483a      	ldr	r0, [pc, #232]	; (8000a54 <MX_GPIO_Init+0x228>)
 800096a:	f001 f9f1 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800096e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	4830      	ldr	r0, [pc, #192]	; (8000a48 <MX_GPIO_Init+0x21c>)
 8000988:	f001 f9e2 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800098c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	4619      	mov	r1, r3
 80009a4:	4829      	ldr	r0, [pc, #164]	; (8000a4c <MX_GPIO_Init+0x220>)
 80009a6:	f001 f9d3 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009aa:	2380      	movs	r3, #128	; 0x80
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	4619      	mov	r1, r3
 80009be:	4826      	ldr	r0, [pc, #152]	; (8000a58 <MX_GPIO_Init+0x22c>)
 80009c0:	f001 f9c6 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	4619      	mov	r1, r3
 80009d8:	4820      	ldr	r0, [pc, #128]	; (8000a5c <MX_GPIO_Init+0x230>)
 80009da:	f001 f9b9 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80009de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80009f0:	230a      	movs	r3, #10
 80009f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4818      	ldr	r0, [pc, #96]	; (8000a5c <MX_GPIO_Init+0x230>)
 80009fc:	f001 f9a8 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000a00:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	4619      	mov	r1, r3
 8000a18:	4810      	ldr	r0, [pc, #64]	; (8000a5c <MX_GPIO_Init+0x230>)
 8000a1a:	f001 f999 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	4619      	mov	r1, r3
 8000a34:	4806      	ldr	r0, [pc, #24]	; (8000a50 <MX_GPIO_Init+0x224>)
 8000a36:	f001 f98b 	bl	8001d50 <HAL_GPIO_Init>

}
 8000a3a:	bf00      	nop
 8000a3c:	3738      	adds	r7, #56	; 0x38
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	58024400 	.word	0x58024400
 8000a48:	58021400 	.word	0x58021400
 8000a4c:	58020400 	.word	0x58020400
 8000a50:	58021000 	.word	0x58021000
 8000a54:	58020800 	.word	0x58020800
 8000a58:	58021800 	.word	0x58021800
 8000a5c:	58020000 	.word	0x58020000

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a64:	f000 fad6 	bl	8001014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a68:	f000 f816 	bl	8000a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6c:	f7ff fede 	bl	800082c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a70:	f000 f9c4 	bl	8000dfc <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a74:	f000 fa9c 	bl	8000fb0 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT (&huart3, UART3_rxBuffer, 1);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4905      	ldr	r1, [pc, #20]	; (8000a90 <main+0x30>)
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <main+0x34>)
 8000a7e:	f004 fa65 	bl	8004f4c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000a82:	f006 fe1f 	bl	80076c4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000a86:	f7ff fdaf 	bl	80005e8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000a8a:	f006 fe3f 	bl	800770c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <main+0x2e>
 8000a90:	24000094 	.word	0x24000094
 8000a94:	24004ba8 	.word	0x24004ba8

08000a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b09c      	sub	sp, #112	; 0x70
 8000a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	224c      	movs	r2, #76	; 0x4c
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f009 fdae 	bl	800a608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2220      	movs	r2, #32
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f009 fda8 	bl	800a608 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ab8:	2004      	movs	r0, #4
 8000aba:	f001 fb2d 	bl	8002118 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <SystemClock_Config+0xd8>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	4a2a      	ldr	r2, [pc, #168]	; (8000b70 <SystemClock_Config+0xd8>)
 8000ac8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000acc:	6193      	str	r3, [r2, #24]
 8000ace:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <SystemClock_Config+0xd8>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ada:	bf00      	nop
 8000adc:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <SystemClock_Config+0xd8>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ae8:	d1f8      	bne.n	8000adc <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000aea:	2321      	movs	r3, #33	; 0x21
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aee:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000af4:	2301      	movs	r3, #1
 8000af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af8:	2302      	movs	r3, #2
 8000afa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afc:	2302      	movs	r3, #2
 8000afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b00:	2301      	movs	r3, #1
 8000b02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000b04:	2318      	movs	r3, #24
 8000b06:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b14:	230c      	movs	r3, #12
 8000b16:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 fb51 	bl	80021cc <HAL_RCC_OscConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b30:	f000 f832 	bl	8000b98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	233f      	movs	r3, #63	; 0x3f
 8000b36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2102      	movs	r1, #2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f001 ff3b 	bl	80029d4 <HAL_RCC_ClockConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b64:	f000 f818 	bl	8000b98 <Error_Handler>
  }
}
 8000b68:	bf00      	nop
 8000b6a:	3770      	adds	r7, #112	; 0x70
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	58024800 	.word	0x58024800

08000b74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d101      	bne.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b86:	f000 fa81 	bl	800108c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40001400 	.word	0x40001400

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>
	...

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <HAL_MspInit+0x38>)
 8000bac:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <HAL_MspInit+0x38>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_MspInit+0x38>)
 8000bbc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000bc0:	f003 0302 	and.w	r3, r3, #2
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	210f      	movs	r1, #15
 8000bcc:	f06f 0001 	mvn.w	r0, #1
 8000bd0:	f000 fb34 	bl	800123c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	58024400 	.word	0x58024400

08000be0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b090      	sub	sp, #64	; 0x40
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b0f      	cmp	r3, #15
 8000bec:	d827      	bhi.n	8000c3e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	2037      	movs	r0, #55	; 0x37
 8000bf4:	f000 fb22 	bl	800123c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000bf8:	2037      	movs	r0, #55	; 0x37
 8000bfa:	f000 fb39 	bl	8001270 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000bfe:	4a29      	ldr	r2, [pc, #164]	; (8000ca4 <HAL_InitTick+0xc4>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000c04:	4b28      	ldr	r3, [pc, #160]	; (8000ca8 <HAL_InitTick+0xc8>)
 8000c06:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c0a:	4a27      	ldr	r2, [pc, #156]	; (8000ca8 <HAL_InitTick+0xc8>)
 8000c0c:	f043 0320 	orr.w	r3, r3, #32
 8000c10:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000c14:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <HAL_InitTick+0xc8>)
 8000c16:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c1a:	f003 0320 	and.w	r3, r3, #32
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c22:	f107 0210 	add.w	r2, r7, #16
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f002 fa5d 	bl	80030ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c34:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d106      	bne.n	8000c4a <HAL_InitTick+0x6a>
 8000c3c:	e001      	b.n	8000c42 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e02b      	b.n	8000c9a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c42:	f002 fa27 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 8000c46:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000c48:	e004      	b.n	8000c54 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c4a:	f002 fa23 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c56:	4a15      	ldr	r2, [pc, #84]	; (8000cac <HAL_InitTick+0xcc>)
 8000c58:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5c:	0c9b      	lsrs	r3, r3, #18
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <HAL_InitTick+0xd0>)
 8000c64:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <HAL_InitTick+0xd4>)
 8000c66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_InitTick+0xd0>)
 8000c6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c6e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c70:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <HAL_InitTick+0xd0>)
 8000c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c74:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_InitTick+0xd0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_InitTick+0xd0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000c82:	480b      	ldr	r0, [pc, #44]	; (8000cb0 <HAL_InitTick+0xd0>)
 8000c84:	f003 fda2 	bl	80047cc <HAL_TIM_Base_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d104      	bne.n	8000c98 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000c8e:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <HAL_InitTick+0xd0>)
 8000c90:	f003 fdfe 	bl	8004890 <HAL_TIM_Base_Start_IT>
 8000c94:	4603      	mov	r3, r0
 8000c96:	e000      	b.n	8000c9a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3740      	adds	r7, #64	; 0x40
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	24000008 	.word	0x24000008
 8000ca8:	58024400 	.word	0x58024400
 8000cac:	431bde83 	.word	0x431bde83
 8000cb0:	24004b5c 	.word	0x24004b5c
 8000cb4:	40001400 	.word	0x40001400

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <MemManage_Handler+0x4>

08000cca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <USART3_IRQHandler+0x10>)
 8000cea:	f004 f985 	bl	8004ff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	24004ba8 	.word	0x24004ba8

08000cf8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <TIM7_IRQHandler+0x10>)
 8000cfe:	f003 fe3f 	bl	8004980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	24004b5c 	.word	0x24004b5c

08000d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d10:	4b32      	ldr	r3, [pc, #200]	; (8000ddc <SystemInit+0xd0>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a31      	ldr	r2, [pc, #196]	; (8000ddc <SystemInit+0xd0>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d20:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <SystemInit+0xd4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 030f 	and.w	r3, r3, #15
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d807      	bhi.n	8000d3c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <SystemInit+0xd4>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f023 030f 	bic.w	r3, r3, #15
 8000d34:	4a2a      	ldr	r2, [pc, #168]	; (8000de0 <SystemInit+0xd4>)
 8000d36:	f043 0303 	orr.w	r3, r3, #3
 8000d3a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d3c:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <SystemInit+0xd8>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a28      	ldr	r2, [pc, #160]	; (8000de4 <SystemInit+0xd8>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d48:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <SystemInit+0xd8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d4e:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <SystemInit+0xd8>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4924      	ldr	r1, [pc, #144]	; (8000de4 <SystemInit+0xd8>)
 8000d54:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <SystemInit+0xdc>)
 8000d56:	4013      	ands	r3, r2
 8000d58:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d5a:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <SystemInit+0xd4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 030c 	and.w	r3, r3, #12
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d007      	beq.n	8000d76 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d66:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <SystemInit+0xd4>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f023 030f 	bic.w	r3, r3, #15
 8000d6e:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <SystemInit+0xd4>)
 8000d70:	f043 0303 	orr.w	r3, r3, #3
 8000d74:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d76:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <SystemInit+0xd8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <SystemInit+0xd8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <SystemInit+0xd8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <SystemInit+0xd8>)
 8000d8a:	4a18      	ldr	r2, [pc, #96]	; (8000dec <SystemInit+0xe0>)
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <SystemInit+0xd8>)
 8000d90:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <SystemInit+0xe4>)
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <SystemInit+0xd8>)
 8000d96:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <SystemInit+0xe8>)
 8000d98:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <SystemInit+0xd8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <SystemInit+0xd8>)
 8000da2:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <SystemInit+0xe8>)
 8000da4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <SystemInit+0xd8>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <SystemInit+0xd8>)
 8000dae:	4a11      	ldr	r2, [pc, #68]	; (8000df4 <SystemInit+0xe8>)
 8000db0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <SystemInit+0xd8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <SystemInit+0xd8>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <SystemInit+0xd8>)
 8000dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <SystemInit+0xd8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <SystemInit+0xec>)
 8000dcc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000dd0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00
 8000de0:	52002000 	.word	0x52002000
 8000de4:	58024400 	.word	0x58024400
 8000de8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dec:	02020200 	.word	0x02020200
 8000df0:	01ff0000 	.word	0x01ff0000
 8000df4:	01010280 	.word	0x01010280
 8000df8:	52004000 	.word	0x52004000

08000dfc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e00:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <MX_USART3_UART_Init+0x90>)
 8000e02:	4a23      	ldr	r2, [pc, #140]	; (8000e90 <MX_USART3_UART_Init+0x94>)
 8000e04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <MX_USART3_UART_Init+0x90>)
 8000e08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <MX_USART3_UART_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e14:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <MX_USART3_UART_Init+0x90>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <MX_USART3_UART_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <MX_USART3_UART_Init+0x90>)
 8000e22:	220c      	movs	r2, #12
 8000e24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e26:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <MX_USART3_UART_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <MX_USART3_UART_Init+0x90>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <MX_USART3_UART_Init+0x90>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_USART3_UART_Init+0x90>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <MX_USART3_UART_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e44:	4811      	ldr	r0, [pc, #68]	; (8000e8c <MX_USART3_UART_Init+0x90>)
 8000e46:	f003 ff9b 	bl	8004d80 <HAL_UART_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e50:	f7ff fea2 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e54:	2100      	movs	r1, #0
 8000e56:	480d      	ldr	r0, [pc, #52]	; (8000e8c <MX_USART3_UART_Init+0x90>)
 8000e58:	f006 fb25 	bl	80074a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e62:	f7ff fe99 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e66:	2100      	movs	r1, #0
 8000e68:	4808      	ldr	r0, [pc, #32]	; (8000e8c <MX_USART3_UART_Init+0x90>)
 8000e6a:	f006 fb5a 	bl	8007522 <HAL_UARTEx_SetRxFifoThreshold>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e74:	f7ff fe90 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_USART3_UART_Init+0x90>)
 8000e7a:	f006 fadb 	bl	8007434 <HAL_UARTEx_DisableFifoMode>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e84:	f7ff fe88 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	24004ba8 	.word	0x24004ba8
 8000e90:	40004800 	.word	0x40004800

08000e94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0b8      	sub	sp, #224	; 0xe0
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	22b8      	movs	r2, #184	; 0xb8
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f009 fba7 	bl	800a608 <memset>
  if(uartHandle->Instance==USART3)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a29      	ldr	r2, [pc, #164]	; (8000f64 <HAL_UART_MspInit+0xd0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d14a      	bne.n	8000f5a <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f002 f94c 	bl	8003170 <HAL_RCCEx_PeriphCLKConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ede:	f7ff fe5b 	bl	8000b98 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <HAL_UART_MspInit+0xd4>)
 8000ee4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ee8:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <HAL_UART_MspInit+0xd4>)
 8000eea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eee:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_UART_MspInit+0xd4>)
 8000ef4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_UART_MspInit+0xd4>)
 8000f02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f06:	4a18      	ldr	r2, [pc, #96]	; (8000f68 <HAL_UART_MspInit+0xd4>)
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_UART_MspInit+0xd4>)
 8000f12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f38:	2307      	movs	r3, #7
 8000f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f42:	4619      	mov	r1, r3
 8000f44:	4809      	ldr	r0, [pc, #36]	; (8000f6c <HAL_UART_MspInit+0xd8>)
 8000f46:	f000 ff03 	bl	8001d50 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2105      	movs	r1, #5
 8000f4e:	2027      	movs	r0, #39	; 0x27
 8000f50:	f000 f974 	bl	800123c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f54:	2027      	movs	r0, #39	; 0x27
 8000f56:	f000 f98b 	bl	8001270 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	37e0      	adds	r7, #224	; 0xe0
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40004800 	.word	0x40004800
 8000f68:	58024400 	.word	0x58024400
 8000f6c:	58020c00 	.word	0x58020c00

08000f70 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, UART3_rxBuffer, 1, 100);
 8000f78:	2364      	movs	r3, #100	; 0x64
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4909      	ldr	r1, [pc, #36]	; (8000fa4 <HAL_UART_RxCpltCallback+0x34>)
 8000f7e:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <HAL_UART_RxCpltCallback+0x38>)
 8000f80:	f003 ff4e 	bl	8004e20 <HAL_UART_Transmit>
    osMessageQueuePut(rawCommandsHandle, UART3_rxBuffer ,NULL , 0);
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_UART_RxCpltCallback+0x3c>)
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	2300      	movs	r3, #0
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4905      	ldr	r1, [pc, #20]	; (8000fa4 <HAL_UART_RxCpltCallback+0x34>)
 8000f8e:	f006 fd03 	bl	8007998 <osMessageQueuePut>
    HAL_UART_Receive_IT(&huart3, UART3_rxBuffer, 1);
 8000f92:	2201      	movs	r2, #1
 8000f94:	4903      	ldr	r1, [pc, #12]	; (8000fa4 <HAL_UART_RxCpltCallback+0x34>)
 8000f96:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <HAL_UART_RxCpltCallback+0x38>)
 8000f98:	f003 ffd8 	bl	8004f4c <HAL_UART_Receive_IT>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	24000094 	.word	0x24000094
 8000fa8:	24004ba8 	.word	0x24004ba8
 8000fac:	24004b54 	.word	0x24004b54

08000fb0 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fc4:	f7ff fea2 	bl	8000d0c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc8:	480c      	ldr	r0, [pc, #48]	; (8000ffc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fca:	490d      	ldr	r1, [pc, #52]	; (8001000 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fe0:	4c0a      	ldr	r4, [pc, #40]	; (800100c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fee:	f009 fad7 	bl	800a5a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff2:	f7ff fd35 	bl	8000a60 <main>
  bx  lr
 8000ff6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000ffc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001000:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001004:	0800abd0 	.word	0x0800abd0
  ldr r2, =_sbss
 8001008:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 800100c:	24004c88 	.word	0x24004c88

08001010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001010:	e7fe      	b.n	8001010 <ADC_IRQHandler>
	...

08001014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101a:	2003      	movs	r0, #3
 800101c:	f000 f903 	bl	8001226 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001020:	f001 fe8e 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8001024:	4602      	mov	r2, r0
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_Init+0x68>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	0a1b      	lsrs	r3, r3, #8
 800102c:	f003 030f 	and.w	r3, r3, #15
 8001030:	4913      	ldr	r1, [pc, #76]	; (8001080 <HAL_Init+0x6c>)
 8001032:	5ccb      	ldrb	r3, [r1, r3]
 8001034:	f003 031f 	and.w	r3, r3, #31
 8001038:	fa22 f303 	lsr.w	r3, r2, r3
 800103c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_Init+0x68>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <HAL_Init+0x6c>)
 8001048:	5cd3      	ldrb	r3, [r2, r3]
 800104a:	f003 031f 	and.w	r3, r3, #31
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	fa22 f303 	lsr.w	r3, r2, r3
 8001054:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <HAL_Init+0x70>)
 8001056:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001058:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <HAL_Init+0x74>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105e:	200f      	movs	r0, #15
 8001060:	f7ff fdbe 	bl	8000be0 <HAL_InitTick>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e002      	b.n	8001074 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800106e:	f7ff fd99 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	58024400 	.word	0x58024400
 8001080:	0800aa24 	.word	0x0800aa24
 8001084:	24000004 	.word	0x24000004
 8001088:	24000000 	.word	0x24000000

0800108c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_IncTick+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x24>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <HAL_IncTick+0x24>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	2400000c 	.word	0x2400000c
 80010b0:	24004c38 	.word	0x24004c38

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	24004c38 	.word	0x24004c38

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <__NVIC_SetPriorityGrouping+0x40>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <__NVIC_SetPriorityGrouping+0x40>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	05fa0000 	.word	0x05fa0000

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4907      	ldr	r1, [pc, #28]	; (8001168 <__NVIC_EnableIRQ+0x38>)
 800114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ff4c 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800124a:	f7ff ff63 	bl	8001114 <__NVIC_GetPriorityGrouping>
 800124e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	68b9      	ldr	r1, [r7, #8]
 8001254:	6978      	ldr	r0, [r7, #20]
 8001256:	f7ff ffb3 	bl	80011c0 <NVIC_EncodePriority>
 800125a:	4602      	mov	r2, r0
 800125c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001260:	4611      	mov	r1, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff82 	bl	800116c <__NVIC_SetPriority>
}
 8001268:	bf00      	nop
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff56 	bl	8001130 <__NVIC_EnableIRQ>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff ff0e 	bl	80010b4 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e2dc      	b.n	800185e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d008      	beq.n	80012c2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e2cd      	b.n	800185e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a76      	ldr	r2, [pc, #472]	; (80014a0 <HAL_DMA_Abort+0x214>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d04a      	beq.n	8001362 <HAL_DMA_Abort+0xd6>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a74      	ldr	r2, [pc, #464]	; (80014a4 <HAL_DMA_Abort+0x218>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d045      	beq.n	8001362 <HAL_DMA_Abort+0xd6>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a73      	ldr	r2, [pc, #460]	; (80014a8 <HAL_DMA_Abort+0x21c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d040      	beq.n	8001362 <HAL_DMA_Abort+0xd6>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a71      	ldr	r2, [pc, #452]	; (80014ac <HAL_DMA_Abort+0x220>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d03b      	beq.n	8001362 <HAL_DMA_Abort+0xd6>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a70      	ldr	r2, [pc, #448]	; (80014b0 <HAL_DMA_Abort+0x224>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d036      	beq.n	8001362 <HAL_DMA_Abort+0xd6>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a6e      	ldr	r2, [pc, #440]	; (80014b4 <HAL_DMA_Abort+0x228>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d031      	beq.n	8001362 <HAL_DMA_Abort+0xd6>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a6d      	ldr	r2, [pc, #436]	; (80014b8 <HAL_DMA_Abort+0x22c>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d02c      	beq.n	8001362 <HAL_DMA_Abort+0xd6>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a6b      	ldr	r2, [pc, #428]	; (80014bc <HAL_DMA_Abort+0x230>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d027      	beq.n	8001362 <HAL_DMA_Abort+0xd6>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a6a      	ldr	r2, [pc, #424]	; (80014c0 <HAL_DMA_Abort+0x234>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d022      	beq.n	8001362 <HAL_DMA_Abort+0xd6>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a68      	ldr	r2, [pc, #416]	; (80014c4 <HAL_DMA_Abort+0x238>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d01d      	beq.n	8001362 <HAL_DMA_Abort+0xd6>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a67      	ldr	r2, [pc, #412]	; (80014c8 <HAL_DMA_Abort+0x23c>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d018      	beq.n	8001362 <HAL_DMA_Abort+0xd6>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a65      	ldr	r2, [pc, #404]	; (80014cc <HAL_DMA_Abort+0x240>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_DMA_Abort+0xd6>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a64      	ldr	r2, [pc, #400]	; (80014d0 <HAL_DMA_Abort+0x244>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d00e      	beq.n	8001362 <HAL_DMA_Abort+0xd6>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a62      	ldr	r2, [pc, #392]	; (80014d4 <HAL_DMA_Abort+0x248>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d009      	beq.n	8001362 <HAL_DMA_Abort+0xd6>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a61      	ldr	r2, [pc, #388]	; (80014d8 <HAL_DMA_Abort+0x24c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d004      	beq.n	8001362 <HAL_DMA_Abort+0xd6>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a5f      	ldr	r2, [pc, #380]	; (80014dc <HAL_DMA_Abort+0x250>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_DMA_Abort+0xda>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_DMA_Abort+0xdc>
 8001366:	2300      	movs	r3, #0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d013      	beq.n	8001394 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 021e 	bic.w	r2, r2, #30
 800137a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	695a      	ldr	r2, [r3, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800138a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	e00a      	b.n	80013aa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 020e 	bic.w	r2, r2, #14
 80013a2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a3c      	ldr	r2, [pc, #240]	; (80014a0 <HAL_DMA_Abort+0x214>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d072      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a3a      	ldr	r2, [pc, #232]	; (80014a4 <HAL_DMA_Abort+0x218>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d06d      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a39      	ldr	r2, [pc, #228]	; (80014a8 <HAL_DMA_Abort+0x21c>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d068      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a37      	ldr	r2, [pc, #220]	; (80014ac <HAL_DMA_Abort+0x220>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d063      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a36      	ldr	r2, [pc, #216]	; (80014b0 <HAL_DMA_Abort+0x224>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d05e      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a34      	ldr	r2, [pc, #208]	; (80014b4 <HAL_DMA_Abort+0x228>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d059      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a33      	ldr	r2, [pc, #204]	; (80014b8 <HAL_DMA_Abort+0x22c>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d054      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a31      	ldr	r2, [pc, #196]	; (80014bc <HAL_DMA_Abort+0x230>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d04f      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a30      	ldr	r2, [pc, #192]	; (80014c0 <HAL_DMA_Abort+0x234>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d04a      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a2e      	ldr	r2, [pc, #184]	; (80014c4 <HAL_DMA_Abort+0x238>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d045      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a2d      	ldr	r2, [pc, #180]	; (80014c8 <HAL_DMA_Abort+0x23c>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d040      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a2b      	ldr	r2, [pc, #172]	; (80014cc <HAL_DMA_Abort+0x240>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d03b      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a2a      	ldr	r2, [pc, #168]	; (80014d0 <HAL_DMA_Abort+0x244>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d036      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a28      	ldr	r2, [pc, #160]	; (80014d4 <HAL_DMA_Abort+0x248>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d031      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a27      	ldr	r2, [pc, #156]	; (80014d8 <HAL_DMA_Abort+0x24c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d02c      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a25      	ldr	r2, [pc, #148]	; (80014dc <HAL_DMA_Abort+0x250>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d027      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a24      	ldr	r2, [pc, #144]	; (80014e0 <HAL_DMA_Abort+0x254>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d022      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a22      	ldr	r2, [pc, #136]	; (80014e4 <HAL_DMA_Abort+0x258>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d01d      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a21      	ldr	r2, [pc, #132]	; (80014e8 <HAL_DMA_Abort+0x25c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d018      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a1f      	ldr	r2, [pc, #124]	; (80014ec <HAL_DMA_Abort+0x260>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d013      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <HAL_DMA_Abort+0x264>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d00e      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a1c      	ldr	r2, [pc, #112]	; (80014f4 <HAL_DMA_Abort+0x268>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d009      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <HAL_DMA_Abort+0x26c>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d004      	beq.n	800149a <HAL_DMA_Abort+0x20e>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a19      	ldr	r2, [pc, #100]	; (80014fc <HAL_DMA_Abort+0x270>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d132      	bne.n	8001500 <HAL_DMA_Abort+0x274>
 800149a:	2301      	movs	r3, #1
 800149c:	e031      	b.n	8001502 <HAL_DMA_Abort+0x276>
 800149e:	bf00      	nop
 80014a0:	40020010 	.word	0x40020010
 80014a4:	40020028 	.word	0x40020028
 80014a8:	40020040 	.word	0x40020040
 80014ac:	40020058 	.word	0x40020058
 80014b0:	40020070 	.word	0x40020070
 80014b4:	40020088 	.word	0x40020088
 80014b8:	400200a0 	.word	0x400200a0
 80014bc:	400200b8 	.word	0x400200b8
 80014c0:	40020410 	.word	0x40020410
 80014c4:	40020428 	.word	0x40020428
 80014c8:	40020440 	.word	0x40020440
 80014cc:	40020458 	.word	0x40020458
 80014d0:	40020470 	.word	0x40020470
 80014d4:	40020488 	.word	0x40020488
 80014d8:	400204a0 	.word	0x400204a0
 80014dc:	400204b8 	.word	0x400204b8
 80014e0:	58025408 	.word	0x58025408
 80014e4:	5802541c 	.word	0x5802541c
 80014e8:	58025430 	.word	0x58025430
 80014ec:	58025444 	.word	0x58025444
 80014f0:	58025458 	.word	0x58025458
 80014f4:	5802546c 	.word	0x5802546c
 80014f8:	58025480 	.word	0x58025480
 80014fc:	58025494 	.word	0x58025494
 8001500:	2300      	movs	r3, #0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001514:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a6d      	ldr	r2, [pc, #436]	; (80016d0 <HAL_DMA_Abort+0x444>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d04a      	beq.n	80015b6 <HAL_DMA_Abort+0x32a>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a6b      	ldr	r2, [pc, #428]	; (80016d4 <HAL_DMA_Abort+0x448>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d045      	beq.n	80015b6 <HAL_DMA_Abort+0x32a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a6a      	ldr	r2, [pc, #424]	; (80016d8 <HAL_DMA_Abort+0x44c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d040      	beq.n	80015b6 <HAL_DMA_Abort+0x32a>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a68      	ldr	r2, [pc, #416]	; (80016dc <HAL_DMA_Abort+0x450>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d03b      	beq.n	80015b6 <HAL_DMA_Abort+0x32a>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a67      	ldr	r2, [pc, #412]	; (80016e0 <HAL_DMA_Abort+0x454>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d036      	beq.n	80015b6 <HAL_DMA_Abort+0x32a>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a65      	ldr	r2, [pc, #404]	; (80016e4 <HAL_DMA_Abort+0x458>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d031      	beq.n	80015b6 <HAL_DMA_Abort+0x32a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a64      	ldr	r2, [pc, #400]	; (80016e8 <HAL_DMA_Abort+0x45c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d02c      	beq.n	80015b6 <HAL_DMA_Abort+0x32a>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a62      	ldr	r2, [pc, #392]	; (80016ec <HAL_DMA_Abort+0x460>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d027      	beq.n	80015b6 <HAL_DMA_Abort+0x32a>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a61      	ldr	r2, [pc, #388]	; (80016f0 <HAL_DMA_Abort+0x464>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d022      	beq.n	80015b6 <HAL_DMA_Abort+0x32a>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a5f      	ldr	r2, [pc, #380]	; (80016f4 <HAL_DMA_Abort+0x468>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d01d      	beq.n	80015b6 <HAL_DMA_Abort+0x32a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a5e      	ldr	r2, [pc, #376]	; (80016f8 <HAL_DMA_Abort+0x46c>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d018      	beq.n	80015b6 <HAL_DMA_Abort+0x32a>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a5c      	ldr	r2, [pc, #368]	; (80016fc <HAL_DMA_Abort+0x470>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_DMA_Abort+0x32a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a5b      	ldr	r2, [pc, #364]	; (8001700 <HAL_DMA_Abort+0x474>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d00e      	beq.n	80015b6 <HAL_DMA_Abort+0x32a>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a59      	ldr	r2, [pc, #356]	; (8001704 <HAL_DMA_Abort+0x478>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d009      	beq.n	80015b6 <HAL_DMA_Abort+0x32a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a58      	ldr	r2, [pc, #352]	; (8001708 <HAL_DMA_Abort+0x47c>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d004      	beq.n	80015b6 <HAL_DMA_Abort+0x32a>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a56      	ldr	r2, [pc, #344]	; (800170c <HAL_DMA_Abort+0x480>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d108      	bne.n	80015c8 <HAL_DMA_Abort+0x33c>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0201 	bic.w	r2, r2, #1
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	e007      	b.n	80015d8 <HAL_DMA_Abort+0x34c>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80015d8:	e013      	b.n	8001602 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015da:	f7ff fd6b 	bl	80010b4 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b05      	cmp	r3, #5
 80015e6:	d90c      	bls.n	8001602 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2220      	movs	r2, #32
 80015ec:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2203      	movs	r2, #3
 80015f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e12d      	b.n	800185e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1e5      	bne.n	80015da <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a2f      	ldr	r2, [pc, #188]	; (80016d0 <HAL_DMA_Abort+0x444>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d04a      	beq.n	80016ae <HAL_DMA_Abort+0x422>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a2d      	ldr	r2, [pc, #180]	; (80016d4 <HAL_DMA_Abort+0x448>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d045      	beq.n	80016ae <HAL_DMA_Abort+0x422>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a2c      	ldr	r2, [pc, #176]	; (80016d8 <HAL_DMA_Abort+0x44c>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d040      	beq.n	80016ae <HAL_DMA_Abort+0x422>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a2a      	ldr	r2, [pc, #168]	; (80016dc <HAL_DMA_Abort+0x450>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d03b      	beq.n	80016ae <HAL_DMA_Abort+0x422>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <HAL_DMA_Abort+0x454>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d036      	beq.n	80016ae <HAL_DMA_Abort+0x422>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a27      	ldr	r2, [pc, #156]	; (80016e4 <HAL_DMA_Abort+0x458>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d031      	beq.n	80016ae <HAL_DMA_Abort+0x422>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a26      	ldr	r2, [pc, #152]	; (80016e8 <HAL_DMA_Abort+0x45c>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d02c      	beq.n	80016ae <HAL_DMA_Abort+0x422>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a24      	ldr	r2, [pc, #144]	; (80016ec <HAL_DMA_Abort+0x460>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d027      	beq.n	80016ae <HAL_DMA_Abort+0x422>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a23      	ldr	r2, [pc, #140]	; (80016f0 <HAL_DMA_Abort+0x464>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d022      	beq.n	80016ae <HAL_DMA_Abort+0x422>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a21      	ldr	r2, [pc, #132]	; (80016f4 <HAL_DMA_Abort+0x468>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d01d      	beq.n	80016ae <HAL_DMA_Abort+0x422>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a20      	ldr	r2, [pc, #128]	; (80016f8 <HAL_DMA_Abort+0x46c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d018      	beq.n	80016ae <HAL_DMA_Abort+0x422>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <HAL_DMA_Abort+0x470>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d013      	beq.n	80016ae <HAL_DMA_Abort+0x422>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a1d      	ldr	r2, [pc, #116]	; (8001700 <HAL_DMA_Abort+0x474>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d00e      	beq.n	80016ae <HAL_DMA_Abort+0x422>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a1b      	ldr	r2, [pc, #108]	; (8001704 <HAL_DMA_Abort+0x478>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d009      	beq.n	80016ae <HAL_DMA_Abort+0x422>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a1a      	ldr	r2, [pc, #104]	; (8001708 <HAL_DMA_Abort+0x47c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d004      	beq.n	80016ae <HAL_DMA_Abort+0x422>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a18      	ldr	r2, [pc, #96]	; (800170c <HAL_DMA_Abort+0x480>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_DMA_Abort+0x426>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_DMA_Abort+0x428>
 80016b2:	2300      	movs	r3, #0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d02b      	beq.n	8001710 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016bc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c2:	f003 031f 	and.w	r3, r3, #31
 80016c6:	223f      	movs	r2, #63	; 0x3f
 80016c8:	409a      	lsls	r2, r3
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	e02a      	b.n	8001726 <HAL_DMA_Abort+0x49a>
 80016d0:	40020010 	.word	0x40020010
 80016d4:	40020028 	.word	0x40020028
 80016d8:	40020040 	.word	0x40020040
 80016dc:	40020058 	.word	0x40020058
 80016e0:	40020070 	.word	0x40020070
 80016e4:	40020088 	.word	0x40020088
 80016e8:	400200a0 	.word	0x400200a0
 80016ec:	400200b8 	.word	0x400200b8
 80016f0:	40020410 	.word	0x40020410
 80016f4:	40020428 	.word	0x40020428
 80016f8:	40020440 	.word	0x40020440
 80016fc:	40020458 	.word	0x40020458
 8001700:	40020470 	.word	0x40020470
 8001704:	40020488 	.word	0x40020488
 8001708:	400204a0 	.word	0x400204a0
 800170c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001714:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	2201      	movs	r2, #1
 8001720:	409a      	lsls	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a4f      	ldr	r2, [pc, #316]	; (8001868 <HAL_DMA_Abort+0x5dc>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d072      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a4d      	ldr	r2, [pc, #308]	; (800186c <HAL_DMA_Abort+0x5e0>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d06d      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a4c      	ldr	r2, [pc, #304]	; (8001870 <HAL_DMA_Abort+0x5e4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d068      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a4a      	ldr	r2, [pc, #296]	; (8001874 <HAL_DMA_Abort+0x5e8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d063      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a49      	ldr	r2, [pc, #292]	; (8001878 <HAL_DMA_Abort+0x5ec>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d05e      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a47      	ldr	r2, [pc, #284]	; (800187c <HAL_DMA_Abort+0x5f0>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d059      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a46      	ldr	r2, [pc, #280]	; (8001880 <HAL_DMA_Abort+0x5f4>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d054      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a44      	ldr	r2, [pc, #272]	; (8001884 <HAL_DMA_Abort+0x5f8>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d04f      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a43      	ldr	r2, [pc, #268]	; (8001888 <HAL_DMA_Abort+0x5fc>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d04a      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a41      	ldr	r2, [pc, #260]	; (800188c <HAL_DMA_Abort+0x600>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d045      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a40      	ldr	r2, [pc, #256]	; (8001890 <HAL_DMA_Abort+0x604>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d040      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a3e      	ldr	r2, [pc, #248]	; (8001894 <HAL_DMA_Abort+0x608>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d03b      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a3d      	ldr	r2, [pc, #244]	; (8001898 <HAL_DMA_Abort+0x60c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d036      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a3b      	ldr	r2, [pc, #236]	; (800189c <HAL_DMA_Abort+0x610>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d031      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a3a      	ldr	r2, [pc, #232]	; (80018a0 <HAL_DMA_Abort+0x614>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d02c      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a38      	ldr	r2, [pc, #224]	; (80018a4 <HAL_DMA_Abort+0x618>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d027      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a37      	ldr	r2, [pc, #220]	; (80018a8 <HAL_DMA_Abort+0x61c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d022      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a35      	ldr	r2, [pc, #212]	; (80018ac <HAL_DMA_Abort+0x620>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d01d      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a34      	ldr	r2, [pc, #208]	; (80018b0 <HAL_DMA_Abort+0x624>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d018      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a32      	ldr	r2, [pc, #200]	; (80018b4 <HAL_DMA_Abort+0x628>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a31      	ldr	r2, [pc, #196]	; (80018b8 <HAL_DMA_Abort+0x62c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d00e      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a2f      	ldr	r2, [pc, #188]	; (80018bc <HAL_DMA_Abort+0x630>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d009      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a2e      	ldr	r2, [pc, #184]	; (80018c0 <HAL_DMA_Abort+0x634>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d004      	beq.n	8001816 <HAL_DMA_Abort+0x58a>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a2c      	ldr	r2, [pc, #176]	; (80018c4 <HAL_DMA_Abort+0x638>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_DMA_Abort+0x58e>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_DMA_Abort+0x590>
 800181a:	2300      	movs	r3, #0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d015      	beq.n	800184c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001828:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00c      	beq.n	800184c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800183c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001840:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800184a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40020010 	.word	0x40020010
 800186c:	40020028 	.word	0x40020028
 8001870:	40020040 	.word	0x40020040
 8001874:	40020058 	.word	0x40020058
 8001878:	40020070 	.word	0x40020070
 800187c:	40020088 	.word	0x40020088
 8001880:	400200a0 	.word	0x400200a0
 8001884:	400200b8 	.word	0x400200b8
 8001888:	40020410 	.word	0x40020410
 800188c:	40020428 	.word	0x40020428
 8001890:	40020440 	.word	0x40020440
 8001894:	40020458 	.word	0x40020458
 8001898:	40020470 	.word	0x40020470
 800189c:	40020488 	.word	0x40020488
 80018a0:	400204a0 	.word	0x400204a0
 80018a4:	400204b8 	.word	0x400204b8
 80018a8:	58025408 	.word	0x58025408
 80018ac:	5802541c 	.word	0x5802541c
 80018b0:	58025430 	.word	0x58025430
 80018b4:	58025444 	.word	0x58025444
 80018b8:	58025458 	.word	0x58025458
 80018bc:	5802546c 	.word	0x5802546c
 80018c0:	58025480 	.word	0x58025480
 80018c4:	58025494 	.word	0x58025494

080018c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e205      	b.n	8001ce6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d004      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2280      	movs	r2, #128	; 0x80
 80018ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e1fa      	b.n	8001ce6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a8c      	ldr	r2, [pc, #560]	; (8001b28 <HAL_DMA_Abort_IT+0x260>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d04a      	beq.n	8001990 <HAL_DMA_Abort_IT+0xc8>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a8b      	ldr	r2, [pc, #556]	; (8001b2c <HAL_DMA_Abort_IT+0x264>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d045      	beq.n	8001990 <HAL_DMA_Abort_IT+0xc8>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a89      	ldr	r2, [pc, #548]	; (8001b30 <HAL_DMA_Abort_IT+0x268>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d040      	beq.n	8001990 <HAL_DMA_Abort_IT+0xc8>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a88      	ldr	r2, [pc, #544]	; (8001b34 <HAL_DMA_Abort_IT+0x26c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d03b      	beq.n	8001990 <HAL_DMA_Abort_IT+0xc8>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a86      	ldr	r2, [pc, #536]	; (8001b38 <HAL_DMA_Abort_IT+0x270>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d036      	beq.n	8001990 <HAL_DMA_Abort_IT+0xc8>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a85      	ldr	r2, [pc, #532]	; (8001b3c <HAL_DMA_Abort_IT+0x274>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d031      	beq.n	8001990 <HAL_DMA_Abort_IT+0xc8>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a83      	ldr	r2, [pc, #524]	; (8001b40 <HAL_DMA_Abort_IT+0x278>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d02c      	beq.n	8001990 <HAL_DMA_Abort_IT+0xc8>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a82      	ldr	r2, [pc, #520]	; (8001b44 <HAL_DMA_Abort_IT+0x27c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d027      	beq.n	8001990 <HAL_DMA_Abort_IT+0xc8>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a80      	ldr	r2, [pc, #512]	; (8001b48 <HAL_DMA_Abort_IT+0x280>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d022      	beq.n	8001990 <HAL_DMA_Abort_IT+0xc8>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a7f      	ldr	r2, [pc, #508]	; (8001b4c <HAL_DMA_Abort_IT+0x284>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d01d      	beq.n	8001990 <HAL_DMA_Abort_IT+0xc8>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a7d      	ldr	r2, [pc, #500]	; (8001b50 <HAL_DMA_Abort_IT+0x288>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d018      	beq.n	8001990 <HAL_DMA_Abort_IT+0xc8>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a7c      	ldr	r2, [pc, #496]	; (8001b54 <HAL_DMA_Abort_IT+0x28c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d013      	beq.n	8001990 <HAL_DMA_Abort_IT+0xc8>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a7a      	ldr	r2, [pc, #488]	; (8001b58 <HAL_DMA_Abort_IT+0x290>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d00e      	beq.n	8001990 <HAL_DMA_Abort_IT+0xc8>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a79      	ldr	r2, [pc, #484]	; (8001b5c <HAL_DMA_Abort_IT+0x294>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d009      	beq.n	8001990 <HAL_DMA_Abort_IT+0xc8>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a77      	ldr	r2, [pc, #476]	; (8001b60 <HAL_DMA_Abort_IT+0x298>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d004      	beq.n	8001990 <HAL_DMA_Abort_IT+0xc8>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a76      	ldr	r2, [pc, #472]	; (8001b64 <HAL_DMA_Abort_IT+0x29c>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d101      	bne.n	8001994 <HAL_DMA_Abort_IT+0xcc>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_DMA_Abort_IT+0xce>
 8001994:	2300      	movs	r3, #0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d065      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2204      	movs	r2, #4
 800199e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a60      	ldr	r2, [pc, #384]	; (8001b28 <HAL_DMA_Abort_IT+0x260>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d04a      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x17a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a5e      	ldr	r2, [pc, #376]	; (8001b2c <HAL_DMA_Abort_IT+0x264>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d045      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x17a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a5d      	ldr	r2, [pc, #372]	; (8001b30 <HAL_DMA_Abort_IT+0x268>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d040      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x17a>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a5b      	ldr	r2, [pc, #364]	; (8001b34 <HAL_DMA_Abort_IT+0x26c>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d03b      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x17a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a5a      	ldr	r2, [pc, #360]	; (8001b38 <HAL_DMA_Abort_IT+0x270>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d036      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x17a>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a58      	ldr	r2, [pc, #352]	; (8001b3c <HAL_DMA_Abort_IT+0x274>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d031      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x17a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a57      	ldr	r2, [pc, #348]	; (8001b40 <HAL_DMA_Abort_IT+0x278>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d02c      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x17a>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a55      	ldr	r2, [pc, #340]	; (8001b44 <HAL_DMA_Abort_IT+0x27c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d027      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x17a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a54      	ldr	r2, [pc, #336]	; (8001b48 <HAL_DMA_Abort_IT+0x280>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d022      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x17a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a52      	ldr	r2, [pc, #328]	; (8001b4c <HAL_DMA_Abort_IT+0x284>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d01d      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x17a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a51      	ldr	r2, [pc, #324]	; (8001b50 <HAL_DMA_Abort_IT+0x288>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d018      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x17a>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a4f      	ldr	r2, [pc, #316]	; (8001b54 <HAL_DMA_Abort_IT+0x28c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d013      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x17a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a4e      	ldr	r2, [pc, #312]	; (8001b58 <HAL_DMA_Abort_IT+0x290>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d00e      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x17a>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a4c      	ldr	r2, [pc, #304]	; (8001b5c <HAL_DMA_Abort_IT+0x294>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d009      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x17a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a4b      	ldr	r2, [pc, #300]	; (8001b60 <HAL_DMA_Abort_IT+0x298>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d004      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x17a>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a49      	ldr	r2, [pc, #292]	; (8001b64 <HAL_DMA_Abort_IT+0x29c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d108      	bne.n	8001a54 <HAL_DMA_Abort_IT+0x18c>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0201 	bic.w	r2, r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	e147      	b.n	8001ce4 <HAL_DMA_Abort_IT+0x41c>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e13e      	b.n	8001ce4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 020e 	bic.w	r2, r2, #14
 8001a74:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a2b      	ldr	r2, [pc, #172]	; (8001b28 <HAL_DMA_Abort_IT+0x260>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d04a      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x24e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a29      	ldr	r2, [pc, #164]	; (8001b2c <HAL_DMA_Abort_IT+0x264>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d045      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x24e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a28      	ldr	r2, [pc, #160]	; (8001b30 <HAL_DMA_Abort_IT+0x268>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d040      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x24e>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a26      	ldr	r2, [pc, #152]	; (8001b34 <HAL_DMA_Abort_IT+0x26c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d03b      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x24e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a25      	ldr	r2, [pc, #148]	; (8001b38 <HAL_DMA_Abort_IT+0x270>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d036      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x24e>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <HAL_DMA_Abort_IT+0x274>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d031      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x24e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a22      	ldr	r2, [pc, #136]	; (8001b40 <HAL_DMA_Abort_IT+0x278>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d02c      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x24e>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a20      	ldr	r2, [pc, #128]	; (8001b44 <HAL_DMA_Abort_IT+0x27c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d027      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x24e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a1f      	ldr	r2, [pc, #124]	; (8001b48 <HAL_DMA_Abort_IT+0x280>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d022      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x24e>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <HAL_DMA_Abort_IT+0x284>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d01d      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x24e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <HAL_DMA_Abort_IT+0x288>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d018      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x24e>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1a      	ldr	r2, [pc, #104]	; (8001b54 <HAL_DMA_Abort_IT+0x28c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d013      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x24e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a19      	ldr	r2, [pc, #100]	; (8001b58 <HAL_DMA_Abort_IT+0x290>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d00e      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x24e>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <HAL_DMA_Abort_IT+0x294>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d009      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x24e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a16      	ldr	r2, [pc, #88]	; (8001b60 <HAL_DMA_Abort_IT+0x298>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d004      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x24e>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <HAL_DMA_Abort_IT+0x29c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d128      	bne.n	8001b68 <HAL_DMA_Abort_IT+0x2a0>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0201 	bic.w	r2, r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	e027      	b.n	8001b78 <HAL_DMA_Abort_IT+0x2b0>
 8001b28:	40020010 	.word	0x40020010
 8001b2c:	40020028 	.word	0x40020028
 8001b30:	40020040 	.word	0x40020040
 8001b34:	40020058 	.word	0x40020058
 8001b38:	40020070 	.word	0x40020070
 8001b3c:	40020088 	.word	0x40020088
 8001b40:	400200a0 	.word	0x400200a0
 8001b44:	400200b8 	.word	0x400200b8
 8001b48:	40020410 	.word	0x40020410
 8001b4c:	40020428 	.word	0x40020428
 8001b50:	40020440 	.word	0x40020440
 8001b54:	40020458 	.word	0x40020458
 8001b58:	40020470 	.word	0x40020470
 8001b5c:	40020488 	.word	0x40020488
 8001b60:	400204a0 	.word	0x400204a0
 8001b64:	400204b8 	.word	0x400204b8
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0201 	bic.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a5c      	ldr	r2, [pc, #368]	; (8001cf0 <HAL_DMA_Abort_IT+0x428>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d072      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a5b      	ldr	r2, [pc, #364]	; (8001cf4 <HAL_DMA_Abort_IT+0x42c>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d06d      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a59      	ldr	r2, [pc, #356]	; (8001cf8 <HAL_DMA_Abort_IT+0x430>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d068      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a58      	ldr	r2, [pc, #352]	; (8001cfc <HAL_DMA_Abort_IT+0x434>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d063      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a56      	ldr	r2, [pc, #344]	; (8001d00 <HAL_DMA_Abort_IT+0x438>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d05e      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a55      	ldr	r2, [pc, #340]	; (8001d04 <HAL_DMA_Abort_IT+0x43c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d059      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a53      	ldr	r2, [pc, #332]	; (8001d08 <HAL_DMA_Abort_IT+0x440>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d054      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a52      	ldr	r2, [pc, #328]	; (8001d0c <HAL_DMA_Abort_IT+0x444>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d04f      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a50      	ldr	r2, [pc, #320]	; (8001d10 <HAL_DMA_Abort_IT+0x448>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d04a      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a4f      	ldr	r2, [pc, #316]	; (8001d14 <HAL_DMA_Abort_IT+0x44c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d045      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a4d      	ldr	r2, [pc, #308]	; (8001d18 <HAL_DMA_Abort_IT+0x450>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d040      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a4c      	ldr	r2, [pc, #304]	; (8001d1c <HAL_DMA_Abort_IT+0x454>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d03b      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a4a      	ldr	r2, [pc, #296]	; (8001d20 <HAL_DMA_Abort_IT+0x458>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d036      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a49      	ldr	r2, [pc, #292]	; (8001d24 <HAL_DMA_Abort_IT+0x45c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d031      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a47      	ldr	r2, [pc, #284]	; (8001d28 <HAL_DMA_Abort_IT+0x460>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d02c      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a46      	ldr	r2, [pc, #280]	; (8001d2c <HAL_DMA_Abort_IT+0x464>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d027      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a44      	ldr	r2, [pc, #272]	; (8001d30 <HAL_DMA_Abort_IT+0x468>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d022      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a43      	ldr	r2, [pc, #268]	; (8001d34 <HAL_DMA_Abort_IT+0x46c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d01d      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a41      	ldr	r2, [pc, #260]	; (8001d38 <HAL_DMA_Abort_IT+0x470>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d018      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a40      	ldr	r2, [pc, #256]	; (8001d3c <HAL_DMA_Abort_IT+0x474>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d013      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a3e      	ldr	r2, [pc, #248]	; (8001d40 <HAL_DMA_Abort_IT+0x478>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00e      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a3d      	ldr	r2, [pc, #244]	; (8001d44 <HAL_DMA_Abort_IT+0x47c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d009      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a3b      	ldr	r2, [pc, #236]	; (8001d48 <HAL_DMA_Abort_IT+0x480>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d004      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x3a0>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a3a      	ldr	r2, [pc, #232]	; (8001d4c <HAL_DMA_Abort_IT+0x484>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d101      	bne.n	8001c6c <HAL_DMA_Abort_IT+0x3a4>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <HAL_DMA_Abort_IT+0x3a6>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d028      	beq.n	8001cc4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c80:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c86:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	2201      	movs	r2, #1
 8001c92:	409a      	lsls	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ca0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00c      	beq.n	8001cc4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cb8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001cc2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40020010 	.word	0x40020010
 8001cf4:	40020028 	.word	0x40020028
 8001cf8:	40020040 	.word	0x40020040
 8001cfc:	40020058 	.word	0x40020058
 8001d00:	40020070 	.word	0x40020070
 8001d04:	40020088 	.word	0x40020088
 8001d08:	400200a0 	.word	0x400200a0
 8001d0c:	400200b8 	.word	0x400200b8
 8001d10:	40020410 	.word	0x40020410
 8001d14:	40020428 	.word	0x40020428
 8001d18:	40020440 	.word	0x40020440
 8001d1c:	40020458 	.word	0x40020458
 8001d20:	40020470 	.word	0x40020470
 8001d24:	40020488 	.word	0x40020488
 8001d28:	400204a0 	.word	0x400204a0
 8001d2c:	400204b8 	.word	0x400204b8
 8001d30:	58025408 	.word	0x58025408
 8001d34:	5802541c 	.word	0x5802541c
 8001d38:	58025430 	.word	0x58025430
 8001d3c:	58025444 	.word	0x58025444
 8001d40:	58025458 	.word	0x58025458
 8001d44:	5802546c 	.word	0x5802546c
 8001d48:	58025480 	.word	0x58025480
 8001d4c:	58025494 	.word	0x58025494

08001d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d5e:	4b89      	ldr	r3, [pc, #548]	; (8001f84 <HAL_GPIO_Init+0x234>)
 8001d60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d62:	e194      	b.n	800208e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	2101      	movs	r1, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 8186 	beq.w	8002088 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d005      	beq.n	8001d94 <HAL_GPIO_Init+0x44>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d130      	bne.n	8001df6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dca:	2201      	movs	r2, #1
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	f003 0201 	and.w	r2, r3, #1
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d017      	beq.n	8001e32 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d123      	bne.n	8001e86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	08da      	lsrs	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3208      	adds	r2, #8
 8001e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	220f      	movs	r2, #15
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	691a      	ldr	r2, [r3, #16]
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	08da      	lsrs	r2, r3, #3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3208      	adds	r2, #8
 8001e80:	69b9      	ldr	r1, [r7, #24]
 8001e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	2203      	movs	r2, #3
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0203 	and.w	r2, r3, #3
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 80e0 	beq.w	8002088 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec8:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <HAL_GPIO_Init+0x238>)
 8001eca:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001ece:	4a2e      	ldr	r2, [pc, #184]	; (8001f88 <HAL_GPIO_Init+0x238>)
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <HAL_GPIO_Init+0x238>)
 8001eda:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ee6:	4a29      	ldr	r2, [pc, #164]	; (8001f8c <HAL_GPIO_Init+0x23c>)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	3302      	adds	r3, #2
 8001eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	220f      	movs	r2, #15
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a20      	ldr	r2, [pc, #128]	; (8001f90 <HAL_GPIO_Init+0x240>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d052      	beq.n	8001fb8 <HAL_GPIO_Init+0x268>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <HAL_GPIO_Init+0x244>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d031      	beq.n	8001f7e <HAL_GPIO_Init+0x22e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a1e      	ldr	r2, [pc, #120]	; (8001f98 <HAL_GPIO_Init+0x248>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d02b      	beq.n	8001f7a <HAL_GPIO_Init+0x22a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <HAL_GPIO_Init+0x24c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d025      	beq.n	8001f76 <HAL_GPIO_Init+0x226>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a1c      	ldr	r2, [pc, #112]	; (8001fa0 <HAL_GPIO_Init+0x250>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d01f      	beq.n	8001f72 <HAL_GPIO_Init+0x222>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a1b      	ldr	r2, [pc, #108]	; (8001fa4 <HAL_GPIO_Init+0x254>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d019      	beq.n	8001f6e <HAL_GPIO_Init+0x21e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a1a      	ldr	r2, [pc, #104]	; (8001fa8 <HAL_GPIO_Init+0x258>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d013      	beq.n	8001f6a <HAL_GPIO_Init+0x21a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a19      	ldr	r2, [pc, #100]	; (8001fac <HAL_GPIO_Init+0x25c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00d      	beq.n	8001f66 <HAL_GPIO_Init+0x216>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <HAL_GPIO_Init+0x260>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d007      	beq.n	8001f62 <HAL_GPIO_Init+0x212>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a17      	ldr	r2, [pc, #92]	; (8001fb4 <HAL_GPIO_Init+0x264>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d101      	bne.n	8001f5e <HAL_GPIO_Init+0x20e>
 8001f5a:	2309      	movs	r3, #9
 8001f5c:	e02d      	b.n	8001fba <HAL_GPIO_Init+0x26a>
 8001f5e:	230a      	movs	r3, #10
 8001f60:	e02b      	b.n	8001fba <HAL_GPIO_Init+0x26a>
 8001f62:	2308      	movs	r3, #8
 8001f64:	e029      	b.n	8001fba <HAL_GPIO_Init+0x26a>
 8001f66:	2307      	movs	r3, #7
 8001f68:	e027      	b.n	8001fba <HAL_GPIO_Init+0x26a>
 8001f6a:	2306      	movs	r3, #6
 8001f6c:	e025      	b.n	8001fba <HAL_GPIO_Init+0x26a>
 8001f6e:	2305      	movs	r3, #5
 8001f70:	e023      	b.n	8001fba <HAL_GPIO_Init+0x26a>
 8001f72:	2304      	movs	r3, #4
 8001f74:	e021      	b.n	8001fba <HAL_GPIO_Init+0x26a>
 8001f76:	2303      	movs	r3, #3
 8001f78:	e01f      	b.n	8001fba <HAL_GPIO_Init+0x26a>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e01d      	b.n	8001fba <HAL_GPIO_Init+0x26a>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e01b      	b.n	8001fba <HAL_GPIO_Init+0x26a>
 8001f82:	bf00      	nop
 8001f84:	58000080 	.word	0x58000080
 8001f88:	58024400 	.word	0x58024400
 8001f8c:	58000400 	.word	0x58000400
 8001f90:	58020000 	.word	0x58020000
 8001f94:	58020400 	.word	0x58020400
 8001f98:	58020800 	.word	0x58020800
 8001f9c:	58020c00 	.word	0x58020c00
 8001fa0:	58021000 	.word	0x58021000
 8001fa4:	58021400 	.word	0x58021400
 8001fa8:	58021800 	.word	0x58021800
 8001fac:	58021c00 	.word	0x58021c00
 8001fb0:	58022000 	.word	0x58022000
 8001fb4:	58022400 	.word	0x58022400
 8001fb8:	2300      	movs	r3, #0
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	f002 0203 	and.w	r2, r2, #3
 8001fc0:	0092      	lsls	r2, r2, #2
 8001fc2:	4093      	lsls	r3, r2
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fca:	4938      	ldr	r1, [pc, #224]	; (80020ac <HAL_GPIO_Init+0x35c>)
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ffe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800202c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	3301      	adds	r3, #1
 800208c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	f47f ae63 	bne.w	8001d64 <HAL_GPIO_Init+0x14>
  }
}
 800209e:	bf00      	nop
 80020a0:	bf00      	nop
 80020a2:	3724      	adds	r7, #36	; 0x24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	58000400 	.word	0x58000400

080020b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
 80020bc:	4613      	mov	r3, r2
 80020be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c0:	787b      	ldrb	r3, [r7, #1]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c6:	887a      	ldrh	r2, [r7, #2]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020cc:	e003      	b.n	80020d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020ce:	887b      	ldrh	r3, [r7, #2]
 80020d0:	041a      	lsls	r2, r3, #16
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	619a      	str	r2, [r3, #24]
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b085      	sub	sp, #20
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020f4:	887a      	ldrh	r2, [r7, #2]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4013      	ands	r3, r2
 80020fa:	041a      	lsls	r2, r3, #16
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	43d9      	mvns	r1, r3
 8002100:	887b      	ldrh	r3, [r7, #2]
 8002102:	400b      	ands	r3, r1
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	619a      	str	r2, [r3, #24]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002120:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	2b06      	cmp	r3, #6
 800212a:	d00a      	beq.n	8002142 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800212c:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	429a      	cmp	r2, r3
 8002138:	d001      	beq.n	800213e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e040      	b.n	80021c0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e03e      	b.n	80021c0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002142:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800214a:	491f      	ldr	r1, [pc, #124]	; (80021c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4313      	orrs	r3, r2
 8002150:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002152:	f7fe ffaf 	bl	80010b4 <HAL_GetTick>
 8002156:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002158:	e009      	b.n	800216e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800215a:	f7fe ffab 	bl	80010b4 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002168:	d901      	bls.n	800216e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e028      	b.n	80021c0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800217a:	d1ee      	bne.n	800215a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b1e      	cmp	r3, #30
 8002180:	d008      	beq.n	8002194 <HAL_PWREx_ConfigSupply+0x7c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b2e      	cmp	r3, #46	; 0x2e
 8002186:	d005      	beq.n	8002194 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b1d      	cmp	r3, #29
 800218c:	d002      	beq.n	8002194 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b2d      	cmp	r3, #45	; 0x2d
 8002192:	d114      	bne.n	80021be <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002194:	f7fe ff8e 	bl	80010b4 <HAL_GetTick>
 8002198:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800219a:	e009      	b.n	80021b0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800219c:	f7fe ff8a 	bl	80010b4 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021aa:	d901      	bls.n	80021b0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e007      	b.n	80021c0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_PWREx_ConfigSupply+0xb0>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021bc:	d1ee      	bne.n	800219c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	58024800 	.word	0x58024800

080021cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08c      	sub	sp, #48	; 0x30
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e3f3      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 80b3 	beq.w	8002352 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ec:	4b9e      	ldr	r3, [pc, #632]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021f6:	4b9c      	ldr	r3, [pc, #624]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80021f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80021fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fe:	2b10      	cmp	r3, #16
 8002200:	d007      	beq.n	8002212 <HAL_RCC_OscConfig+0x46>
 8002202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002204:	2b18      	cmp	r3, #24
 8002206:	d112      	bne.n	800222e <HAL_RCC_OscConfig+0x62>
 8002208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d10d      	bne.n	800222e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002212:	4b95      	ldr	r3, [pc, #596]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 8098 	beq.w	8002350 <HAL_RCC_OscConfig+0x184>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	f040 8093 	bne.w	8002350 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e3cb      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002236:	d106      	bne.n	8002246 <HAL_RCC_OscConfig+0x7a>
 8002238:	4b8b      	ldr	r3, [pc, #556]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a8a      	ldr	r2, [pc, #552]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 800223e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	e058      	b.n	80022f8 <HAL_RCC_OscConfig+0x12c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d112      	bne.n	8002274 <HAL_RCC_OscConfig+0xa8>
 800224e:	4b86      	ldr	r3, [pc, #536]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a85      	ldr	r2, [pc, #532]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 8002254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b83      	ldr	r3, [pc, #524]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a82      	ldr	r2, [pc, #520]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 8002260:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b80      	ldr	r3, [pc, #512]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a7f      	ldr	r2, [pc, #508]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 800226c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e041      	b.n	80022f8 <HAL_RCC_OscConfig+0x12c>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800227c:	d112      	bne.n	80022a4 <HAL_RCC_OscConfig+0xd8>
 800227e:	4b7a      	ldr	r3, [pc, #488]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a79      	ldr	r2, [pc, #484]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 8002284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b77      	ldr	r3, [pc, #476]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a76      	ldr	r2, [pc, #472]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 8002290:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	4b74      	ldr	r3, [pc, #464]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a73      	ldr	r2, [pc, #460]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 800229c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e029      	b.n	80022f8 <HAL_RCC_OscConfig+0x12c>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80022ac:	d112      	bne.n	80022d4 <HAL_RCC_OscConfig+0x108>
 80022ae:	4b6e      	ldr	r3, [pc, #440]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a6d      	ldr	r2, [pc, #436]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80022b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	4b6b      	ldr	r3, [pc, #428]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a6a      	ldr	r2, [pc, #424]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80022c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	4b68      	ldr	r3, [pc, #416]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a67      	ldr	r2, [pc, #412]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80022cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	e011      	b.n	80022f8 <HAL_RCC_OscConfig+0x12c>
 80022d4:	4b64      	ldr	r3, [pc, #400]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a63      	ldr	r2, [pc, #396]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80022da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b61      	ldr	r3, [pc, #388]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a60      	ldr	r2, [pc, #384]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80022e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b5e      	ldr	r3, [pc, #376]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a5d      	ldr	r2, [pc, #372]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80022f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80022f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7fe fed8 	bl	80010b4 <HAL_GetTick>
 8002304:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002308:	f7fe fed4 	bl	80010b4 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e355      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800231a:	4b53      	ldr	r3, [pc, #332]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x13c>
 8002326:	e014      	b.n	8002352 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe fec4 	bl	80010b4 <HAL_GetTick>
 800232c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002330:	f7fe fec0 	bl	80010b4 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	; 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e341      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002342:	4b49      	ldr	r3, [pc, #292]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x164>
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 808c 	beq.w	8002478 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002360:	4b41      	ldr	r3, [pc, #260]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002368:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800236a:	4b3f      	ldr	r3, [pc, #252]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d007      	beq.n	8002386 <HAL_RCC_OscConfig+0x1ba>
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	2b18      	cmp	r3, #24
 800237a:	d137      	bne.n	80023ec <HAL_RCC_OscConfig+0x220>
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d132      	bne.n	80023ec <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002386:	4b38      	ldr	r3, [pc, #224]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b00      	cmp	r3, #0
 8002390:	d005      	beq.n	800239e <HAL_RCC_OscConfig+0x1d2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e313      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800239e:	4b32      	ldr	r3, [pc, #200]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 0219 	bic.w	r2, r3, #25
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	492f      	ldr	r1, [pc, #188]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023b0:	f7fe fe80 	bl	80010b4 <HAL_GetTick>
 80023b4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b8:	f7fe fe7c 	bl	80010b4 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e2fd      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023ca:	4b27      	ldr	r3, [pc, #156]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d6:	4b24      	ldr	r3, [pc, #144]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	061b      	lsls	r3, r3, #24
 80023e4:	4920      	ldr	r1, [pc, #128]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ea:	e045      	b.n	8002478 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d026      	beq.n	8002442 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023f4:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 0219 	bic.w	r2, r3, #25
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4919      	ldr	r1, [pc, #100]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7fe fe55 	bl	80010b4 <HAL_GetTick>
 800240a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800240e:	f7fe fe51 	bl	80010b4 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e2d2      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242c:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	061b      	lsls	r3, r3, #24
 800243a:	490b      	ldr	r1, [pc, #44]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
 8002440:	e01a      	b.n	8002478 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a08      	ldr	r2, [pc, #32]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7fe fe31 	bl	80010b4 <HAL_GetTick>
 8002452:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002456:	f7fe fe2d 	bl	80010b4 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d903      	bls.n	800246c <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e2ae      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
 8002468:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800246c:	4b99      	ldr	r3, [pc, #612]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ee      	bne.n	8002456 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b00      	cmp	r3, #0
 8002482:	d06a      	beq.n	800255a <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002484:	4b93      	ldr	r3, [pc, #588]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800248c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800248e:	4b91      	ldr	r3, [pc, #580]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 8002490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002492:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2b08      	cmp	r3, #8
 8002498:	d007      	beq.n	80024aa <HAL_RCC_OscConfig+0x2de>
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	2b18      	cmp	r3, #24
 800249e:	d11b      	bne.n	80024d8 <HAL_RCC_OscConfig+0x30c>
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d116      	bne.n	80024d8 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024aa:	4b8a      	ldr	r3, [pc, #552]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_RCC_OscConfig+0x2f6>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	2b80      	cmp	r3, #128	; 0x80
 80024bc:	d001      	beq.n	80024c2 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e281      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024c2:	4b84      	ldr	r3, [pc, #528]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	061b      	lsls	r3, r3, #24
 80024d0:	4980      	ldr	r1, [pc, #512]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024d6:	e040      	b.n	800255a <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d023      	beq.n	8002528 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80024e0:	4b7c      	ldr	r3, [pc, #496]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a7b      	ldr	r2, [pc, #492]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 80024e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7fe fde2 	bl	80010b4 <HAL_GetTick>
 80024f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80024f4:	f7fe fdde 	bl	80010b4 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e25f      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002506:	4b73      	ldr	r3, [pc, #460]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002512:	4b70      	ldr	r3, [pc, #448]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	061b      	lsls	r3, r3, #24
 8002520:	496c      	ldr	r1, [pc, #432]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 8002522:	4313      	orrs	r3, r2
 8002524:	60cb      	str	r3, [r1, #12]
 8002526:	e018      	b.n	800255a <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002528:	4b6a      	ldr	r3, [pc, #424]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a69      	ldr	r2, [pc, #420]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 800252e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe fdbe 	bl	80010b4 <HAL_GetTick>
 8002538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800253c:	f7fe fdba 	bl	80010b4 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e23b      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800254e:	4b61      	ldr	r3, [pc, #388]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d036      	beq.n	80025d4 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d019      	beq.n	80025a2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256e:	4b59      	ldr	r3, [pc, #356]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 8002570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002572:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257a:	f7fe fd9b 	bl	80010b4 <HAL_GetTick>
 800257e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002582:	f7fe fd97 	bl	80010b4 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e218      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002594:	4b4f      	ldr	r3, [pc, #316]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 8002596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0x3b6>
 80025a0:	e018      	b.n	80025d4 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a2:	4b4c      	ldr	r3, [pc, #304]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 80025a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a6:	4a4b      	ldr	r2, [pc, #300]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ae:	f7fe fd81 	bl	80010b4 <HAL_GetTick>
 80025b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025b6:	f7fe fd7d 	bl	80010b4 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e1fe      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025c8:	4b42      	ldr	r3, [pc, #264]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 80025ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f0      	bne.n	80025b6 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d036      	beq.n	800264e <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d019      	beq.n	800261c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025e8:	4b3a      	ldr	r3, [pc, #232]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a39      	ldr	r2, [pc, #228]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 80025ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025f4:	f7fe fd5e 	bl	80010b4 <HAL_GetTick>
 80025f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80025fc:	f7fe fd5a 	bl	80010b4 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e1db      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800260e:	4b31      	ldr	r3, [pc, #196]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x430>
 800261a:	e018      	b.n	800264e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800261c:	4b2d      	ldr	r3, [pc, #180]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a2c      	ldr	r2, [pc, #176]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 8002622:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002626:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002628:	f7fe fd44 	bl	80010b4 <HAL_GetTick>
 800262c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002630:	f7fe fd40 	bl	80010b4 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e1c1      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002642:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80af 	beq.w	80027ba <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800265c:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <HAL_RCC_OscConfig+0x50c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <HAL_RCC_OscConfig+0x50c>)
 8002662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002666:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002668:	f7fe fd24 	bl	80010b4 <HAL_GetTick>
 800266c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002670:	f7fe fd20 	bl	80010b4 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	; 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e1a1      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <HAL_RCC_OscConfig+0x50c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d106      	bne.n	80026a4 <HAL_RCC_OscConfig+0x4d8>
 8002696:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269a:	4a0e      	ldr	r2, [pc, #56]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6713      	str	r3, [r2, #112]	; 0x70
 80026a2:	e05b      	b.n	800275c <HAL_RCC_OscConfig+0x590>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d117      	bne.n	80026dc <HAL_RCC_OscConfig+0x510>
 80026ac:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	4a08      	ldr	r2, [pc, #32]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	6713      	str	r3, [r2, #112]	; 0x70
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	4a05      	ldr	r2, [pc, #20]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 80026be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026c2:	6713      	str	r3, [r2, #112]	; 0x70
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	4a02      	ldr	r2, [pc, #8]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 80026ca:	f023 0304 	bic.w	r3, r3, #4
 80026ce:	6713      	str	r3, [r2, #112]	; 0x70
 80026d0:	e044      	b.n	800275c <HAL_RCC_OscConfig+0x590>
 80026d2:	bf00      	nop
 80026d4:	58024400 	.word	0x58024400
 80026d8:	58024800 	.word	0x58024800
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	d112      	bne.n	800270a <HAL_RCC_OscConfig+0x53e>
 80026e4:	4b95      	ldr	r3, [pc, #596]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	4a94      	ldr	r2, [pc, #592]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	6713      	str	r3, [r2, #112]	; 0x70
 80026f0:	4b92      	ldr	r3, [pc, #584]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	4a91      	ldr	r2, [pc, #580]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80026f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026fa:	6713      	str	r3, [r2, #112]	; 0x70
 80026fc:	4b8f      	ldr	r3, [pc, #572]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002700:	4a8e      	ldr	r2, [pc, #568]	; (800293c <HAL_RCC_OscConfig+0x770>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6713      	str	r3, [r2, #112]	; 0x70
 8002708:	e028      	b.n	800275c <HAL_RCC_OscConfig+0x590>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b85      	cmp	r3, #133	; 0x85
 8002710:	d112      	bne.n	8002738 <HAL_RCC_OscConfig+0x56c>
 8002712:	4b8a      	ldr	r3, [pc, #552]	; (800293c <HAL_RCC_OscConfig+0x770>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002716:	4a89      	ldr	r2, [pc, #548]	; (800293c <HAL_RCC_OscConfig+0x770>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	6713      	str	r3, [r2, #112]	; 0x70
 800271e:	4b87      	ldr	r3, [pc, #540]	; (800293c <HAL_RCC_OscConfig+0x770>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002722:	4a86      	ldr	r2, [pc, #536]	; (800293c <HAL_RCC_OscConfig+0x770>)
 8002724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002728:	6713      	str	r3, [r2, #112]	; 0x70
 800272a:	4b84      	ldr	r3, [pc, #528]	; (800293c <HAL_RCC_OscConfig+0x770>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272e:	4a83      	ldr	r2, [pc, #524]	; (800293c <HAL_RCC_OscConfig+0x770>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6713      	str	r3, [r2, #112]	; 0x70
 8002736:	e011      	b.n	800275c <HAL_RCC_OscConfig+0x590>
 8002738:	4b80      	ldr	r3, [pc, #512]	; (800293c <HAL_RCC_OscConfig+0x770>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	4a7f      	ldr	r2, [pc, #508]	; (800293c <HAL_RCC_OscConfig+0x770>)
 800273e:	f023 0301 	bic.w	r3, r3, #1
 8002742:	6713      	str	r3, [r2, #112]	; 0x70
 8002744:	4b7d      	ldr	r3, [pc, #500]	; (800293c <HAL_RCC_OscConfig+0x770>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002748:	4a7c      	ldr	r2, [pc, #496]	; (800293c <HAL_RCC_OscConfig+0x770>)
 800274a:	f023 0304 	bic.w	r3, r3, #4
 800274e:	6713      	str	r3, [r2, #112]	; 0x70
 8002750:	4b7a      	ldr	r3, [pc, #488]	; (800293c <HAL_RCC_OscConfig+0x770>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	4a79      	ldr	r2, [pc, #484]	; (800293c <HAL_RCC_OscConfig+0x770>)
 8002756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800275a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002764:	f7fe fca6 	bl	80010b4 <HAL_GetTick>
 8002768:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800276a:	e00a      	b.n	8002782 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276c:	f7fe fca2 	bl	80010b4 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e121      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002782:	4b6e      	ldr	r3, [pc, #440]	; (800293c <HAL_RCC_OscConfig+0x770>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0ee      	beq.n	800276c <HAL_RCC_OscConfig+0x5a0>
 800278e:	e014      	b.n	80027ba <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002790:	f7fe fc90 	bl	80010b4 <HAL_GetTick>
 8002794:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002796:	e00a      	b.n	80027ae <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002798:	f7fe fc8c 	bl	80010b4 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e10b      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027ae:	4b63      	ldr	r3, [pc, #396]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1ee      	bne.n	8002798 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 8100 	beq.w	80029c4 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80027c4:	4b5d      	ldr	r3, [pc, #372]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027cc:	2b18      	cmp	r3, #24
 80027ce:	f000 80bb 	beq.w	8002948 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	f040 8095 	bne.w	8002906 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027dc:	4b57      	ldr	r3, [pc, #348]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a56      	ldr	r2, [pc, #344]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80027e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe fc64 	bl	80010b4 <HAL_GetTick>
 80027ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe fc60 	bl	80010b4 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e0e1      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002802:	4b4e      	ldr	r3, [pc, #312]	; (800293c <HAL_RCC_OscConfig+0x770>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800280e:	4b4b      	ldr	r3, [pc, #300]	; (800293c <HAL_RCC_OscConfig+0x770>)
 8002810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002812:	4b4b      	ldr	r3, [pc, #300]	; (8002940 <HAL_RCC_OscConfig+0x774>)
 8002814:	4013      	ands	r3, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800281e:	0112      	lsls	r2, r2, #4
 8002820:	430a      	orrs	r2, r1
 8002822:	4946      	ldr	r1, [pc, #280]	; (800293c <HAL_RCC_OscConfig+0x770>)
 8002824:	4313      	orrs	r3, r2
 8002826:	628b      	str	r3, [r1, #40]	; 0x28
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	3b01      	subs	r3, #1
 800282e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002836:	3b01      	subs	r3, #1
 8002838:	025b      	lsls	r3, r3, #9
 800283a:	b29b      	uxth	r3, r3
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	3b01      	subs	r3, #1
 8002844:	041b      	lsls	r3, r3, #16
 8002846:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002850:	3b01      	subs	r3, #1
 8002852:	061b      	lsls	r3, r3, #24
 8002854:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002858:	4938      	ldr	r1, [pc, #224]	; (800293c <HAL_RCC_OscConfig+0x770>)
 800285a:	4313      	orrs	r3, r2
 800285c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800285e:	4b37      	ldr	r3, [pc, #220]	; (800293c <HAL_RCC_OscConfig+0x770>)
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	4a36      	ldr	r2, [pc, #216]	; (800293c <HAL_RCC_OscConfig+0x770>)
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800286a:	4b34      	ldr	r3, [pc, #208]	; (800293c <HAL_RCC_OscConfig+0x770>)
 800286c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800286e:	4b35      	ldr	r3, [pc, #212]	; (8002944 <HAL_RCC_OscConfig+0x778>)
 8002870:	4013      	ands	r3, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002876:	00d2      	lsls	r2, r2, #3
 8002878:	4930      	ldr	r1, [pc, #192]	; (800293c <HAL_RCC_OscConfig+0x770>)
 800287a:	4313      	orrs	r3, r2
 800287c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800287e:	4b2f      	ldr	r3, [pc, #188]	; (800293c <HAL_RCC_OscConfig+0x770>)
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	f023 020c 	bic.w	r2, r3, #12
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	492c      	ldr	r1, [pc, #176]	; (800293c <HAL_RCC_OscConfig+0x770>)
 800288c:	4313      	orrs	r3, r2
 800288e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002890:	4b2a      	ldr	r3, [pc, #168]	; (800293c <HAL_RCC_OscConfig+0x770>)
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	f023 0202 	bic.w	r2, r3, #2
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289c:	4927      	ldr	r1, [pc, #156]	; (800293c <HAL_RCC_OscConfig+0x770>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80028a2:	4b26      	ldr	r3, [pc, #152]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	4a25      	ldr	r2, [pc, #148]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028ae:	4b23      	ldr	r3, [pc, #140]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	4a22      	ldr	r2, [pc, #136]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80028b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80028ba:	4b20      	ldr	r3, [pc, #128]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	4a1f      	ldr	r2, [pc, #124]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80028c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80028c6:	4b1d      	ldr	r3, [pc, #116]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	4a1c      	ldr	r2, [pc, #112]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d2:	4b1a      	ldr	r3, [pc, #104]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a19      	ldr	r2, [pc, #100]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80028d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7fe fbe9 	bl	80010b4 <HAL_GetTick>
 80028e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe fbe5 	bl	80010b4 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e066      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028f8:	4b10      	ldr	r3, [pc, #64]	; (800293c <HAL_RCC_OscConfig+0x770>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x71a>
 8002904:	e05e      	b.n	80029c4 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b0d      	ldr	r3, [pc, #52]	; (800293c <HAL_RCC_OscConfig+0x770>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a0c      	ldr	r2, [pc, #48]	; (800293c <HAL_RCC_OscConfig+0x770>)
 800290c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002912:	f7fe fbcf 	bl	80010b4 <HAL_GetTick>
 8002916:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291a:	f7fe fbcb 	bl	80010b4 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e04c      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <HAL_RCC_OscConfig+0x770>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f0      	bne.n	800291a <HAL_RCC_OscConfig+0x74e>
 8002938:	e044      	b.n	80029c4 <HAL_RCC_OscConfig+0x7f8>
 800293a:	bf00      	nop
 800293c:	58024400 	.word	0x58024400
 8002940:	fffffc0c 	.word	0xfffffc0c
 8002944:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002948:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <HAL_RCC_OscConfig+0x804>)
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800294e:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <HAL_RCC_OscConfig+0x804>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	2b01      	cmp	r3, #1
 800295a:	d031      	beq.n	80029c0 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f003 0203 	and.w	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d12a      	bne.n	80029c0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d122      	bne.n	80029c0 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002986:	429a      	cmp	r2, r3
 8002988:	d11a      	bne.n	80029c0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	0a5b      	lsrs	r3, r3, #9
 800298e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002996:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d111      	bne.n	80029c0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	0c1b      	lsrs	r3, r3, #16
 80029a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d108      	bne.n	80029c0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	0e1b      	lsrs	r3, r3, #24
 80029b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3730      	adds	r7, #48	; 0x30
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	58024400 	.word	0x58024400

080029d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e19c      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e8:	4b8a      	ldr	r3, [pc, #552]	; (8002c14 <HAL_RCC_ClockConfig+0x240>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d910      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b87      	ldr	r3, [pc, #540]	; (8002c14 <HAL_RCC_ClockConfig+0x240>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 020f 	bic.w	r2, r3, #15
 80029fe:	4985      	ldr	r1, [pc, #532]	; (8002c14 <HAL_RCC_ClockConfig+0x240>)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b83      	ldr	r3, [pc, #524]	; (8002c14 <HAL_RCC_ClockConfig+0x240>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e184      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d010      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	4b7b      	ldr	r3, [pc, #492]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d908      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a34:	4b78      	ldr	r3, [pc, #480]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	4975      	ldr	r1, [pc, #468]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d010      	beq.n	8002a74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	4b70      	ldr	r3, [pc, #448]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d908      	bls.n	8002a74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a62:	4b6d      	ldr	r3, [pc, #436]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	496a      	ldr	r1, [pc, #424]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d010      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699a      	ldr	r2, [r3, #24]
 8002a84:	4b64      	ldr	r3, [pc, #400]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d908      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a90:	4b61      	ldr	r3, [pc, #388]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	495e      	ldr	r1, [pc, #376]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d010      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	4b59      	ldr	r3, [pc, #356]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d908      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002abe:	4b56      	ldr	r3, [pc, #344]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	4953      	ldr	r1, [pc, #332]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d010      	beq.n	8002afe <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	4b4d      	ldr	r3, [pc, #308]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d908      	bls.n	8002afe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aec:	4b4a      	ldr	r3, [pc, #296]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f023 020f 	bic.w	r2, r3, #15
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4947      	ldr	r1, [pc, #284]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d055      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b0a:	4b43      	ldr	r3, [pc, #268]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	4940      	ldr	r1, [pc, #256]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b24:	4b3c      	ldr	r3, [pc, #240]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d121      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0f6      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b3c:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d115      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0ea      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b54:	4b30      	ldr	r3, [pc, #192]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0de      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b64:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0d6      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b74:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	f023 0207 	bic.w	r2, r3, #7
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4925      	ldr	r1, [pc, #148]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7fe fa95 	bl	80010b4 <HAL_GetTick>
 8002b8a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8e:	f7fe fa91 	bl	80010b4 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e0be      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba4:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d1eb      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d010      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d208      	bcs.n	8002be4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f023 020f 	bic.w	r2, r3, #15
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	490e      	ldr	r1, [pc, #56]	; (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_ClockConfig+0x240>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d214      	bcs.n	8002c1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <HAL_RCC_ClockConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 020f 	bic.w	r2, r3, #15
 8002bfa:	4906      	ldr	r1, [pc, #24]	; (8002c14 <HAL_RCC_ClockConfig+0x240>)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <HAL_RCC_ClockConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e086      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
 8002c14:	52002000 	.word	0x52002000
 8002c18:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d010      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	4b3f      	ldr	r3, [pc, #252]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d208      	bcs.n	8002c4a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c38:	4b3c      	ldr	r3, [pc, #240]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	4939      	ldr	r1, [pc, #228]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d010      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	4b34      	ldr	r3, [pc, #208]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d208      	bcs.n	8002c78 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c66:	4b31      	ldr	r3, [pc, #196]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	492e      	ldr	r1, [pc, #184]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d010      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699a      	ldr	r2, [r3, #24]
 8002c88:	4b28      	ldr	r3, [pc, #160]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d208      	bcs.n	8002ca6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c94:	4b25      	ldr	r3, [pc, #148]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	4922      	ldr	r1, [pc, #136]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d010      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69da      	ldr	r2, [r3, #28]
 8002cb6:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d208      	bcs.n	8002cd4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	4917      	ldr	r1, [pc, #92]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002cd4:	f000 f834 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	4912      	ldr	r1, [pc, #72]	; (8002d30 <HAL_RCC_ClockConfig+0x35c>)
 8002ce6:	5ccb      	ldrb	r3, [r1, r3]
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	4a0d      	ldr	r2, [pc, #52]	; (8002d30 <HAL_RCC_ClockConfig+0x35c>)
 8002cfc:	5cd3      	ldrb	r3, [r2, r3]
 8002cfe:	f003 031f 	and.w	r3, r3, #31
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	fa22 f303 	lsr.w	r3, r2, r3
 8002d08:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <HAL_RCC_ClockConfig+0x360>)
 8002d0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d0c:	4a0a      	ldr	r2, [pc, #40]	; (8002d38 <HAL_RCC_ClockConfig+0x364>)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <HAL_RCC_ClockConfig+0x368>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd ff62 	bl	8000be0 <HAL_InitTick>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	58024400 	.word	0x58024400
 8002d30:	0800aa24 	.word	0x0800aa24
 8002d34:	24000004 	.word	0x24000004
 8002d38:	24000000 	.word	0x24000000
 8002d3c:	24000008 	.word	0x24000008

08002d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d46:	4bb3      	ldr	r3, [pc, #716]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d4e:	2b18      	cmp	r3, #24
 8002d50:	f200 8155 	bhi.w	8002ffe <HAL_RCC_GetSysClockFreq+0x2be>
 8002d54:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5a:	bf00      	nop
 8002d5c:	08002dc1 	.word	0x08002dc1
 8002d60:	08002fff 	.word	0x08002fff
 8002d64:	08002fff 	.word	0x08002fff
 8002d68:	08002fff 	.word	0x08002fff
 8002d6c:	08002fff 	.word	0x08002fff
 8002d70:	08002fff 	.word	0x08002fff
 8002d74:	08002fff 	.word	0x08002fff
 8002d78:	08002fff 	.word	0x08002fff
 8002d7c:	08002de7 	.word	0x08002de7
 8002d80:	08002fff 	.word	0x08002fff
 8002d84:	08002fff 	.word	0x08002fff
 8002d88:	08002fff 	.word	0x08002fff
 8002d8c:	08002fff 	.word	0x08002fff
 8002d90:	08002fff 	.word	0x08002fff
 8002d94:	08002fff 	.word	0x08002fff
 8002d98:	08002fff 	.word	0x08002fff
 8002d9c:	08002ded 	.word	0x08002ded
 8002da0:	08002fff 	.word	0x08002fff
 8002da4:	08002fff 	.word	0x08002fff
 8002da8:	08002fff 	.word	0x08002fff
 8002dac:	08002fff 	.word	0x08002fff
 8002db0:	08002fff 	.word	0x08002fff
 8002db4:	08002fff 	.word	0x08002fff
 8002db8:	08002fff 	.word	0x08002fff
 8002dbc:	08002df3 	.word	0x08002df3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dc0:	4b94      	ldr	r3, [pc, #592]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d009      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002dcc:	4b91      	ldr	r3, [pc, #580]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	08db      	lsrs	r3, r3, #3
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	4a90      	ldr	r2, [pc, #576]	; (8003018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ddc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002dde:	e111      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002de0:	4b8d      	ldr	r3, [pc, #564]	; (8003018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002de2:	61bb      	str	r3, [r7, #24]
    break;
 8002de4:	e10e      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002de6:	4b8d      	ldr	r3, [pc, #564]	; (800301c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002de8:	61bb      	str	r3, [r7, #24]
    break;
 8002dea:	e10b      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002dec:	4b8c      	ldr	r3, [pc, #560]	; (8003020 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002dee:	61bb      	str	r3, [r7, #24]
    break;
 8002df0:	e108      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002df2:	4b88      	ldr	r3, [pc, #544]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002dfc:	4b85      	ldr	r3, [pc, #532]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e06:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e08:	4b82      	ldr	r3, [pc, #520]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002e12:	4b80      	ldr	r3, [pc, #512]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e16:	08db      	lsrs	r3, r3, #3
 8002e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	ee07 3a90 	vmov	s15, r3
 8002e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e2a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80e1 	beq.w	8002ff8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	f000 8083 	beq.w	8002f44 <HAL_RCC_GetSysClockFreq+0x204>
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	f200 80a1 	bhi.w	8002f88 <HAL_RCC_GetSysClockFreq+0x248>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x114>
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d056      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e52:	e099      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e54:	4b6f      	ldr	r3, [pc, #444]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d02d      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e60:	4b6c      	ldr	r3, [pc, #432]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	08db      	lsrs	r3, r3, #3
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	4a6b      	ldr	r2, [pc, #428]	; (8003018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e70:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	ee07 3a90 	vmov	s15, r3
 8002e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	ee07 3a90 	vmov	s15, r3
 8002e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e8a:	4b62      	ldr	r3, [pc, #392]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e92:	ee07 3a90 	vmov	s15, r3
 8002e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e9e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002eba:	e087      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	ee07 3a90 	vmov	s15, r3
 8002ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003028 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ece:	4b51      	ldr	r3, [pc, #324]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed6:	ee07 3a90 	vmov	s15, r3
 8002eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ede:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ee2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002efe:	e065      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	ee07 3a90 	vmov	s15, r3
 8002f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800302c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f12:	4b40      	ldr	r3, [pc, #256]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f1a:	ee07 3a90 	vmov	s15, r3
 8002f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f22:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f42:	e043      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	ee07 3a90 	vmov	s15, r3
 8002f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003030 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f56:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f86:	e021      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	ee07 3a90 	vmov	s15, r3
 8002f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f92:	eddf 6a26 	vldr	s13, [pc, #152]	; 800302c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f9a:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa2:	ee07 3a90 	vmov	s15, r3
 8002fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	0a5b      	lsrs	r3, r3, #9
 8002fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	ee07 3a90 	vmov	s15, r3
 8002fe0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ff0:	ee17 3a90 	vmov	r3, s15
 8002ff4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002ff6:	e005      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61bb      	str	r3, [r7, #24]
    break;
 8002ffc:	e002      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002ffe:	4b07      	ldr	r3, [pc, #28]	; (800301c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003000:	61bb      	str	r3, [r7, #24]
    break;
 8003002:	bf00      	nop
  }

  return sysclockfreq;
 8003004:	69bb      	ldr	r3, [r7, #24]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3724      	adds	r7, #36	; 0x24
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	58024400 	.word	0x58024400
 8003018:	03d09000 	.word	0x03d09000
 800301c:	003d0900 	.word	0x003d0900
 8003020:	007a1200 	.word	0x007a1200
 8003024:	46000000 	.word	0x46000000
 8003028:	4c742400 	.word	0x4c742400
 800302c:	4a742400 	.word	0x4a742400
 8003030:	4af42400 	.word	0x4af42400

08003034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800303a:	f7ff fe81 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 800303e:	4602      	mov	r2, r0
 8003040:	4b10      	ldr	r3, [pc, #64]	; (8003084 <HAL_RCC_GetHCLKFreq+0x50>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	490f      	ldr	r1, [pc, #60]	; (8003088 <HAL_RCC_GetHCLKFreq+0x54>)
 800304c:	5ccb      	ldrb	r3, [r1, r3]
 800304e:	f003 031f 	and.w	r3, r3, #31
 8003052:	fa22 f303 	lsr.w	r3, r2, r3
 8003056:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003058:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <HAL_RCC_GetHCLKFreq+0x50>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	4a09      	ldr	r2, [pc, #36]	; (8003088 <HAL_RCC_GetHCLKFreq+0x54>)
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	fa22 f303 	lsr.w	r3, r2, r3
 800306e:	4a07      	ldr	r2, [pc, #28]	; (800308c <HAL_RCC_GetHCLKFreq+0x58>)
 8003070:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003072:	4a07      	ldr	r2, [pc, #28]	; (8003090 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <HAL_RCC_GetHCLKFreq+0x58>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	58024400 	.word	0x58024400
 8003088:	0800aa24 	.word	0x0800aa24
 800308c:	24000004 	.word	0x24000004
 8003090:	24000000 	.word	0x24000000

08003094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003098:	f7ff ffcc 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	4904      	ldr	r1, [pc, #16]	; (80030bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	58024400 	.word	0x58024400
 80030bc:	0800aa24 	.word	0x0800aa24

080030c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80030c4:	f7ff ffb6 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	4904      	ldr	r1, [pc, #16]	; (80030e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	58024400 	.word	0x58024400
 80030e8:	0800aa24 	.word	0x0800aa24

080030ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	223f      	movs	r2, #63	; 0x3f
 80030fa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030fc:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <HAL_RCC_GetClockConfig+0x7c>)
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f003 0207 	and.w	r2, r3, #7
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8003108:	4b17      	ldr	r3, [pc, #92]	; (8003168 <HAL_RCC_GetClockConfig+0x7c>)
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8003114:	4b14      	ldr	r3, [pc, #80]	; (8003168 <HAL_RCC_GetClockConfig+0x7c>)
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f003 020f 	and.w	r2, r3, #15
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8003120:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_RCC_GetClockConfig+0x7c>)
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800312c:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <HAL_RCC_GetClockConfig+0x7c>)
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_RCC_GetClockConfig+0x7c>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8003144:	4b08      	ldr	r3, [pc, #32]	; (8003168 <HAL_RCC_GetClockConfig+0x7c>)
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_RCC_GetClockConfig+0x80>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 020f 	and.w	r2, r3, #15
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	601a      	str	r2, [r3, #0]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	58024400 	.word	0x58024400
 800316c:	52002000 	.word	0x52002000

08003170 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003178:	2300      	movs	r3, #0
 800317a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800317c:	2300      	movs	r3, #0
 800317e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d03f      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003190:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003194:	d02a      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003196:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800319a:	d824      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800319c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031a0:	d018      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031a6:	d81e      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031b0:	d007      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031b2:	e018      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031b4:	4ba6      	ldr	r3, [pc, #664]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	4aa5      	ldr	r2, [pc, #660]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80031ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80031c0:	e015      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3304      	adds	r3, #4
 80031c6:	2102      	movs	r1, #2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f001 f99b 	bl	8004504 <RCCEx_PLL2_Config>
 80031ce:	4603      	mov	r3, r0
 80031d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80031d2:	e00c      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3324      	adds	r3, #36	; 0x24
 80031d8:	2102      	movs	r1, #2
 80031da:	4618      	mov	r0, r3
 80031dc:	f001 fa44 	bl	8004668 <RCCEx_PLL3_Config>
 80031e0:	4603      	mov	r3, r0
 80031e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80031e4:	e003      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	75fb      	strb	r3, [r7, #23]
      break;
 80031ea:	e000      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80031f4:	4b96      	ldr	r3, [pc, #600]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80031f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003200:	4993      	ldr	r1, [pc, #588]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003202:	4313      	orrs	r3, r2
 8003204:	650b      	str	r3, [r1, #80]	; 0x50
 8003206:	e001      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d03d      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	2b04      	cmp	r3, #4
 800321e:	d826      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003220:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	0800323d 	.word	0x0800323d
 800322c:	0800324b 	.word	0x0800324b
 8003230:	0800325d 	.word	0x0800325d
 8003234:	08003275 	.word	0x08003275
 8003238:	08003275 	.word	0x08003275
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800323c:	4b84      	ldr	r3, [pc, #528]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	4a83      	ldr	r2, [pc, #524]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003246:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003248:	e015      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3304      	adds	r3, #4
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f001 f957 	bl	8004504 <RCCEx_PLL2_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800325a:	e00c      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3324      	adds	r3, #36	; 0x24
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f001 fa00 	bl	8004668 <RCCEx_PLL3_Config>
 8003268:	4603      	mov	r3, r0
 800326a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800326c:	e003      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	75fb      	strb	r3, [r7, #23]
      break;
 8003272:	e000      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003276:	7dfb      	ldrb	r3, [r7, #23]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d109      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800327c:	4b74      	ldr	r3, [pc, #464]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800327e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003280:	f023 0207 	bic.w	r2, r3, #7
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	4971      	ldr	r1, [pc, #452]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800328a:	4313      	orrs	r3, r2
 800328c:	650b      	str	r3, [r1, #80]	; 0x50
 800328e:	e001      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003290:	7dfb      	ldrb	r3, [r7, #23]
 8003292:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800329c:	2b00      	cmp	r3, #0
 800329e:	d04a      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80032a8:	d031      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80032aa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80032ae:	d82b      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80032b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b4:	d02d      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80032b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ba:	d825      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80032bc:	2bc0      	cmp	r3, #192	; 0xc0
 80032be:	d02a      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80032c0:	2bc0      	cmp	r3, #192	; 0xc0
 80032c2:	d821      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80032c4:	2b80      	cmp	r3, #128	; 0x80
 80032c6:	d016      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80032c8:	2b80      	cmp	r3, #128	; 0x80
 80032ca:	d81d      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d007      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80032d4:	e018      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032d6:	4b5e      	ldr	r3, [pc, #376]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	4a5d      	ldr	r2, [pc, #372]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80032dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80032e2:	e019      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3304      	adds	r3, #4
 80032e8:	2100      	movs	r1, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f001 f90a 	bl	8004504 <RCCEx_PLL2_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80032f4:	e010      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3324      	adds	r3, #36	; 0x24
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f001 f9b3 	bl	8004668 <RCCEx_PLL3_Config>
 8003302:	4603      	mov	r3, r0
 8003304:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003306:	e007      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	75fb      	strb	r3, [r7, #23]
      break;
 800330c:	e004      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800330e:	bf00      	nop
 8003310:	e002      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003312:	bf00      	nop
 8003314:	e000      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003318:	7dfb      	ldrb	r3, [r7, #23]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800331e:	4b4c      	ldr	r3, [pc, #304]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003322:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	4949      	ldr	r1, [pc, #292]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800332c:	4313      	orrs	r3, r2
 800332e:	650b      	str	r3, [r1, #80]	; 0x50
 8003330:	e001      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003332:	7dfb      	ldrb	r3, [r7, #23]
 8003334:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333e:	2b00      	cmp	r3, #0
 8003340:	d04f      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003346:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800334a:	d036      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800334c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003350:	d830      	bhi.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003356:	d032      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800335c:	d82a      	bhi.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800335e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003362:	d02e      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003364:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003368:	d824      	bhi.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800336a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336e:	d018      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003374:	d81e      	bhi.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800337a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337e:	d007      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003380:	e018      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003382:	4b33      	ldr	r3, [pc, #204]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	4a32      	ldr	r2, [pc, #200]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800338c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800338e:	e019      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3304      	adds	r3, #4
 8003394:	2100      	movs	r1, #0
 8003396:	4618      	mov	r0, r3
 8003398:	f001 f8b4 	bl	8004504 <RCCEx_PLL2_Config>
 800339c:	4603      	mov	r3, r0
 800339e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80033a0:	e010      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3324      	adds	r3, #36	; 0x24
 80033a6:	2100      	movs	r1, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f001 f95d 	bl	8004668 <RCCEx_PLL3_Config>
 80033ae:	4603      	mov	r3, r0
 80033b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80033b2:	e007      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	75fb      	strb	r3, [r7, #23]
      break;
 80033b8:	e004      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80033ba:	bf00      	nop
 80033bc:	e002      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80033be:	bf00      	nop
 80033c0:	e000      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80033c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80033ca:	4b21      	ldr	r3, [pc, #132]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ce:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d6:	491e      	ldr	r1, [pc, #120]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	650b      	str	r3, [r1, #80]	; 0x50
 80033dc:	e001      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033de:	7dfb      	ldrb	r3, [r7, #23]
 80033e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d034      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f2:	2b30      	cmp	r3, #48	; 0x30
 80033f4:	d01c      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80033f6:	2b30      	cmp	r3, #48	; 0x30
 80033f8:	d817      	bhi.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d00c      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80033fe:	2b20      	cmp	r3, #32
 8003400:	d813      	bhi.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d016      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8003406:	2b10      	cmp	r3, #16
 8003408:	d10f      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800340a:	4b11      	ldr	r3, [pc, #68]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	4a10      	ldr	r2, [pc, #64]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003414:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003416:	e00e      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3304      	adds	r3, #4
 800341c:	2102      	movs	r1, #2
 800341e:	4618      	mov	r0, r3
 8003420:	f001 f870 	bl	8004504 <RCCEx_PLL2_Config>
 8003424:	4603      	mov	r3, r0
 8003426:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003428:	e005      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	75fb      	strb	r3, [r7, #23]
      break;
 800342e:	e002      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003430:	bf00      	nop
 8003432:	e000      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003434:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10b      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800343c:	4b04      	ldr	r3, [pc, #16]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800343e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003440:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003448:	4901      	ldr	r1, [pc, #4]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800344a:	4313      	orrs	r3, r2
 800344c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800344e:	e003      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003450:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003454:	7dfb      	ldrb	r3, [r7, #23]
 8003456:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d047      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800346c:	d030      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800346e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003472:	d82a      	bhi.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003474:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003478:	d02c      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800347a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800347e:	d824      	bhi.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003484:	d018      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348a:	d81e      	bhi.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003494:	d007      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003496:	e018      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003498:	4bb0      	ldr	r3, [pc, #704]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	4aaf      	ldr	r2, [pc, #700]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800349e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034a4:	e017      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3304      	adds	r3, #4
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f001 f829 	bl	8004504 <RCCEx_PLL2_Config>
 80034b2:	4603      	mov	r3, r0
 80034b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034b6:	e00e      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3324      	adds	r3, #36	; 0x24
 80034bc:	2100      	movs	r1, #0
 80034be:	4618      	mov	r0, r3
 80034c0:	f001 f8d2 	bl	8004668 <RCCEx_PLL3_Config>
 80034c4:	4603      	mov	r3, r0
 80034c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034c8:	e005      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	75fb      	strb	r3, [r7, #23]
      break;
 80034ce:	e002      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80034d0:	bf00      	nop
 80034d2:	e000      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80034d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d109      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80034dc:	4b9f      	ldr	r3, [pc, #636]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80034de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e8:	499c      	ldr	r1, [pc, #624]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	650b      	str	r3, [r1, #80]	; 0x50
 80034ee:	e001      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d049      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003508:	d02e      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800350a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800350e:	d828      	bhi.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003510:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003514:	d02a      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003516:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800351a:	d822      	bhi.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800351c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003520:	d026      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003522:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003526:	d81c      	bhi.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800352c:	d010      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800352e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003532:	d816      	bhi.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d01d      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353c:	d111      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3304      	adds	r3, #4
 8003542:	2101      	movs	r1, #1
 8003544:	4618      	mov	r0, r3
 8003546:	f000 ffdd 	bl	8004504 <RCCEx_PLL2_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800354e:	e012      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3324      	adds	r3, #36	; 0x24
 8003554:	2101      	movs	r1, #1
 8003556:	4618      	mov	r0, r3
 8003558:	f001 f886 	bl	8004668 <RCCEx_PLL3_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003560:	e009      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
      break;
 8003566:	e006      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003568:	bf00      	nop
 800356a:	e004      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800356c:	bf00      	nop
 800356e:	e002      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003570:	bf00      	nop
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003576:	7dfb      	ldrb	r3, [r7, #23]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d109      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800357c:	4b77      	ldr	r3, [pc, #476]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800357e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003580:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003588:	4974      	ldr	r1, [pc, #464]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800358a:	4313      	orrs	r3, r2
 800358c:	650b      	str	r3, [r1, #80]	; 0x50
 800358e:	e001      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003590:	7dfb      	ldrb	r3, [r7, #23]
 8003592:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d053      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035a6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80035aa:	d034      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80035ac:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80035b0:	d82e      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80035b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035b6:	d030      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80035b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035bc:	d828      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80035be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c2:	d02c      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80035c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c8:	d822      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80035ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035ce:	d028      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80035d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035d4:	d81c      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80035d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035da:	d010      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80035dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035e0:	d816      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d01f      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80035e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ea:	d111      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3304      	adds	r3, #4
 80035f0:	2101      	movs	r1, #1
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 ff86 	bl	8004504 <RCCEx_PLL2_Config>
 80035f8:	4603      	mov	r3, r0
 80035fa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80035fc:	e014      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3324      	adds	r3, #36	; 0x24
 8003602:	2101      	movs	r1, #1
 8003604:	4618      	mov	r0, r3
 8003606:	f001 f82f 	bl	8004668 <RCCEx_PLL3_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800360e:	e00b      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	75fb      	strb	r3, [r7, #23]
      break;
 8003614:	e008      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003616:	bf00      	nop
 8003618:	e006      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800361a:	bf00      	nop
 800361c:	e004      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800361e:	bf00      	nop
 8003620:	e002      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003622:	bf00      	nop
 8003624:	e000      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003628:	7dfb      	ldrb	r3, [r7, #23]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10a      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800362e:	4b4b      	ldr	r3, [pc, #300]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003632:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800363c:	4947      	ldr	r1, [pc, #284]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800363e:	4313      	orrs	r3, r2
 8003640:	658b      	str	r3, [r1, #88]	; 0x58
 8003642:	e001      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003644:	7dfb      	ldrb	r3, [r7, #23]
 8003646:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d02f      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800365c:	d00e      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800365e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003662:	d814      	bhi.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003664:	2b00      	cmp	r3, #0
 8003666:	d015      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003668:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800366c:	d10f      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800366e:	4b3b      	ldr	r3, [pc, #236]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	4a3a      	ldr	r2, [pc, #232]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003678:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800367a:	e00c      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3304      	adds	r3, #4
 8003680:	2101      	movs	r1, #1
 8003682:	4618      	mov	r0, r3
 8003684:	f000 ff3e 	bl	8004504 <RCCEx_PLL2_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800368c:	e003      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	75fb      	strb	r3, [r7, #23]
      break;
 8003692:	e000      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003696:	7dfb      	ldrb	r3, [r7, #23]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d109      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800369c:	4b2f      	ldr	r3, [pc, #188]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800369e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a8:	492c      	ldr	r1, [pc, #176]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	650b      	str	r3, [r1, #80]	; 0x50
 80036ae:	e001      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
 80036b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d032      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d81b      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x590>
 80036c8:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80036ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ce:	bf00      	nop
 80036d0:	08003707 	.word	0x08003707
 80036d4:	080036e1 	.word	0x080036e1
 80036d8:	080036ef 	.word	0x080036ef
 80036dc:	08003707 	.word	0x08003707
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e0:	4b1e      	ldr	r3, [pc, #120]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	4a1d      	ldr	r2, [pc, #116]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80036e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80036ec:	e00c      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3304      	adds	r3, #4
 80036f2:	2102      	movs	r1, #2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 ff05 	bl	8004504 <RCCEx_PLL2_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80036fe:	e003      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	75fb      	strb	r3, [r7, #23]
      break;
 8003704:	e000      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8003706:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003708:	7dfb      	ldrb	r3, [r7, #23]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800370e:	4b13      	ldr	r3, [pc, #76]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003712:	f023 0203 	bic.w	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	4910      	ldr	r1, [pc, #64]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800371c:	4313      	orrs	r3, r2
 800371e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003720:	e001      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003722:	7dfb      	ldrb	r3, [r7, #23]
 8003724:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 808a 	beq.w	8003848 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a09      	ldr	r2, [pc, #36]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800373a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003740:	f7fd fcb8 	bl	80010b4 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003746:	e00d      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003748:	f7fd fcb4 	bl	80010b4 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	; 0x64
 8003754:	d906      	bls.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	75fb      	strb	r3, [r7, #23]
        break;
 800375a:	e009      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x600>
 800375c:	58024400 	.word	0x58024400
 8003760:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003764:	4bba      	ldr	r3, [pc, #744]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0eb      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8003770:	7dfb      	ldrb	r3, [r7, #23]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d166      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003776:	4bb7      	ldr	r3, [pc, #732]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003778:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003780:	4053      	eors	r3, r2
 8003782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003786:	2b00      	cmp	r3, #0
 8003788:	d013      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800378a:	4bb2      	ldr	r3, [pc, #712]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003792:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003794:	4baf      	ldr	r3, [pc, #700]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003798:	4aae      	ldr	r2, [pc, #696]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800379a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037a0:	4bac      	ldr	r3, [pc, #688]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a4:	4aab      	ldr	r2, [pc, #684]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037aa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80037ac:	4aa9      	ldr	r2, [pc, #676]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037bc:	d115      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037be:	f7fd fc79 	bl	80010b4 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037c4:	e00b      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c6:	f7fd fc75 	bl	80010b4 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d902      	bls.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	75fb      	strb	r3, [r7, #23]
            break;
 80037dc:	e005      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037de:	4b9d      	ldr	r3, [pc, #628]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0ed      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d126      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037fe:	d10d      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003800:	4b94      	ldr	r3, [pc, #592]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800380e:	0919      	lsrs	r1, r3, #4
 8003810:	4b91      	ldr	r3, [pc, #580]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003812:	400b      	ands	r3, r1
 8003814:	498f      	ldr	r1, [pc, #572]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003816:	4313      	orrs	r3, r2
 8003818:	610b      	str	r3, [r1, #16]
 800381a:	e005      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800381c:	4b8d      	ldr	r3, [pc, #564]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	4a8c      	ldr	r2, [pc, #560]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003822:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003826:	6113      	str	r3, [r2, #16]
 8003828:	4b8a      	ldr	r3, [pc, #552]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800382a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003836:	4987      	ldr	r1, [pc, #540]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003838:	4313      	orrs	r3, r2
 800383a:	670b      	str	r3, [r1, #112]	; 0x70
 800383c:	e004      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800383e:	7dfb      	ldrb	r3, [r7, #23]
 8003840:	75bb      	strb	r3, [r7, #22]
 8003842:	e001      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003844:	7dfb      	ldrb	r3, [r7, #23]
 8003846:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d07f      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800385a:	2b28      	cmp	r3, #40	; 0x28
 800385c:	d866      	bhi.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800385e:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003864:	08003933 	.word	0x08003933
 8003868:	0800392d 	.word	0x0800392d
 800386c:	0800392d 	.word	0x0800392d
 8003870:	0800392d 	.word	0x0800392d
 8003874:	0800392d 	.word	0x0800392d
 8003878:	0800392d 	.word	0x0800392d
 800387c:	0800392d 	.word	0x0800392d
 8003880:	0800392d 	.word	0x0800392d
 8003884:	08003909 	.word	0x08003909
 8003888:	0800392d 	.word	0x0800392d
 800388c:	0800392d 	.word	0x0800392d
 8003890:	0800392d 	.word	0x0800392d
 8003894:	0800392d 	.word	0x0800392d
 8003898:	0800392d 	.word	0x0800392d
 800389c:	0800392d 	.word	0x0800392d
 80038a0:	0800392d 	.word	0x0800392d
 80038a4:	0800391b 	.word	0x0800391b
 80038a8:	0800392d 	.word	0x0800392d
 80038ac:	0800392d 	.word	0x0800392d
 80038b0:	0800392d 	.word	0x0800392d
 80038b4:	0800392d 	.word	0x0800392d
 80038b8:	0800392d 	.word	0x0800392d
 80038bc:	0800392d 	.word	0x0800392d
 80038c0:	0800392d 	.word	0x0800392d
 80038c4:	08003933 	.word	0x08003933
 80038c8:	0800392d 	.word	0x0800392d
 80038cc:	0800392d 	.word	0x0800392d
 80038d0:	0800392d 	.word	0x0800392d
 80038d4:	0800392d 	.word	0x0800392d
 80038d8:	0800392d 	.word	0x0800392d
 80038dc:	0800392d 	.word	0x0800392d
 80038e0:	0800392d 	.word	0x0800392d
 80038e4:	08003933 	.word	0x08003933
 80038e8:	0800392d 	.word	0x0800392d
 80038ec:	0800392d 	.word	0x0800392d
 80038f0:	0800392d 	.word	0x0800392d
 80038f4:	0800392d 	.word	0x0800392d
 80038f8:	0800392d 	.word	0x0800392d
 80038fc:	0800392d 	.word	0x0800392d
 8003900:	0800392d 	.word	0x0800392d
 8003904:	08003933 	.word	0x08003933
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	2101      	movs	r1, #1
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fdf8 	bl	8004504 <RCCEx_PLL2_Config>
 8003914:	4603      	mov	r3, r0
 8003916:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003918:	e00c      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3324      	adds	r3, #36	; 0x24
 800391e:	2101      	movs	r1, #1
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fea1 	bl	8004668 <RCCEx_PLL3_Config>
 8003926:	4603      	mov	r3, r0
 8003928:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800392a:	e003      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	75fb      	strb	r3, [r7, #23]
      break;
 8003930:	e000      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003932:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003934:	7dfb      	ldrb	r3, [r7, #23]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800393a:	4b46      	ldr	r3, [pc, #280]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800393c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003948:	4942      	ldr	r1, [pc, #264]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800394a:	4313      	orrs	r3, r2
 800394c:	654b      	str	r3, [r1, #84]	; 0x54
 800394e:	e001      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d038      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003964:	2b05      	cmp	r3, #5
 8003966:	d821      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003968:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800396a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396e:	bf00      	nop
 8003970:	080039b3 	.word	0x080039b3
 8003974:	08003989 	.word	0x08003989
 8003978:	0800399b 	.word	0x0800399b
 800397c:	080039b3 	.word	0x080039b3
 8003980:	080039b3 	.word	0x080039b3
 8003984:	080039b3 	.word	0x080039b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	2101      	movs	r1, #1
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fdb8 	bl	8004504 <RCCEx_PLL2_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003998:	e00c      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3324      	adds	r3, #36	; 0x24
 800399e:	2101      	movs	r1, #1
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fe61 	bl	8004668 <RCCEx_PLL3_Config>
 80039a6:	4603      	mov	r3, r0
 80039a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80039aa:	e003      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	75fb      	strb	r3, [r7, #23]
      break;
 80039b0:	e000      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80039b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80039ba:	4b26      	ldr	r3, [pc, #152]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	f023 0207 	bic.w	r2, r3, #7
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c6:	4923      	ldr	r1, [pc, #140]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	654b      	str	r3, [r1, #84]	; 0x54
 80039cc:	e001      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
 80039d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d040      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039e4:	2b05      	cmp	r3, #5
 80039e6:	d821      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80039e8:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80039ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ee:	bf00      	nop
 80039f0:	08003a33 	.word	0x08003a33
 80039f4:	08003a09 	.word	0x08003a09
 80039f8:	08003a1b 	.word	0x08003a1b
 80039fc:	08003a33 	.word	0x08003a33
 8003a00:	08003a33 	.word	0x08003a33
 8003a04:	08003a33 	.word	0x08003a33
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fd78 	bl	8004504 <RCCEx_PLL2_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a18:	e00c      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3324      	adds	r3, #36	; 0x24
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fe21 	bl	8004668 <RCCEx_PLL3_Config>
 8003a26:	4603      	mov	r3, r0
 8003a28:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a2a:	e003      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a30:	e000      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a34:	7dfb      	ldrb	r3, [r7, #23]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d110      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3e:	f023 0207 	bic.w	r2, r3, #7
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a48:	4902      	ldr	r1, [pc, #8]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	658b      	str	r3, [r1, #88]	; 0x58
 8003a4e:	e007      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003a50:	58024800 	.word	0x58024800
 8003a54:	58024400 	.word	0x58024400
 8003a58:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
 8003a5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d04b      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a76:	d02e      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a7c:	d828      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a82:	d02a      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a88:	d822      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003a8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a8e:	d026      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003a90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a94:	d81c      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a9a:	d010      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa0:	d816      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d01d      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003aa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aaa:	d111      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fd26 	bl	8004504 <RCCEx_PLL2_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003abc:	e012      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3324      	adds	r3, #36	; 0x24
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fdcf 	bl	8004668 <RCCEx_PLL3_Config>
 8003aca:	4603      	mov	r3, r0
 8003acc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ace:	e009      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad4:	e006      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e004      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003ada:	bf00      	nop
 8003adc:	e002      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e000      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ae4:	7dfb      	ldrb	r3, [r7, #23]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aea:	4bb3      	ldr	r3, [pc, #716]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003af8:	49af      	ldr	r1, [pc, #700]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	654b      	str	r3, [r1, #84]	; 0x54
 8003afe:	e001      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
 8003b02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d04b      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b16:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b1a:	d02e      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003b1c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b20:	d828      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b26:	d02a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2c:	d822      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003b2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b32:	d026      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003b34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b38:	d81c      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b3e:	d010      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b44:	d816      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d01d      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b4e:	d111      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	2100      	movs	r1, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fcd4 	bl	8004504 <RCCEx_PLL2_Config>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b60:	e012      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3324      	adds	r3, #36	; 0x24
 8003b66:	2102      	movs	r1, #2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fd7d 	bl	8004668 <RCCEx_PLL3_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b72:	e009      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	75fb      	strb	r3, [r7, #23]
      break;
 8003b78:	e006      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003b7a:	bf00      	nop
 8003b7c:	e004      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003b7e:	bf00      	nop
 8003b80:	e002      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003b82:	bf00      	nop
 8003b84:	e000      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003b86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b88:	7dfb      	ldrb	r3, [r7, #23]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10a      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b8e:	4b8a      	ldr	r3, [pc, #552]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b92:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b9c:	4986      	ldr	r1, [pc, #536]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	658b      	str	r3, [r1, #88]	; 0x58
 8003ba2:	e001      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba4:	7dfb      	ldrb	r3, [r7, #23]
 8003ba6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d04b      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003bbe:	d02e      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003bc0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003bc4:	d828      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bca:	d02a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd0:	d822      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003bd2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003bd6:	d026      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003bd8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003bdc:	d81c      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003bde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003be2:	d010      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003be4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003be8:	d816      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d01d      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf2:	d111      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fc82 	bl	8004504 <RCCEx_PLL2_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003c04:	e012      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3324      	adds	r3, #36	; 0x24
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fd2b 	bl	8004668 <RCCEx_PLL3_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003c16:	e009      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c1c:	e006      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003c1e:	bf00      	nop
 8003c20:	e004      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003c22:	bf00      	nop
 8003c24:	e002      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003c26:	bf00      	nop
 8003c28:	e000      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10a      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003c32:	4b61      	ldr	r3, [pc, #388]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c40:	495d      	ldr	r1, [pc, #372]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	658b      	str	r3, [r1, #88]	; 0x58
 8003c46:	e001      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
 8003c4a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01a      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c62:	d10a      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3324      	adds	r3, #36	; 0x24
 8003c68:	2102      	movs	r1, #2
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fcfc 	bl	8004668 <RCCEx_PLL3_Config>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c7a:	4b4f      	ldr	r3, [pc, #316]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	494b      	ldr	r1, [pc, #300]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d01a      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca4:	d10a      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3324      	adds	r3, #36	; 0x24
 8003caa:	2102      	movs	r1, #2
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fcdb 	bl	8004668 <RCCEx_PLL3_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cbc:	4b3e      	ldr	r3, [pc, #248]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cca:	493b      	ldr	r1, [pc, #236]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d034      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ce2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ce6:	d01d      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003ce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cec:	d817      	bhi.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf6:	d009      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003cf8:	e011      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	2100      	movs	r1, #0
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fbff 	bl	8004504 <RCCEx_PLL2_Config>
 8003d06:	4603      	mov	r3, r0
 8003d08:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d0a:	e00c      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3324      	adds	r3, #36	; 0x24
 8003d10:	2102      	movs	r1, #2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fca8 	bl	8004668 <RCCEx_PLL3_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d1c:	e003      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	75fb      	strb	r3, [r7, #23]
      break;
 8003d22:	e000      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10a      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d2c:	4b22      	ldr	r3, [pc, #136]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d3a:	491f      	ldr	r1, [pc, #124]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	658b      	str	r3, [r1, #88]	; 0x58
 8003d40:	e001      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d42:	7dfb      	ldrb	r3, [r7, #23]
 8003d44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d036      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d5c:	d01c      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003d5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d62:	d816      	bhi.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d68:	d003      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003d6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d6e:	d007      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003d70:	e00f      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d72:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	4a10      	ldr	r2, [pc, #64]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d7e:	e00c      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3324      	adds	r3, #36	; 0x24
 8003d84:	2101      	movs	r1, #1
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fc6e 	bl	8004668 <RCCEx_PLL3_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d90:	e003      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	75fb      	strb	r3, [r7, #23]
      break;
 8003d96:	e000      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10d      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dae:	4902      	ldr	r1, [pc, #8]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	654b      	str	r3, [r1, #84]	; 0x54
 8003db4:	e004      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8003db6:	bf00      	nop
 8003db8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
 8003dbe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d029      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd8:	d007      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8003dda:	e00f      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ddc:	4b69      	ldr	r3, [pc, #420]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	4a68      	ldr	r2, [pc, #416]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003de8:	e00b      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3304      	adds	r3, #4
 8003dee:	2102      	movs	r1, #2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fb87 	bl	8004504 <RCCEx_PLL2_Config>
 8003df6:	4603      	mov	r3, r0
 8003df8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003dfa:	e002      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8003e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e02:	7dfb      	ldrb	r3, [r7, #23]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d109      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e08:	4b5e      	ldr	r3, [pc, #376]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e14:	495b      	ldr	r1, [pc, #364]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e1a:	e001      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1c:	7dfb      	ldrb	r3, [r7, #23]
 8003e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3324      	adds	r3, #36	; 0x24
 8003e30:	2102      	movs	r1, #2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fc18 	bl	8004668 <RCCEx_PLL3_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d032      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e58:	d017      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8003e5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e5e:	d811      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e64:	d013      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8003e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e6a:	d80b      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d010      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8003e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e74:	d106      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e76:	4b43      	ldr	r3, [pc, #268]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	4a42      	ldr	r2, [pc, #264]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003e82:	e007      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	75fb      	strb	r3, [r7, #23]
      break;
 8003e88:	e004      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003e8a:	bf00      	nop
 8003e8c:	e002      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003e8e:	bf00      	nop
 8003e90:	e000      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e94:	7dfb      	ldrb	r3, [r7, #23]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10a      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e9a:	4b3a      	ldr	r3, [pc, #232]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ea8:	4936      	ldr	r1, [pc, #216]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	654b      	str	r3, [r1, #84]	; 0x54
 8003eae:	e001      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb0:	7dfb      	ldrb	r3, [r7, #23]
 8003eb2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ec0:	4b30      	ldr	r3, [pc, #192]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ecc:	492d      	ldr	r1, [pc, #180]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ede:	4b29      	ldr	r3, [pc, #164]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eea:	4926      	ldr	r1, [pc, #152]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d008      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003efc:	4b21      	ldr	r3, [pc, #132]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f00:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f08:	491e      	ldr	r1, [pc, #120]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00d      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	4a19      	ldr	r2, [pc, #100]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f24:	6113      	str	r3, [r2, #16]
 8003f26:	4b17      	ldr	r3, [pc, #92]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f30:	4914      	ldr	r1, [pc, #80]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	da08      	bge.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f3e:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4a:	490e      	ldr	r1, [pc, #56]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d009      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f5c:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6a:	4906      	ldr	r1, [pc, #24]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003f70:	7dbb      	ldrb	r3, [r7, #22]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e000      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	58024400 	.word	0x58024400

08003f88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003f8c:	f7ff f852 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8003f90:	4602      	mov	r2, r0
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	091b      	lsrs	r3, r3, #4
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	4904      	ldr	r1, [pc, #16]	; (8003fb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003f9e:	5ccb      	ldrb	r3, [r1, r3]
 8003fa0:	f003 031f 	and.w	r3, r3, #31
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	58024400 	.word	0x58024400
 8003fb0:	0800aa24 	.word	0x0800aa24

08003fb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b089      	sub	sp, #36	; 0x24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fbc:	4ba1      	ldr	r3, [pc, #644]	; (8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003fc6:	4b9f      	ldr	r3, [pc, #636]	; (8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	0b1b      	lsrs	r3, r3, #12
 8003fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fd0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003fd2:	4b9c      	ldr	r3, [pc, #624]	; (8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	091b      	lsrs	r3, r3, #4
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003fde:	4b99      	ldr	r3, [pc, #612]	; (8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe2:	08db      	lsrs	r3, r3, #3
 8003fe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	fb02 f303 	mul.w	r3, r2, r3
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8111 	beq.w	8004224 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b02      	cmp	r3, #2
 8004006:	f000 8083 	beq.w	8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	2b02      	cmp	r3, #2
 800400e:	f200 80a1 	bhi.w	8004154 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d056      	beq.n	80040cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800401e:	e099      	b.n	8004154 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004020:	4b88      	ldr	r3, [pc, #544]	; (8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b00      	cmp	r3, #0
 800402a:	d02d      	beq.n	8004088 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800402c:	4b85      	ldr	r3, [pc, #532]	; (8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	08db      	lsrs	r3, r3, #3
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	4a84      	ldr	r2, [pc, #528]	; (8004248 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
 800403c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	ee07 3a90 	vmov	s15, r3
 8004044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004056:	4b7b      	ldr	r3, [pc, #492]	; (8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004066:	ed97 6a03 	vldr	s12, [r7, #12]
 800406a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800424c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800406e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800407a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800407e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004082:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004086:	e087      	b.n	8004198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004092:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004250 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800409a:	4b6a      	ldr	r3, [pc, #424]	; (8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800409c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800424c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040ca:	e065      	b.n	8004198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80040da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040de:	4b59      	ldr	r3, [pc, #356]	; (8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80040f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800424c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800410a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800410e:	e043      	b.n	8004198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004258 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800411e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004122:	4b48      	ldr	r3, [pc, #288]	; (8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004132:	ed97 6a03 	vldr	s12, [r7, #12]
 8004136:	eddf 5a45 	vldr	s11, [pc, #276]	; 800424c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800413a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800413e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800414a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800414e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004152:	e021      	b.n	8004198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	ee07 3a90 	vmov	s15, r3
 800415a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004166:	4b37      	ldr	r3, [pc, #220]	; (8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004176:	ed97 6a03 	vldr	s12, [r7, #12]
 800417a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800424c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800417e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800418a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800418e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004192:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004196:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004198:	4b2a      	ldr	r3, [pc, #168]	; (8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419c:	0a5b      	lsrs	r3, r3, #9
 800419e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80041b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041be:	ee17 2a90 	vmov	r2, s15
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80041c6:	4b1f      	ldr	r3, [pc, #124]	; (8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	0c1b      	lsrs	r3, r3, #16
 80041cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041d0:	ee07 3a90 	vmov	s15, r3
 80041d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80041e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ec:	ee17 2a90 	vmov	r2, s15
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80041f4:	4b13      	ldr	r3, [pc, #76]	; (8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	0e1b      	lsrs	r3, r3, #24
 80041fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041fe:	ee07 3a90 	vmov	s15, r3
 8004202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800420a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800420e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800421a:	ee17 2a90 	vmov	r2, s15
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004222:	e008      	b.n	8004236 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	609a      	str	r2, [r3, #8]
}
 8004236:	bf00      	nop
 8004238:	3724      	adds	r7, #36	; 0x24
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	58024400 	.word	0x58024400
 8004248:	03d09000 	.word	0x03d09000
 800424c:	46000000 	.word	0x46000000
 8004250:	4c742400 	.word	0x4c742400
 8004254:	4a742400 	.word	0x4a742400
 8004258:	4af42400 	.word	0x4af42400

0800425c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800425c:	b480      	push	{r7}
 800425e:	b089      	sub	sp, #36	; 0x24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004264:	4ba1      	ldr	r3, [pc, #644]	; (80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004268:	f003 0303 	and.w	r3, r3, #3
 800426c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800426e:	4b9f      	ldr	r3, [pc, #636]	; (80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	0d1b      	lsrs	r3, r3, #20
 8004274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004278:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800427a:	4b9c      	ldr	r3, [pc, #624]	; (80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	0a1b      	lsrs	r3, r3, #8
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004286:	4b99      	ldr	r3, [pc, #612]	; (80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428a:	08db      	lsrs	r3, r3, #3
 800428c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	fb02 f303 	mul.w	r3, r2, r3
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 8111 	beq.w	80044cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	f000 8083 	beq.w	80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	f200 80a1 	bhi.w	80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d056      	beq.n	8004374 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80042c6:	e099      	b.n	80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042c8:	4b88      	ldr	r3, [pc, #544]	; (80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d02d      	beq.n	8004330 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042d4:	4b85      	ldr	r3, [pc, #532]	; (80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	08db      	lsrs	r3, r3, #3
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	4a84      	ldr	r2, [pc, #528]	; (80044f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
 80042e4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	ee07 3a90 	vmov	s15, r3
 80042ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042fe:	4b7b      	ldr	r3, [pc, #492]	; (80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004306:	ee07 3a90 	vmov	s15, r3
 800430a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800430e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004312:	eddf 5a78 	vldr	s11, [pc, #480]	; 80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800431e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800432e:	e087      	b.n	8004440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	ee07 3a90 	vmov	s15, r3
 8004336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800433e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004342:	4b6a      	ldr	r3, [pc, #424]	; (80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004352:	ed97 6a03 	vldr	s12, [r7, #12]
 8004356:	eddf 5a67 	vldr	s11, [pc, #412]	; 80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800435a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800435e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004372:	e065      	b.n	8004440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004386:	4b59      	ldr	r3, [pc, #356]	; (80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004396:	ed97 6a03 	vldr	s12, [r7, #12]
 800439a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800439e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043b6:	e043      	b.n	8004440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	ee07 3a90 	vmov	s15, r3
 80043be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004500 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80043c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ca:	4b48      	ldr	r3, [pc, #288]	; (80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043da:	ed97 6a03 	vldr	s12, [r7, #12]
 80043de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043fa:	e021      	b.n	8004440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004406:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800440a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440e:	4b37      	ldr	r3, [pc, #220]	; (80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004422:	eddf 5a34 	vldr	s11, [pc, #208]	; 80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800442a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800442e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800443e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004440:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	0a5b      	lsrs	r3, r3, #9
 8004446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004452:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004456:	ee37 7a87 	vadd.f32	s14, s15, s14
 800445a:	edd7 6a07 	vldr	s13, [r7, #28]
 800445e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004466:	ee17 2a90 	vmov	r2, s15
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800446e:	4b1f      	ldr	r3, [pc, #124]	; (80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	0c1b      	lsrs	r3, r3, #16
 8004474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004478:	ee07 3a90 	vmov	s15, r3
 800447c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004480:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004484:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004488:	edd7 6a07 	vldr	s13, [r7, #28]
 800448c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004494:	ee17 2a90 	vmov	r2, s15
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800449c:	4b13      	ldr	r3, [pc, #76]	; (80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	0e1b      	lsrs	r3, r3, #24
 80044a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80044ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044c2:	ee17 2a90 	vmov	r2, s15
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80044ca:	e008      	b.n	80044de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	609a      	str	r2, [r3, #8]
}
 80044de:	bf00      	nop
 80044e0:	3724      	adds	r7, #36	; 0x24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	58024400 	.word	0x58024400
 80044f0:	03d09000 	.word	0x03d09000
 80044f4:	46000000 	.word	0x46000000
 80044f8:	4c742400 	.word	0x4c742400
 80044fc:	4a742400 	.word	0x4a742400
 8004500:	4af42400 	.word	0x4af42400

08004504 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004512:	4b53      	ldr	r3, [pc, #332]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 8004514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	2b03      	cmp	r3, #3
 800451c:	d101      	bne.n	8004522 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e099      	b.n	8004656 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004522:	4b4f      	ldr	r3, [pc, #316]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a4e      	ldr	r2, [pc, #312]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 8004528:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800452c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452e:	f7fc fdc1 	bl	80010b4 <HAL_GetTick>
 8004532:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004534:	e008      	b.n	8004548 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004536:	f7fc fdbd 	bl	80010b4 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e086      	b.n	8004656 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004548:	4b45      	ldr	r3, [pc, #276]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1f0      	bne.n	8004536 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004554:	4b42      	ldr	r3, [pc, #264]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 8004556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004558:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	031b      	lsls	r3, r3, #12
 8004562:	493f      	ldr	r1, [pc, #252]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 8004564:	4313      	orrs	r3, r2
 8004566:	628b      	str	r3, [r1, #40]	; 0x28
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	3b01      	subs	r3, #1
 800456e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	3b01      	subs	r3, #1
 8004578:	025b      	lsls	r3, r3, #9
 800457a:	b29b      	uxth	r3, r3
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	3b01      	subs	r3, #1
 8004584:	041b      	lsls	r3, r3, #16
 8004586:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	3b01      	subs	r3, #1
 8004592:	061b      	lsls	r3, r3, #24
 8004594:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004598:	4931      	ldr	r1, [pc, #196]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 800459a:	4313      	orrs	r3, r2
 800459c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800459e:	4b30      	ldr	r3, [pc, #192]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	492d      	ldr	r1, [pc, #180]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80045b0:	4b2b      	ldr	r3, [pc, #172]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	f023 0220 	bic.w	r2, r3, #32
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	4928      	ldr	r1, [pc, #160]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80045c2:	4b27      	ldr	r3, [pc, #156]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	4a26      	ldr	r2, [pc, #152]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 80045c8:	f023 0310 	bic.w	r3, r3, #16
 80045cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80045ce:	4b24      	ldr	r3, [pc, #144]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 80045d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045d2:	4b24      	ldr	r3, [pc, #144]	; (8004664 <RCCEx_PLL2_Config+0x160>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	69d2      	ldr	r2, [r2, #28]
 80045da:	00d2      	lsls	r2, r2, #3
 80045dc:	4920      	ldr	r1, [pc, #128]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80045e2:	4b1f      	ldr	r3, [pc, #124]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 80045e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e6:	4a1e      	ldr	r2, [pc, #120]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 80045e8:	f043 0310 	orr.w	r3, r3, #16
 80045ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d106      	bne.n	8004602 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80045f4:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	4a19      	ldr	r2, [pc, #100]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 80045fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004600:	e00f      	b.n	8004622 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d106      	bne.n	8004616 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004608:	4b15      	ldr	r3, [pc, #84]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	4a14      	ldr	r2, [pc, #80]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 800460e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004612:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004614:	e005      	b.n	8004622 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004616:	4b12      	ldr	r3, [pc, #72]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	4a11      	ldr	r2, [pc, #68]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 800461c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004620:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004622:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a0e      	ldr	r2, [pc, #56]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 8004628:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800462c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800462e:	f7fc fd41 	bl	80010b4 <HAL_GetTick>
 8004632:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004634:	e008      	b.n	8004648 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004636:	f7fc fd3d 	bl	80010b4 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e006      	b.n	8004656 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004648:	4b05      	ldr	r3, [pc, #20]	; (8004660 <RCCEx_PLL2_Config+0x15c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0f0      	beq.n	8004636 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004654:	7bfb      	ldrb	r3, [r7, #15]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	58024400 	.word	0x58024400
 8004664:	ffff0007 	.word	0xffff0007

08004668 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004676:	4b53      	ldr	r3, [pc, #332]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	2b03      	cmp	r3, #3
 8004680:	d101      	bne.n	8004686 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e099      	b.n	80047ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004686:	4b4f      	ldr	r3, [pc, #316]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a4e      	ldr	r2, [pc, #312]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 800468c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004692:	f7fc fd0f 	bl	80010b4 <HAL_GetTick>
 8004696:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004698:	e008      	b.n	80046ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800469a:	f7fc fd0b 	bl	80010b4 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e086      	b.n	80047ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046ac:	4b45      	ldr	r3, [pc, #276]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f0      	bne.n	800469a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80046b8:	4b42      	ldr	r3, [pc, #264]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	051b      	lsls	r3, r3, #20
 80046c6:	493f      	ldr	r1, [pc, #252]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	628b      	str	r3, [r1, #40]	; 0x28
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	3b01      	subs	r3, #1
 80046dc:	025b      	lsls	r3, r3, #9
 80046de:	b29b      	uxth	r3, r3
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	041b      	lsls	r3, r3, #16
 80046ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	061b      	lsls	r3, r3, #24
 80046f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046fc:	4931      	ldr	r1, [pc, #196]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004702:	4b30      	ldr	r3, [pc, #192]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	492d      	ldr	r1, [pc, #180]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 8004710:	4313      	orrs	r3, r2
 8004712:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004714:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	4928      	ldr	r1, [pc, #160]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 8004722:	4313      	orrs	r3, r2
 8004724:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004726:	4b27      	ldr	r3, [pc, #156]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	4a26      	ldr	r2, [pc, #152]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 800472c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004730:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004732:	4b24      	ldr	r3, [pc, #144]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 8004734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004736:	4b24      	ldr	r3, [pc, #144]	; (80047c8 <RCCEx_PLL3_Config+0x160>)
 8004738:	4013      	ands	r3, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	69d2      	ldr	r2, [r2, #28]
 800473e:	00d2      	lsls	r2, r2, #3
 8004740:	4920      	ldr	r1, [pc, #128]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 8004742:	4313      	orrs	r3, r2
 8004744:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004746:	4b1f      	ldr	r3, [pc, #124]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	4a1e      	ldr	r2, [pc, #120]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 800474c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004750:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d106      	bne.n	8004766 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004758:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	4a19      	ldr	r2, [pc, #100]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 800475e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004762:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004764:	e00f      	b.n	8004786 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d106      	bne.n	800477a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800476c:	4b15      	ldr	r3, [pc, #84]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	4a14      	ldr	r2, [pc, #80]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 8004772:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004776:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004778:	e005      	b.n	8004786 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800477a:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	4a11      	ldr	r2, [pc, #68]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 8004780:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004784:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004786:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a0e      	ldr	r2, [pc, #56]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 800478c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004792:	f7fc fc8f 	bl	80010b4 <HAL_GetTick>
 8004796:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004798:	e008      	b.n	80047ac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800479a:	f7fc fc8b 	bl	80010b4 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e006      	b.n	80047ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047ac:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <RCCEx_PLL3_Config+0x15c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	58024400 	.word	0x58024400
 80047c8:	ffff0007 	.word	0xffff0007

080047cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e049      	b.n	8004872 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f841 	bl	800487a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3304      	adds	r3, #4
 8004808:	4619      	mov	r1, r3
 800480a:	4610      	mov	r0, r2
 800480c:	f000 fa00 	bl	8004c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
	...

08004890 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d001      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e054      	b.n	8004952 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a26      	ldr	r2, [pc, #152]	; (8004960 <HAL_TIM_Base_Start_IT+0xd0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d022      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d2:	d01d      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a22      	ldr	r2, [pc, #136]	; (8004964 <HAL_TIM_Base_Start_IT+0xd4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d018      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a21      	ldr	r2, [pc, #132]	; (8004968 <HAL_TIM_Base_Start_IT+0xd8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d013      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1f      	ldr	r2, [pc, #124]	; (800496c <HAL_TIM_Base_Start_IT+0xdc>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00e      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1e      	ldr	r2, [pc, #120]	; (8004970 <HAL_TIM_Base_Start_IT+0xe0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d009      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1c      	ldr	r2, [pc, #112]	; (8004974 <HAL_TIM_Base_Start_IT+0xe4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a1b      	ldr	r2, [pc, #108]	; (8004978 <HAL_TIM_Base_Start_IT+0xe8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d115      	bne.n	800493c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	4b19      	ldr	r3, [pc, #100]	; (800497c <HAL_TIM_Base_Start_IT+0xec>)
 8004918:	4013      	ands	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b06      	cmp	r3, #6
 8004920:	d015      	beq.n	800494e <HAL_TIM_Base_Start_IT+0xbe>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004928:	d011      	beq.n	800494e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0201 	orr.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493a:	e008      	b.n	800494e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	e000      	b.n	8004950 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40010000 	.word	0x40010000
 8004964:	40000400 	.word	0x40000400
 8004968:	40000800 	.word	0x40000800
 800496c:	40000c00 	.word	0x40000c00
 8004970:	40010400 	.word	0x40010400
 8004974:	40001800 	.word	0x40001800
 8004978:	40014000 	.word	0x40014000
 800497c:	00010007 	.word	0x00010007

08004980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b02      	cmp	r3, #2
 8004994:	d122      	bne.n	80049dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d11b      	bne.n	80049dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0202 	mvn.w	r2, #2
 80049ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f905 	bl	8004bd2 <HAL_TIM_IC_CaptureCallback>
 80049c8:	e005      	b.n	80049d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f8f7 	bl	8004bbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f908 	bl	8004be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d122      	bne.n	8004a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d11b      	bne.n	8004a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0204 	mvn.w	r2, #4
 8004a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2202      	movs	r2, #2
 8004a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f8db 	bl	8004bd2 <HAL_TIM_IC_CaptureCallback>
 8004a1c:	e005      	b.n	8004a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f8cd 	bl	8004bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f8de 	bl	8004be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d122      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d11b      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0208 	mvn.w	r2, #8
 8004a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2204      	movs	r2, #4
 8004a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f8b1 	bl	8004bd2 <HAL_TIM_IC_CaptureCallback>
 8004a70:	e005      	b.n	8004a7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f8a3 	bl	8004bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f8b4 	bl	8004be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0310 	and.w	r3, r3, #16
 8004a8e:	2b10      	cmp	r3, #16
 8004a90:	d122      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b10      	cmp	r3, #16
 8004a9e:	d11b      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0210 	mvn.w	r2, #16
 8004aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2208      	movs	r2, #8
 8004aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f887 	bl	8004bd2 <HAL_TIM_IC_CaptureCallback>
 8004ac4:	e005      	b.n	8004ad2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f879 	bl	8004bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f88a 	bl	8004be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d10e      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d107      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0201 	mvn.w	r2, #1
 8004afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fc f838 	bl	8000b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0e:	2b80      	cmp	r3, #128	; 0x80
 8004b10:	d10e      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1c:	2b80      	cmp	r3, #128	; 0x80
 8004b1e:	d107      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f914 	bl	8004d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3e:	d10e      	bne.n	8004b5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4a:	2b80      	cmp	r3, #128	; 0x80
 8004b4c:	d107      	bne.n	8004b5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f907 	bl	8004d6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b68:	2b40      	cmp	r3, #64	; 0x40
 8004b6a:	d10e      	bne.n	8004b8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b76:	2b40      	cmp	r3, #64	; 0x40
 8004b78:	d107      	bne.n	8004b8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f838 	bl	8004bfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	d10e      	bne.n	8004bb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b20      	cmp	r3, #32
 8004ba4:	d107      	bne.n	8004bb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f06f 0220 	mvn.w	r2, #32
 8004bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f8c7 	bl	8004d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bb6:	bf00      	nop
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
	...

08004c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a40      	ldr	r2, [pc, #256]	; (8004d24 <TIM_Base_SetConfig+0x114>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d013      	beq.n	8004c50 <TIM_Base_SetConfig+0x40>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2e:	d00f      	beq.n	8004c50 <TIM_Base_SetConfig+0x40>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a3d      	ldr	r2, [pc, #244]	; (8004d28 <TIM_Base_SetConfig+0x118>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00b      	beq.n	8004c50 <TIM_Base_SetConfig+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a3c      	ldr	r2, [pc, #240]	; (8004d2c <TIM_Base_SetConfig+0x11c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d007      	beq.n	8004c50 <TIM_Base_SetConfig+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a3b      	ldr	r2, [pc, #236]	; (8004d30 <TIM_Base_SetConfig+0x120>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d003      	beq.n	8004c50 <TIM_Base_SetConfig+0x40>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a3a      	ldr	r2, [pc, #232]	; (8004d34 <TIM_Base_SetConfig+0x124>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d108      	bne.n	8004c62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a2f      	ldr	r2, [pc, #188]	; (8004d24 <TIM_Base_SetConfig+0x114>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d01f      	beq.n	8004caa <TIM_Base_SetConfig+0x9a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c70:	d01b      	beq.n	8004caa <TIM_Base_SetConfig+0x9a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a2c      	ldr	r2, [pc, #176]	; (8004d28 <TIM_Base_SetConfig+0x118>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d017      	beq.n	8004caa <TIM_Base_SetConfig+0x9a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a2b      	ldr	r2, [pc, #172]	; (8004d2c <TIM_Base_SetConfig+0x11c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d013      	beq.n	8004caa <TIM_Base_SetConfig+0x9a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a2a      	ldr	r2, [pc, #168]	; (8004d30 <TIM_Base_SetConfig+0x120>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00f      	beq.n	8004caa <TIM_Base_SetConfig+0x9a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a29      	ldr	r2, [pc, #164]	; (8004d34 <TIM_Base_SetConfig+0x124>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00b      	beq.n	8004caa <TIM_Base_SetConfig+0x9a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a28      	ldr	r2, [pc, #160]	; (8004d38 <TIM_Base_SetConfig+0x128>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d007      	beq.n	8004caa <TIM_Base_SetConfig+0x9a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a27      	ldr	r2, [pc, #156]	; (8004d3c <TIM_Base_SetConfig+0x12c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d003      	beq.n	8004caa <TIM_Base_SetConfig+0x9a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a26      	ldr	r2, [pc, #152]	; (8004d40 <TIM_Base_SetConfig+0x130>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d108      	bne.n	8004cbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a10      	ldr	r2, [pc, #64]	; (8004d24 <TIM_Base_SetConfig+0x114>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00f      	beq.n	8004d08 <TIM_Base_SetConfig+0xf8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a12      	ldr	r2, [pc, #72]	; (8004d34 <TIM_Base_SetConfig+0x124>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00b      	beq.n	8004d08 <TIM_Base_SetConfig+0xf8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a11      	ldr	r2, [pc, #68]	; (8004d38 <TIM_Base_SetConfig+0x128>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d007      	beq.n	8004d08 <TIM_Base_SetConfig+0xf8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a10      	ldr	r2, [pc, #64]	; (8004d3c <TIM_Base_SetConfig+0x12c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d003      	beq.n	8004d08 <TIM_Base_SetConfig+0xf8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a0f      	ldr	r2, [pc, #60]	; (8004d40 <TIM_Base_SetConfig+0x130>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d103      	bne.n	8004d10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	615a      	str	r2, [r3, #20]
}
 8004d16:	bf00      	nop
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	40010000 	.word	0x40010000
 8004d28:	40000400 	.word	0x40000400
 8004d2c:	40000800 	.word	0x40000800
 8004d30:	40000c00 	.word	0x40000c00
 8004d34:	40010400 	.word	0x40010400
 8004d38:	40014000 	.word	0x40014000
 8004d3c:	40014400 	.word	0x40014400
 8004d40:	40014800 	.word	0x40014800

08004d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e042      	b.n	8004e18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fc f875 	bl	8000e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2224      	movs	r2, #36	; 0x24
 8004dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0201 	bic.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fcd6 	bl	8005774 <UART_SetConfig>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e022      	b.n	8004e18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f001 fb28 	bl	8006430 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f001 fbaf 	bl	8006574 <UART_CheckIdleState>
 8004e16:	4603      	mov	r3, r0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08a      	sub	sp, #40	; 0x28
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e36:	2b20      	cmp	r3, #32
 8004e38:	f040 8083 	bne.w	8004f42 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_UART_Transmit+0x28>
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e07b      	b.n	8004f44 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_UART_Transmit+0x3a>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e074      	b.n	8004f44 <HAL_UART_Transmit+0x124>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2221      	movs	r2, #33	; 0x21
 8004e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e72:	f7fc f91f 	bl	80010b4 <HAL_GetTick>
 8004e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	88fa      	ldrh	r2, [r7, #6]
 8004e7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	88fa      	ldrh	r2, [r7, #6]
 8004e84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e90:	d108      	bne.n	8004ea4 <HAL_UART_Transmit+0x84>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d104      	bne.n	8004ea4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	61bb      	str	r3, [r7, #24]
 8004ea2:	e003      	b.n	8004eac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004eb4:	e02c      	b.n	8004f10 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2180      	movs	r1, #128	; 0x80
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f001 fba2 	bl	800660a <UART_WaitOnFlagUntilTimeout>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e039      	b.n	8004f44 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10b      	bne.n	8004eee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ee4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	3302      	adds	r3, #2
 8004eea:	61bb      	str	r3, [r7, #24]
 8004eec:	e007      	b.n	8004efe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	781a      	ldrb	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	3301      	adds	r3, #1
 8004efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1cc      	bne.n	8004eb6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2200      	movs	r2, #0
 8004f24:	2140      	movs	r1, #64	; 0x40
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f001 fb6f 	bl	800660a <UART_WaitOnFlagUntilTimeout>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e006      	b.n	8004f44 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e000      	b.n	8004f44 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004f42:	2302      	movs	r3, #2
  }
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08a      	sub	sp, #40	; 0x28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	4613      	mov	r3, r2
 8004f58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d142      	bne.n	8004fea <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_UART_Receive_IT+0x24>
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e03b      	b.n	8004fec <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_UART_Receive_IT+0x36>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e034      	b.n	8004fec <HAL_UART_Receive_IT+0xa0>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a17      	ldr	r2, [pc, #92]	; (8004ff4 <HAL_UART_Receive_IT+0xa8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d01f      	beq.n	8004fda <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d018      	beq.n	8004fda <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	e853 3f00 	ldrex	r3, [r3]
 8004fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	623b      	str	r3, [r7, #32]
 8004fc8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fca:	69f9      	ldr	r1, [r7, #28]
 8004fcc:	6a3a      	ldr	r2, [r7, #32]
 8004fce:	e841 2300 	strex	r3, r2, [r1]
 8004fd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1e6      	bne.n	8004fa8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fda:	88fb      	ldrh	r3, [r7, #6]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f001 fbdb 	bl	800679c <UART_Start_Receive_IT>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	e000      	b.n	8004fec <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004fea:	2302      	movs	r3, #2
  }
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3728      	adds	r7, #40	; 0x28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	58000c00 	.word	0x58000c00

08004ff8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b0ba      	sub	sp, #232	; 0xe8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800501e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005022:	f640 030f 	movw	r3, #2063	; 0x80f
 8005026:	4013      	ands	r3, r2
 8005028:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800502c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d11b      	bne.n	800506c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	2b00      	cmp	r3, #0
 800503e:	d015      	beq.n	800506c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d105      	bne.n	8005058 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800504c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 835a 	beq.w	8005716 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	4798      	blx	r3
      }
      return;
 800506a:	e354      	b.n	8005716 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800506c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 811f 	beq.w	80052b4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005076:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800507a:	4b8b      	ldr	r3, [pc, #556]	; (80052a8 <HAL_UART_IRQHandler+0x2b0>)
 800507c:	4013      	ands	r3, r2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005082:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005086:	4b89      	ldr	r3, [pc, #548]	; (80052ac <HAL_UART_IRQHandler+0x2b4>)
 8005088:	4013      	ands	r3, r2
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 8112 	beq.w	80052b4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d011      	beq.n	80050c0 <HAL_UART_IRQHandler+0xc8>
 800509c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00b      	beq.n	80050c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2201      	movs	r2, #1
 80050ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050b6:	f043 0201 	orr.w	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d011      	beq.n	80050f0 <HAL_UART_IRQHandler+0xf8>
 80050cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00b      	beq.n	80050f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2202      	movs	r2, #2
 80050de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e6:	f043 0204 	orr.w	r2, r3, #4
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d011      	beq.n	8005120 <HAL_UART_IRQHandler+0x128>
 80050fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00b      	beq.n	8005120 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2204      	movs	r2, #4
 800510e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005116:	f043 0202 	orr.w	r2, r3, #2
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b00      	cmp	r3, #0
 800512a:	d017      	beq.n	800515c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800512c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d105      	bne.n	8005144 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005138:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800513c:	4b5a      	ldr	r3, [pc, #360]	; (80052a8 <HAL_UART_IRQHandler+0x2b0>)
 800513e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00b      	beq.n	800515c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2208      	movs	r2, #8
 800514a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005152:	f043 0208 	orr.w	r2, r3, #8
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800515c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005164:	2b00      	cmp	r3, #0
 8005166:	d012      	beq.n	800518e <HAL_UART_IRQHandler+0x196>
 8005168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800516c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00c      	beq.n	800518e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800517c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005184:	f043 0220 	orr.w	r2, r3, #32
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 82c0 	beq.w	800571a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800519a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d013      	beq.n	80051ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d105      	bne.n	80051be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e2:	2b40      	cmp	r3, #64	; 0x40
 80051e4:	d005      	beq.n	80051f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d04f      	beq.n	8005292 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f001 fbfc 	bl	80069f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005202:	2b40      	cmp	r3, #64	; 0x40
 8005204:	d141      	bne.n	800528a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3308      	adds	r3, #8
 800520c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800521c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005224:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3308      	adds	r3, #8
 800522e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005232:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800523e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800524a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1d9      	bne.n	8005206 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005256:	2b00      	cmp	r3, #0
 8005258:	d013      	beq.n	8005282 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800525e:	4a14      	ldr	r2, [pc, #80]	; (80052b0 <HAL_UART_IRQHandler+0x2b8>)
 8005260:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005266:	4618      	mov	r0, r3
 8005268:	f7fc fb2e 	bl	80018c8 <HAL_DMA_Abort_IT>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d017      	beq.n	80052a2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800527c:	4610      	mov	r0, r2
 800527e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005280:	e00f      	b.n	80052a2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fa60 	bl	8005748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005288:	e00b      	b.n	80052a2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fa5c 	bl	8005748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005290:	e007      	b.n	80052a2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fa58 	bl	8005748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80052a0:	e23b      	b.n	800571a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a2:	bf00      	nop
    return;
 80052a4:	e239      	b.n	800571a <HAL_UART_IRQHandler+0x722>
 80052a6:	bf00      	nop
 80052a8:	10000001 	.word	0x10000001
 80052ac:	04000120 	.word	0x04000120
 80052b0:	08006abd 	.word	0x08006abd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	f040 81ce 	bne.w	800565a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80052be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c2:	f003 0310 	and.w	r3, r3, #16
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 81c7 	beq.w	800565a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80052cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052d0:	f003 0310 	and.w	r3, r3, #16
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 81c0 	beq.w	800565a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2210      	movs	r2, #16
 80052e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ec:	2b40      	cmp	r3, #64	; 0x40
 80052ee:	f040 813b 	bne.w	8005568 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a8b      	ldr	r2, [pc, #556]	; (8005528 <HAL_UART_IRQHandler+0x530>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d059      	beq.n	80053b2 <HAL_UART_IRQHandler+0x3ba>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a89      	ldr	r2, [pc, #548]	; (800552c <HAL_UART_IRQHandler+0x534>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d053      	beq.n	80053b2 <HAL_UART_IRQHandler+0x3ba>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a87      	ldr	r2, [pc, #540]	; (8005530 <HAL_UART_IRQHandler+0x538>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d04d      	beq.n	80053b2 <HAL_UART_IRQHandler+0x3ba>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a85      	ldr	r2, [pc, #532]	; (8005534 <HAL_UART_IRQHandler+0x53c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d047      	beq.n	80053b2 <HAL_UART_IRQHandler+0x3ba>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a83      	ldr	r2, [pc, #524]	; (8005538 <HAL_UART_IRQHandler+0x540>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d041      	beq.n	80053b2 <HAL_UART_IRQHandler+0x3ba>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a81      	ldr	r2, [pc, #516]	; (800553c <HAL_UART_IRQHandler+0x544>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d03b      	beq.n	80053b2 <HAL_UART_IRQHandler+0x3ba>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a7f      	ldr	r2, [pc, #508]	; (8005540 <HAL_UART_IRQHandler+0x548>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d035      	beq.n	80053b2 <HAL_UART_IRQHandler+0x3ba>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a7d      	ldr	r2, [pc, #500]	; (8005544 <HAL_UART_IRQHandler+0x54c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d02f      	beq.n	80053b2 <HAL_UART_IRQHandler+0x3ba>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a7b      	ldr	r2, [pc, #492]	; (8005548 <HAL_UART_IRQHandler+0x550>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d029      	beq.n	80053b2 <HAL_UART_IRQHandler+0x3ba>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a79      	ldr	r2, [pc, #484]	; (800554c <HAL_UART_IRQHandler+0x554>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d023      	beq.n	80053b2 <HAL_UART_IRQHandler+0x3ba>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a77      	ldr	r2, [pc, #476]	; (8005550 <HAL_UART_IRQHandler+0x558>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d01d      	beq.n	80053b2 <HAL_UART_IRQHandler+0x3ba>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a75      	ldr	r2, [pc, #468]	; (8005554 <HAL_UART_IRQHandler+0x55c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d017      	beq.n	80053b2 <HAL_UART_IRQHandler+0x3ba>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a73      	ldr	r2, [pc, #460]	; (8005558 <HAL_UART_IRQHandler+0x560>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d011      	beq.n	80053b2 <HAL_UART_IRQHandler+0x3ba>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a71      	ldr	r2, [pc, #452]	; (800555c <HAL_UART_IRQHandler+0x564>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00b      	beq.n	80053b2 <HAL_UART_IRQHandler+0x3ba>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a6f      	ldr	r2, [pc, #444]	; (8005560 <HAL_UART_IRQHandler+0x568>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d005      	beq.n	80053b2 <HAL_UART_IRQHandler+0x3ba>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a6d      	ldr	r2, [pc, #436]	; (8005564 <HAL_UART_IRQHandler+0x56c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d105      	bne.n	80053be <HAL_UART_IRQHandler+0x3c6>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	e004      	b.n	80053c8 <HAL_UART_IRQHandler+0x3d0>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 81a4 	beq.w	800571e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053e0:	429a      	cmp	r2, r3
 80053e2:	f080 819c 	bcs.w	800571e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053fa:	f000 8086 	beq.w	800550a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005412:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005416:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800541a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005428:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800542c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005430:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005434:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005438:	e841 2300 	strex	r3, r2, [r1]
 800543c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005440:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1da      	bne.n	80053fe <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3308      	adds	r3, #8
 800544e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005458:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800545a:	f023 0301 	bic.w	r3, r3, #1
 800545e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3308      	adds	r3, #8
 8005468:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800546c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005470:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005472:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005474:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800547e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e1      	bne.n	8005448 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3308      	adds	r3, #8
 800548a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800549a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3308      	adds	r3, #8
 80054a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e3      	bne.n	8005484 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054da:	f023 0310 	bic.w	r3, r3, #16
 80054de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80054ee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e4      	bne.n	80054ca <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005504:	4618      	mov	r0, r3
 8005506:	f7fb fec1 	bl	800128c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005516:	b29b      	uxth	r3, r3
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	b29b      	uxth	r3, r3
 800551c:	4619      	mov	r1, r3
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f91c 	bl	800575c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005524:	e0fb      	b.n	800571e <HAL_UART_IRQHandler+0x726>
 8005526:	bf00      	nop
 8005528:	40020010 	.word	0x40020010
 800552c:	40020028 	.word	0x40020028
 8005530:	40020040 	.word	0x40020040
 8005534:	40020058 	.word	0x40020058
 8005538:	40020070 	.word	0x40020070
 800553c:	40020088 	.word	0x40020088
 8005540:	400200a0 	.word	0x400200a0
 8005544:	400200b8 	.word	0x400200b8
 8005548:	40020410 	.word	0x40020410
 800554c:	40020428 	.word	0x40020428
 8005550:	40020440 	.word	0x40020440
 8005554:	40020458 	.word	0x40020458
 8005558:	40020470 	.word	0x40020470
 800555c:	40020488 	.word	0x40020488
 8005560:	400204a0 	.word	0x400204a0
 8005564:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005574:	b29b      	uxth	r3, r3
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 80cc 	beq.w	8005722 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800558a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 80c7 	beq.w	8005722 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559c:	e853 3f00 	ldrex	r3, [r3]
 80055a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055b6:	647b      	str	r3, [r7, #68]	; 0x44
 80055b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e4      	bne.n	8005594 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3308      	adds	r3, #8
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	623b      	str	r3, [r7, #32]
   return(result);
 80055da:	6a3a      	ldr	r2, [r7, #32]
 80055dc:	4b54      	ldr	r3, [pc, #336]	; (8005730 <HAL_UART_IRQHandler+0x738>)
 80055de:	4013      	ands	r3, r2
 80055e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3308      	adds	r3, #8
 80055ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055ee:	633a      	str	r2, [r7, #48]	; 0x30
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e3      	bne.n	80055ca <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2220      	movs	r2, #32
 8005606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	60fb      	str	r3, [r7, #12]
   return(result);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0310 	bic.w	r3, r3, #16
 800562a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005638:	61fb      	str	r3, [r7, #28]
 800563a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	69b9      	ldr	r1, [r7, #24]
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	617b      	str	r3, [r7, #20]
   return(result);
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e4      	bne.n	8005616 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800564c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005650:	4619      	mov	r1, r3
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f882 	bl	800575c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005658:	e063      	b.n	8005722 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800565a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800565e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00e      	beq.n	8005684 <HAL_UART_IRQHandler+0x68c>
 8005666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800566a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d008      	beq.n	8005684 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800567a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f001 febb 	bl	80073f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005682:	e051      	b.n	8005728 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568c:	2b00      	cmp	r3, #0
 800568e:	d014      	beq.n	80056ba <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005698:	2b00      	cmp	r3, #0
 800569a:	d105      	bne.n	80056a8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800569c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d008      	beq.n	80056ba <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d03a      	beq.n	8005726 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	4798      	blx	r3
    }
    return;
 80056b8:	e035      	b.n	8005726 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d009      	beq.n	80056da <HAL_UART_IRQHandler+0x6e2>
 80056c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f001 fa08 	bl	8006ae8 <UART_EndTransmit_IT>
    return;
 80056d8:	e026      	b.n	8005728 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80056da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d009      	beq.n	80056fa <HAL_UART_IRQHandler+0x702>
 80056e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f001 fe94 	bl	8007420 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056f8:	e016      	b.n	8005728 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80056fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d010      	beq.n	8005728 <HAL_UART_IRQHandler+0x730>
 8005706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800570a:	2b00      	cmp	r3, #0
 800570c:	da0c      	bge.n	8005728 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f001 fe7c 	bl	800740c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005714:	e008      	b.n	8005728 <HAL_UART_IRQHandler+0x730>
      return;
 8005716:	bf00      	nop
 8005718:	e006      	b.n	8005728 <HAL_UART_IRQHandler+0x730>
    return;
 800571a:	bf00      	nop
 800571c:	e004      	b.n	8005728 <HAL_UART_IRQHandler+0x730>
      return;
 800571e:	bf00      	nop
 8005720:	e002      	b.n	8005728 <HAL_UART_IRQHandler+0x730>
      return;
 8005722:	bf00      	nop
 8005724:	e000      	b.n	8005728 <HAL_UART_IRQHandler+0x730>
    return;
 8005726:	bf00      	nop
  }
}
 8005728:	37e8      	adds	r7, #232	; 0xe8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	effffffe 	.word	0xeffffffe

08005734 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	460b      	mov	r3, r1
 8005766:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005774:	b5b0      	push	{r4, r5, r7, lr}
 8005776:	b08e      	sub	sp, #56	; 0x38
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800577c:	2300      	movs	r3, #0
 800577e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	431a      	orrs	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	4313      	orrs	r3, r2
 8005798:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	4bbf      	ldr	r3, [pc, #764]	; (8005aa0 <UART_SetConfig+0x32c>)
 80057a2:	4013      	ands	r3, r2
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057aa:	430b      	orrs	r3, r1
 80057ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4ab5      	ldr	r2, [pc, #724]	; (8005aa4 <UART_SetConfig+0x330>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d004      	beq.n	80057de <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057da:	4313      	orrs	r3, r2
 80057dc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	4bb0      	ldr	r3, [pc, #704]	; (8005aa8 <UART_SetConfig+0x334>)
 80057e6:	4013      	ands	r3, r2
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6812      	ldr	r2, [r2, #0]
 80057ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057ee:	430b      	orrs	r3, r1
 80057f0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f8:	f023 010f 	bic.w	r1, r3, #15
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4aa7      	ldr	r2, [pc, #668]	; (8005aac <UART_SetConfig+0x338>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d176      	bne.n	8005900 <UART_SetConfig+0x18c>
 8005812:	4ba7      	ldr	r3, [pc, #668]	; (8005ab0 <UART_SetConfig+0x33c>)
 8005814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800581a:	2b28      	cmp	r3, #40	; 0x28
 800581c:	d86c      	bhi.n	80058f8 <UART_SetConfig+0x184>
 800581e:	a201      	add	r2, pc, #4	; (adr r2, 8005824 <UART_SetConfig+0xb0>)
 8005820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005824:	080058c9 	.word	0x080058c9
 8005828:	080058f9 	.word	0x080058f9
 800582c:	080058f9 	.word	0x080058f9
 8005830:	080058f9 	.word	0x080058f9
 8005834:	080058f9 	.word	0x080058f9
 8005838:	080058f9 	.word	0x080058f9
 800583c:	080058f9 	.word	0x080058f9
 8005840:	080058f9 	.word	0x080058f9
 8005844:	080058d1 	.word	0x080058d1
 8005848:	080058f9 	.word	0x080058f9
 800584c:	080058f9 	.word	0x080058f9
 8005850:	080058f9 	.word	0x080058f9
 8005854:	080058f9 	.word	0x080058f9
 8005858:	080058f9 	.word	0x080058f9
 800585c:	080058f9 	.word	0x080058f9
 8005860:	080058f9 	.word	0x080058f9
 8005864:	080058d9 	.word	0x080058d9
 8005868:	080058f9 	.word	0x080058f9
 800586c:	080058f9 	.word	0x080058f9
 8005870:	080058f9 	.word	0x080058f9
 8005874:	080058f9 	.word	0x080058f9
 8005878:	080058f9 	.word	0x080058f9
 800587c:	080058f9 	.word	0x080058f9
 8005880:	080058f9 	.word	0x080058f9
 8005884:	080058e1 	.word	0x080058e1
 8005888:	080058f9 	.word	0x080058f9
 800588c:	080058f9 	.word	0x080058f9
 8005890:	080058f9 	.word	0x080058f9
 8005894:	080058f9 	.word	0x080058f9
 8005898:	080058f9 	.word	0x080058f9
 800589c:	080058f9 	.word	0x080058f9
 80058a0:	080058f9 	.word	0x080058f9
 80058a4:	080058e9 	.word	0x080058e9
 80058a8:	080058f9 	.word	0x080058f9
 80058ac:	080058f9 	.word	0x080058f9
 80058b0:	080058f9 	.word	0x080058f9
 80058b4:	080058f9 	.word	0x080058f9
 80058b8:	080058f9 	.word	0x080058f9
 80058bc:	080058f9 	.word	0x080058f9
 80058c0:	080058f9 	.word	0x080058f9
 80058c4:	080058f1 	.word	0x080058f1
 80058c8:	2301      	movs	r3, #1
 80058ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ce:	e326      	b.n	8005f1e <UART_SetConfig+0x7aa>
 80058d0:	2304      	movs	r3, #4
 80058d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058d6:	e322      	b.n	8005f1e <UART_SetConfig+0x7aa>
 80058d8:	2308      	movs	r3, #8
 80058da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058de:	e31e      	b.n	8005f1e <UART_SetConfig+0x7aa>
 80058e0:	2310      	movs	r3, #16
 80058e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058e6:	e31a      	b.n	8005f1e <UART_SetConfig+0x7aa>
 80058e8:	2320      	movs	r3, #32
 80058ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ee:	e316      	b.n	8005f1e <UART_SetConfig+0x7aa>
 80058f0:	2340      	movs	r3, #64	; 0x40
 80058f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058f6:	e312      	b.n	8005f1e <UART_SetConfig+0x7aa>
 80058f8:	2380      	movs	r3, #128	; 0x80
 80058fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058fe:	e30e      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a6b      	ldr	r2, [pc, #428]	; (8005ab4 <UART_SetConfig+0x340>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d130      	bne.n	800596c <UART_SetConfig+0x1f8>
 800590a:	4b69      	ldr	r3, [pc, #420]	; (8005ab0 <UART_SetConfig+0x33c>)
 800590c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	2b05      	cmp	r3, #5
 8005914:	d826      	bhi.n	8005964 <UART_SetConfig+0x1f0>
 8005916:	a201      	add	r2, pc, #4	; (adr r2, 800591c <UART_SetConfig+0x1a8>)
 8005918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591c:	08005935 	.word	0x08005935
 8005920:	0800593d 	.word	0x0800593d
 8005924:	08005945 	.word	0x08005945
 8005928:	0800594d 	.word	0x0800594d
 800592c:	08005955 	.word	0x08005955
 8005930:	0800595d 	.word	0x0800595d
 8005934:	2300      	movs	r3, #0
 8005936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800593a:	e2f0      	b.n	8005f1e <UART_SetConfig+0x7aa>
 800593c:	2304      	movs	r3, #4
 800593e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005942:	e2ec      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005944:	2308      	movs	r3, #8
 8005946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800594a:	e2e8      	b.n	8005f1e <UART_SetConfig+0x7aa>
 800594c:	2310      	movs	r3, #16
 800594e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005952:	e2e4      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005954:	2320      	movs	r3, #32
 8005956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800595a:	e2e0      	b.n	8005f1e <UART_SetConfig+0x7aa>
 800595c:	2340      	movs	r3, #64	; 0x40
 800595e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005962:	e2dc      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005964:	2380      	movs	r3, #128	; 0x80
 8005966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800596a:	e2d8      	b.n	8005f1e <UART_SetConfig+0x7aa>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a51      	ldr	r2, [pc, #324]	; (8005ab8 <UART_SetConfig+0x344>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d130      	bne.n	80059d8 <UART_SetConfig+0x264>
 8005976:	4b4e      	ldr	r3, [pc, #312]	; (8005ab0 <UART_SetConfig+0x33c>)
 8005978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	2b05      	cmp	r3, #5
 8005980:	d826      	bhi.n	80059d0 <UART_SetConfig+0x25c>
 8005982:	a201      	add	r2, pc, #4	; (adr r2, 8005988 <UART_SetConfig+0x214>)
 8005984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005988:	080059a1 	.word	0x080059a1
 800598c:	080059a9 	.word	0x080059a9
 8005990:	080059b1 	.word	0x080059b1
 8005994:	080059b9 	.word	0x080059b9
 8005998:	080059c1 	.word	0x080059c1
 800599c:	080059c9 	.word	0x080059c9
 80059a0:	2300      	movs	r3, #0
 80059a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059a6:	e2ba      	b.n	8005f1e <UART_SetConfig+0x7aa>
 80059a8:	2304      	movs	r3, #4
 80059aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ae:	e2b6      	b.n	8005f1e <UART_SetConfig+0x7aa>
 80059b0:	2308      	movs	r3, #8
 80059b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059b6:	e2b2      	b.n	8005f1e <UART_SetConfig+0x7aa>
 80059b8:	2310      	movs	r3, #16
 80059ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059be:	e2ae      	b.n	8005f1e <UART_SetConfig+0x7aa>
 80059c0:	2320      	movs	r3, #32
 80059c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059c6:	e2aa      	b.n	8005f1e <UART_SetConfig+0x7aa>
 80059c8:	2340      	movs	r3, #64	; 0x40
 80059ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ce:	e2a6      	b.n	8005f1e <UART_SetConfig+0x7aa>
 80059d0:	2380      	movs	r3, #128	; 0x80
 80059d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059d6:	e2a2      	b.n	8005f1e <UART_SetConfig+0x7aa>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a37      	ldr	r2, [pc, #220]	; (8005abc <UART_SetConfig+0x348>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d130      	bne.n	8005a44 <UART_SetConfig+0x2d0>
 80059e2:	4b33      	ldr	r3, [pc, #204]	; (8005ab0 <UART_SetConfig+0x33c>)
 80059e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	2b05      	cmp	r3, #5
 80059ec:	d826      	bhi.n	8005a3c <UART_SetConfig+0x2c8>
 80059ee:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <UART_SetConfig+0x280>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005a0d 	.word	0x08005a0d
 80059f8:	08005a15 	.word	0x08005a15
 80059fc:	08005a1d 	.word	0x08005a1d
 8005a00:	08005a25 	.word	0x08005a25
 8005a04:	08005a2d 	.word	0x08005a2d
 8005a08:	08005a35 	.word	0x08005a35
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a12:	e284      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005a14:	2304      	movs	r3, #4
 8005a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a1a:	e280      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a22:	e27c      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005a24:	2310      	movs	r3, #16
 8005a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a2a:	e278      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005a2c:	2320      	movs	r3, #32
 8005a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a32:	e274      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005a34:	2340      	movs	r3, #64	; 0x40
 8005a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a3a:	e270      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005a3c:	2380      	movs	r3, #128	; 0x80
 8005a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a42:	e26c      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a1d      	ldr	r2, [pc, #116]	; (8005ac0 <UART_SetConfig+0x34c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d142      	bne.n	8005ad4 <UART_SetConfig+0x360>
 8005a4e:	4b18      	ldr	r3, [pc, #96]	; (8005ab0 <UART_SetConfig+0x33c>)
 8005a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	2b05      	cmp	r3, #5
 8005a58:	d838      	bhi.n	8005acc <UART_SetConfig+0x358>
 8005a5a:	a201      	add	r2, pc, #4	; (adr r2, 8005a60 <UART_SetConfig+0x2ec>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005a79 	.word	0x08005a79
 8005a64:	08005a81 	.word	0x08005a81
 8005a68:	08005a89 	.word	0x08005a89
 8005a6c:	08005a91 	.word	0x08005a91
 8005a70:	08005a99 	.word	0x08005a99
 8005a74:	08005ac5 	.word	0x08005ac5
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a7e:	e24e      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005a80:	2304      	movs	r3, #4
 8005a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a86:	e24a      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005a88:	2308      	movs	r3, #8
 8005a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a8e:	e246      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005a90:	2310      	movs	r3, #16
 8005a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a96:	e242      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005a98:	2320      	movs	r3, #32
 8005a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a9e:	e23e      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005aa0:	cfff69f3 	.word	0xcfff69f3
 8005aa4:	58000c00 	.word	0x58000c00
 8005aa8:	11fff4ff 	.word	0x11fff4ff
 8005aac:	40011000 	.word	0x40011000
 8005ab0:	58024400 	.word	0x58024400
 8005ab4:	40004400 	.word	0x40004400
 8005ab8:	40004800 	.word	0x40004800
 8005abc:	40004c00 	.word	0x40004c00
 8005ac0:	40005000 	.word	0x40005000
 8005ac4:	2340      	movs	r3, #64	; 0x40
 8005ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aca:	e228      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005acc:	2380      	movs	r3, #128	; 0x80
 8005ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ad2:	e224      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4ab1      	ldr	r2, [pc, #708]	; (8005da0 <UART_SetConfig+0x62c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d176      	bne.n	8005bcc <UART_SetConfig+0x458>
 8005ade:	4bb1      	ldr	r3, [pc, #708]	; (8005da4 <UART_SetConfig+0x630>)
 8005ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ae6:	2b28      	cmp	r3, #40	; 0x28
 8005ae8:	d86c      	bhi.n	8005bc4 <UART_SetConfig+0x450>
 8005aea:	a201      	add	r2, pc, #4	; (adr r2, 8005af0 <UART_SetConfig+0x37c>)
 8005aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af0:	08005b95 	.word	0x08005b95
 8005af4:	08005bc5 	.word	0x08005bc5
 8005af8:	08005bc5 	.word	0x08005bc5
 8005afc:	08005bc5 	.word	0x08005bc5
 8005b00:	08005bc5 	.word	0x08005bc5
 8005b04:	08005bc5 	.word	0x08005bc5
 8005b08:	08005bc5 	.word	0x08005bc5
 8005b0c:	08005bc5 	.word	0x08005bc5
 8005b10:	08005b9d 	.word	0x08005b9d
 8005b14:	08005bc5 	.word	0x08005bc5
 8005b18:	08005bc5 	.word	0x08005bc5
 8005b1c:	08005bc5 	.word	0x08005bc5
 8005b20:	08005bc5 	.word	0x08005bc5
 8005b24:	08005bc5 	.word	0x08005bc5
 8005b28:	08005bc5 	.word	0x08005bc5
 8005b2c:	08005bc5 	.word	0x08005bc5
 8005b30:	08005ba5 	.word	0x08005ba5
 8005b34:	08005bc5 	.word	0x08005bc5
 8005b38:	08005bc5 	.word	0x08005bc5
 8005b3c:	08005bc5 	.word	0x08005bc5
 8005b40:	08005bc5 	.word	0x08005bc5
 8005b44:	08005bc5 	.word	0x08005bc5
 8005b48:	08005bc5 	.word	0x08005bc5
 8005b4c:	08005bc5 	.word	0x08005bc5
 8005b50:	08005bad 	.word	0x08005bad
 8005b54:	08005bc5 	.word	0x08005bc5
 8005b58:	08005bc5 	.word	0x08005bc5
 8005b5c:	08005bc5 	.word	0x08005bc5
 8005b60:	08005bc5 	.word	0x08005bc5
 8005b64:	08005bc5 	.word	0x08005bc5
 8005b68:	08005bc5 	.word	0x08005bc5
 8005b6c:	08005bc5 	.word	0x08005bc5
 8005b70:	08005bb5 	.word	0x08005bb5
 8005b74:	08005bc5 	.word	0x08005bc5
 8005b78:	08005bc5 	.word	0x08005bc5
 8005b7c:	08005bc5 	.word	0x08005bc5
 8005b80:	08005bc5 	.word	0x08005bc5
 8005b84:	08005bc5 	.word	0x08005bc5
 8005b88:	08005bc5 	.word	0x08005bc5
 8005b8c:	08005bc5 	.word	0x08005bc5
 8005b90:	08005bbd 	.word	0x08005bbd
 8005b94:	2301      	movs	r3, #1
 8005b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b9a:	e1c0      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005b9c:	2304      	movs	r3, #4
 8005b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ba2:	e1bc      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005ba4:	2308      	movs	r3, #8
 8005ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005baa:	e1b8      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005bac:	2310      	movs	r3, #16
 8005bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bb2:	e1b4      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005bb4:	2320      	movs	r3, #32
 8005bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bba:	e1b0      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005bbc:	2340      	movs	r3, #64	; 0x40
 8005bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc2:	e1ac      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005bc4:	2380      	movs	r3, #128	; 0x80
 8005bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bca:	e1a8      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a75      	ldr	r2, [pc, #468]	; (8005da8 <UART_SetConfig+0x634>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d130      	bne.n	8005c38 <UART_SetConfig+0x4c4>
 8005bd6:	4b73      	ldr	r3, [pc, #460]	; (8005da4 <UART_SetConfig+0x630>)
 8005bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	2b05      	cmp	r3, #5
 8005be0:	d826      	bhi.n	8005c30 <UART_SetConfig+0x4bc>
 8005be2:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <UART_SetConfig+0x474>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005c01 	.word	0x08005c01
 8005bec:	08005c09 	.word	0x08005c09
 8005bf0:	08005c11 	.word	0x08005c11
 8005bf4:	08005c19 	.word	0x08005c19
 8005bf8:	08005c21 	.word	0x08005c21
 8005bfc:	08005c29 	.word	0x08005c29
 8005c00:	2300      	movs	r3, #0
 8005c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c06:	e18a      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005c08:	2304      	movs	r3, #4
 8005c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c0e:	e186      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005c10:	2308      	movs	r3, #8
 8005c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c16:	e182      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005c18:	2310      	movs	r3, #16
 8005c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c1e:	e17e      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005c20:	2320      	movs	r3, #32
 8005c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c26:	e17a      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005c28:	2340      	movs	r3, #64	; 0x40
 8005c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c2e:	e176      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005c30:	2380      	movs	r3, #128	; 0x80
 8005c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c36:	e172      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a5b      	ldr	r2, [pc, #364]	; (8005dac <UART_SetConfig+0x638>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d130      	bne.n	8005ca4 <UART_SetConfig+0x530>
 8005c42:	4b58      	ldr	r3, [pc, #352]	; (8005da4 <UART_SetConfig+0x630>)
 8005c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	2b05      	cmp	r3, #5
 8005c4c:	d826      	bhi.n	8005c9c <UART_SetConfig+0x528>
 8005c4e:	a201      	add	r2, pc, #4	; (adr r2, 8005c54 <UART_SetConfig+0x4e0>)
 8005c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c54:	08005c6d 	.word	0x08005c6d
 8005c58:	08005c75 	.word	0x08005c75
 8005c5c:	08005c7d 	.word	0x08005c7d
 8005c60:	08005c85 	.word	0x08005c85
 8005c64:	08005c8d 	.word	0x08005c8d
 8005c68:	08005c95 	.word	0x08005c95
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c72:	e154      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005c74:	2304      	movs	r3, #4
 8005c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c7a:	e150      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005c7c:	2308      	movs	r3, #8
 8005c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c82:	e14c      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005c84:	2310      	movs	r3, #16
 8005c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c8a:	e148      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005c8c:	2320      	movs	r3, #32
 8005c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c92:	e144      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005c94:	2340      	movs	r3, #64	; 0x40
 8005c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c9a:	e140      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005c9c:	2380      	movs	r3, #128	; 0x80
 8005c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ca2:	e13c      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a41      	ldr	r2, [pc, #260]	; (8005db0 <UART_SetConfig+0x63c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	f040 8082 	bne.w	8005db4 <UART_SetConfig+0x640>
 8005cb0:	4b3c      	ldr	r3, [pc, #240]	; (8005da4 <UART_SetConfig+0x630>)
 8005cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cb8:	2b28      	cmp	r3, #40	; 0x28
 8005cba:	d86d      	bhi.n	8005d98 <UART_SetConfig+0x624>
 8005cbc:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <UART_SetConfig+0x550>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005d69 	.word	0x08005d69
 8005cc8:	08005d99 	.word	0x08005d99
 8005ccc:	08005d99 	.word	0x08005d99
 8005cd0:	08005d99 	.word	0x08005d99
 8005cd4:	08005d99 	.word	0x08005d99
 8005cd8:	08005d99 	.word	0x08005d99
 8005cdc:	08005d99 	.word	0x08005d99
 8005ce0:	08005d99 	.word	0x08005d99
 8005ce4:	08005d71 	.word	0x08005d71
 8005ce8:	08005d99 	.word	0x08005d99
 8005cec:	08005d99 	.word	0x08005d99
 8005cf0:	08005d99 	.word	0x08005d99
 8005cf4:	08005d99 	.word	0x08005d99
 8005cf8:	08005d99 	.word	0x08005d99
 8005cfc:	08005d99 	.word	0x08005d99
 8005d00:	08005d99 	.word	0x08005d99
 8005d04:	08005d79 	.word	0x08005d79
 8005d08:	08005d99 	.word	0x08005d99
 8005d0c:	08005d99 	.word	0x08005d99
 8005d10:	08005d99 	.word	0x08005d99
 8005d14:	08005d99 	.word	0x08005d99
 8005d18:	08005d99 	.word	0x08005d99
 8005d1c:	08005d99 	.word	0x08005d99
 8005d20:	08005d99 	.word	0x08005d99
 8005d24:	08005d81 	.word	0x08005d81
 8005d28:	08005d99 	.word	0x08005d99
 8005d2c:	08005d99 	.word	0x08005d99
 8005d30:	08005d99 	.word	0x08005d99
 8005d34:	08005d99 	.word	0x08005d99
 8005d38:	08005d99 	.word	0x08005d99
 8005d3c:	08005d99 	.word	0x08005d99
 8005d40:	08005d99 	.word	0x08005d99
 8005d44:	08005d89 	.word	0x08005d89
 8005d48:	08005d99 	.word	0x08005d99
 8005d4c:	08005d99 	.word	0x08005d99
 8005d50:	08005d99 	.word	0x08005d99
 8005d54:	08005d99 	.word	0x08005d99
 8005d58:	08005d99 	.word	0x08005d99
 8005d5c:	08005d99 	.word	0x08005d99
 8005d60:	08005d99 	.word	0x08005d99
 8005d64:	08005d91 	.word	0x08005d91
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d6e:	e0d6      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005d70:	2304      	movs	r3, #4
 8005d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d76:	e0d2      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005d78:	2308      	movs	r3, #8
 8005d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d7e:	e0ce      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005d80:	2310      	movs	r3, #16
 8005d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d86:	e0ca      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005d88:	2320      	movs	r3, #32
 8005d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d8e:	e0c6      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005d90:	2340      	movs	r3, #64	; 0x40
 8005d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d96:	e0c2      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005d98:	2380      	movs	r3, #128	; 0x80
 8005d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d9e:	e0be      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005da0:	40011400 	.word	0x40011400
 8005da4:	58024400 	.word	0x58024400
 8005da8:	40007800 	.word	0x40007800
 8005dac:	40007c00 	.word	0x40007c00
 8005db0:	40011800 	.word	0x40011800
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4aad      	ldr	r2, [pc, #692]	; (8006070 <UART_SetConfig+0x8fc>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d176      	bne.n	8005eac <UART_SetConfig+0x738>
 8005dbe:	4bad      	ldr	r3, [pc, #692]	; (8006074 <UART_SetConfig+0x900>)
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dc6:	2b28      	cmp	r3, #40	; 0x28
 8005dc8:	d86c      	bhi.n	8005ea4 <UART_SetConfig+0x730>
 8005dca:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <UART_SetConfig+0x65c>)
 8005dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd0:	08005e75 	.word	0x08005e75
 8005dd4:	08005ea5 	.word	0x08005ea5
 8005dd8:	08005ea5 	.word	0x08005ea5
 8005ddc:	08005ea5 	.word	0x08005ea5
 8005de0:	08005ea5 	.word	0x08005ea5
 8005de4:	08005ea5 	.word	0x08005ea5
 8005de8:	08005ea5 	.word	0x08005ea5
 8005dec:	08005ea5 	.word	0x08005ea5
 8005df0:	08005e7d 	.word	0x08005e7d
 8005df4:	08005ea5 	.word	0x08005ea5
 8005df8:	08005ea5 	.word	0x08005ea5
 8005dfc:	08005ea5 	.word	0x08005ea5
 8005e00:	08005ea5 	.word	0x08005ea5
 8005e04:	08005ea5 	.word	0x08005ea5
 8005e08:	08005ea5 	.word	0x08005ea5
 8005e0c:	08005ea5 	.word	0x08005ea5
 8005e10:	08005e85 	.word	0x08005e85
 8005e14:	08005ea5 	.word	0x08005ea5
 8005e18:	08005ea5 	.word	0x08005ea5
 8005e1c:	08005ea5 	.word	0x08005ea5
 8005e20:	08005ea5 	.word	0x08005ea5
 8005e24:	08005ea5 	.word	0x08005ea5
 8005e28:	08005ea5 	.word	0x08005ea5
 8005e2c:	08005ea5 	.word	0x08005ea5
 8005e30:	08005e8d 	.word	0x08005e8d
 8005e34:	08005ea5 	.word	0x08005ea5
 8005e38:	08005ea5 	.word	0x08005ea5
 8005e3c:	08005ea5 	.word	0x08005ea5
 8005e40:	08005ea5 	.word	0x08005ea5
 8005e44:	08005ea5 	.word	0x08005ea5
 8005e48:	08005ea5 	.word	0x08005ea5
 8005e4c:	08005ea5 	.word	0x08005ea5
 8005e50:	08005e95 	.word	0x08005e95
 8005e54:	08005ea5 	.word	0x08005ea5
 8005e58:	08005ea5 	.word	0x08005ea5
 8005e5c:	08005ea5 	.word	0x08005ea5
 8005e60:	08005ea5 	.word	0x08005ea5
 8005e64:	08005ea5 	.word	0x08005ea5
 8005e68:	08005ea5 	.word	0x08005ea5
 8005e6c:	08005ea5 	.word	0x08005ea5
 8005e70:	08005e9d 	.word	0x08005e9d
 8005e74:	2301      	movs	r3, #1
 8005e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e7a:	e050      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005e7c:	2304      	movs	r3, #4
 8005e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e82:	e04c      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005e84:	2308      	movs	r3, #8
 8005e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8a:	e048      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005e8c:	2310      	movs	r3, #16
 8005e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e92:	e044      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005e94:	2320      	movs	r3, #32
 8005e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9a:	e040      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005e9c:	2340      	movs	r3, #64	; 0x40
 8005e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea2:	e03c      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005ea4:	2380      	movs	r3, #128	; 0x80
 8005ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eaa:	e038      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a71      	ldr	r2, [pc, #452]	; (8006078 <UART_SetConfig+0x904>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d130      	bne.n	8005f18 <UART_SetConfig+0x7a4>
 8005eb6:	4b6f      	ldr	r3, [pc, #444]	; (8006074 <UART_SetConfig+0x900>)
 8005eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	2b05      	cmp	r3, #5
 8005ec0:	d826      	bhi.n	8005f10 <UART_SetConfig+0x79c>
 8005ec2:	a201      	add	r2, pc, #4	; (adr r2, 8005ec8 <UART_SetConfig+0x754>)
 8005ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec8:	08005ee1 	.word	0x08005ee1
 8005ecc:	08005ee9 	.word	0x08005ee9
 8005ed0:	08005ef1 	.word	0x08005ef1
 8005ed4:	08005ef9 	.word	0x08005ef9
 8005ed8:	08005f01 	.word	0x08005f01
 8005edc:	08005f09 	.word	0x08005f09
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ee6:	e01a      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005ee8:	2304      	movs	r3, #4
 8005eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eee:	e016      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005ef0:	2308      	movs	r3, #8
 8005ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ef6:	e012      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005ef8:	2310      	movs	r3, #16
 8005efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005efe:	e00e      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005f00:	2320      	movs	r3, #32
 8005f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f06:	e00a      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005f08:	2340      	movs	r3, #64	; 0x40
 8005f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f0e:	e006      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005f10:	2380      	movs	r3, #128	; 0x80
 8005f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f16:	e002      	b.n	8005f1e <UART_SetConfig+0x7aa>
 8005f18:	2380      	movs	r3, #128	; 0x80
 8005f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a55      	ldr	r2, [pc, #340]	; (8006078 <UART_SetConfig+0x904>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	f040 80f0 	bne.w	800610a <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f2e:	2b20      	cmp	r3, #32
 8005f30:	dc46      	bgt.n	8005fc0 <UART_SetConfig+0x84c>
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	db75      	blt.n	8006022 <UART_SetConfig+0x8ae>
 8005f36:	3b02      	subs	r3, #2
 8005f38:	2b1e      	cmp	r3, #30
 8005f3a:	d872      	bhi.n	8006022 <UART_SetConfig+0x8ae>
 8005f3c:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <UART_SetConfig+0x7d0>)
 8005f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f42:	bf00      	nop
 8005f44:	08005fc7 	.word	0x08005fc7
 8005f48:	08006023 	.word	0x08006023
 8005f4c:	08005fcf 	.word	0x08005fcf
 8005f50:	08006023 	.word	0x08006023
 8005f54:	08006023 	.word	0x08006023
 8005f58:	08006023 	.word	0x08006023
 8005f5c:	08005fdf 	.word	0x08005fdf
 8005f60:	08006023 	.word	0x08006023
 8005f64:	08006023 	.word	0x08006023
 8005f68:	08006023 	.word	0x08006023
 8005f6c:	08006023 	.word	0x08006023
 8005f70:	08006023 	.word	0x08006023
 8005f74:	08006023 	.word	0x08006023
 8005f78:	08006023 	.word	0x08006023
 8005f7c:	08005fef 	.word	0x08005fef
 8005f80:	08006023 	.word	0x08006023
 8005f84:	08006023 	.word	0x08006023
 8005f88:	08006023 	.word	0x08006023
 8005f8c:	08006023 	.word	0x08006023
 8005f90:	08006023 	.word	0x08006023
 8005f94:	08006023 	.word	0x08006023
 8005f98:	08006023 	.word	0x08006023
 8005f9c:	08006023 	.word	0x08006023
 8005fa0:	08006023 	.word	0x08006023
 8005fa4:	08006023 	.word	0x08006023
 8005fa8:	08006023 	.word	0x08006023
 8005fac:	08006023 	.word	0x08006023
 8005fb0:	08006023 	.word	0x08006023
 8005fb4:	08006023 	.word	0x08006023
 8005fb8:	08006023 	.word	0x08006023
 8005fbc:	08006015 	.word	0x08006015
 8005fc0:	2b40      	cmp	r3, #64	; 0x40
 8005fc2:	d02a      	beq.n	800601a <UART_SetConfig+0x8a6>
 8005fc4:	e02d      	b.n	8006022 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005fc6:	f7fd ffdf 	bl	8003f88 <HAL_RCCEx_GetD3PCLK1Freq>
 8005fca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005fcc:	e02f      	b.n	800602e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fce:	f107 0314 	add.w	r3, r7, #20
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fd ffee 	bl	8003fb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fdc:	e027      	b.n	800602e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fde:	f107 0308 	add.w	r3, r7, #8
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fe f93a 	bl	800425c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fec:	e01f      	b.n	800602e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fee:	4b21      	ldr	r3, [pc, #132]	; (8006074 <UART_SetConfig+0x900>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d009      	beq.n	800600e <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ffa:	4b1e      	ldr	r3, [pc, #120]	; (8006074 <UART_SetConfig+0x900>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	08db      	lsrs	r3, r3, #3
 8006000:	f003 0303 	and.w	r3, r3, #3
 8006004:	4a1d      	ldr	r2, [pc, #116]	; (800607c <UART_SetConfig+0x908>)
 8006006:	fa22 f303 	lsr.w	r3, r2, r3
 800600a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800600c:	e00f      	b.n	800602e <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800600e:	4b1b      	ldr	r3, [pc, #108]	; (800607c <UART_SetConfig+0x908>)
 8006010:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006012:	e00c      	b.n	800602e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006014:	4b1a      	ldr	r3, [pc, #104]	; (8006080 <UART_SetConfig+0x90c>)
 8006016:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006018:	e009      	b.n	800602e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800601a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800601e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006020:	e005      	b.n	800602e <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800602c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800602e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 81e6 	beq.w	8006402 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	4a12      	ldr	r2, [pc, #72]	; (8006084 <UART_SetConfig+0x910>)
 800603c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006040:	461a      	mov	r2, r3
 8006042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006044:	fbb3 f3f2 	udiv	r3, r3, r2
 8006048:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	4613      	mov	r3, r2
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	4413      	add	r3, r2
 8006054:	6a3a      	ldr	r2, [r7, #32]
 8006056:	429a      	cmp	r2, r3
 8006058:	d305      	bcc.n	8006066 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006060:	6a3a      	ldr	r2, [r7, #32]
 8006062:	429a      	cmp	r2, r3
 8006064:	d910      	bls.n	8006088 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800606c:	e1c9      	b.n	8006402 <UART_SetConfig+0xc8e>
 800606e:	bf00      	nop
 8006070:	40011c00 	.word	0x40011c00
 8006074:	58024400 	.word	0x58024400
 8006078:	58000c00 	.word	0x58000c00
 800607c:	03d09000 	.word	0x03d09000
 8006080:	003d0900 	.word	0x003d0900
 8006084:	0800aa34 	.word	0x0800aa34
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608a:	4618      	mov	r0, r3
 800608c:	f04f 0100 	mov.w	r1, #0
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	4ac1      	ldr	r2, [pc, #772]	; (800639c <UART_SetConfig+0xc28>)
 8006096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800609a:	b29a      	uxth	r2, r3
 800609c:	f04f 0300 	mov.w	r3, #0
 80060a0:	f7fa f926 	bl	80002f0 <__aeabi_uldivmod>
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4610      	mov	r0, r2
 80060aa:	4619      	mov	r1, r3
 80060ac:	f04f 0200 	mov.w	r2, #0
 80060b0:	f04f 0300 	mov.w	r3, #0
 80060b4:	020b      	lsls	r3, r1, #8
 80060b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060ba:	0202      	lsls	r2, r0, #8
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	6849      	ldr	r1, [r1, #4]
 80060c0:	0849      	lsrs	r1, r1, #1
 80060c2:	4608      	mov	r0, r1
 80060c4:	f04f 0100 	mov.w	r1, #0
 80060c8:	1814      	adds	r4, r2, r0
 80060ca:	eb43 0501 	adc.w	r5, r3, r1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	461a      	mov	r2, r3
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	4620      	mov	r0, r4
 80060da:	4629      	mov	r1, r5
 80060dc:	f7fa f908 	bl	80002f0 <__aeabi_uldivmod>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4613      	mov	r3, r2
 80060e6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ee:	d308      	bcc.n	8006102 <UART_SetConfig+0x98e>
 80060f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060f6:	d204      	bcs.n	8006102 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060fe:	60da      	str	r2, [r3, #12]
 8006100:	e17f      	b.n	8006402 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006108:	e17b      	b.n	8006402 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006112:	f040 80bd 	bne.w	8006290 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8006116:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800611a:	2b20      	cmp	r3, #32
 800611c:	dc48      	bgt.n	80061b0 <UART_SetConfig+0xa3c>
 800611e:	2b00      	cmp	r3, #0
 8006120:	db7b      	blt.n	800621a <UART_SetConfig+0xaa6>
 8006122:	2b20      	cmp	r3, #32
 8006124:	d879      	bhi.n	800621a <UART_SetConfig+0xaa6>
 8006126:	a201      	add	r2, pc, #4	; (adr r2, 800612c <UART_SetConfig+0x9b8>)
 8006128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612c:	080061b7 	.word	0x080061b7
 8006130:	080061bf 	.word	0x080061bf
 8006134:	0800621b 	.word	0x0800621b
 8006138:	0800621b 	.word	0x0800621b
 800613c:	080061c7 	.word	0x080061c7
 8006140:	0800621b 	.word	0x0800621b
 8006144:	0800621b 	.word	0x0800621b
 8006148:	0800621b 	.word	0x0800621b
 800614c:	080061d7 	.word	0x080061d7
 8006150:	0800621b 	.word	0x0800621b
 8006154:	0800621b 	.word	0x0800621b
 8006158:	0800621b 	.word	0x0800621b
 800615c:	0800621b 	.word	0x0800621b
 8006160:	0800621b 	.word	0x0800621b
 8006164:	0800621b 	.word	0x0800621b
 8006168:	0800621b 	.word	0x0800621b
 800616c:	080061e7 	.word	0x080061e7
 8006170:	0800621b 	.word	0x0800621b
 8006174:	0800621b 	.word	0x0800621b
 8006178:	0800621b 	.word	0x0800621b
 800617c:	0800621b 	.word	0x0800621b
 8006180:	0800621b 	.word	0x0800621b
 8006184:	0800621b 	.word	0x0800621b
 8006188:	0800621b 	.word	0x0800621b
 800618c:	0800621b 	.word	0x0800621b
 8006190:	0800621b 	.word	0x0800621b
 8006194:	0800621b 	.word	0x0800621b
 8006198:	0800621b 	.word	0x0800621b
 800619c:	0800621b 	.word	0x0800621b
 80061a0:	0800621b 	.word	0x0800621b
 80061a4:	0800621b 	.word	0x0800621b
 80061a8:	0800621b 	.word	0x0800621b
 80061ac:	0800620d 	.word	0x0800620d
 80061b0:	2b40      	cmp	r3, #64	; 0x40
 80061b2:	d02e      	beq.n	8006212 <UART_SetConfig+0xa9e>
 80061b4:	e031      	b.n	800621a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061b6:	f7fc ff6d 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 80061ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80061bc:	e033      	b.n	8006226 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061be:	f7fc ff7f 	bl	80030c0 <HAL_RCC_GetPCLK2Freq>
 80061c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80061c4:	e02f      	b.n	8006226 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061c6:	f107 0314 	add.w	r3, r7, #20
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fd fef2 	bl	8003fb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061d4:	e027      	b.n	8006226 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061d6:	f107 0308 	add.w	r3, r7, #8
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fe f83e 	bl	800425c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061e4:	e01f      	b.n	8006226 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061e6:	4b6e      	ldr	r3, [pc, #440]	; (80063a0 <UART_SetConfig+0xc2c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d009      	beq.n	8006206 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061f2:	4b6b      	ldr	r3, [pc, #428]	; (80063a0 <UART_SetConfig+0xc2c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	08db      	lsrs	r3, r3, #3
 80061f8:	f003 0303 	and.w	r3, r3, #3
 80061fc:	4a69      	ldr	r2, [pc, #420]	; (80063a4 <UART_SetConfig+0xc30>)
 80061fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006202:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006204:	e00f      	b.n	8006226 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8006206:	4b67      	ldr	r3, [pc, #412]	; (80063a4 <UART_SetConfig+0xc30>)
 8006208:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800620a:	e00c      	b.n	8006226 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800620c:	4b66      	ldr	r3, [pc, #408]	; (80063a8 <UART_SetConfig+0xc34>)
 800620e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006210:	e009      	b.n	8006226 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006216:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006218:	e005      	b.n	8006226 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006224:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 80ea 	beq.w	8006402 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	4a5a      	ldr	r2, [pc, #360]	; (800639c <UART_SetConfig+0xc28>)
 8006234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006238:	461a      	mov	r2, r3
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006240:	005a      	lsls	r2, r3, #1
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	085b      	lsrs	r3, r3, #1
 8006248:	441a      	add	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006252:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006256:	2b0f      	cmp	r3, #15
 8006258:	d916      	bls.n	8006288 <UART_SetConfig+0xb14>
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006260:	d212      	bcs.n	8006288 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	b29b      	uxth	r3, r3
 8006266:	f023 030f 	bic.w	r3, r3, #15
 800626a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	085b      	lsrs	r3, r3, #1
 8006270:	b29b      	uxth	r3, r3
 8006272:	f003 0307 	and.w	r3, r3, #7
 8006276:	b29a      	uxth	r2, r3
 8006278:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800627a:	4313      	orrs	r3, r2
 800627c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006284:	60da      	str	r2, [r3, #12]
 8006286:	e0bc      	b.n	8006402 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800628e:	e0b8      	b.n	8006402 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006290:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006294:	2b20      	cmp	r3, #32
 8006296:	dc4b      	bgt.n	8006330 <UART_SetConfig+0xbbc>
 8006298:	2b00      	cmp	r3, #0
 800629a:	f2c0 8087 	blt.w	80063ac <UART_SetConfig+0xc38>
 800629e:	2b20      	cmp	r3, #32
 80062a0:	f200 8084 	bhi.w	80063ac <UART_SetConfig+0xc38>
 80062a4:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <UART_SetConfig+0xb38>)
 80062a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062aa:	bf00      	nop
 80062ac:	08006337 	.word	0x08006337
 80062b0:	0800633f 	.word	0x0800633f
 80062b4:	080063ad 	.word	0x080063ad
 80062b8:	080063ad 	.word	0x080063ad
 80062bc:	08006347 	.word	0x08006347
 80062c0:	080063ad 	.word	0x080063ad
 80062c4:	080063ad 	.word	0x080063ad
 80062c8:	080063ad 	.word	0x080063ad
 80062cc:	08006357 	.word	0x08006357
 80062d0:	080063ad 	.word	0x080063ad
 80062d4:	080063ad 	.word	0x080063ad
 80062d8:	080063ad 	.word	0x080063ad
 80062dc:	080063ad 	.word	0x080063ad
 80062e0:	080063ad 	.word	0x080063ad
 80062e4:	080063ad 	.word	0x080063ad
 80062e8:	080063ad 	.word	0x080063ad
 80062ec:	08006367 	.word	0x08006367
 80062f0:	080063ad 	.word	0x080063ad
 80062f4:	080063ad 	.word	0x080063ad
 80062f8:	080063ad 	.word	0x080063ad
 80062fc:	080063ad 	.word	0x080063ad
 8006300:	080063ad 	.word	0x080063ad
 8006304:	080063ad 	.word	0x080063ad
 8006308:	080063ad 	.word	0x080063ad
 800630c:	080063ad 	.word	0x080063ad
 8006310:	080063ad 	.word	0x080063ad
 8006314:	080063ad 	.word	0x080063ad
 8006318:	080063ad 	.word	0x080063ad
 800631c:	080063ad 	.word	0x080063ad
 8006320:	080063ad 	.word	0x080063ad
 8006324:	080063ad 	.word	0x080063ad
 8006328:	080063ad 	.word	0x080063ad
 800632c:	0800638d 	.word	0x0800638d
 8006330:	2b40      	cmp	r3, #64	; 0x40
 8006332:	d02e      	beq.n	8006392 <UART_SetConfig+0xc1e>
 8006334:	e03a      	b.n	80063ac <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006336:	f7fc fead 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 800633a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800633c:	e03c      	b.n	80063b8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800633e:	f7fc febf 	bl	80030c0 <HAL_RCC_GetPCLK2Freq>
 8006342:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006344:	e038      	b.n	80063b8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006346:	f107 0314 	add.w	r3, r7, #20
 800634a:	4618      	mov	r0, r3
 800634c:	f7fd fe32 	bl	8003fb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006354:	e030      	b.n	80063b8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006356:	f107 0308 	add.w	r3, r7, #8
 800635a:	4618      	mov	r0, r3
 800635c:	f7fd ff7e 	bl	800425c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006364:	e028      	b.n	80063b8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006366:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <UART_SetConfig+0xc2c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	d009      	beq.n	8006386 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006372:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <UART_SetConfig+0xc2c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	08db      	lsrs	r3, r3, #3
 8006378:	f003 0303 	and.w	r3, r3, #3
 800637c:	4a09      	ldr	r2, [pc, #36]	; (80063a4 <UART_SetConfig+0xc30>)
 800637e:	fa22 f303 	lsr.w	r3, r2, r3
 8006382:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006384:	e018      	b.n	80063b8 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8006386:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <UART_SetConfig+0xc30>)
 8006388:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800638a:	e015      	b.n	80063b8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800638c:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <UART_SetConfig+0xc34>)
 800638e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006390:	e012      	b.n	80063b8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006396:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006398:	e00e      	b.n	80063b8 <UART_SetConfig+0xc44>
 800639a:	bf00      	nop
 800639c:	0800aa34 	.word	0x0800aa34
 80063a0:	58024400 	.word	0x58024400
 80063a4:	03d09000 	.word	0x03d09000
 80063a8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80063b6:	bf00      	nop
    }

    if (pclk != 0U)
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d021      	beq.n	8006402 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	4a1a      	ldr	r2, [pc, #104]	; (800642c <UART_SetConfig+0xcb8>)
 80063c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063c8:	461a      	mov	r2, r3
 80063ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	085b      	lsrs	r3, r3, #1
 80063d6:	441a      	add	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e4:	2b0f      	cmp	r3, #15
 80063e6:	d909      	bls.n	80063fc <UART_SetConfig+0xc88>
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ee:	d205      	bcs.n	80063fc <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60da      	str	r2, [r3, #12]
 80063fa:	e002      	b.n	8006402 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800641e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006422:	4618      	mov	r0, r3
 8006424:	3738      	adds	r7, #56	; 0x38
 8006426:	46bd      	mov	sp, r7
 8006428:	bdb0      	pop	{r4, r5, r7, pc}
 800642a:	bf00      	nop
 800642c:	0800aa34 	.word	0x0800aa34

08006430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00a      	beq.n	800645a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00a      	beq.n	800647c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00a      	beq.n	800649e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c4:	f003 0310 	and.w	r3, r3, #16
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650c:	2b00      	cmp	r3, #0
 800650e:	d01a      	beq.n	8006546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800652e:	d10a      	bne.n	8006546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	605a      	str	r2, [r3, #4]
  }
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af02      	add	r7, sp, #8
 800657a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006584:	f7fa fd96 	bl	80010b4 <HAL_GetTick>
 8006588:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b08      	cmp	r3, #8
 8006596:	d10e      	bne.n	80065b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006598:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f82f 	bl	800660a <UART_WaitOnFlagUntilTimeout>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e025      	b.n	8006602 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	d10e      	bne.n	80065e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f819 	bl	800660a <UART_WaitOnFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e00f      	b.n	8006602 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b09c      	sub	sp, #112	; 0x70
 800660e:	af00      	add	r7, sp, #0
 8006610:	60f8      	str	r0, [r7, #12]
 8006612:	60b9      	str	r1, [r7, #8]
 8006614:	603b      	str	r3, [r7, #0]
 8006616:	4613      	mov	r3, r2
 8006618:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800661a:	e0a9      	b.n	8006770 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800661c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800661e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006622:	f000 80a5 	beq.w	8006770 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006626:	f7fa fd45 	bl	80010b4 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006632:	429a      	cmp	r2, r3
 8006634:	d302      	bcc.n	800663c <UART_WaitOnFlagUntilTimeout+0x32>
 8006636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006638:	2b00      	cmp	r3, #0
 800663a:	d140      	bne.n	80066be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800664a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800664c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006650:	667b      	str	r3, [r7, #100]	; 0x64
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800665a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800665c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006660:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006662:	e841 2300 	strex	r3, r2, [r1]
 8006666:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e6      	bne.n	800663c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3308      	adds	r3, #8
 8006674:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006678:	e853 3f00 	ldrex	r3, [r3]
 800667c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006680:	f023 0301 	bic.w	r3, r3, #1
 8006684:	663b      	str	r3, [r7, #96]	; 0x60
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3308      	adds	r3, #8
 800668c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800668e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006690:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006694:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800669c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e5      	bne.n	800666e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e069      	b.n	8006792 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d051      	beq.n	8006770 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066da:	d149      	bne.n	8006770 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006704:	637b      	str	r3, [r7, #52]	; 0x34
 8006706:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800670a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e6      	bne.n	80066e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3308      	adds	r3, #8
 800671e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	613b      	str	r3, [r7, #16]
   return(result);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f023 0301 	bic.w	r3, r3, #1
 800672e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3308      	adds	r3, #8
 8006736:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006738:	623a      	str	r2, [r7, #32]
 800673a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	69f9      	ldr	r1, [r7, #28]
 800673e:	6a3a      	ldr	r2, [r7, #32]
 8006740:	e841 2300 	strex	r3, r2, [r1]
 8006744:	61bb      	str	r3, [r7, #24]
   return(result);
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e5      	bne.n	8006718 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2220      	movs	r2, #32
 8006750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2220      	movs	r2, #32
 8006760:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e010      	b.n	8006792 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69da      	ldr	r2, [r3, #28]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	4013      	ands	r3, r2
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	429a      	cmp	r2, r3
 800677e:	bf0c      	ite	eq
 8006780:	2301      	moveq	r3, #1
 8006782:	2300      	movne	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	461a      	mov	r2, r3
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	429a      	cmp	r2, r3
 800678c:	f43f af46 	beq.w	800661c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3770      	adds	r7, #112	; 0x70
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800679c:	b480      	push	{r7}
 800679e:	b0a3      	sub	sp, #140	; 0x8c
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	4613      	mov	r3, r2
 80067a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	88fa      	ldrh	r2, [r7, #6]
 80067b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	88fa      	ldrh	r2, [r7, #6]
 80067bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ce:	d10e      	bne.n	80067ee <UART_Start_Receive_IT+0x52>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d105      	bne.n	80067e4 <UART_Start_Receive_IT+0x48>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80067de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067e2:	e02d      	b.n	8006840 <UART_Start_Receive_IT+0xa4>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	22ff      	movs	r2, #255	; 0xff
 80067e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067ec:	e028      	b.n	8006840 <UART_Start_Receive_IT+0xa4>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10d      	bne.n	8006812 <UART_Start_Receive_IT+0x76>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d104      	bne.n	8006808 <UART_Start_Receive_IT+0x6c>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	22ff      	movs	r2, #255	; 0xff
 8006802:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006806:	e01b      	b.n	8006840 <UART_Start_Receive_IT+0xa4>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	227f      	movs	r2, #127	; 0x7f
 800680c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006810:	e016      	b.n	8006840 <UART_Start_Receive_IT+0xa4>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800681a:	d10d      	bne.n	8006838 <UART_Start_Receive_IT+0x9c>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d104      	bne.n	800682e <UART_Start_Receive_IT+0x92>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	227f      	movs	r2, #127	; 0x7f
 8006828:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800682c:	e008      	b.n	8006840 <UART_Start_Receive_IT+0xa4>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	223f      	movs	r2, #63	; 0x3f
 8006832:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006836:	e003      	b.n	8006840 <UART_Start_Receive_IT+0xa4>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2222      	movs	r2, #34	; 0x22
 800684c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3308      	adds	r3, #8
 8006856:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800685a:	e853 3f00 	ldrex	r3, [r3]
 800685e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006860:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006862:	f043 0301 	orr.w	r3, r3, #1
 8006866:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3308      	adds	r3, #8
 8006870:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006874:	673a      	str	r2, [r7, #112]	; 0x70
 8006876:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006878:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800687a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800687c:	e841 2300 	strex	r3, r2, [r1]
 8006880:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006882:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e3      	bne.n	8006850 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800688c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006890:	d153      	bne.n	800693a <UART_Start_Receive_IT+0x19e>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006898:	88fa      	ldrh	r2, [r7, #6]
 800689a:	429a      	cmp	r2, r3
 800689c:	d34d      	bcc.n	800693a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a6:	d107      	bne.n	80068b8 <UART_Start_Receive_IT+0x11c>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d103      	bne.n	80068b8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4a4b      	ldr	r2, [pc, #300]	; (80069e0 <UART_Start_Receive_IT+0x244>)
 80068b4:	671a      	str	r2, [r3, #112]	; 0x70
 80068b6:	e002      	b.n	80068be <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4a4a      	ldr	r2, [pc, #296]	; (80069e4 <UART_Start_Receive_IT+0x248>)
 80068bc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01a      	beq.n	8006904 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d6:	e853 3f00 	ldrex	r3, [r3]
 80068da:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068f2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068f8:	e841 2300 	strex	r3, r2, [r1]
 80068fc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80068fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e4      	bne.n	80068ce <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3308      	adds	r3, #8
 800690a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800690e:	e853 3f00 	ldrex	r3, [r3]
 8006912:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800691a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3308      	adds	r3, #8
 8006922:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006924:	64ba      	str	r2, [r7, #72]	; 0x48
 8006926:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800692a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800692c:	e841 2300 	strex	r3, r2, [r1]
 8006930:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e5      	bne.n	8006904 <UART_Start_Receive_IT+0x168>
 8006938:	e04a      	b.n	80069d0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006942:	d107      	bne.n	8006954 <UART_Start_Receive_IT+0x1b8>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d103      	bne.n	8006954 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4a26      	ldr	r2, [pc, #152]	; (80069e8 <UART_Start_Receive_IT+0x24c>)
 8006950:	671a      	str	r2, [r3, #112]	; 0x70
 8006952:	e002      	b.n	800695a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4a25      	ldr	r2, [pc, #148]	; (80069ec <UART_Start_Receive_IT+0x250>)
 8006958:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d019      	beq.n	800699e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800697e:	677b      	str	r3, [r7, #116]	; 0x74
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006988:	637b      	str	r3, [r7, #52]	; 0x34
 800698a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800698e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e6      	bne.n	800696a <UART_Start_Receive_IT+0x1ce>
 800699c:	e018      	b.n	80069d0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	613b      	str	r3, [r7, #16]
   return(result);
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f043 0320 	orr.w	r3, r3, #32
 80069b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	461a      	mov	r2, r3
 80069ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069bc:	623b      	str	r3, [r7, #32]
 80069be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	69f9      	ldr	r1, [r7, #28]
 80069c2:	6a3a      	ldr	r2, [r7, #32]
 80069c4:	e841 2300 	strex	r3, r2, [r1]
 80069c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e6      	bne.n	800699e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	378c      	adds	r7, #140	; 0x8c
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	080070f9 	.word	0x080070f9
 80069e4:	08006e01 	.word	0x08006e01
 80069e8:	08006c9f 	.word	0x08006c9f
 80069ec:	08006b3f 	.word	0x08006b3f

080069f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b095      	sub	sp, #84	; 0x54
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a16:	643b      	str	r3, [r7, #64]	; 0x40
 8006a18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e6      	bne.n	80069f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a3a:	69fa      	ldr	r2, [r7, #28]
 8006a3c:	4b1e      	ldr	r3, [pc, #120]	; (8006ab8 <UART_EndRxTransfer+0xc8>)
 8006a3e:	4013      	ands	r3, r2
 8006a40:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3308      	adds	r3, #8
 8006a48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e5      	bne.n	8006a2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d118      	bne.n	8006a98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	e853 3f00 	ldrex	r3, [r3]
 8006a72:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f023 0310 	bic.w	r3, r3, #16
 8006a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	461a      	mov	r2, r3
 8006a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a84:	61bb      	str	r3, [r7, #24]
 8006a86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a88:	6979      	ldr	r1, [r7, #20]
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	e841 2300 	strex	r3, r2, [r1]
 8006a90:	613b      	str	r3, [r7, #16]
   return(result);
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1e6      	bne.n	8006a66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006aac:	bf00      	nop
 8006aae:	3754      	adds	r7, #84	; 0x54
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	effffffe 	.word	0xeffffffe

08006abc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f7fe fe34 	bl	8005748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ae0:	bf00      	nop
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b04:	61fb      	str	r3, [r7, #28]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	61bb      	str	r3, [r7, #24]
 8006b10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6979      	ldr	r1, [r7, #20]
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e6      	bne.n	8006af0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7fe fdff 	bl	8005734 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b36:	bf00      	nop
 8006b38:	3720      	adds	r7, #32
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b096      	sub	sp, #88	; 0x58
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b4c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b56:	2b22      	cmp	r3, #34	; 0x22
 8006b58:	f040 8095 	bne.w	8006c86 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b62:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b66:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006b6a:	b2d9      	uxtb	r1, r3
 8006b6c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b76:	400a      	ands	r2, r1
 8006b78:	b2d2      	uxtb	r2, r2
 8006b7a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d178      	bne.n	8006c96 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bac:	e853 3f00 	ldrex	r3, [r3]
 8006bb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bb8:	653b      	str	r3, [r7, #80]	; 0x50
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc2:	647b      	str	r3, [r7, #68]	; 0x44
 8006bc4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e6      	bne.n	8006ba4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3308      	adds	r3, #8
 8006bdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	e853 3f00 	ldrex	r3, [r3]
 8006be4:	623b      	str	r3, [r7, #32]
   return(result);
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	f023 0301 	bic.w	r3, r3, #1
 8006bec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bf6:	633a      	str	r2, [r7, #48]	; 0x30
 8006bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bfe:	e841 2300 	strex	r3, r2, [r1]
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1e5      	bne.n	8006bd6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d12e      	bne.n	8006c7e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	e853 3f00 	ldrex	r3, [r3]
 8006c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0310 	bic.w	r3, r3, #16
 8006c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	461a      	mov	r2, r3
 8006c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c44:	61fb      	str	r3, [r7, #28]
 8006c46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c48:	69b9      	ldr	r1, [r7, #24]
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	e841 2300 	strex	r3, r2, [r1]
 8006c50:	617b      	str	r3, [r7, #20]
   return(result);
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e6      	bne.n	8006c26 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	f003 0310 	and.w	r3, r3, #16
 8006c62:	2b10      	cmp	r3, #16
 8006c64:	d103      	bne.n	8006c6e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2210      	movs	r2, #16
 8006c6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7fe fd70 	bl	800575c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c7c:	e00b      	b.n	8006c96 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7fa f976 	bl	8000f70 <HAL_UART_RxCpltCallback>
}
 8006c84:	e007      	b.n	8006c96 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	699a      	ldr	r2, [r3, #24]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f042 0208 	orr.w	r2, r2, #8
 8006c94:	619a      	str	r2, [r3, #24]
}
 8006c96:	bf00      	nop
 8006c98:	3758      	adds	r7, #88	; 0x58
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b096      	sub	sp, #88	; 0x58
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006cac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb6:	2b22      	cmp	r3, #34	; 0x22
 8006cb8:	f040 8095 	bne.w	8006de6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cca:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006ccc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006cd0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cda:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce0:	1c9a      	adds	r2, r3, #2
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d178      	bne.n	8006df6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d22:	643b      	str	r3, [r7, #64]	; 0x40
 8006d24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1e6      	bne.n	8006d04 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	f023 0301 	bic.w	r3, r3, #1
 8006d4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3308      	adds	r3, #8
 8006d54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e5      	bne.n	8006d36 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d12e      	bne.n	8006dde <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	e853 3f00 	ldrex	r3, [r3]
 8006d92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f023 0310 	bic.w	r3, r3, #16
 8006d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	461a      	mov	r2, r3
 8006da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006da4:	61bb      	str	r3, [r7, #24]
 8006da6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da8:	6979      	ldr	r1, [r7, #20]
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	e841 2300 	strex	r3, r2, [r1]
 8006db0:	613b      	str	r3, [r7, #16]
   return(result);
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1e6      	bne.n	8006d86 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	f003 0310 	and.w	r3, r3, #16
 8006dc2:	2b10      	cmp	r3, #16
 8006dc4:	d103      	bne.n	8006dce <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2210      	movs	r2, #16
 8006dcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7fe fcc0 	bl	800575c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ddc:	e00b      	b.n	8006df6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7fa f8c6 	bl	8000f70 <HAL_UART_RxCpltCallback>
}
 8006de4:	e007      	b.n	8006df6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	699a      	ldr	r2, [r3, #24]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f042 0208 	orr.w	r2, r2, #8
 8006df4:	619a      	str	r2, [r3, #24]
}
 8006df6:	bf00      	nop
 8006df8:	3758      	adds	r7, #88	; 0x58
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b0a6      	sub	sp, #152	; 0x98
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e0e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e36:	2b22      	cmp	r3, #34	; 0x22
 8006e38:	f040 814d 	bne.w	80070d6 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e42:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e46:	e0f4      	b.n	8007032 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e52:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006e56:	b2d9      	uxtb	r1, r3
 8006e58:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e62:	400a      	ands	r2, r1
 8006e64:	b2d2      	uxtb	r2, r2
 8006e66:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e6c:	1c5a      	adds	r2, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006e8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e92:	f003 0307 	and.w	r3, r3, #7
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d053      	beq.n	8006f42 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d011      	beq.n	8006eca <UART_RxISR_8BIT_FIFOEN+0xca>
 8006ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00b      	beq.n	8006eca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ec0:	f043 0201 	orr.w	r2, r3, #1
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006eca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d011      	beq.n	8006efa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006ed6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00b      	beq.n	8006efa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ef0:	f043 0204 	orr.w	r2, r3, #4
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006efa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006efe:	f003 0304 	and.w	r3, r3, #4
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d011      	beq.n	8006f2a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006f06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00b      	beq.n	8006f2a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2204      	movs	r2, #4
 8006f18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f20:	f043 0202 	orr.w	r2, r3, #2
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d006      	beq.n	8006f42 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7fe fc07 	bl	8005748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d171      	bne.n	8007032 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006f5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f70:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f72:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006f76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e4      	bne.n	8006f4e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3308      	adds	r3, #8
 8006f8a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006f94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f96:	4b56      	ldr	r3, [pc, #344]	; (80070f0 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8006f98:	4013      	ands	r3, r2
 8006f9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006fa4:	657a      	str	r2, [r7, #84]	; 0x54
 8006fa6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006faa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fac:	e841 2300 	strex	r3, r2, [r1]
 8006fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e5      	bne.n	8006f84 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d12e      	bne.n	800702c <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fdc:	e853 3f00 	ldrex	r3, [r3]
 8006fe0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe4:	f023 0310 	bic.w	r3, r3, #16
 8006fe8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ff2:	643b      	str	r3, [r7, #64]	; 0x40
 8006ff4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ff8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e6      	bne.n	8006fd4 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	f003 0310 	and.w	r3, r3, #16
 8007010:	2b10      	cmp	r3, #16
 8007012:	d103      	bne.n	800701c <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2210      	movs	r2, #16
 800701a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7fe fb99 	bl	800575c <HAL_UARTEx_RxEventCallback>
 800702a:	e002      	b.n	8007032 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7f9 ff9f 	bl	8000f70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007032:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007036:	2b00      	cmp	r3, #0
 8007038:	d006      	beq.n	8007048 <UART_RxISR_8BIT_FIFOEN+0x248>
 800703a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800703e:	f003 0320 	and.w	r3, r3, #32
 8007042:	2b00      	cmp	r3, #0
 8007044:	f47f af00 	bne.w	8006e48 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800704e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007052:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007056:	2b00      	cmp	r3, #0
 8007058:	d045      	beq.n	80070e6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007060:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007064:	429a      	cmp	r2, r3
 8007066:	d23e      	bcs.n	80070e6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3308      	adds	r3, #8
 800706e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	e853 3f00 	ldrex	r3, [r3]
 8007076:	61fb      	str	r3, [r7, #28]
   return(result);
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800707e:	673b      	str	r3, [r7, #112]	; 0x70
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	3308      	adds	r3, #8
 8007086:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007088:	62fa      	str	r2, [r7, #44]	; 0x2c
 800708a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800708e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007090:	e841 2300 	strex	r3, r2, [r1]
 8007094:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1e5      	bne.n	8007068 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a15      	ldr	r2, [pc, #84]	; (80070f4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80070a0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	f043 0320 	orr.w	r3, r3, #32
 80070b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c0:	61bb      	str	r3, [r7, #24]
 80070c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6979      	ldr	r1, [r7, #20]
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	613b      	str	r3, [r7, #16]
   return(result);
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e6      	bne.n	80070a2 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070d4:	e007      	b.n	80070e6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	699a      	ldr	r2, [r3, #24]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f042 0208 	orr.w	r2, r2, #8
 80070e4:	619a      	str	r2, [r3, #24]
}
 80070e6:	bf00      	nop
 80070e8:	3798      	adds	r7, #152	; 0x98
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	effffffe 	.word	0xeffffffe
 80070f4:	08006b3f 	.word	0x08006b3f

080070f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b0a8      	sub	sp, #160	; 0xa0
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007106:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	69db      	ldr	r3, [r3, #28]
 8007110:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800712e:	2b22      	cmp	r3, #34	; 0x22
 8007130:	f040 8151 	bne.w	80073d6 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800713a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800713e:	e0f8      	b.n	8007332 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007152:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007156:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800715a:	4013      	ands	r3, r2
 800715c:	b29a      	uxth	r2, r3
 800715e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007162:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007168:	1c9a      	adds	r2, r3, #2
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007174:	b29b      	uxth	r3, r3
 8007176:	3b01      	subs	r3, #1
 8007178:	b29a      	uxth	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800718a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800718e:	f003 0307 	and.w	r3, r3, #7
 8007192:	2b00      	cmp	r3, #0
 8007194:	d053      	beq.n	800723e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007196:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d011      	beq.n	80071c6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80071a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00b      	beq.n	80071c6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2201      	movs	r2, #1
 80071b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071bc:	f043 0201 	orr.w	r2, r3, #1
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d011      	beq.n	80071f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80071d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00b      	beq.n	80071f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2202      	movs	r2, #2
 80071e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071ec:	f043 0204 	orr.w	r2, r3, #4
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071fa:	f003 0304 	and.w	r3, r3, #4
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d011      	beq.n	8007226 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007202:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00b      	beq.n	8007226 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2204      	movs	r2, #4
 8007214:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800721c:	f043 0202 	orr.w	r2, r3, #2
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800722c:	2b00      	cmp	r3, #0
 800722e:	d006      	beq.n	800723e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7fe fa89 	bl	8005748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007244:	b29b      	uxth	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d173      	bne.n	8007332 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007250:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007252:	e853 3f00 	ldrex	r3, [r3]
 8007256:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800725a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800725e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800726c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800726e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007270:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007272:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007274:	e841 2300 	strex	r3, r2, [r1]
 8007278:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800727a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e4      	bne.n	800724a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3308      	adds	r3, #8
 8007286:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800728a:	e853 3f00 	ldrex	r3, [r3]
 800728e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007290:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007292:	4b57      	ldr	r3, [pc, #348]	; (80073f0 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8007294:	4013      	ands	r3, r2
 8007296:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3308      	adds	r3, #8
 80072a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80072a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072ac:	e841 2300 	strex	r3, r2, [r1]
 80072b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80072b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1e3      	bne.n	8007280 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d12e      	bne.n	800732c <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072dc:	e853 3f00 	ldrex	r3, [r3]
 80072e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e4:	f023 0310 	bic.w	r3, r3, #16
 80072e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072f2:	647b      	str	r3, [r7, #68]	; 0x44
 80072f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072fa:	e841 2300 	strex	r3, r2, [r1]
 80072fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1e6      	bne.n	80072d4 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	f003 0310 	and.w	r3, r3, #16
 8007310:	2b10      	cmp	r3, #16
 8007312:	d103      	bne.n	800731c <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2210      	movs	r2, #16
 800731a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7fe fa19 	bl	800575c <HAL_UARTEx_RxEventCallback>
 800732a:	e002      	b.n	8007332 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7f9 fe1f 	bl	8000f70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007332:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007336:	2b00      	cmp	r3, #0
 8007338:	d006      	beq.n	8007348 <UART_RxISR_16BIT_FIFOEN+0x250>
 800733a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800733e:	f003 0320 	and.w	r3, r3, #32
 8007342:	2b00      	cmp	r3, #0
 8007344:	f47f aefc 	bne.w	8007140 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800734e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007352:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007356:	2b00      	cmp	r3, #0
 8007358:	d045      	beq.n	80073e6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007360:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007364:	429a      	cmp	r2, r3
 8007366:	d23e      	bcs.n	80073e6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3308      	adds	r3, #8
 800736e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	e853 3f00 	ldrex	r3, [r3]
 8007376:	623b      	str	r3, [r7, #32]
   return(result);
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800737e:	677b      	str	r3, [r7, #116]	; 0x74
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3308      	adds	r3, #8
 8007386:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007388:	633a      	str	r2, [r7, #48]	; 0x30
 800738a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800738e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007390:	e841 2300 	strex	r3, r2, [r1]
 8007394:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e5      	bne.n	8007368 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a15      	ldr	r2, [pc, #84]	; (80073f4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80073a0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	e853 3f00 	ldrex	r3, [r3]
 80073ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f043 0320 	orr.w	r3, r3, #32
 80073b6:	673b      	str	r3, [r7, #112]	; 0x70
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	461a      	mov	r2, r3
 80073be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073c0:	61fb      	str	r3, [r7, #28]
 80073c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c4:	69b9      	ldr	r1, [r7, #24]
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	e841 2300 	strex	r3, r2, [r1]
 80073cc:	617b      	str	r3, [r7, #20]
   return(result);
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1e6      	bne.n	80073a2 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073d4:	e007      	b.n	80073e6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	699a      	ldr	r2, [r3, #24]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f042 0208 	orr.w	r2, r2, #8
 80073e4:	619a      	str	r2, [r3, #24]
}
 80073e6:	bf00      	nop
 80073e8:	37a0      	adds	r7, #160	; 0xa0
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	effffffe 	.word	0xeffffffe
 80073f4:	08006c9f 	.word	0x08006c9f

080073f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007442:	2b01      	cmp	r3, #1
 8007444:	d101      	bne.n	800744a <HAL_UARTEx_DisableFifoMode+0x16>
 8007446:	2302      	movs	r3, #2
 8007448:	e027      	b.n	800749a <HAL_UARTEx_DisableFifoMode+0x66>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2224      	movs	r2, #36	; 0x24
 8007456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0201 	bic.w	r2, r2, #1
 8007470:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007478:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2220      	movs	r2, #32
 800748c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b084      	sub	sp, #16
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d101      	bne.n	80074be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074ba:	2302      	movs	r3, #2
 80074bc:	e02d      	b.n	800751a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2224      	movs	r2, #36	; 0x24
 80074ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0201 	bic.w	r2, r2, #1
 80074e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f850 	bl	80075a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2220      	movs	r2, #32
 800750c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007532:	2b01      	cmp	r3, #1
 8007534:	d101      	bne.n	800753a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007536:	2302      	movs	r3, #2
 8007538:	e02d      	b.n	8007596 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2224      	movs	r2, #36	; 0x24
 8007546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f022 0201 	bic.w	r2, r2, #1
 8007560:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f812 	bl	80075a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2220      	movs	r2, #32
 8007588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
	...

080075a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d108      	bne.n	80075c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075c0:	e031      	b.n	8007626 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075c2:	2310      	movs	r3, #16
 80075c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075c6:	2310      	movs	r3, #16
 80075c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	0e5b      	lsrs	r3, r3, #25
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	f003 0307 	and.w	r3, r3, #7
 80075d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	0f5b      	lsrs	r3, r3, #29
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	f003 0307 	and.w	r3, r3, #7
 80075e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075ea:	7bbb      	ldrb	r3, [r7, #14]
 80075ec:	7b3a      	ldrb	r2, [r7, #12]
 80075ee:	4911      	ldr	r1, [pc, #68]	; (8007634 <UARTEx_SetNbDataToProcess+0x94>)
 80075f0:	5c8a      	ldrb	r2, [r1, r2]
 80075f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075f6:	7b3a      	ldrb	r2, [r7, #12]
 80075f8:	490f      	ldr	r1, [pc, #60]	; (8007638 <UARTEx_SetNbDataToProcess+0x98>)
 80075fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007600:	b29a      	uxth	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007608:	7bfb      	ldrb	r3, [r7, #15]
 800760a:	7b7a      	ldrb	r2, [r7, #13]
 800760c:	4909      	ldr	r1, [pc, #36]	; (8007634 <UARTEx_SetNbDataToProcess+0x94>)
 800760e:	5c8a      	ldrb	r2, [r1, r2]
 8007610:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007614:	7b7a      	ldrb	r2, [r7, #13]
 8007616:	4908      	ldr	r1, [pc, #32]	; (8007638 <UARTEx_SetNbDataToProcess+0x98>)
 8007618:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800761a:	fb93 f3f2 	sdiv	r3, r3, r2
 800761e:	b29a      	uxth	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007626:	bf00      	nop
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	0800aa4c 	.word	0x0800aa4c
 8007638:	0800aa54 	.word	0x0800aa54

0800763c <__NVIC_SetPriority>:
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	4603      	mov	r3, r0
 8007644:	6039      	str	r1, [r7, #0]
 8007646:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007648:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800764c:	2b00      	cmp	r3, #0
 800764e:	db0a      	blt.n	8007666 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	b2da      	uxtb	r2, r3
 8007654:	490c      	ldr	r1, [pc, #48]	; (8007688 <__NVIC_SetPriority+0x4c>)
 8007656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800765a:	0112      	lsls	r2, r2, #4
 800765c:	b2d2      	uxtb	r2, r2
 800765e:	440b      	add	r3, r1
 8007660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007664:	e00a      	b.n	800767c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	b2da      	uxtb	r2, r3
 800766a:	4908      	ldr	r1, [pc, #32]	; (800768c <__NVIC_SetPriority+0x50>)
 800766c:	88fb      	ldrh	r3, [r7, #6]
 800766e:	f003 030f 	and.w	r3, r3, #15
 8007672:	3b04      	subs	r3, #4
 8007674:	0112      	lsls	r2, r2, #4
 8007676:	b2d2      	uxtb	r2, r2
 8007678:	440b      	add	r3, r1
 800767a:	761a      	strb	r2, [r3, #24]
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	e000e100 	.word	0xe000e100
 800768c:	e000ed00 	.word	0xe000ed00

08007690 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007690:	b580      	push	{r7, lr}
 8007692:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007694:	4b05      	ldr	r3, [pc, #20]	; (80076ac <SysTick_Handler+0x1c>)
 8007696:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007698:	f001 ff12 	bl	80094c0 <xTaskGetSchedulerState>
 800769c:	4603      	mov	r3, r0
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d001      	beq.n	80076a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80076a2:	f002 fcf9 	bl	800a098 <xPortSysTickHandler>
  }
}
 80076a6:	bf00      	nop
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	e000e010 	.word	0xe000e010

080076b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80076b0:	b580      	push	{r7, lr}
 80076b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80076b4:	2100      	movs	r1, #0
 80076b6:	f06f 0004 	mvn.w	r0, #4
 80076ba:	f7ff ffbf 	bl	800763c <__NVIC_SetPriority>
#endif
}
 80076be:	bf00      	nop
 80076c0:	bd80      	pop	{r7, pc}
	...

080076c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076ca:	f3ef 8305 	mrs	r3, IPSR
 80076ce:	603b      	str	r3, [r7, #0]
  return(result);
 80076d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d003      	beq.n	80076de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80076d6:	f06f 0305 	mvn.w	r3, #5
 80076da:	607b      	str	r3, [r7, #4]
 80076dc:	e00c      	b.n	80076f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80076de:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <osKernelInitialize+0x44>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d105      	bne.n	80076f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80076e6:	4b08      	ldr	r3, [pc, #32]	; (8007708 <osKernelInitialize+0x44>)
 80076e8:	2201      	movs	r2, #1
 80076ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	607b      	str	r3, [r7, #4]
 80076f0:	e002      	b.n	80076f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80076f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80076f8:	687b      	ldr	r3, [r7, #4]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	240000a0 	.word	0x240000a0

0800770c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007712:	f3ef 8305 	mrs	r3, IPSR
 8007716:	603b      	str	r3, [r7, #0]
  return(result);
 8007718:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <osKernelStart+0x1a>
    stat = osErrorISR;
 800771e:	f06f 0305 	mvn.w	r3, #5
 8007722:	607b      	str	r3, [r7, #4]
 8007724:	e010      	b.n	8007748 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007726:	4b0b      	ldr	r3, [pc, #44]	; (8007754 <osKernelStart+0x48>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d109      	bne.n	8007742 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800772e:	f7ff ffbf 	bl	80076b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007732:	4b08      	ldr	r3, [pc, #32]	; (8007754 <osKernelStart+0x48>)
 8007734:	2202      	movs	r2, #2
 8007736:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007738:	f001 fa66 	bl	8008c08 <vTaskStartScheduler>
      stat = osOK;
 800773c:	2300      	movs	r3, #0
 800773e:	607b      	str	r3, [r7, #4]
 8007740:	e002      	b.n	8007748 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007746:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007748:	687b      	ldr	r3, [r7, #4]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	240000a0 	.word	0x240000a0

08007758 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007758:	b580      	push	{r7, lr}
 800775a:	b08e      	sub	sp, #56	; 0x38
 800775c:	af04      	add	r7, sp, #16
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007764:	2300      	movs	r3, #0
 8007766:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007768:	f3ef 8305 	mrs	r3, IPSR
 800776c:	617b      	str	r3, [r7, #20]
  return(result);
 800776e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007770:	2b00      	cmp	r3, #0
 8007772:	d17e      	bne.n	8007872 <osThreadNew+0x11a>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d07b      	beq.n	8007872 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800777a:	2380      	movs	r3, #128	; 0x80
 800777c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800777e:	2318      	movs	r3, #24
 8007780:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007782:	2300      	movs	r3, #0
 8007784:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800778a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d045      	beq.n	800781e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <osThreadNew+0x48>
        name = attr->name;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d008      	beq.n	80077c6 <osThreadNew+0x6e>
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	2b38      	cmp	r3, #56	; 0x38
 80077b8:	d805      	bhi.n	80077c6 <osThreadNew+0x6e>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <osThreadNew+0x72>
        return (NULL);
 80077c6:	2300      	movs	r3, #0
 80077c8:	e054      	b.n	8007874 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d003      	beq.n	80077da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	089b      	lsrs	r3, r3, #2
 80077d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00e      	beq.n	8007800 <osThreadNew+0xa8>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	2bbb      	cmp	r3, #187	; 0xbb
 80077e8:	d90a      	bls.n	8007800 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d006      	beq.n	8007800 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <osThreadNew+0xa8>
        mem = 1;
 80077fa:	2301      	movs	r3, #1
 80077fc:	61bb      	str	r3, [r7, #24]
 80077fe:	e010      	b.n	8007822 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10c      	bne.n	8007822 <osThreadNew+0xca>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d108      	bne.n	8007822 <osThreadNew+0xca>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d104      	bne.n	8007822 <osThreadNew+0xca>
          mem = 0;
 8007818:	2300      	movs	r3, #0
 800781a:	61bb      	str	r3, [r7, #24]
 800781c:	e001      	b.n	8007822 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800781e:	2300      	movs	r3, #0
 8007820:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d110      	bne.n	800784a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007830:	9202      	str	r2, [sp, #8]
 8007832:	9301      	str	r3, [sp, #4]
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	6a3a      	ldr	r2, [r7, #32]
 800783c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 fff6 	bl	8008830 <xTaskCreateStatic>
 8007844:	4603      	mov	r3, r0
 8007846:	613b      	str	r3, [r7, #16]
 8007848:	e013      	b.n	8007872 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d110      	bne.n	8007872 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	b29a      	uxth	r2, r3
 8007854:	f107 0310 	add.w	r3, r7, #16
 8007858:	9301      	str	r3, [sp, #4]
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f001 f841 	bl	80088ea <xTaskCreate>
 8007868:	4603      	mov	r3, r0
 800786a:	2b01      	cmp	r3, #1
 800786c:	d001      	beq.n	8007872 <osThreadNew+0x11a>
            hTask = NULL;
 800786e:	2300      	movs	r3, #0
 8007870:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007872:	693b      	ldr	r3, [r7, #16]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3728      	adds	r7, #40	; 0x28
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007884:	f3ef 8305 	mrs	r3, IPSR
 8007888:	60bb      	str	r3, [r7, #8]
  return(result);
 800788a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <osDelay+0x1c>
    stat = osErrorISR;
 8007890:	f06f 0305 	mvn.w	r3, #5
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	e007      	b.n	80078a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007898:	2300      	movs	r3, #0
 800789a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f001 f97c 	bl	8008ba0 <vTaskDelay>
    }
  }

  return (stat);
 80078a8:	68fb      	ldr	r3, [r7, #12]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b08a      	sub	sp, #40	; 0x28
 80078b6:	af02      	add	r7, sp, #8
 80078b8:	60f8      	str	r0, [r7, #12]
 80078ba:	60b9      	str	r1, [r7, #8]
 80078bc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078c2:	f3ef 8305 	mrs	r3, IPSR
 80078c6:	613b      	str	r3, [r7, #16]
  return(result);
 80078c8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d15f      	bne.n	800798e <osMessageQueueNew+0xdc>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d05c      	beq.n	800798e <osMessageQueueNew+0xdc>
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d059      	beq.n	800798e <osMessageQueueNew+0xdc>
    mem = -1;
 80078da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d029      	beq.n	800793a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d012      	beq.n	8007914 <osMessageQueueNew+0x62>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	2b4f      	cmp	r3, #79	; 0x4f
 80078f4:	d90e      	bls.n	8007914 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00a      	beq.n	8007914 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	695a      	ldr	r2, [r3, #20]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	68b9      	ldr	r1, [r7, #8]
 8007906:	fb01 f303 	mul.w	r3, r1, r3
 800790a:	429a      	cmp	r2, r3
 800790c:	d302      	bcc.n	8007914 <osMessageQueueNew+0x62>
        mem = 1;
 800790e:	2301      	movs	r3, #1
 8007910:	61bb      	str	r3, [r7, #24]
 8007912:	e014      	b.n	800793e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d110      	bne.n	800793e <osMessageQueueNew+0x8c>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10c      	bne.n	800793e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007928:	2b00      	cmp	r3, #0
 800792a:	d108      	bne.n	800793e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d104      	bne.n	800793e <osMessageQueueNew+0x8c>
          mem = 0;
 8007934:	2300      	movs	r3, #0
 8007936:	61bb      	str	r3, [r7, #24]
 8007938:	e001      	b.n	800793e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800793a:	2300      	movs	r3, #0
 800793c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d10b      	bne.n	800795c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	691a      	ldr	r2, [r3, #16]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	2100      	movs	r1, #0
 800794e:	9100      	str	r1, [sp, #0]
 8007950:	68b9      	ldr	r1, [r7, #8]
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f000 fa2e 	bl	8007db4 <xQueueGenericCreateStatic>
 8007958:	61f8      	str	r0, [r7, #28]
 800795a:	e008      	b.n	800796e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d105      	bne.n	800796e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007962:	2200      	movs	r2, #0
 8007964:	68b9      	ldr	r1, [r7, #8]
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 fa9c 	bl	8007ea4 <xQueueGenericCreate>
 800796c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00c      	beq.n	800798e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d003      	beq.n	8007982 <osMessageQueueNew+0xd0>
        name = attr->name;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	617b      	str	r3, [r7, #20]
 8007980:	e001      	b.n	8007986 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007982:	2300      	movs	r3, #0
 8007984:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007986:	6979      	ldr	r1, [r7, #20]
 8007988:	69f8      	ldr	r0, [r7, #28]
 800798a:	f000 fef3 	bl	8008774 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800798e:	69fb      	ldr	r3, [r7, #28]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3720      	adds	r7, #32
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007998:	b580      	push	{r7, lr}
 800799a:	b088      	sub	sp, #32
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	603b      	str	r3, [r7, #0]
 80079a4:	4613      	mov	r3, r2
 80079a6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079b0:	f3ef 8305 	mrs	r3, IPSR
 80079b4:	617b      	str	r3, [r7, #20]
  return(result);
 80079b6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d028      	beq.n	8007a0e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d005      	beq.n	80079ce <osMessageQueuePut+0x36>
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <osMessageQueuePut+0x36>
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80079ce:	f06f 0303 	mvn.w	r3, #3
 80079d2:	61fb      	str	r3, [r7, #28]
 80079d4:	e038      	b.n	8007a48 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80079d6:	2300      	movs	r3, #0
 80079d8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80079da:	f107 0210 	add.w	r2, r7, #16
 80079de:	2300      	movs	r3, #0
 80079e0:	68b9      	ldr	r1, [r7, #8]
 80079e2:	69b8      	ldr	r0, [r7, #24]
 80079e4:	f000 fbba 	bl	800815c <xQueueGenericSendFromISR>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d003      	beq.n	80079f6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80079ee:	f06f 0302 	mvn.w	r3, #2
 80079f2:	61fb      	str	r3, [r7, #28]
 80079f4:	e028      	b.n	8007a48 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d025      	beq.n	8007a48 <osMessageQueuePut+0xb0>
 80079fc:	4b15      	ldr	r3, [pc, #84]	; (8007a54 <osMessageQueuePut+0xbc>)
 80079fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	e01c      	b.n	8007a48 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d002      	beq.n	8007a1a <osMessageQueuePut+0x82>
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d103      	bne.n	8007a22 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007a1a:	f06f 0303 	mvn.w	r3, #3
 8007a1e:	61fb      	str	r3, [r7, #28]
 8007a20:	e012      	b.n	8007a48 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007a22:	2300      	movs	r3, #0
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	68b9      	ldr	r1, [r7, #8]
 8007a28:	69b8      	ldr	r0, [r7, #24]
 8007a2a:	f000 fa99 	bl	8007f60 <xQueueGenericSend>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d009      	beq.n	8007a48 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007a3a:	f06f 0301 	mvn.w	r3, #1
 8007a3e:	61fb      	str	r3, [r7, #28]
 8007a40:	e002      	b.n	8007a48 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007a42:	f06f 0302 	mvn.w	r3, #2
 8007a46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007a48:	69fb      	ldr	r3, [r7, #28]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3720      	adds	r7, #32
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	e000ed04 	.word	0xe000ed04

08007a58 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
 8007a64:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a6e:	f3ef 8305 	mrs	r3, IPSR
 8007a72:	617b      	str	r3, [r7, #20]
  return(result);
 8007a74:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d028      	beq.n	8007acc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <osMessageQueueGet+0x34>
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <osMessageQueueGet+0x34>
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007a8c:	f06f 0303 	mvn.w	r3, #3
 8007a90:	61fb      	str	r3, [r7, #28]
 8007a92:	e037      	b.n	8007b04 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007a94:	2300      	movs	r3, #0
 8007a96:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007a98:	f107 0310 	add.w	r3, r7, #16
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	68b9      	ldr	r1, [r7, #8]
 8007aa0:	69b8      	ldr	r0, [r7, #24]
 8007aa2:	f000 fcd7 	bl	8008454 <xQueueReceiveFromISR>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d003      	beq.n	8007ab4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007aac:	f06f 0302 	mvn.w	r3, #2
 8007ab0:	61fb      	str	r3, [r7, #28]
 8007ab2:	e027      	b.n	8007b04 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d024      	beq.n	8007b04 <osMessageQueueGet+0xac>
 8007aba:	4b15      	ldr	r3, [pc, #84]	; (8007b10 <osMessageQueueGet+0xb8>)
 8007abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac0:	601a      	str	r2, [r3, #0]
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	e01b      	b.n	8007b04 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <osMessageQueueGet+0x80>
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d103      	bne.n	8007ae0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007ad8:	f06f 0303 	mvn.w	r3, #3
 8007adc:	61fb      	str	r3, [r7, #28]
 8007ade:	e011      	b.n	8007b04 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	68b9      	ldr	r1, [r7, #8]
 8007ae4:	69b8      	ldr	r0, [r7, #24]
 8007ae6:	f000 fbd5 	bl	8008294 <xQueueReceive>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d009      	beq.n	8007b04 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007af6:	f06f 0301 	mvn.w	r3, #1
 8007afa:	61fb      	str	r3, [r7, #28]
 8007afc:	e002      	b.n	8007b04 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007afe:	f06f 0302 	mvn.w	r3, #2
 8007b02:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007b04:	69fb      	ldr	r3, [r7, #28]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3720      	adds	r7, #32
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	e000ed04 	.word	0xe000ed04

08007b14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4a07      	ldr	r2, [pc, #28]	; (8007b40 <vApplicationGetIdleTaskMemory+0x2c>)
 8007b24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	4a06      	ldr	r2, [pc, #24]	; (8007b44 <vApplicationGetIdleTaskMemory+0x30>)
 8007b2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2280      	movs	r2, #128	; 0x80
 8007b30:	601a      	str	r2, [r3, #0]
}
 8007b32:	bf00      	nop
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	240000a4 	.word	0x240000a4
 8007b44:	24000160 	.word	0x24000160

08007b48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4a07      	ldr	r2, [pc, #28]	; (8007b74 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	4a06      	ldr	r2, [pc, #24]	; (8007b78 <vApplicationGetTimerTaskMemory+0x30>)
 8007b5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b66:	601a      	str	r2, [r3, #0]
}
 8007b68:	bf00      	nop
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	24000360 	.word	0x24000360
 8007b78:	2400041c 	.word	0x2400041c

08007b7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f103 0208 	add.w	r2, r3, #8
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f103 0208 	add.w	r2, r3, #8
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f103 0208 	add.w	r2, r3, #8
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007bca:	bf00      	nop
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b085      	sub	sp, #20
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	689a      	ldr	r2, [r3, #8]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	1c5a      	adds	r2, r3, #1
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	601a      	str	r2, [r3, #0]
}
 8007c12:	bf00      	nop
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b085      	sub	sp, #20
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c34:	d103      	bne.n	8007c3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	60fb      	str	r3, [r7, #12]
 8007c3c:	e00c      	b.n	8007c58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	3308      	adds	r3, #8
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	e002      	b.n	8007c4c <vListInsert+0x2e>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d2f6      	bcs.n	8007c46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	601a      	str	r2, [r3, #0]
}
 8007c84:	bf00      	nop
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6892      	ldr	r2, [r2, #8]
 8007ca6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	6852      	ldr	r2, [r2, #4]
 8007cb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d103      	bne.n	8007cc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689a      	ldr	r2, [r3, #8]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	1e5a      	subs	r2, r3, #1
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10a      	bne.n	8007d0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d0a:	bf00      	nop
 8007d0c:	e7fe      	b.n	8007d0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007d0e:	f002 f931 	bl	8009f74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d1a:	68f9      	ldr	r1, [r7, #12]
 8007d1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d1e:	fb01 f303 	mul.w	r3, r1, r3
 8007d22:	441a      	add	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	68f9      	ldr	r1, [r7, #12]
 8007d42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d44:	fb01 f303 	mul.w	r3, r1, r3
 8007d48:	441a      	add	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	22ff      	movs	r2, #255	; 0xff
 8007d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	22ff      	movs	r2, #255	; 0xff
 8007d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d114      	bne.n	8007d8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d01a      	beq.n	8007da2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3310      	adds	r3, #16
 8007d70:	4618      	mov	r0, r3
 8007d72:	f001 f9e3 	bl	800913c <xTaskRemoveFromEventList>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d012      	beq.n	8007da2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d7c:	4b0c      	ldr	r3, [pc, #48]	; (8007db0 <xQueueGenericReset+0xcc>)
 8007d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	e009      	b.n	8007da2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3310      	adds	r3, #16
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7ff fef2 	bl	8007b7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3324      	adds	r3, #36	; 0x24
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7ff feed 	bl	8007b7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007da2:	f002 f917 	bl	8009fd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007da6:	2301      	movs	r3, #1
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	e000ed04 	.word	0xe000ed04

08007db4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b08e      	sub	sp, #56	; 0x38
 8007db8:	af02      	add	r7, sp, #8
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10a      	bne.n	8007dde <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dda:	bf00      	nop
 8007ddc:	e7fe      	b.n	8007ddc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10a      	bne.n	8007dfa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007df6:	bf00      	nop
 8007df8:	e7fe      	b.n	8007df8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <xQueueGenericCreateStatic+0x52>
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <xQueueGenericCreateStatic+0x56>
 8007e06:	2301      	movs	r3, #1
 8007e08:	e000      	b.n	8007e0c <xQueueGenericCreateStatic+0x58>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10a      	bne.n	8007e26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	623b      	str	r3, [r7, #32]
}
 8007e22:	bf00      	nop
 8007e24:	e7fe      	b.n	8007e24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d102      	bne.n	8007e32 <xQueueGenericCreateStatic+0x7e>
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <xQueueGenericCreateStatic+0x82>
 8007e32:	2301      	movs	r3, #1
 8007e34:	e000      	b.n	8007e38 <xQueueGenericCreateStatic+0x84>
 8007e36:	2300      	movs	r3, #0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10a      	bne.n	8007e52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	61fb      	str	r3, [r7, #28]
}
 8007e4e:	bf00      	nop
 8007e50:	e7fe      	b.n	8007e50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e52:	2350      	movs	r3, #80	; 0x50
 8007e54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2b50      	cmp	r3, #80	; 0x50
 8007e5a:	d00a      	beq.n	8007e72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	61bb      	str	r3, [r7, #24]
}
 8007e6e:	bf00      	nop
 8007e70:	e7fe      	b.n	8007e70 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e72:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00d      	beq.n	8007e9a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	68b9      	ldr	r1, [r7, #8]
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 f83f 	bl	8007f18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3730      	adds	r7, #48	; 0x30
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b08a      	sub	sp, #40	; 0x28
 8007ea8:	af02      	add	r7, sp, #8
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10a      	bne.n	8007ece <xQueueGenericCreate+0x2a>
	__asm volatile
 8007eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	613b      	str	r3, [r7, #16]
}
 8007eca:	bf00      	nop
 8007ecc:	e7fe      	b.n	8007ecc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	fb02 f303 	mul.w	r3, r2, r3
 8007ed6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	3350      	adds	r3, #80	; 0x50
 8007edc:	4618      	mov	r0, r3
 8007ede:	f002 f96b 	bl	800a1b8 <pvPortMalloc>
 8007ee2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d011      	beq.n	8007f0e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	3350      	adds	r3, #80	; 0x50
 8007ef2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007efc:	79fa      	ldrb	r2, [r7, #7]
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	4613      	mov	r3, r2
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	68b9      	ldr	r1, [r7, #8]
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f000 f805 	bl	8007f18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f0e:	69bb      	ldr	r3, [r7, #24]
	}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3720      	adds	r7, #32
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
 8007f24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d103      	bne.n	8007f34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	e002      	b.n	8007f3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f46:	2101      	movs	r1, #1
 8007f48:	69b8      	ldr	r0, [r7, #24]
 8007f4a:	f7ff fecb 	bl	8007ce4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	78fa      	ldrb	r2, [r7, #3]
 8007f52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f56:	bf00      	nop
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
	...

08007f60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b08e      	sub	sp, #56	; 0x38
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
 8007f6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <xQueueGenericSend+0x32>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f8e:	bf00      	nop
 8007f90:	e7fe      	b.n	8007f90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d103      	bne.n	8007fa0 <xQueueGenericSend+0x40>
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <xQueueGenericSend+0x44>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e000      	b.n	8007fa6 <xQueueGenericSend+0x46>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <xQueueGenericSend+0x60>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fbc:	bf00      	nop
 8007fbe:	e7fe      	b.n	8007fbe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d103      	bne.n	8007fce <xQueueGenericSend+0x6e>
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d101      	bne.n	8007fd2 <xQueueGenericSend+0x72>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e000      	b.n	8007fd4 <xQueueGenericSend+0x74>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10a      	bne.n	8007fee <xQueueGenericSend+0x8e>
	__asm volatile
 8007fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	623b      	str	r3, [r7, #32]
}
 8007fea:	bf00      	nop
 8007fec:	e7fe      	b.n	8007fec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fee:	f001 fa67 	bl	80094c0 <xTaskGetSchedulerState>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d102      	bne.n	8007ffe <xQueueGenericSend+0x9e>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <xQueueGenericSend+0xa2>
 8007ffe:	2301      	movs	r3, #1
 8008000:	e000      	b.n	8008004 <xQueueGenericSend+0xa4>
 8008002:	2300      	movs	r3, #0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10a      	bne.n	800801e <xQueueGenericSend+0xbe>
	__asm volatile
 8008008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800c:	f383 8811 	msr	BASEPRI, r3
 8008010:	f3bf 8f6f 	isb	sy
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	61fb      	str	r3, [r7, #28]
}
 800801a:	bf00      	nop
 800801c:	e7fe      	b.n	800801c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800801e:	f001 ffa9 	bl	8009f74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800802a:	429a      	cmp	r2, r3
 800802c:	d302      	bcc.n	8008034 <xQueueGenericSend+0xd4>
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b02      	cmp	r3, #2
 8008032:	d129      	bne.n	8008088 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	68b9      	ldr	r1, [r7, #8]
 8008038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800803a:	f000 fa8b 	bl	8008554 <prvCopyDataToQueue>
 800803e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008044:	2b00      	cmp	r3, #0
 8008046:	d010      	beq.n	800806a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804a:	3324      	adds	r3, #36	; 0x24
 800804c:	4618      	mov	r0, r3
 800804e:	f001 f875 	bl	800913c <xTaskRemoveFromEventList>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d013      	beq.n	8008080 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008058:	4b3f      	ldr	r3, [pc, #252]	; (8008158 <xQueueGenericSend+0x1f8>)
 800805a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800805e:	601a      	str	r2, [r3, #0]
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	e00a      	b.n	8008080 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800806a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806c:	2b00      	cmp	r3, #0
 800806e:	d007      	beq.n	8008080 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008070:	4b39      	ldr	r3, [pc, #228]	; (8008158 <xQueueGenericSend+0x1f8>)
 8008072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008076:	601a      	str	r2, [r3, #0]
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008080:	f001 ffa8 	bl	8009fd4 <vPortExitCritical>
				return pdPASS;
 8008084:	2301      	movs	r3, #1
 8008086:	e063      	b.n	8008150 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d103      	bne.n	8008096 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800808e:	f001 ffa1 	bl	8009fd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008092:	2300      	movs	r3, #0
 8008094:	e05c      	b.n	8008150 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008098:	2b00      	cmp	r3, #0
 800809a:	d106      	bne.n	80080aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800809c:	f107 0314 	add.w	r3, r7, #20
 80080a0:	4618      	mov	r0, r3
 80080a2:	f001 f8af 	bl	8009204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080a6:	2301      	movs	r3, #1
 80080a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080aa:	f001 ff93 	bl	8009fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080ae:	f000 fe1b 	bl	8008ce8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080b2:	f001 ff5f 	bl	8009f74 <vPortEnterCritical>
 80080b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080bc:	b25b      	sxtb	r3, r3
 80080be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080c2:	d103      	bne.n	80080cc <xQueueGenericSend+0x16c>
 80080c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080d2:	b25b      	sxtb	r3, r3
 80080d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080d8:	d103      	bne.n	80080e2 <xQueueGenericSend+0x182>
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080e2:	f001 ff77 	bl	8009fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080e6:	1d3a      	adds	r2, r7, #4
 80080e8:	f107 0314 	add.w	r3, r7, #20
 80080ec:	4611      	mov	r1, r2
 80080ee:	4618      	mov	r0, r3
 80080f0:	f001 f89e 	bl	8009230 <xTaskCheckForTimeOut>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d124      	bne.n	8008144 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80080fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080fc:	f000 fb22 	bl	8008744 <prvIsQueueFull>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d018      	beq.n	8008138 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008108:	3310      	adds	r3, #16
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	4611      	mov	r1, r2
 800810e:	4618      	mov	r0, r3
 8008110:	f000 ffc4 	bl	800909c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008116:	f000 faad 	bl	8008674 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800811a:	f000 fdf3 	bl	8008d04 <xTaskResumeAll>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	f47f af7c 	bne.w	800801e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008126:	4b0c      	ldr	r3, [pc, #48]	; (8008158 <xQueueGenericSend+0x1f8>)
 8008128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	e772      	b.n	800801e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008138:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800813a:	f000 fa9b 	bl	8008674 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800813e:	f000 fde1 	bl	8008d04 <xTaskResumeAll>
 8008142:	e76c      	b.n	800801e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008146:	f000 fa95 	bl	8008674 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800814a:	f000 fddb 	bl	8008d04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800814e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008150:	4618      	mov	r0, r3
 8008152:	3738      	adds	r7, #56	; 0x38
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	e000ed04 	.word	0xe000ed04

0800815c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b090      	sub	sp, #64	; 0x40
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800816e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10a      	bne.n	800818a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008186:	bf00      	nop
 8008188:	e7fe      	b.n	8008188 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d103      	bne.n	8008198 <xQueueGenericSendFromISR+0x3c>
 8008190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <xQueueGenericSendFromISR+0x40>
 8008198:	2301      	movs	r3, #1
 800819a:	e000      	b.n	800819e <xQueueGenericSendFromISR+0x42>
 800819c:	2300      	movs	r3, #0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10a      	bne.n	80081b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80081a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a6:	f383 8811 	msr	BASEPRI, r3
 80081aa:	f3bf 8f6f 	isb	sy
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081b4:	bf00      	nop
 80081b6:	e7fe      	b.n	80081b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d103      	bne.n	80081c6 <xQueueGenericSendFromISR+0x6a>
 80081be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d101      	bne.n	80081ca <xQueueGenericSendFromISR+0x6e>
 80081c6:	2301      	movs	r3, #1
 80081c8:	e000      	b.n	80081cc <xQueueGenericSendFromISR+0x70>
 80081ca:	2300      	movs	r3, #0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10a      	bne.n	80081e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	623b      	str	r3, [r7, #32]
}
 80081e2:	bf00      	nop
 80081e4:	e7fe      	b.n	80081e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081e6:	f001 ffa7 	bl	800a138 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80081ea:	f3ef 8211 	mrs	r2, BASEPRI
 80081ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	61fa      	str	r2, [r7, #28]
 8008200:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008202:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008204:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820e:	429a      	cmp	r2, r3
 8008210:	d302      	bcc.n	8008218 <xQueueGenericSendFromISR+0xbc>
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b02      	cmp	r3, #2
 8008216:	d12f      	bne.n	8008278 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800821e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008226:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	68b9      	ldr	r1, [r7, #8]
 800822c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800822e:	f000 f991 	bl	8008554 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008232:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800823a:	d112      	bne.n	8008262 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	2b00      	cmp	r3, #0
 8008242:	d016      	beq.n	8008272 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008246:	3324      	adds	r3, #36	; 0x24
 8008248:	4618      	mov	r0, r3
 800824a:	f000 ff77 	bl	800913c <xTaskRemoveFromEventList>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00e      	beq.n	8008272 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00b      	beq.n	8008272 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	e007      	b.n	8008272 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008262:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008266:	3301      	adds	r3, #1
 8008268:	b2db      	uxtb	r3, r3
 800826a:	b25a      	sxtb	r2, r3
 800826c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008272:	2301      	movs	r3, #1
 8008274:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008276:	e001      	b.n	800827c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008278:	2300      	movs	r3, #0
 800827a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800827c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008286:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800828a:	4618      	mov	r0, r3
 800828c:	3740      	adds	r7, #64	; 0x40
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
	...

08008294 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b08c      	sub	sp, #48	; 0x30
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80082a0:	2300      	movs	r3, #0
 80082a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10a      	bne.n	80082c4 <xQueueReceive+0x30>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	623b      	str	r3, [r7, #32]
}
 80082c0:	bf00      	nop
 80082c2:	e7fe      	b.n	80082c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d103      	bne.n	80082d2 <xQueueReceive+0x3e>
 80082ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d101      	bne.n	80082d6 <xQueueReceive+0x42>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e000      	b.n	80082d8 <xQueueReceive+0x44>
 80082d6:	2300      	movs	r3, #0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10a      	bne.n	80082f2 <xQueueReceive+0x5e>
	__asm volatile
 80082dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e0:	f383 8811 	msr	BASEPRI, r3
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	61fb      	str	r3, [r7, #28]
}
 80082ee:	bf00      	nop
 80082f0:	e7fe      	b.n	80082f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082f2:	f001 f8e5 	bl	80094c0 <xTaskGetSchedulerState>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d102      	bne.n	8008302 <xQueueReceive+0x6e>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <xQueueReceive+0x72>
 8008302:	2301      	movs	r3, #1
 8008304:	e000      	b.n	8008308 <xQueueReceive+0x74>
 8008306:	2300      	movs	r3, #0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <xQueueReceive+0x8e>
	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	61bb      	str	r3, [r7, #24]
}
 800831e:	bf00      	nop
 8008320:	e7fe      	b.n	8008320 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008322:	f001 fe27 	bl	8009f74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	2b00      	cmp	r3, #0
 8008330:	d01f      	beq.n	8008372 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008332:	68b9      	ldr	r1, [r7, #8]
 8008334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008336:	f000 f977 	bl	8008628 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	1e5a      	subs	r2, r3, #1
 800833e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008340:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00f      	beq.n	800836a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834c:	3310      	adds	r3, #16
 800834e:	4618      	mov	r0, r3
 8008350:	f000 fef4 	bl	800913c <xTaskRemoveFromEventList>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d007      	beq.n	800836a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800835a:	4b3d      	ldr	r3, [pc, #244]	; (8008450 <xQueueReceive+0x1bc>)
 800835c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008360:	601a      	str	r2, [r3, #0]
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800836a:	f001 fe33 	bl	8009fd4 <vPortExitCritical>
				return pdPASS;
 800836e:	2301      	movs	r3, #1
 8008370:	e069      	b.n	8008446 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d103      	bne.n	8008380 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008378:	f001 fe2c 	bl	8009fd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800837c:	2300      	movs	r3, #0
 800837e:	e062      	b.n	8008446 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008382:	2b00      	cmp	r3, #0
 8008384:	d106      	bne.n	8008394 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008386:	f107 0310 	add.w	r3, r7, #16
 800838a:	4618      	mov	r0, r3
 800838c:	f000 ff3a 	bl	8009204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008390:	2301      	movs	r3, #1
 8008392:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008394:	f001 fe1e 	bl	8009fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008398:	f000 fca6 	bl	8008ce8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800839c:	f001 fdea 	bl	8009f74 <vPortEnterCritical>
 80083a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083a6:	b25b      	sxtb	r3, r3
 80083a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083ac:	d103      	bne.n	80083b6 <xQueueReceive+0x122>
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083bc:	b25b      	sxtb	r3, r3
 80083be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083c2:	d103      	bne.n	80083cc <xQueueReceive+0x138>
 80083c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083cc:	f001 fe02 	bl	8009fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083d0:	1d3a      	adds	r2, r7, #4
 80083d2:	f107 0310 	add.w	r3, r7, #16
 80083d6:	4611      	mov	r1, r2
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 ff29 	bl	8009230 <xTaskCheckForTimeOut>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d123      	bne.n	800842c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083e6:	f000 f997 	bl	8008718 <prvIsQueueEmpty>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d017      	beq.n	8008420 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f2:	3324      	adds	r3, #36	; 0x24
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	4611      	mov	r1, r2
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 fe4f 	bl	800909c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008400:	f000 f938 	bl	8008674 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008404:	f000 fc7e 	bl	8008d04 <xTaskResumeAll>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d189      	bne.n	8008322 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800840e:	4b10      	ldr	r3, [pc, #64]	; (8008450 <xQueueReceive+0x1bc>)
 8008410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	e780      	b.n	8008322 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008422:	f000 f927 	bl	8008674 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008426:	f000 fc6d 	bl	8008d04 <xTaskResumeAll>
 800842a:	e77a      	b.n	8008322 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800842c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800842e:	f000 f921 	bl	8008674 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008432:	f000 fc67 	bl	8008d04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008438:	f000 f96e 	bl	8008718 <prvIsQueueEmpty>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	f43f af6f 	beq.w	8008322 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008444:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008446:	4618      	mov	r0, r3
 8008448:	3730      	adds	r7, #48	; 0x30
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	e000ed04 	.word	0xe000ed04

08008454 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b08e      	sub	sp, #56	; 0x38
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10a      	bne.n	8008480 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	623b      	str	r3, [r7, #32]
}
 800847c:	bf00      	nop
 800847e:	e7fe      	b.n	800847e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d103      	bne.n	800848e <xQueueReceiveFromISR+0x3a>
 8008486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	2b00      	cmp	r3, #0
 800848c:	d101      	bne.n	8008492 <xQueueReceiveFromISR+0x3e>
 800848e:	2301      	movs	r3, #1
 8008490:	e000      	b.n	8008494 <xQueueReceiveFromISR+0x40>
 8008492:	2300      	movs	r3, #0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10a      	bne.n	80084ae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	61fb      	str	r3, [r7, #28]
}
 80084aa:	bf00      	nop
 80084ac:	e7fe      	b.n	80084ac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084ae:	f001 fe43 	bl	800a138 <vPortValidateInterruptPriority>
	__asm volatile
 80084b2:	f3ef 8211 	mrs	r2, BASEPRI
 80084b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	61ba      	str	r2, [r7, #24]
 80084c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80084ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80084cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d02f      	beq.n	800853a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80084da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084e4:	68b9      	ldr	r1, [r7, #8]
 80084e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084e8:	f000 f89e 	bl	8008628 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ee:	1e5a      	subs	r2, r3, #1
 80084f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80084f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80084f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084fc:	d112      	bne.n	8008524 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d016      	beq.n	8008534 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	3310      	adds	r3, #16
 800850a:	4618      	mov	r0, r3
 800850c:	f000 fe16 	bl	800913c <xTaskRemoveFromEventList>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00e      	beq.n	8008534 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00b      	beq.n	8008534 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	601a      	str	r2, [r3, #0]
 8008522:	e007      	b.n	8008534 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008528:	3301      	adds	r3, #1
 800852a:	b2db      	uxtb	r3, r3
 800852c:	b25a      	sxtb	r2, r3
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008534:	2301      	movs	r3, #1
 8008536:	637b      	str	r3, [r7, #52]	; 0x34
 8008538:	e001      	b.n	800853e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800853a:	2300      	movs	r3, #0
 800853c:	637b      	str	r3, [r7, #52]	; 0x34
 800853e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008540:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	f383 8811 	msr	BASEPRI, r3
}
 8008548:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800854a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800854c:	4618      	mov	r0, r3
 800854e:	3738      	adds	r7, #56	; 0x38
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008560:	2300      	movs	r3, #0
 8008562:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008568:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10d      	bne.n	800858e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d14d      	bne.n	8008616 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 ffbc 	bl	80094fc <xTaskPriorityDisinherit>
 8008584:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	609a      	str	r2, [r3, #8]
 800858c:	e043      	b.n	8008616 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d119      	bne.n	80085c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6858      	ldr	r0, [r3, #4]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859c:	461a      	mov	r2, r3
 800859e:	68b9      	ldr	r1, [r7, #8]
 80085a0:	f002 f824 	bl	800a5ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	685a      	ldr	r2, [r3, #4]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ac:	441a      	add	r2, r3
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d32b      	bcc.n	8008616 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	605a      	str	r2, [r3, #4]
 80085c6:	e026      	b.n	8008616 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	68d8      	ldr	r0, [r3, #12]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d0:	461a      	mov	r2, r3
 80085d2:	68b9      	ldr	r1, [r7, #8]
 80085d4:	f002 f80a 	bl	800a5ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	68da      	ldr	r2, [r3, #12]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e0:	425b      	negs	r3, r3
 80085e2:	441a      	add	r2, r3
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	68da      	ldr	r2, [r3, #12]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d207      	bcs.n	8008604 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	689a      	ldr	r2, [r3, #8]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fc:	425b      	negs	r3, r3
 80085fe:	441a      	add	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b02      	cmp	r3, #2
 8008608:	d105      	bne.n	8008616 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	3b01      	subs	r3, #1
 8008614:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	1c5a      	adds	r2, r3, #1
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800861e:	697b      	ldr	r3, [r7, #20]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3718      	adds	r7, #24
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008636:	2b00      	cmp	r3, #0
 8008638:	d018      	beq.n	800866c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68da      	ldr	r2, [r3, #12]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008642:	441a      	add	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68da      	ldr	r2, [r3, #12]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	429a      	cmp	r2, r3
 8008652:	d303      	bcc.n	800865c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68d9      	ldr	r1, [r3, #12]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008664:	461a      	mov	r2, r3
 8008666:	6838      	ldr	r0, [r7, #0]
 8008668:	f001 ffc0 	bl	800a5ec <memcpy>
	}
}
 800866c:	bf00      	nop
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800867c:	f001 fc7a 	bl	8009f74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008686:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008688:	e011      	b.n	80086ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868e:	2b00      	cmp	r3, #0
 8008690:	d012      	beq.n	80086b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	3324      	adds	r3, #36	; 0x24
 8008696:	4618      	mov	r0, r3
 8008698:	f000 fd50 	bl	800913c <xTaskRemoveFromEventList>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80086a2:	f000 fe27 	bl	80092f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
 80086a8:	3b01      	subs	r3, #1
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	dce9      	bgt.n	800868a <prvUnlockQueue+0x16>
 80086b6:	e000      	b.n	80086ba <prvUnlockQueue+0x46>
					break;
 80086b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	22ff      	movs	r2, #255	; 0xff
 80086be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80086c2:	f001 fc87 	bl	8009fd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80086c6:	f001 fc55 	bl	8009f74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086d2:	e011      	b.n	80086f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d012      	beq.n	8008702 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	3310      	adds	r3, #16
 80086e0:	4618      	mov	r0, r3
 80086e2:	f000 fd2b 	bl	800913c <xTaskRemoveFromEventList>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80086ec:	f000 fe02 	bl	80092f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	3b01      	subs	r3, #1
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	dce9      	bgt.n	80086d4 <prvUnlockQueue+0x60>
 8008700:	e000      	b.n	8008704 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008702:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	22ff      	movs	r2, #255	; 0xff
 8008708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800870c:	f001 fc62 	bl	8009fd4 <vPortExitCritical>
}
 8008710:	bf00      	nop
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008720:	f001 fc28 	bl	8009f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008728:	2b00      	cmp	r3, #0
 800872a:	d102      	bne.n	8008732 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800872c:	2301      	movs	r3, #1
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	e001      	b.n	8008736 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008732:	2300      	movs	r3, #0
 8008734:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008736:	f001 fc4d 	bl	8009fd4 <vPortExitCritical>

	return xReturn;
 800873a:	68fb      	ldr	r3, [r7, #12]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800874c:	f001 fc12 	bl	8009f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008758:	429a      	cmp	r2, r3
 800875a:	d102      	bne.n	8008762 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800875c:	2301      	movs	r3, #1
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	e001      	b.n	8008766 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008762:	2300      	movs	r3, #0
 8008764:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008766:	f001 fc35 	bl	8009fd4 <vPortExitCritical>

	return xReturn;
 800876a:	68fb      	ldr	r3, [r7, #12]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800877e:	2300      	movs	r3, #0
 8008780:	60fb      	str	r3, [r7, #12]
 8008782:	e014      	b.n	80087ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008784:	4a0f      	ldr	r2, [pc, #60]	; (80087c4 <vQueueAddToRegistry+0x50>)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10b      	bne.n	80087a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008790:	490c      	ldr	r1, [pc, #48]	; (80087c4 <vQueueAddToRegistry+0x50>)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	683a      	ldr	r2, [r7, #0]
 8008796:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800879a:	4a0a      	ldr	r2, [pc, #40]	; (80087c4 <vQueueAddToRegistry+0x50>)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	4413      	add	r3, r2
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80087a6:	e006      	b.n	80087b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	3301      	adds	r3, #1
 80087ac:	60fb      	str	r3, [r7, #12]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2b07      	cmp	r3, #7
 80087b2:	d9e7      	bls.n	8008784 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80087b4:	bf00      	nop
 80087b6:	bf00      	nop
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	24004c3c 	.word	0x24004c3c

080087c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b086      	sub	sp, #24
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80087d8:	f001 fbcc 	bl	8009f74 <vPortEnterCritical>
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087e2:	b25b      	sxtb	r3, r3
 80087e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087e8:	d103      	bne.n	80087f2 <vQueueWaitForMessageRestricted+0x2a>
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087f8:	b25b      	sxtb	r3, r3
 80087fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087fe:	d103      	bne.n	8008808 <vQueueWaitForMessageRestricted+0x40>
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008808:	f001 fbe4 	bl	8009fd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008810:	2b00      	cmp	r3, #0
 8008812:	d106      	bne.n	8008822 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	3324      	adds	r3, #36	; 0x24
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	68b9      	ldr	r1, [r7, #8]
 800881c:	4618      	mov	r0, r3
 800881e:	f000 fc61 	bl	80090e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008822:	6978      	ldr	r0, [r7, #20]
 8008824:	f7ff ff26 	bl	8008674 <prvUnlockQueue>
	}
 8008828:	bf00      	nop
 800882a:	3718      	adds	r7, #24
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008830:	b580      	push	{r7, lr}
 8008832:	b08e      	sub	sp, #56	; 0x38
 8008834:	af04      	add	r7, sp, #16
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	607a      	str	r2, [r7, #4]
 800883c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800883e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10a      	bne.n	800885a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	623b      	str	r3, [r7, #32]
}
 8008856:	bf00      	nop
 8008858:	e7fe      	b.n	8008858 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800885a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10a      	bne.n	8008876 <xTaskCreateStatic+0x46>
	__asm volatile
 8008860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	61fb      	str	r3, [r7, #28]
}
 8008872:	bf00      	nop
 8008874:	e7fe      	b.n	8008874 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008876:	23bc      	movs	r3, #188	; 0xbc
 8008878:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	2bbc      	cmp	r3, #188	; 0xbc
 800887e:	d00a      	beq.n	8008896 <xTaskCreateStatic+0x66>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	61bb      	str	r3, [r7, #24]
}
 8008892:	bf00      	nop
 8008894:	e7fe      	b.n	8008894 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008896:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889a:	2b00      	cmp	r3, #0
 800889c:	d01e      	beq.n	80088dc <xTaskCreateStatic+0xac>
 800889e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d01b      	beq.n	80088dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80088a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80088ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b0:	2202      	movs	r2, #2
 80088b2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80088b6:	2300      	movs	r3, #0
 80088b8:	9303      	str	r3, [sp, #12]
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088bc:	9302      	str	r3, [sp, #8]
 80088be:	f107 0314 	add.w	r3, r7, #20
 80088c2:	9301      	str	r3, [sp, #4]
 80088c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	68b9      	ldr	r1, [r7, #8]
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f000 f850 	bl	8008974 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088d6:	f000 f8f3 	bl	8008ac0 <prvAddNewTaskToReadyList>
 80088da:	e001      	b.n	80088e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80088dc:	2300      	movs	r3, #0
 80088de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80088e0:	697b      	ldr	r3, [r7, #20]
	}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3728      	adds	r7, #40	; 0x28
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b08c      	sub	sp, #48	; 0x30
 80088ee:	af04      	add	r7, sp, #16
 80088f0:	60f8      	str	r0, [r7, #12]
 80088f2:	60b9      	str	r1, [r7, #8]
 80088f4:	603b      	str	r3, [r7, #0]
 80088f6:	4613      	mov	r3, r2
 80088f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80088fa:	88fb      	ldrh	r3, [r7, #6]
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4618      	mov	r0, r3
 8008900:	f001 fc5a 	bl	800a1b8 <pvPortMalloc>
 8008904:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00e      	beq.n	800892a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800890c:	20bc      	movs	r0, #188	; 0xbc
 800890e:	f001 fc53 	bl	800a1b8 <pvPortMalloc>
 8008912:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d003      	beq.n	8008922 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	631a      	str	r2, [r3, #48]	; 0x30
 8008920:	e005      	b.n	800892e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008922:	6978      	ldr	r0, [r7, #20]
 8008924:	f001 fd14 	bl	800a350 <vPortFree>
 8008928:	e001      	b.n	800892e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800892a:	2300      	movs	r3, #0
 800892c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d017      	beq.n	8008964 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800893c:	88fa      	ldrh	r2, [r7, #6]
 800893e:	2300      	movs	r3, #0
 8008940:	9303      	str	r3, [sp, #12]
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	9302      	str	r3, [sp, #8]
 8008946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008948:	9301      	str	r3, [sp, #4]
 800894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	68b9      	ldr	r1, [r7, #8]
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f000 f80e 	bl	8008974 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008958:	69f8      	ldr	r0, [r7, #28]
 800895a:	f000 f8b1 	bl	8008ac0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800895e:	2301      	movs	r3, #1
 8008960:	61bb      	str	r3, [r7, #24]
 8008962:	e002      	b.n	800896a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008968:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800896a:	69bb      	ldr	r3, [r7, #24]
	}
 800896c:	4618      	mov	r0, r3
 800896e:	3720      	adds	r7, #32
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b088      	sub	sp, #32
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	461a      	mov	r2, r3
 800898c:	21a5      	movs	r1, #165	; 0xa5
 800898e:	f001 fe3b 	bl	800a608 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008996:	6879      	ldr	r1, [r7, #4]
 8008998:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800899c:	440b      	add	r3, r1
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	f023 0307 	bic.w	r3, r3, #7
 80089aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	f003 0307 	and.w	r3, r3, #7
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00a      	beq.n	80089cc <prvInitialiseNewTask+0x58>
	__asm volatile
 80089b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ba:	f383 8811 	msr	BASEPRI, r3
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	617b      	str	r3, [r7, #20]
}
 80089c8:	bf00      	nop
 80089ca:	e7fe      	b.n	80089ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d01f      	beq.n	8008a12 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089d2:	2300      	movs	r3, #0
 80089d4:	61fb      	str	r3, [r7, #28]
 80089d6:	e012      	b.n	80089fe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	4413      	add	r3, r2
 80089de:	7819      	ldrb	r1, [r3, #0]
 80089e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	4413      	add	r3, r2
 80089e6:	3334      	adds	r3, #52	; 0x34
 80089e8:	460a      	mov	r2, r1
 80089ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	4413      	add	r3, r2
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d006      	beq.n	8008a06 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	3301      	adds	r3, #1
 80089fc:	61fb      	str	r3, [r7, #28]
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	2b0f      	cmp	r3, #15
 8008a02:	d9e9      	bls.n	80089d8 <prvInitialiseNewTask+0x64>
 8008a04:	e000      	b.n	8008a08 <prvInitialiseNewTask+0x94>
			{
				break;
 8008a06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a10:	e003      	b.n	8008a1a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1c:	2b37      	cmp	r3, #55	; 0x37
 8008a1e:	d901      	bls.n	8008a24 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a20:	2337      	movs	r3, #55	; 0x37
 8008a22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a32:	2200      	movs	r2, #0
 8008a34:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	3304      	adds	r3, #4
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7ff f8be 	bl	8007bbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a42:	3318      	adds	r3, #24
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7ff f8b9 	bl	8007bbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a62:	2200      	movs	r2, #0
 8008a64:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a72:	3354      	adds	r3, #84	; 0x54
 8008a74:	2260      	movs	r2, #96	; 0x60
 8008a76:	2100      	movs	r1, #0
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f001 fdc5 	bl	800a608 <memset>
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a80:	4a0c      	ldr	r2, [pc, #48]	; (8008ab4 <prvInitialiseNewTask+0x140>)
 8008a82:	659a      	str	r2, [r3, #88]	; 0x58
 8008a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a86:	4a0c      	ldr	r2, [pc, #48]	; (8008ab8 <prvInitialiseNewTask+0x144>)
 8008a88:	65da      	str	r2, [r3, #92]	; 0x5c
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8c:	4a0b      	ldr	r2, [pc, #44]	; (8008abc <prvInitialiseNewTask+0x148>)
 8008a8e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	68f9      	ldr	r1, [r7, #12]
 8008a94:	69b8      	ldr	r0, [r7, #24]
 8008a96:	f001 f941 	bl	8009d1c <pxPortInitialiseStack>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aaa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008aac:	bf00      	nop
 8008aae:	3720      	adds	r7, #32
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	0800aa7c 	.word	0x0800aa7c
 8008ab8:	0800aa9c 	.word	0x0800aa9c
 8008abc:	0800aa5c 	.word	0x0800aa5c

08008ac0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ac8:	f001 fa54 	bl	8009f74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008acc:	4b2d      	ldr	r3, [pc, #180]	; (8008b84 <prvAddNewTaskToReadyList+0xc4>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	4a2c      	ldr	r2, [pc, #176]	; (8008b84 <prvAddNewTaskToReadyList+0xc4>)
 8008ad4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ad6:	4b2c      	ldr	r3, [pc, #176]	; (8008b88 <prvAddNewTaskToReadyList+0xc8>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d109      	bne.n	8008af2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ade:	4a2a      	ldr	r2, [pc, #168]	; (8008b88 <prvAddNewTaskToReadyList+0xc8>)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ae4:	4b27      	ldr	r3, [pc, #156]	; (8008b84 <prvAddNewTaskToReadyList+0xc4>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d110      	bne.n	8008b0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008aec:	f000 fc26 	bl	800933c <prvInitialiseTaskLists>
 8008af0:	e00d      	b.n	8008b0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008af2:	4b26      	ldr	r3, [pc, #152]	; (8008b8c <prvAddNewTaskToReadyList+0xcc>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d109      	bne.n	8008b0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008afa:	4b23      	ldr	r3, [pc, #140]	; (8008b88 <prvAddNewTaskToReadyList+0xc8>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d802      	bhi.n	8008b0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b08:	4a1f      	ldr	r2, [pc, #124]	; (8008b88 <prvAddNewTaskToReadyList+0xc8>)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b0e:	4b20      	ldr	r3, [pc, #128]	; (8008b90 <prvAddNewTaskToReadyList+0xd0>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3301      	adds	r3, #1
 8008b14:	4a1e      	ldr	r2, [pc, #120]	; (8008b90 <prvAddNewTaskToReadyList+0xd0>)
 8008b16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b18:	4b1d      	ldr	r3, [pc, #116]	; (8008b90 <prvAddNewTaskToReadyList+0xd0>)
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b24:	4b1b      	ldr	r3, [pc, #108]	; (8008b94 <prvAddNewTaskToReadyList+0xd4>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d903      	bls.n	8008b34 <prvAddNewTaskToReadyList+0x74>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b30:	4a18      	ldr	r2, [pc, #96]	; (8008b94 <prvAddNewTaskToReadyList+0xd4>)
 8008b32:	6013      	str	r3, [r2, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b38:	4613      	mov	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4a15      	ldr	r2, [pc, #84]	; (8008b98 <prvAddNewTaskToReadyList+0xd8>)
 8008b42:	441a      	add	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	3304      	adds	r3, #4
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	f7ff f843 	bl	8007bd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b50:	f001 fa40 	bl	8009fd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b54:	4b0d      	ldr	r3, [pc, #52]	; (8008b8c <prvAddNewTaskToReadyList+0xcc>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00e      	beq.n	8008b7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b5c:	4b0a      	ldr	r3, [pc, #40]	; (8008b88 <prvAddNewTaskToReadyList+0xc8>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d207      	bcs.n	8008b7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b6a:	4b0c      	ldr	r3, [pc, #48]	; (8008b9c <prvAddNewTaskToReadyList+0xdc>)
 8008b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b70:	601a      	str	r2, [r3, #0]
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b7a:	bf00      	nop
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	24000cf0 	.word	0x24000cf0
 8008b88:	2400081c 	.word	0x2400081c
 8008b8c:	24000cfc 	.word	0x24000cfc
 8008b90:	24000d0c 	.word	0x24000d0c
 8008b94:	24000cf8 	.word	0x24000cf8
 8008b98:	24000820 	.word	0x24000820
 8008b9c:	e000ed04 	.word	0xe000ed04

08008ba0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d017      	beq.n	8008be2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008bb2:	4b13      	ldr	r3, [pc, #76]	; (8008c00 <vTaskDelay+0x60>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00a      	beq.n	8008bd0 <vTaskDelay+0x30>
	__asm volatile
 8008bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbe:	f383 8811 	msr	BASEPRI, r3
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	60bb      	str	r3, [r7, #8]
}
 8008bcc:	bf00      	nop
 8008bce:	e7fe      	b.n	8008bce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008bd0:	f000 f88a 	bl	8008ce8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fcfe 	bl	80095d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008bdc:	f000 f892 	bl	8008d04 <xTaskResumeAll>
 8008be0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d107      	bne.n	8008bf8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008be8:	4b06      	ldr	r3, [pc, #24]	; (8008c04 <vTaskDelay+0x64>)
 8008bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bf8:	bf00      	nop
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	24000d18 	.word	0x24000d18
 8008c04:	e000ed04 	.word	0xe000ed04

08008c08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b08a      	sub	sp, #40	; 0x28
 8008c0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c12:	2300      	movs	r3, #0
 8008c14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c16:	463a      	mov	r2, r7
 8008c18:	1d39      	adds	r1, r7, #4
 8008c1a:	f107 0308 	add.w	r3, r7, #8
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7fe ff78 	bl	8007b14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	9202      	str	r2, [sp, #8]
 8008c2c:	9301      	str	r3, [sp, #4]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	2300      	movs	r3, #0
 8008c34:	460a      	mov	r2, r1
 8008c36:	4924      	ldr	r1, [pc, #144]	; (8008cc8 <vTaskStartScheduler+0xc0>)
 8008c38:	4824      	ldr	r0, [pc, #144]	; (8008ccc <vTaskStartScheduler+0xc4>)
 8008c3a:	f7ff fdf9 	bl	8008830 <xTaskCreateStatic>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	4a23      	ldr	r2, [pc, #140]	; (8008cd0 <vTaskStartScheduler+0xc8>)
 8008c42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c44:	4b22      	ldr	r3, [pc, #136]	; (8008cd0 <vTaskStartScheduler+0xc8>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d002      	beq.n	8008c52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	617b      	str	r3, [r7, #20]
 8008c50:	e001      	b.n	8008c56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c52:	2300      	movs	r3, #0
 8008c54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d102      	bne.n	8008c62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c5c:	f000 fd10 	bl	8009680 <xTimerCreateTimerTask>
 8008c60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d11b      	bne.n	8008ca0 <vTaskStartScheduler+0x98>
	__asm volatile
 8008c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	613b      	str	r3, [r7, #16]
}
 8008c7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c7c:	4b15      	ldr	r3, [pc, #84]	; (8008cd4 <vTaskStartScheduler+0xcc>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	3354      	adds	r3, #84	; 0x54
 8008c82:	4a15      	ldr	r2, [pc, #84]	; (8008cd8 <vTaskStartScheduler+0xd0>)
 8008c84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c86:	4b15      	ldr	r3, [pc, #84]	; (8008cdc <vTaskStartScheduler+0xd4>)
 8008c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c8e:	4b14      	ldr	r3, [pc, #80]	; (8008ce0 <vTaskStartScheduler+0xd8>)
 8008c90:	2201      	movs	r2, #1
 8008c92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c94:	4b13      	ldr	r3, [pc, #76]	; (8008ce4 <vTaskStartScheduler+0xdc>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c9a:	f001 f8c9 	bl	8009e30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c9e:	e00e      	b.n	8008cbe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ca6:	d10a      	bne.n	8008cbe <vTaskStartScheduler+0xb6>
	__asm volatile
 8008ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cac:	f383 8811 	msr	BASEPRI, r3
 8008cb0:	f3bf 8f6f 	isb	sy
 8008cb4:	f3bf 8f4f 	dsb	sy
 8008cb8:	60fb      	str	r3, [r7, #12]
}
 8008cba:	bf00      	nop
 8008cbc:	e7fe      	b.n	8008cbc <vTaskStartScheduler+0xb4>
}
 8008cbe:	bf00      	nop
 8008cc0:	3718      	adds	r7, #24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	0800a934 	.word	0x0800a934
 8008ccc:	0800930d 	.word	0x0800930d
 8008cd0:	24000d14 	.word	0x24000d14
 8008cd4:	2400081c 	.word	0x2400081c
 8008cd8:	24000014 	.word	0x24000014
 8008cdc:	24000d10 	.word	0x24000d10
 8008ce0:	24000cfc 	.word	0x24000cfc
 8008ce4:	24000cf4 	.word	0x24000cf4

08008ce8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ce8:	b480      	push	{r7}
 8008cea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008cec:	4b04      	ldr	r3, [pc, #16]	; (8008d00 <vTaskSuspendAll+0x18>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	4a03      	ldr	r2, [pc, #12]	; (8008d00 <vTaskSuspendAll+0x18>)
 8008cf4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008cf6:	bf00      	nop
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	24000d18 	.word	0x24000d18

08008d04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d12:	4b42      	ldr	r3, [pc, #264]	; (8008e1c <xTaskResumeAll+0x118>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d10a      	bne.n	8008d30 <xTaskResumeAll+0x2c>
	__asm volatile
 8008d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	603b      	str	r3, [r7, #0]
}
 8008d2c:	bf00      	nop
 8008d2e:	e7fe      	b.n	8008d2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d30:	f001 f920 	bl	8009f74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d34:	4b39      	ldr	r3, [pc, #228]	; (8008e1c <xTaskResumeAll+0x118>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	4a38      	ldr	r2, [pc, #224]	; (8008e1c <xTaskResumeAll+0x118>)
 8008d3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d3e:	4b37      	ldr	r3, [pc, #220]	; (8008e1c <xTaskResumeAll+0x118>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d162      	bne.n	8008e0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d46:	4b36      	ldr	r3, [pc, #216]	; (8008e20 <xTaskResumeAll+0x11c>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d05e      	beq.n	8008e0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d4e:	e02f      	b.n	8008db0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d50:	4b34      	ldr	r3, [pc, #208]	; (8008e24 <xTaskResumeAll+0x120>)
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	3318      	adds	r3, #24
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fe ff97 	bl	8007c90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3304      	adds	r3, #4
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fe ff92 	bl	8007c90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d70:	4b2d      	ldr	r3, [pc, #180]	; (8008e28 <xTaskResumeAll+0x124>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d903      	bls.n	8008d80 <xTaskResumeAll+0x7c>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7c:	4a2a      	ldr	r2, [pc, #168]	; (8008e28 <xTaskResumeAll+0x124>)
 8008d7e:	6013      	str	r3, [r2, #0]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d84:	4613      	mov	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4a27      	ldr	r2, [pc, #156]	; (8008e2c <xTaskResumeAll+0x128>)
 8008d8e:	441a      	add	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	3304      	adds	r3, #4
 8008d94:	4619      	mov	r1, r3
 8008d96:	4610      	mov	r0, r2
 8008d98:	f7fe ff1d 	bl	8007bd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da0:	4b23      	ldr	r3, [pc, #140]	; (8008e30 <xTaskResumeAll+0x12c>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d302      	bcc.n	8008db0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008daa:	4b22      	ldr	r3, [pc, #136]	; (8008e34 <xTaskResumeAll+0x130>)
 8008dac:	2201      	movs	r2, #1
 8008dae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008db0:	4b1c      	ldr	r3, [pc, #112]	; (8008e24 <xTaskResumeAll+0x120>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1cb      	bne.n	8008d50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008dbe:	f000 fb5f 	bl	8009480 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008dc2:	4b1d      	ldr	r3, [pc, #116]	; (8008e38 <xTaskResumeAll+0x134>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d010      	beq.n	8008df0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008dce:	f000 f847 	bl	8008e60 <xTaskIncrementTick>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008dd8:	4b16      	ldr	r3, [pc, #88]	; (8008e34 <xTaskResumeAll+0x130>)
 8008dda:	2201      	movs	r2, #1
 8008ddc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	3b01      	subs	r3, #1
 8008de2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1f1      	bne.n	8008dce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008dea:	4b13      	ldr	r3, [pc, #76]	; (8008e38 <xTaskResumeAll+0x134>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008df0:	4b10      	ldr	r3, [pc, #64]	; (8008e34 <xTaskResumeAll+0x130>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d009      	beq.n	8008e0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008dfc:	4b0f      	ldr	r3, [pc, #60]	; (8008e3c <xTaskResumeAll+0x138>)
 8008dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e0c:	f001 f8e2 	bl	8009fd4 <vPortExitCritical>

	return xAlreadyYielded;
 8008e10:	68bb      	ldr	r3, [r7, #8]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	24000d18 	.word	0x24000d18
 8008e20:	24000cf0 	.word	0x24000cf0
 8008e24:	24000cb0 	.word	0x24000cb0
 8008e28:	24000cf8 	.word	0x24000cf8
 8008e2c:	24000820 	.word	0x24000820
 8008e30:	2400081c 	.word	0x2400081c
 8008e34:	24000d04 	.word	0x24000d04
 8008e38:	24000d00 	.word	0x24000d00
 8008e3c:	e000ed04 	.word	0xe000ed04

08008e40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e46:	4b05      	ldr	r3, [pc, #20]	; (8008e5c <xTaskGetTickCount+0x1c>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e4c:	687b      	ldr	r3, [r7, #4]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	370c      	adds	r7, #12
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	24000cf4 	.word	0x24000cf4

08008e60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e66:	2300      	movs	r3, #0
 8008e68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e6a:	4b4f      	ldr	r3, [pc, #316]	; (8008fa8 <xTaskIncrementTick+0x148>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f040 808f 	bne.w	8008f92 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e74:	4b4d      	ldr	r3, [pc, #308]	; (8008fac <xTaskIncrementTick+0x14c>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e7c:	4a4b      	ldr	r2, [pc, #300]	; (8008fac <xTaskIncrementTick+0x14c>)
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d120      	bne.n	8008eca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e88:	4b49      	ldr	r3, [pc, #292]	; (8008fb0 <xTaskIncrementTick+0x150>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00a      	beq.n	8008ea8 <xTaskIncrementTick+0x48>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	603b      	str	r3, [r7, #0]
}
 8008ea4:	bf00      	nop
 8008ea6:	e7fe      	b.n	8008ea6 <xTaskIncrementTick+0x46>
 8008ea8:	4b41      	ldr	r3, [pc, #260]	; (8008fb0 <xTaskIncrementTick+0x150>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	60fb      	str	r3, [r7, #12]
 8008eae:	4b41      	ldr	r3, [pc, #260]	; (8008fb4 <xTaskIncrementTick+0x154>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a3f      	ldr	r2, [pc, #252]	; (8008fb0 <xTaskIncrementTick+0x150>)
 8008eb4:	6013      	str	r3, [r2, #0]
 8008eb6:	4a3f      	ldr	r2, [pc, #252]	; (8008fb4 <xTaskIncrementTick+0x154>)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6013      	str	r3, [r2, #0]
 8008ebc:	4b3e      	ldr	r3, [pc, #248]	; (8008fb8 <xTaskIncrementTick+0x158>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	4a3d      	ldr	r2, [pc, #244]	; (8008fb8 <xTaskIncrementTick+0x158>)
 8008ec4:	6013      	str	r3, [r2, #0]
 8008ec6:	f000 fadb 	bl	8009480 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008eca:	4b3c      	ldr	r3, [pc, #240]	; (8008fbc <xTaskIncrementTick+0x15c>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d349      	bcc.n	8008f68 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ed4:	4b36      	ldr	r3, [pc, #216]	; (8008fb0 <xTaskIncrementTick+0x150>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d104      	bne.n	8008ee8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ede:	4b37      	ldr	r3, [pc, #220]	; (8008fbc <xTaskIncrementTick+0x15c>)
 8008ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ee4:	601a      	str	r2, [r3, #0]
					break;
 8008ee6:	e03f      	b.n	8008f68 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ee8:	4b31      	ldr	r3, [pc, #196]	; (8008fb0 <xTaskIncrementTick+0x150>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ef8:	693a      	ldr	r2, [r7, #16]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d203      	bcs.n	8008f08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f00:	4a2e      	ldr	r2, [pc, #184]	; (8008fbc <xTaskIncrementTick+0x15c>)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f06:	e02f      	b.n	8008f68 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	3304      	adds	r3, #4
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7fe febf 	bl	8007c90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d004      	beq.n	8008f24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	3318      	adds	r3, #24
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fe feb6 	bl	8007c90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f28:	4b25      	ldr	r3, [pc, #148]	; (8008fc0 <xTaskIncrementTick+0x160>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d903      	bls.n	8008f38 <xTaskIncrementTick+0xd8>
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f34:	4a22      	ldr	r2, [pc, #136]	; (8008fc0 <xTaskIncrementTick+0x160>)
 8008f36:	6013      	str	r3, [r2, #0]
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4a1f      	ldr	r2, [pc, #124]	; (8008fc4 <xTaskIncrementTick+0x164>)
 8008f46:	441a      	add	r2, r3
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	4610      	mov	r0, r2
 8008f50:	f7fe fe41 	bl	8007bd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f58:	4b1b      	ldr	r3, [pc, #108]	; (8008fc8 <xTaskIncrementTick+0x168>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d3b8      	bcc.n	8008ed4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008f62:	2301      	movs	r3, #1
 8008f64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f66:	e7b5      	b.n	8008ed4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f68:	4b17      	ldr	r3, [pc, #92]	; (8008fc8 <xTaskIncrementTick+0x168>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f6e:	4915      	ldr	r1, [pc, #84]	; (8008fc4 <xTaskIncrementTick+0x164>)
 8008f70:	4613      	mov	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	4413      	add	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	440b      	add	r3, r1
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d901      	bls.n	8008f84 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008f80:	2301      	movs	r3, #1
 8008f82:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008f84:	4b11      	ldr	r3, [pc, #68]	; (8008fcc <xTaskIncrementTick+0x16c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d007      	beq.n	8008f9c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	617b      	str	r3, [r7, #20]
 8008f90:	e004      	b.n	8008f9c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008f92:	4b0f      	ldr	r3, [pc, #60]	; (8008fd0 <xTaskIncrementTick+0x170>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	3301      	adds	r3, #1
 8008f98:	4a0d      	ldr	r2, [pc, #52]	; (8008fd0 <xTaskIncrementTick+0x170>)
 8008f9a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f9c:	697b      	ldr	r3, [r7, #20]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3718      	adds	r7, #24
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	24000d18 	.word	0x24000d18
 8008fac:	24000cf4 	.word	0x24000cf4
 8008fb0:	24000ca8 	.word	0x24000ca8
 8008fb4:	24000cac 	.word	0x24000cac
 8008fb8:	24000d08 	.word	0x24000d08
 8008fbc:	24000d10 	.word	0x24000d10
 8008fc0:	24000cf8 	.word	0x24000cf8
 8008fc4:	24000820 	.word	0x24000820
 8008fc8:	2400081c 	.word	0x2400081c
 8008fcc:	24000d04 	.word	0x24000d04
 8008fd0:	24000d00 	.word	0x24000d00

08008fd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008fda:	4b2a      	ldr	r3, [pc, #168]	; (8009084 <vTaskSwitchContext+0xb0>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d003      	beq.n	8008fea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008fe2:	4b29      	ldr	r3, [pc, #164]	; (8009088 <vTaskSwitchContext+0xb4>)
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008fe8:	e046      	b.n	8009078 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008fea:	4b27      	ldr	r3, [pc, #156]	; (8009088 <vTaskSwitchContext+0xb4>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ff0:	4b26      	ldr	r3, [pc, #152]	; (800908c <vTaskSwitchContext+0xb8>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	60fb      	str	r3, [r7, #12]
 8008ff6:	e010      	b.n	800901a <vTaskSwitchContext+0x46>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10a      	bne.n	8009014 <vTaskSwitchContext+0x40>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	607b      	str	r3, [r7, #4]
}
 8009010:	bf00      	nop
 8009012:	e7fe      	b.n	8009012 <vTaskSwitchContext+0x3e>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	3b01      	subs	r3, #1
 8009018:	60fb      	str	r3, [r7, #12]
 800901a:	491d      	ldr	r1, [pc, #116]	; (8009090 <vTaskSwitchContext+0xbc>)
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	4613      	mov	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	440b      	add	r3, r1
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0e4      	beq.n	8008ff8 <vTaskSwitchContext+0x24>
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	4613      	mov	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4a15      	ldr	r2, [pc, #84]	; (8009090 <vTaskSwitchContext+0xbc>)
 800903a:	4413      	add	r3, r2
 800903c:	60bb      	str	r3, [r7, #8]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	605a      	str	r2, [r3, #4]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	3308      	adds	r3, #8
 8009050:	429a      	cmp	r2, r3
 8009052:	d104      	bne.n	800905e <vTaskSwitchContext+0x8a>
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	605a      	str	r2, [r3, #4]
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	4a0b      	ldr	r2, [pc, #44]	; (8009094 <vTaskSwitchContext+0xc0>)
 8009066:	6013      	str	r3, [r2, #0]
 8009068:	4a08      	ldr	r2, [pc, #32]	; (800908c <vTaskSwitchContext+0xb8>)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800906e:	4b09      	ldr	r3, [pc, #36]	; (8009094 <vTaskSwitchContext+0xc0>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3354      	adds	r3, #84	; 0x54
 8009074:	4a08      	ldr	r2, [pc, #32]	; (8009098 <vTaskSwitchContext+0xc4>)
 8009076:	6013      	str	r3, [r2, #0]
}
 8009078:	bf00      	nop
 800907a:	3714      	adds	r7, #20
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr
 8009084:	24000d18 	.word	0x24000d18
 8009088:	24000d04 	.word	0x24000d04
 800908c:	24000cf8 	.word	0x24000cf8
 8009090:	24000820 	.word	0x24000820
 8009094:	2400081c 	.word	0x2400081c
 8009098:	24000014 	.word	0x24000014

0800909c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10a      	bne.n	80090c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	60fb      	str	r3, [r7, #12]
}
 80090be:	bf00      	nop
 80090c0:	e7fe      	b.n	80090c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090c2:	4b07      	ldr	r3, [pc, #28]	; (80090e0 <vTaskPlaceOnEventList+0x44>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3318      	adds	r3, #24
 80090c8:	4619      	mov	r1, r3
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7fe fda7 	bl	8007c1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80090d0:	2101      	movs	r1, #1
 80090d2:	6838      	ldr	r0, [r7, #0]
 80090d4:	f000 fa80 	bl	80095d8 <prvAddCurrentTaskToDelayedList>
}
 80090d8:	bf00      	nop
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	2400081c 	.word	0x2400081c

080090e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d10a      	bne.n	800910c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80090f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	617b      	str	r3, [r7, #20]
}
 8009108:	bf00      	nop
 800910a:	e7fe      	b.n	800910a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800910c:	4b0a      	ldr	r3, [pc, #40]	; (8009138 <vTaskPlaceOnEventListRestricted+0x54>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3318      	adds	r3, #24
 8009112:	4619      	mov	r1, r3
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f7fe fd5e 	bl	8007bd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009124:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009126:	6879      	ldr	r1, [r7, #4]
 8009128:	68b8      	ldr	r0, [r7, #8]
 800912a:	f000 fa55 	bl	80095d8 <prvAddCurrentTaskToDelayedList>
	}
 800912e:	bf00      	nop
 8009130:	3718      	adds	r7, #24
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	2400081c 	.word	0x2400081c

0800913c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10a      	bne.n	8009168 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	60fb      	str	r3, [r7, #12]
}
 8009164:	bf00      	nop
 8009166:	e7fe      	b.n	8009166 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	3318      	adds	r3, #24
 800916c:	4618      	mov	r0, r3
 800916e:	f7fe fd8f 	bl	8007c90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009172:	4b1e      	ldr	r3, [pc, #120]	; (80091ec <xTaskRemoveFromEventList+0xb0>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d11d      	bne.n	80091b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	3304      	adds	r3, #4
 800917e:	4618      	mov	r0, r3
 8009180:	f7fe fd86 	bl	8007c90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009188:	4b19      	ldr	r3, [pc, #100]	; (80091f0 <xTaskRemoveFromEventList+0xb4>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	429a      	cmp	r2, r3
 800918e:	d903      	bls.n	8009198 <xTaskRemoveFromEventList+0x5c>
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009194:	4a16      	ldr	r2, [pc, #88]	; (80091f0 <xTaskRemoveFromEventList+0xb4>)
 8009196:	6013      	str	r3, [r2, #0]
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800919c:	4613      	mov	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	4413      	add	r3, r2
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4a13      	ldr	r2, [pc, #76]	; (80091f4 <xTaskRemoveFromEventList+0xb8>)
 80091a6:	441a      	add	r2, r3
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	3304      	adds	r3, #4
 80091ac:	4619      	mov	r1, r3
 80091ae:	4610      	mov	r0, r2
 80091b0:	f7fe fd11 	bl	8007bd6 <vListInsertEnd>
 80091b4:	e005      	b.n	80091c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	3318      	adds	r3, #24
 80091ba:	4619      	mov	r1, r3
 80091bc:	480e      	ldr	r0, [pc, #56]	; (80091f8 <xTaskRemoveFromEventList+0xbc>)
 80091be:	f7fe fd0a 	bl	8007bd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c6:	4b0d      	ldr	r3, [pc, #52]	; (80091fc <xTaskRemoveFromEventList+0xc0>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d905      	bls.n	80091dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80091d0:	2301      	movs	r3, #1
 80091d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80091d4:	4b0a      	ldr	r3, [pc, #40]	; (8009200 <xTaskRemoveFromEventList+0xc4>)
 80091d6:	2201      	movs	r2, #1
 80091d8:	601a      	str	r2, [r3, #0]
 80091da:	e001      	b.n	80091e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80091dc:	2300      	movs	r3, #0
 80091de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80091e0:	697b      	ldr	r3, [r7, #20]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	24000d18 	.word	0x24000d18
 80091f0:	24000cf8 	.word	0x24000cf8
 80091f4:	24000820 	.word	0x24000820
 80091f8:	24000cb0 	.word	0x24000cb0
 80091fc:	2400081c 	.word	0x2400081c
 8009200:	24000d04 	.word	0x24000d04

08009204 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800920c:	4b06      	ldr	r3, [pc, #24]	; (8009228 <vTaskInternalSetTimeOutState+0x24>)
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009214:	4b05      	ldr	r3, [pc, #20]	; (800922c <vTaskInternalSetTimeOutState+0x28>)
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	605a      	str	r2, [r3, #4]
}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	24000d08 	.word	0x24000d08
 800922c:	24000cf4 	.word	0x24000cf4

08009230 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b088      	sub	sp, #32
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10a      	bne.n	8009256 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	613b      	str	r3, [r7, #16]
}
 8009252:	bf00      	nop
 8009254:	e7fe      	b.n	8009254 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10a      	bne.n	8009272 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800925c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	60fb      	str	r3, [r7, #12]
}
 800926e:	bf00      	nop
 8009270:	e7fe      	b.n	8009270 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009272:	f000 fe7f 	bl	8009f74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009276:	4b1d      	ldr	r3, [pc, #116]	; (80092ec <xTaskCheckForTimeOut+0xbc>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	69ba      	ldr	r2, [r7, #24]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800928e:	d102      	bne.n	8009296 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009290:	2300      	movs	r3, #0
 8009292:	61fb      	str	r3, [r7, #28]
 8009294:	e023      	b.n	80092de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	4b15      	ldr	r3, [pc, #84]	; (80092f0 <xTaskCheckForTimeOut+0xc0>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d007      	beq.n	80092b2 <xTaskCheckForTimeOut+0x82>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d302      	bcc.n	80092b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80092ac:	2301      	movs	r3, #1
 80092ae:	61fb      	str	r3, [r7, #28]
 80092b0:	e015      	b.n	80092de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d20b      	bcs.n	80092d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	1ad2      	subs	r2, r2, r3
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7ff ff9b 	bl	8009204 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80092ce:	2300      	movs	r3, #0
 80092d0:	61fb      	str	r3, [r7, #28]
 80092d2:	e004      	b.n	80092de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2200      	movs	r2, #0
 80092d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80092da:	2301      	movs	r3, #1
 80092dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80092de:	f000 fe79 	bl	8009fd4 <vPortExitCritical>

	return xReturn;
 80092e2:	69fb      	ldr	r3, [r7, #28]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3720      	adds	r7, #32
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	24000cf4 	.word	0x24000cf4
 80092f0:	24000d08 	.word	0x24000d08

080092f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80092f4:	b480      	push	{r7}
 80092f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80092f8:	4b03      	ldr	r3, [pc, #12]	; (8009308 <vTaskMissedYield+0x14>)
 80092fa:	2201      	movs	r2, #1
 80092fc:	601a      	str	r2, [r3, #0]
}
 80092fe:	bf00      	nop
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr
 8009308:	24000d04 	.word	0x24000d04

0800930c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009314:	f000 f852 	bl	80093bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009318:	4b06      	ldr	r3, [pc, #24]	; (8009334 <prvIdleTask+0x28>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d9f9      	bls.n	8009314 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009320:	4b05      	ldr	r3, [pc, #20]	; (8009338 <prvIdleTask+0x2c>)
 8009322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009326:	601a      	str	r2, [r3, #0]
 8009328:	f3bf 8f4f 	dsb	sy
 800932c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009330:	e7f0      	b.n	8009314 <prvIdleTask+0x8>
 8009332:	bf00      	nop
 8009334:	24000820 	.word	0x24000820
 8009338:	e000ed04 	.word	0xe000ed04

0800933c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009342:	2300      	movs	r3, #0
 8009344:	607b      	str	r3, [r7, #4]
 8009346:	e00c      	b.n	8009362 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	4613      	mov	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	4413      	add	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	4a12      	ldr	r2, [pc, #72]	; (800939c <prvInitialiseTaskLists+0x60>)
 8009354:	4413      	add	r3, r2
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe fc10 	bl	8007b7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	3301      	adds	r3, #1
 8009360:	607b      	str	r3, [r7, #4]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b37      	cmp	r3, #55	; 0x37
 8009366:	d9ef      	bls.n	8009348 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009368:	480d      	ldr	r0, [pc, #52]	; (80093a0 <prvInitialiseTaskLists+0x64>)
 800936a:	f7fe fc07 	bl	8007b7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800936e:	480d      	ldr	r0, [pc, #52]	; (80093a4 <prvInitialiseTaskLists+0x68>)
 8009370:	f7fe fc04 	bl	8007b7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009374:	480c      	ldr	r0, [pc, #48]	; (80093a8 <prvInitialiseTaskLists+0x6c>)
 8009376:	f7fe fc01 	bl	8007b7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800937a:	480c      	ldr	r0, [pc, #48]	; (80093ac <prvInitialiseTaskLists+0x70>)
 800937c:	f7fe fbfe 	bl	8007b7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009380:	480b      	ldr	r0, [pc, #44]	; (80093b0 <prvInitialiseTaskLists+0x74>)
 8009382:	f7fe fbfb 	bl	8007b7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009386:	4b0b      	ldr	r3, [pc, #44]	; (80093b4 <prvInitialiseTaskLists+0x78>)
 8009388:	4a05      	ldr	r2, [pc, #20]	; (80093a0 <prvInitialiseTaskLists+0x64>)
 800938a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800938c:	4b0a      	ldr	r3, [pc, #40]	; (80093b8 <prvInitialiseTaskLists+0x7c>)
 800938e:	4a05      	ldr	r2, [pc, #20]	; (80093a4 <prvInitialiseTaskLists+0x68>)
 8009390:	601a      	str	r2, [r3, #0]
}
 8009392:	bf00      	nop
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	24000820 	.word	0x24000820
 80093a0:	24000c80 	.word	0x24000c80
 80093a4:	24000c94 	.word	0x24000c94
 80093a8:	24000cb0 	.word	0x24000cb0
 80093ac:	24000cc4 	.word	0x24000cc4
 80093b0:	24000cdc 	.word	0x24000cdc
 80093b4:	24000ca8 	.word	0x24000ca8
 80093b8:	24000cac 	.word	0x24000cac

080093bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093c2:	e019      	b.n	80093f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80093c4:	f000 fdd6 	bl	8009f74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093c8:	4b10      	ldr	r3, [pc, #64]	; (800940c <prvCheckTasksWaitingTermination+0x50>)
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	3304      	adds	r3, #4
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fe fc5b 	bl	8007c90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80093da:	4b0d      	ldr	r3, [pc, #52]	; (8009410 <prvCheckTasksWaitingTermination+0x54>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3b01      	subs	r3, #1
 80093e0:	4a0b      	ldr	r2, [pc, #44]	; (8009410 <prvCheckTasksWaitingTermination+0x54>)
 80093e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80093e4:	4b0b      	ldr	r3, [pc, #44]	; (8009414 <prvCheckTasksWaitingTermination+0x58>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3b01      	subs	r3, #1
 80093ea:	4a0a      	ldr	r2, [pc, #40]	; (8009414 <prvCheckTasksWaitingTermination+0x58>)
 80093ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80093ee:	f000 fdf1 	bl	8009fd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f810 	bl	8009418 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093f8:	4b06      	ldr	r3, [pc, #24]	; (8009414 <prvCheckTasksWaitingTermination+0x58>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1e1      	bne.n	80093c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009400:	bf00      	nop
 8009402:	bf00      	nop
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	24000cc4 	.word	0x24000cc4
 8009410:	24000cf0 	.word	0x24000cf0
 8009414:	24000cd8 	.word	0x24000cd8

08009418 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	3354      	adds	r3, #84	; 0x54
 8009424:	4618      	mov	r0, r3
 8009426:	f001 f905 	bl	800a634 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009430:	2b00      	cmp	r3, #0
 8009432:	d108      	bne.n	8009446 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009438:	4618      	mov	r0, r3
 800943a:	f000 ff89 	bl	800a350 <vPortFree>
				vPortFree( pxTCB );
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 ff86 	bl	800a350 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009444:	e018      	b.n	8009478 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800944c:	2b01      	cmp	r3, #1
 800944e:	d103      	bne.n	8009458 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 ff7d 	bl	800a350 <vPortFree>
	}
 8009456:	e00f      	b.n	8009478 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800945e:	2b02      	cmp	r3, #2
 8009460:	d00a      	beq.n	8009478 <prvDeleteTCB+0x60>
	__asm volatile
 8009462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009466:	f383 8811 	msr	BASEPRI, r3
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	60fb      	str	r3, [r7, #12]
}
 8009474:	bf00      	nop
 8009476:	e7fe      	b.n	8009476 <prvDeleteTCB+0x5e>
	}
 8009478:	bf00      	nop
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009486:	4b0c      	ldr	r3, [pc, #48]	; (80094b8 <prvResetNextTaskUnblockTime+0x38>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d104      	bne.n	800949a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009490:	4b0a      	ldr	r3, [pc, #40]	; (80094bc <prvResetNextTaskUnblockTime+0x3c>)
 8009492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009496:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009498:	e008      	b.n	80094ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800949a:	4b07      	ldr	r3, [pc, #28]	; (80094b8 <prvResetNextTaskUnblockTime+0x38>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	4a04      	ldr	r2, [pc, #16]	; (80094bc <prvResetNextTaskUnblockTime+0x3c>)
 80094aa:	6013      	str	r3, [r2, #0]
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr
 80094b8:	24000ca8 	.word	0x24000ca8
 80094bc:	24000d10 	.word	0x24000d10

080094c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80094c6:	4b0b      	ldr	r3, [pc, #44]	; (80094f4 <xTaskGetSchedulerState+0x34>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d102      	bne.n	80094d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80094ce:	2301      	movs	r3, #1
 80094d0:	607b      	str	r3, [r7, #4]
 80094d2:	e008      	b.n	80094e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094d4:	4b08      	ldr	r3, [pc, #32]	; (80094f8 <xTaskGetSchedulerState+0x38>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d102      	bne.n	80094e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80094dc:	2302      	movs	r3, #2
 80094de:	607b      	str	r3, [r7, #4]
 80094e0:	e001      	b.n	80094e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80094e2:	2300      	movs	r3, #0
 80094e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80094e6:	687b      	ldr	r3, [r7, #4]
	}
 80094e8:	4618      	mov	r0, r3
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr
 80094f4:	24000cfc 	.word	0x24000cfc
 80094f8:	24000d18 	.word	0x24000d18

080094fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b086      	sub	sp, #24
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009508:	2300      	movs	r3, #0
 800950a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d056      	beq.n	80095c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009512:	4b2e      	ldr	r3, [pc, #184]	; (80095cc <xTaskPriorityDisinherit+0xd0>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	693a      	ldr	r2, [r7, #16]
 8009518:	429a      	cmp	r2, r3
 800951a:	d00a      	beq.n	8009532 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	60fb      	str	r3, [r7, #12]
}
 800952e:	bf00      	nop
 8009530:	e7fe      	b.n	8009530 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10a      	bne.n	8009550 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	60bb      	str	r3, [r7, #8]
}
 800954c:	bf00      	nop
 800954e:	e7fe      	b.n	800954e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009554:	1e5a      	subs	r2, r3, #1
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009562:	429a      	cmp	r2, r3
 8009564:	d02c      	beq.n	80095c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800956a:	2b00      	cmp	r3, #0
 800956c:	d128      	bne.n	80095c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	3304      	adds	r3, #4
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe fb8c 	bl	8007c90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009584:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009590:	4b0f      	ldr	r3, [pc, #60]	; (80095d0 <xTaskPriorityDisinherit+0xd4>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	429a      	cmp	r2, r3
 8009596:	d903      	bls.n	80095a0 <xTaskPriorityDisinherit+0xa4>
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959c:	4a0c      	ldr	r2, [pc, #48]	; (80095d0 <xTaskPriorityDisinherit+0xd4>)
 800959e:	6013      	str	r3, [r2, #0]
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095a4:	4613      	mov	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	4a09      	ldr	r2, [pc, #36]	; (80095d4 <xTaskPriorityDisinherit+0xd8>)
 80095ae:	441a      	add	r2, r3
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	3304      	adds	r3, #4
 80095b4:	4619      	mov	r1, r3
 80095b6:	4610      	mov	r0, r2
 80095b8:	f7fe fb0d 	bl	8007bd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80095bc:	2301      	movs	r3, #1
 80095be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80095c0:	697b      	ldr	r3, [r7, #20]
	}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3718      	adds	r7, #24
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	2400081c 	.word	0x2400081c
 80095d0:	24000cf8 	.word	0x24000cf8
 80095d4:	24000820 	.word	0x24000820

080095d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095e2:	4b21      	ldr	r3, [pc, #132]	; (8009668 <prvAddCurrentTaskToDelayedList+0x90>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095e8:	4b20      	ldr	r3, [pc, #128]	; (800966c <prvAddCurrentTaskToDelayedList+0x94>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3304      	adds	r3, #4
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fe fb4e 	bl	8007c90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095fa:	d10a      	bne.n	8009612 <prvAddCurrentTaskToDelayedList+0x3a>
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d007      	beq.n	8009612 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009602:	4b1a      	ldr	r3, [pc, #104]	; (800966c <prvAddCurrentTaskToDelayedList+0x94>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3304      	adds	r3, #4
 8009608:	4619      	mov	r1, r3
 800960a:	4819      	ldr	r0, [pc, #100]	; (8009670 <prvAddCurrentTaskToDelayedList+0x98>)
 800960c:	f7fe fae3 	bl	8007bd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009610:	e026      	b.n	8009660 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4413      	add	r3, r2
 8009618:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800961a:	4b14      	ldr	r3, [pc, #80]	; (800966c <prvAddCurrentTaskToDelayedList+0x94>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	429a      	cmp	r2, r3
 8009628:	d209      	bcs.n	800963e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800962a:	4b12      	ldr	r3, [pc, #72]	; (8009674 <prvAddCurrentTaskToDelayedList+0x9c>)
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	4b0f      	ldr	r3, [pc, #60]	; (800966c <prvAddCurrentTaskToDelayedList+0x94>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3304      	adds	r3, #4
 8009634:	4619      	mov	r1, r3
 8009636:	4610      	mov	r0, r2
 8009638:	f7fe faf1 	bl	8007c1e <vListInsert>
}
 800963c:	e010      	b.n	8009660 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800963e:	4b0e      	ldr	r3, [pc, #56]	; (8009678 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	4b0a      	ldr	r3, [pc, #40]	; (800966c <prvAddCurrentTaskToDelayedList+0x94>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	3304      	adds	r3, #4
 8009648:	4619      	mov	r1, r3
 800964a:	4610      	mov	r0, r2
 800964c:	f7fe fae7 	bl	8007c1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009650:	4b0a      	ldr	r3, [pc, #40]	; (800967c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	429a      	cmp	r2, r3
 8009658:	d202      	bcs.n	8009660 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800965a:	4a08      	ldr	r2, [pc, #32]	; (800967c <prvAddCurrentTaskToDelayedList+0xa4>)
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	6013      	str	r3, [r2, #0]
}
 8009660:	bf00      	nop
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	24000cf4 	.word	0x24000cf4
 800966c:	2400081c 	.word	0x2400081c
 8009670:	24000cdc 	.word	0x24000cdc
 8009674:	24000cac 	.word	0x24000cac
 8009678:	24000ca8 	.word	0x24000ca8
 800967c:	24000d10 	.word	0x24000d10

08009680 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b08a      	sub	sp, #40	; 0x28
 8009684:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009686:	2300      	movs	r3, #0
 8009688:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800968a:	f000 fb07 	bl	8009c9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800968e:	4b1c      	ldr	r3, [pc, #112]	; (8009700 <xTimerCreateTimerTask+0x80>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d021      	beq.n	80096da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009696:	2300      	movs	r3, #0
 8009698:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800969a:	2300      	movs	r3, #0
 800969c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800969e:	1d3a      	adds	r2, r7, #4
 80096a0:	f107 0108 	add.w	r1, r7, #8
 80096a4:	f107 030c 	add.w	r3, r7, #12
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fe fa4d 	bl	8007b48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80096ae:	6879      	ldr	r1, [r7, #4]
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	9202      	str	r2, [sp, #8]
 80096b6:	9301      	str	r3, [sp, #4]
 80096b8:	2302      	movs	r3, #2
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	2300      	movs	r3, #0
 80096be:	460a      	mov	r2, r1
 80096c0:	4910      	ldr	r1, [pc, #64]	; (8009704 <xTimerCreateTimerTask+0x84>)
 80096c2:	4811      	ldr	r0, [pc, #68]	; (8009708 <xTimerCreateTimerTask+0x88>)
 80096c4:	f7ff f8b4 	bl	8008830 <xTaskCreateStatic>
 80096c8:	4603      	mov	r3, r0
 80096ca:	4a10      	ldr	r2, [pc, #64]	; (800970c <xTimerCreateTimerTask+0x8c>)
 80096cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80096ce:	4b0f      	ldr	r3, [pc, #60]	; (800970c <xTimerCreateTimerTask+0x8c>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d001      	beq.n	80096da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80096d6:	2301      	movs	r3, #1
 80096d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10a      	bne.n	80096f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	613b      	str	r3, [r7, #16]
}
 80096f2:	bf00      	nop
 80096f4:	e7fe      	b.n	80096f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80096f6:	697b      	ldr	r3, [r7, #20]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3718      	adds	r7, #24
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	24000d4c 	.word	0x24000d4c
 8009704:	0800a93c 	.word	0x0800a93c
 8009708:	08009845 	.word	0x08009845
 800970c:	24000d50 	.word	0x24000d50

08009710 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b08a      	sub	sp, #40	; 0x28
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
 800971c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800971e:	2300      	movs	r3, #0
 8009720:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10a      	bne.n	800973e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	623b      	str	r3, [r7, #32]
}
 800973a:	bf00      	nop
 800973c:	e7fe      	b.n	800973c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800973e:	4b1a      	ldr	r3, [pc, #104]	; (80097a8 <xTimerGenericCommand+0x98>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d02a      	beq.n	800979c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	2b05      	cmp	r3, #5
 8009756:	dc18      	bgt.n	800978a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009758:	f7ff feb2 	bl	80094c0 <xTaskGetSchedulerState>
 800975c:	4603      	mov	r3, r0
 800975e:	2b02      	cmp	r3, #2
 8009760:	d109      	bne.n	8009776 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009762:	4b11      	ldr	r3, [pc, #68]	; (80097a8 <xTimerGenericCommand+0x98>)
 8009764:	6818      	ldr	r0, [r3, #0]
 8009766:	f107 0110 	add.w	r1, r7, #16
 800976a:	2300      	movs	r3, #0
 800976c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800976e:	f7fe fbf7 	bl	8007f60 <xQueueGenericSend>
 8009772:	6278      	str	r0, [r7, #36]	; 0x24
 8009774:	e012      	b.n	800979c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009776:	4b0c      	ldr	r3, [pc, #48]	; (80097a8 <xTimerGenericCommand+0x98>)
 8009778:	6818      	ldr	r0, [r3, #0]
 800977a:	f107 0110 	add.w	r1, r7, #16
 800977e:	2300      	movs	r3, #0
 8009780:	2200      	movs	r2, #0
 8009782:	f7fe fbed 	bl	8007f60 <xQueueGenericSend>
 8009786:	6278      	str	r0, [r7, #36]	; 0x24
 8009788:	e008      	b.n	800979c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800978a:	4b07      	ldr	r3, [pc, #28]	; (80097a8 <xTimerGenericCommand+0x98>)
 800978c:	6818      	ldr	r0, [r3, #0]
 800978e:	f107 0110 	add.w	r1, r7, #16
 8009792:	2300      	movs	r3, #0
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	f7fe fce1 	bl	800815c <xQueueGenericSendFromISR>
 800979a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800979c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3728      	adds	r7, #40	; 0x28
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	24000d4c 	.word	0x24000d4c

080097ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b088      	sub	sp, #32
 80097b0:	af02      	add	r7, sp, #8
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097b6:	4b22      	ldr	r3, [pc, #136]	; (8009840 <prvProcessExpiredTimer+0x94>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	3304      	adds	r3, #4
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7fe fa63 	bl	8007c90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097d0:	f003 0304 	and.w	r3, r3, #4
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d022      	beq.n	800981e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	699a      	ldr	r2, [r3, #24]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	18d1      	adds	r1, r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	6978      	ldr	r0, [r7, #20]
 80097e6:	f000 f8d1 	bl	800998c <prvInsertTimerInActiveList>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d01f      	beq.n	8009830 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097f0:	2300      	movs	r3, #0
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	2300      	movs	r3, #0
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	2100      	movs	r1, #0
 80097fa:	6978      	ldr	r0, [r7, #20]
 80097fc:	f7ff ff88 	bl	8009710 <xTimerGenericCommand>
 8009800:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d113      	bne.n	8009830 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980c:	f383 8811 	msr	BASEPRI, r3
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	60fb      	str	r3, [r7, #12]
}
 800981a:	bf00      	nop
 800981c:	e7fe      	b.n	800981c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009824:	f023 0301 	bic.w	r3, r3, #1
 8009828:	b2da      	uxtb	r2, r3
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	6a1b      	ldr	r3, [r3, #32]
 8009834:	6978      	ldr	r0, [r7, #20]
 8009836:	4798      	blx	r3
}
 8009838:	bf00      	nop
 800983a:	3718      	adds	r7, #24
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	24000d44 	.word	0x24000d44

08009844 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800984c:	f107 0308 	add.w	r3, r7, #8
 8009850:	4618      	mov	r0, r3
 8009852:	f000 f857 	bl	8009904 <prvGetNextExpireTime>
 8009856:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	4619      	mov	r1, r3
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f000 f803 	bl	8009868 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009862:	f000 f8d5 	bl	8009a10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009866:	e7f1      	b.n	800984c <prvTimerTask+0x8>

08009868 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009872:	f7ff fa39 	bl	8008ce8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009876:	f107 0308 	add.w	r3, r7, #8
 800987a:	4618      	mov	r0, r3
 800987c:	f000 f866 	bl	800994c <prvSampleTimeNow>
 8009880:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d130      	bne.n	80098ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d10a      	bne.n	80098a4 <prvProcessTimerOrBlockTask+0x3c>
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	429a      	cmp	r2, r3
 8009894:	d806      	bhi.n	80098a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009896:	f7ff fa35 	bl	8008d04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800989a:	68f9      	ldr	r1, [r7, #12]
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f7ff ff85 	bl	80097ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80098a2:	e024      	b.n	80098ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d008      	beq.n	80098bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80098aa:	4b13      	ldr	r3, [pc, #76]	; (80098f8 <prvProcessTimerOrBlockTask+0x90>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d101      	bne.n	80098b8 <prvProcessTimerOrBlockTask+0x50>
 80098b4:	2301      	movs	r3, #1
 80098b6:	e000      	b.n	80098ba <prvProcessTimerOrBlockTask+0x52>
 80098b8:	2300      	movs	r3, #0
 80098ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80098bc:	4b0f      	ldr	r3, [pc, #60]	; (80098fc <prvProcessTimerOrBlockTask+0x94>)
 80098be:	6818      	ldr	r0, [r3, #0]
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	1ad3      	subs	r3, r2, r3
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	4619      	mov	r1, r3
 80098ca:	f7fe ff7d 	bl	80087c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80098ce:	f7ff fa19 	bl	8008d04 <xTaskResumeAll>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10a      	bne.n	80098ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80098d8:	4b09      	ldr	r3, [pc, #36]	; (8009900 <prvProcessTimerOrBlockTask+0x98>)
 80098da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	f3bf 8f6f 	isb	sy
}
 80098e8:	e001      	b.n	80098ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80098ea:	f7ff fa0b 	bl	8008d04 <xTaskResumeAll>
}
 80098ee:	bf00      	nop
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	24000d48 	.word	0x24000d48
 80098fc:	24000d4c 	.word	0x24000d4c
 8009900:	e000ed04 	.word	0xe000ed04

08009904 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009904:	b480      	push	{r7}
 8009906:	b085      	sub	sp, #20
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800990c:	4b0e      	ldr	r3, [pc, #56]	; (8009948 <prvGetNextExpireTime+0x44>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d101      	bne.n	800991a <prvGetNextExpireTime+0x16>
 8009916:	2201      	movs	r2, #1
 8009918:	e000      	b.n	800991c <prvGetNextExpireTime+0x18>
 800991a:	2200      	movs	r2, #0
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d105      	bne.n	8009934 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009928:	4b07      	ldr	r3, [pc, #28]	; (8009948 <prvGetNextExpireTime+0x44>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	60fb      	str	r3, [r7, #12]
 8009932:	e001      	b.n	8009938 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009934:	2300      	movs	r3, #0
 8009936:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009938:	68fb      	ldr	r3, [r7, #12]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	24000d44 	.word	0x24000d44

0800994c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009954:	f7ff fa74 	bl	8008e40 <xTaskGetTickCount>
 8009958:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800995a:	4b0b      	ldr	r3, [pc, #44]	; (8009988 <prvSampleTimeNow+0x3c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	429a      	cmp	r2, r3
 8009962:	d205      	bcs.n	8009970 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009964:	f000 f936 	bl	8009bd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	e002      	b.n	8009976 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009976:	4a04      	ldr	r2, [pc, #16]	; (8009988 <prvSampleTimeNow+0x3c>)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800997c:	68fb      	ldr	r3, [r7, #12]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	24000d54 	.word	0x24000d54

0800998c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
 8009998:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800999a:	2300      	movs	r3, #0
 800999c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d812      	bhi.n	80099d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	1ad2      	subs	r2, r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d302      	bcc.n	80099c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80099c0:	2301      	movs	r3, #1
 80099c2:	617b      	str	r3, [r7, #20]
 80099c4:	e01b      	b.n	80099fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80099c6:	4b10      	ldr	r3, [pc, #64]	; (8009a08 <prvInsertTimerInActiveList+0x7c>)
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	3304      	adds	r3, #4
 80099ce:	4619      	mov	r1, r3
 80099d0:	4610      	mov	r0, r2
 80099d2:	f7fe f924 	bl	8007c1e <vListInsert>
 80099d6:	e012      	b.n	80099fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d206      	bcs.n	80099ee <prvInsertTimerInActiveList+0x62>
 80099e0:	68ba      	ldr	r2, [r7, #8]
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d302      	bcc.n	80099ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80099e8:	2301      	movs	r3, #1
 80099ea:	617b      	str	r3, [r7, #20]
 80099ec:	e007      	b.n	80099fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80099ee:	4b07      	ldr	r3, [pc, #28]	; (8009a0c <prvInsertTimerInActiveList+0x80>)
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	3304      	adds	r3, #4
 80099f6:	4619      	mov	r1, r3
 80099f8:	4610      	mov	r0, r2
 80099fa:	f7fe f910 	bl	8007c1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80099fe:	697b      	ldr	r3, [r7, #20]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3718      	adds	r7, #24
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	24000d48 	.word	0x24000d48
 8009a0c:	24000d44 	.word	0x24000d44

08009a10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b08e      	sub	sp, #56	; 0x38
 8009a14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a16:	e0ca      	b.n	8009bae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	da18      	bge.n	8009a50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009a1e:	1d3b      	adds	r3, r7, #4
 8009a20:	3304      	adds	r3, #4
 8009a22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10a      	bne.n	8009a40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2e:	f383 8811 	msr	BASEPRI, r3
 8009a32:	f3bf 8f6f 	isb	sy
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	61fb      	str	r3, [r7, #28]
}
 8009a3c:	bf00      	nop
 8009a3e:	e7fe      	b.n	8009a3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a46:	6850      	ldr	r0, [r2, #4]
 8009a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a4a:	6892      	ldr	r2, [r2, #8]
 8009a4c:	4611      	mov	r1, r2
 8009a4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	f2c0 80aa 	blt.w	8009bac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d004      	beq.n	8009a6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	3304      	adds	r3, #4
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7fe f911 	bl	8007c90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a6e:	463b      	mov	r3, r7
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7ff ff6b 	bl	800994c <prvSampleTimeNow>
 8009a76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b09      	cmp	r3, #9
 8009a7c:	f200 8097 	bhi.w	8009bae <prvProcessReceivedCommands+0x19e>
 8009a80:	a201      	add	r2, pc, #4	; (adr r2, 8009a88 <prvProcessReceivedCommands+0x78>)
 8009a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a86:	bf00      	nop
 8009a88:	08009ab1 	.word	0x08009ab1
 8009a8c:	08009ab1 	.word	0x08009ab1
 8009a90:	08009ab1 	.word	0x08009ab1
 8009a94:	08009b25 	.word	0x08009b25
 8009a98:	08009b39 	.word	0x08009b39
 8009a9c:	08009b83 	.word	0x08009b83
 8009aa0:	08009ab1 	.word	0x08009ab1
 8009aa4:	08009ab1 	.word	0x08009ab1
 8009aa8:	08009b25 	.word	0x08009b25
 8009aac:	08009b39 	.word	0x08009b39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ab6:	f043 0301 	orr.w	r3, r3, #1
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ac2:	68ba      	ldr	r2, [r7, #8]
 8009ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	18d1      	adds	r1, r2, r3
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ad0:	f7ff ff5c 	bl	800998c <prvInsertTimerInActiveList>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d069      	beq.n	8009bae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009adc:	6a1b      	ldr	r3, [r3, #32]
 8009ade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ae0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ae8:	f003 0304 	and.w	r3, r3, #4
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d05e      	beq.n	8009bae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af4:	699b      	ldr	r3, [r3, #24]
 8009af6:	441a      	add	r2, r3
 8009af8:	2300      	movs	r3, #0
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	2300      	movs	r3, #0
 8009afe:	2100      	movs	r1, #0
 8009b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b02:	f7ff fe05 	bl	8009710 <xTimerGenericCommand>
 8009b06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009b08:	6a3b      	ldr	r3, [r7, #32]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d14f      	bne.n	8009bae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	61bb      	str	r3, [r7, #24]
}
 8009b20:	bf00      	nop
 8009b22:	e7fe      	b.n	8009b22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b2a:	f023 0301 	bic.w	r3, r3, #1
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009b36:	e03a      	b.n	8009bae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b3e:	f043 0301 	orr.w	r3, r3, #1
 8009b42:	b2da      	uxtb	r2, r3
 8009b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10a      	bne.n	8009b6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5c:	f383 8811 	msr	BASEPRI, r3
 8009b60:	f3bf 8f6f 	isb	sy
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	617b      	str	r3, [r7, #20]
}
 8009b6a:	bf00      	nop
 8009b6c:	e7fe      	b.n	8009b6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b70:	699a      	ldr	r2, [r3, #24]
 8009b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b74:	18d1      	adds	r1, r2, r3
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b7c:	f7ff ff06 	bl	800998c <prvInsertTimerInActiveList>
					break;
 8009b80:	e015      	b.n	8009bae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b88:	f003 0302 	and.w	r3, r3, #2
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d103      	bne.n	8009b98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b92:	f000 fbdd 	bl	800a350 <vPortFree>
 8009b96:	e00a      	b.n	8009bae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b9e:	f023 0301 	bic.w	r3, r3, #1
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009baa:	e000      	b.n	8009bae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009bac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bae:	4b08      	ldr	r3, [pc, #32]	; (8009bd0 <prvProcessReceivedCommands+0x1c0>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	1d39      	adds	r1, r7, #4
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fe fb6c 	bl	8008294 <xQueueReceive>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f47f af2a 	bne.w	8009a18 <prvProcessReceivedCommands+0x8>
	}
}
 8009bc4:	bf00      	nop
 8009bc6:	bf00      	nop
 8009bc8:	3730      	adds	r7, #48	; 0x30
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	24000d4c 	.word	0x24000d4c

08009bd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b088      	sub	sp, #32
 8009bd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bda:	e048      	b.n	8009c6e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bdc:	4b2d      	ldr	r3, [pc, #180]	; (8009c94 <prvSwitchTimerLists+0xc0>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009be6:	4b2b      	ldr	r3, [pc, #172]	; (8009c94 <prvSwitchTimerLists+0xc0>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7fe f84b 	bl	8007c90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6a1b      	ldr	r3, [r3, #32]
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c08:	f003 0304 	and.w	r3, r3, #4
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d02e      	beq.n	8009c6e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	4413      	add	r3, r2
 8009c18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d90e      	bls.n	8009c40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	68ba      	ldr	r2, [r7, #8]
 8009c26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c2e:	4b19      	ldr	r3, [pc, #100]	; (8009c94 <prvSwitchTimerLists+0xc0>)
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	3304      	adds	r3, #4
 8009c36:	4619      	mov	r1, r3
 8009c38:	4610      	mov	r0, r2
 8009c3a:	f7fd fff0 	bl	8007c1e <vListInsert>
 8009c3e:	e016      	b.n	8009c6e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c40:	2300      	movs	r3, #0
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	2300      	movs	r3, #0
 8009c46:	693a      	ldr	r2, [r7, #16]
 8009c48:	2100      	movs	r1, #0
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f7ff fd60 	bl	8009710 <xTimerGenericCommand>
 8009c50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10a      	bne.n	8009c6e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5c:	f383 8811 	msr	BASEPRI, r3
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	603b      	str	r3, [r7, #0]
}
 8009c6a:	bf00      	nop
 8009c6c:	e7fe      	b.n	8009c6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c6e:	4b09      	ldr	r3, [pc, #36]	; (8009c94 <prvSwitchTimerLists+0xc0>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1b1      	bne.n	8009bdc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009c78:	4b06      	ldr	r3, [pc, #24]	; (8009c94 <prvSwitchTimerLists+0xc0>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009c7e:	4b06      	ldr	r3, [pc, #24]	; (8009c98 <prvSwitchTimerLists+0xc4>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a04      	ldr	r2, [pc, #16]	; (8009c94 <prvSwitchTimerLists+0xc0>)
 8009c84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009c86:	4a04      	ldr	r2, [pc, #16]	; (8009c98 <prvSwitchTimerLists+0xc4>)
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	6013      	str	r3, [r2, #0]
}
 8009c8c:	bf00      	nop
 8009c8e:	3718      	adds	r7, #24
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	24000d44 	.word	0x24000d44
 8009c98:	24000d48 	.word	0x24000d48

08009c9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009ca2:	f000 f967 	bl	8009f74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009ca6:	4b15      	ldr	r3, [pc, #84]	; (8009cfc <prvCheckForValidListAndQueue+0x60>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d120      	bne.n	8009cf0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009cae:	4814      	ldr	r0, [pc, #80]	; (8009d00 <prvCheckForValidListAndQueue+0x64>)
 8009cb0:	f7fd ff64 	bl	8007b7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009cb4:	4813      	ldr	r0, [pc, #76]	; (8009d04 <prvCheckForValidListAndQueue+0x68>)
 8009cb6:	f7fd ff61 	bl	8007b7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009cba:	4b13      	ldr	r3, [pc, #76]	; (8009d08 <prvCheckForValidListAndQueue+0x6c>)
 8009cbc:	4a10      	ldr	r2, [pc, #64]	; (8009d00 <prvCheckForValidListAndQueue+0x64>)
 8009cbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009cc0:	4b12      	ldr	r3, [pc, #72]	; (8009d0c <prvCheckForValidListAndQueue+0x70>)
 8009cc2:	4a10      	ldr	r2, [pc, #64]	; (8009d04 <prvCheckForValidListAndQueue+0x68>)
 8009cc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	4b11      	ldr	r3, [pc, #68]	; (8009d10 <prvCheckForValidListAndQueue+0x74>)
 8009ccc:	4a11      	ldr	r2, [pc, #68]	; (8009d14 <prvCheckForValidListAndQueue+0x78>)
 8009cce:	2110      	movs	r1, #16
 8009cd0:	200a      	movs	r0, #10
 8009cd2:	f7fe f86f 	bl	8007db4 <xQueueGenericCreateStatic>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	4a08      	ldr	r2, [pc, #32]	; (8009cfc <prvCheckForValidListAndQueue+0x60>)
 8009cda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009cdc:	4b07      	ldr	r3, [pc, #28]	; (8009cfc <prvCheckForValidListAndQueue+0x60>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d005      	beq.n	8009cf0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ce4:	4b05      	ldr	r3, [pc, #20]	; (8009cfc <prvCheckForValidListAndQueue+0x60>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	490b      	ldr	r1, [pc, #44]	; (8009d18 <prvCheckForValidListAndQueue+0x7c>)
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fe fd42 	bl	8008774 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009cf0:	f000 f970 	bl	8009fd4 <vPortExitCritical>
}
 8009cf4:	bf00      	nop
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	24000d4c 	.word	0x24000d4c
 8009d00:	24000d1c 	.word	0x24000d1c
 8009d04:	24000d30 	.word	0x24000d30
 8009d08:	24000d44 	.word	0x24000d44
 8009d0c:	24000d48 	.word	0x24000d48
 8009d10:	24000df8 	.word	0x24000df8
 8009d14:	24000d58 	.word	0x24000d58
 8009d18:	0800a944 	.word	0x0800a944

08009d1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	3b04      	subs	r3, #4
 8009d2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	3b04      	subs	r3, #4
 8009d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	f023 0201 	bic.w	r2, r3, #1
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	3b04      	subs	r3, #4
 8009d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d4c:	4a0c      	ldr	r2, [pc, #48]	; (8009d80 <pxPortInitialiseStack+0x64>)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	3b14      	subs	r3, #20
 8009d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	3b04      	subs	r3, #4
 8009d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f06f 0202 	mvn.w	r2, #2
 8009d6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	3b20      	subs	r3, #32
 8009d70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d72:	68fb      	ldr	r3, [r7, #12]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3714      	adds	r7, #20
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr
 8009d80:	08009d85 	.word	0x08009d85

08009d84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d8e:	4b12      	ldr	r3, [pc, #72]	; (8009dd8 <prvTaskExitError+0x54>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d96:	d00a      	beq.n	8009dae <prvTaskExitError+0x2a>
	__asm volatile
 8009d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9c:	f383 8811 	msr	BASEPRI, r3
 8009da0:	f3bf 8f6f 	isb	sy
 8009da4:	f3bf 8f4f 	dsb	sy
 8009da8:	60fb      	str	r3, [r7, #12]
}
 8009daa:	bf00      	nop
 8009dac:	e7fe      	b.n	8009dac <prvTaskExitError+0x28>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	60bb      	str	r3, [r7, #8]
}
 8009dc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009dc2:	bf00      	nop
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d0fc      	beq.n	8009dc4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009dca:	bf00      	nop
 8009dcc:	bf00      	nop
 8009dce:	3714      	adds	r7, #20
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr
 8009dd8:	24000010 	.word	0x24000010
 8009ddc:	00000000 	.word	0x00000000

08009de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009de0:	4b07      	ldr	r3, [pc, #28]	; (8009e00 <pxCurrentTCBConst2>)
 8009de2:	6819      	ldr	r1, [r3, #0]
 8009de4:	6808      	ldr	r0, [r1, #0]
 8009de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dea:	f380 8809 	msr	PSP, r0
 8009dee:	f3bf 8f6f 	isb	sy
 8009df2:	f04f 0000 	mov.w	r0, #0
 8009df6:	f380 8811 	msr	BASEPRI, r0
 8009dfa:	4770      	bx	lr
 8009dfc:	f3af 8000 	nop.w

08009e00 <pxCurrentTCBConst2>:
 8009e00:	2400081c 	.word	0x2400081c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e04:	bf00      	nop
 8009e06:	bf00      	nop

08009e08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e08:	4808      	ldr	r0, [pc, #32]	; (8009e2c <prvPortStartFirstTask+0x24>)
 8009e0a:	6800      	ldr	r0, [r0, #0]
 8009e0c:	6800      	ldr	r0, [r0, #0]
 8009e0e:	f380 8808 	msr	MSP, r0
 8009e12:	f04f 0000 	mov.w	r0, #0
 8009e16:	f380 8814 	msr	CONTROL, r0
 8009e1a:	b662      	cpsie	i
 8009e1c:	b661      	cpsie	f
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	df00      	svc	0
 8009e28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e2a:	bf00      	nop
 8009e2c:	e000ed08 	.word	0xe000ed08

08009e30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e36:	4b46      	ldr	r3, [pc, #280]	; (8009f50 <xPortStartScheduler+0x120>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a46      	ldr	r2, [pc, #280]	; (8009f54 <xPortStartScheduler+0x124>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d10a      	bne.n	8009e56 <xPortStartScheduler+0x26>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	613b      	str	r3, [r7, #16]
}
 8009e52:	bf00      	nop
 8009e54:	e7fe      	b.n	8009e54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e56:	4b3e      	ldr	r3, [pc, #248]	; (8009f50 <xPortStartScheduler+0x120>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a3f      	ldr	r2, [pc, #252]	; (8009f58 <xPortStartScheduler+0x128>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d10a      	bne.n	8009e76 <xPortStartScheduler+0x46>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	60fb      	str	r3, [r7, #12]
}
 8009e72:	bf00      	nop
 8009e74:	e7fe      	b.n	8009e74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e76:	4b39      	ldr	r3, [pc, #228]	; (8009f5c <xPortStartScheduler+0x12c>)
 8009e78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	22ff      	movs	r2, #255	; 0xff
 8009e86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e90:	78fb      	ldrb	r3, [r7, #3]
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	4b31      	ldr	r3, [pc, #196]	; (8009f60 <xPortStartScheduler+0x130>)
 8009e9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e9e:	4b31      	ldr	r3, [pc, #196]	; (8009f64 <xPortStartScheduler+0x134>)
 8009ea0:	2207      	movs	r2, #7
 8009ea2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ea4:	e009      	b.n	8009eba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ea6:	4b2f      	ldr	r3, [pc, #188]	; (8009f64 <xPortStartScheduler+0x134>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	4a2d      	ldr	r2, [pc, #180]	; (8009f64 <xPortStartScheduler+0x134>)
 8009eae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009eb0:	78fb      	ldrb	r3, [r7, #3]
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	005b      	lsls	r3, r3, #1
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009eba:	78fb      	ldrb	r3, [r7, #3]
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ec2:	2b80      	cmp	r3, #128	; 0x80
 8009ec4:	d0ef      	beq.n	8009ea6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ec6:	4b27      	ldr	r3, [pc, #156]	; (8009f64 <xPortStartScheduler+0x134>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f1c3 0307 	rsb	r3, r3, #7
 8009ece:	2b04      	cmp	r3, #4
 8009ed0:	d00a      	beq.n	8009ee8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	60bb      	str	r3, [r7, #8]
}
 8009ee4:	bf00      	nop
 8009ee6:	e7fe      	b.n	8009ee6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ee8:	4b1e      	ldr	r3, [pc, #120]	; (8009f64 <xPortStartScheduler+0x134>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	021b      	lsls	r3, r3, #8
 8009eee:	4a1d      	ldr	r2, [pc, #116]	; (8009f64 <xPortStartScheduler+0x134>)
 8009ef0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ef2:	4b1c      	ldr	r3, [pc, #112]	; (8009f64 <xPortStartScheduler+0x134>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009efa:	4a1a      	ldr	r2, [pc, #104]	; (8009f64 <xPortStartScheduler+0x134>)
 8009efc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	b2da      	uxtb	r2, r3
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f06:	4b18      	ldr	r3, [pc, #96]	; (8009f68 <xPortStartScheduler+0x138>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a17      	ldr	r2, [pc, #92]	; (8009f68 <xPortStartScheduler+0x138>)
 8009f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009f10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f12:	4b15      	ldr	r3, [pc, #84]	; (8009f68 <xPortStartScheduler+0x138>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a14      	ldr	r2, [pc, #80]	; (8009f68 <xPortStartScheduler+0x138>)
 8009f18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009f1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f1e:	f000 f8dd 	bl	800a0dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f22:	4b12      	ldr	r3, [pc, #72]	; (8009f6c <xPortStartScheduler+0x13c>)
 8009f24:	2200      	movs	r2, #0
 8009f26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f28:	f000 f8fc 	bl	800a124 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f2c:	4b10      	ldr	r3, [pc, #64]	; (8009f70 <xPortStartScheduler+0x140>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a0f      	ldr	r2, [pc, #60]	; (8009f70 <xPortStartScheduler+0x140>)
 8009f32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009f36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f38:	f7ff ff66 	bl	8009e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f3c:	f7ff f84a 	bl	8008fd4 <vTaskSwitchContext>
	prvTaskExitError();
 8009f40:	f7ff ff20 	bl	8009d84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3718      	adds	r7, #24
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	e000ed00 	.word	0xe000ed00
 8009f54:	410fc271 	.word	0x410fc271
 8009f58:	410fc270 	.word	0x410fc270
 8009f5c:	e000e400 	.word	0xe000e400
 8009f60:	24000e48 	.word	0x24000e48
 8009f64:	24000e4c 	.word	0x24000e4c
 8009f68:	e000ed20 	.word	0xe000ed20
 8009f6c:	24000010 	.word	0x24000010
 8009f70:	e000ef34 	.word	0xe000ef34

08009f74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	607b      	str	r3, [r7, #4]
}
 8009f8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f8e:	4b0f      	ldr	r3, [pc, #60]	; (8009fcc <vPortEnterCritical+0x58>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3301      	adds	r3, #1
 8009f94:	4a0d      	ldr	r2, [pc, #52]	; (8009fcc <vPortEnterCritical+0x58>)
 8009f96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f98:	4b0c      	ldr	r3, [pc, #48]	; (8009fcc <vPortEnterCritical+0x58>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d10f      	bne.n	8009fc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009fa0:	4b0b      	ldr	r3, [pc, #44]	; (8009fd0 <vPortEnterCritical+0x5c>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00a      	beq.n	8009fc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fae:	f383 8811 	msr	BASEPRI, r3
 8009fb2:	f3bf 8f6f 	isb	sy
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	603b      	str	r3, [r7, #0]
}
 8009fbc:	bf00      	nop
 8009fbe:	e7fe      	b.n	8009fbe <vPortEnterCritical+0x4a>
	}
}
 8009fc0:	bf00      	nop
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr
 8009fcc:	24000010 	.word	0x24000010
 8009fd0:	e000ed04 	.word	0xe000ed04

08009fd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009fda:	4b12      	ldr	r3, [pc, #72]	; (800a024 <vPortExitCritical+0x50>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10a      	bne.n	8009ff8 <vPortExitCritical+0x24>
	__asm volatile
 8009fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	607b      	str	r3, [r7, #4]
}
 8009ff4:	bf00      	nop
 8009ff6:	e7fe      	b.n	8009ff6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ff8:	4b0a      	ldr	r3, [pc, #40]	; (800a024 <vPortExitCritical+0x50>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	4a09      	ldr	r2, [pc, #36]	; (800a024 <vPortExitCritical+0x50>)
 800a000:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a002:	4b08      	ldr	r3, [pc, #32]	; (800a024 <vPortExitCritical+0x50>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d105      	bne.n	800a016 <vPortExitCritical+0x42>
 800a00a:	2300      	movs	r3, #0
 800a00c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	f383 8811 	msr	BASEPRI, r3
}
 800a014:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a016:	bf00      	nop
 800a018:	370c      	adds	r7, #12
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	24000010 	.word	0x24000010
	...

0800a030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a030:	f3ef 8009 	mrs	r0, PSP
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	4b15      	ldr	r3, [pc, #84]	; (800a090 <pxCurrentTCBConst>)
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	f01e 0f10 	tst.w	lr, #16
 800a040:	bf08      	it	eq
 800a042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04a:	6010      	str	r0, [r2, #0]
 800a04c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a050:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a054:	f380 8811 	msr	BASEPRI, r0
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f7fe ffb8 	bl	8008fd4 <vTaskSwitchContext>
 800a064:	f04f 0000 	mov.w	r0, #0
 800a068:	f380 8811 	msr	BASEPRI, r0
 800a06c:	bc09      	pop	{r0, r3}
 800a06e:	6819      	ldr	r1, [r3, #0]
 800a070:	6808      	ldr	r0, [r1, #0]
 800a072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a076:	f01e 0f10 	tst.w	lr, #16
 800a07a:	bf08      	it	eq
 800a07c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a080:	f380 8809 	msr	PSP, r0
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	f3af 8000 	nop.w

0800a090 <pxCurrentTCBConst>:
 800a090:	2400081c 	.word	0x2400081c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a094:	bf00      	nop
 800a096:	bf00      	nop

0800a098 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
	__asm volatile
 800a09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a2:	f383 8811 	msr	BASEPRI, r3
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	607b      	str	r3, [r7, #4]
}
 800a0b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a0b2:	f7fe fed5 	bl	8008e60 <xTaskIncrementTick>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d003      	beq.n	800a0c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a0bc:	4b06      	ldr	r3, [pc, #24]	; (800a0d8 <xPortSysTickHandler+0x40>)
 800a0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0c2:	601a      	str	r2, [r3, #0]
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	f383 8811 	msr	BASEPRI, r3
}
 800a0ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a0d0:	bf00      	nop
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	e000ed04 	.word	0xe000ed04

0800a0dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a0dc:	b480      	push	{r7}
 800a0de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a0e0:	4b0b      	ldr	r3, [pc, #44]	; (800a110 <vPortSetupTimerInterrupt+0x34>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a0e6:	4b0b      	ldr	r3, [pc, #44]	; (800a114 <vPortSetupTimerInterrupt+0x38>)
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a0ec:	4b0a      	ldr	r3, [pc, #40]	; (800a118 <vPortSetupTimerInterrupt+0x3c>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a0a      	ldr	r2, [pc, #40]	; (800a11c <vPortSetupTimerInterrupt+0x40>)
 800a0f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f6:	099b      	lsrs	r3, r3, #6
 800a0f8:	4a09      	ldr	r2, [pc, #36]	; (800a120 <vPortSetupTimerInterrupt+0x44>)
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a0fe:	4b04      	ldr	r3, [pc, #16]	; (800a110 <vPortSetupTimerInterrupt+0x34>)
 800a100:	2207      	movs	r2, #7
 800a102:	601a      	str	r2, [r3, #0]
}
 800a104:	bf00      	nop
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	e000e010 	.word	0xe000e010
 800a114:	e000e018 	.word	0xe000e018
 800a118:	24000000 	.word	0x24000000
 800a11c:	10624dd3 	.word	0x10624dd3
 800a120:	e000e014 	.word	0xe000e014

0800a124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a134 <vPortEnableVFP+0x10>
 800a128:	6801      	ldr	r1, [r0, #0]
 800a12a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a12e:	6001      	str	r1, [r0, #0]
 800a130:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a132:	bf00      	nop
 800a134:	e000ed88 	.word	0xe000ed88

0800a138 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a13e:	f3ef 8305 	mrs	r3, IPSR
 800a142:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2b0f      	cmp	r3, #15
 800a148:	d914      	bls.n	800a174 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a14a:	4a17      	ldr	r2, [pc, #92]	; (800a1a8 <vPortValidateInterruptPriority+0x70>)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	4413      	add	r3, r2
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a154:	4b15      	ldr	r3, [pc, #84]	; (800a1ac <vPortValidateInterruptPriority+0x74>)
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	7afa      	ldrb	r2, [r7, #11]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d20a      	bcs.n	800a174 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	607b      	str	r3, [r7, #4]
}
 800a170:	bf00      	nop
 800a172:	e7fe      	b.n	800a172 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a174:	4b0e      	ldr	r3, [pc, #56]	; (800a1b0 <vPortValidateInterruptPriority+0x78>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a17c:	4b0d      	ldr	r3, [pc, #52]	; (800a1b4 <vPortValidateInterruptPriority+0x7c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	429a      	cmp	r2, r3
 800a182:	d90a      	bls.n	800a19a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a188:	f383 8811 	msr	BASEPRI, r3
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	f3bf 8f4f 	dsb	sy
 800a194:	603b      	str	r3, [r7, #0]
}
 800a196:	bf00      	nop
 800a198:	e7fe      	b.n	800a198 <vPortValidateInterruptPriority+0x60>
	}
 800a19a:	bf00      	nop
 800a19c:	3714      	adds	r7, #20
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	e000e3f0 	.word	0xe000e3f0
 800a1ac:	24000e48 	.word	0x24000e48
 800a1b0:	e000ed0c 	.word	0xe000ed0c
 800a1b4:	24000e4c 	.word	0x24000e4c

0800a1b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b08a      	sub	sp, #40	; 0x28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a1c4:	f7fe fd90 	bl	8008ce8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a1c8:	4b5b      	ldr	r3, [pc, #364]	; (800a338 <pvPortMalloc+0x180>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d101      	bne.n	800a1d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a1d0:	f000 f920 	bl	800a414 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a1d4:	4b59      	ldr	r3, [pc, #356]	; (800a33c <pvPortMalloc+0x184>)
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4013      	ands	r3, r2
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f040 8093 	bne.w	800a308 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d01d      	beq.n	800a224 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a1e8:	2208      	movs	r2, #8
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f003 0307 	and.w	r3, r3, #7
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d014      	beq.n	800a224 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f023 0307 	bic.w	r3, r3, #7
 800a200:	3308      	adds	r3, #8
 800a202:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f003 0307 	and.w	r3, r3, #7
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00a      	beq.n	800a224 <pvPortMalloc+0x6c>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	617b      	str	r3, [r7, #20]
}
 800a220:	bf00      	nop
 800a222:	e7fe      	b.n	800a222 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d06e      	beq.n	800a308 <pvPortMalloc+0x150>
 800a22a:	4b45      	ldr	r3, [pc, #276]	; (800a340 <pvPortMalloc+0x188>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	429a      	cmp	r2, r3
 800a232:	d869      	bhi.n	800a308 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a234:	4b43      	ldr	r3, [pc, #268]	; (800a344 <pvPortMalloc+0x18c>)
 800a236:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a238:	4b42      	ldr	r3, [pc, #264]	; (800a344 <pvPortMalloc+0x18c>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a23e:	e004      	b.n	800a24a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a242:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	429a      	cmp	r2, r3
 800a252:	d903      	bls.n	800a25c <pvPortMalloc+0xa4>
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1f1      	bne.n	800a240 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a25c:	4b36      	ldr	r3, [pc, #216]	; (800a338 <pvPortMalloc+0x180>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a262:	429a      	cmp	r2, r3
 800a264:	d050      	beq.n	800a308 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2208      	movs	r2, #8
 800a26c:	4413      	add	r3, r2
 800a26e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	6a3b      	ldr	r3, [r7, #32]
 800a276:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	1ad2      	subs	r2, r2, r3
 800a280:	2308      	movs	r3, #8
 800a282:	005b      	lsls	r3, r3, #1
 800a284:	429a      	cmp	r2, r3
 800a286:	d91f      	bls.n	800a2c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4413      	add	r3, r2
 800a28e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	f003 0307 	and.w	r3, r3, #7
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00a      	beq.n	800a2b0 <pvPortMalloc+0xf8>
	__asm volatile
 800a29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29e:	f383 8811 	msr	BASEPRI, r3
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	613b      	str	r3, [r7, #16]
}
 800a2ac:	bf00      	nop
 800a2ae:	e7fe      	b.n	800a2ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b2:	685a      	ldr	r2, [r3, #4]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	1ad2      	subs	r2, r2, r3
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a2c2:	69b8      	ldr	r0, [r7, #24]
 800a2c4:	f000 f908 	bl	800a4d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a2c8:	4b1d      	ldr	r3, [pc, #116]	; (800a340 <pvPortMalloc+0x188>)
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	1ad3      	subs	r3, r2, r3
 800a2d2:	4a1b      	ldr	r2, [pc, #108]	; (800a340 <pvPortMalloc+0x188>)
 800a2d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a2d6:	4b1a      	ldr	r3, [pc, #104]	; (800a340 <pvPortMalloc+0x188>)
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	4b1b      	ldr	r3, [pc, #108]	; (800a348 <pvPortMalloc+0x190>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d203      	bcs.n	800a2ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a2e2:	4b17      	ldr	r3, [pc, #92]	; (800a340 <pvPortMalloc+0x188>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a18      	ldr	r2, [pc, #96]	; (800a348 <pvPortMalloc+0x190>)
 800a2e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	4b13      	ldr	r3, [pc, #76]	; (800a33c <pvPortMalloc+0x184>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	431a      	orrs	r2, r3
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a2fe:	4b13      	ldr	r3, [pc, #76]	; (800a34c <pvPortMalloc+0x194>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	3301      	adds	r3, #1
 800a304:	4a11      	ldr	r2, [pc, #68]	; (800a34c <pvPortMalloc+0x194>)
 800a306:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a308:	f7fe fcfc 	bl	8008d04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	f003 0307 	and.w	r3, r3, #7
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00a      	beq.n	800a32c <pvPortMalloc+0x174>
	__asm volatile
 800a316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31a:	f383 8811 	msr	BASEPRI, r3
 800a31e:	f3bf 8f6f 	isb	sy
 800a322:	f3bf 8f4f 	dsb	sy
 800a326:	60fb      	str	r3, [r7, #12]
}
 800a328:	bf00      	nop
 800a32a:	e7fe      	b.n	800a32a <pvPortMalloc+0x172>
	return pvReturn;
 800a32c:	69fb      	ldr	r3, [r7, #28]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3728      	adds	r7, #40	; 0x28
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	24004a58 	.word	0x24004a58
 800a33c:	24004a6c 	.word	0x24004a6c
 800a340:	24004a5c 	.word	0x24004a5c
 800a344:	24004a50 	.word	0x24004a50
 800a348:	24004a60 	.word	0x24004a60
 800a34c:	24004a64 	.word	0x24004a64

0800a350 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d04d      	beq.n	800a3fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a362:	2308      	movs	r3, #8
 800a364:	425b      	negs	r3, r3
 800a366:	697a      	ldr	r2, [r7, #20]
 800a368:	4413      	add	r3, r2
 800a36a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	685a      	ldr	r2, [r3, #4]
 800a374:	4b24      	ldr	r3, [pc, #144]	; (800a408 <vPortFree+0xb8>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4013      	ands	r3, r2
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d10a      	bne.n	800a394 <vPortFree+0x44>
	__asm volatile
 800a37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a382:	f383 8811 	msr	BASEPRI, r3
 800a386:	f3bf 8f6f 	isb	sy
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	60fb      	str	r3, [r7, #12]
}
 800a390:	bf00      	nop
 800a392:	e7fe      	b.n	800a392 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00a      	beq.n	800a3b2 <vPortFree+0x62>
	__asm volatile
 800a39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	60bb      	str	r3, [r7, #8]
}
 800a3ae:	bf00      	nop
 800a3b0:	e7fe      	b.n	800a3b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	685a      	ldr	r2, [r3, #4]
 800a3b6:	4b14      	ldr	r3, [pc, #80]	; (800a408 <vPortFree+0xb8>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d01e      	beq.n	800a3fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d11a      	bne.n	800a3fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	685a      	ldr	r2, [r3, #4]
 800a3cc:	4b0e      	ldr	r3, [pc, #56]	; (800a408 <vPortFree+0xb8>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	43db      	mvns	r3, r3
 800a3d2:	401a      	ands	r2, r3
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a3d8:	f7fe fc86 	bl	8008ce8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	685a      	ldr	r2, [r3, #4]
 800a3e0:	4b0a      	ldr	r3, [pc, #40]	; (800a40c <vPortFree+0xbc>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	4a09      	ldr	r2, [pc, #36]	; (800a40c <vPortFree+0xbc>)
 800a3e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a3ea:	6938      	ldr	r0, [r7, #16]
 800a3ec:	f000 f874 	bl	800a4d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a3f0:	4b07      	ldr	r3, [pc, #28]	; (800a410 <vPortFree+0xc0>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	4a06      	ldr	r2, [pc, #24]	; (800a410 <vPortFree+0xc0>)
 800a3f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a3fa:	f7fe fc83 	bl	8008d04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a3fe:	bf00      	nop
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	24004a6c 	.word	0x24004a6c
 800a40c:	24004a5c 	.word	0x24004a5c
 800a410:	24004a68 	.word	0x24004a68

0800a414 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a41a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a41e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a420:	4b27      	ldr	r3, [pc, #156]	; (800a4c0 <prvHeapInit+0xac>)
 800a422:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f003 0307 	and.w	r3, r3, #7
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00c      	beq.n	800a448 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	3307      	adds	r3, #7
 800a432:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f023 0307 	bic.w	r3, r3, #7
 800a43a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	4a1f      	ldr	r2, [pc, #124]	; (800a4c0 <prvHeapInit+0xac>)
 800a444:	4413      	add	r3, r2
 800a446:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a44c:	4a1d      	ldr	r2, [pc, #116]	; (800a4c4 <prvHeapInit+0xb0>)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a452:	4b1c      	ldr	r3, [pc, #112]	; (800a4c4 <prvHeapInit+0xb0>)
 800a454:	2200      	movs	r2, #0
 800a456:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	4413      	add	r3, r2
 800a45e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a460:	2208      	movs	r2, #8
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	1a9b      	subs	r3, r3, r2
 800a466:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f023 0307 	bic.w	r3, r3, #7
 800a46e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	4a15      	ldr	r2, [pc, #84]	; (800a4c8 <prvHeapInit+0xb4>)
 800a474:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a476:	4b14      	ldr	r3, [pc, #80]	; (800a4c8 <prvHeapInit+0xb4>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2200      	movs	r2, #0
 800a47c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a47e:	4b12      	ldr	r3, [pc, #72]	; (800a4c8 <prvHeapInit+0xb4>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2200      	movs	r2, #0
 800a484:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	68fa      	ldr	r2, [r7, #12]
 800a48e:	1ad2      	subs	r2, r2, r3
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a494:	4b0c      	ldr	r3, [pc, #48]	; (800a4c8 <prvHeapInit+0xb4>)
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	4a0a      	ldr	r2, [pc, #40]	; (800a4cc <prvHeapInit+0xb8>)
 800a4a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	4a09      	ldr	r2, [pc, #36]	; (800a4d0 <prvHeapInit+0xbc>)
 800a4aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a4ac:	4b09      	ldr	r3, [pc, #36]	; (800a4d4 <prvHeapInit+0xc0>)
 800a4ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a4b2:	601a      	str	r2, [r3, #0]
}
 800a4b4:	bf00      	nop
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr
 800a4c0:	24000e50 	.word	0x24000e50
 800a4c4:	24004a50 	.word	0x24004a50
 800a4c8:	24004a58 	.word	0x24004a58
 800a4cc:	24004a60 	.word	0x24004a60
 800a4d0:	24004a5c 	.word	0x24004a5c
 800a4d4:	24004a6c 	.word	0x24004a6c

0800a4d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a4e0:	4b28      	ldr	r3, [pc, #160]	; (800a584 <prvInsertBlockIntoFreeList+0xac>)
 800a4e2:	60fb      	str	r3, [r7, #12]
 800a4e4:	e002      	b.n	800a4ec <prvInsertBlockIntoFreeList+0x14>
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	60fb      	str	r3, [r7, #12]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d8f7      	bhi.n	800a4e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	4413      	add	r3, r2
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	429a      	cmp	r2, r3
 800a506:	d108      	bne.n	800a51a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	685a      	ldr	r2, [r3, #4]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	441a      	add	r2, r3
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	68ba      	ldr	r2, [r7, #8]
 800a524:	441a      	add	r2, r3
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d118      	bne.n	800a560 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	4b15      	ldr	r3, [pc, #84]	; (800a588 <prvInsertBlockIntoFreeList+0xb0>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	429a      	cmp	r2, r3
 800a538:	d00d      	beq.n	800a556 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	685a      	ldr	r2, [r3, #4]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	441a      	add	r2, r3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	e008      	b.n	800a568 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a556:	4b0c      	ldr	r3, [pc, #48]	; (800a588 <prvInsertBlockIntoFreeList+0xb0>)
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	601a      	str	r2, [r3, #0]
 800a55e:	e003      	b.n	800a568 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d002      	beq.n	800a576 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a576:	bf00      	nop
 800a578:	3714      	adds	r7, #20
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	24004a50 	.word	0x24004a50
 800a588:	24004a58 	.word	0x24004a58

0800a58c <atoi>:
 800a58c:	220a      	movs	r2, #10
 800a58e:	2100      	movs	r1, #0
 800a590:	f000 b930 	b.w	800a7f4 <strtol>

0800a594 <__errno>:
 800a594:	4b01      	ldr	r3, [pc, #4]	; (800a59c <__errno+0x8>)
 800a596:	6818      	ldr	r0, [r3, #0]
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	24000014 	.word	0x24000014

0800a5a0 <__libc_init_array>:
 800a5a0:	b570      	push	{r4, r5, r6, lr}
 800a5a2:	4d0d      	ldr	r5, [pc, #52]	; (800a5d8 <__libc_init_array+0x38>)
 800a5a4:	4c0d      	ldr	r4, [pc, #52]	; (800a5dc <__libc_init_array+0x3c>)
 800a5a6:	1b64      	subs	r4, r4, r5
 800a5a8:	10a4      	asrs	r4, r4, #2
 800a5aa:	2600      	movs	r6, #0
 800a5ac:	42a6      	cmp	r6, r4
 800a5ae:	d109      	bne.n	800a5c4 <__libc_init_array+0x24>
 800a5b0:	4d0b      	ldr	r5, [pc, #44]	; (800a5e0 <__libc_init_array+0x40>)
 800a5b2:	4c0c      	ldr	r4, [pc, #48]	; (800a5e4 <__libc_init_array+0x44>)
 800a5b4:	f000 f984 	bl	800a8c0 <_init>
 800a5b8:	1b64      	subs	r4, r4, r5
 800a5ba:	10a4      	asrs	r4, r4, #2
 800a5bc:	2600      	movs	r6, #0
 800a5be:	42a6      	cmp	r6, r4
 800a5c0:	d105      	bne.n	800a5ce <__libc_init_array+0x2e>
 800a5c2:	bd70      	pop	{r4, r5, r6, pc}
 800a5c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5c8:	4798      	blx	r3
 800a5ca:	3601      	adds	r6, #1
 800a5cc:	e7ee      	b.n	800a5ac <__libc_init_array+0xc>
 800a5ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5d2:	4798      	blx	r3
 800a5d4:	3601      	adds	r6, #1
 800a5d6:	e7f2      	b.n	800a5be <__libc_init_array+0x1e>
 800a5d8:	0800abc8 	.word	0x0800abc8
 800a5dc:	0800abc8 	.word	0x0800abc8
 800a5e0:	0800abc8 	.word	0x0800abc8
 800a5e4:	0800abcc 	.word	0x0800abcc

0800a5e8 <__retarget_lock_acquire_recursive>:
 800a5e8:	4770      	bx	lr

0800a5ea <__retarget_lock_release_recursive>:
 800a5ea:	4770      	bx	lr

0800a5ec <memcpy>:
 800a5ec:	440a      	add	r2, r1
 800a5ee:	4291      	cmp	r1, r2
 800a5f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a5f4:	d100      	bne.n	800a5f8 <memcpy+0xc>
 800a5f6:	4770      	bx	lr
 800a5f8:	b510      	push	{r4, lr}
 800a5fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a602:	4291      	cmp	r1, r2
 800a604:	d1f9      	bne.n	800a5fa <memcpy+0xe>
 800a606:	bd10      	pop	{r4, pc}

0800a608 <memset>:
 800a608:	4402      	add	r2, r0
 800a60a:	4603      	mov	r3, r0
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d100      	bne.n	800a612 <memset+0xa>
 800a610:	4770      	bx	lr
 800a612:	f803 1b01 	strb.w	r1, [r3], #1
 800a616:	e7f9      	b.n	800a60c <memset+0x4>

0800a618 <cleanup_glue>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	460c      	mov	r4, r1
 800a61c:	6809      	ldr	r1, [r1, #0]
 800a61e:	4605      	mov	r5, r0
 800a620:	b109      	cbz	r1, 800a626 <cleanup_glue+0xe>
 800a622:	f7ff fff9 	bl	800a618 <cleanup_glue>
 800a626:	4621      	mov	r1, r4
 800a628:	4628      	mov	r0, r5
 800a62a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a62e:	f000 b8f7 	b.w	800a820 <_free_r>
	...

0800a634 <_reclaim_reent>:
 800a634:	4b2c      	ldr	r3, [pc, #176]	; (800a6e8 <_reclaim_reent+0xb4>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4283      	cmp	r3, r0
 800a63a:	b570      	push	{r4, r5, r6, lr}
 800a63c:	4604      	mov	r4, r0
 800a63e:	d051      	beq.n	800a6e4 <_reclaim_reent+0xb0>
 800a640:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a642:	b143      	cbz	r3, 800a656 <_reclaim_reent+0x22>
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d14a      	bne.n	800a6e0 <_reclaim_reent+0xac>
 800a64a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a64c:	6819      	ldr	r1, [r3, #0]
 800a64e:	b111      	cbz	r1, 800a656 <_reclaim_reent+0x22>
 800a650:	4620      	mov	r0, r4
 800a652:	f000 f8e5 	bl	800a820 <_free_r>
 800a656:	6961      	ldr	r1, [r4, #20]
 800a658:	b111      	cbz	r1, 800a660 <_reclaim_reent+0x2c>
 800a65a:	4620      	mov	r0, r4
 800a65c:	f000 f8e0 	bl	800a820 <_free_r>
 800a660:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a662:	b111      	cbz	r1, 800a66a <_reclaim_reent+0x36>
 800a664:	4620      	mov	r0, r4
 800a666:	f000 f8db 	bl	800a820 <_free_r>
 800a66a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a66c:	b111      	cbz	r1, 800a674 <_reclaim_reent+0x40>
 800a66e:	4620      	mov	r0, r4
 800a670:	f000 f8d6 	bl	800a820 <_free_r>
 800a674:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a676:	b111      	cbz	r1, 800a67e <_reclaim_reent+0x4a>
 800a678:	4620      	mov	r0, r4
 800a67a:	f000 f8d1 	bl	800a820 <_free_r>
 800a67e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a680:	b111      	cbz	r1, 800a688 <_reclaim_reent+0x54>
 800a682:	4620      	mov	r0, r4
 800a684:	f000 f8cc 	bl	800a820 <_free_r>
 800a688:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a68a:	b111      	cbz	r1, 800a692 <_reclaim_reent+0x5e>
 800a68c:	4620      	mov	r0, r4
 800a68e:	f000 f8c7 	bl	800a820 <_free_r>
 800a692:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a694:	b111      	cbz	r1, 800a69c <_reclaim_reent+0x68>
 800a696:	4620      	mov	r0, r4
 800a698:	f000 f8c2 	bl	800a820 <_free_r>
 800a69c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a69e:	b111      	cbz	r1, 800a6a6 <_reclaim_reent+0x72>
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f000 f8bd 	bl	800a820 <_free_r>
 800a6a6:	69a3      	ldr	r3, [r4, #24]
 800a6a8:	b1e3      	cbz	r3, 800a6e4 <_reclaim_reent+0xb0>
 800a6aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	4798      	blx	r3
 800a6b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a6b2:	b1b9      	cbz	r1, 800a6e4 <_reclaim_reent+0xb0>
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a6ba:	f7ff bfad 	b.w	800a618 <cleanup_glue>
 800a6be:	5949      	ldr	r1, [r1, r5]
 800a6c0:	b941      	cbnz	r1, 800a6d4 <_reclaim_reent+0xa0>
 800a6c2:	3504      	adds	r5, #4
 800a6c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6c6:	2d80      	cmp	r5, #128	; 0x80
 800a6c8:	68d9      	ldr	r1, [r3, #12]
 800a6ca:	d1f8      	bne.n	800a6be <_reclaim_reent+0x8a>
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	f000 f8a7 	bl	800a820 <_free_r>
 800a6d2:	e7ba      	b.n	800a64a <_reclaim_reent+0x16>
 800a6d4:	680e      	ldr	r6, [r1, #0]
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	f000 f8a2 	bl	800a820 <_free_r>
 800a6dc:	4631      	mov	r1, r6
 800a6de:	e7ef      	b.n	800a6c0 <_reclaim_reent+0x8c>
 800a6e0:	2500      	movs	r5, #0
 800a6e2:	e7ef      	b.n	800a6c4 <_reclaim_reent+0x90>
 800a6e4:	bd70      	pop	{r4, r5, r6, pc}
 800a6e6:	bf00      	nop
 800a6e8:	24000014 	.word	0x24000014

0800a6ec <_strtol_l.isra.0>:
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6f2:	d001      	beq.n	800a6f8 <_strtol_l.isra.0+0xc>
 800a6f4:	2b24      	cmp	r3, #36	; 0x24
 800a6f6:	d906      	bls.n	800a706 <_strtol_l.isra.0+0x1a>
 800a6f8:	f7ff ff4c 	bl	800a594 <__errno>
 800a6fc:	2316      	movs	r3, #22
 800a6fe:	6003      	str	r3, [r0, #0]
 800a700:	2000      	movs	r0, #0
 800a702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a706:	4f3a      	ldr	r7, [pc, #232]	; (800a7f0 <_strtol_l.isra.0+0x104>)
 800a708:	468e      	mov	lr, r1
 800a70a:	4676      	mov	r6, lr
 800a70c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a710:	5de5      	ldrb	r5, [r4, r7]
 800a712:	f015 0508 	ands.w	r5, r5, #8
 800a716:	d1f8      	bne.n	800a70a <_strtol_l.isra.0+0x1e>
 800a718:	2c2d      	cmp	r4, #45	; 0x2d
 800a71a:	d134      	bne.n	800a786 <_strtol_l.isra.0+0x9a>
 800a71c:	f89e 4000 	ldrb.w	r4, [lr]
 800a720:	f04f 0801 	mov.w	r8, #1
 800a724:	f106 0e02 	add.w	lr, r6, #2
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d05c      	beq.n	800a7e6 <_strtol_l.isra.0+0xfa>
 800a72c:	2b10      	cmp	r3, #16
 800a72e:	d10c      	bne.n	800a74a <_strtol_l.isra.0+0x5e>
 800a730:	2c30      	cmp	r4, #48	; 0x30
 800a732:	d10a      	bne.n	800a74a <_strtol_l.isra.0+0x5e>
 800a734:	f89e 4000 	ldrb.w	r4, [lr]
 800a738:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a73c:	2c58      	cmp	r4, #88	; 0x58
 800a73e:	d14d      	bne.n	800a7dc <_strtol_l.isra.0+0xf0>
 800a740:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a744:	2310      	movs	r3, #16
 800a746:	f10e 0e02 	add.w	lr, lr, #2
 800a74a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a74e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800a752:	2600      	movs	r6, #0
 800a754:	fbbc f9f3 	udiv	r9, ip, r3
 800a758:	4635      	mov	r5, r6
 800a75a:	fb03 ca19 	mls	sl, r3, r9, ip
 800a75e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a762:	2f09      	cmp	r7, #9
 800a764:	d818      	bhi.n	800a798 <_strtol_l.isra.0+0xac>
 800a766:	463c      	mov	r4, r7
 800a768:	42a3      	cmp	r3, r4
 800a76a:	dd24      	ble.n	800a7b6 <_strtol_l.isra.0+0xca>
 800a76c:	2e00      	cmp	r6, #0
 800a76e:	db1f      	blt.n	800a7b0 <_strtol_l.isra.0+0xc4>
 800a770:	45a9      	cmp	r9, r5
 800a772:	d31d      	bcc.n	800a7b0 <_strtol_l.isra.0+0xc4>
 800a774:	d101      	bne.n	800a77a <_strtol_l.isra.0+0x8e>
 800a776:	45a2      	cmp	sl, r4
 800a778:	db1a      	blt.n	800a7b0 <_strtol_l.isra.0+0xc4>
 800a77a:	fb05 4503 	mla	r5, r5, r3, r4
 800a77e:	2601      	movs	r6, #1
 800a780:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a784:	e7eb      	b.n	800a75e <_strtol_l.isra.0+0x72>
 800a786:	2c2b      	cmp	r4, #43	; 0x2b
 800a788:	bf08      	it	eq
 800a78a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a78e:	46a8      	mov	r8, r5
 800a790:	bf08      	it	eq
 800a792:	f106 0e02 	addeq.w	lr, r6, #2
 800a796:	e7c7      	b.n	800a728 <_strtol_l.isra.0+0x3c>
 800a798:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a79c:	2f19      	cmp	r7, #25
 800a79e:	d801      	bhi.n	800a7a4 <_strtol_l.isra.0+0xb8>
 800a7a0:	3c37      	subs	r4, #55	; 0x37
 800a7a2:	e7e1      	b.n	800a768 <_strtol_l.isra.0+0x7c>
 800a7a4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a7a8:	2f19      	cmp	r7, #25
 800a7aa:	d804      	bhi.n	800a7b6 <_strtol_l.isra.0+0xca>
 800a7ac:	3c57      	subs	r4, #87	; 0x57
 800a7ae:	e7db      	b.n	800a768 <_strtol_l.isra.0+0x7c>
 800a7b0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800a7b4:	e7e4      	b.n	800a780 <_strtol_l.isra.0+0x94>
 800a7b6:	2e00      	cmp	r6, #0
 800a7b8:	da05      	bge.n	800a7c6 <_strtol_l.isra.0+0xda>
 800a7ba:	2322      	movs	r3, #34	; 0x22
 800a7bc:	6003      	str	r3, [r0, #0]
 800a7be:	4665      	mov	r5, ip
 800a7c0:	b942      	cbnz	r2, 800a7d4 <_strtol_l.isra.0+0xe8>
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	e79d      	b.n	800a702 <_strtol_l.isra.0+0x16>
 800a7c6:	f1b8 0f00 	cmp.w	r8, #0
 800a7ca:	d000      	beq.n	800a7ce <_strtol_l.isra.0+0xe2>
 800a7cc:	426d      	negs	r5, r5
 800a7ce:	2a00      	cmp	r2, #0
 800a7d0:	d0f7      	beq.n	800a7c2 <_strtol_l.isra.0+0xd6>
 800a7d2:	b10e      	cbz	r6, 800a7d8 <_strtol_l.isra.0+0xec>
 800a7d4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800a7d8:	6011      	str	r1, [r2, #0]
 800a7da:	e7f2      	b.n	800a7c2 <_strtol_l.isra.0+0xd6>
 800a7dc:	2430      	movs	r4, #48	; 0x30
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1b3      	bne.n	800a74a <_strtol_l.isra.0+0x5e>
 800a7e2:	2308      	movs	r3, #8
 800a7e4:	e7b1      	b.n	800a74a <_strtol_l.isra.0+0x5e>
 800a7e6:	2c30      	cmp	r4, #48	; 0x30
 800a7e8:	d0a4      	beq.n	800a734 <_strtol_l.isra.0+0x48>
 800a7ea:	230a      	movs	r3, #10
 800a7ec:	e7ad      	b.n	800a74a <_strtol_l.isra.0+0x5e>
 800a7ee:	bf00      	nop
 800a7f0:	0800aabd 	.word	0x0800aabd

0800a7f4 <strtol>:
 800a7f4:	4613      	mov	r3, r2
 800a7f6:	460a      	mov	r2, r1
 800a7f8:	4601      	mov	r1, r0
 800a7fa:	4802      	ldr	r0, [pc, #8]	; (800a804 <strtol+0x10>)
 800a7fc:	6800      	ldr	r0, [r0, #0]
 800a7fe:	f7ff bf75 	b.w	800a6ec <_strtol_l.isra.0>
 800a802:	bf00      	nop
 800a804:	24000014 	.word	0x24000014

0800a808 <__malloc_lock>:
 800a808:	4801      	ldr	r0, [pc, #4]	; (800a810 <__malloc_lock+0x8>)
 800a80a:	f7ff beed 	b.w	800a5e8 <__retarget_lock_acquire_recursive>
 800a80e:	bf00      	nop
 800a810:	24004c80 	.word	0x24004c80

0800a814 <__malloc_unlock>:
 800a814:	4801      	ldr	r0, [pc, #4]	; (800a81c <__malloc_unlock+0x8>)
 800a816:	f7ff bee8 	b.w	800a5ea <__retarget_lock_release_recursive>
 800a81a:	bf00      	nop
 800a81c:	24004c80 	.word	0x24004c80

0800a820 <_free_r>:
 800a820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a822:	2900      	cmp	r1, #0
 800a824:	d048      	beq.n	800a8b8 <_free_r+0x98>
 800a826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a82a:	9001      	str	r0, [sp, #4]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f1a1 0404 	sub.w	r4, r1, #4
 800a832:	bfb8      	it	lt
 800a834:	18e4      	addlt	r4, r4, r3
 800a836:	f7ff ffe7 	bl	800a808 <__malloc_lock>
 800a83a:	4a20      	ldr	r2, [pc, #128]	; (800a8bc <_free_r+0x9c>)
 800a83c:	9801      	ldr	r0, [sp, #4]
 800a83e:	6813      	ldr	r3, [r2, #0]
 800a840:	4615      	mov	r5, r2
 800a842:	b933      	cbnz	r3, 800a852 <_free_r+0x32>
 800a844:	6063      	str	r3, [r4, #4]
 800a846:	6014      	str	r4, [r2, #0]
 800a848:	b003      	add	sp, #12
 800a84a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a84e:	f7ff bfe1 	b.w	800a814 <__malloc_unlock>
 800a852:	42a3      	cmp	r3, r4
 800a854:	d90b      	bls.n	800a86e <_free_r+0x4e>
 800a856:	6821      	ldr	r1, [r4, #0]
 800a858:	1862      	adds	r2, r4, r1
 800a85a:	4293      	cmp	r3, r2
 800a85c:	bf04      	itt	eq
 800a85e:	681a      	ldreq	r2, [r3, #0]
 800a860:	685b      	ldreq	r3, [r3, #4]
 800a862:	6063      	str	r3, [r4, #4]
 800a864:	bf04      	itt	eq
 800a866:	1852      	addeq	r2, r2, r1
 800a868:	6022      	streq	r2, [r4, #0]
 800a86a:	602c      	str	r4, [r5, #0]
 800a86c:	e7ec      	b.n	800a848 <_free_r+0x28>
 800a86e:	461a      	mov	r2, r3
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	b10b      	cbz	r3, 800a878 <_free_r+0x58>
 800a874:	42a3      	cmp	r3, r4
 800a876:	d9fa      	bls.n	800a86e <_free_r+0x4e>
 800a878:	6811      	ldr	r1, [r2, #0]
 800a87a:	1855      	adds	r5, r2, r1
 800a87c:	42a5      	cmp	r5, r4
 800a87e:	d10b      	bne.n	800a898 <_free_r+0x78>
 800a880:	6824      	ldr	r4, [r4, #0]
 800a882:	4421      	add	r1, r4
 800a884:	1854      	adds	r4, r2, r1
 800a886:	42a3      	cmp	r3, r4
 800a888:	6011      	str	r1, [r2, #0]
 800a88a:	d1dd      	bne.n	800a848 <_free_r+0x28>
 800a88c:	681c      	ldr	r4, [r3, #0]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	6053      	str	r3, [r2, #4]
 800a892:	4421      	add	r1, r4
 800a894:	6011      	str	r1, [r2, #0]
 800a896:	e7d7      	b.n	800a848 <_free_r+0x28>
 800a898:	d902      	bls.n	800a8a0 <_free_r+0x80>
 800a89a:	230c      	movs	r3, #12
 800a89c:	6003      	str	r3, [r0, #0]
 800a89e:	e7d3      	b.n	800a848 <_free_r+0x28>
 800a8a0:	6825      	ldr	r5, [r4, #0]
 800a8a2:	1961      	adds	r1, r4, r5
 800a8a4:	428b      	cmp	r3, r1
 800a8a6:	bf04      	itt	eq
 800a8a8:	6819      	ldreq	r1, [r3, #0]
 800a8aa:	685b      	ldreq	r3, [r3, #4]
 800a8ac:	6063      	str	r3, [r4, #4]
 800a8ae:	bf04      	itt	eq
 800a8b0:	1949      	addeq	r1, r1, r5
 800a8b2:	6021      	streq	r1, [r4, #0]
 800a8b4:	6054      	str	r4, [r2, #4]
 800a8b6:	e7c7      	b.n	800a848 <_free_r+0x28>
 800a8b8:	b003      	add	sp, #12
 800a8ba:	bd30      	pop	{r4, r5, pc}
 800a8bc:	24004a70 	.word	0x24004a70

0800a8c0 <_init>:
 800a8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c2:	bf00      	nop
 800a8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8c6:	bc08      	pop	{r3}
 800a8c8:	469e      	mov	lr, r3
 800a8ca:	4770      	bx	lr

0800a8cc <_fini>:
 800a8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ce:	bf00      	nop
 800a8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8d2:	bc08      	pop	{r3}
 800a8d4:	469e      	mov	lr, r3
 800a8d6:	4770      	bx	lr
