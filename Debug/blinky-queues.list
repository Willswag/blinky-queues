
blinky-queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b748  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800b9f8  0800b9f8  0001b9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bce0  0800bce0  0001bce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bce8  0800bce8  0001bce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bcec  0800bcec  0001bcec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800bcf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004c5c  24000078  0800bd68  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004cd4  0800bd68  00024cd4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033f3e  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000514d  00000000  00000000  00053fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001958  00000000  00000000  00059138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000017c0  00000000  00000000  0005aa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033727  00000000  00000000  0005c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002197a  00000000  00000000  0008f977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014a581  00000000  00000000  000b12f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001fb872  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006dac  00000000  00000000  001fb8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b9e0 	.word	0x0800b9e0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	0800b9e0 	.word	0x0800b9e0

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandsToBlink */
  CommandsToBlinkHandle = osMessageQueueNew (16, sizeof(Command), &CommandsToBlink_attributes);
 80005ec:	4a1c      	ldr	r2, [pc, #112]	; (8000660 <MX_FREERTOS_Init+0x78>)
 80005ee:	2108      	movs	r1, #8
 80005f0:	2010      	movs	r0, #16
 80005f2:	f008 f9ee 	bl	80089d2 <osMessageQueueNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a1a      	ldr	r2, [pc, #104]	; (8000664 <MX_FREERTOS_Init+0x7c>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of times_blinked */
  times_blinkedHandle = osMessageQueueNew (16, sizeof(uint16_t), &times_blinked_attributes);
 80005fc:	4a1a      	ldr	r2, [pc, #104]	; (8000668 <MX_FREERTOS_Init+0x80>)
 80005fe:	2102      	movs	r1, #2
 8000600:	2010      	movs	r0, #16
 8000602:	f008 f9e6 	bl	80089d2 <osMessageQueueNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a18      	ldr	r2, [pc, #96]	; (800066c <MX_FREERTOS_Init+0x84>)
 800060a:	6013      	str	r3, [r2, #0]

  /* creation of rawCommands */
  rawCommandsHandle = osMessageQueueNew (16, sizeof(char), &rawCommands_attributes);
 800060c:	4a18      	ldr	r2, [pc, #96]	; (8000670 <MX_FREERTOS_Init+0x88>)
 800060e:	2101      	movs	r1, #1
 8000610:	2010      	movs	r0, #16
 8000612:	f008 f9de 	bl	80089d2 <osMessageQueueNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a16      	ldr	r2, [pc, #88]	; (8000674 <MX_FREERTOS_Init+0x8c>)
 800061a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CommandLine */
  CommandLineHandle = osThreadNew(StartCommandLine, NULL, &CommandLine_attributes);
 800061c:	4a16      	ldr	r2, [pc, #88]	; (8000678 <MX_FREERTOS_Init+0x90>)
 800061e:	2100      	movs	r1, #0
 8000620:	4816      	ldr	r0, [pc, #88]	; (800067c <MX_FREERTOS_Init+0x94>)
 8000622:	f008 f929 	bl	8008878 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a15      	ldr	r2, [pc, #84]	; (8000680 <MX_FREERTOS_Init+0x98>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker1 */
  Blinker1Handle = osThreadNew(StartBlinker1, NULL, &Blinker1_attributes);
 800062c:	4a15      	ldr	r2, [pc, #84]	; (8000684 <MX_FREERTOS_Init+0x9c>)
 800062e:	2100      	movs	r1, #0
 8000630:	4815      	ldr	r0, [pc, #84]	; (8000688 <MX_FREERTOS_Init+0xa0>)
 8000632:	f008 f921 	bl	8008878 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <MX_FREERTOS_Init+0xa4>)
 800063a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker2 */
  Blinker2Handle = osThreadNew(StartBlinker2, NULL, &Blinker2_attributes);
 800063c:	4a14      	ldr	r2, [pc, #80]	; (8000690 <MX_FREERTOS_Init+0xa8>)
 800063e:	2100      	movs	r1, #0
 8000640:	4814      	ldr	r0, [pc, #80]	; (8000694 <MX_FREERTOS_Init+0xac>)
 8000642:	f008 f919 	bl	8008878 <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <MX_FREERTOS_Init+0xb0>)
 800064a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker3 */
  Blinker3Handle = osThreadNew(StartBlinker3, NULL, &Blinker3_attributes);
 800064c:	4a13      	ldr	r2, [pc, #76]	; (800069c <MX_FREERTOS_Init+0xb4>)
 800064e:	2100      	movs	r1, #0
 8000650:	4813      	ldr	r0, [pc, #76]	; (80006a0 <MX_FREERTOS_Init+0xb8>)
 8000652:	f008 f911 	bl	8008878 <osThreadNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <MX_FREERTOS_Init+0xbc>)
 800065a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	0800bafc 	.word	0x0800bafc
 8000664:	24004b50 	.word	0x24004b50
 8000668:	0800bb14 	.word	0x0800bb14
 800066c:	24004b58 	.word	0x24004b58
 8000670:	0800bb2c 	.word	0x0800bb2c
 8000674:	24004b54 	.word	0x24004b54
 8000678:	0800ba6c 	.word	0x0800ba6c
 800067c:	080006a9 	.word	0x080006a9
 8000680:	24004ae0 	.word	0x24004ae0
 8000684:	0800ba90 	.word	0x0800ba90
 8000688:	08000791 	.word	0x08000791
 800068c:	24004adc 	.word	0x24004adc
 8000690:	0800bab4 	.word	0x0800bab4
 8000694:	0800082d 	.word	0x0800082d
 8000698:	24004b48 	.word	0x24004b48
 800069c:	0800bad8 	.word	0x0800bad8
 80006a0:	0800083d 	.word	0x0800083d
 80006a4:	24004b4c 	.word	0x24004b4c

080006a8 <StartCommandLine>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommandLine */
void StartCommandLine(void *argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandLine */
	uint8_t local_index = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char* delay_ptr = NULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
	uint16_t delay_len = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	837b      	strh	r3, [r7, #26]
	uint16_t total_blinks = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	833b      	strh	r3, [r7, #24]
	char new_char;
	Command loc_com;
	/* Infinite loop */
	for(;;)
	{
		status = osMessageQueueGet(rawCommandsHandle, &new_char, NULL, 0);
 80006c2:	4b31      	ldr	r3, [pc, #196]	; (8000788 <StartCommandLine+0xe0>)
 80006c4:	6818      	ldr	r0, [r3, #0]
 80006c6:	f107 0113 	add.w	r1, r7, #19
 80006ca:	2300      	movs	r3, #0
 80006cc:	2200      	movs	r2, #0
 80006ce:	f008 fa53 	bl	8008b78 <osMessageQueueGet>
 80006d2:	6178      	str	r0, [r7, #20]
		if(status == osOK)
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d151      	bne.n	800077e <StartCommandLine+0xd6>
		{
			rx_buffer[local_index] = new_char;
 80006da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006de:	7cf9      	ldrb	r1, [r7, #19]
 80006e0:	4a2a      	ldr	r2, [pc, #168]	; (800078c <StartCommandLine+0xe4>)
 80006e2:	54d1      	strb	r1, [r2, r3]
			local_index++;
 80006e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006e8:	3301      	adds	r3, #1
 80006ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(local_index == RX_BUFFER_LENGTH )
 80006ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006f2:	2b64      	cmp	r3, #100	; 0x64
 80006f4:	d102      	bne.n	80006fc <StartCommandLine+0x54>
			{
				local_index = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}

			if(new_char == '\n' || new_char == '\r')
 80006fc:	7cfb      	ldrb	r3, [r7, #19]
 80006fe:	2b0a      	cmp	r3, #10
 8000700:	d002      	beq.n	8000708 <StartCommandLine+0x60>
 8000702:	7cfb      	ldrb	r3, [r7, #19]
 8000704:	2b0d      	cmp	r3, #13
 8000706:	d13a      	bne.n	800077e <StartCommandLine+0xd6>
			{
				char* buff_ptr = rx_buffer;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <StartCommandLine+0xe4>)
 800070a:	623b      	str	r3, [r7, #32]
				while(*buff_ptr != '\r'){
 800070c:	e02b      	b.n	8000766 <StartCommandLine+0xbe>
					switch (*buff_ptr) {
 800070e:	6a3b      	ldr	r3, [r7, #32]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b6c      	cmp	r3, #108	; 0x6c
 8000714:	d006      	beq.n	8000724 <StartCommandLine+0x7c>
 8000716:	2b6c      	cmp	r3, #108	; 0x6c
 8000718:	dc21      	bgt.n	800075e <StartCommandLine+0xb6>
 800071a:	2b62      	cmp	r3, #98	; 0x62
 800071c:	d00c      	beq.n	8000738 <StartCommandLine+0x90>
 800071e:	2b64      	cmp	r3, #100	; 0x64
 8000720:	d014      	beq.n	800074c <StartCommandLine+0xa4>
						case 'd':
							buff_ptr++;
							loc_com.delay_ms = atoi(buff_ptr);
							break;
						default:
							break;
 8000722:	e01c      	b.n	800075e <StartCommandLine+0xb6>
							buff_ptr++;
 8000724:	6a3b      	ldr	r3, [r7, #32]
 8000726:	3301      	adds	r3, #1
 8000728:	623b      	str	r3, [r7, #32]
							loc_com.led = atoi(buff_ptr);
 800072a:	6a38      	ldr	r0, [r7, #32]
 800072c:	f00a ffbe 	bl	800b6ac <atoi>
 8000730:	4603      	mov	r3, r0
 8000732:	b2db      	uxtb	r3, r3
 8000734:	723b      	strb	r3, [r7, #8]
							break;
 8000736:	e013      	b.n	8000760 <StartCommandLine+0xb8>
							buff_ptr++;
 8000738:	6a3b      	ldr	r3, [r7, #32]
 800073a:	3301      	adds	r3, #1
 800073c:	623b      	str	r3, [r7, #32]
							loc_com.brightness = atoi(buff_ptr);
 800073e:	6a38      	ldr	r0, [r7, #32]
 8000740:	f00a ffb4 	bl	800b6ac <atoi>
 8000744:	4603      	mov	r3, r0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	727b      	strb	r3, [r7, #9]
							break;
 800074a:	e009      	b.n	8000760 <StartCommandLine+0xb8>
							buff_ptr++;
 800074c:	6a3b      	ldr	r3, [r7, #32]
 800074e:	3301      	adds	r3, #1
 8000750:	623b      	str	r3, [r7, #32]
							loc_com.delay_ms = atoi(buff_ptr);
 8000752:	6a38      	ldr	r0, [r7, #32]
 8000754:	f00a ffaa 	bl	800b6ac <atoi>
 8000758:	4603      	mov	r3, r0
 800075a:	60fb      	str	r3, [r7, #12]
							break;
 800075c:	e000      	b.n	8000760 <StartCommandLine+0xb8>
							break;
 800075e:	bf00      	nop
					}
					buff_ptr++;
 8000760:	6a3b      	ldr	r3, [r7, #32]
 8000762:	3301      	adds	r3, #1
 8000764:	623b      	str	r3, [r7, #32]
				while(*buff_ptr != '\r'){
 8000766:	6a3b      	ldr	r3, [r7, #32]
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b0d      	cmp	r3, #13
 800076c:	d1cf      	bne.n	800070e <StartCommandLine+0x66>
				}
				local_index = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				memset(rx_buffer,0,RX_BUFFER_LENGTH);
 8000774:	2264      	movs	r2, #100	; 0x64
 8000776:	2100      	movs	r1, #0
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <StartCommandLine+0xe4>)
 800077a:	f00a ffd5 	bl	800b728 <memset>
			}
		}
		osDelay(100);
 800077e:	2064      	movs	r0, #100	; 0x64
 8000780:	f008 f90c 	bl	800899c <osDelay>
		status = osMessageQueueGet(rawCommandsHandle, &new_char, NULL, 0);
 8000784:	e79d      	b.n	80006c2 <StartCommandLine+0x1a>
 8000786:	bf00      	nop
 8000788:	24004b54 	.word	0x24004b54
 800078c:	24004ae4 	.word	0x24004ae4

08000790 <StartBlinker1>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker1 */
void StartBlinker1(void *argument)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker1 */
	uint16_t blink_rate = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	81fb      	strh	r3, [r7, #14]
	uint16_t blinks = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	81bb      	strh	r3, [r7, #12]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80007a0:	2108      	movs	r1, #8
 80007a2:	481c      	ldr	r0, [pc, #112]	; (8000814 <StartBlinker1+0x84>)
 80007a4:	f004 fa3a 	bl	8004c1c <HAL_TIM_PWM_Start>

	/* Infinite loop */
	for(;;)
	{

		if(blink_rate > 4800)
 80007a8:	89fb      	ldrh	r3, [r7, #14]
 80007aa:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 80007ae:	d901      	bls.n	80007b4 <StartBlinker1+0x24>
		{
			blink_rate = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	81fb      	strh	r3, [r7, #14]
		}
		blink_rate = blink_rate + 10;
 80007b4:	89fb      	ldrh	r3, [r7, #14]
 80007b6:	330a      	adds	r3, #10
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	81fb      	strh	r3, [r7, #14]
		TIM3->CCR3 = blink_rate;
 80007bc:	89fa      	ldrh	r2, [r7, #14]
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <StartBlinker1+0x88>)
 80007c0:	63da      	str	r2, [r3, #60]	; 0x3c


		osMessageQueueGet(CommandsToBlinkHandle,&blink_rate , NULL, 0);
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <StartBlinker1+0x8c>)
 80007c4:	6818      	ldr	r0, [r3, #0]
 80007c6:	f107 010e 	add.w	r1, r7, #14
 80007ca:	2300      	movs	r3, #0
 80007cc:	2200      	movs	r2, #0
 80007ce:	f008 f9d3 	bl	8008b78 <osMessageQueueGet>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80007d2:	2101      	movs	r1, #1
 80007d4:	4812      	ldr	r0, [pc, #72]	; (8000820 <StartBlinker1+0x90>)
 80007d6:	f001 fd7a 	bl	80022ce <HAL_GPIO_TogglePin>
		blinks++;
 80007da:	89bb      	ldrh	r3, [r7, #12]
 80007dc:	3301      	adds	r3, #1
 80007de:	b29b      	uxth	r3, r3
 80007e0:	81bb      	strh	r3, [r7, #12]
		if (blinks%100 == 0) {
 80007e2:	89bb      	ldrh	r3, [r7, #12]
 80007e4:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <StartBlinker1+0x94>)
 80007e6:	fba2 1203 	umull	r1, r2, r2, r3
 80007ea:	0952      	lsrs	r2, r2, #5
 80007ec:	2164      	movs	r1, #100	; 0x64
 80007ee:	fb01 f202 	mul.w	r2, r1, r2
 80007f2:	1a9b      	subs	r3, r3, r2
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d107      	bne.n	800080a <StartBlinker1+0x7a>
			osMessageQueuePut(times_blinkedHandle, &blinks , NULL, 0);
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <StartBlinker1+0x98>)
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	f107 010c 	add.w	r1, r7, #12
 8000802:	2300      	movs	r3, #0
 8000804:	2200      	movs	r2, #0
 8000806:	f008 f957 	bl	8008ab8 <osMessageQueuePut>
		}
		osDelay(10);
 800080a:	200a      	movs	r0, #10
 800080c:	f008 f8c6 	bl	800899c <osDelay>
		if(blink_rate > 4800)
 8000810:	e7ca      	b.n	80007a8 <StartBlinker1+0x18>
 8000812:	bf00      	nop
 8000814:	24004ba8 	.word	0x24004ba8
 8000818:	40000400 	.word	0x40000400
 800081c:	24004b50 	.word	0x24004b50
 8000820:	58020400 	.word	0x58020400
 8000824:	51eb851f 	.word	0x51eb851f
 8000828:	24004b58 	.word	0x24004b58

0800082c <StartBlinker2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker2 */
void StartBlinker2(void *argument)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker2 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000834:	2001      	movs	r0, #1
 8000836:	f008 f8b1 	bl	800899c <osDelay>
 800083a:	e7fb      	b.n	8000834 <StartBlinker2+0x8>

0800083c <StartBlinker3>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker3 */
void StartBlinker3(void *argument)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker3 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f008 f8a9 	bl	800899c <osDelay>
 800084a:	e7fb      	b.n	8000844 <StartBlinker3+0x8>

0800084c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08e      	sub	sp, #56	; 0x38
 8000850:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	4b80      	ldr	r3, [pc, #512]	; (8000a64 <MX_GPIO_Init+0x218>)
 8000864:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000868:	4a7e      	ldr	r2, [pc, #504]	; (8000a64 <MX_GPIO_Init+0x218>)
 800086a:	f043 0304 	orr.w	r3, r3, #4
 800086e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000872:	4b7c      	ldr	r3, [pc, #496]	; (8000a64 <MX_GPIO_Init+0x218>)
 8000874:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	623b      	str	r3, [r7, #32]
 800087e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000880:	4b78      	ldr	r3, [pc, #480]	; (8000a64 <MX_GPIO_Init+0x218>)
 8000882:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000886:	4a77      	ldr	r2, [pc, #476]	; (8000a64 <MX_GPIO_Init+0x218>)
 8000888:	f043 0320 	orr.w	r3, r3, #32
 800088c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000890:	4b74      	ldr	r3, [pc, #464]	; (8000a64 <MX_GPIO_Init+0x218>)
 8000892:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000896:	f003 0320 	and.w	r3, r3, #32
 800089a:	61fb      	str	r3, [r7, #28]
 800089c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	4b71      	ldr	r3, [pc, #452]	; (8000a64 <MX_GPIO_Init+0x218>)
 80008a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a4:	4a6f      	ldr	r2, [pc, #444]	; (8000a64 <MX_GPIO_Init+0x218>)
 80008a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ae:	4b6d      	ldr	r3, [pc, #436]	; (8000a64 <MX_GPIO_Init+0x218>)
 80008b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008bc:	4b69      	ldr	r3, [pc, #420]	; (8000a64 <MX_GPIO_Init+0x218>)
 80008be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c2:	4a68      	ldr	r2, [pc, #416]	; (8000a64 <MX_GPIO_Init+0x218>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008cc:	4b65      	ldr	r3, [pc, #404]	; (8000a64 <MX_GPIO_Init+0x218>)
 80008ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008da:	4b62      	ldr	r3, [pc, #392]	; (8000a64 <MX_GPIO_Init+0x218>)
 80008dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008e0:	4a60      	ldr	r2, [pc, #384]	; (8000a64 <MX_GPIO_Init+0x218>)
 80008e2:	f043 0308 	orr.w	r3, r3, #8
 80008e6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ea:	4b5e      	ldr	r3, [pc, #376]	; (8000a64 <MX_GPIO_Init+0x218>)
 80008ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f0:	f003 0308 	and.w	r3, r3, #8
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f8:	4b5a      	ldr	r3, [pc, #360]	; (8000a64 <MX_GPIO_Init+0x218>)
 80008fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008fe:	4a59      	ldr	r2, [pc, #356]	; (8000a64 <MX_GPIO_Init+0x218>)
 8000900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000904:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000908:	4b56      	ldr	r3, [pc, #344]	; (8000a64 <MX_GPIO_Init+0x218>)
 800090a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800090e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b53      	ldr	r3, [pc, #332]	; (8000a64 <MX_GPIO_Init+0x218>)
 8000918:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800091c:	4a51      	ldr	r2, [pc, #324]	; (8000a64 <MX_GPIO_Init+0x218>)
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000926:	4b4f      	ldr	r3, [pc, #316]	; (8000a64 <MX_GPIO_Init+0x218>)
 8000928:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000934:	4b4b      	ldr	r3, [pc, #300]	; (8000a64 <MX_GPIO_Init+0x218>)
 8000936:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800093a:	4a4a      	ldr	r2, [pc, #296]	; (8000a64 <MX_GPIO_Init+0x218>)
 800093c:	f043 0310 	orr.w	r3, r3, #16
 8000940:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000944:	4b47      	ldr	r3, [pc, #284]	; (8000a64 <MX_GPIO_Init+0x218>)
 8000946:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800094a:	f003 0310 	and.w	r3, r3, #16
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000958:	4843      	ldr	r0, [pc, #268]	; (8000a68 <MX_GPIO_Init+0x21c>)
 800095a:	f001 fc9f 	bl	800229c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000964:	4841      	ldr	r0, [pc, #260]	; (8000a6c <MX_GPIO_Init+0x220>)
 8000966:	f001 fc99 	bl	800229c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2102      	movs	r1, #2
 800096e:	4840      	ldr	r0, [pc, #256]	; (8000a70 <MX_GPIO_Init+0x224>)
 8000970:	f001 fc94 	bl	800229c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000986:	4619      	mov	r1, r3
 8000988:	483a      	ldr	r0, [pc, #232]	; (8000a74 <MX_GPIO_Init+0x228>)
 800098a:	f001 fad7 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800098e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	4619      	mov	r1, r3
 80009a6:	4830      	ldr	r0, [pc, #192]	; (8000a68 <MX_GPIO_Init+0x21c>)
 80009a8:	f001 fac8 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80009ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c2:	4619      	mov	r1, r3
 80009c4:	4829      	ldr	r0, [pc, #164]	; (8000a6c <MX_GPIO_Init+0x220>)
 80009c6:	f001 fab9 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009ca:	2380      	movs	r3, #128	; 0x80
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	4619      	mov	r1, r3
 80009de:	4826      	ldr	r0, [pc, #152]	; (8000a78 <MX_GPIO_Init+0x22c>)
 80009e0:	f001 faac 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f6:	4619      	mov	r1, r3
 80009f8:	4820      	ldr	r0, [pc, #128]	; (8000a7c <MX_GPIO_Init+0x230>)
 80009fa:	f001 fa9f 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80009fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a10:	230a      	movs	r3, #10
 8000a12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4818      	ldr	r0, [pc, #96]	; (8000a7c <MX_GPIO_Init+0x230>)
 8000a1c:	f001 fa8e 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000a20:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	4810      	ldr	r0, [pc, #64]	; (8000a7c <MX_GPIO_Init+0x230>)
 8000a3a:	f001 fa7f 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	4806      	ldr	r0, [pc, #24]	; (8000a70 <MX_GPIO_Init+0x224>)
 8000a56:	f001 fa71 	bl	8001f3c <HAL_GPIO_Init>

}
 8000a5a:	bf00      	nop
 8000a5c:	3738      	adds	r7, #56	; 0x38
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	58024400 	.word	0x58024400
 8000a68:	58021400 	.word	0x58021400
 8000a6c:	58020400 	.word	0x58020400
 8000a70:	58021000 	.word	0x58021000
 8000a74:	58020800 	.word	0x58020800
 8000a78:	58021800 	.word	0x58021800
 8000a7c:	58020000 	.word	0x58020000

08000a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a84:	f000 fbbc 	bl	8001200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a88:	f000 f818 	bl	8000abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8c:	f7ff fede 	bl	800084c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a90:	f000 faaa 	bl	8000fe8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a94:	f000 fb82 	bl	800119c <MX_USB_OTG_HS_USB_Init>
  MX_TIM3_Init();
 8000a98:	f000 f9cc 	bl	8000e34 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT (&huart3, UART3_rxBuffer, 1);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4905      	ldr	r1, [pc, #20]	; (8000ab4 <main+0x34>)
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <main+0x38>)
 8000aa2:	f005 fae3 	bl	800606c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000aa6:	f007 fe9d 	bl	80087e4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000aaa:	f7ff fd9d 	bl	80005e8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000aae:	f007 febd 	bl	800882c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <main+0x32>
 8000ab4:	24000094 	.word	0x24000094
 8000ab8:	24004bf4 	.word	0x24004bf4

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b09c      	sub	sp, #112	; 0x70
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac6:	224c      	movs	r2, #76	; 0x4c
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f00a fe2c 	bl	800b728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2220      	movs	r2, #32
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f00a fe26 	bl	800b728 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000adc:	2004      	movs	r0, #4
 8000ade:	f001 fc11 	bl	8002304 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <SystemClock_Config+0xd8>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	4a2a      	ldr	r2, [pc, #168]	; (8000b94 <SystemClock_Config+0xd8>)
 8000aec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000af0:	6193      	str	r3, [r2, #24]
 8000af2:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <SystemClock_Config+0xd8>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000afe:	bf00      	nop
 8000b00:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <SystemClock_Config+0xd8>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b0c:	d1f8      	bne.n	8000b00 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b0e:	2321      	movs	r3, #33	; 0x21
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b12:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b20:	2302      	movs	r3, #2
 8000b22:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b24:	2301      	movs	r3, #1
 8000b26:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000b28:	2318      	movs	r3, #24
 8000b2a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b30:	2304      	movs	r3, #4
 8000b32:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b38:	230c      	movs	r3, #12
 8000b3a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 fc35 	bl	80023b8 <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b54:	f000 f832 	bl	8000bbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	233f      	movs	r3, #63	; 0x3f
 8000b5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 f81f 	bl	8002bc0 <HAL_RCC_ClockConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b88:	f000 f818 	bl	8000bbc <Error_Handler>
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3770      	adds	r7, #112	; 0x70
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	58024800 	.word	0x58024800

08000b98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d101      	bne.n	8000bae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000baa:	f000 fb65 	bl	8001278 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40001400 	.word	0x40001400

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <Error_Handler+0x8>
	...

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <HAL_MspInit+0x38>)
 8000bd0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_MspInit+0x38>)
 8000bd6:	f043 0302 	orr.w	r3, r3, #2
 8000bda:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <HAL_MspInit+0x38>)
 8000be0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000be4:	f003 0302 	and.w	r3, r3, #2
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	210f      	movs	r1, #15
 8000bf0:	f06f 0001 	mvn.w	r0, #1
 8000bf4:	f000 fc18 	bl	8001428 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	58024400 	.word	0x58024400

08000c04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b090      	sub	sp, #64	; 0x40
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b0f      	cmp	r3, #15
 8000c10:	d827      	bhi.n	8000c62 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000c12:	2200      	movs	r2, #0
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	2037      	movs	r0, #55	; 0x37
 8000c18:	f000 fc06 	bl	8001428 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c1c:	2037      	movs	r0, #55	; 0x37
 8000c1e:	f000 fc1d 	bl	800145c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000c22:	4a29      	ldr	r2, [pc, #164]	; (8000cc8 <HAL_InitTick+0xc4>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000c28:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <HAL_InitTick+0xc8>)
 8000c2a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c2e:	4a27      	ldr	r2, [pc, #156]	; (8000ccc <HAL_InitTick+0xc8>)
 8000c30:	f043 0320 	orr.w	r3, r3, #32
 8000c34:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000c38:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <HAL_InitTick+0xc8>)
 8000c3a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c3e:	f003 0320 	and.w	r3, r3, #32
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c46:	f107 0210 	add.w	r2, r7, #16
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f002 fb41 	bl	80032d8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c58:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d106      	bne.n	8000c6e <HAL_InitTick+0x6a>
 8000c60:	e001      	b.n	8000c66 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e02b      	b.n	8000cbe <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c66:	f002 fb0b 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 8000c6a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000c6c:	e004      	b.n	8000c78 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c6e:	f002 fb07 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 8000c72:	4603      	mov	r3, r0
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c7a:	4a15      	ldr	r2, [pc, #84]	; (8000cd0 <HAL_InitTick+0xcc>)
 8000c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c80:	0c9b      	lsrs	r3, r3, #18
 8000c82:	3b01      	subs	r3, #1
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <HAL_InitTick+0xd0>)
 8000c88:	4a13      	ldr	r2, [pc, #76]	; (8000cd8 <HAL_InitTick+0xd4>)
 8000c8a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <HAL_InitTick+0xd0>)
 8000c8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c92:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c94:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <HAL_InitTick+0xd0>)
 8000c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c98:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_InitTick+0xd0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HAL_InitTick+0xd0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000ca6:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <HAL_InitTick+0xd0>)
 8000ca8:	f003 fe86 	bl	80049b8 <HAL_TIM_Base_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d104      	bne.n	8000cbc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000cb2:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <HAL_InitTick+0xd0>)
 8000cb4:	f003 fed8 	bl	8004a68 <HAL_TIM_Base_Start_IT>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	e000      	b.n	8000cbe <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3740      	adds	r7, #64	; 0x40
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	24000008 	.word	0x24000008
 8000ccc:	58024400 	.word	0x58024400
 8000cd0:	431bde83 	.word	0x431bde83
 8000cd4:	24004b5c 	.word	0x24004b5c
 8000cd8:	40001400 	.word	0x40001400

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <TIM3_IRQHandler+0x10>)
 8000d0e:	f004 f893 	bl	8004e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	24004ba8 	.word	0x24004ba8

08000d1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <USART3_IRQHandler+0x10>)
 8000d22:	f005 f9f9 	bl	8006118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	24004bf4 	.word	0x24004bf4

08000d30 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <TIM7_IRQHandler+0x10>)
 8000d36:	f004 f87f 	bl	8004e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	24004b5c 	.word	0x24004b5c

08000d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d48:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <SystemInit+0xd0>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4e:	4a31      	ldr	r2, [pc, #196]	; (8000e14 <SystemInit+0xd0>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d58:	4b2f      	ldr	r3, [pc, #188]	; (8000e18 <SystemInit+0xd4>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f003 030f 	and.w	r3, r3, #15
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d807      	bhi.n	8000d74 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d64:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <SystemInit+0xd4>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f023 030f 	bic.w	r3, r3, #15
 8000d6c:	4a2a      	ldr	r2, [pc, #168]	; (8000e18 <SystemInit+0xd4>)
 8000d6e:	f043 0303 	orr.w	r3, r3, #3
 8000d72:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d74:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <SystemInit+0xd8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a28      	ldr	r2, [pc, #160]	; (8000e1c <SystemInit+0xd8>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d80:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <SystemInit+0xd8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d86:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <SystemInit+0xd8>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4924      	ldr	r1, [pc, #144]	; (8000e1c <SystemInit+0xd8>)
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <SystemInit+0xdc>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d92:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <SystemInit+0xd4>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 030c 	and.w	r3, r3, #12
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d007      	beq.n	8000dae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d9e:	4b1e      	ldr	r3, [pc, #120]	; (8000e18 <SystemInit+0xd4>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f023 030f 	bic.w	r3, r3, #15
 8000da6:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <SystemInit+0xd4>)
 8000da8:	f043 0303 	orr.w	r3, r3, #3
 8000dac:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <SystemInit+0xd8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <SystemInit+0xd8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <SystemInit+0xd8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <SystemInit+0xd8>)
 8000dc2:	4a18      	ldr	r2, [pc, #96]	; (8000e24 <SystemInit+0xe0>)
 8000dc4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <SystemInit+0xd8>)
 8000dc8:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <SystemInit+0xe4>)
 8000dca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <SystemInit+0xd8>)
 8000dce:	4a17      	ldr	r2, [pc, #92]	; (8000e2c <SystemInit+0xe8>)
 8000dd0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <SystemInit+0xd8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000dd8:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <SystemInit+0xd8>)
 8000dda:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <SystemInit+0xe8>)
 8000ddc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <SystemInit+0xd8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <SystemInit+0xd8>)
 8000de6:	4a11      	ldr	r2, [pc, #68]	; (8000e2c <SystemInit+0xe8>)
 8000de8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <SystemInit+0xd8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <SystemInit+0xd8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <SystemInit+0xd8>)
 8000df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dfa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <SystemInit+0xd8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <SystemInit+0xec>)
 8000e04:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e08:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00
 8000e18:	52002000 	.word	0x52002000
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e24:	02020200 	.word	0x02020200
 8000e28:	01ff0000 	.word	0x01ff0000
 8000e2c:	01010280 	.word	0x01010280
 8000e30:	52004000 	.word	0x52004000

08000e34 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08e      	sub	sp, #56	; 0x38
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e54:	463b      	mov	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]
 8000e62:	615a      	str	r2, [r3, #20]
 8000e64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e66:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <MX_TIM3_Init+0xe8>)
 8000e68:	4a2d      	ldr	r2, [pc, #180]	; (8000f20 <MX_TIM3_Init+0xec>)
 8000e6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <MX_TIM3_Init+0xe8>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e72:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <MX_TIM3_Init+0xe8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4800-1;
 8000e78:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <MX_TIM3_Init+0xe8>)
 8000e7a:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000e7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e80:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <MX_TIM3_Init+0xe8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e86:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <MX_TIM3_Init+0xe8>)
 8000e88:	2280      	movs	r2, #128	; 0x80
 8000e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e8c:	4823      	ldr	r0, [pc, #140]	; (8000f1c <MX_TIM3_Init+0xe8>)
 8000e8e:	f003 fd93 	bl	80049b8 <HAL_TIM_Base_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e98:	f7ff fe90 	bl	8000bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	481c      	ldr	r0, [pc, #112]	; (8000f1c <MX_TIM3_Init+0xe8>)
 8000eaa:	f004 f9f9 	bl	80052a0 <HAL_TIM_ConfigClockSource>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000eb4:	f7ff fe82 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000eb8:	4818      	ldr	r0, [pc, #96]	; (8000f1c <MX_TIM3_Init+0xe8>)
 8000eba:	f003 fe4d 	bl	8004b58 <HAL_TIM_PWM_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000ec4:	f7ff fe7a 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4811      	ldr	r0, [pc, #68]	; (8000f1c <MX_TIM3_Init+0xe8>)
 8000ed8:	f004 ff36 	bl	8005d48 <HAL_TIMEx_MasterConfigSynchronization>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000ee2:	f7ff fe6b 	bl	8000bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee6:	2360      	movs	r3, #96	; 0x60
 8000ee8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	2208      	movs	r2, #8
 8000efa:	4619      	mov	r1, r3
 8000efc:	4807      	ldr	r0, [pc, #28]	; (8000f1c <MX_TIM3_Init+0xe8>)
 8000efe:	f004 f8bb 	bl	8005078 <HAL_TIM_PWM_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f08:	f7ff fe58 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f0c:	4803      	ldr	r0, [pc, #12]	; (8000f1c <MX_TIM3_Init+0xe8>)
 8000f0e:	f000 f831 	bl	8000f74 <HAL_TIM_MspPostInit>

}
 8000f12:	bf00      	nop
 8000f14:	3738      	adds	r7, #56	; 0x38
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	24004ba8 	.word	0x24004ba8
 8000f20:	40000400 	.word	0x40000400

08000f24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_TIM_Base_MspInit+0x48>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d116      	bne.n	8000f64 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_TIM_Base_MspInit+0x4c>)
 8000f38:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f3c:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <HAL_TIM_Base_MspInit+0x4c>)
 8000f3e:	f043 0302 	orr.w	r3, r3, #2
 8000f42:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_TIM_Base_MspInit+0x4c>)
 8000f48:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2105      	movs	r1, #5
 8000f58:	201d      	movs	r0, #29
 8000f5a:	f000 fa65 	bl	8001428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f5e:	201d      	movs	r0, #29
 8000f60:	f000 fa7c 	bl	800145c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40000400 	.word	0x40000400
 8000f70:	58024400 	.word	0x58024400

08000f74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <HAL_TIM_MspPostInit+0x68>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d11e      	bne.n	8000fd4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_TIM_MspPostInit+0x6c>)
 8000f98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f9c:	4a10      	ldr	r2, [pc, #64]	; (8000fe0 <HAL_TIM_MspPostInit+0x6c>)
 8000f9e:	f043 0302 	orr.w	r3, r3, #2
 8000fa2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_TIM_MspPostInit+0x6c>)
 8000fa8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LD1_Pin;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <HAL_TIM_MspPostInit+0x70>)
 8000fd0:	f000 ffb4 	bl	8001f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40000400 	.word	0x40000400
 8000fe0:	58024400 	.word	0x58024400
 8000fe4:	58020400 	.word	0x58020400

08000fe8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8000fee:	4a23      	ldr	r2, [pc, #140]	; (800107c <MX_USART3_UART_Init+0x94>)
 8000ff0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8000ff4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <MX_USART3_UART_Init+0x90>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b19      	ldr	r3, [pc, #100]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <MX_USART3_UART_Init+0x90>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <MX_USART3_UART_Init+0x90>)
 800102c:	2200      	movs	r2, #0
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001030:	4811      	ldr	r0, [pc, #68]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8001032:	f004 ff35 	bl	8005ea0 <HAL_UART_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800103c:	f7ff fdbe 	bl	8000bbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001040:	2100      	movs	r1, #0
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8001044:	f007 fabf 	bl	80085c6 <HAL_UARTEx_SetTxFifoThreshold>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800104e:	f7ff fdb5 	bl	8000bbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001052:	2100      	movs	r1, #0
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8001056:	f007 faf4 	bl	8008642 <HAL_UARTEx_SetRxFifoThreshold>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001060:	f7ff fdac 	bl	8000bbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8001066:	f007 fa75 	bl	8008554 <HAL_UARTEx_DisableFifoMode>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001070:	f7ff fda4 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	24004bf4 	.word	0x24004bf4
 800107c:	40004800 	.word	0x40004800

08001080 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b0b8      	sub	sp, #224	; 0xe0
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	22b8      	movs	r2, #184	; 0xb8
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f00a fb41 	bl	800b728 <memset>
  if(uartHandle->Instance==USART3)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a29      	ldr	r2, [pc, #164]	; (8001150 <HAL_UART_MspInit+0xd0>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d14a      	bne.n	8001146 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010b0:	2302      	movs	r3, #2
 80010b2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 f94c 	bl	800335c <HAL_RCCEx_PeriphCLKConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010ca:	f7ff fd77 	bl	8000bbc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <HAL_UART_MspInit+0xd4>)
 80010d0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010d4:	4a1f      	ldr	r2, [pc, #124]	; (8001154 <HAL_UART_MspInit+0xd4>)
 80010d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010da:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <HAL_UART_MspInit+0xd4>)
 80010e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HAL_UART_MspInit+0xd4>)
 80010ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010f2:	4a18      	ldr	r2, [pc, #96]	; (8001154 <HAL_UART_MspInit+0xd4>)
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_UART_MspInit+0xd4>)
 80010fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800110a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800110e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001124:	2307      	movs	r3, #7
 8001126:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800112e:	4619      	mov	r1, r3
 8001130:	4809      	ldr	r0, [pc, #36]	; (8001158 <HAL_UART_MspInit+0xd8>)
 8001132:	f000 ff03 	bl	8001f3c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2105      	movs	r1, #5
 800113a:	2027      	movs	r0, #39	; 0x27
 800113c:	f000 f974 	bl	8001428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001140:	2027      	movs	r0, #39	; 0x27
 8001142:	f000 f98b 	bl	800145c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001146:	bf00      	nop
 8001148:	37e0      	adds	r7, #224	; 0xe0
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40004800 	.word	0x40004800
 8001154:	58024400 	.word	0x58024400
 8001158:	58020c00 	.word	0x58020c00

0800115c <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, UART3_rxBuffer, 1, 100);
 8001164:	2364      	movs	r3, #100	; 0x64
 8001166:	2201      	movs	r2, #1
 8001168:	4909      	ldr	r1, [pc, #36]	; (8001190 <HAL_UART_RxCpltCallback+0x34>)
 800116a:	480a      	ldr	r0, [pc, #40]	; (8001194 <HAL_UART_RxCpltCallback+0x38>)
 800116c:	f004 fee8 	bl	8005f40 <HAL_UART_Transmit>
    osMessageQueuePut(rawCommandsHandle, UART3_rxBuffer ,NULL , 0);
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <HAL_UART_RxCpltCallback+0x3c>)
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	2300      	movs	r3, #0
 8001176:	2200      	movs	r2, #0
 8001178:	4905      	ldr	r1, [pc, #20]	; (8001190 <HAL_UART_RxCpltCallback+0x34>)
 800117a:	f007 fc9d 	bl	8008ab8 <osMessageQueuePut>
    HAL_UART_Receive_IT(&huart3, UART3_rxBuffer, 1);
 800117e:	2201      	movs	r2, #1
 8001180:	4903      	ldr	r1, [pc, #12]	; (8001190 <HAL_UART_RxCpltCallback+0x34>)
 8001182:	4804      	ldr	r0, [pc, #16]	; (8001194 <HAL_UART_RxCpltCallback+0x38>)
 8001184:	f004 ff72 	bl	800606c <HAL_UART_Receive_IT>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	24000094 	.word	0x24000094
 8001194:	24004bf4 	.word	0x24004bf4
 8001198:	24004b54 	.word	0x24004b54

0800119c <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011b0:	f7ff fdc8 	bl	8000d44 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b4:	480c      	ldr	r0, [pc, #48]	; (80011e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011b6:	490d      	ldr	r1, [pc, #52]	; (80011ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011bc:	e002      	b.n	80011c4 <LoopCopyDataInit>

080011be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c2:	3304      	adds	r3, #4

080011c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80011c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c8:	d3f9      	bcc.n	80011be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ca:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011cc:	4c0a      	ldr	r4, [pc, #40]	; (80011f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d0:	e001      	b.n	80011d6 <LoopFillZerobss>

080011d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d4:	3204      	adds	r2, #4

080011d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d8:	d3fb      	bcc.n	80011d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011da:	f00a fa71 	bl	800b6c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011de:	f7ff fc4f 	bl	8000a80 <main>
  bx  lr
 80011e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011e4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80011e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011ec:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80011f0:	0800bcf0 	.word	0x0800bcf0
  ldr r2, =_sbss
 80011f4:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80011f8:	24004cd4 	.word	0x24004cd4

080011fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011fc:	e7fe      	b.n	80011fc <ADC_IRQHandler>
	...

08001200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001206:	2003      	movs	r0, #3
 8001208:	f000 f903 	bl	8001412 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800120c:	f001 fe8e 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8001210:	4602      	mov	r2, r0
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_Init+0x68>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	0a1b      	lsrs	r3, r3, #8
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	4913      	ldr	r1, [pc, #76]	; (800126c <HAL_Init+0x6c>)
 800121e:	5ccb      	ldrb	r3, [r1, r3]
 8001220:	f003 031f 	and.w	r3, r3, #31
 8001224:	fa22 f303 	lsr.w	r3, r2, r3
 8001228:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_Init+0x68>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	4a0e      	ldr	r2, [pc, #56]	; (800126c <HAL_Init+0x6c>)
 8001234:	5cd3      	ldrb	r3, [r2, r3]
 8001236:	f003 031f 	and.w	r3, r3, #31
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	fa22 f303 	lsr.w	r3, r2, r3
 8001240:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <HAL_Init+0x70>)
 8001242:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001244:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <HAL_Init+0x74>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800124a:	200f      	movs	r0, #15
 800124c:	f7ff fcda 	bl	8000c04 <HAL_InitTick>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e002      	b.n	8001260 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800125a:	f7ff fcb5 	bl	8000bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	58024400 	.word	0x58024400
 800126c:	0800bb44 	.word	0x0800bb44
 8001270:	24000004 	.word	0x24000004
 8001274:	24000000 	.word	0x24000000

08001278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	2400000c 	.word	0x2400000c
 800129c:	24004c84 	.word	0x24004c84

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	24004c84 	.word	0x24004c84

080012b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <__NVIC_SetPriorityGrouping+0x40>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d4:	4013      	ands	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e6:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <__NVIC_SetPriorityGrouping+0x40>)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	60d3      	str	r3, [r2, #12]
}
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00
 80012fc:	05fa0000 	.word	0x05fa0000

08001300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <__NVIC_GetPriorityGrouping+0x18>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	f003 0307 	and.w	r3, r3, #7
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132a:	2b00      	cmp	r3, #0
 800132c:	db0b      	blt.n	8001346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	f003 021f 	and.w	r2, r3, #31
 8001334:	4907      	ldr	r1, [pc, #28]	; (8001354 <__NVIC_EnableIRQ+0x38>)
 8001336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133a:	095b      	lsrs	r3, r3, #5
 800133c:	2001      	movs	r0, #1
 800133e:	fa00 f202 	lsl.w	r2, r0, r2
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000e100 	.word	0xe000e100

08001358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001364:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001368:	2b00      	cmp	r3, #0
 800136a:	db0a      	blt.n	8001382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	490c      	ldr	r1, [pc, #48]	; (80013a4 <__NVIC_SetPriority+0x4c>)
 8001372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001376:	0112      	lsls	r2, r2, #4
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	440b      	add	r3, r1
 800137c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001380:	e00a      	b.n	8001398 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4908      	ldr	r1, [pc, #32]	; (80013a8 <__NVIC_SetPriority+0x50>)
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	3b04      	subs	r3, #4
 8001390:	0112      	lsls	r2, r2, #4
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	440b      	add	r3, r1
 8001396:	761a      	strb	r2, [r3, #24]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000e100 	.word	0xe000e100
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	; 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f1c3 0307 	rsb	r3, r3, #7
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	bf28      	it	cs
 80013ca:	2304      	movcs	r3, #4
 80013cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3304      	adds	r3, #4
 80013d2:	2b06      	cmp	r3, #6
 80013d4:	d902      	bls.n	80013dc <NVIC_EncodePriority+0x30>
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3b03      	subs	r3, #3
 80013da:	e000      	b.n	80013de <NVIC_EncodePriority+0x32>
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	401a      	ands	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	43d9      	mvns	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	4313      	orrs	r3, r2
         );
}
 8001406:	4618      	mov	r0, r3
 8001408:	3724      	adds	r7, #36	; 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ff4c 	bl	80012b8 <__NVIC_SetPriorityGrouping>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001436:	f7ff ff63 	bl	8001300 <__NVIC_GetPriorityGrouping>
 800143a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	68b9      	ldr	r1, [r7, #8]
 8001440:	6978      	ldr	r0, [r7, #20]
 8001442:	f7ff ffb3 	bl	80013ac <NVIC_EncodePriority>
 8001446:	4602      	mov	r2, r0
 8001448:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800144c:	4611      	mov	r1, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ff82 	bl	8001358 <__NVIC_SetPriority>
}
 8001454:	bf00      	nop
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff56 	bl	800131c <__NVIC_EnableIRQ>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001480:	f7ff ff0e 	bl	80012a0 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e2dc      	b.n	8001a4a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d008      	beq.n	80014ae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2280      	movs	r2, #128	; 0x80
 80014a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e2cd      	b.n	8001a4a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a76      	ldr	r2, [pc, #472]	; (800168c <HAL_DMA_Abort+0x214>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d04a      	beq.n	800154e <HAL_DMA_Abort+0xd6>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a74      	ldr	r2, [pc, #464]	; (8001690 <HAL_DMA_Abort+0x218>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d045      	beq.n	800154e <HAL_DMA_Abort+0xd6>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a73      	ldr	r2, [pc, #460]	; (8001694 <HAL_DMA_Abort+0x21c>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d040      	beq.n	800154e <HAL_DMA_Abort+0xd6>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a71      	ldr	r2, [pc, #452]	; (8001698 <HAL_DMA_Abort+0x220>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d03b      	beq.n	800154e <HAL_DMA_Abort+0xd6>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a70      	ldr	r2, [pc, #448]	; (800169c <HAL_DMA_Abort+0x224>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d036      	beq.n	800154e <HAL_DMA_Abort+0xd6>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a6e      	ldr	r2, [pc, #440]	; (80016a0 <HAL_DMA_Abort+0x228>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d031      	beq.n	800154e <HAL_DMA_Abort+0xd6>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a6d      	ldr	r2, [pc, #436]	; (80016a4 <HAL_DMA_Abort+0x22c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d02c      	beq.n	800154e <HAL_DMA_Abort+0xd6>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a6b      	ldr	r2, [pc, #428]	; (80016a8 <HAL_DMA_Abort+0x230>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d027      	beq.n	800154e <HAL_DMA_Abort+0xd6>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a6a      	ldr	r2, [pc, #424]	; (80016ac <HAL_DMA_Abort+0x234>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d022      	beq.n	800154e <HAL_DMA_Abort+0xd6>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a68      	ldr	r2, [pc, #416]	; (80016b0 <HAL_DMA_Abort+0x238>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d01d      	beq.n	800154e <HAL_DMA_Abort+0xd6>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a67      	ldr	r2, [pc, #412]	; (80016b4 <HAL_DMA_Abort+0x23c>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d018      	beq.n	800154e <HAL_DMA_Abort+0xd6>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a65      	ldr	r2, [pc, #404]	; (80016b8 <HAL_DMA_Abort+0x240>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d013      	beq.n	800154e <HAL_DMA_Abort+0xd6>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a64      	ldr	r2, [pc, #400]	; (80016bc <HAL_DMA_Abort+0x244>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d00e      	beq.n	800154e <HAL_DMA_Abort+0xd6>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a62      	ldr	r2, [pc, #392]	; (80016c0 <HAL_DMA_Abort+0x248>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d009      	beq.n	800154e <HAL_DMA_Abort+0xd6>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a61      	ldr	r2, [pc, #388]	; (80016c4 <HAL_DMA_Abort+0x24c>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d004      	beq.n	800154e <HAL_DMA_Abort+0xd6>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a5f      	ldr	r2, [pc, #380]	; (80016c8 <HAL_DMA_Abort+0x250>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d101      	bne.n	8001552 <HAL_DMA_Abort+0xda>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <HAL_DMA_Abort+0xdc>
 8001552:	2300      	movs	r3, #0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 021e 	bic.w	r2, r2, #30
 8001566:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	695a      	ldr	r2, [r3, #20]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001576:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	e00a      	b.n	8001596 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 020e 	bic.w	r2, r2, #14
 800158e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a3c      	ldr	r2, [pc, #240]	; (800168c <HAL_DMA_Abort+0x214>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d072      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a3a      	ldr	r2, [pc, #232]	; (8001690 <HAL_DMA_Abort+0x218>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d06d      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a39      	ldr	r2, [pc, #228]	; (8001694 <HAL_DMA_Abort+0x21c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d068      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a37      	ldr	r2, [pc, #220]	; (8001698 <HAL_DMA_Abort+0x220>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d063      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a36      	ldr	r2, [pc, #216]	; (800169c <HAL_DMA_Abort+0x224>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d05e      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a34      	ldr	r2, [pc, #208]	; (80016a0 <HAL_DMA_Abort+0x228>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d059      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a33      	ldr	r2, [pc, #204]	; (80016a4 <HAL_DMA_Abort+0x22c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d054      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a31      	ldr	r2, [pc, #196]	; (80016a8 <HAL_DMA_Abort+0x230>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d04f      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a30      	ldr	r2, [pc, #192]	; (80016ac <HAL_DMA_Abort+0x234>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d04a      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a2e      	ldr	r2, [pc, #184]	; (80016b0 <HAL_DMA_Abort+0x238>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d045      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a2d      	ldr	r2, [pc, #180]	; (80016b4 <HAL_DMA_Abort+0x23c>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d040      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a2b      	ldr	r2, [pc, #172]	; (80016b8 <HAL_DMA_Abort+0x240>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d03b      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a2a      	ldr	r2, [pc, #168]	; (80016bc <HAL_DMA_Abort+0x244>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d036      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a28      	ldr	r2, [pc, #160]	; (80016c0 <HAL_DMA_Abort+0x248>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d031      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a27      	ldr	r2, [pc, #156]	; (80016c4 <HAL_DMA_Abort+0x24c>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d02c      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a25      	ldr	r2, [pc, #148]	; (80016c8 <HAL_DMA_Abort+0x250>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d027      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a24      	ldr	r2, [pc, #144]	; (80016cc <HAL_DMA_Abort+0x254>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d022      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a22      	ldr	r2, [pc, #136]	; (80016d0 <HAL_DMA_Abort+0x258>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d01d      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a21      	ldr	r2, [pc, #132]	; (80016d4 <HAL_DMA_Abort+0x25c>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d018      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1f      	ldr	r2, [pc, #124]	; (80016d8 <HAL_DMA_Abort+0x260>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d013      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a1e      	ldr	r2, [pc, #120]	; (80016dc <HAL_DMA_Abort+0x264>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d00e      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a1c      	ldr	r2, [pc, #112]	; (80016e0 <HAL_DMA_Abort+0x268>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d009      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a1b      	ldr	r2, [pc, #108]	; (80016e4 <HAL_DMA_Abort+0x26c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d004      	beq.n	8001686 <HAL_DMA_Abort+0x20e>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <HAL_DMA_Abort+0x270>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d132      	bne.n	80016ec <HAL_DMA_Abort+0x274>
 8001686:	2301      	movs	r3, #1
 8001688:	e031      	b.n	80016ee <HAL_DMA_Abort+0x276>
 800168a:	bf00      	nop
 800168c:	40020010 	.word	0x40020010
 8001690:	40020028 	.word	0x40020028
 8001694:	40020040 	.word	0x40020040
 8001698:	40020058 	.word	0x40020058
 800169c:	40020070 	.word	0x40020070
 80016a0:	40020088 	.word	0x40020088
 80016a4:	400200a0 	.word	0x400200a0
 80016a8:	400200b8 	.word	0x400200b8
 80016ac:	40020410 	.word	0x40020410
 80016b0:	40020428 	.word	0x40020428
 80016b4:	40020440 	.word	0x40020440
 80016b8:	40020458 	.word	0x40020458
 80016bc:	40020470 	.word	0x40020470
 80016c0:	40020488 	.word	0x40020488
 80016c4:	400204a0 	.word	0x400204a0
 80016c8:	400204b8 	.word	0x400204b8
 80016cc:	58025408 	.word	0x58025408
 80016d0:	5802541c 	.word	0x5802541c
 80016d4:	58025430 	.word	0x58025430
 80016d8:	58025444 	.word	0x58025444
 80016dc:	58025458 	.word	0x58025458
 80016e0:	5802546c 	.word	0x5802546c
 80016e4:	58025480 	.word	0x58025480
 80016e8:	58025494 	.word	0x58025494
 80016ec:	2300      	movs	r3, #0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d007      	beq.n	8001702 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001700:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a6d      	ldr	r2, [pc, #436]	; (80018bc <HAL_DMA_Abort+0x444>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d04a      	beq.n	80017a2 <HAL_DMA_Abort+0x32a>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a6b      	ldr	r2, [pc, #428]	; (80018c0 <HAL_DMA_Abort+0x448>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d045      	beq.n	80017a2 <HAL_DMA_Abort+0x32a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a6a      	ldr	r2, [pc, #424]	; (80018c4 <HAL_DMA_Abort+0x44c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d040      	beq.n	80017a2 <HAL_DMA_Abort+0x32a>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a68      	ldr	r2, [pc, #416]	; (80018c8 <HAL_DMA_Abort+0x450>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d03b      	beq.n	80017a2 <HAL_DMA_Abort+0x32a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a67      	ldr	r2, [pc, #412]	; (80018cc <HAL_DMA_Abort+0x454>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d036      	beq.n	80017a2 <HAL_DMA_Abort+0x32a>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a65      	ldr	r2, [pc, #404]	; (80018d0 <HAL_DMA_Abort+0x458>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d031      	beq.n	80017a2 <HAL_DMA_Abort+0x32a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a64      	ldr	r2, [pc, #400]	; (80018d4 <HAL_DMA_Abort+0x45c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d02c      	beq.n	80017a2 <HAL_DMA_Abort+0x32a>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a62      	ldr	r2, [pc, #392]	; (80018d8 <HAL_DMA_Abort+0x460>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d027      	beq.n	80017a2 <HAL_DMA_Abort+0x32a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a61      	ldr	r2, [pc, #388]	; (80018dc <HAL_DMA_Abort+0x464>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d022      	beq.n	80017a2 <HAL_DMA_Abort+0x32a>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a5f      	ldr	r2, [pc, #380]	; (80018e0 <HAL_DMA_Abort+0x468>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d01d      	beq.n	80017a2 <HAL_DMA_Abort+0x32a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a5e      	ldr	r2, [pc, #376]	; (80018e4 <HAL_DMA_Abort+0x46c>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d018      	beq.n	80017a2 <HAL_DMA_Abort+0x32a>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a5c      	ldr	r2, [pc, #368]	; (80018e8 <HAL_DMA_Abort+0x470>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d013      	beq.n	80017a2 <HAL_DMA_Abort+0x32a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a5b      	ldr	r2, [pc, #364]	; (80018ec <HAL_DMA_Abort+0x474>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d00e      	beq.n	80017a2 <HAL_DMA_Abort+0x32a>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a59      	ldr	r2, [pc, #356]	; (80018f0 <HAL_DMA_Abort+0x478>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d009      	beq.n	80017a2 <HAL_DMA_Abort+0x32a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a58      	ldr	r2, [pc, #352]	; (80018f4 <HAL_DMA_Abort+0x47c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d004      	beq.n	80017a2 <HAL_DMA_Abort+0x32a>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a56      	ldr	r2, [pc, #344]	; (80018f8 <HAL_DMA_Abort+0x480>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d108      	bne.n	80017b4 <HAL_DMA_Abort+0x33c>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0201 	bic.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	e007      	b.n	80017c4 <HAL_DMA_Abort+0x34c>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0201 	bic.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80017c4:	e013      	b.n	80017ee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017c6:	f7ff fd6b 	bl	80012a0 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b05      	cmp	r3, #5
 80017d2:	d90c      	bls.n	80017ee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2220      	movs	r2, #32
 80017d8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2203      	movs	r2, #3
 80017de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e12d      	b.n	8001a4a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1e5      	bne.n	80017c6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a2f      	ldr	r2, [pc, #188]	; (80018bc <HAL_DMA_Abort+0x444>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d04a      	beq.n	800189a <HAL_DMA_Abort+0x422>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a2d      	ldr	r2, [pc, #180]	; (80018c0 <HAL_DMA_Abort+0x448>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d045      	beq.n	800189a <HAL_DMA_Abort+0x422>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a2c      	ldr	r2, [pc, #176]	; (80018c4 <HAL_DMA_Abort+0x44c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d040      	beq.n	800189a <HAL_DMA_Abort+0x422>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a2a      	ldr	r2, [pc, #168]	; (80018c8 <HAL_DMA_Abort+0x450>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d03b      	beq.n	800189a <HAL_DMA_Abort+0x422>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a29      	ldr	r2, [pc, #164]	; (80018cc <HAL_DMA_Abort+0x454>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d036      	beq.n	800189a <HAL_DMA_Abort+0x422>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a27      	ldr	r2, [pc, #156]	; (80018d0 <HAL_DMA_Abort+0x458>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d031      	beq.n	800189a <HAL_DMA_Abort+0x422>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a26      	ldr	r2, [pc, #152]	; (80018d4 <HAL_DMA_Abort+0x45c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d02c      	beq.n	800189a <HAL_DMA_Abort+0x422>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a24      	ldr	r2, [pc, #144]	; (80018d8 <HAL_DMA_Abort+0x460>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d027      	beq.n	800189a <HAL_DMA_Abort+0x422>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a23      	ldr	r2, [pc, #140]	; (80018dc <HAL_DMA_Abort+0x464>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d022      	beq.n	800189a <HAL_DMA_Abort+0x422>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a21      	ldr	r2, [pc, #132]	; (80018e0 <HAL_DMA_Abort+0x468>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d01d      	beq.n	800189a <HAL_DMA_Abort+0x422>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a20      	ldr	r2, [pc, #128]	; (80018e4 <HAL_DMA_Abort+0x46c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d018      	beq.n	800189a <HAL_DMA_Abort+0x422>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a1e      	ldr	r2, [pc, #120]	; (80018e8 <HAL_DMA_Abort+0x470>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d013      	beq.n	800189a <HAL_DMA_Abort+0x422>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <HAL_DMA_Abort+0x474>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d00e      	beq.n	800189a <HAL_DMA_Abort+0x422>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1b      	ldr	r2, [pc, #108]	; (80018f0 <HAL_DMA_Abort+0x478>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d009      	beq.n	800189a <HAL_DMA_Abort+0x422>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a1a      	ldr	r2, [pc, #104]	; (80018f4 <HAL_DMA_Abort+0x47c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d004      	beq.n	800189a <HAL_DMA_Abort+0x422>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <HAL_DMA_Abort+0x480>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d101      	bne.n	800189e <HAL_DMA_Abort+0x426>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <HAL_DMA_Abort+0x428>
 800189e:	2300      	movs	r3, #0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d02b      	beq.n	80018fc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	223f      	movs	r2, #63	; 0x3f
 80018b4:	409a      	lsls	r2, r3
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	e02a      	b.n	8001912 <HAL_DMA_Abort+0x49a>
 80018bc:	40020010 	.word	0x40020010
 80018c0:	40020028 	.word	0x40020028
 80018c4:	40020040 	.word	0x40020040
 80018c8:	40020058 	.word	0x40020058
 80018cc:	40020070 	.word	0x40020070
 80018d0:	40020088 	.word	0x40020088
 80018d4:	400200a0 	.word	0x400200a0
 80018d8:	400200b8 	.word	0x400200b8
 80018dc:	40020410 	.word	0x40020410
 80018e0:	40020428 	.word	0x40020428
 80018e4:	40020440 	.word	0x40020440
 80018e8:	40020458 	.word	0x40020458
 80018ec:	40020470 	.word	0x40020470
 80018f0:	40020488 	.word	0x40020488
 80018f4:	400204a0 	.word	0x400204a0
 80018f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001900:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	2201      	movs	r2, #1
 800190c:	409a      	lsls	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a4f      	ldr	r2, [pc, #316]	; (8001a54 <HAL_DMA_Abort+0x5dc>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d072      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a4d      	ldr	r2, [pc, #308]	; (8001a58 <HAL_DMA_Abort+0x5e0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d06d      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a4c      	ldr	r2, [pc, #304]	; (8001a5c <HAL_DMA_Abort+0x5e4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d068      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a4a      	ldr	r2, [pc, #296]	; (8001a60 <HAL_DMA_Abort+0x5e8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d063      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a49      	ldr	r2, [pc, #292]	; (8001a64 <HAL_DMA_Abort+0x5ec>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d05e      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a47      	ldr	r2, [pc, #284]	; (8001a68 <HAL_DMA_Abort+0x5f0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d059      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a46      	ldr	r2, [pc, #280]	; (8001a6c <HAL_DMA_Abort+0x5f4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d054      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a44      	ldr	r2, [pc, #272]	; (8001a70 <HAL_DMA_Abort+0x5f8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d04f      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a43      	ldr	r2, [pc, #268]	; (8001a74 <HAL_DMA_Abort+0x5fc>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d04a      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a41      	ldr	r2, [pc, #260]	; (8001a78 <HAL_DMA_Abort+0x600>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d045      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a40      	ldr	r2, [pc, #256]	; (8001a7c <HAL_DMA_Abort+0x604>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d040      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a3e      	ldr	r2, [pc, #248]	; (8001a80 <HAL_DMA_Abort+0x608>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d03b      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a3d      	ldr	r2, [pc, #244]	; (8001a84 <HAL_DMA_Abort+0x60c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d036      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a3b      	ldr	r2, [pc, #236]	; (8001a88 <HAL_DMA_Abort+0x610>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d031      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a3a      	ldr	r2, [pc, #232]	; (8001a8c <HAL_DMA_Abort+0x614>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d02c      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a38      	ldr	r2, [pc, #224]	; (8001a90 <HAL_DMA_Abort+0x618>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d027      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a37      	ldr	r2, [pc, #220]	; (8001a94 <HAL_DMA_Abort+0x61c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d022      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a35      	ldr	r2, [pc, #212]	; (8001a98 <HAL_DMA_Abort+0x620>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d01d      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a34      	ldr	r2, [pc, #208]	; (8001a9c <HAL_DMA_Abort+0x624>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d018      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a32      	ldr	r2, [pc, #200]	; (8001aa0 <HAL_DMA_Abort+0x628>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a31      	ldr	r2, [pc, #196]	; (8001aa4 <HAL_DMA_Abort+0x62c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00e      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a2f      	ldr	r2, [pc, #188]	; (8001aa8 <HAL_DMA_Abort+0x630>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d009      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a2e      	ldr	r2, [pc, #184]	; (8001aac <HAL_DMA_Abort+0x634>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d004      	beq.n	8001a02 <HAL_DMA_Abort+0x58a>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a2c      	ldr	r2, [pc, #176]	; (8001ab0 <HAL_DMA_Abort+0x638>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d101      	bne.n	8001a06 <HAL_DMA_Abort+0x58e>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_DMA_Abort+0x590>
 8001a06:	2300      	movs	r3, #0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d015      	beq.n	8001a38 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001a14:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00c      	beq.n	8001a38 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001a36:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40020010 	.word	0x40020010
 8001a58:	40020028 	.word	0x40020028
 8001a5c:	40020040 	.word	0x40020040
 8001a60:	40020058 	.word	0x40020058
 8001a64:	40020070 	.word	0x40020070
 8001a68:	40020088 	.word	0x40020088
 8001a6c:	400200a0 	.word	0x400200a0
 8001a70:	400200b8 	.word	0x400200b8
 8001a74:	40020410 	.word	0x40020410
 8001a78:	40020428 	.word	0x40020428
 8001a7c:	40020440 	.word	0x40020440
 8001a80:	40020458 	.word	0x40020458
 8001a84:	40020470 	.word	0x40020470
 8001a88:	40020488 	.word	0x40020488
 8001a8c:	400204a0 	.word	0x400204a0
 8001a90:	400204b8 	.word	0x400204b8
 8001a94:	58025408 	.word	0x58025408
 8001a98:	5802541c 	.word	0x5802541c
 8001a9c:	58025430 	.word	0x58025430
 8001aa0:	58025444 	.word	0x58025444
 8001aa4:	58025458 	.word	0x58025458
 8001aa8:	5802546c 	.word	0x5802546c
 8001aac:	58025480 	.word	0x58025480
 8001ab0:	58025494 	.word	0x58025494

08001ab4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e205      	b.n	8001ed2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d004      	beq.n	8001adc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2280      	movs	r2, #128	; 0x80
 8001ad6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e1fa      	b.n	8001ed2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a8c      	ldr	r2, [pc, #560]	; (8001d14 <HAL_DMA_Abort_IT+0x260>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d04a      	beq.n	8001b7c <HAL_DMA_Abort_IT+0xc8>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a8b      	ldr	r2, [pc, #556]	; (8001d18 <HAL_DMA_Abort_IT+0x264>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d045      	beq.n	8001b7c <HAL_DMA_Abort_IT+0xc8>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a89      	ldr	r2, [pc, #548]	; (8001d1c <HAL_DMA_Abort_IT+0x268>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d040      	beq.n	8001b7c <HAL_DMA_Abort_IT+0xc8>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a88      	ldr	r2, [pc, #544]	; (8001d20 <HAL_DMA_Abort_IT+0x26c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d03b      	beq.n	8001b7c <HAL_DMA_Abort_IT+0xc8>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a86      	ldr	r2, [pc, #536]	; (8001d24 <HAL_DMA_Abort_IT+0x270>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d036      	beq.n	8001b7c <HAL_DMA_Abort_IT+0xc8>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a85      	ldr	r2, [pc, #532]	; (8001d28 <HAL_DMA_Abort_IT+0x274>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d031      	beq.n	8001b7c <HAL_DMA_Abort_IT+0xc8>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a83      	ldr	r2, [pc, #524]	; (8001d2c <HAL_DMA_Abort_IT+0x278>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d02c      	beq.n	8001b7c <HAL_DMA_Abort_IT+0xc8>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a82      	ldr	r2, [pc, #520]	; (8001d30 <HAL_DMA_Abort_IT+0x27c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d027      	beq.n	8001b7c <HAL_DMA_Abort_IT+0xc8>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a80      	ldr	r2, [pc, #512]	; (8001d34 <HAL_DMA_Abort_IT+0x280>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d022      	beq.n	8001b7c <HAL_DMA_Abort_IT+0xc8>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a7f      	ldr	r2, [pc, #508]	; (8001d38 <HAL_DMA_Abort_IT+0x284>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d01d      	beq.n	8001b7c <HAL_DMA_Abort_IT+0xc8>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a7d      	ldr	r2, [pc, #500]	; (8001d3c <HAL_DMA_Abort_IT+0x288>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d018      	beq.n	8001b7c <HAL_DMA_Abort_IT+0xc8>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a7c      	ldr	r2, [pc, #496]	; (8001d40 <HAL_DMA_Abort_IT+0x28c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d013      	beq.n	8001b7c <HAL_DMA_Abort_IT+0xc8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a7a      	ldr	r2, [pc, #488]	; (8001d44 <HAL_DMA_Abort_IT+0x290>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d00e      	beq.n	8001b7c <HAL_DMA_Abort_IT+0xc8>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a79      	ldr	r2, [pc, #484]	; (8001d48 <HAL_DMA_Abort_IT+0x294>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d009      	beq.n	8001b7c <HAL_DMA_Abort_IT+0xc8>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a77      	ldr	r2, [pc, #476]	; (8001d4c <HAL_DMA_Abort_IT+0x298>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d004      	beq.n	8001b7c <HAL_DMA_Abort_IT+0xc8>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a76      	ldr	r2, [pc, #472]	; (8001d50 <HAL_DMA_Abort_IT+0x29c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d101      	bne.n	8001b80 <HAL_DMA_Abort_IT+0xcc>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <HAL_DMA_Abort_IT+0xce>
 8001b80:	2300      	movs	r3, #0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d065      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2204      	movs	r2, #4
 8001b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a60      	ldr	r2, [pc, #384]	; (8001d14 <HAL_DMA_Abort_IT+0x260>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d04a      	beq.n	8001c2e <HAL_DMA_Abort_IT+0x17a>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a5e      	ldr	r2, [pc, #376]	; (8001d18 <HAL_DMA_Abort_IT+0x264>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d045      	beq.n	8001c2e <HAL_DMA_Abort_IT+0x17a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a5d      	ldr	r2, [pc, #372]	; (8001d1c <HAL_DMA_Abort_IT+0x268>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d040      	beq.n	8001c2e <HAL_DMA_Abort_IT+0x17a>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a5b      	ldr	r2, [pc, #364]	; (8001d20 <HAL_DMA_Abort_IT+0x26c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d03b      	beq.n	8001c2e <HAL_DMA_Abort_IT+0x17a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a5a      	ldr	r2, [pc, #360]	; (8001d24 <HAL_DMA_Abort_IT+0x270>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d036      	beq.n	8001c2e <HAL_DMA_Abort_IT+0x17a>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a58      	ldr	r2, [pc, #352]	; (8001d28 <HAL_DMA_Abort_IT+0x274>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d031      	beq.n	8001c2e <HAL_DMA_Abort_IT+0x17a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a57      	ldr	r2, [pc, #348]	; (8001d2c <HAL_DMA_Abort_IT+0x278>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d02c      	beq.n	8001c2e <HAL_DMA_Abort_IT+0x17a>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a55      	ldr	r2, [pc, #340]	; (8001d30 <HAL_DMA_Abort_IT+0x27c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d027      	beq.n	8001c2e <HAL_DMA_Abort_IT+0x17a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a54      	ldr	r2, [pc, #336]	; (8001d34 <HAL_DMA_Abort_IT+0x280>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d022      	beq.n	8001c2e <HAL_DMA_Abort_IT+0x17a>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a52      	ldr	r2, [pc, #328]	; (8001d38 <HAL_DMA_Abort_IT+0x284>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d01d      	beq.n	8001c2e <HAL_DMA_Abort_IT+0x17a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a51      	ldr	r2, [pc, #324]	; (8001d3c <HAL_DMA_Abort_IT+0x288>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d018      	beq.n	8001c2e <HAL_DMA_Abort_IT+0x17a>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a4f      	ldr	r2, [pc, #316]	; (8001d40 <HAL_DMA_Abort_IT+0x28c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_DMA_Abort_IT+0x17a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a4e      	ldr	r2, [pc, #312]	; (8001d44 <HAL_DMA_Abort_IT+0x290>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d00e      	beq.n	8001c2e <HAL_DMA_Abort_IT+0x17a>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a4c      	ldr	r2, [pc, #304]	; (8001d48 <HAL_DMA_Abort_IT+0x294>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d009      	beq.n	8001c2e <HAL_DMA_Abort_IT+0x17a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a4b      	ldr	r2, [pc, #300]	; (8001d4c <HAL_DMA_Abort_IT+0x298>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d004      	beq.n	8001c2e <HAL_DMA_Abort_IT+0x17a>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a49      	ldr	r2, [pc, #292]	; (8001d50 <HAL_DMA_Abort_IT+0x29c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d108      	bne.n	8001c40 <HAL_DMA_Abort_IT+0x18c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e147      	b.n	8001ed0 <HAL_DMA_Abort_IT+0x41c>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	e13e      	b.n	8001ed0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 020e 	bic.w	r2, r2, #14
 8001c60:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a2b      	ldr	r2, [pc, #172]	; (8001d14 <HAL_DMA_Abort_IT+0x260>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d04a      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x24e>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a29      	ldr	r2, [pc, #164]	; (8001d18 <HAL_DMA_Abort_IT+0x264>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d045      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x24e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a28      	ldr	r2, [pc, #160]	; (8001d1c <HAL_DMA_Abort_IT+0x268>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d040      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x24e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a26      	ldr	r2, [pc, #152]	; (8001d20 <HAL_DMA_Abort_IT+0x26c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d03b      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x24e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a25      	ldr	r2, [pc, #148]	; (8001d24 <HAL_DMA_Abort_IT+0x270>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d036      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x24e>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a23      	ldr	r2, [pc, #140]	; (8001d28 <HAL_DMA_Abort_IT+0x274>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d031      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x24e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a22      	ldr	r2, [pc, #136]	; (8001d2c <HAL_DMA_Abort_IT+0x278>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d02c      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x24e>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a20      	ldr	r2, [pc, #128]	; (8001d30 <HAL_DMA_Abort_IT+0x27c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d027      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x24e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a1f      	ldr	r2, [pc, #124]	; (8001d34 <HAL_DMA_Abort_IT+0x280>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d022      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x24e>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <HAL_DMA_Abort_IT+0x284>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d01d      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x24e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1c      	ldr	r2, [pc, #112]	; (8001d3c <HAL_DMA_Abort_IT+0x288>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d018      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x24e>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a1a      	ldr	r2, [pc, #104]	; (8001d40 <HAL_DMA_Abort_IT+0x28c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d013      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x24e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a19      	ldr	r2, [pc, #100]	; (8001d44 <HAL_DMA_Abort_IT+0x290>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d00e      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x24e>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a17      	ldr	r2, [pc, #92]	; (8001d48 <HAL_DMA_Abort_IT+0x294>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d009      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x24e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a16      	ldr	r2, [pc, #88]	; (8001d4c <HAL_DMA_Abort_IT+0x298>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d004      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x24e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <HAL_DMA_Abort_IT+0x29c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d128      	bne.n	8001d54 <HAL_DMA_Abort_IT+0x2a0>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0201 	bic.w	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e027      	b.n	8001d64 <HAL_DMA_Abort_IT+0x2b0>
 8001d14:	40020010 	.word	0x40020010
 8001d18:	40020028 	.word	0x40020028
 8001d1c:	40020040 	.word	0x40020040
 8001d20:	40020058 	.word	0x40020058
 8001d24:	40020070 	.word	0x40020070
 8001d28:	40020088 	.word	0x40020088
 8001d2c:	400200a0 	.word	0x400200a0
 8001d30:	400200b8 	.word	0x400200b8
 8001d34:	40020410 	.word	0x40020410
 8001d38:	40020428 	.word	0x40020428
 8001d3c:	40020440 	.word	0x40020440
 8001d40:	40020458 	.word	0x40020458
 8001d44:	40020470 	.word	0x40020470
 8001d48:	40020488 	.word	0x40020488
 8001d4c:	400204a0 	.word	0x400204a0
 8001d50:	400204b8 	.word	0x400204b8
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a5c      	ldr	r2, [pc, #368]	; (8001edc <HAL_DMA_Abort_IT+0x428>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d072      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a5b      	ldr	r2, [pc, #364]	; (8001ee0 <HAL_DMA_Abort_IT+0x42c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d06d      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a59      	ldr	r2, [pc, #356]	; (8001ee4 <HAL_DMA_Abort_IT+0x430>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d068      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a58      	ldr	r2, [pc, #352]	; (8001ee8 <HAL_DMA_Abort_IT+0x434>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d063      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a56      	ldr	r2, [pc, #344]	; (8001eec <HAL_DMA_Abort_IT+0x438>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d05e      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a55      	ldr	r2, [pc, #340]	; (8001ef0 <HAL_DMA_Abort_IT+0x43c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d059      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a53      	ldr	r2, [pc, #332]	; (8001ef4 <HAL_DMA_Abort_IT+0x440>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d054      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a52      	ldr	r2, [pc, #328]	; (8001ef8 <HAL_DMA_Abort_IT+0x444>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d04f      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a50      	ldr	r2, [pc, #320]	; (8001efc <HAL_DMA_Abort_IT+0x448>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d04a      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a4f      	ldr	r2, [pc, #316]	; (8001f00 <HAL_DMA_Abort_IT+0x44c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d045      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a4d      	ldr	r2, [pc, #308]	; (8001f04 <HAL_DMA_Abort_IT+0x450>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d040      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a4c      	ldr	r2, [pc, #304]	; (8001f08 <HAL_DMA_Abort_IT+0x454>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d03b      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a4a      	ldr	r2, [pc, #296]	; (8001f0c <HAL_DMA_Abort_IT+0x458>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d036      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a49      	ldr	r2, [pc, #292]	; (8001f10 <HAL_DMA_Abort_IT+0x45c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d031      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a47      	ldr	r2, [pc, #284]	; (8001f14 <HAL_DMA_Abort_IT+0x460>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d02c      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a46      	ldr	r2, [pc, #280]	; (8001f18 <HAL_DMA_Abort_IT+0x464>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d027      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a44      	ldr	r2, [pc, #272]	; (8001f1c <HAL_DMA_Abort_IT+0x468>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d022      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a43      	ldr	r2, [pc, #268]	; (8001f20 <HAL_DMA_Abort_IT+0x46c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d01d      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a41      	ldr	r2, [pc, #260]	; (8001f24 <HAL_DMA_Abort_IT+0x470>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d018      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a40      	ldr	r2, [pc, #256]	; (8001f28 <HAL_DMA_Abort_IT+0x474>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d013      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a3e      	ldr	r2, [pc, #248]	; (8001f2c <HAL_DMA_Abort_IT+0x478>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d00e      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a3d      	ldr	r2, [pc, #244]	; (8001f30 <HAL_DMA_Abort_IT+0x47c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d009      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a3b      	ldr	r2, [pc, #236]	; (8001f34 <HAL_DMA_Abort_IT+0x480>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d004      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x3a0>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a3a      	ldr	r2, [pc, #232]	; (8001f38 <HAL_DMA_Abort_IT+0x484>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d101      	bne.n	8001e58 <HAL_DMA_Abort_IT+0x3a4>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <HAL_DMA_Abort_IT+0x3a6>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d028      	beq.n	8001eb0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e8c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00c      	beq.n	8001eb0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ea4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001eae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40020010 	.word	0x40020010
 8001ee0:	40020028 	.word	0x40020028
 8001ee4:	40020040 	.word	0x40020040
 8001ee8:	40020058 	.word	0x40020058
 8001eec:	40020070 	.word	0x40020070
 8001ef0:	40020088 	.word	0x40020088
 8001ef4:	400200a0 	.word	0x400200a0
 8001ef8:	400200b8 	.word	0x400200b8
 8001efc:	40020410 	.word	0x40020410
 8001f00:	40020428 	.word	0x40020428
 8001f04:	40020440 	.word	0x40020440
 8001f08:	40020458 	.word	0x40020458
 8001f0c:	40020470 	.word	0x40020470
 8001f10:	40020488 	.word	0x40020488
 8001f14:	400204a0 	.word	0x400204a0
 8001f18:	400204b8 	.word	0x400204b8
 8001f1c:	58025408 	.word	0x58025408
 8001f20:	5802541c 	.word	0x5802541c
 8001f24:	58025430 	.word	0x58025430
 8001f28:	58025444 	.word	0x58025444
 8001f2c:	58025458 	.word	0x58025458
 8001f30:	5802546c 	.word	0x5802546c
 8001f34:	58025480 	.word	0x58025480
 8001f38:	58025494 	.word	0x58025494

08001f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f4a:	4b89      	ldr	r3, [pc, #548]	; (8002170 <HAL_GPIO_Init+0x234>)
 8001f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f4e:	e194      	b.n	800227a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	2101      	movs	r1, #1
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8186 	beq.w	8002274 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d005      	beq.n	8001f80 <HAL_GPIO_Init+0x44>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d130      	bne.n	8001fe2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	091b      	lsrs	r3, r3, #4
 8001fcc:	f003 0201 	and.w	r2, r3, #1
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	d017      	beq.n	800201e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d123      	bne.n	8002072 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	08da      	lsrs	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3208      	adds	r2, #8
 8002032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	220f      	movs	r2, #15
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	08da      	lsrs	r2, r3, #3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3208      	adds	r2, #8
 800206c:	69b9      	ldr	r1, [r7, #24]
 800206e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	2203      	movs	r2, #3
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0203 	and.w	r2, r3, #3
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80e0 	beq.w	8002274 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b4:	4b2f      	ldr	r3, [pc, #188]	; (8002174 <HAL_GPIO_Init+0x238>)
 80020b6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80020ba:	4a2e      	ldr	r2, [pc, #184]	; (8002174 <HAL_GPIO_Init+0x238>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80020c4:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <HAL_GPIO_Init+0x238>)
 80020c6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020d2:	4a29      	ldr	r2, [pc, #164]	; (8002178 <HAL_GPIO_Init+0x23c>)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	3302      	adds	r3, #2
 80020da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	220f      	movs	r2, #15
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a20      	ldr	r2, [pc, #128]	; (800217c <HAL_GPIO_Init+0x240>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d052      	beq.n	80021a4 <HAL_GPIO_Init+0x268>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a1f      	ldr	r2, [pc, #124]	; (8002180 <HAL_GPIO_Init+0x244>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d031      	beq.n	800216a <HAL_GPIO_Init+0x22e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a1e      	ldr	r2, [pc, #120]	; (8002184 <HAL_GPIO_Init+0x248>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d02b      	beq.n	8002166 <HAL_GPIO_Init+0x22a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <HAL_GPIO_Init+0x24c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d025      	beq.n	8002162 <HAL_GPIO_Init+0x226>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a1c      	ldr	r2, [pc, #112]	; (800218c <HAL_GPIO_Init+0x250>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d01f      	beq.n	800215e <HAL_GPIO_Init+0x222>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a1b      	ldr	r2, [pc, #108]	; (8002190 <HAL_GPIO_Init+0x254>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d019      	beq.n	800215a <HAL_GPIO_Init+0x21e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a1a      	ldr	r2, [pc, #104]	; (8002194 <HAL_GPIO_Init+0x258>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d013      	beq.n	8002156 <HAL_GPIO_Init+0x21a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a19      	ldr	r2, [pc, #100]	; (8002198 <HAL_GPIO_Init+0x25c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00d      	beq.n	8002152 <HAL_GPIO_Init+0x216>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a18      	ldr	r2, [pc, #96]	; (800219c <HAL_GPIO_Init+0x260>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d007      	beq.n	800214e <HAL_GPIO_Init+0x212>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a17      	ldr	r2, [pc, #92]	; (80021a0 <HAL_GPIO_Init+0x264>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d101      	bne.n	800214a <HAL_GPIO_Init+0x20e>
 8002146:	2309      	movs	r3, #9
 8002148:	e02d      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 800214a:	230a      	movs	r3, #10
 800214c:	e02b      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 800214e:	2308      	movs	r3, #8
 8002150:	e029      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 8002152:	2307      	movs	r3, #7
 8002154:	e027      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 8002156:	2306      	movs	r3, #6
 8002158:	e025      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 800215a:	2305      	movs	r3, #5
 800215c:	e023      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 800215e:	2304      	movs	r3, #4
 8002160:	e021      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 8002162:	2303      	movs	r3, #3
 8002164:	e01f      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 8002166:	2302      	movs	r3, #2
 8002168:	e01d      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 800216a:	2301      	movs	r3, #1
 800216c:	e01b      	b.n	80021a6 <HAL_GPIO_Init+0x26a>
 800216e:	bf00      	nop
 8002170:	58000080 	.word	0x58000080
 8002174:	58024400 	.word	0x58024400
 8002178:	58000400 	.word	0x58000400
 800217c:	58020000 	.word	0x58020000
 8002180:	58020400 	.word	0x58020400
 8002184:	58020800 	.word	0x58020800
 8002188:	58020c00 	.word	0x58020c00
 800218c:	58021000 	.word	0x58021000
 8002190:	58021400 	.word	0x58021400
 8002194:	58021800 	.word	0x58021800
 8002198:	58021c00 	.word	0x58021c00
 800219c:	58022000 	.word	0x58022000
 80021a0:	58022400 	.word	0x58022400
 80021a4:	2300      	movs	r3, #0
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	f002 0203 	and.w	r2, r2, #3
 80021ac:	0092      	lsls	r2, r2, #2
 80021ae:	4093      	lsls	r3, r2
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021b6:	4938      	ldr	r1, [pc, #224]	; (8002298 <HAL_GPIO_Init+0x35c>)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	3302      	adds	r3, #2
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	3301      	adds	r3, #1
 8002278:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	f47f ae63 	bne.w	8001f50 <HAL_GPIO_Init+0x14>
  }
}
 800228a:	bf00      	nop
 800228c:	bf00      	nop
 800228e:	3724      	adds	r7, #36	; 0x24
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	58000400 	.word	0x58000400

0800229c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	807b      	strh	r3, [r7, #2]
 80022a8:	4613      	mov	r3, r2
 80022aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022ac:	787b      	ldrb	r3, [r7, #1]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022b2:	887a      	ldrh	r2, [r7, #2]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80022b8:	e003      	b.n	80022c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022ba:	887b      	ldrh	r3, [r7, #2]
 80022bc:	041a      	lsls	r2, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	619a      	str	r2, [r3, #24]
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b085      	sub	sp, #20
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022e0:	887a      	ldrh	r2, [r7, #2]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4013      	ands	r3, r2
 80022e6:	041a      	lsls	r2, r3, #16
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	43d9      	mvns	r1, r3
 80022ec:	887b      	ldrh	r3, [r7, #2]
 80022ee:	400b      	ands	r3, r1
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	619a      	str	r2, [r3, #24]
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800230c:	4b29      	ldr	r3, [pc, #164]	; (80023b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	2b06      	cmp	r3, #6
 8002316:	d00a      	beq.n	800232e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002318:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	429a      	cmp	r2, r3
 8002324:	d001      	beq.n	800232a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e040      	b.n	80023ac <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	e03e      	b.n	80023ac <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800232e:	4b21      	ldr	r3, [pc, #132]	; (80023b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002336:	491f      	ldr	r1, [pc, #124]	; (80023b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4313      	orrs	r3, r2
 800233c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800233e:	f7fe ffaf 	bl	80012a0 <HAL_GetTick>
 8002342:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002344:	e009      	b.n	800235a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002346:	f7fe ffab 	bl	80012a0 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002354:	d901      	bls.n	800235a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e028      	b.n	80023ac <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800235a:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002366:	d1ee      	bne.n	8002346 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b1e      	cmp	r3, #30
 800236c:	d008      	beq.n	8002380 <HAL_PWREx_ConfigSupply+0x7c>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b2e      	cmp	r3, #46	; 0x2e
 8002372:	d005      	beq.n	8002380 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b1d      	cmp	r3, #29
 8002378:	d002      	beq.n	8002380 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b2d      	cmp	r3, #45	; 0x2d
 800237e:	d114      	bne.n	80023aa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002380:	f7fe ff8e 	bl	80012a0 <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002386:	e009      	b.n	800239c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002388:	f7fe ff8a 	bl	80012a0 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002396:	d901      	bls.n	800239c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e007      	b.n	80023ac <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a8:	d1ee      	bne.n	8002388 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	58024800 	.word	0x58024800

080023b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08c      	sub	sp, #48	; 0x30
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e3f3      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 80b3 	beq.w	800253e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d8:	4b9e      	ldr	r3, [pc, #632]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023e2:	4b9c      	ldr	r3, [pc, #624]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ea:	2b10      	cmp	r3, #16
 80023ec:	d007      	beq.n	80023fe <HAL_RCC_OscConfig+0x46>
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	2b18      	cmp	r3, #24
 80023f2:	d112      	bne.n	800241a <HAL_RCC_OscConfig+0x62>
 80023f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d10d      	bne.n	800241a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fe:	4b95      	ldr	r3, [pc, #596]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8098 	beq.w	800253c <HAL_RCC_OscConfig+0x184>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	f040 8093 	bne.w	800253c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e3cb      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002422:	d106      	bne.n	8002432 <HAL_RCC_OscConfig+0x7a>
 8002424:	4b8b      	ldr	r3, [pc, #556]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a8a      	ldr	r2, [pc, #552]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 800242a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	e058      	b.n	80024e4 <HAL_RCC_OscConfig+0x12c>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d112      	bne.n	8002460 <HAL_RCC_OscConfig+0xa8>
 800243a:	4b86      	ldr	r3, [pc, #536]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a85      	ldr	r2, [pc, #532]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 8002440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b83      	ldr	r3, [pc, #524]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a82      	ldr	r2, [pc, #520]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 800244c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b80      	ldr	r3, [pc, #512]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a7f      	ldr	r2, [pc, #508]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 8002458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e041      	b.n	80024e4 <HAL_RCC_OscConfig+0x12c>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002468:	d112      	bne.n	8002490 <HAL_RCC_OscConfig+0xd8>
 800246a:	4b7a      	ldr	r3, [pc, #488]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a79      	ldr	r2, [pc, #484]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 8002470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b77      	ldr	r3, [pc, #476]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a76      	ldr	r2, [pc, #472]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 800247c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b74      	ldr	r3, [pc, #464]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a73      	ldr	r2, [pc, #460]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e029      	b.n	80024e4 <HAL_RCC_OscConfig+0x12c>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002498:	d112      	bne.n	80024c0 <HAL_RCC_OscConfig+0x108>
 800249a:	4b6e      	ldr	r3, [pc, #440]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a6d      	ldr	r2, [pc, #436]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 80024a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b6b      	ldr	r3, [pc, #428]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a6a      	ldr	r2, [pc, #424]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 80024ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b68      	ldr	r3, [pc, #416]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a67      	ldr	r2, [pc, #412]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e011      	b.n	80024e4 <HAL_RCC_OscConfig+0x12c>
 80024c0:	4b64      	ldr	r3, [pc, #400]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a63      	ldr	r2, [pc, #396]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 80024c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b61      	ldr	r3, [pc, #388]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a60      	ldr	r2, [pc, #384]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 80024d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b5e      	ldr	r3, [pc, #376]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a5d      	ldr	r2, [pc, #372]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 80024de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80024e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7fe fed8 	bl	80012a0 <HAL_GetTick>
 80024f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f4:	f7fe fed4 	bl	80012a0 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e355      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002506:	4b53      	ldr	r3, [pc, #332]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x13c>
 8002512:	e014      	b.n	800253e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe fec4 	bl	80012a0 <HAL_GetTick>
 8002518:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251c:	f7fe fec0 	bl	80012a0 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e341      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800252e:	4b49      	ldr	r3, [pc, #292]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x164>
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 808c 	beq.w	8002664 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800254c:	4b41      	ldr	r3, [pc, #260]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002554:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002556:	4b3f      	ldr	r3, [pc, #252]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d007      	beq.n	8002572 <HAL_RCC_OscConfig+0x1ba>
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	2b18      	cmp	r3, #24
 8002566:	d137      	bne.n	80025d8 <HAL_RCC_OscConfig+0x220>
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d132      	bne.n	80025d8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002572:	4b38      	ldr	r3, [pc, #224]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <HAL_RCC_OscConfig+0x1d2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e313      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800258a:	4b32      	ldr	r3, [pc, #200]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 0219 	bic.w	r2, r3, #25
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	492f      	ldr	r1, [pc, #188]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800259c:	f7fe fe80 	bl	80012a0 <HAL_GetTick>
 80025a0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a4:	f7fe fe7c 	bl	80012a0 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e2fd      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025b6:	4b27      	ldr	r3, [pc, #156]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c2:	4b24      	ldr	r3, [pc, #144]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	061b      	lsls	r3, r3, #24
 80025d0:	4920      	ldr	r1, [pc, #128]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d6:	e045      	b.n	8002664 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d026      	beq.n	800262e <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025e0:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f023 0219 	bic.w	r2, r3, #25
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4919      	ldr	r1, [pc, #100]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f2:	f7fe fe55 	bl	80012a0 <HAL_GetTick>
 80025f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025fa:	f7fe fe51 	bl	80012a0 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e2d2      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800260c:	4b11      	ldr	r3, [pc, #68]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002618:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	061b      	lsls	r3, r3, #24
 8002626:	490b      	ldr	r1, [pc, #44]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 8002628:	4313      	orrs	r3, r2
 800262a:	604b      	str	r3, [r1, #4]
 800262c:	e01a      	b.n	8002664 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a08      	ldr	r2, [pc, #32]	; (8002654 <HAL_RCC_OscConfig+0x29c>)
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263a:	f7fe fe31 	bl	80012a0 <HAL_GetTick>
 800263e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002640:	e00a      	b.n	8002658 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002642:	f7fe fe2d 	bl	80012a0 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d903      	bls.n	8002658 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e2ae      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
 8002654:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002658:	4b99      	ldr	r3, [pc, #612]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1ee      	bne.n	8002642 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	d06a      	beq.n	8002746 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002670:	4b93      	ldr	r3, [pc, #588]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002678:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800267a:	4b91      	ldr	r3, [pc, #580]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 800267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2b08      	cmp	r3, #8
 8002684:	d007      	beq.n	8002696 <HAL_RCC_OscConfig+0x2de>
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2b18      	cmp	r3, #24
 800268a:	d11b      	bne.n	80026c4 <HAL_RCC_OscConfig+0x30c>
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b01      	cmp	r3, #1
 8002694:	d116      	bne.n	80026c4 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002696:	4b8a      	ldr	r3, [pc, #552]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <HAL_RCC_OscConfig+0x2f6>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	2b80      	cmp	r3, #128	; 0x80
 80026a8:	d001      	beq.n	80026ae <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e281      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026ae:	4b84      	ldr	r3, [pc, #528]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	061b      	lsls	r3, r3, #24
 80026bc:	4980      	ldr	r1, [pc, #512]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026c2:	e040      	b.n	8002746 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d023      	beq.n	8002714 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026cc:	4b7c      	ldr	r3, [pc, #496]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a7b      	ldr	r2, [pc, #492]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 80026d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7fe fde2 	bl	80012a0 <HAL_GetTick>
 80026dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80026e0:	f7fe fdde 	bl	80012a0 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e25f      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026f2:	4b73      	ldr	r3, [pc, #460]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026fe:	4b70      	ldr	r3, [pc, #448]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	061b      	lsls	r3, r3, #24
 800270c:	496c      	ldr	r1, [pc, #432]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 800270e:	4313      	orrs	r3, r2
 8002710:	60cb      	str	r3, [r1, #12]
 8002712:	e018      	b.n	8002746 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002714:	4b6a      	ldr	r3, [pc, #424]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a69      	ldr	r2, [pc, #420]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 800271a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800271e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe fdbe 	bl	80012a0 <HAL_GetTick>
 8002724:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002728:	f7fe fdba 	bl	80012a0 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e23b      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800273a:	4b61      	ldr	r3, [pc, #388]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d036      	beq.n	80027c0 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d019      	beq.n	800278e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800275a:	4b59      	ldr	r3, [pc, #356]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 800275c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275e:	4a58      	ldr	r2, [pc, #352]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7fe fd9b 	bl	80012a0 <HAL_GetTick>
 800276a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800276e:	f7fe fd97 	bl	80012a0 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e218      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002780:	4b4f      	ldr	r3, [pc, #316]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 8002782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x3b6>
 800278c:	e018      	b.n	80027c0 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800278e:	4b4c      	ldr	r3, [pc, #304]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 8002790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002792:	4a4b      	ldr	r2, [pc, #300]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279a:	f7fe fd81 	bl	80012a0 <HAL_GetTick>
 800279e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a2:	f7fe fd7d 	bl	80012a0 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e1fe      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027b4:	4b42      	ldr	r3, [pc, #264]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 80027b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f0      	bne.n	80027a2 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d036      	beq.n	800283a <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d019      	beq.n	8002808 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027d4:	4b3a      	ldr	r3, [pc, #232]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a39      	ldr	r2, [pc, #228]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 80027da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027e0:	f7fe fd5e 	bl	80012a0 <HAL_GetTick>
 80027e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80027e8:	f7fe fd5a 	bl	80012a0 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e1db      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027fa:	4b31      	ldr	r3, [pc, #196]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x430>
 8002806:	e018      	b.n	800283a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002808:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2c      	ldr	r2, [pc, #176]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 800280e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002812:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002814:	f7fe fd44 	bl	80012a0 <HAL_GetTick>
 8002818:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800281c:	f7fe fd40 	bl	80012a0 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e1c1      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80af 	beq.w	80029a6 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002848:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <HAL_RCC_OscConfig+0x50c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1d      	ldr	r2, [pc, #116]	; (80028c4 <HAL_RCC_OscConfig+0x50c>)
 800284e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002852:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002854:	f7fe fd24 	bl	80012a0 <HAL_GetTick>
 8002858:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800285c:	f7fe fd20 	bl	80012a0 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	; 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e1a1      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800286e:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <HAL_RCC_OscConfig+0x50c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d106      	bne.n	8002890 <HAL_RCC_OscConfig+0x4d8>
 8002882:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6713      	str	r3, [r2, #112]	; 0x70
 800288e:	e05b      	b.n	8002948 <HAL_RCC_OscConfig+0x590>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d117      	bne.n	80028c8 <HAL_RCC_OscConfig+0x510>
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	4a08      	ldr	r2, [pc, #32]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	6713      	str	r3, [r2, #112]	; 0x70
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	4a05      	ldr	r2, [pc, #20]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 80028aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ae:	6713      	str	r3, [r2, #112]	; 0x70
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	4a02      	ldr	r2, [pc, #8]	; (80028c0 <HAL_RCC_OscConfig+0x508>)
 80028b6:	f023 0304 	bic.w	r3, r3, #4
 80028ba:	6713      	str	r3, [r2, #112]	; 0x70
 80028bc:	e044      	b.n	8002948 <HAL_RCC_OscConfig+0x590>
 80028be:	bf00      	nop
 80028c0:	58024400 	.word	0x58024400
 80028c4:	58024800 	.word	0x58024800
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b05      	cmp	r3, #5
 80028ce:	d112      	bne.n	80028f6 <HAL_RCC_OscConfig+0x53e>
 80028d0:	4b95      	ldr	r3, [pc, #596]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	4a94      	ldr	r2, [pc, #592]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	6713      	str	r3, [r2, #112]	; 0x70
 80028dc:	4b92      	ldr	r3, [pc, #584]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a91      	ldr	r2, [pc, #580]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 80028e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
 80028e8:	4b8f      	ldr	r3, [pc, #572]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4a8e      	ldr	r2, [pc, #568]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6713      	str	r3, [r2, #112]	; 0x70
 80028f4:	e028      	b.n	8002948 <HAL_RCC_OscConfig+0x590>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b85      	cmp	r3, #133	; 0x85
 80028fc:	d112      	bne.n	8002924 <HAL_RCC_OscConfig+0x56c>
 80028fe:	4b8a      	ldr	r3, [pc, #552]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	4a89      	ldr	r2, [pc, #548]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	6713      	str	r3, [r2, #112]	; 0x70
 800290a:	4b87      	ldr	r3, [pc, #540]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	4a86      	ldr	r2, [pc, #536]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002914:	6713      	str	r3, [r2, #112]	; 0x70
 8002916:	4b84      	ldr	r3, [pc, #528]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291a:	4a83      	ldr	r2, [pc, #524]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6713      	str	r3, [r2, #112]	; 0x70
 8002922:	e011      	b.n	8002948 <HAL_RCC_OscConfig+0x590>
 8002924:	4b80      	ldr	r3, [pc, #512]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a7f      	ldr	r2, [pc, #508]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
 8002930:	4b7d      	ldr	r3, [pc, #500]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002934:	4a7c      	ldr	r2, [pc, #496]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002936:	f023 0304 	bic.w	r3, r3, #4
 800293a:	6713      	str	r3, [r2, #112]	; 0x70
 800293c:	4b7a      	ldr	r3, [pc, #488]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002940:	4a79      	ldr	r2, [pc, #484]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002946:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d015      	beq.n	800297c <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002950:	f7fe fca6 	bl	80012a0 <HAL_GetTick>
 8002954:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002956:	e00a      	b.n	800296e <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7fe fca2 	bl	80012a0 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	; 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e121      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800296e:	4b6e      	ldr	r3, [pc, #440]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0ee      	beq.n	8002958 <HAL_RCC_OscConfig+0x5a0>
 800297a:	e014      	b.n	80029a6 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe fc90 	bl	80012a0 <HAL_GetTick>
 8002980:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002982:	e00a      	b.n	800299a <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002984:	f7fe fc8c 	bl	80012a0 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e10b      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800299a:	4b63      	ldr	r3, [pc, #396]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1ee      	bne.n	8002984 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8100 	beq.w	8002bb0 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029b0:	4b5d      	ldr	r3, [pc, #372]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029b8:	2b18      	cmp	r3, #24
 80029ba:	f000 80bb 	beq.w	8002b34 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	f040 8095 	bne.w	8002af2 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c8:	4b57      	ldr	r3, [pc, #348]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a56      	ldr	r2, [pc, #344]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 80029ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fc64 	bl	80012a0 <HAL_GetTick>
 80029d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe fc60 	bl	80012a0 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e0e1      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ee:	4b4e      	ldr	r3, [pc, #312]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029fa:	4b4b      	ldr	r3, [pc, #300]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 80029fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029fe:	4b4b      	ldr	r3, [pc, #300]	; (8002b2c <HAL_RCC_OscConfig+0x774>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a0a:	0112      	lsls	r2, r2, #4
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	4946      	ldr	r1, [pc, #280]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	628b      	str	r3, [r1, #40]	; 0x28
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a22:	3b01      	subs	r3, #1
 8002a24:	025b      	lsls	r3, r3, #9
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	041b      	lsls	r3, r3, #16
 8002a32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	061b      	lsls	r3, r3, #24
 8002a40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a44:	4938      	ldr	r1, [pc, #224]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002a4a:	4b37      	ldr	r3, [pc, #220]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4e:	4a36      	ldr	r2, [pc, #216]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002a50:	f023 0301 	bic.w	r3, r3, #1
 8002a54:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a56:	4b34      	ldr	r3, [pc, #208]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a5a:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <HAL_RCC_OscConfig+0x778>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a62:	00d2      	lsls	r2, r2, #3
 8002a64:	4930      	ldr	r1, [pc, #192]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a6a:	4b2f      	ldr	r3, [pc, #188]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	f023 020c 	bic.w	r2, r3, #12
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	492c      	ldr	r1, [pc, #176]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a7c:	4b2a      	ldr	r3, [pc, #168]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	f023 0202 	bic.w	r2, r3, #2
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a88:	4927      	ldr	r1, [pc, #156]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a8e:	4b26      	ldr	r3, [pc, #152]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	4a25      	ldr	r2, [pc, #148]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a9a:	4b23      	ldr	r3, [pc, #140]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	4a22      	ldr	r2, [pc, #136]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002aa6:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	4a1f      	ldr	r2, [pc, #124]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002ab2:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002abe:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a19      	ldr	r2, [pc, #100]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002ac4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aca:	f7fe fbe9 	bl	80012a0 <HAL_GetTick>
 8002ace:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad2:	f7fe fbe5 	bl	80012a0 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e066      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ae4:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x71a>
 8002af0:	e05e      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af2:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002af8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afe:	f7fe fbcf 	bl	80012a0 <HAL_GetTick>
 8002b02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b06:	f7fe fbcb 	bl	80012a0 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e04c      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b18:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <HAL_RCC_OscConfig+0x770>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f0      	bne.n	8002b06 <HAL_RCC_OscConfig+0x74e>
 8002b24:	e044      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7f8>
 8002b26:	bf00      	nop
 8002b28:	58024400 	.word	0x58024400
 8002b2c:	fffffc0c 	.word	0xfffffc0c
 8002b30:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b34:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <HAL_RCC_OscConfig+0x804>)
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_RCC_OscConfig+0x804>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d031      	beq.n	8002bac <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f003 0203 	and.w	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d12a      	bne.n	8002bac <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d122      	bne.n	8002bac <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d11a      	bne.n	8002bac <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	0a5b      	lsrs	r3, r3, #9
 8002b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b82:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d111      	bne.n	8002bac <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	0c1b      	lsrs	r3, r3, #16
 8002b8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d108      	bne.n	8002bac <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	0e1b      	lsrs	r3, r3, #24
 8002b9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3730      	adds	r7, #48	; 0x30
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	58024400 	.word	0x58024400

08002bc0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e19c      	b.n	8002f0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b8a      	ldr	r3, [pc, #552]	; (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d910      	bls.n	8002c04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b87      	ldr	r3, [pc, #540]	; (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 020f 	bic.w	r2, r3, #15
 8002bea:	4985      	ldr	r1, [pc, #532]	; (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b83      	ldr	r3, [pc, #524]	; (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e184      	b.n	8002f0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d010      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	4b7b      	ldr	r3, [pc, #492]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d908      	bls.n	8002c32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c20:	4b78      	ldr	r3, [pc, #480]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	4975      	ldr	r1, [pc, #468]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d010      	beq.n	8002c60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	4b70      	ldr	r3, [pc, #448]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d908      	bls.n	8002c60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c4e:	4b6d      	ldr	r3, [pc, #436]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	496a      	ldr	r1, [pc, #424]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d010      	beq.n	8002c8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699a      	ldr	r2, [r3, #24]
 8002c70:	4b64      	ldr	r3, [pc, #400]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d908      	bls.n	8002c8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c7c:	4b61      	ldr	r3, [pc, #388]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	495e      	ldr	r1, [pc, #376]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d010      	beq.n	8002cbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69da      	ldr	r2, [r3, #28]
 8002c9e:	4b59      	ldr	r3, [pc, #356]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d908      	bls.n	8002cbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002caa:	4b56      	ldr	r3, [pc, #344]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	4953      	ldr	r1, [pc, #332]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d010      	beq.n	8002cea <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	4b4d      	ldr	r3, [pc, #308]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d908      	bls.n	8002cea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd8:	4b4a      	ldr	r3, [pc, #296]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f023 020f 	bic.w	r2, r3, #15
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4947      	ldr	r1, [pc, #284]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d055      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002cf6:	4b43      	ldr	r3, [pc, #268]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	4940      	ldr	r1, [pc, #256]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d107      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d10:	4b3c      	ldr	r3, [pc, #240]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d121      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0f6      	b.n	8002f0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d107      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d28:	4b36      	ldr	r3, [pc, #216]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d115      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0ea      	b.n	8002f0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d40:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d109      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0de      	b.n	8002f0e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d50:	4b2c      	ldr	r3, [pc, #176]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0d6      	b.n	8002f0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d60:	4b28      	ldr	r3, [pc, #160]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	f023 0207 	bic.w	r2, r3, #7
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4925      	ldr	r1, [pc, #148]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d72:	f7fe fa95 	bl	80012a0 <HAL_GetTick>
 8002d76:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d78:	e00a      	b.n	8002d90 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7a:	f7fe fa91 	bl	80012a0 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e0be      	b.n	8002f0e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d90:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d1eb      	bne.n	8002d7a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d010      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d208      	bcs.n	8002dd0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dbe:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f023 020f 	bic.w	r2, r3, #15
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	490e      	ldr	r1, [pc, #56]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d214      	bcs.n	8002e08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 020f 	bic.w	r2, r3, #15
 8002de6:	4906      	ldr	r1, [pc, #24]	; (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e086      	b.n	8002f0e <HAL_RCC_ClockConfig+0x34e>
 8002e00:	52002000 	.word	0x52002000
 8002e04:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d010      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	4b3f      	ldr	r3, [pc, #252]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d208      	bcs.n	8002e36 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e24:	4b3c      	ldr	r3, [pc, #240]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	4939      	ldr	r1, [pc, #228]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d010      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	4b34      	ldr	r3, [pc, #208]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d208      	bcs.n	8002e64 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e52:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	492e      	ldr	r1, [pc, #184]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d010      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699a      	ldr	r2, [r3, #24]
 8002e74:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d208      	bcs.n	8002e92 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e80:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	4922      	ldr	r1, [pc, #136]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d010      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d208      	bcs.n	8002ec0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002eae:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	4917      	ldr	r1, [pc, #92]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002ec0:	f000 f834 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	0a1b      	lsrs	r3, r3, #8
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	4912      	ldr	r1, [pc, #72]	; (8002f1c <HAL_RCC_ClockConfig+0x35c>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8002edc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002ede:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	4a0d      	ldr	r2, [pc, #52]	; (8002f1c <HAL_RCC_ClockConfig+0x35c>)
 8002ee8:	5cd3      	ldrb	r3, [r2, r3]
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef4:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <HAL_RCC_ClockConfig+0x360>)
 8002ef6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ef8:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <HAL_RCC_ClockConfig+0x364>)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <HAL_RCC_ClockConfig+0x368>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fd fe7e 	bl	8000c04 <HAL_InitTick>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	58024400 	.word	0x58024400
 8002f1c:	0800bb44 	.word	0x0800bb44
 8002f20:	24000004 	.word	0x24000004
 8002f24:	24000000 	.word	0x24000000
 8002f28:	24000008 	.word	0x24000008

08002f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f32:	4bb3      	ldr	r3, [pc, #716]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f3a:	2b18      	cmp	r3, #24
 8002f3c:	f200 8155 	bhi.w	80031ea <HAL_RCC_GetSysClockFreq+0x2be>
 8002f40:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08002fad 	.word	0x08002fad
 8002f4c:	080031eb 	.word	0x080031eb
 8002f50:	080031eb 	.word	0x080031eb
 8002f54:	080031eb 	.word	0x080031eb
 8002f58:	080031eb 	.word	0x080031eb
 8002f5c:	080031eb 	.word	0x080031eb
 8002f60:	080031eb 	.word	0x080031eb
 8002f64:	080031eb 	.word	0x080031eb
 8002f68:	08002fd3 	.word	0x08002fd3
 8002f6c:	080031eb 	.word	0x080031eb
 8002f70:	080031eb 	.word	0x080031eb
 8002f74:	080031eb 	.word	0x080031eb
 8002f78:	080031eb 	.word	0x080031eb
 8002f7c:	080031eb 	.word	0x080031eb
 8002f80:	080031eb 	.word	0x080031eb
 8002f84:	080031eb 	.word	0x080031eb
 8002f88:	08002fd9 	.word	0x08002fd9
 8002f8c:	080031eb 	.word	0x080031eb
 8002f90:	080031eb 	.word	0x080031eb
 8002f94:	080031eb 	.word	0x080031eb
 8002f98:	080031eb 	.word	0x080031eb
 8002f9c:	080031eb 	.word	0x080031eb
 8002fa0:	080031eb 	.word	0x080031eb
 8002fa4:	080031eb 	.word	0x080031eb
 8002fa8:	08002fdf 	.word	0x08002fdf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fac:	4b94      	ldr	r3, [pc, #592]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d009      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002fb8:	4b91      	ldr	r3, [pc, #580]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	08db      	lsrs	r3, r3, #3
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	4a90      	ldr	r2, [pc, #576]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002fca:	e111      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fcc:	4b8d      	ldr	r3, [pc, #564]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fce:	61bb      	str	r3, [r7, #24]
    break;
 8002fd0:	e10e      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002fd2:	4b8d      	ldr	r3, [pc, #564]	; (8003208 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fd4:	61bb      	str	r3, [r7, #24]
    break;
 8002fd6:	e10b      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002fd8:	4b8c      	ldr	r3, [pc, #560]	; (800320c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002fda:	61bb      	str	r3, [r7, #24]
    break;
 8002fdc:	e108      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fde:	4b88      	ldr	r3, [pc, #544]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002fe8:	4b85      	ldr	r3, [pc, #532]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ff2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ff4:	4b82      	ldr	r3, [pc, #520]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002ffe:	4b80      	ldr	r3, [pc, #512]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003002:	08db      	lsrs	r3, r3, #3
 8003004:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	fb02 f303 	mul.w	r3, r2, r3
 800300e:	ee07 3a90 	vmov	s15, r3
 8003012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003016:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 80e1 	beq.w	80031e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b02      	cmp	r3, #2
 8003026:	f000 8083 	beq.w	8003130 <HAL_RCC_GetSysClockFreq+0x204>
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b02      	cmp	r3, #2
 800302e:	f200 80a1 	bhi.w	8003174 <HAL_RCC_GetSysClockFreq+0x248>
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0x114>
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d056      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800303e:	e099      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003040:	4b6f      	ldr	r3, [pc, #444]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b00      	cmp	r3, #0
 800304a:	d02d      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800304c:	4b6c      	ldr	r3, [pc, #432]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	08db      	lsrs	r3, r3, #3
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	4a6b      	ldr	r2, [pc, #428]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
 800305c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	ee07 3a90 	vmov	s15, r3
 8003064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	ee07 3a90 	vmov	s15, r3
 800306e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003076:	4b62      	ldr	r3, [pc, #392]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003086:	ed97 6a02 	vldr	s12, [r7, #8]
 800308a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003210 <HAL_RCC_GetSysClockFreq+0x2e4>
 800308e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800309a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800309e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80030a6:	e087      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003214 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ba:	4b51      	ldr	r3, [pc, #324]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003210 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030ea:	e065      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003218 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030fe:	4b40      	ldr	r3, [pc, #256]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800310e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003112:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003210 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800311a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800311e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800312e:	e043      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	ee07 3a90 	vmov	s15, r3
 8003136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800321c <HAL_RCC_GetSysClockFreq+0x2f0>
 800313e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003142:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003152:	ed97 6a02 	vldr	s12, [r7, #8]
 8003156:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003210 <HAL_RCC_GetSysClockFreq+0x2e4>
 800315a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800315e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800316a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003172:	e021      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003218 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003186:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003196:	ed97 6a02 	vldr	s12, [r7, #8]
 800319a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003210 <HAL_RCC_GetSysClockFreq+0x2e4>
 800319e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031b6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80031b8:	4b11      	ldr	r3, [pc, #68]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031bc:	0a5b      	lsrs	r3, r3, #9
 80031be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031c2:	3301      	adds	r3, #1
 80031c4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	ee07 3a90 	vmov	s15, r3
 80031cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80031d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031dc:	ee17 3a90 	vmov	r3, s15
 80031e0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80031e2:	e005      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61bb      	str	r3, [r7, #24]
    break;
 80031e8:	e002      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80031ea:	4b07      	ldr	r3, [pc, #28]	; (8003208 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031ec:	61bb      	str	r3, [r7, #24]
    break;
 80031ee:	bf00      	nop
  }

  return sysclockfreq;
 80031f0:	69bb      	ldr	r3, [r7, #24]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3724      	adds	r7, #36	; 0x24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	58024400 	.word	0x58024400
 8003204:	03d09000 	.word	0x03d09000
 8003208:	003d0900 	.word	0x003d0900
 800320c:	007a1200 	.word	0x007a1200
 8003210:	46000000 	.word	0x46000000
 8003214:	4c742400 	.word	0x4c742400
 8003218:	4a742400 	.word	0x4a742400
 800321c:	4af42400 	.word	0x4af42400

08003220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003226:	f7ff fe81 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 800322a:	4602      	mov	r2, r0
 800322c:	4b10      	ldr	r3, [pc, #64]	; (8003270 <HAL_RCC_GetHCLKFreq+0x50>)
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	490f      	ldr	r1, [pc, #60]	; (8003274 <HAL_RCC_GetHCLKFreq+0x54>)
 8003238:	5ccb      	ldrb	r3, [r1, r3]
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	fa22 f303 	lsr.w	r3, r2, r3
 8003242:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003244:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <HAL_RCC_GetHCLKFreq+0x50>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	4a09      	ldr	r2, [pc, #36]	; (8003274 <HAL_RCC_GetHCLKFreq+0x54>)
 800324e:	5cd3      	ldrb	r3, [r2, r3]
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	fa22 f303 	lsr.w	r3, r2, r3
 800325a:	4a07      	ldr	r2, [pc, #28]	; (8003278 <HAL_RCC_GetHCLKFreq+0x58>)
 800325c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800325e:	4a07      	ldr	r2, [pc, #28]	; (800327c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <HAL_RCC_GetHCLKFreq+0x58>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	58024400 	.word	0x58024400
 8003274:	0800bb44 	.word	0x0800bb44
 8003278:	24000004 	.word	0x24000004
 800327c:	24000000 	.word	0x24000000

08003280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003284:	f7ff ffcc 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4904      	ldr	r1, [pc, #16]	; (80032a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	58024400 	.word	0x58024400
 80032a8:	0800bb44 	.word	0x0800bb44

080032ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80032b0:	f7ff ffb6 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4904      	ldr	r1, [pc, #16]	; (80032d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	58024400 	.word	0x58024400
 80032d4:	0800bb44 	.word	0x0800bb44

080032d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	223f      	movs	r2, #63	; 0x3f
 80032e6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032e8:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <HAL_RCC_GetClockConfig+0x7c>)
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f003 0207 	and.w	r2, r3, #7
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80032f4:	4b17      	ldr	r3, [pc, #92]	; (8003354 <HAL_RCC_GetClockConfig+0x7c>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8003300:	4b14      	ldr	r3, [pc, #80]	; (8003354 <HAL_RCC_GetClockConfig+0x7c>)
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	f003 020f 	and.w	r2, r3, #15
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <HAL_RCC_GetClockConfig+0x7c>)
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8003318:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <HAL_RCC_GetClockConfig+0x7c>)
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCC_GetClockConfig+0x7c>)
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8003330:	4b08      	ldr	r3, [pc, #32]	; (8003354 <HAL_RCC_GetClockConfig+0x7c>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_RCC_GetClockConfig+0x80>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 020f 	and.w	r2, r3, #15
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	601a      	str	r2, [r3, #0]
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	58024400 	.word	0x58024400
 8003358:	52002000 	.word	0x52002000

0800335c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003364:	2300      	movs	r3, #0
 8003366:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003368:	2300      	movs	r3, #0
 800336a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d03f      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800337c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003380:	d02a      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003382:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003386:	d824      	bhi.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003388:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800338c:	d018      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800338e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003392:	d81e      	bhi.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800339c:	d007      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 800339e:	e018      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a0:	4ba6      	ldr	r3, [pc, #664]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	4aa5      	ldr	r2, [pc, #660]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80033ac:	e015      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3304      	adds	r3, #4
 80033b2:	2102      	movs	r1, #2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f001 f99b 	bl	80046f0 <RCCEx_PLL2_Config>
 80033ba:	4603      	mov	r3, r0
 80033bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80033be:	e00c      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3324      	adds	r3, #36	; 0x24
 80033c4:	2102      	movs	r1, #2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f001 fa44 	bl	8004854 <RCCEx_PLL3_Config>
 80033cc:	4603      	mov	r3, r0
 80033ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80033d0:	e003      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	75fb      	strb	r3, [r7, #23]
      break;
 80033d6:	e000      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033da:	7dfb      	ldrb	r3, [r7, #23]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d109      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80033e0:	4b96      	ldr	r3, [pc, #600]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ec:	4993      	ldr	r1, [pc, #588]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	650b      	str	r3, [r1, #80]	; 0x50
 80033f2:	e001      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f4:	7dfb      	ldrb	r3, [r7, #23]
 80033f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d03d      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003408:	2b04      	cmp	r3, #4
 800340a:	d826      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800340c:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800340e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003412:	bf00      	nop
 8003414:	08003429 	.word	0x08003429
 8003418:	08003437 	.word	0x08003437
 800341c:	08003449 	.word	0x08003449
 8003420:	08003461 	.word	0x08003461
 8003424:	08003461 	.word	0x08003461
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003428:	4b84      	ldr	r3, [pc, #528]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	4a83      	ldr	r2, [pc, #524]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800342e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003432:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003434:	e015      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3304      	adds	r3, #4
 800343a:	2100      	movs	r1, #0
 800343c:	4618      	mov	r0, r3
 800343e:	f001 f957 	bl	80046f0 <RCCEx_PLL2_Config>
 8003442:	4603      	mov	r3, r0
 8003444:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003446:	e00c      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3324      	adds	r3, #36	; 0x24
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f001 fa00 	bl	8004854 <RCCEx_PLL3_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003458:	e003      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	75fb      	strb	r3, [r7, #23]
      break;
 800345e:	e000      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d109      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003468:	4b74      	ldr	r3, [pc, #464]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800346a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346c:	f023 0207 	bic.w	r2, r3, #7
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003474:	4971      	ldr	r1, [pc, #452]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003476:	4313      	orrs	r3, r2
 8003478:	650b      	str	r3, [r1, #80]	; 0x50
 800347a:	e001      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347c:	7dfb      	ldrb	r3, [r7, #23]
 800347e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003488:	2b00      	cmp	r3, #0
 800348a:	d04a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003494:	d031      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003496:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800349a:	d82b      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800349c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a0:	d02d      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80034a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a6:	d825      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80034a8:	2bc0      	cmp	r3, #192	; 0xc0
 80034aa:	d02a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80034ac:	2bc0      	cmp	r3, #192	; 0xc0
 80034ae:	d821      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80034b0:	2b80      	cmp	r3, #128	; 0x80
 80034b2:	d016      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80034b4:	2b80      	cmp	r3, #128	; 0x80
 80034b6:	d81d      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d007      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80034c0:	e018      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c2:	4b5e      	ldr	r3, [pc, #376]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	4a5d      	ldr	r2, [pc, #372]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80034ce:	e019      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3304      	adds	r3, #4
 80034d4:	2100      	movs	r1, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f001 f90a 	bl	80046f0 <RCCEx_PLL2_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80034e0:	e010      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3324      	adds	r3, #36	; 0x24
 80034e6:	2100      	movs	r1, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 f9b3 	bl	8004854 <RCCEx_PLL3_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80034f2:	e007      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	75fb      	strb	r3, [r7, #23]
      break;
 80034f8:	e004      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80034fa:	bf00      	nop
 80034fc:	e002      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80034fe:	bf00      	nop
 8003500:	e000      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003502:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003504:	7dfb      	ldrb	r3, [r7, #23]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800350a:	4b4c      	ldr	r3, [pc, #304]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800350c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003516:	4949      	ldr	r1, [pc, #292]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003518:	4313      	orrs	r3, r2
 800351a:	650b      	str	r3, [r1, #80]	; 0x50
 800351c:	e001      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351e:	7dfb      	ldrb	r3, [r7, #23]
 8003520:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352a:	2b00      	cmp	r3, #0
 800352c:	d04f      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003532:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003536:	d036      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003538:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800353c:	d830      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800353e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003542:	d032      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003548:	d82a      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800354a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800354e:	d02e      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003550:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003554:	d824      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355a:	d018      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x232>
 800355c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003560:	d81e      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800356a:	d007      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x220>
 800356c:	e018      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800356e:	4b33      	ldr	r3, [pc, #204]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	4a32      	ldr	r2, [pc, #200]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003578:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800357a:	e019      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3304      	adds	r3, #4
 8003580:	2100      	movs	r1, #0
 8003582:	4618      	mov	r0, r3
 8003584:	f001 f8b4 	bl	80046f0 <RCCEx_PLL2_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800358c:	e010      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3324      	adds	r3, #36	; 0x24
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f001 f95d 	bl	8004854 <RCCEx_PLL3_Config>
 800359a:	4603      	mov	r3, r0
 800359c:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800359e:	e007      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	75fb      	strb	r3, [r7, #23]
      break;
 80035a4:	e004      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80035a6:	bf00      	nop
 80035a8:	e002      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80035aa:	bf00      	nop
 80035ac:	e000      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80035ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80035b6:	4b21      	ldr	r3, [pc, #132]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ba:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c2:	491e      	ldr	r1, [pc, #120]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	650b      	str	r3, [r1, #80]	; 0x50
 80035c8:	e001      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ca:	7dfb      	ldrb	r3, [r7, #23]
 80035cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d034      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035de:	2b30      	cmp	r3, #48	; 0x30
 80035e0:	d01c      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80035e2:	2b30      	cmp	r3, #48	; 0x30
 80035e4:	d817      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d00c      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d813      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d016      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d10f      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	4a10      	ldr	r2, [pc, #64]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003600:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003602:	e00e      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	2102      	movs	r1, #2
 800360a:	4618      	mov	r0, r3
 800360c:	f001 f870 	bl	80046f0 <RCCEx_PLL2_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003614:	e005      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	75fb      	strb	r3, [r7, #23]
      break;
 800361a:	e002      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 800361c:	bf00      	nop
 800361e:	e000      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003620:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003622:	7dfb      	ldrb	r3, [r7, #23]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10b      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003628:	4b04      	ldr	r3, [pc, #16]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800362a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003634:	4901      	ldr	r1, [pc, #4]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003636:	4313      	orrs	r3, r2
 8003638:	64cb      	str	r3, [r1, #76]	; 0x4c
 800363a:	e003      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800363c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d047      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003658:	d030      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800365a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800365e:	d82a      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003660:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003664:	d02c      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003666:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800366a:	d824      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800366c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003670:	d018      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003676:	d81e      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800367c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003680:	d007      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003682:	e018      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003684:	4bb0      	ldr	r3, [pc, #704]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	4aaf      	ldr	r2, [pc, #700]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800368a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800368e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003690:	e017      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3304      	adds	r3, #4
 8003696:	2100      	movs	r1, #0
 8003698:	4618      	mov	r0, r3
 800369a:	f001 f829 	bl	80046f0 <RCCEx_PLL2_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80036a2:	e00e      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3324      	adds	r3, #36	; 0x24
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f001 f8d2 	bl	8004854 <RCCEx_PLL3_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80036b4:	e005      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	75fb      	strb	r3, [r7, #23]
      break;
 80036ba:	e002      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80036bc:	bf00      	nop
 80036be:	e000      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80036c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036c2:	7dfb      	ldrb	r3, [r7, #23]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d109      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036c8:	4b9f      	ldr	r3, [pc, #636]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80036ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036cc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d4:	499c      	ldr	r1, [pc, #624]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	650b      	str	r3, [r1, #80]	; 0x50
 80036da:	e001      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d049      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f4:	d02e      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80036f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036fa:	d828      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80036fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003700:	d02a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003702:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003706:	d822      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003708:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800370c:	d026      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x400>
 800370e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003712:	d81c      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003714:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003718:	d010      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800371a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800371e:	d816      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01d      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003728:	d111      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3304      	adds	r3, #4
 800372e:	2101      	movs	r1, #1
 8003730:	4618      	mov	r0, r3
 8003732:	f000 ffdd 	bl	80046f0 <RCCEx_PLL2_Config>
 8003736:	4603      	mov	r3, r0
 8003738:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800373a:	e012      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3324      	adds	r3, #36	; 0x24
 8003740:	2101      	movs	r1, #1
 8003742:	4618      	mov	r0, r3
 8003744:	f001 f886 	bl	8004854 <RCCEx_PLL3_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800374c:	e009      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	75fb      	strb	r3, [r7, #23]
      break;
 8003752:	e006      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003754:	bf00      	nop
 8003756:	e004      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003758:	bf00      	nop
 800375a:	e002      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800375c:	bf00      	nop
 800375e:	e000      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003762:	7dfb      	ldrb	r3, [r7, #23]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d109      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003768:	4b77      	ldr	r3, [pc, #476]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800376a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003774:	4974      	ldr	r1, [pc, #464]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003776:	4313      	orrs	r3, r2
 8003778:	650b      	str	r3, [r1, #80]	; 0x50
 800377a:	e001      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d053      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003792:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003796:	d034      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003798:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800379c:	d82e      	bhi.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800379e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037a2:	d030      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80037a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037a8:	d828      	bhi.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80037aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ae:	d02c      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80037b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b4:	d822      	bhi.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80037b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037ba:	d028      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80037bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037c0:	d81c      	bhi.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80037c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037c6:	d010      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80037c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037cc:	d816      	bhi.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d01f      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80037d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037d6:	d111      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3304      	adds	r3, #4
 80037dc:	2101      	movs	r1, #1
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 ff86 	bl	80046f0 <RCCEx_PLL2_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80037e8:	e014      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3324      	adds	r3, #36	; 0x24
 80037ee:	2101      	movs	r1, #1
 80037f0:	4618      	mov	r0, r3
 80037f2:	f001 f82f 	bl	8004854 <RCCEx_PLL3_Config>
 80037f6:	4603      	mov	r3, r0
 80037f8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80037fa:	e00b      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003800:	e008      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003802:	bf00      	nop
 8003804:	e006      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003806:	bf00      	nop
 8003808:	e004      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800380a:	bf00      	nop
 800380c:	e002      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800380e:	bf00      	nop
 8003810:	e000      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800381a:	4b4b      	ldr	r3, [pc, #300]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800381c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003828:	4947      	ldr	r1, [pc, #284]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800382a:	4313      	orrs	r3, r2
 800382c:	658b      	str	r3, [r1, #88]	; 0x58
 800382e:	e001      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d02f      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003848:	d00e      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800384a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800384e:	d814      	bhi.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003850:	2b00      	cmp	r3, #0
 8003852:	d015      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003854:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003858:	d10f      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800385a:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	4a3a      	ldr	r2, [pc, #232]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003864:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003866:	e00c      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3304      	adds	r3, #4
 800386c:	2101      	movs	r1, #1
 800386e:	4618      	mov	r0, r3
 8003870:	f000 ff3e 	bl	80046f0 <RCCEx_PLL2_Config>
 8003874:	4603      	mov	r3, r0
 8003876:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003878:	e003      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	75fb      	strb	r3, [r7, #23]
      break;
 800387e:	e000      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003882:	7dfb      	ldrb	r3, [r7, #23]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d109      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003888:	4b2f      	ldr	r3, [pc, #188]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800388a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003894:	492c      	ldr	r1, [pc, #176]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003896:	4313      	orrs	r3, r2
 8003898:	650b      	str	r3, [r1, #80]	; 0x50
 800389a:	e001      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389c:	7dfb      	ldrb	r3, [r7, #23]
 800389e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d032      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d81b      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x590>
 80038b4:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	080038f3 	.word	0x080038f3
 80038c0:	080038cd 	.word	0x080038cd
 80038c4:	080038db 	.word	0x080038db
 80038c8:	080038f3 	.word	0x080038f3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038cc:	4b1e      	ldr	r3, [pc, #120]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80038d8:	e00c      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3304      	adds	r3, #4
 80038de:	2102      	movs	r1, #2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 ff05 	bl	80046f0 <RCCEx_PLL2_Config>
 80038e6:	4603      	mov	r3, r0
 80038e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80038ea:	e003      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	75fb      	strb	r3, [r7, #23]
      break;
 80038f0:	e000      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 80038f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038f4:	7dfb      	ldrb	r3, [r7, #23]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d109      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80038fa:	4b13      	ldr	r3, [pc, #76]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fe:	f023 0203 	bic.w	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	4910      	ldr	r1, [pc, #64]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003908:	4313      	orrs	r3, r2
 800390a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800390c:	e001      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390e:	7dfb      	ldrb	r3, [r7, #23]
 8003910:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 808a 	beq.w	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003920:	4b0a      	ldr	r3, [pc, #40]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a09      	ldr	r2, [pc, #36]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800392c:	f7fd fcb8 	bl	80012a0 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003932:	e00d      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003934:	f7fd fcb4 	bl	80012a0 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	; 0x64
 8003940:	d906      	bls.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	75fb      	strb	r3, [r7, #23]
        break;
 8003946:	e009      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8003948:	58024400 	.word	0x58024400
 800394c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003950:	4bba      	ldr	r3, [pc, #744]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0eb      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 800395c:	7dfb      	ldrb	r3, [r7, #23]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d166      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003962:	4bb7      	ldr	r3, [pc, #732]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003964:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800396c:	4053      	eors	r3, r2
 800396e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003972:	2b00      	cmp	r3, #0
 8003974:	d013      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003976:	4bb2      	ldr	r3, [pc, #712]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003980:	4baf      	ldr	r3, [pc, #700]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	4aae      	ldr	r2, [pc, #696]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800398c:	4bac      	ldr	r3, [pc, #688]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	4aab      	ldr	r2, [pc, #684]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003996:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003998:	4aa9      	ldr	r2, [pc, #676]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a8:	d115      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039aa:	f7fd fc79 	bl	80012a0 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039b0:	e00b      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b2:	f7fd fc75 	bl	80012a0 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d902      	bls.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	75fb      	strb	r3, [r7, #23]
            break;
 80039c8:	e005      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039ca:	4b9d      	ldr	r3, [pc, #628]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0ed      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80039d6:	7dfb      	ldrb	r3, [r7, #23]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d126      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ea:	d10d      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80039ec:	4b94      	ldr	r3, [pc, #592]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039fa:	0919      	lsrs	r1, r3, #4
 80039fc:	4b91      	ldr	r3, [pc, #580]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80039fe:	400b      	ands	r3, r1
 8003a00:	498f      	ldr	r1, [pc, #572]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	610b      	str	r3, [r1, #16]
 8003a06:	e005      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003a08:	4b8d      	ldr	r3, [pc, #564]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	4a8c      	ldr	r2, [pc, #560]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a12:	6113      	str	r3, [r2, #16]
 8003a14:	4b8a      	ldr	r3, [pc, #552]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a22:	4987      	ldr	r1, [pc, #540]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	670b      	str	r3, [r1, #112]	; 0x70
 8003a28:	e004      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
 8003a2c:	75bb      	strb	r3, [r7, #22]
 8003a2e:	e001      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
 8003a32:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d07f      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a46:	2b28      	cmp	r3, #40	; 0x28
 8003a48:	d866      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003a4a:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a50:	08003b1f 	.word	0x08003b1f
 8003a54:	08003b19 	.word	0x08003b19
 8003a58:	08003b19 	.word	0x08003b19
 8003a5c:	08003b19 	.word	0x08003b19
 8003a60:	08003b19 	.word	0x08003b19
 8003a64:	08003b19 	.word	0x08003b19
 8003a68:	08003b19 	.word	0x08003b19
 8003a6c:	08003b19 	.word	0x08003b19
 8003a70:	08003af5 	.word	0x08003af5
 8003a74:	08003b19 	.word	0x08003b19
 8003a78:	08003b19 	.word	0x08003b19
 8003a7c:	08003b19 	.word	0x08003b19
 8003a80:	08003b19 	.word	0x08003b19
 8003a84:	08003b19 	.word	0x08003b19
 8003a88:	08003b19 	.word	0x08003b19
 8003a8c:	08003b19 	.word	0x08003b19
 8003a90:	08003b07 	.word	0x08003b07
 8003a94:	08003b19 	.word	0x08003b19
 8003a98:	08003b19 	.word	0x08003b19
 8003a9c:	08003b19 	.word	0x08003b19
 8003aa0:	08003b19 	.word	0x08003b19
 8003aa4:	08003b19 	.word	0x08003b19
 8003aa8:	08003b19 	.word	0x08003b19
 8003aac:	08003b19 	.word	0x08003b19
 8003ab0:	08003b1f 	.word	0x08003b1f
 8003ab4:	08003b19 	.word	0x08003b19
 8003ab8:	08003b19 	.word	0x08003b19
 8003abc:	08003b19 	.word	0x08003b19
 8003ac0:	08003b19 	.word	0x08003b19
 8003ac4:	08003b19 	.word	0x08003b19
 8003ac8:	08003b19 	.word	0x08003b19
 8003acc:	08003b19 	.word	0x08003b19
 8003ad0:	08003b1f 	.word	0x08003b1f
 8003ad4:	08003b19 	.word	0x08003b19
 8003ad8:	08003b19 	.word	0x08003b19
 8003adc:	08003b19 	.word	0x08003b19
 8003ae0:	08003b19 	.word	0x08003b19
 8003ae4:	08003b19 	.word	0x08003b19
 8003ae8:	08003b19 	.word	0x08003b19
 8003aec:	08003b19 	.word	0x08003b19
 8003af0:	08003b1f 	.word	0x08003b1f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3304      	adds	r3, #4
 8003af8:	2101      	movs	r1, #1
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fdf8 	bl	80046f0 <RCCEx_PLL2_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003b04:	e00c      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3324      	adds	r3, #36	; 0x24
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fea1 	bl	8004854 <RCCEx_PLL3_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003b16:	e003      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b1c:	e000      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b26:	4b46      	ldr	r3, [pc, #280]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b34:	4942      	ldr	r1, [pc, #264]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	654b      	str	r3, [r1, #84]	; 0x54
 8003b3a:	e001      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
 8003b3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d038      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	d821      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003b54:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003b9f 	.word	0x08003b9f
 8003b60:	08003b75 	.word	0x08003b75
 8003b64:	08003b87 	.word	0x08003b87
 8003b68:	08003b9f 	.word	0x08003b9f
 8003b6c:	08003b9f 	.word	0x08003b9f
 8003b70:	08003b9f 	.word	0x08003b9f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fdb8 	bl	80046f0 <RCCEx_PLL2_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003b84:	e00c      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3324      	adds	r3, #36	; 0x24
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fe61 	bl	8004854 <RCCEx_PLL3_Config>
 8003b92:	4603      	mov	r3, r0
 8003b94:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003b96:	e003      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b9c:	e000      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ba0:	7dfb      	ldrb	r3, [r7, #23]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d109      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ba6:	4b26      	ldr	r3, [pc, #152]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003baa:	f023 0207 	bic.w	r2, r3, #7
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bb2:	4923      	ldr	r1, [pc, #140]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	654b      	str	r3, [r1, #84]	; 0x54
 8003bb8:	e001      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bba:	7dfb      	ldrb	r3, [r7, #23]
 8003bbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d040      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bd0:	2b05      	cmp	r3, #5
 8003bd2:	d821      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003bd4:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bda:	bf00      	nop
 8003bdc:	08003c1f 	.word	0x08003c1f
 8003be0:	08003bf5 	.word	0x08003bf5
 8003be4:	08003c07 	.word	0x08003c07
 8003be8:	08003c1f 	.word	0x08003c1f
 8003bec:	08003c1f 	.word	0x08003c1f
 8003bf0:	08003c1f 	.word	0x08003c1f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fd78 	bl	80046f0 <RCCEx_PLL2_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003c04:	e00c      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3324      	adds	r3, #36	; 0x24
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fe21 	bl	8004854 <RCCEx_PLL3_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003c16:	e003      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c1c:	e000      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003c1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c20:	7dfb      	ldrb	r3, [r7, #23]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d110      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2a:	f023 0207 	bic.w	r2, r3, #7
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c34:	4902      	ldr	r1, [pc, #8]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	658b      	str	r3, [r1, #88]	; 0x58
 8003c3a:	e007      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003c3c:	58024800 	.word	0x58024800
 8003c40:	58024400 	.word	0x58024400
 8003c44:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
 8003c4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d04b      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c62:	d02e      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c68:	d828      	bhi.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6e:	d02a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c74:	d822      	bhi.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003c76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c7a:	d026      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003c7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c80:	d81c      	bhi.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c86:	d010      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c8c:	d816      	bhi.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d01d      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003c92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c96:	d111      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fd26 	bl	80046f0 <RCCEx_PLL2_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ca8:	e012      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3324      	adds	r3, #36	; 0x24
 8003cae:	2102      	movs	r1, #2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fdcf 	bl	8004854 <RCCEx_PLL3_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003cba:	e009      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc0:	e006      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003cc2:	bf00      	nop
 8003cc4:	e004      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003cc6:	bf00      	nop
 8003cc8:	e002      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003cca:	bf00      	nop
 8003ccc:	e000      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003cce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cd0:	7dfb      	ldrb	r3, [r7, #23]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10a      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cd6:	4bb3      	ldr	r3, [pc, #716]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cda:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce4:	49af      	ldr	r1, [pc, #700]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	654b      	str	r3, [r1, #84]	; 0x54
 8003cea:	e001      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
 8003cee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d04b      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d06:	d02e      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003d08:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d0c:	d828      	bhi.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d12:	d02a      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d18:	d822      	bhi.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003d1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d1e:	d026      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003d20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d24:	d81c      	bhi.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d2a:	d010      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d30:	d816      	bhi.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d01d      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3a:	d111      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	2100      	movs	r1, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fcd4 	bl	80046f0 <RCCEx_PLL2_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d4c:	e012      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3324      	adds	r3, #36	; 0x24
 8003d52:	2102      	movs	r1, #2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fd7d 	bl	8004854 <RCCEx_PLL3_Config>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d5e:	e009      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	75fb      	strb	r3, [r7, #23]
      break;
 8003d64:	e006      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003d66:	bf00      	nop
 8003d68:	e004      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003d6a:	bf00      	nop
 8003d6c:	e002      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003d6e:	bf00      	nop
 8003d70:	e000      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d74:	7dfb      	ldrb	r3, [r7, #23]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10a      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d7a:	4b8a      	ldr	r3, [pc, #552]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d88:	4986      	ldr	r1, [pc, #536]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	658b      	str	r3, [r1, #88]	; 0x58
 8003d8e:	e001      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d90:	7dfb      	ldrb	r3, [r7, #23]
 8003d92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d04b      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003da6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003daa:	d02e      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003dac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003db0:	d828      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db6:	d02a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dbc:	d822      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003dbe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003dc2:	d026      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003dc4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003dc8:	d81c      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003dca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dce:	d010      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003dd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dd4:	d816      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d01d      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dde:	d111      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3304      	adds	r3, #4
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fc82 	bl	80046f0 <RCCEx_PLL2_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003df0:	e012      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3324      	adds	r3, #36	; 0x24
 8003df6:	2102      	movs	r1, #2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fd2b 	bl	8004854 <RCCEx_PLL3_Config>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e02:	e009      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	75fb      	strb	r3, [r7, #23]
      break;
 8003e08:	e006      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003e0a:	bf00      	nop
 8003e0c:	e004      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003e0e:	bf00      	nop
 8003e10:	e002      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003e12:	bf00      	nop
 8003e14:	e000      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e1e:	4b61      	ldr	r3, [pc, #388]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e2c:	495d      	ldr	r1, [pc, #372]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	658b      	str	r3, [r1, #88]	; 0x58
 8003e32:	e001      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4e:	d10a      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3324      	adds	r3, #36	; 0x24
 8003e54:	2102      	movs	r1, #2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fcfc 	bl	8004854 <RCCEx_PLL3_Config>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003e66:	4b4f      	ldr	r3, [pc, #316]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e74:	494b      	ldr	r1, [pc, #300]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d01a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e90:	d10a      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3324      	adds	r3, #36	; 0x24
 8003e96:	2102      	movs	r1, #2
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 fcdb 	bl	8004854 <RCCEx_PLL3_Config>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ea8:	4b3e      	ldr	r3, [pc, #248]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eb6:	493b      	ldr	r1, [pc, #236]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d034      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ece:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ed2:	d01d      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003ed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ed8:	d817      	bhi.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee2:	d009      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ee4:	e011      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fbff 	bl	80046f0 <RCCEx_PLL2_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003ef6:	e00c      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3324      	adds	r3, #36	; 0x24
 8003efc:	2102      	movs	r1, #2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fca8 	bl	8004854 <RCCEx_PLL3_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f08:	e003      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f0e:	e000      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10a      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f18:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f26:	491f      	ldr	r1, [pc, #124]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	658b      	str	r3, [r1, #88]	; 0x58
 8003f2c:	e001      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2e:	7dfb      	ldrb	r3, [r7, #23]
 8003f30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d036      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f48:	d01c      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003f4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f4e:	d816      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003f50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f54:	d003      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003f56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f5a:	d007      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003f5c:	e00f      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f5e:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	4a10      	ldr	r2, [pc, #64]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003f6a:	e00c      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3324      	adds	r3, #36	; 0x24
 8003f70:	2101      	movs	r1, #1
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fc6e 	bl	8004854 <RCCEx_PLL3_Config>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003f7c:	e003      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	75fb      	strb	r3, [r7, #23]
      break;
 8003f82:	e000      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f86:	7dfb      	ldrb	r3, [r7, #23]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10d      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f9a:	4902      	ldr	r1, [pc, #8]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	654b      	str	r3, [r1, #84]	; 0x54
 8003fa0:	e004      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8003fa2:	bf00      	nop
 8003fa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
 8003faa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d029      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc4:	d007      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8003fc6:	e00f      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fc8:	4b69      	ldr	r3, [pc, #420]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	4a68      	ldr	r2, [pc, #416]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003fd4:	e00b      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	2102      	movs	r1, #2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fb87 	bl	80046f0 <RCCEx_PLL2_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003fe6:	e002      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	75fb      	strb	r3, [r7, #23]
      break;
 8003fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fee:	7dfb      	ldrb	r3, [r7, #23]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d109      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003ff4:	4b5e      	ldr	r3, [pc, #376]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004000:	495b      	ldr	r1, [pc, #364]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004002:	4313      	orrs	r3, r2
 8004004:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004006:	e001      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004008:	7dfb      	ldrb	r3, [r7, #23]
 800400a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3324      	adds	r3, #36	; 0x24
 800401c:	2102      	movs	r1, #2
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fc18 	bl	8004854 <RCCEx_PLL3_Config>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d032      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004040:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004044:	d017      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8004046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800404a:	d811      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800404c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004050:	d013      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8004052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004056:	d80b      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d010      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xd22>
 800405c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004060:	d106      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004062:	4b43      	ldr	r3, [pc, #268]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	4a42      	ldr	r2, [pc, #264]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800406e:	e007      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	75fb      	strb	r3, [r7, #23]
      break;
 8004074:	e004      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004076:	bf00      	nop
 8004078:	e002      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800407a:	bf00      	nop
 800407c:	e000      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800407e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004080:	7dfb      	ldrb	r3, [r7, #23]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10a      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004086:	4b3a      	ldr	r3, [pc, #232]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004094:	4936      	ldr	r1, [pc, #216]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004096:	4313      	orrs	r3, r2
 8004098:	654b      	str	r3, [r1, #84]	; 0x54
 800409a:	e001      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409c:	7dfb      	ldrb	r3, [r7, #23]
 800409e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040ac:	4b30      	ldr	r3, [pc, #192]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040b8:	492d      	ldr	r1, [pc, #180]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d008      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040ca:	4b29      	ldr	r3, [pc, #164]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d6:	4926      	ldr	r1, [pc, #152]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80040e8:	4b21      	ldr	r3, [pc, #132]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	491e      	ldr	r1, [pc, #120]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00d      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004106:	4b1a      	ldr	r3, [pc, #104]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	4a19      	ldr	r2, [pc, #100]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800410c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004110:	6113      	str	r3, [r2, #16]
 8004112:	4b17      	ldr	r3, [pc, #92]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800411c:	4914      	ldr	r1, [pc, #80]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800411e:	4313      	orrs	r3, r2
 8004120:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	da08      	bge.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800412a:	4b11      	ldr	r3, [pc, #68]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800412c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004136:	490e      	ldr	r1, [pc, #56]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004138:	4313      	orrs	r3, r2
 800413a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d009      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004148:	4b09      	ldr	r3, [pc, #36]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800414a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004156:	4906      	ldr	r1, [pc, #24]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004158:	4313      	orrs	r3, r2
 800415a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800415c:	7dbb      	ldrb	r3, [r7, #22]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	e000      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	58024400 	.word	0x58024400

08004174 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004178:	f7ff f852 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 800417c:	4602      	mov	r2, r0
 800417e:	4b06      	ldr	r3, [pc, #24]	; (8004198 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	091b      	lsrs	r3, r3, #4
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	4904      	ldr	r1, [pc, #16]	; (800419c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800418a:	5ccb      	ldrb	r3, [r1, r3]
 800418c:	f003 031f 	and.w	r3, r3, #31
 8004190:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004194:	4618      	mov	r0, r3
 8004196:	bd80      	pop	{r7, pc}
 8004198:	58024400 	.word	0x58024400
 800419c:	0800bb44 	.word	0x0800bb44

080041a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b089      	sub	sp, #36	; 0x24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041a8:	4ba1      	ldr	r3, [pc, #644]	; (8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80041b2:	4b9f      	ldr	r3, [pc, #636]	; (8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b6:	0b1b      	lsrs	r3, r3, #12
 80041b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80041be:	4b9c      	ldr	r3, [pc, #624]	; (8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c2:	091b      	lsrs	r3, r3, #4
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80041ca:	4b99      	ldr	r3, [pc, #612]	; (8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ce:	08db      	lsrs	r3, r3, #3
 80041d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	fb02 f303 	mul.w	r3, r2, r3
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 8111 	beq.w	8004410 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	f000 8083 	beq.w	80042fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	f200 80a1 	bhi.w	8004340 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d056      	beq.n	80042b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800420a:	e099      	b.n	8004340 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800420c:	4b88      	ldr	r3, [pc, #544]	; (8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d02d      	beq.n	8004274 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004218:	4b85      	ldr	r3, [pc, #532]	; (8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	08db      	lsrs	r3, r3, #3
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	4a84      	ldr	r2, [pc, #528]	; (8004434 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
 8004228:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	ee07 3a90 	vmov	s15, r3
 8004230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004242:	4b7b      	ldr	r3, [pc, #492]	; (8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004252:	ed97 6a03 	vldr	s12, [r7, #12]
 8004256:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800425a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800425e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800426a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800426e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004272:	e087      	b.n	8004384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	ee07 3a90 	vmov	s15, r3
 800427a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800427e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800443c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004286:	4b6a      	ldr	r3, [pc, #424]	; (8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800428e:	ee07 3a90 	vmov	s15, r3
 8004292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004296:	ed97 6a03 	vldr	s12, [r7, #12]
 800429a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800429e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042b6:	e065      	b.n	8004384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	ee07 3a90 	vmov	s15, r3
 80042be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004440 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80042c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ca:	4b59      	ldr	r3, [pc, #356]	; (8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042da:	ed97 6a03 	vldr	s12, [r7, #12]
 80042de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042fa:	e043      	b.n	8004384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004306:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004444 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800430a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800430e:	4b48      	ldr	r3, [pc, #288]	; (8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800431e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004322:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800432a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800432e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800433e:	e021      	b.n	8004384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	ee07 3a90 	vmov	s15, r3
 8004346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004440 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800434e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004352:	4b37      	ldr	r3, [pc, #220]	; (8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004362:	ed97 6a03 	vldr	s12, [r7, #12]
 8004366:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800436a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800436e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800437a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004382:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004384:	4b2a      	ldr	r3, [pc, #168]	; (8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	0a5b      	lsrs	r3, r3, #9
 800438a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800439a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800439e:	edd7 6a07 	vldr	s13, [r7, #28]
 80043a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043aa:	ee17 2a90 	vmov	r2, s15
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80043b2:	4b1f      	ldr	r3, [pc, #124]	; (8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	0c1b      	lsrs	r3, r3, #16
 80043b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043bc:	ee07 3a90 	vmov	s15, r3
 80043c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80043d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043d8:	ee17 2a90 	vmov	r2, s15
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80043e0:	4b13      	ldr	r3, [pc, #76]	; (8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	0e1b      	lsrs	r3, r3, #24
 80043e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80043fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004406:	ee17 2a90 	vmov	r2, s15
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800440e:	e008      	b.n	8004422 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	609a      	str	r2, [r3, #8]
}
 8004422:	bf00      	nop
 8004424:	3724      	adds	r7, #36	; 0x24
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	58024400 	.word	0x58024400
 8004434:	03d09000 	.word	0x03d09000
 8004438:	46000000 	.word	0x46000000
 800443c:	4c742400 	.word	0x4c742400
 8004440:	4a742400 	.word	0x4a742400
 8004444:	4af42400 	.word	0x4af42400

08004448 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004448:	b480      	push	{r7}
 800444a:	b089      	sub	sp, #36	; 0x24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004450:	4ba1      	ldr	r3, [pc, #644]	; (80046d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800445a:	4b9f      	ldr	r3, [pc, #636]	; (80046d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	0d1b      	lsrs	r3, r3, #20
 8004460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004464:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004466:	4b9c      	ldr	r3, [pc, #624]	; (80046d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446a:	0a1b      	lsrs	r3, r3, #8
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004472:	4b99      	ldr	r3, [pc, #612]	; (80046d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004476:	08db      	lsrs	r3, r3, #3
 8004478:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	fb02 f303 	mul.w	r3, r2, r3
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 8111 	beq.w	80046b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	2b02      	cmp	r3, #2
 800449a:	f000 8083 	beq.w	80045a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	f200 80a1 	bhi.w	80045e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d056      	beq.n	8004560 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80044b2:	e099      	b.n	80045e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044b4:	4b88      	ldr	r3, [pc, #544]	; (80046d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0320 	and.w	r3, r3, #32
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d02d      	beq.n	800451c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044c0:	4b85      	ldr	r3, [pc, #532]	; (80046d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	08db      	lsrs	r3, r3, #3
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	4a84      	ldr	r2, [pc, #528]	; (80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
 80044d0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	ee07 3a90 	vmov	s15, r3
 80044d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ea:	4b7b      	ldr	r3, [pc, #492]	; (80046d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80044fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80046e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800450a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800450e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004516:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800451a:	e087      	b.n	800462c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004526:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800452a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800452e:	4b6a      	ldr	r3, [pc, #424]	; (80046d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800453e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004542:	eddf 5a67 	vldr	s11, [pc, #412]	; 80046e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800454a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800454e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800455e:	e065      	b.n	800462c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80046e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800456e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004572:	4b59      	ldr	r3, [pc, #356]	; (80046d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004582:	ed97 6a03 	vldr	s12, [r7, #12]
 8004586:	eddf 5a56 	vldr	s11, [pc, #344]	; 80046e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800458a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800458e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800459a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045a2:	e043      	b.n	800462c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80046ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80045b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045b6:	4b48      	ldr	r3, [pc, #288]	; (80046d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80046e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045e6:	e021      	b.n	800462c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80046e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80045f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045fa:	4b37      	ldr	r3, [pc, #220]	; (80046d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460a:	ed97 6a03 	vldr	s12, [r7, #12]
 800460e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80046e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800461a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800461e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004626:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800462a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800462c:	4b2a      	ldr	r3, [pc, #168]	; (80046d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	0a5b      	lsrs	r3, r3, #9
 8004632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004642:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004646:	edd7 6a07 	vldr	s13, [r7, #28]
 800464a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800464e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004652:	ee17 2a90 	vmov	r2, s15
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800465a:	4b1f      	ldr	r3, [pc, #124]	; (80046d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	0c1b      	lsrs	r3, r3, #16
 8004660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004664:	ee07 3a90 	vmov	s15, r3
 8004668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004670:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004674:	edd7 6a07 	vldr	s13, [r7, #28]
 8004678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800467c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004680:	ee17 2a90 	vmov	r2, s15
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004688:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	0e1b      	lsrs	r3, r3, #24
 800468e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800469e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80046a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ae:	ee17 2a90 	vmov	r2, s15
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80046b6:	e008      	b.n	80046ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	609a      	str	r2, [r3, #8]
}
 80046ca:	bf00      	nop
 80046cc:	3724      	adds	r7, #36	; 0x24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	58024400 	.word	0x58024400
 80046dc:	03d09000 	.word	0x03d09000
 80046e0:	46000000 	.word	0x46000000
 80046e4:	4c742400 	.word	0x4c742400
 80046e8:	4a742400 	.word	0x4a742400
 80046ec:	4af42400 	.word	0x4af42400

080046f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046fe:	4b53      	ldr	r3, [pc, #332]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	2b03      	cmp	r3, #3
 8004708:	d101      	bne.n	800470e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e099      	b.n	8004842 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800470e:	4b4f      	ldr	r3, [pc, #316]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a4e      	ldr	r2, [pc, #312]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 8004714:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800471a:	f7fc fdc1 	bl	80012a0 <HAL_GetTick>
 800471e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004720:	e008      	b.n	8004734 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004722:	f7fc fdbd 	bl	80012a0 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e086      	b.n	8004842 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004734:	4b45      	ldr	r3, [pc, #276]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f0      	bne.n	8004722 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004740:	4b42      	ldr	r3, [pc, #264]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	031b      	lsls	r3, r3, #12
 800474e:	493f      	ldr	r1, [pc, #252]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 8004750:	4313      	orrs	r3, r2
 8004752:	628b      	str	r3, [r1, #40]	; 0x28
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	3b01      	subs	r3, #1
 800475a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	3b01      	subs	r3, #1
 8004764:	025b      	lsls	r3, r3, #9
 8004766:	b29b      	uxth	r3, r3
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	3b01      	subs	r3, #1
 8004770:	041b      	lsls	r3, r3, #16
 8004772:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	3b01      	subs	r3, #1
 800477e:	061b      	lsls	r3, r3, #24
 8004780:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004784:	4931      	ldr	r1, [pc, #196]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 8004786:	4313      	orrs	r3, r2
 8004788:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800478a:	4b30      	ldr	r3, [pc, #192]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	492d      	ldr	r1, [pc, #180]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 8004798:	4313      	orrs	r3, r2
 800479a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800479c:	4b2b      	ldr	r3, [pc, #172]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	f023 0220 	bic.w	r2, r3, #32
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	4928      	ldr	r1, [pc, #160]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80047ae:	4b27      	ldr	r3, [pc, #156]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 80047b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b2:	4a26      	ldr	r2, [pc, #152]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 80047b4:	f023 0310 	bic.w	r3, r3, #16
 80047b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80047ba:	4b24      	ldr	r3, [pc, #144]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 80047bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047be:	4b24      	ldr	r3, [pc, #144]	; (8004850 <RCCEx_PLL2_Config+0x160>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	69d2      	ldr	r2, [r2, #28]
 80047c6:	00d2      	lsls	r2, r2, #3
 80047c8:	4920      	ldr	r1, [pc, #128]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80047ce:	4b1f      	ldr	r3, [pc, #124]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	4a1e      	ldr	r2, [pc, #120]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 80047d4:	f043 0310 	orr.w	r3, r3, #16
 80047d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d106      	bne.n	80047ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80047e0:	4b1a      	ldr	r3, [pc, #104]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	4a19      	ldr	r2, [pc, #100]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 80047e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047ec:	e00f      	b.n	800480e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d106      	bne.n	8004802 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80047f4:	4b15      	ldr	r3, [pc, #84]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	4a14      	ldr	r2, [pc, #80]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 80047fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004800:	e005      	b.n	800480e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004802:	4b12      	ldr	r3, [pc, #72]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004806:	4a11      	ldr	r2, [pc, #68]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 8004808:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800480c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800480e:	4b0f      	ldr	r3, [pc, #60]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a0e      	ldr	r2, [pc, #56]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 8004814:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004818:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481a:	f7fc fd41 	bl	80012a0 <HAL_GetTick>
 800481e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004820:	e008      	b.n	8004834 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004822:	f7fc fd3d 	bl	80012a0 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e006      	b.n	8004842 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004834:	4b05      	ldr	r3, [pc, #20]	; (800484c <RCCEx_PLL2_Config+0x15c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004840:	7bfb      	ldrb	r3, [r7, #15]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	58024400 	.word	0x58024400
 8004850:	ffff0007 	.word	0xffff0007

08004854 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004862:	4b53      	ldr	r3, [pc, #332]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b03      	cmp	r3, #3
 800486c:	d101      	bne.n	8004872 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e099      	b.n	80049a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004872:	4b4f      	ldr	r3, [pc, #316]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a4e      	ldr	r2, [pc, #312]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 8004878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800487c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800487e:	f7fc fd0f 	bl	80012a0 <HAL_GetTick>
 8004882:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004884:	e008      	b.n	8004898 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004886:	f7fc fd0b 	bl	80012a0 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e086      	b.n	80049a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004898:	4b45      	ldr	r3, [pc, #276]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1f0      	bne.n	8004886 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80048a4:	4b42      	ldr	r3, [pc, #264]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 80048a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	051b      	lsls	r3, r3, #20
 80048b2:	493f      	ldr	r1, [pc, #252]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	628b      	str	r3, [r1, #40]	; 0x28
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	3b01      	subs	r3, #1
 80048be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	025b      	lsls	r3, r3, #9
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	041b      	lsls	r3, r3, #16
 80048d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	3b01      	subs	r3, #1
 80048e2:	061b      	lsls	r3, r3, #24
 80048e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048e8:	4931      	ldr	r1, [pc, #196]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80048ee:	4b30      	ldr	r3, [pc, #192]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	492d      	ldr	r1, [pc, #180]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004900:	4b2b      	ldr	r3, [pc, #172]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	4928      	ldr	r1, [pc, #160]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 800490e:	4313      	orrs	r3, r2
 8004910:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004912:	4b27      	ldr	r3, [pc, #156]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	4a26      	ldr	r2, [pc, #152]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 8004918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800491c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800491e:	4b24      	ldr	r3, [pc, #144]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 8004920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004922:	4b24      	ldr	r3, [pc, #144]	; (80049b4 <RCCEx_PLL3_Config+0x160>)
 8004924:	4013      	ands	r3, r2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	69d2      	ldr	r2, [r2, #28]
 800492a:	00d2      	lsls	r2, r2, #3
 800492c:	4920      	ldr	r1, [pc, #128]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 800492e:	4313      	orrs	r3, r2
 8004930:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004932:	4b1f      	ldr	r3, [pc, #124]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 8004938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800493c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d106      	bne.n	8004952 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004944:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	4a19      	ldr	r2, [pc, #100]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 800494a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800494e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004950:	e00f      	b.n	8004972 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d106      	bne.n	8004966 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004958:	4b15      	ldr	r3, [pc, #84]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	4a14      	ldr	r2, [pc, #80]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 800495e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004962:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004964:	e005      	b.n	8004972 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004966:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 8004968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496a:	4a11      	ldr	r2, [pc, #68]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 800496c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004970:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004972:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a0e      	ldr	r2, [pc, #56]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 8004978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800497e:	f7fc fc8f 	bl	80012a0 <HAL_GetTick>
 8004982:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004984:	e008      	b.n	8004998 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004986:	f7fc fc8b 	bl	80012a0 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e006      	b.n	80049a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <RCCEx_PLL3_Config+0x15c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	58024400 	.word	0x58024400
 80049b4:	ffff0007 	.word	0xffff0007

080049b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e049      	b.n	8004a5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fc faa0 	bl	8000f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3304      	adds	r3, #4
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f000 fd72 	bl	80054e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d001      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e054      	b.n	8004b2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a26      	ldr	r2, [pc, #152]	; (8004b38 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d022      	beq.n	8004ae8 <HAL_TIM_Base_Start_IT+0x80>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aaa:	d01d      	beq.n	8004ae8 <HAL_TIM_Base_Start_IT+0x80>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a22      	ldr	r2, [pc, #136]	; (8004b3c <HAL_TIM_Base_Start_IT+0xd4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d018      	beq.n	8004ae8 <HAL_TIM_Base_Start_IT+0x80>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a21      	ldr	r2, [pc, #132]	; (8004b40 <HAL_TIM_Base_Start_IT+0xd8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d013      	beq.n	8004ae8 <HAL_TIM_Base_Start_IT+0x80>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1f      	ldr	r2, [pc, #124]	; (8004b44 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00e      	beq.n	8004ae8 <HAL_TIM_Base_Start_IT+0x80>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a1e      	ldr	r2, [pc, #120]	; (8004b48 <HAL_TIM_Base_Start_IT+0xe0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d009      	beq.n	8004ae8 <HAL_TIM_Base_Start_IT+0x80>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1c      	ldr	r2, [pc, #112]	; (8004b4c <HAL_TIM_Base_Start_IT+0xe4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d004      	beq.n	8004ae8 <HAL_TIM_Base_Start_IT+0x80>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1b      	ldr	r2, [pc, #108]	; (8004b50 <HAL_TIM_Base_Start_IT+0xe8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d115      	bne.n	8004b14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	4b19      	ldr	r3, [pc, #100]	; (8004b54 <HAL_TIM_Base_Start_IT+0xec>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b06      	cmp	r3, #6
 8004af8:	d015      	beq.n	8004b26 <HAL_TIM_Base_Start_IT+0xbe>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b00:	d011      	beq.n	8004b26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f042 0201 	orr.w	r2, r2, #1
 8004b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b12:	e008      	b.n	8004b26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0201 	orr.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	e000      	b.n	8004b28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40010000 	.word	0x40010000
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40000800 	.word	0x40000800
 8004b44:	40000c00 	.word	0x40000c00
 8004b48:	40010400 	.word	0x40010400
 8004b4c:	40001800 	.word	0x40001800
 8004b50:	40014000 	.word	0x40014000
 8004b54:	00010007 	.word	0x00010007

08004b58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e049      	b.n	8004bfe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f841 	bl	8004c06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3304      	adds	r3, #4
 8004b94:	4619      	mov	r1, r3
 8004b96:	4610      	mov	r0, r2
 8004b98:	f000 fca2 	bl	80054e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
	...

08004c1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d109      	bne.n	8004c40 <HAL_TIM_PWM_Start+0x24>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	bf14      	ite	ne
 8004c38:	2301      	movne	r3, #1
 8004c3a:	2300      	moveq	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	e03c      	b.n	8004cba <HAL_TIM_PWM_Start+0x9e>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d109      	bne.n	8004c5a <HAL_TIM_PWM_Start+0x3e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	bf14      	ite	ne
 8004c52:	2301      	movne	r3, #1
 8004c54:	2300      	moveq	r3, #0
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	e02f      	b.n	8004cba <HAL_TIM_PWM_Start+0x9e>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d109      	bne.n	8004c74 <HAL_TIM_PWM_Start+0x58>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	bf14      	ite	ne
 8004c6c:	2301      	movne	r3, #1
 8004c6e:	2300      	moveq	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	e022      	b.n	8004cba <HAL_TIM_PWM_Start+0x9e>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2b0c      	cmp	r3, #12
 8004c78:	d109      	bne.n	8004c8e <HAL_TIM_PWM_Start+0x72>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	bf14      	ite	ne
 8004c86:	2301      	movne	r3, #1
 8004c88:	2300      	moveq	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	e015      	b.n	8004cba <HAL_TIM_PWM_Start+0x9e>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d109      	bne.n	8004ca8 <HAL_TIM_PWM_Start+0x8c>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	bf14      	ite	ne
 8004ca0:	2301      	movne	r3, #1
 8004ca2:	2300      	moveq	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	e008      	b.n	8004cba <HAL_TIM_PWM_Start+0x9e>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	bf14      	ite	ne
 8004cb4:	2301      	movne	r3, #1
 8004cb6:	2300      	moveq	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e0a1      	b.n	8004e06 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d104      	bne.n	8004cd2 <HAL_TIM_PWM_Start+0xb6>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd0:	e023      	b.n	8004d1a <HAL_TIM_PWM_Start+0xfe>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d104      	bne.n	8004ce2 <HAL_TIM_PWM_Start+0xc6>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ce0:	e01b      	b.n	8004d1a <HAL_TIM_PWM_Start+0xfe>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d104      	bne.n	8004cf2 <HAL_TIM_PWM_Start+0xd6>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cf0:	e013      	b.n	8004d1a <HAL_TIM_PWM_Start+0xfe>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b0c      	cmp	r3, #12
 8004cf6:	d104      	bne.n	8004d02 <HAL_TIM_PWM_Start+0xe6>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d00:	e00b      	b.n	8004d1a <HAL_TIM_PWM_Start+0xfe>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b10      	cmp	r3, #16
 8004d06:	d104      	bne.n	8004d12 <HAL_TIM_PWM_Start+0xf6>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d10:	e003      	b.n	8004d1a <HAL_TIM_PWM_Start+0xfe>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2202      	movs	r2, #2
 8004d16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	6839      	ldr	r1, [r7, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 ffea 	bl	8005cfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a38      	ldr	r2, [pc, #224]	; (8004e10 <HAL_TIM_PWM_Start+0x1f4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d013      	beq.n	8004d5a <HAL_TIM_PWM_Start+0x13e>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a37      	ldr	r2, [pc, #220]	; (8004e14 <HAL_TIM_PWM_Start+0x1f8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00e      	beq.n	8004d5a <HAL_TIM_PWM_Start+0x13e>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a35      	ldr	r2, [pc, #212]	; (8004e18 <HAL_TIM_PWM_Start+0x1fc>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d009      	beq.n	8004d5a <HAL_TIM_PWM_Start+0x13e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a34      	ldr	r2, [pc, #208]	; (8004e1c <HAL_TIM_PWM_Start+0x200>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d004      	beq.n	8004d5a <HAL_TIM_PWM_Start+0x13e>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a32      	ldr	r2, [pc, #200]	; (8004e20 <HAL_TIM_PWM_Start+0x204>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d101      	bne.n	8004d5e <HAL_TIM_PWM_Start+0x142>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <HAL_TIM_PWM_Start+0x144>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d007      	beq.n	8004d74 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d72:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a25      	ldr	r2, [pc, #148]	; (8004e10 <HAL_TIM_PWM_Start+0x1f4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d022      	beq.n	8004dc4 <HAL_TIM_PWM_Start+0x1a8>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d86:	d01d      	beq.n	8004dc4 <HAL_TIM_PWM_Start+0x1a8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a25      	ldr	r2, [pc, #148]	; (8004e24 <HAL_TIM_PWM_Start+0x208>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d018      	beq.n	8004dc4 <HAL_TIM_PWM_Start+0x1a8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a24      	ldr	r2, [pc, #144]	; (8004e28 <HAL_TIM_PWM_Start+0x20c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d013      	beq.n	8004dc4 <HAL_TIM_PWM_Start+0x1a8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a22      	ldr	r2, [pc, #136]	; (8004e2c <HAL_TIM_PWM_Start+0x210>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00e      	beq.n	8004dc4 <HAL_TIM_PWM_Start+0x1a8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a1a      	ldr	r2, [pc, #104]	; (8004e14 <HAL_TIM_PWM_Start+0x1f8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d009      	beq.n	8004dc4 <HAL_TIM_PWM_Start+0x1a8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1e      	ldr	r2, [pc, #120]	; (8004e30 <HAL_TIM_PWM_Start+0x214>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d004      	beq.n	8004dc4 <HAL_TIM_PWM_Start+0x1a8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a16      	ldr	r2, [pc, #88]	; (8004e18 <HAL_TIM_PWM_Start+0x1fc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d115      	bne.n	8004df0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	4b1a      	ldr	r3, [pc, #104]	; (8004e34 <HAL_TIM_PWM_Start+0x218>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b06      	cmp	r3, #6
 8004dd4:	d015      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x1e6>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ddc:	d011      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f042 0201 	orr.w	r2, r2, #1
 8004dec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dee:	e008      	b.n	8004e02 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0201 	orr.w	r2, r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	e000      	b.n	8004e04 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	40010000 	.word	0x40010000
 8004e14:	40010400 	.word	0x40010400
 8004e18:	40014000 	.word	0x40014000
 8004e1c:	40014400 	.word	0x40014400
 8004e20:	40014800 	.word	0x40014800
 8004e24:	40000400 	.word	0x40000400
 8004e28:	40000800 	.word	0x40000800
 8004e2c:	40000c00 	.word	0x40000c00
 8004e30:	40001800 	.word	0x40001800
 8004e34:	00010007 	.word	0x00010007

08004e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d122      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d11b      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f06f 0202 	mvn.w	r2, #2
 8004e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fb12 	bl	80054a4 <HAL_TIM_IC_CaptureCallback>
 8004e80:	e005      	b.n	8004e8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fb04 	bl	8005490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fb15 	bl	80054b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d122      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d11b      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0204 	mvn.w	r2, #4
 8004eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fae8 	bl	80054a4 <HAL_TIM_IC_CaptureCallback>
 8004ed4:	e005      	b.n	8004ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fada 	bl	8005490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 faeb 	bl	80054b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b08      	cmp	r3, #8
 8004ef4:	d122      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d11b      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0208 	mvn.w	r2, #8
 8004f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2204      	movs	r2, #4
 8004f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fabe 	bl	80054a4 <HAL_TIM_IC_CaptureCallback>
 8004f28:	e005      	b.n	8004f36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fab0 	bl	8005490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fac1 	bl	80054b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0310 	and.w	r3, r3, #16
 8004f46:	2b10      	cmp	r3, #16
 8004f48:	d122      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b10      	cmp	r3, #16
 8004f56:	d11b      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0210 	mvn.w	r2, #16
 8004f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2208      	movs	r2, #8
 8004f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fa94 	bl	80054a4 <HAL_TIM_IC_CaptureCallback>
 8004f7c:	e005      	b.n	8004f8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fa86 	bl	8005490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 fa97 	bl	80054b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d10e      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d107      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f06f 0201 	mvn.w	r2, #1
 8004fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fb fdee 	bl	8000b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc6:	2b80      	cmp	r3, #128	; 0x80
 8004fc8:	d10e      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd4:	2b80      	cmp	r3, #128	; 0x80
 8004fd6:	d107      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 ff48 	bl	8005e78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ff6:	d10e      	bne.n	8005016 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005002:	2b80      	cmp	r3, #128	; 0x80
 8005004:	d107      	bne.n	8005016 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800500e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 ff3b 	bl	8005e8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005020:	2b40      	cmp	r3, #64	; 0x40
 8005022:	d10e      	bne.n	8005042 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502e:	2b40      	cmp	r3, #64	; 0x40
 8005030:	d107      	bne.n	8005042 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800503a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 fa45 	bl	80054cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b20      	cmp	r3, #32
 800504e:	d10e      	bne.n	800506e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b20      	cmp	r3, #32
 800505c:	d107      	bne.n	800506e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f06f 0220 	mvn.w	r2, #32
 8005066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fefb 	bl	8005e64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800506e:	bf00      	nop
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005092:	2302      	movs	r3, #2
 8005094:	e0ff      	b.n	8005296 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b14      	cmp	r3, #20
 80050a2:	f200 80f0 	bhi.w	8005286 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80050a6:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ac:	08005101 	.word	0x08005101
 80050b0:	08005287 	.word	0x08005287
 80050b4:	08005287 	.word	0x08005287
 80050b8:	08005287 	.word	0x08005287
 80050bc:	08005141 	.word	0x08005141
 80050c0:	08005287 	.word	0x08005287
 80050c4:	08005287 	.word	0x08005287
 80050c8:	08005287 	.word	0x08005287
 80050cc:	08005183 	.word	0x08005183
 80050d0:	08005287 	.word	0x08005287
 80050d4:	08005287 	.word	0x08005287
 80050d8:	08005287 	.word	0x08005287
 80050dc:	080051c3 	.word	0x080051c3
 80050e0:	08005287 	.word	0x08005287
 80050e4:	08005287 	.word	0x08005287
 80050e8:	08005287 	.word	0x08005287
 80050ec:	08005205 	.word	0x08005205
 80050f0:	08005287 	.word	0x08005287
 80050f4:	08005287 	.word	0x08005287
 80050f8:	08005287 	.word	0x08005287
 80050fc:	08005245 	.word	0x08005245
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fa84 	bl	8005614 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0208 	orr.w	r2, r2, #8
 800511a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0204 	bic.w	r2, r2, #4
 800512a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6999      	ldr	r1, [r3, #24]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	619a      	str	r2, [r3, #24]
      break;
 800513e:	e0a5      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 faf4 	bl	8005734 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800515a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6999      	ldr	r1, [r3, #24]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	021a      	lsls	r2, r3, #8
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	619a      	str	r2, [r3, #24]
      break;
 8005180:	e084      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fb5d 	bl	8005848 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69da      	ldr	r2, [r3, #28]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0208 	orr.w	r2, r2, #8
 800519c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69da      	ldr	r2, [r3, #28]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0204 	bic.w	r2, r2, #4
 80051ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69d9      	ldr	r1, [r3, #28]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	61da      	str	r2, [r3, #28]
      break;
 80051c0:	e064      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fbc5 	bl	8005958 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69da      	ldr	r2, [r3, #28]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69d9      	ldr	r1, [r3, #28]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	021a      	lsls	r2, r3, #8
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	61da      	str	r2, [r3, #28]
      break;
 8005202:	e043      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68b9      	ldr	r1, [r7, #8]
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fc0e 	bl	8005a2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0208 	orr.w	r2, r2, #8
 800521e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0204 	bic.w	r2, r2, #4
 800522e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	691a      	ldr	r2, [r3, #16]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005242:	e023      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fc52 	bl	8005af4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800525e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800526e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	021a      	lsls	r2, r3, #8
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005284:	e002      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	75fb      	strb	r3, [r7, #23]
      break;
 800528a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005294:	7dfb      	ldrb	r3, [r7, #23]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop

080052a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <HAL_TIM_ConfigClockSource+0x1c>
 80052b8:	2302      	movs	r3, #2
 80052ba:	e0dc      	b.n	8005476 <HAL_TIM_ConfigClockSource+0x1d6>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	4b6a      	ldr	r3, [pc, #424]	; (8005480 <HAL_TIM_ConfigClockSource+0x1e0>)
 80052d8:	4013      	ands	r3, r2
 80052da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a64      	ldr	r2, [pc, #400]	; (8005484 <HAL_TIM_ConfigClockSource+0x1e4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	f000 80a9 	beq.w	800544a <HAL_TIM_ConfigClockSource+0x1aa>
 80052f8:	4a62      	ldr	r2, [pc, #392]	; (8005484 <HAL_TIM_ConfigClockSource+0x1e4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	f200 80ae 	bhi.w	800545c <HAL_TIM_ConfigClockSource+0x1bc>
 8005300:	4a61      	ldr	r2, [pc, #388]	; (8005488 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	f000 80a1 	beq.w	800544a <HAL_TIM_ConfigClockSource+0x1aa>
 8005308:	4a5f      	ldr	r2, [pc, #380]	; (8005488 <HAL_TIM_ConfigClockSource+0x1e8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	f200 80a6 	bhi.w	800545c <HAL_TIM_ConfigClockSource+0x1bc>
 8005310:	4a5e      	ldr	r2, [pc, #376]	; (800548c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005312:	4293      	cmp	r3, r2
 8005314:	f000 8099 	beq.w	800544a <HAL_TIM_ConfigClockSource+0x1aa>
 8005318:	4a5c      	ldr	r2, [pc, #368]	; (800548c <HAL_TIM_ConfigClockSource+0x1ec>)
 800531a:	4293      	cmp	r3, r2
 800531c:	f200 809e 	bhi.w	800545c <HAL_TIM_ConfigClockSource+0x1bc>
 8005320:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005324:	f000 8091 	beq.w	800544a <HAL_TIM_ConfigClockSource+0x1aa>
 8005328:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800532c:	f200 8096 	bhi.w	800545c <HAL_TIM_ConfigClockSource+0x1bc>
 8005330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005334:	f000 8089 	beq.w	800544a <HAL_TIM_ConfigClockSource+0x1aa>
 8005338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800533c:	f200 808e 	bhi.w	800545c <HAL_TIM_ConfigClockSource+0x1bc>
 8005340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005344:	d03e      	beq.n	80053c4 <HAL_TIM_ConfigClockSource+0x124>
 8005346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800534a:	f200 8087 	bhi.w	800545c <HAL_TIM_ConfigClockSource+0x1bc>
 800534e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005352:	f000 8086 	beq.w	8005462 <HAL_TIM_ConfigClockSource+0x1c2>
 8005356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535a:	d87f      	bhi.n	800545c <HAL_TIM_ConfigClockSource+0x1bc>
 800535c:	2b70      	cmp	r3, #112	; 0x70
 800535e:	d01a      	beq.n	8005396 <HAL_TIM_ConfigClockSource+0xf6>
 8005360:	2b70      	cmp	r3, #112	; 0x70
 8005362:	d87b      	bhi.n	800545c <HAL_TIM_ConfigClockSource+0x1bc>
 8005364:	2b60      	cmp	r3, #96	; 0x60
 8005366:	d050      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x16a>
 8005368:	2b60      	cmp	r3, #96	; 0x60
 800536a:	d877      	bhi.n	800545c <HAL_TIM_ConfigClockSource+0x1bc>
 800536c:	2b50      	cmp	r3, #80	; 0x50
 800536e:	d03c      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x14a>
 8005370:	2b50      	cmp	r3, #80	; 0x50
 8005372:	d873      	bhi.n	800545c <HAL_TIM_ConfigClockSource+0x1bc>
 8005374:	2b40      	cmp	r3, #64	; 0x40
 8005376:	d058      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x18a>
 8005378:	2b40      	cmp	r3, #64	; 0x40
 800537a:	d86f      	bhi.n	800545c <HAL_TIM_ConfigClockSource+0x1bc>
 800537c:	2b30      	cmp	r3, #48	; 0x30
 800537e:	d064      	beq.n	800544a <HAL_TIM_ConfigClockSource+0x1aa>
 8005380:	2b30      	cmp	r3, #48	; 0x30
 8005382:	d86b      	bhi.n	800545c <HAL_TIM_ConfigClockSource+0x1bc>
 8005384:	2b20      	cmp	r3, #32
 8005386:	d060      	beq.n	800544a <HAL_TIM_ConfigClockSource+0x1aa>
 8005388:	2b20      	cmp	r3, #32
 800538a:	d867      	bhi.n	800545c <HAL_TIM_ConfigClockSource+0x1bc>
 800538c:	2b00      	cmp	r3, #0
 800538e:	d05c      	beq.n	800544a <HAL_TIM_ConfigClockSource+0x1aa>
 8005390:	2b10      	cmp	r3, #16
 8005392:	d05a      	beq.n	800544a <HAL_TIM_ConfigClockSource+0x1aa>
 8005394:	e062      	b.n	800545c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6899      	ldr	r1, [r3, #8]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f000 fc89 	bl	8005cbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	609a      	str	r2, [r3, #8]
      break;
 80053c2:	e04f      	b.n	8005464 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	6899      	ldr	r1, [r3, #8]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f000 fc72 	bl	8005cbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053e6:	609a      	str	r2, [r3, #8]
      break;
 80053e8:	e03c      	b.n	8005464 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6859      	ldr	r1, [r3, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	461a      	mov	r2, r3
 80053f8:	f000 fbe2 	bl	8005bc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2150      	movs	r1, #80	; 0x50
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fc3c 	bl	8005c80 <TIM_ITRx_SetConfig>
      break;
 8005408:	e02c      	b.n	8005464 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	6859      	ldr	r1, [r3, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	461a      	mov	r2, r3
 8005418:	f000 fc01 	bl	8005c1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2160      	movs	r1, #96	; 0x60
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fc2c 	bl	8005c80 <TIM_ITRx_SetConfig>
      break;
 8005428:	e01c      	b.n	8005464 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6818      	ldr	r0, [r3, #0]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	6859      	ldr	r1, [r3, #4]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	461a      	mov	r2, r3
 8005438:	f000 fbc2 	bl	8005bc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2140      	movs	r1, #64	; 0x40
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fc1c 	bl	8005c80 <TIM_ITRx_SetConfig>
      break;
 8005448:	e00c      	b.n	8005464 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4619      	mov	r1, r3
 8005454:	4610      	mov	r0, r2
 8005456:	f000 fc13 	bl	8005c80 <TIM_ITRx_SetConfig>
      break;
 800545a:	e003      	b.n	8005464 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	73fb      	strb	r3, [r7, #15]
      break;
 8005460:	e000      	b.n	8005464 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005462:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005474:	7bfb      	ldrb	r3, [r7, #15]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	ffceff88 	.word	0xffceff88
 8005484:	00100040 	.word	0x00100040
 8005488:	00100030 	.word	0x00100030
 800548c:	00100020 	.word	0x00100020

08005490 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a40      	ldr	r2, [pc, #256]	; (80055f4 <TIM_Base_SetConfig+0x114>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d013      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fe:	d00f      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a3d      	ldr	r2, [pc, #244]	; (80055f8 <TIM_Base_SetConfig+0x118>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00b      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a3c      	ldr	r2, [pc, #240]	; (80055fc <TIM_Base_SetConfig+0x11c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d007      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a3b      	ldr	r2, [pc, #236]	; (8005600 <TIM_Base_SetConfig+0x120>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d003      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a3a      	ldr	r2, [pc, #232]	; (8005604 <TIM_Base_SetConfig+0x124>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d108      	bne.n	8005532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a2f      	ldr	r2, [pc, #188]	; (80055f4 <TIM_Base_SetConfig+0x114>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d01f      	beq.n	800557a <TIM_Base_SetConfig+0x9a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005540:	d01b      	beq.n	800557a <TIM_Base_SetConfig+0x9a>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a2c      	ldr	r2, [pc, #176]	; (80055f8 <TIM_Base_SetConfig+0x118>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d017      	beq.n	800557a <TIM_Base_SetConfig+0x9a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a2b      	ldr	r2, [pc, #172]	; (80055fc <TIM_Base_SetConfig+0x11c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d013      	beq.n	800557a <TIM_Base_SetConfig+0x9a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a2a      	ldr	r2, [pc, #168]	; (8005600 <TIM_Base_SetConfig+0x120>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d00f      	beq.n	800557a <TIM_Base_SetConfig+0x9a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a29      	ldr	r2, [pc, #164]	; (8005604 <TIM_Base_SetConfig+0x124>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00b      	beq.n	800557a <TIM_Base_SetConfig+0x9a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a28      	ldr	r2, [pc, #160]	; (8005608 <TIM_Base_SetConfig+0x128>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d007      	beq.n	800557a <TIM_Base_SetConfig+0x9a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a27      	ldr	r2, [pc, #156]	; (800560c <TIM_Base_SetConfig+0x12c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d003      	beq.n	800557a <TIM_Base_SetConfig+0x9a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a26      	ldr	r2, [pc, #152]	; (8005610 <TIM_Base_SetConfig+0x130>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d108      	bne.n	800558c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a10      	ldr	r2, [pc, #64]	; (80055f4 <TIM_Base_SetConfig+0x114>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00f      	beq.n	80055d8 <TIM_Base_SetConfig+0xf8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a12      	ldr	r2, [pc, #72]	; (8005604 <TIM_Base_SetConfig+0x124>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00b      	beq.n	80055d8 <TIM_Base_SetConfig+0xf8>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a11      	ldr	r2, [pc, #68]	; (8005608 <TIM_Base_SetConfig+0x128>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d007      	beq.n	80055d8 <TIM_Base_SetConfig+0xf8>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a10      	ldr	r2, [pc, #64]	; (800560c <TIM_Base_SetConfig+0x12c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d003      	beq.n	80055d8 <TIM_Base_SetConfig+0xf8>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a0f      	ldr	r2, [pc, #60]	; (8005610 <TIM_Base_SetConfig+0x130>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d103      	bne.n	80055e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	615a      	str	r2, [r3, #20]
}
 80055e6:	bf00      	nop
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40010000 	.word	0x40010000
 80055f8:	40000400 	.word	0x40000400
 80055fc:	40000800 	.word	0x40000800
 8005600:	40000c00 	.word	0x40000c00
 8005604:	40010400 	.word	0x40010400
 8005608:	40014000 	.word	0x40014000
 800560c:	40014400 	.word	0x40014400
 8005610:	40014800 	.word	0x40014800

08005614 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f023 0201 	bic.w	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4b37      	ldr	r3, [pc, #220]	; (800571c <TIM_OC1_SetConfig+0x108>)
 8005640:	4013      	ands	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0303 	bic.w	r3, r3, #3
 800564a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f023 0302 	bic.w	r3, r3, #2
 800565c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	4313      	orrs	r3, r2
 8005666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a2d      	ldr	r2, [pc, #180]	; (8005720 <TIM_OC1_SetConfig+0x10c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00f      	beq.n	8005690 <TIM_OC1_SetConfig+0x7c>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a2c      	ldr	r2, [pc, #176]	; (8005724 <TIM_OC1_SetConfig+0x110>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00b      	beq.n	8005690 <TIM_OC1_SetConfig+0x7c>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a2b      	ldr	r2, [pc, #172]	; (8005728 <TIM_OC1_SetConfig+0x114>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d007      	beq.n	8005690 <TIM_OC1_SetConfig+0x7c>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a2a      	ldr	r2, [pc, #168]	; (800572c <TIM_OC1_SetConfig+0x118>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d003      	beq.n	8005690 <TIM_OC1_SetConfig+0x7c>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a29      	ldr	r2, [pc, #164]	; (8005730 <TIM_OC1_SetConfig+0x11c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d10c      	bne.n	80056aa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f023 0308 	bic.w	r3, r3, #8
 8005696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f023 0304 	bic.w	r3, r3, #4
 80056a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a1c      	ldr	r2, [pc, #112]	; (8005720 <TIM_OC1_SetConfig+0x10c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00f      	beq.n	80056d2 <TIM_OC1_SetConfig+0xbe>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a1b      	ldr	r2, [pc, #108]	; (8005724 <TIM_OC1_SetConfig+0x110>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00b      	beq.n	80056d2 <TIM_OC1_SetConfig+0xbe>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a1a      	ldr	r2, [pc, #104]	; (8005728 <TIM_OC1_SetConfig+0x114>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d007      	beq.n	80056d2 <TIM_OC1_SetConfig+0xbe>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a19      	ldr	r2, [pc, #100]	; (800572c <TIM_OC1_SetConfig+0x118>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d003      	beq.n	80056d2 <TIM_OC1_SetConfig+0xbe>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a18      	ldr	r2, [pc, #96]	; (8005730 <TIM_OC1_SetConfig+0x11c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d111      	bne.n	80056f6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	621a      	str	r2, [r3, #32]
}
 8005710:	bf00      	nop
 8005712:	371c      	adds	r7, #28
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	fffeff8f 	.word	0xfffeff8f
 8005720:	40010000 	.word	0x40010000
 8005724:	40010400 	.word	0x40010400
 8005728:	40014000 	.word	0x40014000
 800572c:	40014400 	.word	0x40014400
 8005730:	40014800 	.word	0x40014800

08005734 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	f023 0210 	bic.w	r2, r3, #16
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4b34      	ldr	r3, [pc, #208]	; (8005830 <TIM_OC2_SetConfig+0xfc>)
 8005760:	4013      	ands	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800576a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f023 0320 	bic.w	r3, r3, #32
 800577e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a29      	ldr	r2, [pc, #164]	; (8005834 <TIM_OC2_SetConfig+0x100>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <TIM_OC2_SetConfig+0x68>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a28      	ldr	r2, [pc, #160]	; (8005838 <TIM_OC2_SetConfig+0x104>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d10d      	bne.n	80057b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a1e      	ldr	r2, [pc, #120]	; (8005834 <TIM_OC2_SetConfig+0x100>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00f      	beq.n	80057e0 <TIM_OC2_SetConfig+0xac>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a1d      	ldr	r2, [pc, #116]	; (8005838 <TIM_OC2_SetConfig+0x104>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00b      	beq.n	80057e0 <TIM_OC2_SetConfig+0xac>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a1c      	ldr	r2, [pc, #112]	; (800583c <TIM_OC2_SetConfig+0x108>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d007      	beq.n	80057e0 <TIM_OC2_SetConfig+0xac>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a1b      	ldr	r2, [pc, #108]	; (8005840 <TIM_OC2_SetConfig+0x10c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d003      	beq.n	80057e0 <TIM_OC2_SetConfig+0xac>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a1a      	ldr	r2, [pc, #104]	; (8005844 <TIM_OC2_SetConfig+0x110>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d113      	bne.n	8005808 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	621a      	str	r2, [r3, #32]
}
 8005822:	bf00      	nop
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	feff8fff 	.word	0xfeff8fff
 8005834:	40010000 	.word	0x40010000
 8005838:	40010400 	.word	0x40010400
 800583c:	40014000 	.word	0x40014000
 8005840:	40014400 	.word	0x40014400
 8005844:	40014800 	.word	0x40014800

08005848 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4b33      	ldr	r3, [pc, #204]	; (8005940 <TIM_OC3_SetConfig+0xf8>)
 8005874:	4013      	ands	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0303 	bic.w	r3, r3, #3
 800587e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	021b      	lsls	r3, r3, #8
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a28      	ldr	r2, [pc, #160]	; (8005944 <TIM_OC3_SetConfig+0xfc>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d003      	beq.n	80058ae <TIM_OC3_SetConfig+0x66>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a27      	ldr	r2, [pc, #156]	; (8005948 <TIM_OC3_SetConfig+0x100>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d10d      	bne.n	80058ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	021b      	lsls	r3, r3, #8
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a1d      	ldr	r2, [pc, #116]	; (8005944 <TIM_OC3_SetConfig+0xfc>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00f      	beq.n	80058f2 <TIM_OC3_SetConfig+0xaa>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a1c      	ldr	r2, [pc, #112]	; (8005948 <TIM_OC3_SetConfig+0x100>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00b      	beq.n	80058f2 <TIM_OC3_SetConfig+0xaa>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a1b      	ldr	r2, [pc, #108]	; (800594c <TIM_OC3_SetConfig+0x104>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d007      	beq.n	80058f2 <TIM_OC3_SetConfig+0xaa>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a1a      	ldr	r2, [pc, #104]	; (8005950 <TIM_OC3_SetConfig+0x108>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d003      	beq.n	80058f2 <TIM_OC3_SetConfig+0xaa>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a19      	ldr	r2, [pc, #100]	; (8005954 <TIM_OC3_SetConfig+0x10c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d113      	bne.n	800591a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	621a      	str	r2, [r3, #32]
}
 8005934:	bf00      	nop
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	fffeff8f 	.word	0xfffeff8f
 8005944:	40010000 	.word	0x40010000
 8005948:	40010400 	.word	0x40010400
 800594c:	40014000 	.word	0x40014000
 8005950:	40014400 	.word	0x40014400
 8005954:	40014800 	.word	0x40014800

08005958 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4b24      	ldr	r3, [pc, #144]	; (8005a14 <TIM_OC4_SetConfig+0xbc>)
 8005984:	4013      	ands	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	031b      	lsls	r3, r3, #12
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a19      	ldr	r2, [pc, #100]	; (8005a18 <TIM_OC4_SetConfig+0xc0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00f      	beq.n	80059d8 <TIM_OC4_SetConfig+0x80>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a18      	ldr	r2, [pc, #96]	; (8005a1c <TIM_OC4_SetConfig+0xc4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00b      	beq.n	80059d8 <TIM_OC4_SetConfig+0x80>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a17      	ldr	r2, [pc, #92]	; (8005a20 <TIM_OC4_SetConfig+0xc8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d007      	beq.n	80059d8 <TIM_OC4_SetConfig+0x80>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a16      	ldr	r2, [pc, #88]	; (8005a24 <TIM_OC4_SetConfig+0xcc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_OC4_SetConfig+0x80>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a15      	ldr	r2, [pc, #84]	; (8005a28 <TIM_OC4_SetConfig+0xd0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d109      	bne.n	80059ec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	019b      	lsls	r3, r3, #6
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	621a      	str	r2, [r3, #32]
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	feff8fff 	.word	0xfeff8fff
 8005a18:	40010000 	.word	0x40010000
 8005a1c:	40010400 	.word	0x40010400
 8005a20:	40014000 	.word	0x40014000
 8005a24:	40014400 	.word	0x40014400
 8005a28:	40014800 	.word	0x40014800

08005a2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4b21      	ldr	r3, [pc, #132]	; (8005adc <TIM_OC5_SetConfig+0xb0>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	041b      	lsls	r3, r3, #16
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a18      	ldr	r2, [pc, #96]	; (8005ae0 <TIM_OC5_SetConfig+0xb4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00f      	beq.n	8005aa2 <TIM_OC5_SetConfig+0x76>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a17      	ldr	r2, [pc, #92]	; (8005ae4 <TIM_OC5_SetConfig+0xb8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00b      	beq.n	8005aa2 <TIM_OC5_SetConfig+0x76>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a16      	ldr	r2, [pc, #88]	; (8005ae8 <TIM_OC5_SetConfig+0xbc>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d007      	beq.n	8005aa2 <TIM_OC5_SetConfig+0x76>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a15      	ldr	r2, [pc, #84]	; (8005aec <TIM_OC5_SetConfig+0xc0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d003      	beq.n	8005aa2 <TIM_OC5_SetConfig+0x76>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a14      	ldr	r2, [pc, #80]	; (8005af0 <TIM_OC5_SetConfig+0xc4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d109      	bne.n	8005ab6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	021b      	lsls	r3, r3, #8
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	621a      	str	r2, [r3, #32]
}
 8005ad0:	bf00      	nop
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	fffeff8f 	.word	0xfffeff8f
 8005ae0:	40010000 	.word	0x40010000
 8005ae4:	40010400 	.word	0x40010400
 8005ae8:	40014000 	.word	0x40014000
 8005aec:	40014400 	.word	0x40014400
 8005af0:	40014800 	.word	0x40014800

08005af4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4b22      	ldr	r3, [pc, #136]	; (8005ba8 <TIM_OC6_SetConfig+0xb4>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	021b      	lsls	r3, r3, #8
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	051b      	lsls	r3, r3, #20
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a19      	ldr	r2, [pc, #100]	; (8005bac <TIM_OC6_SetConfig+0xb8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d00f      	beq.n	8005b6c <TIM_OC6_SetConfig+0x78>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a18      	ldr	r2, [pc, #96]	; (8005bb0 <TIM_OC6_SetConfig+0xbc>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00b      	beq.n	8005b6c <TIM_OC6_SetConfig+0x78>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a17      	ldr	r2, [pc, #92]	; (8005bb4 <TIM_OC6_SetConfig+0xc0>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d007      	beq.n	8005b6c <TIM_OC6_SetConfig+0x78>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a16      	ldr	r2, [pc, #88]	; (8005bb8 <TIM_OC6_SetConfig+0xc4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d003      	beq.n	8005b6c <TIM_OC6_SetConfig+0x78>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a15      	ldr	r2, [pc, #84]	; (8005bbc <TIM_OC6_SetConfig+0xc8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d109      	bne.n	8005b80 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	029b      	lsls	r3, r3, #10
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	621a      	str	r2, [r3, #32]
}
 8005b9a:	bf00      	nop
 8005b9c:	371c      	adds	r7, #28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	feff8fff 	.word	0xfeff8fff
 8005bac:	40010000 	.word	0x40010000
 8005bb0:	40010400 	.word	0x40010400
 8005bb4:	40014000 	.word	0x40014000
 8005bb8:	40014400 	.word	0x40014400
 8005bbc:	40014800 	.word	0x40014800

08005bc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	f023 0201 	bic.w	r2, r3, #1
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f023 030a 	bic.w	r3, r3, #10
 8005bfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	621a      	str	r2, [r3, #32]
}
 8005c12:	bf00      	nop
 8005c14:	371c      	adds	r7, #28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b087      	sub	sp, #28
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	f023 0210 	bic.w	r2, r3, #16
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	031b      	lsls	r3, r3, #12
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	621a      	str	r2, [r3, #32]
}
 8005c72:	bf00      	nop
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
	...

08005c80 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <TIM_ITRx_SetConfig+0x38>)
 8005c94:	4013      	ands	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f043 0307 	orr.w	r3, r3, #7
 8005ca2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	609a      	str	r2, [r3, #8]
}
 8005caa:	bf00      	nop
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	ffcfff8f 	.word	0xffcfff8f

08005cbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
 8005cc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	021a      	lsls	r2, r3, #8
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	609a      	str	r2, [r3, #8]
}
 8005cf0:	bf00      	nop
 8005cf2:	371c      	adds	r7, #28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	2201      	movs	r2, #1
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a1a      	ldr	r2, [r3, #32]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	401a      	ands	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a1a      	ldr	r2, [r3, #32]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f003 031f 	and.w	r3, r3, #31
 8005d2e:	6879      	ldr	r1, [r7, #4]
 8005d30:	fa01 f303 	lsl.w	r3, r1, r3
 8005d34:	431a      	orrs	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	621a      	str	r2, [r3, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
	...

08005d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e06d      	b.n	8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a30      	ldr	r2, [pc, #192]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d004      	beq.n	8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a2f      	ldr	r2, [pc, #188]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d108      	bne.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a20      	ldr	r2, [pc, #128]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d022      	beq.n	8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd2:	d01d      	beq.n	8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a1d      	ldr	r2, [pc, #116]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d018      	beq.n	8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a1c      	ldr	r2, [pc, #112]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d013      	beq.n	8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a1a      	ldr	r2, [pc, #104]	; (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00e      	beq.n	8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a15      	ldr	r2, [pc, #84]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d009      	beq.n	8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a16      	ldr	r2, [pc, #88]	; (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d004      	beq.n	8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a15      	ldr	r2, [pc, #84]	; (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d10c      	bne.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	40010000 	.word	0x40010000
 8005e4c:	40010400 	.word	0x40010400
 8005e50:	40000400 	.word	0x40000400
 8005e54:	40000800 	.word	0x40000800
 8005e58:	40000c00 	.word	0x40000c00
 8005e5c:	40001800 	.word	0x40001800
 8005e60:	40014000 	.word	0x40014000

08005e64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e042      	b.n	8005f38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d106      	bne.n	8005eca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7fb f8db 	bl	8001080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2224      	movs	r2, #36	; 0x24
 8005ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0201 	bic.w	r2, r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fcd6 	bl	8006894 <UART_SetConfig>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e022      	b.n	8005f38 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f001 fb28 	bl	8007550 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689a      	ldr	r2, [r3, #8]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0201 	orr.w	r2, r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f001 fbaf 	bl	8007694 <UART_CheckIdleState>
 8005f36:	4603      	mov	r3, r0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08a      	sub	sp, #40	; 0x28
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	f040 8083 	bne.w	8006062 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <HAL_UART_Transmit+0x28>
 8005f62:	88fb      	ldrh	r3, [r7, #6]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e07b      	b.n	8006064 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d101      	bne.n	8005f7a <HAL_UART_Transmit+0x3a>
 8005f76:	2302      	movs	r3, #2
 8005f78:	e074      	b.n	8006064 <HAL_UART_Transmit+0x124>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2221      	movs	r2, #33	; 0x21
 8005f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f92:	f7fb f985 	bl	80012a0 <HAL_GetTick>
 8005f96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	88fa      	ldrh	r2, [r7, #6]
 8005f9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	88fa      	ldrh	r2, [r7, #6]
 8005fa4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb0:	d108      	bne.n	8005fc4 <HAL_UART_Transmit+0x84>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d104      	bne.n	8005fc4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	61bb      	str	r3, [r7, #24]
 8005fc2:	e003      	b.n	8005fcc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005fd4:	e02c      	b.n	8006030 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2180      	movs	r1, #128	; 0x80
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f001 fba2 	bl	800772a <UART_WaitOnFlagUntilTimeout>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e039      	b.n	8006064 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10b      	bne.n	800600e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006004:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	3302      	adds	r3, #2
 800600a:	61bb      	str	r3, [r7, #24]
 800600c:	e007      	b.n	800601e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	781a      	ldrb	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	3301      	adds	r3, #1
 800601c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006024:	b29b      	uxth	r3, r3
 8006026:	3b01      	subs	r3, #1
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006036:	b29b      	uxth	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1cc      	bne.n	8005fd6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	2200      	movs	r2, #0
 8006044:	2140      	movs	r1, #64	; 0x40
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f001 fb6f 	bl	800772a <UART_WaitOnFlagUntilTimeout>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e006      	b.n	8006064 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2220      	movs	r2, #32
 800605a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	e000      	b.n	8006064 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006062:	2302      	movs	r3, #2
  }
}
 8006064:	4618      	mov	r0, r3
 8006066:	3720      	adds	r7, #32
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08a      	sub	sp, #40	; 0x28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	4613      	mov	r3, r2
 8006078:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006080:	2b20      	cmp	r3, #32
 8006082:	d142      	bne.n	800610a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <HAL_UART_Receive_IT+0x24>
 800608a:	88fb      	ldrh	r3, [r7, #6]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e03b      	b.n	800610c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <HAL_UART_Receive_IT+0x36>
 800609e:	2302      	movs	r3, #2
 80060a0:	e034      	b.n	800610c <HAL_UART_Receive_IT+0xa0>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a17      	ldr	r2, [pc, #92]	; (8006114 <HAL_UART_Receive_IT+0xa8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d01f      	beq.n	80060fa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d018      	beq.n	80060fa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	613b      	str	r3, [r7, #16]
   return(result);
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	623b      	str	r3, [r7, #32]
 80060e8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ea:	69f9      	ldr	r1, [r7, #28]
 80060ec:	6a3a      	ldr	r2, [r7, #32]
 80060ee:	e841 2300 	strex	r3, r2, [r1]
 80060f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1e6      	bne.n	80060c8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060fa:	88fb      	ldrh	r3, [r7, #6]
 80060fc:	461a      	mov	r2, r3
 80060fe:	68b9      	ldr	r1, [r7, #8]
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f001 fbdb 	bl	80078bc <UART_Start_Receive_IT>
 8006106:	4603      	mov	r3, r0
 8006108:	e000      	b.n	800610c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800610a:	2302      	movs	r3, #2
  }
}
 800610c:	4618      	mov	r0, r3
 800610e:	3728      	adds	r7, #40	; 0x28
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	58000c00 	.word	0x58000c00

08006118 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b0ba      	sub	sp, #232	; 0xe8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800613e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006142:	f640 030f 	movw	r3, #2063	; 0x80f
 8006146:	4013      	ands	r3, r2
 8006148:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800614c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006150:	2b00      	cmp	r3, #0
 8006152:	d11b      	bne.n	800618c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	d015      	beq.n	800618c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006164:	f003 0320 	and.w	r3, r3, #32
 8006168:	2b00      	cmp	r3, #0
 800616a:	d105      	bne.n	8006178 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800616c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d009      	beq.n	800618c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 835a 	beq.w	8006836 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	4798      	blx	r3
      }
      return;
 800618a:	e354      	b.n	8006836 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800618c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 811f 	beq.w	80063d4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006196:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800619a:	4b8b      	ldr	r3, [pc, #556]	; (80063c8 <HAL_UART_IRQHandler+0x2b0>)
 800619c:	4013      	ands	r3, r2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80061a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80061a6:	4b89      	ldr	r3, [pc, #548]	; (80063cc <HAL_UART_IRQHandler+0x2b4>)
 80061a8:	4013      	ands	r3, r2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 8112 	beq.w	80063d4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d011      	beq.n	80061e0 <HAL_UART_IRQHandler+0xc8>
 80061bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00b      	beq.n	80061e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2201      	movs	r2, #1
 80061ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061d6:	f043 0201 	orr.w	r2, r3, #1
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d011      	beq.n	8006210 <HAL_UART_IRQHandler+0xf8>
 80061ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00b      	beq.n	8006210 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2202      	movs	r2, #2
 80061fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006206:	f043 0204 	orr.w	r2, r3, #4
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	d011      	beq.n	8006240 <HAL_UART_IRQHandler+0x128>
 800621c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00b      	beq.n	8006240 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2204      	movs	r2, #4
 800622e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006236:	f043 0202 	orr.w	r2, r3, #2
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006244:	f003 0308 	and.w	r3, r3, #8
 8006248:	2b00      	cmp	r3, #0
 800624a:	d017      	beq.n	800627c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800624c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b00      	cmp	r3, #0
 8006256:	d105      	bne.n	8006264 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006258:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800625c:	4b5a      	ldr	r3, [pc, #360]	; (80063c8 <HAL_UART_IRQHandler+0x2b0>)
 800625e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00b      	beq.n	800627c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2208      	movs	r2, #8
 800626a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006272:	f043 0208 	orr.w	r2, r3, #8
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800627c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006284:	2b00      	cmp	r3, #0
 8006286:	d012      	beq.n	80062ae <HAL_UART_IRQHandler+0x196>
 8006288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800628c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00c      	beq.n	80062ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800629c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062a4:	f043 0220 	orr.w	r2, r3, #32
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 82c0 	beq.w	800683a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80062ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d013      	beq.n	80062ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d105      	bne.n	80062de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80062d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d007      	beq.n	80062ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006302:	2b40      	cmp	r3, #64	; 0x40
 8006304:	d005      	beq.n	8006312 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800630a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800630e:	2b00      	cmp	r3, #0
 8006310:	d04f      	beq.n	80063b2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f001 fbfc 	bl	8007b10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006322:	2b40      	cmp	r3, #64	; 0x40
 8006324:	d141      	bne.n	80063aa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3308      	adds	r3, #8
 800632c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006330:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800633c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3308      	adds	r3, #8
 800634e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006352:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800635e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006362:	e841 2300 	strex	r3, r2, [r1]
 8006366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800636a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1d9      	bne.n	8006326 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d013      	beq.n	80063a2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800637e:	4a14      	ldr	r2, [pc, #80]	; (80063d0 <HAL_UART_IRQHandler+0x2b8>)
 8006380:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006386:	4618      	mov	r0, r3
 8006388:	f7fb fb94 	bl	8001ab4 <HAL_DMA_Abort_IT>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d017      	beq.n	80063c2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800639c:	4610      	mov	r0, r2
 800639e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a0:	e00f      	b.n	80063c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fa60 	bl	8006868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a8:	e00b      	b.n	80063c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fa5c 	bl	8006868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b0:	e007      	b.n	80063c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fa58 	bl	8006868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80063c0:	e23b      	b.n	800683a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c2:	bf00      	nop
    return;
 80063c4:	e239      	b.n	800683a <HAL_UART_IRQHandler+0x722>
 80063c6:	bf00      	nop
 80063c8:	10000001 	.word	0x10000001
 80063cc:	04000120 	.word	0x04000120
 80063d0:	08007bdd 	.word	0x08007bdd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d8:	2b01      	cmp	r3, #1
 80063da:	f040 81ce 	bne.w	800677a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e2:	f003 0310 	and.w	r3, r3, #16
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 81c7 	beq.w	800677a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 81c0 	beq.w	800677a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2210      	movs	r2, #16
 8006400:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640c:	2b40      	cmp	r3, #64	; 0x40
 800640e:	f040 813b 	bne.w	8006688 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a8b      	ldr	r2, [pc, #556]	; (8006648 <HAL_UART_IRQHandler+0x530>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d059      	beq.n	80064d2 <HAL_UART_IRQHandler+0x3ba>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a89      	ldr	r2, [pc, #548]	; (800664c <HAL_UART_IRQHandler+0x534>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d053      	beq.n	80064d2 <HAL_UART_IRQHandler+0x3ba>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a87      	ldr	r2, [pc, #540]	; (8006650 <HAL_UART_IRQHandler+0x538>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d04d      	beq.n	80064d2 <HAL_UART_IRQHandler+0x3ba>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a85      	ldr	r2, [pc, #532]	; (8006654 <HAL_UART_IRQHandler+0x53c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d047      	beq.n	80064d2 <HAL_UART_IRQHandler+0x3ba>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a83      	ldr	r2, [pc, #524]	; (8006658 <HAL_UART_IRQHandler+0x540>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d041      	beq.n	80064d2 <HAL_UART_IRQHandler+0x3ba>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a81      	ldr	r2, [pc, #516]	; (800665c <HAL_UART_IRQHandler+0x544>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d03b      	beq.n	80064d2 <HAL_UART_IRQHandler+0x3ba>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a7f      	ldr	r2, [pc, #508]	; (8006660 <HAL_UART_IRQHandler+0x548>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d035      	beq.n	80064d2 <HAL_UART_IRQHandler+0x3ba>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a7d      	ldr	r2, [pc, #500]	; (8006664 <HAL_UART_IRQHandler+0x54c>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d02f      	beq.n	80064d2 <HAL_UART_IRQHandler+0x3ba>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a7b      	ldr	r2, [pc, #492]	; (8006668 <HAL_UART_IRQHandler+0x550>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d029      	beq.n	80064d2 <HAL_UART_IRQHandler+0x3ba>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a79      	ldr	r2, [pc, #484]	; (800666c <HAL_UART_IRQHandler+0x554>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d023      	beq.n	80064d2 <HAL_UART_IRQHandler+0x3ba>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a77      	ldr	r2, [pc, #476]	; (8006670 <HAL_UART_IRQHandler+0x558>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d01d      	beq.n	80064d2 <HAL_UART_IRQHandler+0x3ba>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a75      	ldr	r2, [pc, #468]	; (8006674 <HAL_UART_IRQHandler+0x55c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d017      	beq.n	80064d2 <HAL_UART_IRQHandler+0x3ba>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a73      	ldr	r2, [pc, #460]	; (8006678 <HAL_UART_IRQHandler+0x560>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d011      	beq.n	80064d2 <HAL_UART_IRQHandler+0x3ba>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a71      	ldr	r2, [pc, #452]	; (800667c <HAL_UART_IRQHandler+0x564>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00b      	beq.n	80064d2 <HAL_UART_IRQHandler+0x3ba>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a6f      	ldr	r2, [pc, #444]	; (8006680 <HAL_UART_IRQHandler+0x568>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d005      	beq.n	80064d2 <HAL_UART_IRQHandler+0x3ba>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a6d      	ldr	r2, [pc, #436]	; (8006684 <HAL_UART_IRQHandler+0x56c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d105      	bne.n	80064de <HAL_UART_IRQHandler+0x3c6>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	b29b      	uxth	r3, r3
 80064dc:	e004      	b.n	80064e8 <HAL_UART_IRQHandler+0x3d0>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 81a4 	beq.w	800683e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006500:	429a      	cmp	r2, r3
 8006502:	f080 819c 	bcs.w	800683e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800650c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800651a:	f000 8086 	beq.w	800662a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006526:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800652a:	e853 3f00 	ldrex	r3, [r3]
 800652e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006532:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006536:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800653a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006548:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800654c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006550:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006554:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006558:	e841 2300 	strex	r3, r2, [r1]
 800655c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006560:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1da      	bne.n	800651e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3308      	adds	r3, #8
 800656e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006572:	e853 3f00 	ldrex	r3, [r3]
 8006576:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006578:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800657a:	f023 0301 	bic.w	r3, r3, #1
 800657e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3308      	adds	r3, #8
 8006588:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800658c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006590:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006594:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006598:	e841 2300 	strex	r3, r2, [r1]
 800659c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800659e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1e1      	bne.n	8006568 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3308      	adds	r3, #8
 80065aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065ae:	e853 3f00 	ldrex	r3, [r3]
 80065b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3308      	adds	r3, #8
 80065c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e3      	bne.n	80065a4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2220      	movs	r2, #32
 80065e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f2:	e853 3f00 	ldrex	r3, [r3]
 80065f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065fa:	f023 0310 	bic.w	r3, r3, #16
 80065fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800660c:	65bb      	str	r3, [r7, #88]	; 0x58
 800660e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006610:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006612:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006614:	e841 2300 	strex	r3, r2, [r1]
 8006618:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800661a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1e4      	bne.n	80065ea <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006624:	4618      	mov	r0, r3
 8006626:	f7fa ff27 	bl	8001478 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006636:	b29b      	uxth	r3, r3
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	b29b      	uxth	r3, r3
 800663c:	4619      	mov	r1, r3
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f91c 	bl	800687c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006644:	e0fb      	b.n	800683e <HAL_UART_IRQHandler+0x726>
 8006646:	bf00      	nop
 8006648:	40020010 	.word	0x40020010
 800664c:	40020028 	.word	0x40020028
 8006650:	40020040 	.word	0x40020040
 8006654:	40020058 	.word	0x40020058
 8006658:	40020070 	.word	0x40020070
 800665c:	40020088 	.word	0x40020088
 8006660:	400200a0 	.word	0x400200a0
 8006664:	400200b8 	.word	0x400200b8
 8006668:	40020410 	.word	0x40020410
 800666c:	40020428 	.word	0x40020428
 8006670:	40020440 	.word	0x40020440
 8006674:	40020458 	.word	0x40020458
 8006678:	40020470 	.word	0x40020470
 800667c:	40020488 	.word	0x40020488
 8006680:	400204a0 	.word	0x400204a0
 8006684:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006694:	b29b      	uxth	r3, r3
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 80cc 	beq.w	8006842 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80066aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 80c7 	beq.w	8006842 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	e853 3f00 	ldrex	r3, [r3]
 80066c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	461a      	mov	r2, r3
 80066d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066d6:	647b      	str	r3, [r7, #68]	; 0x44
 80066d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1e4      	bne.n	80066b4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3308      	adds	r3, #8
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	623b      	str	r3, [r7, #32]
   return(result);
 80066fa:	6a3a      	ldr	r2, [r7, #32]
 80066fc:	4b54      	ldr	r3, [pc, #336]	; (8006850 <HAL_UART_IRQHandler+0x738>)
 80066fe:	4013      	ands	r3, r2
 8006700:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3308      	adds	r3, #8
 800670a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800670e:	633a      	str	r2, [r7, #48]	; 0x30
 8006710:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e3      	bne.n	80066ea <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2220      	movs	r2, #32
 8006726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	e853 3f00 	ldrex	r3, [r3]
 8006742:	60fb      	str	r3, [r7, #12]
   return(result);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0310 	bic.w	r3, r3, #16
 800674a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006758:	61fb      	str	r3, [r7, #28]
 800675a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	69b9      	ldr	r1, [r7, #24]
 800675e:	69fa      	ldr	r2, [r7, #28]
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	617b      	str	r3, [r7, #20]
   return(result);
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e4      	bne.n	8006736 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800676c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006770:	4619      	mov	r1, r3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f882 	bl	800687c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006778:	e063      	b.n	8006842 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800677a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00e      	beq.n	80067a4 <HAL_UART_IRQHandler+0x68c>
 8006786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800678a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d008      	beq.n	80067a4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800679a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f001 febb 	bl	8008518 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067a2:	e051      	b.n	8006848 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80067a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d014      	beq.n	80067da <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80067b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d105      	bne.n	80067c8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80067bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d008      	beq.n	80067da <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d03a      	beq.n	8006846 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	4798      	blx	r3
    }
    return;
 80067d8:	e035      	b.n	8006846 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d009      	beq.n	80067fa <HAL_UART_IRQHandler+0x6e2>
 80067e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f001 fa08 	bl	8007c08 <UART_EndTransmit_IT>
    return;
 80067f8:	e026      	b.n	8006848 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80067fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d009      	beq.n	800681a <HAL_UART_IRQHandler+0x702>
 8006806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800680a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f001 fe94 	bl	8008540 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006818:	e016      	b.n	8006848 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800681a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d010      	beq.n	8006848 <HAL_UART_IRQHandler+0x730>
 8006826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800682a:	2b00      	cmp	r3, #0
 800682c:	da0c      	bge.n	8006848 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f001 fe7c 	bl	800852c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006834:	e008      	b.n	8006848 <HAL_UART_IRQHandler+0x730>
      return;
 8006836:	bf00      	nop
 8006838:	e006      	b.n	8006848 <HAL_UART_IRQHandler+0x730>
    return;
 800683a:	bf00      	nop
 800683c:	e004      	b.n	8006848 <HAL_UART_IRQHandler+0x730>
      return;
 800683e:	bf00      	nop
 8006840:	e002      	b.n	8006848 <HAL_UART_IRQHandler+0x730>
      return;
 8006842:	bf00      	nop
 8006844:	e000      	b.n	8006848 <HAL_UART_IRQHandler+0x730>
    return;
 8006846:	bf00      	nop
  }
}
 8006848:	37e8      	adds	r7, #232	; 0xe8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	effffffe 	.word	0xeffffffe

08006854 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006894:	b5b0      	push	{r4, r5, r7, lr}
 8006896:	b08e      	sub	sp, #56	; 0x38
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689a      	ldr	r2, [r3, #8]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	431a      	orrs	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	4bbf      	ldr	r3, [pc, #764]	; (8006bc0 <UART_SetConfig+0x32c>)
 80068c2:	4013      	ands	r3, r2
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6812      	ldr	r2, [r2, #0]
 80068c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80068ca:	430b      	orrs	r3, r1
 80068cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68da      	ldr	r2, [r3, #12]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4ab5      	ldr	r2, [pc, #724]	; (8006bc4 <UART_SetConfig+0x330>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d004      	beq.n	80068fe <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068fa:	4313      	orrs	r3, r2
 80068fc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	4bb0      	ldr	r3, [pc, #704]	; (8006bc8 <UART_SetConfig+0x334>)
 8006906:	4013      	ands	r3, r2
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6812      	ldr	r2, [r2, #0]
 800690c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800690e:	430b      	orrs	r3, r1
 8006910:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006918:	f023 010f 	bic.w	r1, r3, #15
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4aa7      	ldr	r2, [pc, #668]	; (8006bcc <UART_SetConfig+0x338>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d176      	bne.n	8006a20 <UART_SetConfig+0x18c>
 8006932:	4ba7      	ldr	r3, [pc, #668]	; (8006bd0 <UART_SetConfig+0x33c>)
 8006934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006936:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800693a:	2b28      	cmp	r3, #40	; 0x28
 800693c:	d86c      	bhi.n	8006a18 <UART_SetConfig+0x184>
 800693e:	a201      	add	r2, pc, #4	; (adr r2, 8006944 <UART_SetConfig+0xb0>)
 8006940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006944:	080069e9 	.word	0x080069e9
 8006948:	08006a19 	.word	0x08006a19
 800694c:	08006a19 	.word	0x08006a19
 8006950:	08006a19 	.word	0x08006a19
 8006954:	08006a19 	.word	0x08006a19
 8006958:	08006a19 	.word	0x08006a19
 800695c:	08006a19 	.word	0x08006a19
 8006960:	08006a19 	.word	0x08006a19
 8006964:	080069f1 	.word	0x080069f1
 8006968:	08006a19 	.word	0x08006a19
 800696c:	08006a19 	.word	0x08006a19
 8006970:	08006a19 	.word	0x08006a19
 8006974:	08006a19 	.word	0x08006a19
 8006978:	08006a19 	.word	0x08006a19
 800697c:	08006a19 	.word	0x08006a19
 8006980:	08006a19 	.word	0x08006a19
 8006984:	080069f9 	.word	0x080069f9
 8006988:	08006a19 	.word	0x08006a19
 800698c:	08006a19 	.word	0x08006a19
 8006990:	08006a19 	.word	0x08006a19
 8006994:	08006a19 	.word	0x08006a19
 8006998:	08006a19 	.word	0x08006a19
 800699c:	08006a19 	.word	0x08006a19
 80069a0:	08006a19 	.word	0x08006a19
 80069a4:	08006a01 	.word	0x08006a01
 80069a8:	08006a19 	.word	0x08006a19
 80069ac:	08006a19 	.word	0x08006a19
 80069b0:	08006a19 	.word	0x08006a19
 80069b4:	08006a19 	.word	0x08006a19
 80069b8:	08006a19 	.word	0x08006a19
 80069bc:	08006a19 	.word	0x08006a19
 80069c0:	08006a19 	.word	0x08006a19
 80069c4:	08006a09 	.word	0x08006a09
 80069c8:	08006a19 	.word	0x08006a19
 80069cc:	08006a19 	.word	0x08006a19
 80069d0:	08006a19 	.word	0x08006a19
 80069d4:	08006a19 	.word	0x08006a19
 80069d8:	08006a19 	.word	0x08006a19
 80069dc:	08006a19 	.word	0x08006a19
 80069e0:	08006a19 	.word	0x08006a19
 80069e4:	08006a11 	.word	0x08006a11
 80069e8:	2301      	movs	r3, #1
 80069ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ee:	e326      	b.n	800703e <UART_SetConfig+0x7aa>
 80069f0:	2304      	movs	r3, #4
 80069f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069f6:	e322      	b.n	800703e <UART_SetConfig+0x7aa>
 80069f8:	2308      	movs	r3, #8
 80069fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069fe:	e31e      	b.n	800703e <UART_SetConfig+0x7aa>
 8006a00:	2310      	movs	r3, #16
 8006a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a06:	e31a      	b.n	800703e <UART_SetConfig+0x7aa>
 8006a08:	2320      	movs	r3, #32
 8006a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a0e:	e316      	b.n	800703e <UART_SetConfig+0x7aa>
 8006a10:	2340      	movs	r3, #64	; 0x40
 8006a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a16:	e312      	b.n	800703e <UART_SetConfig+0x7aa>
 8006a18:	2380      	movs	r3, #128	; 0x80
 8006a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a1e:	e30e      	b.n	800703e <UART_SetConfig+0x7aa>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a6b      	ldr	r2, [pc, #428]	; (8006bd4 <UART_SetConfig+0x340>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d130      	bne.n	8006a8c <UART_SetConfig+0x1f8>
 8006a2a:	4b69      	ldr	r3, [pc, #420]	; (8006bd0 <UART_SetConfig+0x33c>)
 8006a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	2b05      	cmp	r3, #5
 8006a34:	d826      	bhi.n	8006a84 <UART_SetConfig+0x1f0>
 8006a36:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <UART_SetConfig+0x1a8>)
 8006a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3c:	08006a55 	.word	0x08006a55
 8006a40:	08006a5d 	.word	0x08006a5d
 8006a44:	08006a65 	.word	0x08006a65
 8006a48:	08006a6d 	.word	0x08006a6d
 8006a4c:	08006a75 	.word	0x08006a75
 8006a50:	08006a7d 	.word	0x08006a7d
 8006a54:	2300      	movs	r3, #0
 8006a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a5a:	e2f0      	b.n	800703e <UART_SetConfig+0x7aa>
 8006a5c:	2304      	movs	r3, #4
 8006a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a62:	e2ec      	b.n	800703e <UART_SetConfig+0x7aa>
 8006a64:	2308      	movs	r3, #8
 8006a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a6a:	e2e8      	b.n	800703e <UART_SetConfig+0x7aa>
 8006a6c:	2310      	movs	r3, #16
 8006a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a72:	e2e4      	b.n	800703e <UART_SetConfig+0x7aa>
 8006a74:	2320      	movs	r3, #32
 8006a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a7a:	e2e0      	b.n	800703e <UART_SetConfig+0x7aa>
 8006a7c:	2340      	movs	r3, #64	; 0x40
 8006a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a82:	e2dc      	b.n	800703e <UART_SetConfig+0x7aa>
 8006a84:	2380      	movs	r3, #128	; 0x80
 8006a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a8a:	e2d8      	b.n	800703e <UART_SetConfig+0x7aa>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a51      	ldr	r2, [pc, #324]	; (8006bd8 <UART_SetConfig+0x344>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d130      	bne.n	8006af8 <UART_SetConfig+0x264>
 8006a96:	4b4e      	ldr	r3, [pc, #312]	; (8006bd0 <UART_SetConfig+0x33c>)
 8006a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	2b05      	cmp	r3, #5
 8006aa0:	d826      	bhi.n	8006af0 <UART_SetConfig+0x25c>
 8006aa2:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <UART_SetConfig+0x214>)
 8006aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa8:	08006ac1 	.word	0x08006ac1
 8006aac:	08006ac9 	.word	0x08006ac9
 8006ab0:	08006ad1 	.word	0x08006ad1
 8006ab4:	08006ad9 	.word	0x08006ad9
 8006ab8:	08006ae1 	.word	0x08006ae1
 8006abc:	08006ae9 	.word	0x08006ae9
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ac6:	e2ba      	b.n	800703e <UART_SetConfig+0x7aa>
 8006ac8:	2304      	movs	r3, #4
 8006aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ace:	e2b6      	b.n	800703e <UART_SetConfig+0x7aa>
 8006ad0:	2308      	movs	r3, #8
 8006ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ad6:	e2b2      	b.n	800703e <UART_SetConfig+0x7aa>
 8006ad8:	2310      	movs	r3, #16
 8006ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ade:	e2ae      	b.n	800703e <UART_SetConfig+0x7aa>
 8006ae0:	2320      	movs	r3, #32
 8006ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ae6:	e2aa      	b.n	800703e <UART_SetConfig+0x7aa>
 8006ae8:	2340      	movs	r3, #64	; 0x40
 8006aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aee:	e2a6      	b.n	800703e <UART_SetConfig+0x7aa>
 8006af0:	2380      	movs	r3, #128	; 0x80
 8006af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006af6:	e2a2      	b.n	800703e <UART_SetConfig+0x7aa>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a37      	ldr	r2, [pc, #220]	; (8006bdc <UART_SetConfig+0x348>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d130      	bne.n	8006b64 <UART_SetConfig+0x2d0>
 8006b02:	4b33      	ldr	r3, [pc, #204]	; (8006bd0 <UART_SetConfig+0x33c>)
 8006b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b06:	f003 0307 	and.w	r3, r3, #7
 8006b0a:	2b05      	cmp	r3, #5
 8006b0c:	d826      	bhi.n	8006b5c <UART_SetConfig+0x2c8>
 8006b0e:	a201      	add	r2, pc, #4	; (adr r2, 8006b14 <UART_SetConfig+0x280>)
 8006b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b14:	08006b2d 	.word	0x08006b2d
 8006b18:	08006b35 	.word	0x08006b35
 8006b1c:	08006b3d 	.word	0x08006b3d
 8006b20:	08006b45 	.word	0x08006b45
 8006b24:	08006b4d 	.word	0x08006b4d
 8006b28:	08006b55 	.word	0x08006b55
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b32:	e284      	b.n	800703e <UART_SetConfig+0x7aa>
 8006b34:	2304      	movs	r3, #4
 8006b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b3a:	e280      	b.n	800703e <UART_SetConfig+0x7aa>
 8006b3c:	2308      	movs	r3, #8
 8006b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b42:	e27c      	b.n	800703e <UART_SetConfig+0x7aa>
 8006b44:	2310      	movs	r3, #16
 8006b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b4a:	e278      	b.n	800703e <UART_SetConfig+0x7aa>
 8006b4c:	2320      	movs	r3, #32
 8006b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b52:	e274      	b.n	800703e <UART_SetConfig+0x7aa>
 8006b54:	2340      	movs	r3, #64	; 0x40
 8006b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b5a:	e270      	b.n	800703e <UART_SetConfig+0x7aa>
 8006b5c:	2380      	movs	r3, #128	; 0x80
 8006b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b62:	e26c      	b.n	800703e <UART_SetConfig+0x7aa>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a1d      	ldr	r2, [pc, #116]	; (8006be0 <UART_SetConfig+0x34c>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d142      	bne.n	8006bf4 <UART_SetConfig+0x360>
 8006b6e:	4b18      	ldr	r3, [pc, #96]	; (8006bd0 <UART_SetConfig+0x33c>)
 8006b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	2b05      	cmp	r3, #5
 8006b78:	d838      	bhi.n	8006bec <UART_SetConfig+0x358>
 8006b7a:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <UART_SetConfig+0x2ec>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006b99 	.word	0x08006b99
 8006b84:	08006ba1 	.word	0x08006ba1
 8006b88:	08006ba9 	.word	0x08006ba9
 8006b8c:	08006bb1 	.word	0x08006bb1
 8006b90:	08006bb9 	.word	0x08006bb9
 8006b94:	08006be5 	.word	0x08006be5
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b9e:	e24e      	b.n	800703e <UART_SetConfig+0x7aa>
 8006ba0:	2304      	movs	r3, #4
 8006ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ba6:	e24a      	b.n	800703e <UART_SetConfig+0x7aa>
 8006ba8:	2308      	movs	r3, #8
 8006baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bae:	e246      	b.n	800703e <UART_SetConfig+0x7aa>
 8006bb0:	2310      	movs	r3, #16
 8006bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bb6:	e242      	b.n	800703e <UART_SetConfig+0x7aa>
 8006bb8:	2320      	movs	r3, #32
 8006bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bbe:	e23e      	b.n	800703e <UART_SetConfig+0x7aa>
 8006bc0:	cfff69f3 	.word	0xcfff69f3
 8006bc4:	58000c00 	.word	0x58000c00
 8006bc8:	11fff4ff 	.word	0x11fff4ff
 8006bcc:	40011000 	.word	0x40011000
 8006bd0:	58024400 	.word	0x58024400
 8006bd4:	40004400 	.word	0x40004400
 8006bd8:	40004800 	.word	0x40004800
 8006bdc:	40004c00 	.word	0x40004c00
 8006be0:	40005000 	.word	0x40005000
 8006be4:	2340      	movs	r3, #64	; 0x40
 8006be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bea:	e228      	b.n	800703e <UART_SetConfig+0x7aa>
 8006bec:	2380      	movs	r3, #128	; 0x80
 8006bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bf2:	e224      	b.n	800703e <UART_SetConfig+0x7aa>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4ab1      	ldr	r2, [pc, #708]	; (8006ec0 <UART_SetConfig+0x62c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d176      	bne.n	8006cec <UART_SetConfig+0x458>
 8006bfe:	4bb1      	ldr	r3, [pc, #708]	; (8006ec4 <UART_SetConfig+0x630>)
 8006c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c06:	2b28      	cmp	r3, #40	; 0x28
 8006c08:	d86c      	bhi.n	8006ce4 <UART_SetConfig+0x450>
 8006c0a:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <UART_SetConfig+0x37c>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006cb5 	.word	0x08006cb5
 8006c14:	08006ce5 	.word	0x08006ce5
 8006c18:	08006ce5 	.word	0x08006ce5
 8006c1c:	08006ce5 	.word	0x08006ce5
 8006c20:	08006ce5 	.word	0x08006ce5
 8006c24:	08006ce5 	.word	0x08006ce5
 8006c28:	08006ce5 	.word	0x08006ce5
 8006c2c:	08006ce5 	.word	0x08006ce5
 8006c30:	08006cbd 	.word	0x08006cbd
 8006c34:	08006ce5 	.word	0x08006ce5
 8006c38:	08006ce5 	.word	0x08006ce5
 8006c3c:	08006ce5 	.word	0x08006ce5
 8006c40:	08006ce5 	.word	0x08006ce5
 8006c44:	08006ce5 	.word	0x08006ce5
 8006c48:	08006ce5 	.word	0x08006ce5
 8006c4c:	08006ce5 	.word	0x08006ce5
 8006c50:	08006cc5 	.word	0x08006cc5
 8006c54:	08006ce5 	.word	0x08006ce5
 8006c58:	08006ce5 	.word	0x08006ce5
 8006c5c:	08006ce5 	.word	0x08006ce5
 8006c60:	08006ce5 	.word	0x08006ce5
 8006c64:	08006ce5 	.word	0x08006ce5
 8006c68:	08006ce5 	.word	0x08006ce5
 8006c6c:	08006ce5 	.word	0x08006ce5
 8006c70:	08006ccd 	.word	0x08006ccd
 8006c74:	08006ce5 	.word	0x08006ce5
 8006c78:	08006ce5 	.word	0x08006ce5
 8006c7c:	08006ce5 	.word	0x08006ce5
 8006c80:	08006ce5 	.word	0x08006ce5
 8006c84:	08006ce5 	.word	0x08006ce5
 8006c88:	08006ce5 	.word	0x08006ce5
 8006c8c:	08006ce5 	.word	0x08006ce5
 8006c90:	08006cd5 	.word	0x08006cd5
 8006c94:	08006ce5 	.word	0x08006ce5
 8006c98:	08006ce5 	.word	0x08006ce5
 8006c9c:	08006ce5 	.word	0x08006ce5
 8006ca0:	08006ce5 	.word	0x08006ce5
 8006ca4:	08006ce5 	.word	0x08006ce5
 8006ca8:	08006ce5 	.word	0x08006ce5
 8006cac:	08006ce5 	.word	0x08006ce5
 8006cb0:	08006cdd 	.word	0x08006cdd
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cba:	e1c0      	b.n	800703e <UART_SetConfig+0x7aa>
 8006cbc:	2304      	movs	r3, #4
 8006cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cc2:	e1bc      	b.n	800703e <UART_SetConfig+0x7aa>
 8006cc4:	2308      	movs	r3, #8
 8006cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cca:	e1b8      	b.n	800703e <UART_SetConfig+0x7aa>
 8006ccc:	2310      	movs	r3, #16
 8006cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cd2:	e1b4      	b.n	800703e <UART_SetConfig+0x7aa>
 8006cd4:	2320      	movs	r3, #32
 8006cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cda:	e1b0      	b.n	800703e <UART_SetConfig+0x7aa>
 8006cdc:	2340      	movs	r3, #64	; 0x40
 8006cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ce2:	e1ac      	b.n	800703e <UART_SetConfig+0x7aa>
 8006ce4:	2380      	movs	r3, #128	; 0x80
 8006ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cea:	e1a8      	b.n	800703e <UART_SetConfig+0x7aa>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a75      	ldr	r2, [pc, #468]	; (8006ec8 <UART_SetConfig+0x634>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d130      	bne.n	8006d58 <UART_SetConfig+0x4c4>
 8006cf6:	4b73      	ldr	r3, [pc, #460]	; (8006ec4 <UART_SetConfig+0x630>)
 8006cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfa:	f003 0307 	and.w	r3, r3, #7
 8006cfe:	2b05      	cmp	r3, #5
 8006d00:	d826      	bhi.n	8006d50 <UART_SetConfig+0x4bc>
 8006d02:	a201      	add	r2, pc, #4	; (adr r2, 8006d08 <UART_SetConfig+0x474>)
 8006d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d08:	08006d21 	.word	0x08006d21
 8006d0c:	08006d29 	.word	0x08006d29
 8006d10:	08006d31 	.word	0x08006d31
 8006d14:	08006d39 	.word	0x08006d39
 8006d18:	08006d41 	.word	0x08006d41
 8006d1c:	08006d49 	.word	0x08006d49
 8006d20:	2300      	movs	r3, #0
 8006d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d26:	e18a      	b.n	800703e <UART_SetConfig+0x7aa>
 8006d28:	2304      	movs	r3, #4
 8006d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d2e:	e186      	b.n	800703e <UART_SetConfig+0x7aa>
 8006d30:	2308      	movs	r3, #8
 8006d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d36:	e182      	b.n	800703e <UART_SetConfig+0x7aa>
 8006d38:	2310      	movs	r3, #16
 8006d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d3e:	e17e      	b.n	800703e <UART_SetConfig+0x7aa>
 8006d40:	2320      	movs	r3, #32
 8006d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d46:	e17a      	b.n	800703e <UART_SetConfig+0x7aa>
 8006d48:	2340      	movs	r3, #64	; 0x40
 8006d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d4e:	e176      	b.n	800703e <UART_SetConfig+0x7aa>
 8006d50:	2380      	movs	r3, #128	; 0x80
 8006d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d56:	e172      	b.n	800703e <UART_SetConfig+0x7aa>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a5b      	ldr	r2, [pc, #364]	; (8006ecc <UART_SetConfig+0x638>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d130      	bne.n	8006dc4 <UART_SetConfig+0x530>
 8006d62:	4b58      	ldr	r3, [pc, #352]	; (8006ec4 <UART_SetConfig+0x630>)
 8006d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	2b05      	cmp	r3, #5
 8006d6c:	d826      	bhi.n	8006dbc <UART_SetConfig+0x528>
 8006d6e:	a201      	add	r2, pc, #4	; (adr r2, 8006d74 <UART_SetConfig+0x4e0>)
 8006d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d74:	08006d8d 	.word	0x08006d8d
 8006d78:	08006d95 	.word	0x08006d95
 8006d7c:	08006d9d 	.word	0x08006d9d
 8006d80:	08006da5 	.word	0x08006da5
 8006d84:	08006dad 	.word	0x08006dad
 8006d88:	08006db5 	.word	0x08006db5
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d92:	e154      	b.n	800703e <UART_SetConfig+0x7aa>
 8006d94:	2304      	movs	r3, #4
 8006d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d9a:	e150      	b.n	800703e <UART_SetConfig+0x7aa>
 8006d9c:	2308      	movs	r3, #8
 8006d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006da2:	e14c      	b.n	800703e <UART_SetConfig+0x7aa>
 8006da4:	2310      	movs	r3, #16
 8006da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006daa:	e148      	b.n	800703e <UART_SetConfig+0x7aa>
 8006dac:	2320      	movs	r3, #32
 8006dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006db2:	e144      	b.n	800703e <UART_SetConfig+0x7aa>
 8006db4:	2340      	movs	r3, #64	; 0x40
 8006db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dba:	e140      	b.n	800703e <UART_SetConfig+0x7aa>
 8006dbc:	2380      	movs	r3, #128	; 0x80
 8006dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dc2:	e13c      	b.n	800703e <UART_SetConfig+0x7aa>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a41      	ldr	r2, [pc, #260]	; (8006ed0 <UART_SetConfig+0x63c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	f040 8082 	bne.w	8006ed4 <UART_SetConfig+0x640>
 8006dd0:	4b3c      	ldr	r3, [pc, #240]	; (8006ec4 <UART_SetConfig+0x630>)
 8006dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dd8:	2b28      	cmp	r3, #40	; 0x28
 8006dda:	d86d      	bhi.n	8006eb8 <UART_SetConfig+0x624>
 8006ddc:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <UART_SetConfig+0x550>)
 8006dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de2:	bf00      	nop
 8006de4:	08006e89 	.word	0x08006e89
 8006de8:	08006eb9 	.word	0x08006eb9
 8006dec:	08006eb9 	.word	0x08006eb9
 8006df0:	08006eb9 	.word	0x08006eb9
 8006df4:	08006eb9 	.word	0x08006eb9
 8006df8:	08006eb9 	.word	0x08006eb9
 8006dfc:	08006eb9 	.word	0x08006eb9
 8006e00:	08006eb9 	.word	0x08006eb9
 8006e04:	08006e91 	.word	0x08006e91
 8006e08:	08006eb9 	.word	0x08006eb9
 8006e0c:	08006eb9 	.word	0x08006eb9
 8006e10:	08006eb9 	.word	0x08006eb9
 8006e14:	08006eb9 	.word	0x08006eb9
 8006e18:	08006eb9 	.word	0x08006eb9
 8006e1c:	08006eb9 	.word	0x08006eb9
 8006e20:	08006eb9 	.word	0x08006eb9
 8006e24:	08006e99 	.word	0x08006e99
 8006e28:	08006eb9 	.word	0x08006eb9
 8006e2c:	08006eb9 	.word	0x08006eb9
 8006e30:	08006eb9 	.word	0x08006eb9
 8006e34:	08006eb9 	.word	0x08006eb9
 8006e38:	08006eb9 	.word	0x08006eb9
 8006e3c:	08006eb9 	.word	0x08006eb9
 8006e40:	08006eb9 	.word	0x08006eb9
 8006e44:	08006ea1 	.word	0x08006ea1
 8006e48:	08006eb9 	.word	0x08006eb9
 8006e4c:	08006eb9 	.word	0x08006eb9
 8006e50:	08006eb9 	.word	0x08006eb9
 8006e54:	08006eb9 	.word	0x08006eb9
 8006e58:	08006eb9 	.word	0x08006eb9
 8006e5c:	08006eb9 	.word	0x08006eb9
 8006e60:	08006eb9 	.word	0x08006eb9
 8006e64:	08006ea9 	.word	0x08006ea9
 8006e68:	08006eb9 	.word	0x08006eb9
 8006e6c:	08006eb9 	.word	0x08006eb9
 8006e70:	08006eb9 	.word	0x08006eb9
 8006e74:	08006eb9 	.word	0x08006eb9
 8006e78:	08006eb9 	.word	0x08006eb9
 8006e7c:	08006eb9 	.word	0x08006eb9
 8006e80:	08006eb9 	.word	0x08006eb9
 8006e84:	08006eb1 	.word	0x08006eb1
 8006e88:	2301      	movs	r3, #1
 8006e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e8e:	e0d6      	b.n	800703e <UART_SetConfig+0x7aa>
 8006e90:	2304      	movs	r3, #4
 8006e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e96:	e0d2      	b.n	800703e <UART_SetConfig+0x7aa>
 8006e98:	2308      	movs	r3, #8
 8006e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e9e:	e0ce      	b.n	800703e <UART_SetConfig+0x7aa>
 8006ea0:	2310      	movs	r3, #16
 8006ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ea6:	e0ca      	b.n	800703e <UART_SetConfig+0x7aa>
 8006ea8:	2320      	movs	r3, #32
 8006eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eae:	e0c6      	b.n	800703e <UART_SetConfig+0x7aa>
 8006eb0:	2340      	movs	r3, #64	; 0x40
 8006eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eb6:	e0c2      	b.n	800703e <UART_SetConfig+0x7aa>
 8006eb8:	2380      	movs	r3, #128	; 0x80
 8006eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ebe:	e0be      	b.n	800703e <UART_SetConfig+0x7aa>
 8006ec0:	40011400 	.word	0x40011400
 8006ec4:	58024400 	.word	0x58024400
 8006ec8:	40007800 	.word	0x40007800
 8006ecc:	40007c00 	.word	0x40007c00
 8006ed0:	40011800 	.word	0x40011800
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4aad      	ldr	r2, [pc, #692]	; (8007190 <UART_SetConfig+0x8fc>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d176      	bne.n	8006fcc <UART_SetConfig+0x738>
 8006ede:	4bad      	ldr	r3, [pc, #692]	; (8007194 <UART_SetConfig+0x900>)
 8006ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ee6:	2b28      	cmp	r3, #40	; 0x28
 8006ee8:	d86c      	bhi.n	8006fc4 <UART_SetConfig+0x730>
 8006eea:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <UART_SetConfig+0x65c>)
 8006eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef0:	08006f95 	.word	0x08006f95
 8006ef4:	08006fc5 	.word	0x08006fc5
 8006ef8:	08006fc5 	.word	0x08006fc5
 8006efc:	08006fc5 	.word	0x08006fc5
 8006f00:	08006fc5 	.word	0x08006fc5
 8006f04:	08006fc5 	.word	0x08006fc5
 8006f08:	08006fc5 	.word	0x08006fc5
 8006f0c:	08006fc5 	.word	0x08006fc5
 8006f10:	08006f9d 	.word	0x08006f9d
 8006f14:	08006fc5 	.word	0x08006fc5
 8006f18:	08006fc5 	.word	0x08006fc5
 8006f1c:	08006fc5 	.word	0x08006fc5
 8006f20:	08006fc5 	.word	0x08006fc5
 8006f24:	08006fc5 	.word	0x08006fc5
 8006f28:	08006fc5 	.word	0x08006fc5
 8006f2c:	08006fc5 	.word	0x08006fc5
 8006f30:	08006fa5 	.word	0x08006fa5
 8006f34:	08006fc5 	.word	0x08006fc5
 8006f38:	08006fc5 	.word	0x08006fc5
 8006f3c:	08006fc5 	.word	0x08006fc5
 8006f40:	08006fc5 	.word	0x08006fc5
 8006f44:	08006fc5 	.word	0x08006fc5
 8006f48:	08006fc5 	.word	0x08006fc5
 8006f4c:	08006fc5 	.word	0x08006fc5
 8006f50:	08006fad 	.word	0x08006fad
 8006f54:	08006fc5 	.word	0x08006fc5
 8006f58:	08006fc5 	.word	0x08006fc5
 8006f5c:	08006fc5 	.word	0x08006fc5
 8006f60:	08006fc5 	.word	0x08006fc5
 8006f64:	08006fc5 	.word	0x08006fc5
 8006f68:	08006fc5 	.word	0x08006fc5
 8006f6c:	08006fc5 	.word	0x08006fc5
 8006f70:	08006fb5 	.word	0x08006fb5
 8006f74:	08006fc5 	.word	0x08006fc5
 8006f78:	08006fc5 	.word	0x08006fc5
 8006f7c:	08006fc5 	.word	0x08006fc5
 8006f80:	08006fc5 	.word	0x08006fc5
 8006f84:	08006fc5 	.word	0x08006fc5
 8006f88:	08006fc5 	.word	0x08006fc5
 8006f8c:	08006fc5 	.word	0x08006fc5
 8006f90:	08006fbd 	.word	0x08006fbd
 8006f94:	2301      	movs	r3, #1
 8006f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f9a:	e050      	b.n	800703e <UART_SetConfig+0x7aa>
 8006f9c:	2304      	movs	r3, #4
 8006f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fa2:	e04c      	b.n	800703e <UART_SetConfig+0x7aa>
 8006fa4:	2308      	movs	r3, #8
 8006fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006faa:	e048      	b.n	800703e <UART_SetConfig+0x7aa>
 8006fac:	2310      	movs	r3, #16
 8006fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fb2:	e044      	b.n	800703e <UART_SetConfig+0x7aa>
 8006fb4:	2320      	movs	r3, #32
 8006fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fba:	e040      	b.n	800703e <UART_SetConfig+0x7aa>
 8006fbc:	2340      	movs	r3, #64	; 0x40
 8006fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fc2:	e03c      	b.n	800703e <UART_SetConfig+0x7aa>
 8006fc4:	2380      	movs	r3, #128	; 0x80
 8006fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fca:	e038      	b.n	800703e <UART_SetConfig+0x7aa>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a71      	ldr	r2, [pc, #452]	; (8007198 <UART_SetConfig+0x904>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d130      	bne.n	8007038 <UART_SetConfig+0x7a4>
 8006fd6:	4b6f      	ldr	r3, [pc, #444]	; (8007194 <UART_SetConfig+0x900>)
 8006fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fda:	f003 0307 	and.w	r3, r3, #7
 8006fde:	2b05      	cmp	r3, #5
 8006fe0:	d826      	bhi.n	8007030 <UART_SetConfig+0x79c>
 8006fe2:	a201      	add	r2, pc, #4	; (adr r2, 8006fe8 <UART_SetConfig+0x754>)
 8006fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe8:	08007001 	.word	0x08007001
 8006fec:	08007009 	.word	0x08007009
 8006ff0:	08007011 	.word	0x08007011
 8006ff4:	08007019 	.word	0x08007019
 8006ff8:	08007021 	.word	0x08007021
 8006ffc:	08007029 	.word	0x08007029
 8007000:	2302      	movs	r3, #2
 8007002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007006:	e01a      	b.n	800703e <UART_SetConfig+0x7aa>
 8007008:	2304      	movs	r3, #4
 800700a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800700e:	e016      	b.n	800703e <UART_SetConfig+0x7aa>
 8007010:	2308      	movs	r3, #8
 8007012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007016:	e012      	b.n	800703e <UART_SetConfig+0x7aa>
 8007018:	2310      	movs	r3, #16
 800701a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800701e:	e00e      	b.n	800703e <UART_SetConfig+0x7aa>
 8007020:	2320      	movs	r3, #32
 8007022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007026:	e00a      	b.n	800703e <UART_SetConfig+0x7aa>
 8007028:	2340      	movs	r3, #64	; 0x40
 800702a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800702e:	e006      	b.n	800703e <UART_SetConfig+0x7aa>
 8007030:	2380      	movs	r3, #128	; 0x80
 8007032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007036:	e002      	b.n	800703e <UART_SetConfig+0x7aa>
 8007038:	2380      	movs	r3, #128	; 0x80
 800703a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a55      	ldr	r2, [pc, #340]	; (8007198 <UART_SetConfig+0x904>)
 8007044:	4293      	cmp	r3, r2
 8007046:	f040 80f0 	bne.w	800722a <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800704a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800704e:	2b20      	cmp	r3, #32
 8007050:	dc46      	bgt.n	80070e0 <UART_SetConfig+0x84c>
 8007052:	2b02      	cmp	r3, #2
 8007054:	db75      	blt.n	8007142 <UART_SetConfig+0x8ae>
 8007056:	3b02      	subs	r3, #2
 8007058:	2b1e      	cmp	r3, #30
 800705a:	d872      	bhi.n	8007142 <UART_SetConfig+0x8ae>
 800705c:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <UART_SetConfig+0x7d0>)
 800705e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007062:	bf00      	nop
 8007064:	080070e7 	.word	0x080070e7
 8007068:	08007143 	.word	0x08007143
 800706c:	080070ef 	.word	0x080070ef
 8007070:	08007143 	.word	0x08007143
 8007074:	08007143 	.word	0x08007143
 8007078:	08007143 	.word	0x08007143
 800707c:	080070ff 	.word	0x080070ff
 8007080:	08007143 	.word	0x08007143
 8007084:	08007143 	.word	0x08007143
 8007088:	08007143 	.word	0x08007143
 800708c:	08007143 	.word	0x08007143
 8007090:	08007143 	.word	0x08007143
 8007094:	08007143 	.word	0x08007143
 8007098:	08007143 	.word	0x08007143
 800709c:	0800710f 	.word	0x0800710f
 80070a0:	08007143 	.word	0x08007143
 80070a4:	08007143 	.word	0x08007143
 80070a8:	08007143 	.word	0x08007143
 80070ac:	08007143 	.word	0x08007143
 80070b0:	08007143 	.word	0x08007143
 80070b4:	08007143 	.word	0x08007143
 80070b8:	08007143 	.word	0x08007143
 80070bc:	08007143 	.word	0x08007143
 80070c0:	08007143 	.word	0x08007143
 80070c4:	08007143 	.word	0x08007143
 80070c8:	08007143 	.word	0x08007143
 80070cc:	08007143 	.word	0x08007143
 80070d0:	08007143 	.word	0x08007143
 80070d4:	08007143 	.word	0x08007143
 80070d8:	08007143 	.word	0x08007143
 80070dc:	08007135 	.word	0x08007135
 80070e0:	2b40      	cmp	r3, #64	; 0x40
 80070e2:	d02a      	beq.n	800713a <UART_SetConfig+0x8a6>
 80070e4:	e02d      	b.n	8007142 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80070e6:	f7fd f845 	bl	8004174 <HAL_RCCEx_GetD3PCLK1Freq>
 80070ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80070ec:	e02f      	b.n	800714e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070ee:	f107 0314 	add.w	r3, r7, #20
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fd f854 	bl	80041a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070fc:	e027      	b.n	800714e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070fe:	f107 0308 	add.w	r3, r7, #8
 8007102:	4618      	mov	r0, r3
 8007104:	f7fd f9a0 	bl	8004448 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800710c:	e01f      	b.n	800714e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800710e:	4b21      	ldr	r3, [pc, #132]	; (8007194 <UART_SetConfig+0x900>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0320 	and.w	r3, r3, #32
 8007116:	2b00      	cmp	r3, #0
 8007118:	d009      	beq.n	800712e <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800711a:	4b1e      	ldr	r3, [pc, #120]	; (8007194 <UART_SetConfig+0x900>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	08db      	lsrs	r3, r3, #3
 8007120:	f003 0303 	and.w	r3, r3, #3
 8007124:	4a1d      	ldr	r2, [pc, #116]	; (800719c <UART_SetConfig+0x908>)
 8007126:	fa22 f303 	lsr.w	r3, r2, r3
 800712a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800712c:	e00f      	b.n	800714e <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800712e:	4b1b      	ldr	r3, [pc, #108]	; (800719c <UART_SetConfig+0x908>)
 8007130:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007132:	e00c      	b.n	800714e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007134:	4b1a      	ldr	r3, [pc, #104]	; (80071a0 <UART_SetConfig+0x90c>)
 8007136:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007138:	e009      	b.n	800714e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800713a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800713e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007140:	e005      	b.n	800714e <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800714c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800714e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 81e6 	beq.w	8007522 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	4a12      	ldr	r2, [pc, #72]	; (80071a4 <UART_SetConfig+0x910>)
 800715c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007160:	461a      	mov	r2, r3
 8007162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007164:	fbb3 f3f2 	udiv	r3, r3, r2
 8007168:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	4613      	mov	r3, r2
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	4413      	add	r3, r2
 8007174:	6a3a      	ldr	r2, [r7, #32]
 8007176:	429a      	cmp	r2, r3
 8007178:	d305      	bcc.n	8007186 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007180:	6a3a      	ldr	r2, [r7, #32]
 8007182:	429a      	cmp	r2, r3
 8007184:	d910      	bls.n	80071a8 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800718c:	e1c9      	b.n	8007522 <UART_SetConfig+0xc8e>
 800718e:	bf00      	nop
 8007190:	40011c00 	.word	0x40011c00
 8007194:	58024400 	.word	0x58024400
 8007198:	58000c00 	.word	0x58000c00
 800719c:	03d09000 	.word	0x03d09000
 80071a0:	003d0900 	.word	0x003d0900
 80071a4:	0800bb54 	.word	0x0800bb54
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071aa:	4618      	mov	r0, r3
 80071ac:	f04f 0100 	mov.w	r1, #0
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b4:	4ac1      	ldr	r2, [pc, #772]	; (80074bc <UART_SetConfig+0xc28>)
 80071b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	f04f 0300 	mov.w	r3, #0
 80071c0:	f7f9 f896 	bl	80002f0 <__aeabi_uldivmod>
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	4610      	mov	r0, r2
 80071ca:	4619      	mov	r1, r3
 80071cc:	f04f 0200 	mov.w	r2, #0
 80071d0:	f04f 0300 	mov.w	r3, #0
 80071d4:	020b      	lsls	r3, r1, #8
 80071d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80071da:	0202      	lsls	r2, r0, #8
 80071dc:	6879      	ldr	r1, [r7, #4]
 80071de:	6849      	ldr	r1, [r1, #4]
 80071e0:	0849      	lsrs	r1, r1, #1
 80071e2:	4608      	mov	r0, r1
 80071e4:	f04f 0100 	mov.w	r1, #0
 80071e8:	1814      	adds	r4, r2, r0
 80071ea:	eb43 0501 	adc.w	r5, r3, r1
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	461a      	mov	r2, r3
 80071f4:	f04f 0300 	mov.w	r3, #0
 80071f8:	4620      	mov	r0, r4
 80071fa:	4629      	mov	r1, r5
 80071fc:	f7f9 f878 	bl	80002f0 <__aeabi_uldivmod>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4613      	mov	r3, r2
 8007206:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800720e:	d308      	bcc.n	8007222 <UART_SetConfig+0x98e>
 8007210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007216:	d204      	bcs.n	8007222 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800721e:	60da      	str	r2, [r3, #12]
 8007220:	e17f      	b.n	8007522 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007228:	e17b      	b.n	8007522 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007232:	f040 80bd 	bne.w	80073b0 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8007236:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800723a:	2b20      	cmp	r3, #32
 800723c:	dc48      	bgt.n	80072d0 <UART_SetConfig+0xa3c>
 800723e:	2b00      	cmp	r3, #0
 8007240:	db7b      	blt.n	800733a <UART_SetConfig+0xaa6>
 8007242:	2b20      	cmp	r3, #32
 8007244:	d879      	bhi.n	800733a <UART_SetConfig+0xaa6>
 8007246:	a201      	add	r2, pc, #4	; (adr r2, 800724c <UART_SetConfig+0x9b8>)
 8007248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724c:	080072d7 	.word	0x080072d7
 8007250:	080072df 	.word	0x080072df
 8007254:	0800733b 	.word	0x0800733b
 8007258:	0800733b 	.word	0x0800733b
 800725c:	080072e7 	.word	0x080072e7
 8007260:	0800733b 	.word	0x0800733b
 8007264:	0800733b 	.word	0x0800733b
 8007268:	0800733b 	.word	0x0800733b
 800726c:	080072f7 	.word	0x080072f7
 8007270:	0800733b 	.word	0x0800733b
 8007274:	0800733b 	.word	0x0800733b
 8007278:	0800733b 	.word	0x0800733b
 800727c:	0800733b 	.word	0x0800733b
 8007280:	0800733b 	.word	0x0800733b
 8007284:	0800733b 	.word	0x0800733b
 8007288:	0800733b 	.word	0x0800733b
 800728c:	08007307 	.word	0x08007307
 8007290:	0800733b 	.word	0x0800733b
 8007294:	0800733b 	.word	0x0800733b
 8007298:	0800733b 	.word	0x0800733b
 800729c:	0800733b 	.word	0x0800733b
 80072a0:	0800733b 	.word	0x0800733b
 80072a4:	0800733b 	.word	0x0800733b
 80072a8:	0800733b 	.word	0x0800733b
 80072ac:	0800733b 	.word	0x0800733b
 80072b0:	0800733b 	.word	0x0800733b
 80072b4:	0800733b 	.word	0x0800733b
 80072b8:	0800733b 	.word	0x0800733b
 80072bc:	0800733b 	.word	0x0800733b
 80072c0:	0800733b 	.word	0x0800733b
 80072c4:	0800733b 	.word	0x0800733b
 80072c8:	0800733b 	.word	0x0800733b
 80072cc:	0800732d 	.word	0x0800732d
 80072d0:	2b40      	cmp	r3, #64	; 0x40
 80072d2:	d02e      	beq.n	8007332 <UART_SetConfig+0xa9e>
 80072d4:	e031      	b.n	800733a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072d6:	f7fb ffd3 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 80072da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80072dc:	e033      	b.n	8007346 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072de:	f7fb ffe5 	bl	80032ac <HAL_RCC_GetPCLK2Freq>
 80072e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80072e4:	e02f      	b.n	8007346 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072e6:	f107 0314 	add.w	r3, r7, #20
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fc ff58 	bl	80041a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072f4:	e027      	b.n	8007346 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072f6:	f107 0308 	add.w	r3, r7, #8
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fd f8a4 	bl	8004448 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007304:	e01f      	b.n	8007346 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007306:	4b6e      	ldr	r3, [pc, #440]	; (80074c0 <UART_SetConfig+0xc2c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0320 	and.w	r3, r3, #32
 800730e:	2b00      	cmp	r3, #0
 8007310:	d009      	beq.n	8007326 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007312:	4b6b      	ldr	r3, [pc, #428]	; (80074c0 <UART_SetConfig+0xc2c>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	08db      	lsrs	r3, r3, #3
 8007318:	f003 0303 	and.w	r3, r3, #3
 800731c:	4a69      	ldr	r2, [pc, #420]	; (80074c4 <UART_SetConfig+0xc30>)
 800731e:	fa22 f303 	lsr.w	r3, r2, r3
 8007322:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007324:	e00f      	b.n	8007346 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8007326:	4b67      	ldr	r3, [pc, #412]	; (80074c4 <UART_SetConfig+0xc30>)
 8007328:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800732a:	e00c      	b.n	8007346 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800732c:	4b66      	ldr	r3, [pc, #408]	; (80074c8 <UART_SetConfig+0xc34>)
 800732e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007330:	e009      	b.n	8007346 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007336:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007338:	e005      	b.n	8007346 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800733a:	2300      	movs	r3, #0
 800733c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007344:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 80ea 	beq.w	8007522 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	4a5a      	ldr	r2, [pc, #360]	; (80074bc <UART_SetConfig+0xc28>)
 8007354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007358:	461a      	mov	r2, r3
 800735a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007360:	005a      	lsls	r2, r3, #1
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	085b      	lsrs	r3, r3, #1
 8007368:	441a      	add	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007372:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	2b0f      	cmp	r3, #15
 8007378:	d916      	bls.n	80073a8 <UART_SetConfig+0xb14>
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007380:	d212      	bcs.n	80073a8 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	b29b      	uxth	r3, r3
 8007386:	f023 030f 	bic.w	r3, r3, #15
 800738a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800738c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738e:	085b      	lsrs	r3, r3, #1
 8007390:	b29b      	uxth	r3, r3
 8007392:	f003 0307 	and.w	r3, r3, #7
 8007396:	b29a      	uxth	r2, r3
 8007398:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800739a:	4313      	orrs	r3, r2
 800739c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80073a4:	60da      	str	r2, [r3, #12]
 80073a6:	e0bc      	b.n	8007522 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80073ae:	e0b8      	b.n	8007522 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80073b4:	2b20      	cmp	r3, #32
 80073b6:	dc4b      	bgt.n	8007450 <UART_SetConfig+0xbbc>
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f2c0 8087 	blt.w	80074cc <UART_SetConfig+0xc38>
 80073be:	2b20      	cmp	r3, #32
 80073c0:	f200 8084 	bhi.w	80074cc <UART_SetConfig+0xc38>
 80073c4:	a201      	add	r2, pc, #4	; (adr r2, 80073cc <UART_SetConfig+0xb38>)
 80073c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ca:	bf00      	nop
 80073cc:	08007457 	.word	0x08007457
 80073d0:	0800745f 	.word	0x0800745f
 80073d4:	080074cd 	.word	0x080074cd
 80073d8:	080074cd 	.word	0x080074cd
 80073dc:	08007467 	.word	0x08007467
 80073e0:	080074cd 	.word	0x080074cd
 80073e4:	080074cd 	.word	0x080074cd
 80073e8:	080074cd 	.word	0x080074cd
 80073ec:	08007477 	.word	0x08007477
 80073f0:	080074cd 	.word	0x080074cd
 80073f4:	080074cd 	.word	0x080074cd
 80073f8:	080074cd 	.word	0x080074cd
 80073fc:	080074cd 	.word	0x080074cd
 8007400:	080074cd 	.word	0x080074cd
 8007404:	080074cd 	.word	0x080074cd
 8007408:	080074cd 	.word	0x080074cd
 800740c:	08007487 	.word	0x08007487
 8007410:	080074cd 	.word	0x080074cd
 8007414:	080074cd 	.word	0x080074cd
 8007418:	080074cd 	.word	0x080074cd
 800741c:	080074cd 	.word	0x080074cd
 8007420:	080074cd 	.word	0x080074cd
 8007424:	080074cd 	.word	0x080074cd
 8007428:	080074cd 	.word	0x080074cd
 800742c:	080074cd 	.word	0x080074cd
 8007430:	080074cd 	.word	0x080074cd
 8007434:	080074cd 	.word	0x080074cd
 8007438:	080074cd 	.word	0x080074cd
 800743c:	080074cd 	.word	0x080074cd
 8007440:	080074cd 	.word	0x080074cd
 8007444:	080074cd 	.word	0x080074cd
 8007448:	080074cd 	.word	0x080074cd
 800744c:	080074ad 	.word	0x080074ad
 8007450:	2b40      	cmp	r3, #64	; 0x40
 8007452:	d02e      	beq.n	80074b2 <UART_SetConfig+0xc1e>
 8007454:	e03a      	b.n	80074cc <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007456:	f7fb ff13 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 800745a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800745c:	e03c      	b.n	80074d8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800745e:	f7fb ff25 	bl	80032ac <HAL_RCC_GetPCLK2Freq>
 8007462:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007464:	e038      	b.n	80074d8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007466:	f107 0314 	add.w	r3, r7, #20
 800746a:	4618      	mov	r0, r3
 800746c:	f7fc fe98 	bl	80041a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007474:	e030      	b.n	80074d8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007476:	f107 0308 	add.w	r3, r7, #8
 800747a:	4618      	mov	r0, r3
 800747c:	f7fc ffe4 	bl	8004448 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007484:	e028      	b.n	80074d8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007486:	4b0e      	ldr	r3, [pc, #56]	; (80074c0 <UART_SetConfig+0xc2c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0320 	and.w	r3, r3, #32
 800748e:	2b00      	cmp	r3, #0
 8007490:	d009      	beq.n	80074a6 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007492:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <UART_SetConfig+0xc2c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	08db      	lsrs	r3, r3, #3
 8007498:	f003 0303 	and.w	r3, r3, #3
 800749c:	4a09      	ldr	r2, [pc, #36]	; (80074c4 <UART_SetConfig+0xc30>)
 800749e:	fa22 f303 	lsr.w	r3, r2, r3
 80074a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074a4:	e018      	b.n	80074d8 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80074a6:	4b07      	ldr	r3, [pc, #28]	; (80074c4 <UART_SetConfig+0xc30>)
 80074a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074aa:	e015      	b.n	80074d8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80074ac:	4b06      	ldr	r3, [pc, #24]	; (80074c8 <UART_SetConfig+0xc34>)
 80074ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074b0:	e012      	b.n	80074d8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074b8:	e00e      	b.n	80074d8 <UART_SetConfig+0xc44>
 80074ba:	bf00      	nop
 80074bc:	0800bb54 	.word	0x0800bb54
 80074c0:	58024400 	.word	0x58024400
 80074c4:	03d09000 	.word	0x03d09000
 80074c8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80074d6:	bf00      	nop
    }

    if (pclk != 0U)
 80074d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d021      	beq.n	8007522 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	4a1a      	ldr	r2, [pc, #104]	; (800754c <UART_SetConfig+0xcb8>)
 80074e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074e8:	461a      	mov	r2, r3
 80074ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	085b      	lsrs	r3, r3, #1
 80074f6:	441a      	add	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007500:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	2b0f      	cmp	r3, #15
 8007506:	d909      	bls.n	800751c <UART_SetConfig+0xc88>
 8007508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800750e:	d205      	bcs.n	800751c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	b29a      	uxth	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	60da      	str	r2, [r3, #12]
 800751a:	e002      	b.n	8007522 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800753e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007542:	4618      	mov	r0, r3
 8007544:	3738      	adds	r7, #56	; 0x38
 8007546:	46bd      	mov	sp, r7
 8007548:	bdb0      	pop	{r4, r5, r7, pc}
 800754a:	bf00      	nop
 800754c:	0800bb54 	.word	0x0800bb54

08007550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755c:	f003 0301 	and.w	r3, r3, #1
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00a      	beq.n	800757a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00a      	beq.n	800759c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	430a      	orrs	r2, r1
 800759a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a0:	f003 0304 	and.w	r3, r3, #4
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00a      	beq.n	80075be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	430a      	orrs	r2, r1
 80075bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c2:	f003 0308 	and.w	r3, r3, #8
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e4:	f003 0310 	and.w	r3, r3, #16
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00a      	beq.n	8007602 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007606:	f003 0320 	and.w	r3, r3, #32
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00a      	beq.n	8007624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	430a      	orrs	r2, r1
 8007622:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800762c:	2b00      	cmp	r3, #0
 800762e:	d01a      	beq.n	8007666 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	430a      	orrs	r2, r1
 8007644:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800764e:	d10a      	bne.n	8007666 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	430a      	orrs	r2, r1
 8007664:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00a      	beq.n	8007688 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	605a      	str	r2, [r3, #4]
  }
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af02      	add	r7, sp, #8
 800769a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076a4:	f7f9 fdfc 	bl	80012a0 <HAL_GetTick>
 80076a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0308 	and.w	r3, r3, #8
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	d10e      	bne.n	80076d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f82f 	bl	800772a <UART_WaitOnFlagUntilTimeout>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e025      	b.n	8007722 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0304 	and.w	r3, r3, #4
 80076e0:	2b04      	cmp	r3, #4
 80076e2:	d10e      	bne.n	8007702 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f819 	bl	800772a <UART_WaitOnFlagUntilTimeout>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e00f      	b.n	8007722 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2220      	movs	r2, #32
 8007706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2220      	movs	r2, #32
 800770e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b09c      	sub	sp, #112	; 0x70
 800772e:	af00      	add	r7, sp, #0
 8007730:	60f8      	str	r0, [r7, #12]
 8007732:	60b9      	str	r1, [r7, #8]
 8007734:	603b      	str	r3, [r7, #0]
 8007736:	4613      	mov	r3, r2
 8007738:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800773a:	e0a9      	b.n	8007890 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800773c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800773e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007742:	f000 80a5 	beq.w	8007890 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007746:	f7f9 fdab 	bl	80012a0 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007752:	429a      	cmp	r2, r3
 8007754:	d302      	bcc.n	800775c <UART_WaitOnFlagUntilTimeout+0x32>
 8007756:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007758:	2b00      	cmp	r3, #0
 800775a:	d140      	bne.n	80077de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007764:	e853 3f00 	ldrex	r3, [r3]
 8007768:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800776a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800776c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007770:	667b      	str	r3, [r7, #100]	; 0x64
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	461a      	mov	r2, r3
 8007778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800777a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800777c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007780:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007782:	e841 2300 	strex	r3, r2, [r1]
 8007786:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e6      	bne.n	800775c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3308      	adds	r3, #8
 8007794:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800779e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a0:	f023 0301 	bic.w	r3, r3, #1
 80077a4:	663b      	str	r3, [r7, #96]	; 0x60
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3308      	adds	r3, #8
 80077ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80077b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e5      	bne.n	800778e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e069      	b.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0304 	and.w	r3, r3, #4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d051      	beq.n	8007890 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077fa:	d149      	bne.n	8007890 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007804:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800781a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	461a      	mov	r2, r3
 8007822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007824:	637b      	str	r3, [r7, #52]	; 0x34
 8007826:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800782a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e6      	bne.n	8007806 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3308      	adds	r3, #8
 800783e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	613b      	str	r3, [r7, #16]
   return(result);
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	f023 0301 	bic.w	r3, r3, #1
 800784e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3308      	adds	r3, #8
 8007856:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007858:	623a      	str	r2, [r7, #32]
 800785a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	69f9      	ldr	r1, [r7, #28]
 800785e:	6a3a      	ldr	r2, [r7, #32]
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	61bb      	str	r3, [r7, #24]
   return(result);
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e5      	bne.n	8007838 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2220      	movs	r2, #32
 8007870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2220      	movs	r2, #32
 8007878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2220      	movs	r2, #32
 8007880:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e010      	b.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	69da      	ldr	r2, [r3, #28]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	4013      	ands	r3, r2
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	429a      	cmp	r2, r3
 800789e:	bf0c      	ite	eq
 80078a0:	2301      	moveq	r3, #1
 80078a2:	2300      	movne	r3, #0
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	461a      	mov	r2, r3
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	f43f af46 	beq.w	800773c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3770      	adds	r7, #112	; 0x70
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078bc:	b480      	push	{r7}
 80078be:	b0a3      	sub	sp, #140	; 0x8c
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	4613      	mov	r3, r2
 80078c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	88fa      	ldrh	r2, [r7, #6]
 80078d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	88fa      	ldrh	r2, [r7, #6]
 80078dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ee:	d10e      	bne.n	800790e <UART_Start_Receive_IT+0x52>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d105      	bne.n	8007904 <UART_Start_Receive_IT+0x48>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80078fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007902:	e02d      	b.n	8007960 <UART_Start_Receive_IT+0xa4>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	22ff      	movs	r2, #255	; 0xff
 8007908:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800790c:	e028      	b.n	8007960 <UART_Start_Receive_IT+0xa4>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10d      	bne.n	8007932 <UART_Start_Receive_IT+0x76>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d104      	bne.n	8007928 <UART_Start_Receive_IT+0x6c>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	22ff      	movs	r2, #255	; 0xff
 8007922:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007926:	e01b      	b.n	8007960 <UART_Start_Receive_IT+0xa4>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	227f      	movs	r2, #127	; 0x7f
 800792c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007930:	e016      	b.n	8007960 <UART_Start_Receive_IT+0xa4>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800793a:	d10d      	bne.n	8007958 <UART_Start_Receive_IT+0x9c>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d104      	bne.n	800794e <UART_Start_Receive_IT+0x92>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	227f      	movs	r2, #127	; 0x7f
 8007948:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800794c:	e008      	b.n	8007960 <UART_Start_Receive_IT+0xa4>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	223f      	movs	r2, #63	; 0x3f
 8007952:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007956:	e003      	b.n	8007960 <UART_Start_Receive_IT+0xa4>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2222      	movs	r2, #34	; 0x22
 800796c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3308      	adds	r3, #8
 8007976:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007980:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007982:	f043 0301 	orr.w	r3, r3, #1
 8007986:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3308      	adds	r3, #8
 8007990:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007994:	673a      	str	r2, [r7, #112]	; 0x70
 8007996:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007998:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800799a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800799c:	e841 2300 	strex	r3, r2, [r1]
 80079a0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80079a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1e3      	bne.n	8007970 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079b0:	d153      	bne.n	8007a5a <UART_Start_Receive_IT+0x19e>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80079b8:	88fa      	ldrh	r2, [r7, #6]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d34d      	bcc.n	8007a5a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c6:	d107      	bne.n	80079d8 <UART_Start_Receive_IT+0x11c>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d103      	bne.n	80079d8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4a4b      	ldr	r2, [pc, #300]	; (8007b00 <UART_Start_Receive_IT+0x244>)
 80079d4:	671a      	str	r2, [r3, #112]	; 0x70
 80079d6:	e002      	b.n	80079de <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4a4a      	ldr	r2, [pc, #296]	; (8007b04 <UART_Start_Receive_IT+0x248>)
 80079dc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d01a      	beq.n	8007a24 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079f6:	e853 3f00 	ldrex	r3, [r3]
 80079fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80079fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a12:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a14:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a18:	e841 2300 	strex	r3, r2, [r1]
 8007a1c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e4      	bne.n	80079ee <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3308      	adds	r3, #8
 8007a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3308      	adds	r3, #8
 8007a42:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007a44:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a46:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e5      	bne.n	8007a24 <UART_Start_Receive_IT+0x168>
 8007a58:	e04a      	b.n	8007af0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a62:	d107      	bne.n	8007a74 <UART_Start_Receive_IT+0x1b8>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d103      	bne.n	8007a74 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4a26      	ldr	r2, [pc, #152]	; (8007b08 <UART_Start_Receive_IT+0x24c>)
 8007a70:	671a      	str	r2, [r3, #112]	; 0x70
 8007a72:	e002      	b.n	8007a7a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	4a25      	ldr	r2, [pc, #148]	; (8007b0c <UART_Start_Receive_IT+0x250>)
 8007a78:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d019      	beq.n	8007abe <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a92:	e853 3f00 	ldrex	r3, [r3]
 8007a96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007a9e:	677b      	str	r3, [r7, #116]	; 0x74
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8007aaa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007aae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ab0:	e841 2300 	strex	r3, r2, [r1]
 8007ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1e6      	bne.n	8007a8a <UART_Start_Receive_IT+0x1ce>
 8007abc:	e018      	b.n	8007af0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	e853 3f00 	ldrex	r3, [r3]
 8007aca:	613b      	str	r3, [r7, #16]
   return(result);
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	f043 0320 	orr.w	r3, r3, #32
 8007ad2:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007adc:	623b      	str	r3, [r7, #32]
 8007ade:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	69f9      	ldr	r1, [r7, #28]
 8007ae2:	6a3a      	ldr	r2, [r7, #32]
 8007ae4:	e841 2300 	strex	r3, r2, [r1]
 8007ae8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e6      	bne.n	8007abe <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	378c      	adds	r7, #140	; 0x8c
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	08008219 	.word	0x08008219
 8007b04:	08007f21 	.word	0x08007f21
 8007b08:	08007dbf 	.word	0x08007dbf
 8007b0c:	08007c5f 	.word	0x08007c5f

08007b10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b095      	sub	sp, #84	; 0x54
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	461a      	mov	r2, r3
 8007b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b36:	643b      	str	r3, [r7, #64]	; 0x40
 8007b38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b3e:	e841 2300 	strex	r3, r2, [r1]
 8007b42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1e6      	bne.n	8007b18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	3308      	adds	r3, #8
 8007b50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	e853 3f00 	ldrex	r3, [r3]
 8007b58:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b5a:	69fa      	ldr	r2, [r7, #28]
 8007b5c:	4b1e      	ldr	r3, [pc, #120]	; (8007bd8 <UART_EndRxTransfer+0xc8>)
 8007b5e:	4013      	ands	r3, r2
 8007b60:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	3308      	adds	r3, #8
 8007b68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e5      	bne.n	8007b4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d118      	bne.n	8007bb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	e853 3f00 	ldrex	r3, [r3]
 8007b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f023 0310 	bic.w	r3, r3, #16
 8007b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ba4:	61bb      	str	r3, [r7, #24]
 8007ba6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba8:	6979      	ldr	r1, [r7, #20]
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	e841 2300 	strex	r3, r2, [r1]
 8007bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1e6      	bne.n	8007b86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007bcc:	bf00      	nop
 8007bce:	3754      	adds	r7, #84	; 0x54
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr
 8007bd8:	effffffe 	.word	0xeffffffe

08007bdc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f7fe fe34 	bl	8006868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c00:	bf00      	nop
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b088      	sub	sp, #32
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c24:	61fb      	str	r3, [r7, #28]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	61bb      	str	r3, [r7, #24]
 8007c30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c32:	6979      	ldr	r1, [r7, #20]
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	e841 2300 	strex	r3, r2, [r1]
 8007c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1e6      	bne.n	8007c10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2220      	movs	r2, #32
 8007c46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7fe fdff 	bl	8006854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c56:	bf00      	nop
 8007c58:	3720      	adds	r7, #32
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b096      	sub	sp, #88	; 0x58
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c6c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c76:	2b22      	cmp	r3, #34	; 0x22
 8007c78:	f040 8095 	bne.w	8007da6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c86:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007c8a:	b2d9      	uxtb	r1, r3
 8007c8c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c96:	400a      	ands	r2, r1
 8007c98:	b2d2      	uxtb	r2, r2
 8007c9a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d178      	bne.n	8007db6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cd8:	653b      	str	r3, [r7, #80]	; 0x50
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ce4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e6      	bne.n	8007cc4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	623b      	str	r3, [r7, #32]
   return(result);
 8007d06:	6a3b      	ldr	r3, [r7, #32]
 8007d08:	f023 0301 	bic.w	r3, r3, #1
 8007d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3308      	adds	r3, #8
 8007d14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d16:	633a      	str	r2, [r7, #48]	; 0x30
 8007d18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d1e:	e841 2300 	strex	r3, r2, [r1]
 8007d22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1e5      	bne.n	8007cf6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d12e      	bne.n	8007d9e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	e853 3f00 	ldrex	r3, [r3]
 8007d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 0310 	bic.w	r3, r3, #16
 8007d5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	461a      	mov	r2, r3
 8007d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d64:	61fb      	str	r3, [r7, #28]
 8007d66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d68:	69b9      	ldr	r1, [r7, #24]
 8007d6a:	69fa      	ldr	r2, [r7, #28]
 8007d6c:	e841 2300 	strex	r3, r2, [r1]
 8007d70:	617b      	str	r3, [r7, #20]
   return(result);
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1e6      	bne.n	8007d46 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	f003 0310 	and.w	r3, r3, #16
 8007d82:	2b10      	cmp	r3, #16
 8007d84:	d103      	bne.n	8007d8e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2210      	movs	r2, #16
 8007d8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7fe fd70 	bl	800687c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d9c:	e00b      	b.n	8007db6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7f9 f9dc 	bl	800115c <HAL_UART_RxCpltCallback>
}
 8007da4:	e007      	b.n	8007db6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	699a      	ldr	r2, [r3, #24]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f042 0208 	orr.w	r2, r2, #8
 8007db4:	619a      	str	r2, [r3, #24]
}
 8007db6:	bf00      	nop
 8007db8:	3758      	adds	r7, #88	; 0x58
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b096      	sub	sp, #88	; 0x58
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007dcc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd6:	2b22      	cmp	r3, #34	; 0x22
 8007dd8:	f040 8095 	bne.w	8007f06 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dea:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007dec:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007df0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007df4:	4013      	ands	r3, r2
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dfa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e00:	1c9a      	adds	r2, r3, #2
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d178      	bne.n	8007f16 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e2c:	e853 3f00 	ldrex	r3, [r3]
 8007e30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e42:	643b      	str	r3, [r7, #64]	; 0x40
 8007e44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e6      	bne.n	8007e24 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3308      	adds	r3, #8
 8007e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	e853 3f00 	ldrex	r3, [r3]
 8007e64:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	f023 0301 	bic.w	r3, r3, #1
 8007e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3308      	adds	r3, #8
 8007e74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e7e:	e841 2300 	strex	r3, r2, [r1]
 8007e82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1e5      	bne.n	8007e56 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d12e      	bne.n	8007efe <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	e853 3f00 	ldrex	r3, [r3]
 8007eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	f023 0310 	bic.w	r3, r3, #16
 8007eba:	647b      	str	r3, [r7, #68]	; 0x44
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ec4:	61bb      	str	r3, [r7, #24]
 8007ec6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec8:	6979      	ldr	r1, [r7, #20]
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	e841 2300 	strex	r3, r2, [r1]
 8007ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1e6      	bne.n	8007ea6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	69db      	ldr	r3, [r3, #28]
 8007ede:	f003 0310 	and.w	r3, r3, #16
 8007ee2:	2b10      	cmp	r3, #16
 8007ee4:	d103      	bne.n	8007eee <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2210      	movs	r2, #16
 8007eec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7fe fcc0 	bl	800687c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007efc:	e00b      	b.n	8007f16 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7f9 f92c 	bl	800115c <HAL_UART_RxCpltCallback>
}
 8007f04:	e007      	b.n	8007f16 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	699a      	ldr	r2, [r3, #24]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f042 0208 	orr.w	r2, r2, #8
 8007f14:	619a      	str	r2, [r3, #24]
}
 8007f16:	bf00      	nop
 8007f18:	3758      	adds	r7, #88	; 0x58
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b0a6      	sub	sp, #152	; 0x98
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f2e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f56:	2b22      	cmp	r3, #34	; 0x22
 8007f58:	f040 814d 	bne.w	80081f6 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f62:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f66:	e0f4      	b.n	8008152 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f72:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007f76:	b2d9      	uxtb	r1, r3
 8007f78:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f82:	400a      	ands	r2, r1
 8007f84:	b2d2      	uxtb	r2, r2
 8007f86:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f8c:	1c5a      	adds	r2, r3, #1
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	69db      	ldr	r3, [r3, #28]
 8007faa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007fae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007fb2:	f003 0307 	and.w	r3, r3, #7
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d053      	beq.n	8008062 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d011      	beq.n	8007fea <UART_RxISR_8BIT_FIFOEN+0xca>
 8007fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00b      	beq.n	8007fea <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fe0:	f043 0201 	orr.w	r2, r3, #1
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007fee:	f003 0302 	and.w	r3, r3, #2
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d011      	beq.n	800801a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007ff6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ffa:	f003 0301 	and.w	r3, r3, #1
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00b      	beq.n	800801a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2202      	movs	r2, #2
 8008008:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008010:	f043 0204 	orr.w	r2, r3, #4
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800801a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800801e:	f003 0304 	and.w	r3, r3, #4
 8008022:	2b00      	cmp	r3, #0
 8008024:	d011      	beq.n	800804a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008026:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00b      	beq.n	800804a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2204      	movs	r2, #4
 8008038:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008040:	f043 0202 	orr.w	r2, r3, #2
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008050:	2b00      	cmp	r3, #0
 8008052:	d006      	beq.n	8008062 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7fe fc07 	bl	8006868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008068:	b29b      	uxth	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d171      	bne.n	8008152 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008076:	e853 3f00 	ldrex	r3, [r3]
 800807a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800807c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800807e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008082:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	461a      	mov	r2, r3
 800808c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008090:	66bb      	str	r3, [r7, #104]	; 0x68
 8008092:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008094:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008096:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008098:	e841 2300 	strex	r3, r2, [r1]
 800809c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800809e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1e4      	bne.n	800806e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3308      	adds	r3, #8
 80080aa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080ae:	e853 3f00 	ldrex	r3, [r3]
 80080b2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80080b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080b6:	4b56      	ldr	r3, [pc, #344]	; (8008210 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 80080b8:	4013      	ands	r3, r2
 80080ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3308      	adds	r3, #8
 80080c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80080c4:	657a      	str	r2, [r7, #84]	; 0x54
 80080c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80080ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80080cc:	e841 2300 	strex	r3, r2, [r1]
 80080d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80080d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e5      	bne.n	80080a4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2220      	movs	r2, #32
 80080dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d12e      	bne.n	800814c <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	f023 0310 	bic.w	r3, r3, #16
 8008108:	67bb      	str	r3, [r7, #120]	; 0x78
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008112:	643b      	str	r3, [r7, #64]	; 0x40
 8008114:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008116:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008118:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800811a:	e841 2300 	strex	r3, r2, [r1]
 800811e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e6      	bne.n	80080f4 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	69db      	ldr	r3, [r3, #28]
 800812c:	f003 0310 	and.w	r3, r3, #16
 8008130:	2b10      	cmp	r3, #16
 8008132:	d103      	bne.n	800813c <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2210      	movs	r2, #16
 800813a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7fe fb99 	bl	800687c <HAL_UARTEx_RxEventCallback>
 800814a:	e002      	b.n	8008152 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7f9 f805 	bl	800115c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008152:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008156:	2b00      	cmp	r3, #0
 8008158:	d006      	beq.n	8008168 <UART_RxISR_8BIT_FIFOEN+0x248>
 800815a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800815e:	f003 0320 	and.w	r3, r3, #32
 8008162:	2b00      	cmp	r3, #0
 8008164:	f47f af00 	bne.w	8007f68 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800816e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008172:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008176:	2b00      	cmp	r3, #0
 8008178:	d045      	beq.n	8008206 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008180:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008184:	429a      	cmp	r2, r3
 8008186:	d23e      	bcs.n	8008206 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3308      	adds	r3, #8
 800818e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008190:	6a3b      	ldr	r3, [r7, #32]
 8008192:	e853 3f00 	ldrex	r3, [r3]
 8008196:	61fb      	str	r3, [r7, #28]
   return(result);
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800819e:	673b      	str	r3, [r7, #112]	; 0x70
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3308      	adds	r3, #8
 80081a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80081a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081b0:	e841 2300 	strex	r3, r2, [r1]
 80081b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1e5      	bne.n	8008188 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a15      	ldr	r2, [pc, #84]	; (8008214 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80081c0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	e853 3f00 	ldrex	r3, [r3]
 80081ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f043 0320 	orr.w	r3, r3, #32
 80081d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	461a      	mov	r2, r3
 80081de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e0:	61bb      	str	r3, [r7, #24]
 80081e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e4:	6979      	ldr	r1, [r7, #20]
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	e841 2300 	strex	r3, r2, [r1]
 80081ec:	613b      	str	r3, [r7, #16]
   return(result);
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1e6      	bne.n	80081c2 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081f4:	e007      	b.n	8008206 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	699a      	ldr	r2, [r3, #24]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f042 0208 	orr.w	r2, r2, #8
 8008204:	619a      	str	r2, [r3, #24]
}
 8008206:	bf00      	nop
 8008208:	3798      	adds	r7, #152	; 0x98
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	effffffe 	.word	0xeffffffe
 8008214:	08007c5f 	.word	0x08007c5f

08008218 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b0a8      	sub	sp, #160	; 0xa0
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008226:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800824e:	2b22      	cmp	r3, #34	; 0x22
 8008250:	f040 8151 	bne.w	80084f6 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800825a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800825e:	e0f8      	b.n	8008452 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008266:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008272:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008276:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800827a:	4013      	ands	r3, r2
 800827c:	b29a      	uxth	r2, r3
 800827e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008282:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008288:	1c9a      	adds	r2, r3, #2
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008294:	b29b      	uxth	r3, r3
 8008296:	3b01      	subs	r3, #1
 8008298:	b29a      	uxth	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80082aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082ae:	f003 0307 	and.w	r3, r3, #7
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d053      	beq.n	800835e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d011      	beq.n	80082e6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80082c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80082c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00b      	beq.n	80082e6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2201      	movs	r2, #1
 80082d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082dc:	f043 0201 	orr.w	r2, r3, #1
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082ea:	f003 0302 	and.w	r3, r3, #2
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d011      	beq.n	8008316 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80082f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00b      	beq.n	8008316 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2202      	movs	r2, #2
 8008304:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800830c:	f043 0204 	orr.w	r2, r3, #4
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008316:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800831a:	f003 0304 	and.w	r3, r3, #4
 800831e:	2b00      	cmp	r3, #0
 8008320:	d011      	beq.n	8008346 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008322:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00b      	beq.n	8008346 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2204      	movs	r2, #4
 8008334:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800833c:	f043 0202 	orr.w	r2, r3, #2
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800834c:	2b00      	cmp	r3, #0
 800834e:	d006      	beq.n	800835e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7fe fa89 	bl	8006868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008364:	b29b      	uxth	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d173      	bne.n	8008452 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800837a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800837e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800838c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800838e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008390:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008392:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008394:	e841 2300 	strex	r3, r2, [r1]
 8008398:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800839a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1e4      	bne.n	800836a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3308      	adds	r3, #8
 80083a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083aa:	e853 3f00 	ldrex	r3, [r3]
 80083ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083b2:	4b57      	ldr	r3, [pc, #348]	; (8008510 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3308      	adds	r3, #8
 80083c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80083c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80083c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083cc:	e841 2300 	strex	r3, r2, [r1]
 80083d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1e3      	bne.n	80083a0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2220      	movs	r2, #32
 80083dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d12e      	bne.n	800844c <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fc:	e853 3f00 	ldrex	r3, [r3]
 8008400:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008404:	f023 0310 	bic.w	r3, r3, #16
 8008408:	67fb      	str	r3, [r7, #124]	; 0x7c
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	461a      	mov	r2, r3
 8008410:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008412:	647b      	str	r3, [r7, #68]	; 0x44
 8008414:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008416:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008418:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800841a:	e841 2300 	strex	r3, r2, [r1]
 800841e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1e6      	bne.n	80083f4 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	f003 0310 	and.w	r3, r3, #16
 8008430:	2b10      	cmp	r3, #16
 8008432:	d103      	bne.n	800843c <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2210      	movs	r2, #16
 800843a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7fe fa19 	bl	800687c <HAL_UARTEx_RxEventCallback>
 800844a:	e002      	b.n	8008452 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7f8 fe85 	bl	800115c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008452:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008456:	2b00      	cmp	r3, #0
 8008458:	d006      	beq.n	8008468 <UART_RxISR_16BIT_FIFOEN+0x250>
 800845a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b00      	cmp	r3, #0
 8008464:	f47f aefc 	bne.w	8008260 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800846e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008472:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008476:	2b00      	cmp	r3, #0
 8008478:	d045      	beq.n	8008506 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008480:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008484:	429a      	cmp	r2, r3
 8008486:	d23e      	bcs.n	8008506 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3308      	adds	r3, #8
 800848e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	e853 3f00 	ldrex	r3, [r3]
 8008496:	623b      	str	r3, [r7, #32]
   return(result);
 8008498:	6a3b      	ldr	r3, [r7, #32]
 800849a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800849e:	677b      	str	r3, [r7, #116]	; 0x74
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3308      	adds	r3, #8
 80084a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80084a8:	633a      	str	r2, [r7, #48]	; 0x30
 80084aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084b0:	e841 2300 	strex	r3, r2, [r1]
 80084b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1e5      	bne.n	8008488 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a15      	ldr	r2, [pc, #84]	; (8008514 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80084c0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	e853 3f00 	ldrex	r3, [r3]
 80084ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f043 0320 	orr.w	r3, r3, #32
 80084d6:	673b      	str	r3, [r7, #112]	; 0x70
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	461a      	mov	r2, r3
 80084de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084e0:	61fb      	str	r3, [r7, #28]
 80084e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e4:	69b9      	ldr	r1, [r7, #24]
 80084e6:	69fa      	ldr	r2, [r7, #28]
 80084e8:	e841 2300 	strex	r3, r2, [r1]
 80084ec:	617b      	str	r3, [r7, #20]
   return(result);
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1e6      	bne.n	80084c2 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084f4:	e007      	b.n	8008506 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	699a      	ldr	r2, [r3, #24]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f042 0208 	orr.w	r2, r2, #8
 8008504:	619a      	str	r2, [r3, #24]
}
 8008506:	bf00      	nop
 8008508:	37a0      	adds	r7, #160	; 0xa0
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	effffffe 	.word	0xeffffffe
 8008514:	08007dbf 	.word	0x08007dbf

08008518 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008562:	2b01      	cmp	r3, #1
 8008564:	d101      	bne.n	800856a <HAL_UARTEx_DisableFifoMode+0x16>
 8008566:	2302      	movs	r3, #2
 8008568:	e027      	b.n	80085ba <HAL_UARTEx_DisableFifoMode+0x66>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2224      	movs	r2, #36	; 0x24
 8008576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f022 0201 	bic.w	r2, r2, #1
 8008590:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008598:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2220      	movs	r2, #32
 80085ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3714      	adds	r7, #20
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d101      	bne.n	80085de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085da:	2302      	movs	r3, #2
 80085dc:	e02d      	b.n	800863a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2224      	movs	r2, #36	; 0x24
 80085ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f022 0201 	bic.w	r2, r2, #1
 8008604:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	430a      	orrs	r2, r1
 8008618:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f850 	bl	80086c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2220      	movs	r2, #32
 800862c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b084      	sub	sp, #16
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008652:	2b01      	cmp	r3, #1
 8008654:	d101      	bne.n	800865a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008656:	2302      	movs	r3, #2
 8008658:	e02d      	b.n	80086b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2224      	movs	r2, #36	; 0x24
 8008666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f022 0201 	bic.w	r2, r2, #1
 8008680:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	430a      	orrs	r2, r1
 8008694:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f812 	bl	80086c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2220      	movs	r2, #32
 80086a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
	...

080086c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d108      	bne.n	80086e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80086e0:	e031      	b.n	8008746 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086e2:	2310      	movs	r3, #16
 80086e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086e6:	2310      	movs	r3, #16
 80086e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	0e5b      	lsrs	r3, r3, #25
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	f003 0307 	and.w	r3, r3, #7
 80086f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	0f5b      	lsrs	r3, r3, #29
 8008702:	b2db      	uxtb	r3, r3
 8008704:	f003 0307 	and.w	r3, r3, #7
 8008708:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800870a:	7bbb      	ldrb	r3, [r7, #14]
 800870c:	7b3a      	ldrb	r2, [r7, #12]
 800870e:	4911      	ldr	r1, [pc, #68]	; (8008754 <UARTEx_SetNbDataToProcess+0x94>)
 8008710:	5c8a      	ldrb	r2, [r1, r2]
 8008712:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008716:	7b3a      	ldrb	r2, [r7, #12]
 8008718:	490f      	ldr	r1, [pc, #60]	; (8008758 <UARTEx_SetNbDataToProcess+0x98>)
 800871a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800871c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008720:	b29a      	uxth	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	7b7a      	ldrb	r2, [r7, #13]
 800872c:	4909      	ldr	r1, [pc, #36]	; (8008754 <UARTEx_SetNbDataToProcess+0x94>)
 800872e:	5c8a      	ldrb	r2, [r1, r2]
 8008730:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008734:	7b7a      	ldrb	r2, [r7, #13]
 8008736:	4908      	ldr	r1, [pc, #32]	; (8008758 <UARTEx_SetNbDataToProcess+0x98>)
 8008738:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800873a:	fb93 f3f2 	sdiv	r3, r3, r2
 800873e:	b29a      	uxth	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008746:	bf00      	nop
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	0800bb6c 	.word	0x0800bb6c
 8008758:	0800bb74 	.word	0x0800bb74

0800875c <__NVIC_SetPriority>:
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	6039      	str	r1, [r7, #0]
 8008766:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800876c:	2b00      	cmp	r3, #0
 800876e:	db0a      	blt.n	8008786 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	b2da      	uxtb	r2, r3
 8008774:	490c      	ldr	r1, [pc, #48]	; (80087a8 <__NVIC_SetPriority+0x4c>)
 8008776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800877a:	0112      	lsls	r2, r2, #4
 800877c:	b2d2      	uxtb	r2, r2
 800877e:	440b      	add	r3, r1
 8008780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008784:	e00a      	b.n	800879c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	b2da      	uxtb	r2, r3
 800878a:	4908      	ldr	r1, [pc, #32]	; (80087ac <__NVIC_SetPriority+0x50>)
 800878c:	88fb      	ldrh	r3, [r7, #6]
 800878e:	f003 030f 	and.w	r3, r3, #15
 8008792:	3b04      	subs	r3, #4
 8008794:	0112      	lsls	r2, r2, #4
 8008796:	b2d2      	uxtb	r2, r2
 8008798:	440b      	add	r3, r1
 800879a:	761a      	strb	r2, [r3, #24]
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr
 80087a8:	e000e100 	.word	0xe000e100
 80087ac:	e000ed00 	.word	0xe000ed00

080087b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80087b0:	b580      	push	{r7, lr}
 80087b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80087b4:	4b05      	ldr	r3, [pc, #20]	; (80087cc <SysTick_Handler+0x1c>)
 80087b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80087b8:	f001 ff12 	bl	800a5e0 <xTaskGetSchedulerState>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d001      	beq.n	80087c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80087c2:	f002 fcf9 	bl	800b1b8 <xPortSysTickHandler>
  }
}
 80087c6:	bf00      	nop
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	e000e010 	.word	0xe000e010

080087d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80087d0:	b580      	push	{r7, lr}
 80087d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80087d4:	2100      	movs	r1, #0
 80087d6:	f06f 0004 	mvn.w	r0, #4
 80087da:	f7ff ffbf 	bl	800875c <__NVIC_SetPriority>
#endif
}
 80087de:	bf00      	nop
 80087e0:	bd80      	pop	{r7, pc}
	...

080087e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087ea:	f3ef 8305 	mrs	r3, IPSR
 80087ee:	603b      	str	r3, [r7, #0]
  return(result);
 80087f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d003      	beq.n	80087fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80087f6:	f06f 0305 	mvn.w	r3, #5
 80087fa:	607b      	str	r3, [r7, #4]
 80087fc:	e00c      	b.n	8008818 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80087fe:	4b0a      	ldr	r3, [pc, #40]	; (8008828 <osKernelInitialize+0x44>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d105      	bne.n	8008812 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008806:	4b08      	ldr	r3, [pc, #32]	; (8008828 <osKernelInitialize+0x44>)
 8008808:	2201      	movs	r2, #1
 800880a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800880c:	2300      	movs	r3, #0
 800880e:	607b      	str	r3, [r7, #4]
 8008810:	e002      	b.n	8008818 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008816:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008818:	687b      	ldr	r3, [r7, #4]
}
 800881a:	4618      	mov	r0, r3
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	240000a0 	.word	0x240000a0

0800882c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008832:	f3ef 8305 	mrs	r3, IPSR
 8008836:	603b      	str	r3, [r7, #0]
  return(result);
 8008838:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800883a:	2b00      	cmp	r3, #0
 800883c:	d003      	beq.n	8008846 <osKernelStart+0x1a>
    stat = osErrorISR;
 800883e:	f06f 0305 	mvn.w	r3, #5
 8008842:	607b      	str	r3, [r7, #4]
 8008844:	e010      	b.n	8008868 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008846:	4b0b      	ldr	r3, [pc, #44]	; (8008874 <osKernelStart+0x48>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d109      	bne.n	8008862 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800884e:	f7ff ffbf 	bl	80087d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008852:	4b08      	ldr	r3, [pc, #32]	; (8008874 <osKernelStart+0x48>)
 8008854:	2202      	movs	r2, #2
 8008856:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008858:	f001 fa66 	bl	8009d28 <vTaskStartScheduler>
      stat = osOK;
 800885c:	2300      	movs	r3, #0
 800885e:	607b      	str	r3, [r7, #4]
 8008860:	e002      	b.n	8008868 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008866:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008868:	687b      	ldr	r3, [r7, #4]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	240000a0 	.word	0x240000a0

08008878 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008878:	b580      	push	{r7, lr}
 800887a:	b08e      	sub	sp, #56	; 0x38
 800887c:	af04      	add	r7, sp, #16
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008884:	2300      	movs	r3, #0
 8008886:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008888:	f3ef 8305 	mrs	r3, IPSR
 800888c:	617b      	str	r3, [r7, #20]
  return(result);
 800888e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008890:	2b00      	cmp	r3, #0
 8008892:	d17e      	bne.n	8008992 <osThreadNew+0x11a>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d07b      	beq.n	8008992 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800889a:	2380      	movs	r3, #128	; 0x80
 800889c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800889e:	2318      	movs	r3, #24
 80088a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80088a2:	2300      	movs	r3, #0
 80088a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80088a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d045      	beq.n	800893e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d002      	beq.n	80088c0 <osThreadNew+0x48>
        name = attr->name;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d002      	beq.n	80088ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d008      	beq.n	80088e6 <osThreadNew+0x6e>
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	2b38      	cmp	r3, #56	; 0x38
 80088d8:	d805      	bhi.n	80088e6 <osThreadNew+0x6e>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <osThreadNew+0x72>
        return (NULL);
 80088e6:	2300      	movs	r3, #0
 80088e8:	e054      	b.n	8008994 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d003      	beq.n	80088fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	089b      	lsrs	r3, r3, #2
 80088f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00e      	beq.n	8008920 <osThreadNew+0xa8>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	2bbb      	cmp	r3, #187	; 0xbb
 8008908:	d90a      	bls.n	8008920 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800890e:	2b00      	cmp	r3, #0
 8008910:	d006      	beq.n	8008920 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d002      	beq.n	8008920 <osThreadNew+0xa8>
        mem = 1;
 800891a:	2301      	movs	r3, #1
 800891c:	61bb      	str	r3, [r7, #24]
 800891e:	e010      	b.n	8008942 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10c      	bne.n	8008942 <osThreadNew+0xca>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d108      	bne.n	8008942 <osThreadNew+0xca>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d104      	bne.n	8008942 <osThreadNew+0xca>
          mem = 0;
 8008938:	2300      	movs	r3, #0
 800893a:	61bb      	str	r3, [r7, #24]
 800893c:	e001      	b.n	8008942 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800893e:	2300      	movs	r3, #0
 8008940:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d110      	bne.n	800896a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008950:	9202      	str	r2, [sp, #8]
 8008952:	9301      	str	r3, [sp, #4]
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	6a3a      	ldr	r2, [r7, #32]
 800895c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 fff6 	bl	8009950 <xTaskCreateStatic>
 8008964:	4603      	mov	r3, r0
 8008966:	613b      	str	r3, [r7, #16]
 8008968:	e013      	b.n	8008992 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d110      	bne.n	8008992 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008970:	6a3b      	ldr	r3, [r7, #32]
 8008972:	b29a      	uxth	r2, r3
 8008974:	f107 0310 	add.w	r3, r7, #16
 8008978:	9301      	str	r3, [sp, #4]
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f001 f841 	bl	8009a0a <xTaskCreate>
 8008988:	4603      	mov	r3, r0
 800898a:	2b01      	cmp	r3, #1
 800898c:	d001      	beq.n	8008992 <osThreadNew+0x11a>
            hTask = NULL;
 800898e:	2300      	movs	r3, #0
 8008990:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008992:	693b      	ldr	r3, [r7, #16]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3728      	adds	r7, #40	; 0x28
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089a4:	f3ef 8305 	mrs	r3, IPSR
 80089a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80089aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d003      	beq.n	80089b8 <osDelay+0x1c>
    stat = osErrorISR;
 80089b0:	f06f 0305 	mvn.w	r3, #5
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	e007      	b.n	80089c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d002      	beq.n	80089c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f001 f97c 	bl	8009cc0 <vTaskDelay>
    }
  }

  return (stat);
 80089c8:	68fb      	ldr	r3, [r7, #12]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b08a      	sub	sp, #40	; 0x28
 80089d6:	af02      	add	r7, sp, #8
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	60b9      	str	r1, [r7, #8]
 80089dc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80089de:	2300      	movs	r3, #0
 80089e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089e2:	f3ef 8305 	mrs	r3, IPSR
 80089e6:	613b      	str	r3, [r7, #16]
  return(result);
 80089e8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d15f      	bne.n	8008aae <osMessageQueueNew+0xdc>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d05c      	beq.n	8008aae <osMessageQueueNew+0xdc>
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d059      	beq.n	8008aae <osMessageQueueNew+0xdc>
    mem = -1;
 80089fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d029      	beq.n	8008a5a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d012      	beq.n	8008a34 <osMessageQueueNew+0x62>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	2b4f      	cmp	r3, #79	; 0x4f
 8008a14:	d90e      	bls.n	8008a34 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00a      	beq.n	8008a34 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	695a      	ldr	r2, [r3, #20]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	68b9      	ldr	r1, [r7, #8]
 8008a26:	fb01 f303 	mul.w	r3, r1, r3
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d302      	bcc.n	8008a34 <osMessageQueueNew+0x62>
        mem = 1;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	61bb      	str	r3, [r7, #24]
 8008a32:	e014      	b.n	8008a5e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d110      	bne.n	8008a5e <osMessageQueueNew+0x8c>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10c      	bne.n	8008a5e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d108      	bne.n	8008a5e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d104      	bne.n	8008a5e <osMessageQueueNew+0x8c>
          mem = 0;
 8008a54:	2300      	movs	r3, #0
 8008a56:	61bb      	str	r3, [r7, #24]
 8008a58:	e001      	b.n	8008a5e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d10b      	bne.n	8008a7c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	691a      	ldr	r2, [r3, #16]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	9100      	str	r1, [sp, #0]
 8008a70:	68b9      	ldr	r1, [r7, #8]
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 fa2e 	bl	8008ed4 <xQueueGenericCreateStatic>
 8008a78:	61f8      	str	r0, [r7, #28]
 8008a7a:	e008      	b.n	8008a8e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d105      	bne.n	8008a8e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008a82:	2200      	movs	r2, #0
 8008a84:	68b9      	ldr	r1, [r7, #8]
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f000 fa9c 	bl	8008fc4 <xQueueGenericCreate>
 8008a8c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00c      	beq.n	8008aae <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d003      	beq.n	8008aa2 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	617b      	str	r3, [r7, #20]
 8008aa0:	e001      	b.n	8008aa6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008aa6:	6979      	ldr	r1, [r7, #20]
 8008aa8:	69f8      	ldr	r0, [r7, #28]
 8008aaa:	f000 fef3 	bl	8009894 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008aae:	69fb      	ldr	r3, [r7, #28]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3720      	adds	r7, #32
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b088      	sub	sp, #32
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	603b      	str	r3, [r7, #0]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ad0:	f3ef 8305 	mrs	r3, IPSR
 8008ad4:	617b      	str	r3, [r7, #20]
  return(result);
 8008ad6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d028      	beq.n	8008b2e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d005      	beq.n	8008aee <osMessageQueuePut+0x36>
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d002      	beq.n	8008aee <osMessageQueuePut+0x36>
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008aee:	f06f 0303 	mvn.w	r3, #3
 8008af2:	61fb      	str	r3, [r7, #28]
 8008af4:	e038      	b.n	8008b68 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008af6:	2300      	movs	r3, #0
 8008af8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008afa:	f107 0210 	add.w	r2, r7, #16
 8008afe:	2300      	movs	r3, #0
 8008b00:	68b9      	ldr	r1, [r7, #8]
 8008b02:	69b8      	ldr	r0, [r7, #24]
 8008b04:	f000 fbba 	bl	800927c <xQueueGenericSendFromISR>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d003      	beq.n	8008b16 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008b0e:	f06f 0302 	mvn.w	r3, #2
 8008b12:	61fb      	str	r3, [r7, #28]
 8008b14:	e028      	b.n	8008b68 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d025      	beq.n	8008b68 <osMessageQueuePut+0xb0>
 8008b1c:	4b15      	ldr	r3, [pc, #84]	; (8008b74 <osMessageQueuePut+0xbc>)
 8008b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b22:	601a      	str	r2, [r3, #0]
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	f3bf 8f6f 	isb	sy
 8008b2c:	e01c      	b.n	8008b68 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <osMessageQueuePut+0x82>
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d103      	bne.n	8008b42 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008b3a:	f06f 0303 	mvn.w	r3, #3
 8008b3e:	61fb      	str	r3, [r7, #28]
 8008b40:	e012      	b.n	8008b68 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008b42:	2300      	movs	r3, #0
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	68b9      	ldr	r1, [r7, #8]
 8008b48:	69b8      	ldr	r0, [r7, #24]
 8008b4a:	f000 fa99 	bl	8009080 <xQueueGenericSend>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d009      	beq.n	8008b68 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008b5a:	f06f 0301 	mvn.w	r3, #1
 8008b5e:	61fb      	str	r3, [r7, #28]
 8008b60:	e002      	b.n	8008b68 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008b62:	f06f 0302 	mvn.w	r3, #2
 8008b66:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008b68:	69fb      	ldr	r3, [r7, #28]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3720      	adds	r7, #32
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	e000ed04 	.word	0xe000ed04

08008b78 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b088      	sub	sp, #32
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b8e:	f3ef 8305 	mrs	r3, IPSR
 8008b92:	617b      	str	r3, [r7, #20]
  return(result);
 8008b94:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d028      	beq.n	8008bec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d005      	beq.n	8008bac <osMessageQueueGet+0x34>
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <osMessageQueueGet+0x34>
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008bac:	f06f 0303 	mvn.w	r3, #3
 8008bb0:	61fb      	str	r3, [r7, #28]
 8008bb2:	e037      	b.n	8008c24 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008bb8:	f107 0310 	add.w	r3, r7, #16
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	68b9      	ldr	r1, [r7, #8]
 8008bc0:	69b8      	ldr	r0, [r7, #24]
 8008bc2:	f000 fcd7 	bl	8009574 <xQueueReceiveFromISR>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d003      	beq.n	8008bd4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008bcc:	f06f 0302 	mvn.w	r3, #2
 8008bd0:	61fb      	str	r3, [r7, #28]
 8008bd2:	e027      	b.n	8008c24 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d024      	beq.n	8008c24 <osMessageQueueGet+0xac>
 8008bda:	4b15      	ldr	r3, [pc, #84]	; (8008c30 <osMessageQueueGet+0xb8>)
 8008bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	e01b      	b.n	8008c24 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d002      	beq.n	8008bf8 <osMessageQueueGet+0x80>
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d103      	bne.n	8008c00 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008bf8:	f06f 0303 	mvn.w	r3, #3
 8008bfc:	61fb      	str	r3, [r7, #28]
 8008bfe:	e011      	b.n	8008c24 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	68b9      	ldr	r1, [r7, #8]
 8008c04:	69b8      	ldr	r0, [r7, #24]
 8008c06:	f000 fbd5 	bl	80093b4 <xQueueReceive>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d009      	beq.n	8008c24 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d003      	beq.n	8008c1e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008c16:	f06f 0301 	mvn.w	r3, #1
 8008c1a:	61fb      	str	r3, [r7, #28]
 8008c1c:	e002      	b.n	8008c24 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008c1e:	f06f 0302 	mvn.w	r3, #2
 8008c22:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008c24:	69fb      	ldr	r3, [r7, #28]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3720      	adds	r7, #32
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	e000ed04 	.word	0xe000ed04

08008c34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4a07      	ldr	r2, [pc, #28]	; (8008c60 <vApplicationGetIdleTaskMemory+0x2c>)
 8008c44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	4a06      	ldr	r2, [pc, #24]	; (8008c64 <vApplicationGetIdleTaskMemory+0x30>)
 8008c4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2280      	movs	r2, #128	; 0x80
 8008c50:	601a      	str	r2, [r3, #0]
}
 8008c52:	bf00      	nop
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	240000a4 	.word	0x240000a4
 8008c64:	24000160 	.word	0x24000160

08008c68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	4a07      	ldr	r2, [pc, #28]	; (8008c94 <vApplicationGetTimerTaskMemory+0x2c>)
 8008c78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	4a06      	ldr	r2, [pc, #24]	; (8008c98 <vApplicationGetTimerTaskMemory+0x30>)
 8008c7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c86:	601a      	str	r2, [r3, #0]
}
 8008c88:	bf00      	nop
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr
 8008c94:	24000360 	.word	0x24000360
 8008c98:	2400041c 	.word	0x2400041c

08008c9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f103 0208 	add.w	r2, r3, #8
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f103 0208 	add.w	r2, r3, #8
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f103 0208 	add.w	r2, r3, #8
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008cea:	bf00      	nop
 8008cec:	370c      	adds	r7, #12
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b085      	sub	sp, #20
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	689a      	ldr	r2, [r3, #8]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	683a      	ldr	r2, [r7, #0]
 8008d1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	1c5a      	adds	r2, r3, #1
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	601a      	str	r2, [r3, #0]
}
 8008d32:	bf00      	nop
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b085      	sub	sp, #20
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d54:	d103      	bne.n	8008d5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	e00c      	b.n	8008d78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	3308      	adds	r3, #8
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	e002      	b.n	8008d6c <vListInsert+0x2e>
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	60fb      	str	r3, [r7, #12]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d2f6      	bcs.n	8008d66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	685a      	ldr	r2, [r3, #4]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	683a      	ldr	r2, [r7, #0]
 8008d92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	1c5a      	adds	r2, r3, #1
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	601a      	str	r2, [r3, #0]
}
 8008da4:	bf00      	nop
 8008da6:	3714      	adds	r7, #20
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	6892      	ldr	r2, [r2, #8]
 8008dc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	6852      	ldr	r2, [r2, #4]
 8008dd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d103      	bne.n	8008de4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	689a      	ldr	r2, [r3, #8]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	1e5a      	subs	r2, r3, #1
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10a      	bne.n	8008e2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1c:	f383 8811 	msr	BASEPRI, r3
 8008e20:	f3bf 8f6f 	isb	sy
 8008e24:	f3bf 8f4f 	dsb	sy
 8008e28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008e2a:	bf00      	nop
 8008e2c:	e7fe      	b.n	8008e2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008e2e:	f002 f931 	bl	800b094 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e3a:	68f9      	ldr	r1, [r7, #12]
 8008e3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e3e:	fb01 f303 	mul.w	r3, r1, r3
 8008e42:	441a      	add	r2, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	68f9      	ldr	r1, [r7, #12]
 8008e62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e64:	fb01 f303 	mul.w	r3, r1, r3
 8008e68:	441a      	add	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	22ff      	movs	r2, #255	; 0xff
 8008e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	22ff      	movs	r2, #255	; 0xff
 8008e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d114      	bne.n	8008eae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d01a      	beq.n	8008ec2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	3310      	adds	r3, #16
 8008e90:	4618      	mov	r0, r3
 8008e92:	f001 f9e3 	bl	800a25c <xTaskRemoveFromEventList>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d012      	beq.n	8008ec2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e9c:	4b0c      	ldr	r3, [pc, #48]	; (8008ed0 <xQueueGenericReset+0xcc>)
 8008e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	f3bf 8f4f 	dsb	sy
 8008ea8:	f3bf 8f6f 	isb	sy
 8008eac:	e009      	b.n	8008ec2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3310      	adds	r3, #16
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7ff fef2 	bl	8008c9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	3324      	adds	r3, #36	; 0x24
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7ff feed 	bl	8008c9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008ec2:	f002 f917 	bl	800b0f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008ec6:	2301      	movs	r3, #1
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	e000ed04 	.word	0xe000ed04

08008ed4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b08e      	sub	sp, #56	; 0x38
 8008ed8:	af02      	add	r7, sp, #8
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
 8008ee0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10a      	bne.n	8008efe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008efa:	bf00      	nop
 8008efc:	e7fe      	b.n	8008efc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10a      	bne.n	8008f1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f16:	bf00      	nop
 8008f18:	e7fe      	b.n	8008f18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d002      	beq.n	8008f26 <xQueueGenericCreateStatic+0x52>
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d001      	beq.n	8008f2a <xQueueGenericCreateStatic+0x56>
 8008f26:	2301      	movs	r3, #1
 8008f28:	e000      	b.n	8008f2c <xQueueGenericCreateStatic+0x58>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10a      	bne.n	8008f46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	623b      	str	r3, [r7, #32]
}
 8008f42:	bf00      	nop
 8008f44:	e7fe      	b.n	8008f44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d102      	bne.n	8008f52 <xQueueGenericCreateStatic+0x7e>
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d101      	bne.n	8008f56 <xQueueGenericCreateStatic+0x82>
 8008f52:	2301      	movs	r3, #1
 8008f54:	e000      	b.n	8008f58 <xQueueGenericCreateStatic+0x84>
 8008f56:	2300      	movs	r3, #0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d10a      	bne.n	8008f72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f60:	f383 8811 	msr	BASEPRI, r3
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	61fb      	str	r3, [r7, #28]
}
 8008f6e:	bf00      	nop
 8008f70:	e7fe      	b.n	8008f70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f72:	2350      	movs	r3, #80	; 0x50
 8008f74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	2b50      	cmp	r3, #80	; 0x50
 8008f7a:	d00a      	beq.n	8008f92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	61bb      	str	r3, [r7, #24]
}
 8008f8e:	bf00      	nop
 8008f90:	e7fe      	b.n	8008f90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00d      	beq.n	8008fba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008fa6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	68b9      	ldr	r1, [r7, #8]
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f000 f83f 	bl	8009038 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3730      	adds	r7, #48	; 0x30
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b08a      	sub	sp, #40	; 0x28
 8008fc8:	af02      	add	r7, sp, #8
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10a      	bne.n	8008fee <xQueueGenericCreate+0x2a>
	__asm volatile
 8008fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fdc:	f383 8811 	msr	BASEPRI, r3
 8008fe0:	f3bf 8f6f 	isb	sy
 8008fe4:	f3bf 8f4f 	dsb	sy
 8008fe8:	613b      	str	r3, [r7, #16]
}
 8008fea:	bf00      	nop
 8008fec:	e7fe      	b.n	8008fec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	fb02 f303 	mul.w	r3, r2, r3
 8008ff6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	3350      	adds	r3, #80	; 0x50
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f002 f96b 	bl	800b2d8 <pvPortMalloc>
 8009002:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d011      	beq.n	800902e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	3350      	adds	r3, #80	; 0x50
 8009012:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800901c:	79fa      	ldrb	r2, [r7, #7]
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	4613      	mov	r3, r2
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	68b9      	ldr	r1, [r7, #8]
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f000 f805 	bl	8009038 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800902e:	69bb      	ldr	r3, [r7, #24]
	}
 8009030:	4618      	mov	r0, r3
 8009032:	3720      	adds	r7, #32
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
 8009044:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d103      	bne.n	8009054 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	601a      	str	r2, [r3, #0]
 8009052:	e002      	b.n	800905a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009066:	2101      	movs	r1, #1
 8009068:	69b8      	ldr	r0, [r7, #24]
 800906a:	f7ff fecb 	bl	8008e04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	78fa      	ldrb	r2, [r7, #3]
 8009072:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009076:	bf00      	nop
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b08e      	sub	sp, #56	; 0x38
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
 800908c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800908e:	2300      	movs	r3, #0
 8009090:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10a      	bne.n	80090b2 <xQueueGenericSend+0x32>
	__asm volatile
 800909c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a0:	f383 8811 	msr	BASEPRI, r3
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090ae:	bf00      	nop
 80090b0:	e7fe      	b.n	80090b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d103      	bne.n	80090c0 <xQueueGenericSend+0x40>
 80090b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d101      	bne.n	80090c4 <xQueueGenericSend+0x44>
 80090c0:	2301      	movs	r3, #1
 80090c2:	e000      	b.n	80090c6 <xQueueGenericSend+0x46>
 80090c4:	2300      	movs	r3, #0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10a      	bne.n	80090e0 <xQueueGenericSend+0x60>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090dc:	bf00      	nop
 80090de:	e7fe      	b.n	80090de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d103      	bne.n	80090ee <xQueueGenericSend+0x6e>
 80090e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d101      	bne.n	80090f2 <xQueueGenericSend+0x72>
 80090ee:	2301      	movs	r3, #1
 80090f0:	e000      	b.n	80090f4 <xQueueGenericSend+0x74>
 80090f2:	2300      	movs	r3, #0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10a      	bne.n	800910e <xQueueGenericSend+0x8e>
	__asm volatile
 80090f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	623b      	str	r3, [r7, #32]
}
 800910a:	bf00      	nop
 800910c:	e7fe      	b.n	800910c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800910e:	f001 fa67 	bl	800a5e0 <xTaskGetSchedulerState>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d102      	bne.n	800911e <xQueueGenericSend+0x9e>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <xQueueGenericSend+0xa2>
 800911e:	2301      	movs	r3, #1
 8009120:	e000      	b.n	8009124 <xQueueGenericSend+0xa4>
 8009122:	2300      	movs	r3, #0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10a      	bne.n	800913e <xQueueGenericSend+0xbe>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	61fb      	str	r3, [r7, #28]
}
 800913a:	bf00      	nop
 800913c:	e7fe      	b.n	800913c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800913e:	f001 ffa9 	bl	800b094 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800914a:	429a      	cmp	r2, r3
 800914c:	d302      	bcc.n	8009154 <xQueueGenericSend+0xd4>
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2b02      	cmp	r3, #2
 8009152:	d129      	bne.n	80091a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	68b9      	ldr	r1, [r7, #8]
 8009158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800915a:	f000 fa8b 	bl	8009674 <prvCopyDataToQueue>
 800915e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009164:	2b00      	cmp	r3, #0
 8009166:	d010      	beq.n	800918a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916a:	3324      	adds	r3, #36	; 0x24
 800916c:	4618      	mov	r0, r3
 800916e:	f001 f875 	bl	800a25c <xTaskRemoveFromEventList>
 8009172:	4603      	mov	r3, r0
 8009174:	2b00      	cmp	r3, #0
 8009176:	d013      	beq.n	80091a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009178:	4b3f      	ldr	r3, [pc, #252]	; (8009278 <xQueueGenericSend+0x1f8>)
 800917a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800917e:	601a      	str	r2, [r3, #0]
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	e00a      	b.n	80091a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800918a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918c:	2b00      	cmp	r3, #0
 800918e:	d007      	beq.n	80091a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009190:	4b39      	ldr	r3, [pc, #228]	; (8009278 <xQueueGenericSend+0x1f8>)
 8009192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009196:	601a      	str	r2, [r3, #0]
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80091a0:	f001 ffa8 	bl	800b0f4 <vPortExitCritical>
				return pdPASS;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e063      	b.n	8009270 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d103      	bne.n	80091b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091ae:	f001 ffa1 	bl	800b0f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80091b2:	2300      	movs	r3, #0
 80091b4:	e05c      	b.n	8009270 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d106      	bne.n	80091ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091bc:	f107 0314 	add.w	r3, r7, #20
 80091c0:	4618      	mov	r0, r3
 80091c2:	f001 f8af 	bl	800a324 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091c6:	2301      	movs	r3, #1
 80091c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091ca:	f001 ff93 	bl	800b0f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091ce:	f000 fe1b 	bl	8009e08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091d2:	f001 ff5f 	bl	800b094 <vPortEnterCritical>
 80091d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091dc:	b25b      	sxtb	r3, r3
 80091de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091e2:	d103      	bne.n	80091ec <xQueueGenericSend+0x16c>
 80091e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091f2:	b25b      	sxtb	r3, r3
 80091f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091f8:	d103      	bne.n	8009202 <xQueueGenericSend+0x182>
 80091fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009202:	f001 ff77 	bl	800b0f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009206:	1d3a      	adds	r2, r7, #4
 8009208:	f107 0314 	add.w	r3, r7, #20
 800920c:	4611      	mov	r1, r2
 800920e:	4618      	mov	r0, r3
 8009210:	f001 f89e 	bl	800a350 <xTaskCheckForTimeOut>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d124      	bne.n	8009264 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800921a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800921c:	f000 fb22 	bl	8009864 <prvIsQueueFull>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d018      	beq.n	8009258 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009228:	3310      	adds	r3, #16
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	4611      	mov	r1, r2
 800922e:	4618      	mov	r0, r3
 8009230:	f000 ffc4 	bl	800a1bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009236:	f000 faad 	bl	8009794 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800923a:	f000 fdf3 	bl	8009e24 <xTaskResumeAll>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	f47f af7c 	bne.w	800913e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009246:	4b0c      	ldr	r3, [pc, #48]	; (8009278 <xQueueGenericSend+0x1f8>)
 8009248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800924c:	601a      	str	r2, [r3, #0]
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	e772      	b.n	800913e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800925a:	f000 fa9b 	bl	8009794 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800925e:	f000 fde1 	bl	8009e24 <xTaskResumeAll>
 8009262:	e76c      	b.n	800913e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009266:	f000 fa95 	bl	8009794 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800926a:	f000 fddb 	bl	8009e24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800926e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009270:	4618      	mov	r0, r3
 8009272:	3738      	adds	r7, #56	; 0x38
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	e000ed04 	.word	0xe000ed04

0800927c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b090      	sub	sp, #64	; 0x40
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
 8009288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800928e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10a      	bne.n	80092aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092a6:	bf00      	nop
 80092a8:	e7fe      	b.n	80092a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d103      	bne.n	80092b8 <xQueueGenericSendFromISR+0x3c>
 80092b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <xQueueGenericSendFromISR+0x40>
 80092b8:	2301      	movs	r3, #1
 80092ba:	e000      	b.n	80092be <xQueueGenericSendFromISR+0x42>
 80092bc:	2300      	movs	r3, #0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d10a      	bne.n	80092d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092d4:	bf00      	nop
 80092d6:	e7fe      	b.n	80092d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d103      	bne.n	80092e6 <xQueueGenericSendFromISR+0x6a>
 80092de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d101      	bne.n	80092ea <xQueueGenericSendFromISR+0x6e>
 80092e6:	2301      	movs	r3, #1
 80092e8:	e000      	b.n	80092ec <xQueueGenericSendFromISR+0x70>
 80092ea:	2300      	movs	r3, #0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10a      	bne.n	8009306 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	623b      	str	r3, [r7, #32]
}
 8009302:	bf00      	nop
 8009304:	e7fe      	b.n	8009304 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009306:	f001 ffa7 	bl	800b258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800930a:	f3ef 8211 	mrs	r2, BASEPRI
 800930e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	61fa      	str	r2, [r7, #28]
 8009320:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009322:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009324:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800932a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800932e:	429a      	cmp	r2, r3
 8009330:	d302      	bcc.n	8009338 <xQueueGenericSendFromISR+0xbc>
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	2b02      	cmp	r3, #2
 8009336:	d12f      	bne.n	8009398 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800933e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009346:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	68b9      	ldr	r1, [r7, #8]
 800934c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800934e:	f000 f991 	bl	8009674 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009352:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800935a:	d112      	bne.n	8009382 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800935c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009360:	2b00      	cmp	r3, #0
 8009362:	d016      	beq.n	8009392 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009366:	3324      	adds	r3, #36	; 0x24
 8009368:	4618      	mov	r0, r3
 800936a:	f000 ff77 	bl	800a25c <xTaskRemoveFromEventList>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00e      	beq.n	8009392 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00b      	beq.n	8009392 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	601a      	str	r2, [r3, #0]
 8009380:	e007      	b.n	8009392 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009382:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009386:	3301      	adds	r3, #1
 8009388:	b2db      	uxtb	r3, r3
 800938a:	b25a      	sxtb	r2, r3
 800938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009392:	2301      	movs	r3, #1
 8009394:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009396:	e001      	b.n	800939c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009398:	2300      	movs	r3, #0
 800939a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800939c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80093a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80093a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3740      	adds	r7, #64	; 0x40
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
	...

080093b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b08c      	sub	sp, #48	; 0x30
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80093c0:	2300      	movs	r3, #0
 80093c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80093c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10a      	bne.n	80093e4 <xQueueReceive+0x30>
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	623b      	str	r3, [r7, #32]
}
 80093e0:	bf00      	nop
 80093e2:	e7fe      	b.n	80093e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d103      	bne.n	80093f2 <xQueueReceive+0x3e>
 80093ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d101      	bne.n	80093f6 <xQueueReceive+0x42>
 80093f2:	2301      	movs	r3, #1
 80093f4:	e000      	b.n	80093f8 <xQueueReceive+0x44>
 80093f6:	2300      	movs	r3, #0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10a      	bne.n	8009412 <xQueueReceive+0x5e>
	__asm volatile
 80093fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	61fb      	str	r3, [r7, #28]
}
 800940e:	bf00      	nop
 8009410:	e7fe      	b.n	8009410 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009412:	f001 f8e5 	bl	800a5e0 <xTaskGetSchedulerState>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d102      	bne.n	8009422 <xQueueReceive+0x6e>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d101      	bne.n	8009426 <xQueueReceive+0x72>
 8009422:	2301      	movs	r3, #1
 8009424:	e000      	b.n	8009428 <xQueueReceive+0x74>
 8009426:	2300      	movs	r3, #0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10a      	bne.n	8009442 <xQueueReceive+0x8e>
	__asm volatile
 800942c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	61bb      	str	r3, [r7, #24]
}
 800943e:	bf00      	nop
 8009440:	e7fe      	b.n	8009440 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009442:	f001 fe27 	bl	800b094 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800944c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944e:	2b00      	cmp	r3, #0
 8009450:	d01f      	beq.n	8009492 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009452:	68b9      	ldr	r1, [r7, #8]
 8009454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009456:	f000 f977 	bl	8009748 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800945a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945c:	1e5a      	subs	r2, r3, #1
 800945e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009460:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00f      	beq.n	800948a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800946a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946c:	3310      	adds	r3, #16
 800946e:	4618      	mov	r0, r3
 8009470:	f000 fef4 	bl	800a25c <xTaskRemoveFromEventList>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d007      	beq.n	800948a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800947a:	4b3d      	ldr	r3, [pc, #244]	; (8009570 <xQueueReceive+0x1bc>)
 800947c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800948a:	f001 fe33 	bl	800b0f4 <vPortExitCritical>
				return pdPASS;
 800948e:	2301      	movs	r3, #1
 8009490:	e069      	b.n	8009566 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d103      	bne.n	80094a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009498:	f001 fe2c 	bl	800b0f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800949c:	2300      	movs	r3, #0
 800949e:	e062      	b.n	8009566 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d106      	bne.n	80094b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094a6:	f107 0310 	add.w	r3, r7, #16
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 ff3a 	bl	800a324 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094b0:	2301      	movs	r3, #1
 80094b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094b4:	f001 fe1e 	bl	800b0f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094b8:	f000 fca6 	bl	8009e08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094bc:	f001 fdea 	bl	800b094 <vPortEnterCritical>
 80094c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094c6:	b25b      	sxtb	r3, r3
 80094c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094cc:	d103      	bne.n	80094d6 <xQueueReceive+0x122>
 80094ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094dc:	b25b      	sxtb	r3, r3
 80094de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094e2:	d103      	bne.n	80094ec <xQueueReceive+0x138>
 80094e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094ec:	f001 fe02 	bl	800b0f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094f0:	1d3a      	adds	r2, r7, #4
 80094f2:	f107 0310 	add.w	r3, r7, #16
 80094f6:	4611      	mov	r1, r2
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 ff29 	bl	800a350 <xTaskCheckForTimeOut>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d123      	bne.n	800954c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009506:	f000 f997 	bl	8009838 <prvIsQueueEmpty>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d017      	beq.n	8009540 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009512:	3324      	adds	r3, #36	; 0x24
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	4611      	mov	r1, r2
 8009518:	4618      	mov	r0, r3
 800951a:	f000 fe4f 	bl	800a1bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800951e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009520:	f000 f938 	bl	8009794 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009524:	f000 fc7e 	bl	8009e24 <xTaskResumeAll>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d189      	bne.n	8009442 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800952e:	4b10      	ldr	r3, [pc, #64]	; (8009570 <xQueueReceive+0x1bc>)
 8009530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009534:	601a      	str	r2, [r3, #0]
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	e780      	b.n	8009442 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009542:	f000 f927 	bl	8009794 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009546:	f000 fc6d 	bl	8009e24 <xTaskResumeAll>
 800954a:	e77a      	b.n	8009442 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800954c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800954e:	f000 f921 	bl	8009794 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009552:	f000 fc67 	bl	8009e24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009558:	f000 f96e 	bl	8009838 <prvIsQueueEmpty>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	f43f af6f 	beq.w	8009442 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009564:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009566:	4618      	mov	r0, r3
 8009568:	3730      	adds	r7, #48	; 0x30
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	e000ed04 	.word	0xe000ed04

08009574 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b08e      	sub	sp, #56	; 0x38
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10a      	bne.n	80095a0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	623b      	str	r3, [r7, #32]
}
 800959c:	bf00      	nop
 800959e:	e7fe      	b.n	800959e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d103      	bne.n	80095ae <xQueueReceiveFromISR+0x3a>
 80095a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d101      	bne.n	80095b2 <xQueueReceiveFromISR+0x3e>
 80095ae:	2301      	movs	r3, #1
 80095b0:	e000      	b.n	80095b4 <xQueueReceiveFromISR+0x40>
 80095b2:	2300      	movs	r3, #0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10a      	bne.n	80095ce <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80095b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095bc:	f383 8811 	msr	BASEPRI, r3
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	61fb      	str	r3, [r7, #28]
}
 80095ca:	bf00      	nop
 80095cc:	e7fe      	b.n	80095cc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095ce:	f001 fe43 	bl	800b258 <vPortValidateInterruptPriority>
	__asm volatile
 80095d2:	f3ef 8211 	mrs	r2, BASEPRI
 80095d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095da:	f383 8811 	msr	BASEPRI, r3
 80095de:	f3bf 8f6f 	isb	sy
 80095e2:	f3bf 8f4f 	dsb	sy
 80095e6:	61ba      	str	r2, [r7, #24]
 80095e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80095ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d02f      	beq.n	800965a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80095fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009604:	68b9      	ldr	r1, [r7, #8]
 8009606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009608:	f000 f89e 	bl	8009748 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800960c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960e:	1e5a      	subs	r2, r3, #1
 8009610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009612:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009614:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800961c:	d112      	bne.n	8009644 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800961e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d016      	beq.n	8009654 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009628:	3310      	adds	r3, #16
 800962a:	4618      	mov	r0, r3
 800962c:	f000 fe16 	bl	800a25c <xTaskRemoveFromEventList>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00e      	beq.n	8009654 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00b      	beq.n	8009654 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	601a      	str	r2, [r3, #0]
 8009642:	e007      	b.n	8009654 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009648:	3301      	adds	r3, #1
 800964a:	b2db      	uxtb	r3, r3
 800964c:	b25a      	sxtb	r2, r3
 800964e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009654:	2301      	movs	r3, #1
 8009656:	637b      	str	r3, [r7, #52]	; 0x34
 8009658:	e001      	b.n	800965e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800965a:	2300      	movs	r3, #0
 800965c:	637b      	str	r3, [r7, #52]	; 0x34
 800965e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009660:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	f383 8811 	msr	BASEPRI, r3
}
 8009668:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800966a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800966c:	4618      	mov	r0, r3
 800966e:	3738      	adds	r7, #56	; 0x38
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009680:	2300      	movs	r3, #0
 8009682:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009688:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10d      	bne.n	80096ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d14d      	bne.n	8009736 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 ffbc 	bl	800a61c <xTaskPriorityDisinherit>
 80096a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	609a      	str	r2, [r3, #8]
 80096ac:	e043      	b.n	8009736 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d119      	bne.n	80096e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6858      	ldr	r0, [r3, #4]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096bc:	461a      	mov	r2, r3
 80096be:	68b9      	ldr	r1, [r7, #8]
 80096c0:	f002 f824 	bl	800b70c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	685a      	ldr	r2, [r3, #4]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096cc:	441a      	add	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	685a      	ldr	r2, [r3, #4]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d32b      	bcc.n	8009736 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	605a      	str	r2, [r3, #4]
 80096e6:	e026      	b.n	8009736 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	68d8      	ldr	r0, [r3, #12]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f0:	461a      	mov	r2, r3
 80096f2:	68b9      	ldr	r1, [r7, #8]
 80096f4:	f002 f80a 	bl	800b70c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	68da      	ldr	r2, [r3, #12]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009700:	425b      	negs	r3, r3
 8009702:	441a      	add	r2, r3
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	68da      	ldr	r2, [r3, #12]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	429a      	cmp	r2, r3
 8009712:	d207      	bcs.n	8009724 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	689a      	ldr	r2, [r3, #8]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971c:	425b      	negs	r3, r3
 800971e:	441a      	add	r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b02      	cmp	r3, #2
 8009728:	d105      	bne.n	8009736 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	3b01      	subs	r3, #1
 8009734:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	1c5a      	adds	r2, r3, #1
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800973e:	697b      	ldr	r3, [r7, #20]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3718      	adds	r7, #24
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009756:	2b00      	cmp	r3, #0
 8009758:	d018      	beq.n	800978c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	68da      	ldr	r2, [r3, #12]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009762:	441a      	add	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68da      	ldr	r2, [r3, #12]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	429a      	cmp	r2, r3
 8009772:	d303      	bcc.n	800977c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	68d9      	ldr	r1, [r3, #12]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009784:	461a      	mov	r2, r3
 8009786:	6838      	ldr	r0, [r7, #0]
 8009788:	f001 ffc0 	bl	800b70c <memcpy>
	}
}
 800978c:	bf00      	nop
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800979c:	f001 fc7a 	bl	800b094 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097a8:	e011      	b.n	80097ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d012      	beq.n	80097d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	3324      	adds	r3, #36	; 0x24
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 fd50 	bl	800a25c <xTaskRemoveFromEventList>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d001      	beq.n	80097c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80097c2:	f000 fe27 	bl	800a414 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	3b01      	subs	r3, #1
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	dce9      	bgt.n	80097aa <prvUnlockQueue+0x16>
 80097d6:	e000      	b.n	80097da <prvUnlockQueue+0x46>
					break;
 80097d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	22ff      	movs	r2, #255	; 0xff
 80097de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80097e2:	f001 fc87 	bl	800b0f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80097e6:	f001 fc55 	bl	800b094 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097f2:	e011      	b.n	8009818 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d012      	beq.n	8009822 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	3310      	adds	r3, #16
 8009800:	4618      	mov	r0, r3
 8009802:	f000 fd2b 	bl	800a25c <xTaskRemoveFromEventList>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d001      	beq.n	8009810 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800980c:	f000 fe02 	bl	800a414 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009810:	7bbb      	ldrb	r3, [r7, #14]
 8009812:	3b01      	subs	r3, #1
 8009814:	b2db      	uxtb	r3, r3
 8009816:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800981c:	2b00      	cmp	r3, #0
 800981e:	dce9      	bgt.n	80097f4 <prvUnlockQueue+0x60>
 8009820:	e000      	b.n	8009824 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009822:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	22ff      	movs	r2, #255	; 0xff
 8009828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800982c:	f001 fc62 	bl	800b0f4 <vPortExitCritical>
}
 8009830:	bf00      	nop
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009840:	f001 fc28 	bl	800b094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009848:	2b00      	cmp	r3, #0
 800984a:	d102      	bne.n	8009852 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800984c:	2301      	movs	r3, #1
 800984e:	60fb      	str	r3, [r7, #12]
 8009850:	e001      	b.n	8009856 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009852:	2300      	movs	r3, #0
 8009854:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009856:	f001 fc4d 	bl	800b0f4 <vPortExitCritical>

	return xReturn;
 800985a:	68fb      	ldr	r3, [r7, #12]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800986c:	f001 fc12 	bl	800b094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009878:	429a      	cmp	r2, r3
 800987a:	d102      	bne.n	8009882 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800987c:	2301      	movs	r3, #1
 800987e:	60fb      	str	r3, [r7, #12]
 8009880:	e001      	b.n	8009886 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009882:	2300      	movs	r3, #0
 8009884:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009886:	f001 fc35 	bl	800b0f4 <vPortExitCritical>

	return xReturn;
 800988a:	68fb      	ldr	r3, [r7, #12]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800989e:	2300      	movs	r3, #0
 80098a0:	60fb      	str	r3, [r7, #12]
 80098a2:	e014      	b.n	80098ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80098a4:	4a0f      	ldr	r2, [pc, #60]	; (80098e4 <vQueueAddToRegistry+0x50>)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d10b      	bne.n	80098c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80098b0:	490c      	ldr	r1, [pc, #48]	; (80098e4 <vQueueAddToRegistry+0x50>)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80098ba:	4a0a      	ldr	r2, [pc, #40]	; (80098e4 <vQueueAddToRegistry+0x50>)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	00db      	lsls	r3, r3, #3
 80098c0:	4413      	add	r3, r2
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80098c6:	e006      	b.n	80098d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	3301      	adds	r3, #1
 80098cc:	60fb      	str	r3, [r7, #12]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2b07      	cmp	r3, #7
 80098d2:	d9e7      	bls.n	80098a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80098d4:	bf00      	nop
 80098d6:	bf00      	nop
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	24004c88 	.word	0x24004c88

080098e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80098f8:	f001 fbcc 	bl	800b094 <vPortEnterCritical>
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009902:	b25b      	sxtb	r3, r3
 8009904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009908:	d103      	bne.n	8009912 <vQueueWaitForMessageRestricted+0x2a>
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009918:	b25b      	sxtb	r3, r3
 800991a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800991e:	d103      	bne.n	8009928 <vQueueWaitForMessageRestricted+0x40>
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009928:	f001 fbe4 	bl	800b0f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009930:	2b00      	cmp	r3, #0
 8009932:	d106      	bne.n	8009942 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	3324      	adds	r3, #36	; 0x24
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	68b9      	ldr	r1, [r7, #8]
 800993c:	4618      	mov	r0, r3
 800993e:	f000 fc61 	bl	800a204 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009942:	6978      	ldr	r0, [r7, #20]
 8009944:	f7ff ff26 	bl	8009794 <prvUnlockQueue>
	}
 8009948:	bf00      	nop
 800994a:	3718      	adds	r7, #24
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009950:	b580      	push	{r7, lr}
 8009952:	b08e      	sub	sp, #56	; 0x38
 8009954:	af04      	add	r7, sp, #16
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	607a      	str	r2, [r7, #4]
 800995c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800995e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10a      	bne.n	800997a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009968:	f383 8811 	msr	BASEPRI, r3
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	623b      	str	r3, [r7, #32]
}
 8009976:	bf00      	nop
 8009978:	e7fe      	b.n	8009978 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800997a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10a      	bne.n	8009996 <xTaskCreateStatic+0x46>
	__asm volatile
 8009980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009984:	f383 8811 	msr	BASEPRI, r3
 8009988:	f3bf 8f6f 	isb	sy
 800998c:	f3bf 8f4f 	dsb	sy
 8009990:	61fb      	str	r3, [r7, #28]
}
 8009992:	bf00      	nop
 8009994:	e7fe      	b.n	8009994 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009996:	23bc      	movs	r3, #188	; 0xbc
 8009998:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	2bbc      	cmp	r3, #188	; 0xbc
 800999e:	d00a      	beq.n	80099b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80099a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	61bb      	str	r3, [r7, #24]
}
 80099b2:	bf00      	nop
 80099b4:	e7fe      	b.n	80099b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80099b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80099b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d01e      	beq.n	80099fc <xTaskCreateStatic+0xac>
 80099be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d01b      	beq.n	80099fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80099c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	2202      	movs	r2, #2
 80099d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80099d6:	2300      	movs	r3, #0
 80099d8:	9303      	str	r3, [sp, #12]
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	9302      	str	r3, [sp, #8]
 80099de:	f107 0314 	add.w	r3, r7, #20
 80099e2:	9301      	str	r3, [sp, #4]
 80099e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	68b9      	ldr	r1, [r7, #8]
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f000 f850 	bl	8009a94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099f6:	f000 f8f3 	bl	8009be0 <prvAddNewTaskToReadyList>
 80099fa:	e001      	b.n	8009a00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80099fc:	2300      	movs	r3, #0
 80099fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009a00:	697b      	ldr	r3, [r7, #20]
	}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3728      	adds	r7, #40	; 0x28
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b08c      	sub	sp, #48	; 0x30
 8009a0e:	af04      	add	r7, sp, #16
 8009a10:	60f8      	str	r0, [r7, #12]
 8009a12:	60b9      	str	r1, [r7, #8]
 8009a14:	603b      	str	r3, [r7, #0]
 8009a16:	4613      	mov	r3, r2
 8009a18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009a1a:	88fb      	ldrh	r3, [r7, #6]
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f001 fc5a 	bl	800b2d8 <pvPortMalloc>
 8009a24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00e      	beq.n	8009a4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009a2c:	20bc      	movs	r0, #188	; 0xbc
 8009a2e:	f001 fc53 	bl	800b2d8 <pvPortMalloc>
 8009a32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d003      	beq.n	8009a42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	697a      	ldr	r2, [r7, #20]
 8009a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8009a40:	e005      	b.n	8009a4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009a42:	6978      	ldr	r0, [r7, #20]
 8009a44:	f001 fd14 	bl	800b470 <vPortFree>
 8009a48:	e001      	b.n	8009a4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d017      	beq.n	8009a84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a5c:	88fa      	ldrh	r2, [r7, #6]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	9303      	str	r3, [sp, #12]
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	9302      	str	r3, [sp, #8]
 8009a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a68:	9301      	str	r3, [sp, #4]
 8009a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	68b9      	ldr	r1, [r7, #8]
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	f000 f80e 	bl	8009a94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a78:	69f8      	ldr	r0, [r7, #28]
 8009a7a:	f000 f8b1 	bl	8009be0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	61bb      	str	r3, [r7, #24]
 8009a82:	e002      	b.n	8009a8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a8a:	69bb      	ldr	r3, [r7, #24]
	}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3720      	adds	r7, #32
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b088      	sub	sp, #32
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
 8009aa0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	461a      	mov	r2, r3
 8009aac:	21a5      	movs	r1, #165	; 0xa5
 8009aae:	f001 fe3b 	bl	800b728 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ab6:	6879      	ldr	r1, [r7, #4]
 8009ab8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009abc:	440b      	add	r3, r1
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	f023 0307 	bic.w	r3, r3, #7
 8009aca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	f003 0307 	and.w	r3, r3, #7
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00a      	beq.n	8009aec <prvInitialiseNewTask+0x58>
	__asm volatile
 8009ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	617b      	str	r3, [r7, #20]
}
 8009ae8:	bf00      	nop
 8009aea:	e7fe      	b.n	8009aea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d01f      	beq.n	8009b32 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009af2:	2300      	movs	r3, #0
 8009af4:	61fb      	str	r3, [r7, #28]
 8009af6:	e012      	b.n	8009b1e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	4413      	add	r3, r2
 8009afe:	7819      	ldrb	r1, [r3, #0]
 8009b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	4413      	add	r3, r2
 8009b06:	3334      	adds	r3, #52	; 0x34
 8009b08:	460a      	mov	r2, r1
 8009b0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	4413      	add	r3, r2
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d006      	beq.n	8009b26 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	61fb      	str	r3, [r7, #28]
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	2b0f      	cmp	r3, #15
 8009b22:	d9e9      	bls.n	8009af8 <prvInitialiseNewTask+0x64>
 8009b24:	e000      	b.n	8009b28 <prvInitialiseNewTask+0x94>
			{
				break;
 8009b26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b30:	e003      	b.n	8009b3a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b34:	2200      	movs	r2, #0
 8009b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3c:	2b37      	cmp	r3, #55	; 0x37
 8009b3e:	d901      	bls.n	8009b44 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b40:	2337      	movs	r3, #55	; 0x37
 8009b42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b52:	2200      	movs	r2, #0
 8009b54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b58:	3304      	adds	r3, #4
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7ff f8be 	bl	8008cdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b62:	3318      	adds	r3, #24
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7ff f8b9 	bl	8008cdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b82:	2200      	movs	r2, #0
 8009b84:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b92:	3354      	adds	r3, #84	; 0x54
 8009b94:	2260      	movs	r2, #96	; 0x60
 8009b96:	2100      	movs	r1, #0
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f001 fdc5 	bl	800b728 <memset>
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba0:	4a0c      	ldr	r2, [pc, #48]	; (8009bd4 <prvInitialiseNewTask+0x140>)
 8009ba2:	659a      	str	r2, [r3, #88]	; 0x58
 8009ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba6:	4a0c      	ldr	r2, [pc, #48]	; (8009bd8 <prvInitialiseNewTask+0x144>)
 8009ba8:	65da      	str	r2, [r3, #92]	; 0x5c
 8009baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bac:	4a0b      	ldr	r2, [pc, #44]	; (8009bdc <prvInitialiseNewTask+0x148>)
 8009bae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009bb0:	683a      	ldr	r2, [r7, #0]
 8009bb2:	68f9      	ldr	r1, [r7, #12]
 8009bb4:	69b8      	ldr	r0, [r7, #24]
 8009bb6:	f001 f941 	bl	800ae3c <pxPortInitialiseStack>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bbe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d002      	beq.n	8009bcc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bcc:	bf00      	nop
 8009bce:	3720      	adds	r7, #32
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	0800bb9c 	.word	0x0800bb9c
 8009bd8:	0800bbbc 	.word	0x0800bbbc
 8009bdc:	0800bb7c 	.word	0x0800bb7c

08009be0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009be8:	f001 fa54 	bl	800b094 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009bec:	4b2d      	ldr	r3, [pc, #180]	; (8009ca4 <prvAddNewTaskToReadyList+0xc4>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	4a2c      	ldr	r2, [pc, #176]	; (8009ca4 <prvAddNewTaskToReadyList+0xc4>)
 8009bf4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009bf6:	4b2c      	ldr	r3, [pc, #176]	; (8009ca8 <prvAddNewTaskToReadyList+0xc8>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d109      	bne.n	8009c12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009bfe:	4a2a      	ldr	r2, [pc, #168]	; (8009ca8 <prvAddNewTaskToReadyList+0xc8>)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c04:	4b27      	ldr	r3, [pc, #156]	; (8009ca4 <prvAddNewTaskToReadyList+0xc4>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d110      	bne.n	8009c2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c0c:	f000 fc26 	bl	800a45c <prvInitialiseTaskLists>
 8009c10:	e00d      	b.n	8009c2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c12:	4b26      	ldr	r3, [pc, #152]	; (8009cac <prvAddNewTaskToReadyList+0xcc>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d109      	bne.n	8009c2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c1a:	4b23      	ldr	r3, [pc, #140]	; (8009ca8 <prvAddNewTaskToReadyList+0xc8>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d802      	bhi.n	8009c2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c28:	4a1f      	ldr	r2, [pc, #124]	; (8009ca8 <prvAddNewTaskToReadyList+0xc8>)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c2e:	4b20      	ldr	r3, [pc, #128]	; (8009cb0 <prvAddNewTaskToReadyList+0xd0>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	3301      	adds	r3, #1
 8009c34:	4a1e      	ldr	r2, [pc, #120]	; (8009cb0 <prvAddNewTaskToReadyList+0xd0>)
 8009c36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c38:	4b1d      	ldr	r3, [pc, #116]	; (8009cb0 <prvAddNewTaskToReadyList+0xd0>)
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c44:	4b1b      	ldr	r3, [pc, #108]	; (8009cb4 <prvAddNewTaskToReadyList+0xd4>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d903      	bls.n	8009c54 <prvAddNewTaskToReadyList+0x74>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c50:	4a18      	ldr	r2, [pc, #96]	; (8009cb4 <prvAddNewTaskToReadyList+0xd4>)
 8009c52:	6013      	str	r3, [r2, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c58:	4613      	mov	r3, r2
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	4413      	add	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	4a15      	ldr	r2, [pc, #84]	; (8009cb8 <prvAddNewTaskToReadyList+0xd8>)
 8009c62:	441a      	add	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	3304      	adds	r3, #4
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	f7ff f843 	bl	8008cf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009c70:	f001 fa40 	bl	800b0f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009c74:	4b0d      	ldr	r3, [pc, #52]	; (8009cac <prvAddNewTaskToReadyList+0xcc>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00e      	beq.n	8009c9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ca8 <prvAddNewTaskToReadyList+0xc8>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d207      	bcs.n	8009c9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009c8a:	4b0c      	ldr	r3, [pc, #48]	; (8009cbc <prvAddNewTaskToReadyList+0xdc>)
 8009c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c9a:	bf00      	nop
 8009c9c:	3708      	adds	r7, #8
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	24000cf0 	.word	0x24000cf0
 8009ca8:	2400081c 	.word	0x2400081c
 8009cac:	24000cfc 	.word	0x24000cfc
 8009cb0:	24000d0c 	.word	0x24000d0c
 8009cb4:	24000cf8 	.word	0x24000cf8
 8009cb8:	24000820 	.word	0x24000820
 8009cbc:	e000ed04 	.word	0xe000ed04

08009cc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d017      	beq.n	8009d02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009cd2:	4b13      	ldr	r3, [pc, #76]	; (8009d20 <vTaskDelay+0x60>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00a      	beq.n	8009cf0 <vTaskDelay+0x30>
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	60bb      	str	r3, [r7, #8]
}
 8009cec:	bf00      	nop
 8009cee:	e7fe      	b.n	8009cee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009cf0:	f000 f88a 	bl	8009e08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fcfe 	bl	800a6f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009cfc:	f000 f892 	bl	8009e24 <xTaskResumeAll>
 8009d00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d107      	bne.n	8009d18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009d08:	4b06      	ldr	r3, [pc, #24]	; (8009d24 <vTaskDelay+0x64>)
 8009d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d18:	bf00      	nop
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	24000d18 	.word	0x24000d18
 8009d24:	e000ed04 	.word	0xe000ed04

08009d28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08a      	sub	sp, #40	; 0x28
 8009d2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009d32:	2300      	movs	r3, #0
 8009d34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d36:	463a      	mov	r2, r7
 8009d38:	1d39      	adds	r1, r7, #4
 8009d3a:	f107 0308 	add.w	r3, r7, #8
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fe ff78 	bl	8008c34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d44:	6839      	ldr	r1, [r7, #0]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	9202      	str	r2, [sp, #8]
 8009d4c:	9301      	str	r3, [sp, #4]
 8009d4e:	2300      	movs	r3, #0
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	2300      	movs	r3, #0
 8009d54:	460a      	mov	r2, r1
 8009d56:	4924      	ldr	r1, [pc, #144]	; (8009de8 <vTaskStartScheduler+0xc0>)
 8009d58:	4824      	ldr	r0, [pc, #144]	; (8009dec <vTaskStartScheduler+0xc4>)
 8009d5a:	f7ff fdf9 	bl	8009950 <xTaskCreateStatic>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	4a23      	ldr	r2, [pc, #140]	; (8009df0 <vTaskStartScheduler+0xc8>)
 8009d62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009d64:	4b22      	ldr	r3, [pc, #136]	; (8009df0 <vTaskStartScheduler+0xc8>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d002      	beq.n	8009d72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	617b      	str	r3, [r7, #20]
 8009d70:	e001      	b.n	8009d76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009d72:	2300      	movs	r3, #0
 8009d74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d102      	bne.n	8009d82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009d7c:	f000 fd10 	bl	800a7a0 <xTimerCreateTimerTask>
 8009d80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d11b      	bne.n	8009dc0 <vTaskStartScheduler+0x98>
	__asm volatile
 8009d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8c:	f383 8811 	msr	BASEPRI, r3
 8009d90:	f3bf 8f6f 	isb	sy
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	613b      	str	r3, [r7, #16]
}
 8009d9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d9c:	4b15      	ldr	r3, [pc, #84]	; (8009df4 <vTaskStartScheduler+0xcc>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	3354      	adds	r3, #84	; 0x54
 8009da2:	4a15      	ldr	r2, [pc, #84]	; (8009df8 <vTaskStartScheduler+0xd0>)
 8009da4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009da6:	4b15      	ldr	r3, [pc, #84]	; (8009dfc <vTaskStartScheduler+0xd4>)
 8009da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009dac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009dae:	4b14      	ldr	r3, [pc, #80]	; (8009e00 <vTaskStartScheduler+0xd8>)
 8009db0:	2201      	movs	r2, #1
 8009db2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009db4:	4b13      	ldr	r3, [pc, #76]	; (8009e04 <vTaskStartScheduler+0xdc>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009dba:	f001 f8c9 	bl	800af50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009dbe:	e00e      	b.n	8009dde <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dc6:	d10a      	bne.n	8009dde <vTaskStartScheduler+0xb6>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	60fb      	str	r3, [r7, #12]
}
 8009dda:	bf00      	nop
 8009ddc:	e7fe      	b.n	8009ddc <vTaskStartScheduler+0xb4>
}
 8009dde:	bf00      	nop
 8009de0:	3718      	adds	r7, #24
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	0800ba54 	.word	0x0800ba54
 8009dec:	0800a42d 	.word	0x0800a42d
 8009df0:	24000d14 	.word	0x24000d14
 8009df4:	2400081c 	.word	0x2400081c
 8009df8:	24000014 	.word	0x24000014
 8009dfc:	24000d10 	.word	0x24000d10
 8009e00:	24000cfc 	.word	0x24000cfc
 8009e04:	24000cf4 	.word	0x24000cf4

08009e08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009e08:	b480      	push	{r7}
 8009e0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009e0c:	4b04      	ldr	r3, [pc, #16]	; (8009e20 <vTaskSuspendAll+0x18>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	3301      	adds	r3, #1
 8009e12:	4a03      	ldr	r2, [pc, #12]	; (8009e20 <vTaskSuspendAll+0x18>)
 8009e14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009e16:	bf00      	nop
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr
 8009e20:	24000d18 	.word	0x24000d18

08009e24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009e32:	4b42      	ldr	r3, [pc, #264]	; (8009f3c <xTaskResumeAll+0x118>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10a      	bne.n	8009e50 <xTaskResumeAll+0x2c>
	__asm volatile
 8009e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	603b      	str	r3, [r7, #0]
}
 8009e4c:	bf00      	nop
 8009e4e:	e7fe      	b.n	8009e4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e50:	f001 f920 	bl	800b094 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e54:	4b39      	ldr	r3, [pc, #228]	; (8009f3c <xTaskResumeAll+0x118>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	4a38      	ldr	r2, [pc, #224]	; (8009f3c <xTaskResumeAll+0x118>)
 8009e5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e5e:	4b37      	ldr	r3, [pc, #220]	; (8009f3c <xTaskResumeAll+0x118>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d162      	bne.n	8009f2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e66:	4b36      	ldr	r3, [pc, #216]	; (8009f40 <xTaskResumeAll+0x11c>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d05e      	beq.n	8009f2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e6e:	e02f      	b.n	8009ed0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e70:	4b34      	ldr	r3, [pc, #208]	; (8009f44 <xTaskResumeAll+0x120>)
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	3318      	adds	r3, #24
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7fe ff97 	bl	8008db0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	3304      	adds	r3, #4
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fe ff92 	bl	8008db0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e90:	4b2d      	ldr	r3, [pc, #180]	; (8009f48 <xTaskResumeAll+0x124>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d903      	bls.n	8009ea0 <xTaskResumeAll+0x7c>
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9c:	4a2a      	ldr	r2, [pc, #168]	; (8009f48 <xTaskResumeAll+0x124>)
 8009e9e:	6013      	str	r3, [r2, #0]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4a27      	ldr	r2, [pc, #156]	; (8009f4c <xTaskResumeAll+0x128>)
 8009eae:	441a      	add	r2, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	4610      	mov	r0, r2
 8009eb8:	f7fe ff1d 	bl	8008cf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec0:	4b23      	ldr	r3, [pc, #140]	; (8009f50 <xTaskResumeAll+0x12c>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d302      	bcc.n	8009ed0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009eca:	4b22      	ldr	r3, [pc, #136]	; (8009f54 <xTaskResumeAll+0x130>)
 8009ecc:	2201      	movs	r2, #1
 8009ece:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ed0:	4b1c      	ldr	r3, [pc, #112]	; (8009f44 <xTaskResumeAll+0x120>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1cb      	bne.n	8009e70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ede:	f000 fb5f 	bl	800a5a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009ee2:	4b1d      	ldr	r3, [pc, #116]	; (8009f58 <xTaskResumeAll+0x134>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d010      	beq.n	8009f10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009eee:	f000 f847 	bl	8009f80 <xTaskIncrementTick>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d002      	beq.n	8009efe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009ef8:	4b16      	ldr	r3, [pc, #88]	; (8009f54 <xTaskResumeAll+0x130>)
 8009efa:	2201      	movs	r2, #1
 8009efc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	3b01      	subs	r3, #1
 8009f02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d1f1      	bne.n	8009eee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009f0a:	4b13      	ldr	r3, [pc, #76]	; (8009f58 <xTaskResumeAll+0x134>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009f10:	4b10      	ldr	r3, [pc, #64]	; (8009f54 <xTaskResumeAll+0x130>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d009      	beq.n	8009f2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f1c:	4b0f      	ldr	r3, [pc, #60]	; (8009f5c <xTaskResumeAll+0x138>)
 8009f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f22:	601a      	str	r2, [r3, #0]
 8009f24:	f3bf 8f4f 	dsb	sy
 8009f28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f2c:	f001 f8e2 	bl	800b0f4 <vPortExitCritical>

	return xAlreadyYielded;
 8009f30:	68bb      	ldr	r3, [r7, #8]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	24000d18 	.word	0x24000d18
 8009f40:	24000cf0 	.word	0x24000cf0
 8009f44:	24000cb0 	.word	0x24000cb0
 8009f48:	24000cf8 	.word	0x24000cf8
 8009f4c:	24000820 	.word	0x24000820
 8009f50:	2400081c 	.word	0x2400081c
 8009f54:	24000d04 	.word	0x24000d04
 8009f58:	24000d00 	.word	0x24000d00
 8009f5c:	e000ed04 	.word	0xe000ed04

08009f60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009f66:	4b05      	ldr	r3, [pc, #20]	; (8009f7c <xTaskGetTickCount+0x1c>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009f6c:	687b      	ldr	r3, [r7, #4]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	370c      	adds	r7, #12
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	24000cf4 	.word	0x24000cf4

08009f80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f86:	2300      	movs	r3, #0
 8009f88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f8a:	4b4f      	ldr	r3, [pc, #316]	; (800a0c8 <xTaskIncrementTick+0x148>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f040 808f 	bne.w	800a0b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f94:	4b4d      	ldr	r3, [pc, #308]	; (800a0cc <xTaskIncrementTick+0x14c>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009f9c:	4a4b      	ldr	r2, [pc, #300]	; (800a0cc <xTaskIncrementTick+0x14c>)
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d120      	bne.n	8009fea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009fa8:	4b49      	ldr	r3, [pc, #292]	; (800a0d0 <xTaskIncrementTick+0x150>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00a      	beq.n	8009fc8 <xTaskIncrementTick+0x48>
	__asm volatile
 8009fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb6:	f383 8811 	msr	BASEPRI, r3
 8009fba:	f3bf 8f6f 	isb	sy
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	603b      	str	r3, [r7, #0]
}
 8009fc4:	bf00      	nop
 8009fc6:	e7fe      	b.n	8009fc6 <xTaskIncrementTick+0x46>
 8009fc8:	4b41      	ldr	r3, [pc, #260]	; (800a0d0 <xTaskIncrementTick+0x150>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	60fb      	str	r3, [r7, #12]
 8009fce:	4b41      	ldr	r3, [pc, #260]	; (800a0d4 <xTaskIncrementTick+0x154>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a3f      	ldr	r2, [pc, #252]	; (800a0d0 <xTaskIncrementTick+0x150>)
 8009fd4:	6013      	str	r3, [r2, #0]
 8009fd6:	4a3f      	ldr	r2, [pc, #252]	; (800a0d4 <xTaskIncrementTick+0x154>)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6013      	str	r3, [r2, #0]
 8009fdc:	4b3e      	ldr	r3, [pc, #248]	; (800a0d8 <xTaskIncrementTick+0x158>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	4a3d      	ldr	r2, [pc, #244]	; (800a0d8 <xTaskIncrementTick+0x158>)
 8009fe4:	6013      	str	r3, [r2, #0]
 8009fe6:	f000 fadb 	bl	800a5a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009fea:	4b3c      	ldr	r3, [pc, #240]	; (800a0dc <xTaskIncrementTick+0x15c>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d349      	bcc.n	800a088 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ff4:	4b36      	ldr	r3, [pc, #216]	; (800a0d0 <xTaskIncrementTick+0x150>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d104      	bne.n	800a008 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ffe:	4b37      	ldr	r3, [pc, #220]	; (800a0dc <xTaskIncrementTick+0x15c>)
 800a000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a004:	601a      	str	r2, [r3, #0]
					break;
 800a006:	e03f      	b.n	800a088 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a008:	4b31      	ldr	r3, [pc, #196]	; (800a0d0 <xTaskIncrementTick+0x150>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d203      	bcs.n	800a028 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a020:	4a2e      	ldr	r2, [pc, #184]	; (800a0dc <xTaskIncrementTick+0x15c>)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a026:	e02f      	b.n	800a088 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	3304      	adds	r3, #4
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fe febf 	bl	8008db0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a036:	2b00      	cmp	r3, #0
 800a038:	d004      	beq.n	800a044 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	3318      	adds	r3, #24
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe feb6 	bl	8008db0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a048:	4b25      	ldr	r3, [pc, #148]	; (800a0e0 <xTaskIncrementTick+0x160>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d903      	bls.n	800a058 <xTaskIncrementTick+0xd8>
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a054:	4a22      	ldr	r2, [pc, #136]	; (800a0e0 <xTaskIncrementTick+0x160>)
 800a056:	6013      	str	r3, [r2, #0]
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a05c:	4613      	mov	r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4413      	add	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4a1f      	ldr	r2, [pc, #124]	; (800a0e4 <xTaskIncrementTick+0x164>)
 800a066:	441a      	add	r2, r3
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	3304      	adds	r3, #4
 800a06c:	4619      	mov	r1, r3
 800a06e:	4610      	mov	r0, r2
 800a070:	f7fe fe41 	bl	8008cf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a078:	4b1b      	ldr	r3, [pc, #108]	; (800a0e8 <xTaskIncrementTick+0x168>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07e:	429a      	cmp	r2, r3
 800a080:	d3b8      	bcc.n	8009ff4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a082:	2301      	movs	r3, #1
 800a084:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a086:	e7b5      	b.n	8009ff4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a088:	4b17      	ldr	r3, [pc, #92]	; (800a0e8 <xTaskIncrementTick+0x168>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a08e:	4915      	ldr	r1, [pc, #84]	; (800a0e4 <xTaskIncrementTick+0x164>)
 800a090:	4613      	mov	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	440b      	add	r3, r1
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d901      	bls.n	800a0a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a0a4:	4b11      	ldr	r3, [pc, #68]	; (800a0ec <xTaskIncrementTick+0x16c>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d007      	beq.n	800a0bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	617b      	str	r3, [r7, #20]
 800a0b0:	e004      	b.n	800a0bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a0b2:	4b0f      	ldr	r3, [pc, #60]	; (800a0f0 <xTaskIncrementTick+0x170>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	4a0d      	ldr	r2, [pc, #52]	; (800a0f0 <xTaskIncrementTick+0x170>)
 800a0ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a0bc:	697b      	ldr	r3, [r7, #20]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3718      	adds	r7, #24
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	24000d18 	.word	0x24000d18
 800a0cc:	24000cf4 	.word	0x24000cf4
 800a0d0:	24000ca8 	.word	0x24000ca8
 800a0d4:	24000cac 	.word	0x24000cac
 800a0d8:	24000d08 	.word	0x24000d08
 800a0dc:	24000d10 	.word	0x24000d10
 800a0e0:	24000cf8 	.word	0x24000cf8
 800a0e4:	24000820 	.word	0x24000820
 800a0e8:	2400081c 	.word	0x2400081c
 800a0ec:	24000d04 	.word	0x24000d04
 800a0f0:	24000d00 	.word	0x24000d00

0800a0f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0fa:	4b2a      	ldr	r3, [pc, #168]	; (800a1a4 <vTaskSwitchContext+0xb0>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d003      	beq.n	800a10a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a102:	4b29      	ldr	r3, [pc, #164]	; (800a1a8 <vTaskSwitchContext+0xb4>)
 800a104:	2201      	movs	r2, #1
 800a106:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a108:	e046      	b.n	800a198 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a10a:	4b27      	ldr	r3, [pc, #156]	; (800a1a8 <vTaskSwitchContext+0xb4>)
 800a10c:	2200      	movs	r2, #0
 800a10e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a110:	4b26      	ldr	r3, [pc, #152]	; (800a1ac <vTaskSwitchContext+0xb8>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	60fb      	str	r3, [r7, #12]
 800a116:	e010      	b.n	800a13a <vTaskSwitchContext+0x46>
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d10a      	bne.n	800a134 <vTaskSwitchContext+0x40>
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	607b      	str	r3, [r7, #4]
}
 800a130:	bf00      	nop
 800a132:	e7fe      	b.n	800a132 <vTaskSwitchContext+0x3e>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	3b01      	subs	r3, #1
 800a138:	60fb      	str	r3, [r7, #12]
 800a13a:	491d      	ldr	r1, [pc, #116]	; (800a1b0 <vTaskSwitchContext+0xbc>)
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	4613      	mov	r3, r2
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	4413      	add	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	440b      	add	r3, r1
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d0e4      	beq.n	800a118 <vTaskSwitchContext+0x24>
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	4613      	mov	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4413      	add	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4a15      	ldr	r2, [pc, #84]	; (800a1b0 <vTaskSwitchContext+0xbc>)
 800a15a:	4413      	add	r3, r2
 800a15c:	60bb      	str	r3, [r7, #8]
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	685a      	ldr	r2, [r3, #4]
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	605a      	str	r2, [r3, #4]
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	685a      	ldr	r2, [r3, #4]
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	3308      	adds	r3, #8
 800a170:	429a      	cmp	r2, r3
 800a172:	d104      	bne.n	800a17e <vTaskSwitchContext+0x8a>
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	685a      	ldr	r2, [r3, #4]
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	605a      	str	r2, [r3, #4]
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	4a0b      	ldr	r2, [pc, #44]	; (800a1b4 <vTaskSwitchContext+0xc0>)
 800a186:	6013      	str	r3, [r2, #0]
 800a188:	4a08      	ldr	r2, [pc, #32]	; (800a1ac <vTaskSwitchContext+0xb8>)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a18e:	4b09      	ldr	r3, [pc, #36]	; (800a1b4 <vTaskSwitchContext+0xc0>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	3354      	adds	r3, #84	; 0x54
 800a194:	4a08      	ldr	r2, [pc, #32]	; (800a1b8 <vTaskSwitchContext+0xc4>)
 800a196:	6013      	str	r3, [r2, #0]
}
 800a198:	bf00      	nop
 800a19a:	3714      	adds	r7, #20
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	24000d18 	.word	0x24000d18
 800a1a8:	24000d04 	.word	0x24000d04
 800a1ac:	24000cf8 	.word	0x24000cf8
 800a1b0:	24000820 	.word	0x24000820
 800a1b4:	2400081c 	.word	0x2400081c
 800a1b8:	24000014 	.word	0x24000014

0800a1bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d10a      	bne.n	800a1e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	60fb      	str	r3, [r7, #12]
}
 800a1de:	bf00      	nop
 800a1e0:	e7fe      	b.n	800a1e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1e2:	4b07      	ldr	r3, [pc, #28]	; (800a200 <vTaskPlaceOnEventList+0x44>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	3318      	adds	r3, #24
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f7fe fda7 	bl	8008d3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	6838      	ldr	r0, [r7, #0]
 800a1f4:	f000 fa80 	bl	800a6f8 <prvAddCurrentTaskToDelayedList>
}
 800a1f8:	bf00      	nop
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	2400081c 	.word	0x2400081c

0800a204 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d10a      	bne.n	800a22c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21a:	f383 8811 	msr	BASEPRI, r3
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	617b      	str	r3, [r7, #20]
}
 800a228:	bf00      	nop
 800a22a:	e7fe      	b.n	800a22a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a22c:	4b0a      	ldr	r3, [pc, #40]	; (800a258 <vTaskPlaceOnEventListRestricted+0x54>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	3318      	adds	r3, #24
 800a232:	4619      	mov	r1, r3
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f7fe fd5e 	bl	8008cf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d002      	beq.n	800a246 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a244:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a246:	6879      	ldr	r1, [r7, #4]
 800a248:	68b8      	ldr	r0, [r7, #8]
 800a24a:	f000 fa55 	bl	800a6f8 <prvAddCurrentTaskToDelayedList>
	}
 800a24e:	bf00      	nop
 800a250:	3718      	adds	r7, #24
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	2400081c 	.word	0x2400081c

0800a25c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b086      	sub	sp, #24
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10a      	bne.n	800a288 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	60fb      	str	r3, [r7, #12]
}
 800a284:	bf00      	nop
 800a286:	e7fe      	b.n	800a286 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	3318      	adds	r3, #24
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7fe fd8f 	bl	8008db0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a292:	4b1e      	ldr	r3, [pc, #120]	; (800a30c <xTaskRemoveFromEventList+0xb0>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d11d      	bne.n	800a2d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	3304      	adds	r3, #4
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7fe fd86 	bl	8008db0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a8:	4b19      	ldr	r3, [pc, #100]	; (800a310 <xTaskRemoveFromEventList+0xb4>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d903      	bls.n	800a2b8 <xTaskRemoveFromEventList+0x5c>
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b4:	4a16      	ldr	r2, [pc, #88]	; (800a310 <xTaskRemoveFromEventList+0xb4>)
 800a2b6:	6013      	str	r3, [r2, #0]
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2bc:	4613      	mov	r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4413      	add	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4a13      	ldr	r2, [pc, #76]	; (800a314 <xTaskRemoveFromEventList+0xb8>)
 800a2c6:	441a      	add	r2, r3
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	4610      	mov	r0, r2
 800a2d0:	f7fe fd11 	bl	8008cf6 <vListInsertEnd>
 800a2d4:	e005      	b.n	800a2e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	3318      	adds	r3, #24
 800a2da:	4619      	mov	r1, r3
 800a2dc:	480e      	ldr	r0, [pc, #56]	; (800a318 <xTaskRemoveFromEventList+0xbc>)
 800a2de:	f7fe fd0a 	bl	8008cf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2e6:	4b0d      	ldr	r3, [pc, #52]	; (800a31c <xTaskRemoveFromEventList+0xc0>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d905      	bls.n	800a2fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a2f4:	4b0a      	ldr	r3, [pc, #40]	; (800a320 <xTaskRemoveFromEventList+0xc4>)
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	601a      	str	r2, [r3, #0]
 800a2fa:	e001      	b.n	800a300 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a300:	697b      	ldr	r3, [r7, #20]
}
 800a302:	4618      	mov	r0, r3
 800a304:	3718      	adds	r7, #24
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	24000d18 	.word	0x24000d18
 800a310:	24000cf8 	.word	0x24000cf8
 800a314:	24000820 	.word	0x24000820
 800a318:	24000cb0 	.word	0x24000cb0
 800a31c:	2400081c 	.word	0x2400081c
 800a320:	24000d04 	.word	0x24000d04

0800a324 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a32c:	4b06      	ldr	r3, [pc, #24]	; (800a348 <vTaskInternalSetTimeOutState+0x24>)
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a334:	4b05      	ldr	r3, [pc, #20]	; (800a34c <vTaskInternalSetTimeOutState+0x28>)
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	605a      	str	r2, [r3, #4]
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr
 800a348:	24000d08 	.word	0x24000d08
 800a34c:	24000cf4 	.word	0x24000cf4

0800a350 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b088      	sub	sp, #32
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10a      	bne.n	800a376 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	613b      	str	r3, [r7, #16]
}
 800a372:	bf00      	nop
 800a374:	e7fe      	b.n	800a374 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d10a      	bne.n	800a392 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a380:	f383 8811 	msr	BASEPRI, r3
 800a384:	f3bf 8f6f 	isb	sy
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	60fb      	str	r3, [r7, #12]
}
 800a38e:	bf00      	nop
 800a390:	e7fe      	b.n	800a390 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a392:	f000 fe7f 	bl	800b094 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a396:	4b1d      	ldr	r3, [pc, #116]	; (800a40c <xTaskCheckForTimeOut+0xbc>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	69ba      	ldr	r2, [r7, #24]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3ae:	d102      	bne.n	800a3b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	61fb      	str	r3, [r7, #28]
 800a3b4:	e023      	b.n	800a3fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	4b15      	ldr	r3, [pc, #84]	; (800a410 <xTaskCheckForTimeOut+0xc0>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d007      	beq.n	800a3d2 <xTaskCheckForTimeOut+0x82>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	69ba      	ldr	r2, [r7, #24]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d302      	bcc.n	800a3d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	61fb      	str	r3, [r7, #28]
 800a3d0:	e015      	b.n	800a3fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d20b      	bcs.n	800a3f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	1ad2      	subs	r2, r2, r3
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7ff ff9b 	bl	800a324 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	61fb      	str	r3, [r7, #28]
 800a3f2:	e004      	b.n	800a3fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a3fe:	f000 fe79 	bl	800b0f4 <vPortExitCritical>

	return xReturn;
 800a402:	69fb      	ldr	r3, [r7, #28]
}
 800a404:	4618      	mov	r0, r3
 800a406:	3720      	adds	r7, #32
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	24000cf4 	.word	0x24000cf4
 800a410:	24000d08 	.word	0x24000d08

0800a414 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a414:	b480      	push	{r7}
 800a416:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a418:	4b03      	ldr	r3, [pc, #12]	; (800a428 <vTaskMissedYield+0x14>)
 800a41a:	2201      	movs	r2, #1
 800a41c:	601a      	str	r2, [r3, #0]
}
 800a41e:	bf00      	nop
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr
 800a428:	24000d04 	.word	0x24000d04

0800a42c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a434:	f000 f852 	bl	800a4dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a438:	4b06      	ldr	r3, [pc, #24]	; (800a454 <prvIdleTask+0x28>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d9f9      	bls.n	800a434 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a440:	4b05      	ldr	r3, [pc, #20]	; (800a458 <prvIdleTask+0x2c>)
 800a442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a446:	601a      	str	r2, [r3, #0]
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a450:	e7f0      	b.n	800a434 <prvIdleTask+0x8>
 800a452:	bf00      	nop
 800a454:	24000820 	.word	0x24000820
 800a458:	e000ed04 	.word	0xe000ed04

0800a45c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a462:	2300      	movs	r3, #0
 800a464:	607b      	str	r3, [r7, #4]
 800a466:	e00c      	b.n	800a482 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	4613      	mov	r3, r2
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	4413      	add	r3, r2
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	4a12      	ldr	r2, [pc, #72]	; (800a4bc <prvInitialiseTaskLists+0x60>)
 800a474:	4413      	add	r3, r2
 800a476:	4618      	mov	r0, r3
 800a478:	f7fe fc10 	bl	8008c9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	3301      	adds	r3, #1
 800a480:	607b      	str	r3, [r7, #4]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b37      	cmp	r3, #55	; 0x37
 800a486:	d9ef      	bls.n	800a468 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a488:	480d      	ldr	r0, [pc, #52]	; (800a4c0 <prvInitialiseTaskLists+0x64>)
 800a48a:	f7fe fc07 	bl	8008c9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a48e:	480d      	ldr	r0, [pc, #52]	; (800a4c4 <prvInitialiseTaskLists+0x68>)
 800a490:	f7fe fc04 	bl	8008c9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a494:	480c      	ldr	r0, [pc, #48]	; (800a4c8 <prvInitialiseTaskLists+0x6c>)
 800a496:	f7fe fc01 	bl	8008c9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a49a:	480c      	ldr	r0, [pc, #48]	; (800a4cc <prvInitialiseTaskLists+0x70>)
 800a49c:	f7fe fbfe 	bl	8008c9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a4a0:	480b      	ldr	r0, [pc, #44]	; (800a4d0 <prvInitialiseTaskLists+0x74>)
 800a4a2:	f7fe fbfb 	bl	8008c9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a4a6:	4b0b      	ldr	r3, [pc, #44]	; (800a4d4 <prvInitialiseTaskLists+0x78>)
 800a4a8:	4a05      	ldr	r2, [pc, #20]	; (800a4c0 <prvInitialiseTaskLists+0x64>)
 800a4aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a4ac:	4b0a      	ldr	r3, [pc, #40]	; (800a4d8 <prvInitialiseTaskLists+0x7c>)
 800a4ae:	4a05      	ldr	r2, [pc, #20]	; (800a4c4 <prvInitialiseTaskLists+0x68>)
 800a4b0:	601a      	str	r2, [r3, #0]
}
 800a4b2:	bf00      	nop
 800a4b4:	3708      	adds	r7, #8
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	24000820 	.word	0x24000820
 800a4c0:	24000c80 	.word	0x24000c80
 800a4c4:	24000c94 	.word	0x24000c94
 800a4c8:	24000cb0 	.word	0x24000cb0
 800a4cc:	24000cc4 	.word	0x24000cc4
 800a4d0:	24000cdc 	.word	0x24000cdc
 800a4d4:	24000ca8 	.word	0x24000ca8
 800a4d8:	24000cac 	.word	0x24000cac

0800a4dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a4e2:	e019      	b.n	800a518 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a4e4:	f000 fdd6 	bl	800b094 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4e8:	4b10      	ldr	r3, [pc, #64]	; (800a52c <prvCheckTasksWaitingTermination+0x50>)
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	3304      	adds	r3, #4
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fe fc5b 	bl	8008db0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a4fa:	4b0d      	ldr	r3, [pc, #52]	; (800a530 <prvCheckTasksWaitingTermination+0x54>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	3b01      	subs	r3, #1
 800a500:	4a0b      	ldr	r2, [pc, #44]	; (800a530 <prvCheckTasksWaitingTermination+0x54>)
 800a502:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a504:	4b0b      	ldr	r3, [pc, #44]	; (800a534 <prvCheckTasksWaitingTermination+0x58>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3b01      	subs	r3, #1
 800a50a:	4a0a      	ldr	r2, [pc, #40]	; (800a534 <prvCheckTasksWaitingTermination+0x58>)
 800a50c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a50e:	f000 fdf1 	bl	800b0f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 f810 	bl	800a538 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a518:	4b06      	ldr	r3, [pc, #24]	; (800a534 <prvCheckTasksWaitingTermination+0x58>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d1e1      	bne.n	800a4e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a520:	bf00      	nop
 800a522:	bf00      	nop
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	24000cc4 	.word	0x24000cc4
 800a530:	24000cf0 	.word	0x24000cf0
 800a534:	24000cd8 	.word	0x24000cd8

0800a538 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	3354      	adds	r3, #84	; 0x54
 800a544:	4618      	mov	r0, r3
 800a546:	f001 f905 	bl	800b754 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a550:	2b00      	cmp	r3, #0
 800a552:	d108      	bne.n	800a566 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 ff89 	bl	800b470 <vPortFree>
				vPortFree( pxTCB );
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 ff86 	bl	800b470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a564:	e018      	b.n	800a598 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d103      	bne.n	800a578 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 ff7d 	bl	800b470 <vPortFree>
	}
 800a576:	e00f      	b.n	800a598 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a57e:	2b02      	cmp	r3, #2
 800a580:	d00a      	beq.n	800a598 <prvDeleteTCB+0x60>
	__asm volatile
 800a582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	60fb      	str	r3, [r7, #12]
}
 800a594:	bf00      	nop
 800a596:	e7fe      	b.n	800a596 <prvDeleteTCB+0x5e>
	}
 800a598:	bf00      	nop
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5a6:	4b0c      	ldr	r3, [pc, #48]	; (800a5d8 <prvResetNextTaskUnblockTime+0x38>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d104      	bne.n	800a5ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a5b0:	4b0a      	ldr	r3, [pc, #40]	; (800a5dc <prvResetNextTaskUnblockTime+0x3c>)
 800a5b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a5b8:	e008      	b.n	800a5cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5ba:	4b07      	ldr	r3, [pc, #28]	; (800a5d8 <prvResetNextTaskUnblockTime+0x38>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	4a04      	ldr	r2, [pc, #16]	; (800a5dc <prvResetNextTaskUnblockTime+0x3c>)
 800a5ca:	6013      	str	r3, [r2, #0]
}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr
 800a5d8:	24000ca8 	.word	0x24000ca8
 800a5dc:	24000d10 	.word	0x24000d10

0800a5e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a5e6:	4b0b      	ldr	r3, [pc, #44]	; (800a614 <xTaskGetSchedulerState+0x34>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d102      	bne.n	800a5f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	607b      	str	r3, [r7, #4]
 800a5f2:	e008      	b.n	800a606 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5f4:	4b08      	ldr	r3, [pc, #32]	; (800a618 <xTaskGetSchedulerState+0x38>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d102      	bne.n	800a602 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a5fc:	2302      	movs	r3, #2
 800a5fe:	607b      	str	r3, [r7, #4]
 800a600:	e001      	b.n	800a606 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a602:	2300      	movs	r3, #0
 800a604:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a606:	687b      	ldr	r3, [r7, #4]
	}
 800a608:	4618      	mov	r0, r3
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr
 800a614:	24000cfc 	.word	0x24000cfc
 800a618:	24000d18 	.word	0x24000d18

0800a61c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b086      	sub	sp, #24
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a628:	2300      	movs	r3, #0
 800a62a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d056      	beq.n	800a6e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a632:	4b2e      	ldr	r3, [pc, #184]	; (800a6ec <xTaskPriorityDisinherit+0xd0>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d00a      	beq.n	800a652 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a640:	f383 8811 	msr	BASEPRI, r3
 800a644:	f3bf 8f6f 	isb	sy
 800a648:	f3bf 8f4f 	dsb	sy
 800a64c:	60fb      	str	r3, [r7, #12]
}
 800a64e:	bf00      	nop
 800a650:	e7fe      	b.n	800a650 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10a      	bne.n	800a670 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	60bb      	str	r3, [r7, #8]
}
 800a66c:	bf00      	nop
 800a66e:	e7fe      	b.n	800a66e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a674:	1e5a      	subs	r2, r3, #1
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a682:	429a      	cmp	r2, r3
 800a684:	d02c      	beq.n	800a6e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d128      	bne.n	800a6e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	3304      	adds	r3, #4
 800a692:	4618      	mov	r0, r3
 800a694:	f7fe fb8c 	bl	8008db0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6b0:	4b0f      	ldr	r3, [pc, #60]	; (800a6f0 <xTaskPriorityDisinherit+0xd4>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d903      	bls.n	800a6c0 <xTaskPriorityDisinherit+0xa4>
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6bc:	4a0c      	ldr	r2, [pc, #48]	; (800a6f0 <xTaskPriorityDisinherit+0xd4>)
 800a6be:	6013      	str	r3, [r2, #0]
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	4413      	add	r3, r2
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	4a09      	ldr	r2, [pc, #36]	; (800a6f4 <xTaskPriorityDisinherit+0xd8>)
 800a6ce:	441a      	add	r2, r3
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	3304      	adds	r3, #4
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	f7fe fb0d 	bl	8008cf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a6e0:	697b      	ldr	r3, [r7, #20]
	}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3718      	adds	r7, #24
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	2400081c 	.word	0x2400081c
 800a6f0:	24000cf8 	.word	0x24000cf8
 800a6f4:	24000820 	.word	0x24000820

0800a6f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a702:	4b21      	ldr	r3, [pc, #132]	; (800a788 <prvAddCurrentTaskToDelayedList+0x90>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a708:	4b20      	ldr	r3, [pc, #128]	; (800a78c <prvAddCurrentTaskToDelayedList+0x94>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	3304      	adds	r3, #4
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fe fb4e 	bl	8008db0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a71a:	d10a      	bne.n	800a732 <prvAddCurrentTaskToDelayedList+0x3a>
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d007      	beq.n	800a732 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a722:	4b1a      	ldr	r3, [pc, #104]	; (800a78c <prvAddCurrentTaskToDelayedList+0x94>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	3304      	adds	r3, #4
 800a728:	4619      	mov	r1, r3
 800a72a:	4819      	ldr	r0, [pc, #100]	; (800a790 <prvAddCurrentTaskToDelayedList+0x98>)
 800a72c:	f7fe fae3 	bl	8008cf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a730:	e026      	b.n	800a780 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4413      	add	r3, r2
 800a738:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a73a:	4b14      	ldr	r3, [pc, #80]	; (800a78c <prvAddCurrentTaskToDelayedList+0x94>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	429a      	cmp	r2, r3
 800a748:	d209      	bcs.n	800a75e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a74a:	4b12      	ldr	r3, [pc, #72]	; (800a794 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	4b0f      	ldr	r3, [pc, #60]	; (800a78c <prvAddCurrentTaskToDelayedList+0x94>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	3304      	adds	r3, #4
 800a754:	4619      	mov	r1, r3
 800a756:	4610      	mov	r0, r2
 800a758:	f7fe faf1 	bl	8008d3e <vListInsert>
}
 800a75c:	e010      	b.n	800a780 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a75e:	4b0e      	ldr	r3, [pc, #56]	; (800a798 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	4b0a      	ldr	r3, [pc, #40]	; (800a78c <prvAddCurrentTaskToDelayedList+0x94>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3304      	adds	r3, #4
 800a768:	4619      	mov	r1, r3
 800a76a:	4610      	mov	r0, r2
 800a76c:	f7fe fae7 	bl	8008d3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a770:	4b0a      	ldr	r3, [pc, #40]	; (800a79c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68ba      	ldr	r2, [r7, #8]
 800a776:	429a      	cmp	r2, r3
 800a778:	d202      	bcs.n	800a780 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a77a:	4a08      	ldr	r2, [pc, #32]	; (800a79c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	6013      	str	r3, [r2, #0]
}
 800a780:	bf00      	nop
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	24000cf4 	.word	0x24000cf4
 800a78c:	2400081c 	.word	0x2400081c
 800a790:	24000cdc 	.word	0x24000cdc
 800a794:	24000cac 	.word	0x24000cac
 800a798:	24000ca8 	.word	0x24000ca8
 800a79c:	24000d10 	.word	0x24000d10

0800a7a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b08a      	sub	sp, #40	; 0x28
 800a7a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a7aa:	f000 fb07 	bl	800adbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a7ae:	4b1c      	ldr	r3, [pc, #112]	; (800a820 <xTimerCreateTimerTask+0x80>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d021      	beq.n	800a7fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a7be:	1d3a      	adds	r2, r7, #4
 800a7c0:	f107 0108 	add.w	r1, r7, #8
 800a7c4:	f107 030c 	add.w	r3, r7, #12
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7fe fa4d 	bl	8008c68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a7ce:	6879      	ldr	r1, [r7, #4]
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	9202      	str	r2, [sp, #8]
 800a7d6:	9301      	str	r3, [sp, #4]
 800a7d8:	2302      	movs	r3, #2
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	2300      	movs	r3, #0
 800a7de:	460a      	mov	r2, r1
 800a7e0:	4910      	ldr	r1, [pc, #64]	; (800a824 <xTimerCreateTimerTask+0x84>)
 800a7e2:	4811      	ldr	r0, [pc, #68]	; (800a828 <xTimerCreateTimerTask+0x88>)
 800a7e4:	f7ff f8b4 	bl	8009950 <xTaskCreateStatic>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	4a10      	ldr	r2, [pc, #64]	; (800a82c <xTimerCreateTimerTask+0x8c>)
 800a7ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a7ee:	4b0f      	ldr	r3, [pc, #60]	; (800a82c <xTimerCreateTimerTask+0x8c>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d001      	beq.n	800a7fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d10a      	bne.n	800a816 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a804:	f383 8811 	msr	BASEPRI, r3
 800a808:	f3bf 8f6f 	isb	sy
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	613b      	str	r3, [r7, #16]
}
 800a812:	bf00      	nop
 800a814:	e7fe      	b.n	800a814 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a816:	697b      	ldr	r3, [r7, #20]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3718      	adds	r7, #24
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	24000d4c 	.word	0x24000d4c
 800a824:	0800ba5c 	.word	0x0800ba5c
 800a828:	0800a965 	.word	0x0800a965
 800a82c:	24000d50 	.word	0x24000d50

0800a830 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b08a      	sub	sp, #40	; 0x28
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
 800a83c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a83e:	2300      	movs	r3, #0
 800a840:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d10a      	bne.n	800a85e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84c:	f383 8811 	msr	BASEPRI, r3
 800a850:	f3bf 8f6f 	isb	sy
 800a854:	f3bf 8f4f 	dsb	sy
 800a858:	623b      	str	r3, [r7, #32]
}
 800a85a:	bf00      	nop
 800a85c:	e7fe      	b.n	800a85c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a85e:	4b1a      	ldr	r3, [pc, #104]	; (800a8c8 <xTimerGenericCommand+0x98>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d02a      	beq.n	800a8bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	2b05      	cmp	r3, #5
 800a876:	dc18      	bgt.n	800a8aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a878:	f7ff feb2 	bl	800a5e0 <xTaskGetSchedulerState>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d109      	bne.n	800a896 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a882:	4b11      	ldr	r3, [pc, #68]	; (800a8c8 <xTimerGenericCommand+0x98>)
 800a884:	6818      	ldr	r0, [r3, #0]
 800a886:	f107 0110 	add.w	r1, r7, #16
 800a88a:	2300      	movs	r3, #0
 800a88c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a88e:	f7fe fbf7 	bl	8009080 <xQueueGenericSend>
 800a892:	6278      	str	r0, [r7, #36]	; 0x24
 800a894:	e012      	b.n	800a8bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a896:	4b0c      	ldr	r3, [pc, #48]	; (800a8c8 <xTimerGenericCommand+0x98>)
 800a898:	6818      	ldr	r0, [r3, #0]
 800a89a:	f107 0110 	add.w	r1, r7, #16
 800a89e:	2300      	movs	r3, #0
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f7fe fbed 	bl	8009080 <xQueueGenericSend>
 800a8a6:	6278      	str	r0, [r7, #36]	; 0x24
 800a8a8:	e008      	b.n	800a8bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a8aa:	4b07      	ldr	r3, [pc, #28]	; (800a8c8 <xTimerGenericCommand+0x98>)
 800a8ac:	6818      	ldr	r0, [r3, #0]
 800a8ae:	f107 0110 	add.w	r1, r7, #16
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	683a      	ldr	r2, [r7, #0]
 800a8b6:	f7fe fce1 	bl	800927c <xQueueGenericSendFromISR>
 800a8ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3728      	adds	r7, #40	; 0x28
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	24000d4c 	.word	0x24000d4c

0800a8cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b088      	sub	sp, #32
 800a8d0:	af02      	add	r7, sp, #8
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8d6:	4b22      	ldr	r3, [pc, #136]	; (800a960 <prvProcessExpiredTimer+0x94>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	68db      	ldr	r3, [r3, #12]
 800a8de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	3304      	adds	r3, #4
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7fe fa63 	bl	8008db0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8f0:	f003 0304 	and.w	r3, r3, #4
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d022      	beq.n	800a93e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	699a      	ldr	r2, [r3, #24]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	18d1      	adds	r1, r2, r3
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	683a      	ldr	r2, [r7, #0]
 800a904:	6978      	ldr	r0, [r7, #20]
 800a906:	f000 f8d1 	bl	800aaac <prvInsertTimerInActiveList>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d01f      	beq.n	800a950 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a910:	2300      	movs	r3, #0
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	2300      	movs	r3, #0
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	2100      	movs	r1, #0
 800a91a:	6978      	ldr	r0, [r7, #20]
 800a91c:	f7ff ff88 	bl	800a830 <xTimerGenericCommand>
 800a920:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d113      	bne.n	800a950 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92c:	f383 8811 	msr	BASEPRI, r3
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	60fb      	str	r3, [r7, #12]
}
 800a93a:	bf00      	nop
 800a93c:	e7fe      	b.n	800a93c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a944:	f023 0301 	bic.w	r3, r3, #1
 800a948:	b2da      	uxtb	r2, r3
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	6a1b      	ldr	r3, [r3, #32]
 800a954:	6978      	ldr	r0, [r7, #20]
 800a956:	4798      	blx	r3
}
 800a958:	bf00      	nop
 800a95a:	3718      	adds	r7, #24
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	24000d44 	.word	0x24000d44

0800a964 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a96c:	f107 0308 	add.w	r3, r7, #8
 800a970:	4618      	mov	r0, r3
 800a972:	f000 f857 	bl	800aa24 <prvGetNextExpireTime>
 800a976:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	4619      	mov	r1, r3
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 f803 	bl	800a988 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a982:	f000 f8d5 	bl	800ab30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a986:	e7f1      	b.n	800a96c <prvTimerTask+0x8>

0800a988 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a992:	f7ff fa39 	bl	8009e08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a996:	f107 0308 	add.w	r3, r7, #8
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 f866 	bl	800aa6c <prvSampleTimeNow>
 800a9a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d130      	bne.n	800aa0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d10a      	bne.n	800a9c4 <prvProcessTimerOrBlockTask+0x3c>
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d806      	bhi.n	800a9c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a9b6:	f7ff fa35 	bl	8009e24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a9ba:	68f9      	ldr	r1, [r7, #12]
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f7ff ff85 	bl	800a8cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a9c2:	e024      	b.n	800aa0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d008      	beq.n	800a9dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a9ca:	4b13      	ldr	r3, [pc, #76]	; (800aa18 <prvProcessTimerOrBlockTask+0x90>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d101      	bne.n	800a9d8 <prvProcessTimerOrBlockTask+0x50>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e000      	b.n	800a9da <prvProcessTimerOrBlockTask+0x52>
 800a9d8:	2300      	movs	r3, #0
 800a9da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a9dc:	4b0f      	ldr	r3, [pc, #60]	; (800aa1c <prvProcessTimerOrBlockTask+0x94>)
 800a9de:	6818      	ldr	r0, [r3, #0]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	1ad3      	subs	r3, r2, r3
 800a9e6:	683a      	ldr	r2, [r7, #0]
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	f7fe ff7d 	bl	80098e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a9ee:	f7ff fa19 	bl	8009e24 <xTaskResumeAll>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d10a      	bne.n	800aa0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a9f8:	4b09      	ldr	r3, [pc, #36]	; (800aa20 <prvProcessTimerOrBlockTask+0x98>)
 800a9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9fe:	601a      	str	r2, [r3, #0]
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	f3bf 8f6f 	isb	sy
}
 800aa08:	e001      	b.n	800aa0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aa0a:	f7ff fa0b 	bl	8009e24 <xTaskResumeAll>
}
 800aa0e:	bf00      	nop
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	24000d48 	.word	0x24000d48
 800aa1c:	24000d4c 	.word	0x24000d4c
 800aa20:	e000ed04 	.word	0xe000ed04

0800aa24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa2c:	4b0e      	ldr	r3, [pc, #56]	; (800aa68 <prvGetNextExpireTime+0x44>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d101      	bne.n	800aa3a <prvGetNextExpireTime+0x16>
 800aa36:	2201      	movs	r2, #1
 800aa38:	e000      	b.n	800aa3c <prvGetNextExpireTime+0x18>
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d105      	bne.n	800aa54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa48:	4b07      	ldr	r3, [pc, #28]	; (800aa68 <prvGetNextExpireTime+0x44>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	60fb      	str	r3, [r7, #12]
 800aa52:	e001      	b.n	800aa58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aa54:	2300      	movs	r3, #0
 800aa56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aa58:	68fb      	ldr	r3, [r7, #12]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	24000d44 	.word	0x24000d44

0800aa6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aa74:	f7ff fa74 	bl	8009f60 <xTaskGetTickCount>
 800aa78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aa7a:	4b0b      	ldr	r3, [pc, #44]	; (800aaa8 <prvSampleTimeNow+0x3c>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d205      	bcs.n	800aa90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aa84:	f000 f936 	bl	800acf4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	601a      	str	r2, [r3, #0]
 800aa8e:	e002      	b.n	800aa96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aa96:	4a04      	ldr	r2, [pc, #16]	; (800aaa8 <prvSampleTimeNow+0x3c>)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	24000d54 	.word	0x24000d54

0800aaac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b086      	sub	sp, #24
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
 800aab8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aaba:	2300      	movs	r3, #0
 800aabc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	68fa      	ldr	r2, [r7, #12]
 800aac8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aaca:	68ba      	ldr	r2, [r7, #8]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d812      	bhi.n	800aaf8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	1ad2      	subs	r2, r2, r3
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	699b      	ldr	r3, [r3, #24]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d302      	bcc.n	800aae6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aae0:	2301      	movs	r3, #1
 800aae2:	617b      	str	r3, [r7, #20]
 800aae4:	e01b      	b.n	800ab1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aae6:	4b10      	ldr	r3, [pc, #64]	; (800ab28 <prvInsertTimerInActiveList+0x7c>)
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	3304      	adds	r3, #4
 800aaee:	4619      	mov	r1, r3
 800aaf0:	4610      	mov	r0, r2
 800aaf2:	f7fe f924 	bl	8008d3e <vListInsert>
 800aaf6:	e012      	b.n	800ab1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d206      	bcs.n	800ab0e <prvInsertTimerInActiveList+0x62>
 800ab00:	68ba      	ldr	r2, [r7, #8]
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d302      	bcc.n	800ab0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	617b      	str	r3, [r7, #20]
 800ab0c:	e007      	b.n	800ab1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab0e:	4b07      	ldr	r3, [pc, #28]	; (800ab2c <prvInsertTimerInActiveList+0x80>)
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	3304      	adds	r3, #4
 800ab16:	4619      	mov	r1, r3
 800ab18:	4610      	mov	r0, r2
 800ab1a:	f7fe f910 	bl	8008d3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab1e:	697b      	ldr	r3, [r7, #20]
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3718      	adds	r7, #24
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	24000d48 	.word	0x24000d48
 800ab2c:	24000d44 	.word	0x24000d44

0800ab30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b08e      	sub	sp, #56	; 0x38
 800ab34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab36:	e0ca      	b.n	800acce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	da18      	bge.n	800ab70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ab3e:	1d3b      	adds	r3, r7, #4
 800ab40:	3304      	adds	r3, #4
 800ab42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ab44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d10a      	bne.n	800ab60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ab4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4e:	f383 8811 	msr	BASEPRI, r3
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	61fb      	str	r3, [r7, #28]
}
 800ab5c:	bf00      	nop
 800ab5e:	e7fe      	b.n	800ab5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ab60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab66:	6850      	ldr	r0, [r2, #4]
 800ab68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab6a:	6892      	ldr	r2, [r2, #8]
 800ab6c:	4611      	mov	r1, r2
 800ab6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f2c0 80aa 	blt.w	800accc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ab7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d004      	beq.n	800ab8e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab86:	3304      	adds	r3, #4
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fe f911 	bl	8008db0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab8e:	463b      	mov	r3, r7
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7ff ff6b 	bl	800aa6c <prvSampleTimeNow>
 800ab96:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2b09      	cmp	r3, #9
 800ab9c:	f200 8097 	bhi.w	800acce <prvProcessReceivedCommands+0x19e>
 800aba0:	a201      	add	r2, pc, #4	; (adr r2, 800aba8 <prvProcessReceivedCommands+0x78>)
 800aba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba6:	bf00      	nop
 800aba8:	0800abd1 	.word	0x0800abd1
 800abac:	0800abd1 	.word	0x0800abd1
 800abb0:	0800abd1 	.word	0x0800abd1
 800abb4:	0800ac45 	.word	0x0800ac45
 800abb8:	0800ac59 	.word	0x0800ac59
 800abbc:	0800aca3 	.word	0x0800aca3
 800abc0:	0800abd1 	.word	0x0800abd1
 800abc4:	0800abd1 	.word	0x0800abd1
 800abc8:	0800ac45 	.word	0x0800ac45
 800abcc:	0800ac59 	.word	0x0800ac59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800abd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abd6:	f043 0301 	orr.w	r3, r3, #1
 800abda:	b2da      	uxtb	r2, r3
 800abdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe6:	699b      	ldr	r3, [r3, #24]
 800abe8:	18d1      	adds	r1, r2, r3
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abf0:	f7ff ff5c 	bl	800aaac <prvInsertTimerInActiveList>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d069      	beq.n	800acce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfc:	6a1b      	ldr	r3, [r3, #32]
 800abfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac08:	f003 0304 	and.w	r3, r3, #4
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d05e      	beq.n	800acce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac14:	699b      	ldr	r3, [r3, #24]
 800ac16:	441a      	add	r2, r3
 800ac18:	2300      	movs	r3, #0
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	2100      	movs	r1, #0
 800ac20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac22:	f7ff fe05 	bl	800a830 <xTimerGenericCommand>
 800ac26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac28:	6a3b      	ldr	r3, [r7, #32]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d14f      	bne.n	800acce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	61bb      	str	r3, [r7, #24]
}
 800ac40:	bf00      	nop
 800ac42:	e7fe      	b.n	800ac42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac4a:	f023 0301 	bic.w	r3, r3, #1
 800ac4e:	b2da      	uxtb	r2, r3
 800ac50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ac56:	e03a      	b.n	800acce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac5e:	f043 0301 	orr.w	r3, r3, #1
 800ac62:	b2da      	uxtb	r2, r3
 800ac64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ac70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac72:	699b      	ldr	r3, [r3, #24]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10a      	bne.n	800ac8e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ac78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	617b      	str	r3, [r7, #20]
}
 800ac8a:	bf00      	nop
 800ac8c:	e7fe      	b.n	800ac8c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ac8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac90:	699a      	ldr	r2, [r3, #24]
 800ac92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac94:	18d1      	adds	r1, r2, r3
 800ac96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac9c:	f7ff ff06 	bl	800aaac <prvInsertTimerInActiveList>
					break;
 800aca0:	e015      	b.n	800acce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aca8:	f003 0302 	and.w	r3, r3, #2
 800acac:	2b00      	cmp	r3, #0
 800acae:	d103      	bne.n	800acb8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800acb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acb2:	f000 fbdd 	bl	800b470 <vPortFree>
 800acb6:	e00a      	b.n	800acce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acbe:	f023 0301 	bic.w	r3, r3, #1
 800acc2:	b2da      	uxtb	r2, r3
 800acc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800acca:	e000      	b.n	800acce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800accc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800acce:	4b08      	ldr	r3, [pc, #32]	; (800acf0 <prvProcessReceivedCommands+0x1c0>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	1d39      	adds	r1, r7, #4
 800acd4:	2200      	movs	r2, #0
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fe fb6c 	bl	80093b4 <xQueueReceive>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f47f af2a 	bne.w	800ab38 <prvProcessReceivedCommands+0x8>
	}
}
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop
 800ace8:	3730      	adds	r7, #48	; 0x30
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	24000d4c 	.word	0x24000d4c

0800acf4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b088      	sub	sp, #32
 800acf8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800acfa:	e048      	b.n	800ad8e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800acfc:	4b2d      	ldr	r3, [pc, #180]	; (800adb4 <prvSwitchTimerLists+0xc0>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad06:	4b2b      	ldr	r3, [pc, #172]	; (800adb4 <prvSwitchTimerLists+0xc0>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	3304      	adds	r3, #4
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fe f84b 	bl	8008db0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	6a1b      	ldr	r3, [r3, #32]
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad28:	f003 0304 	and.w	r3, r3, #4
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d02e      	beq.n	800ad8e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	699b      	ldr	r3, [r3, #24]
 800ad34:	693a      	ldr	r2, [r7, #16]
 800ad36:	4413      	add	r3, r2
 800ad38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ad3a:	68ba      	ldr	r2, [r7, #8]
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d90e      	bls.n	800ad60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	68ba      	ldr	r2, [r7, #8]
 800ad46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad4e:	4b19      	ldr	r3, [pc, #100]	; (800adb4 <prvSwitchTimerLists+0xc0>)
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	3304      	adds	r3, #4
 800ad56:	4619      	mov	r1, r3
 800ad58:	4610      	mov	r0, r2
 800ad5a:	f7fd fff0 	bl	8008d3e <vListInsert>
 800ad5e:	e016      	b.n	800ad8e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad60:	2300      	movs	r3, #0
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	2300      	movs	r3, #0
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	2100      	movs	r1, #0
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f7ff fd60 	bl	800a830 <xTimerGenericCommand>
 800ad70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10a      	bne.n	800ad8e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ad78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7c:	f383 8811 	msr	BASEPRI, r3
 800ad80:	f3bf 8f6f 	isb	sy
 800ad84:	f3bf 8f4f 	dsb	sy
 800ad88:	603b      	str	r3, [r7, #0]
}
 800ad8a:	bf00      	nop
 800ad8c:	e7fe      	b.n	800ad8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad8e:	4b09      	ldr	r3, [pc, #36]	; (800adb4 <prvSwitchTimerLists+0xc0>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1b1      	bne.n	800acfc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ad98:	4b06      	ldr	r3, [pc, #24]	; (800adb4 <prvSwitchTimerLists+0xc0>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ad9e:	4b06      	ldr	r3, [pc, #24]	; (800adb8 <prvSwitchTimerLists+0xc4>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a04      	ldr	r2, [pc, #16]	; (800adb4 <prvSwitchTimerLists+0xc0>)
 800ada4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ada6:	4a04      	ldr	r2, [pc, #16]	; (800adb8 <prvSwitchTimerLists+0xc4>)
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	6013      	str	r3, [r2, #0]
}
 800adac:	bf00      	nop
 800adae:	3718      	adds	r7, #24
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	24000d44 	.word	0x24000d44
 800adb8:	24000d48 	.word	0x24000d48

0800adbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800adc2:	f000 f967 	bl	800b094 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800adc6:	4b15      	ldr	r3, [pc, #84]	; (800ae1c <prvCheckForValidListAndQueue+0x60>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d120      	bne.n	800ae10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800adce:	4814      	ldr	r0, [pc, #80]	; (800ae20 <prvCheckForValidListAndQueue+0x64>)
 800add0:	f7fd ff64 	bl	8008c9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800add4:	4813      	ldr	r0, [pc, #76]	; (800ae24 <prvCheckForValidListAndQueue+0x68>)
 800add6:	f7fd ff61 	bl	8008c9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800adda:	4b13      	ldr	r3, [pc, #76]	; (800ae28 <prvCheckForValidListAndQueue+0x6c>)
 800addc:	4a10      	ldr	r2, [pc, #64]	; (800ae20 <prvCheckForValidListAndQueue+0x64>)
 800adde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ade0:	4b12      	ldr	r3, [pc, #72]	; (800ae2c <prvCheckForValidListAndQueue+0x70>)
 800ade2:	4a10      	ldr	r2, [pc, #64]	; (800ae24 <prvCheckForValidListAndQueue+0x68>)
 800ade4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ade6:	2300      	movs	r3, #0
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	4b11      	ldr	r3, [pc, #68]	; (800ae30 <prvCheckForValidListAndQueue+0x74>)
 800adec:	4a11      	ldr	r2, [pc, #68]	; (800ae34 <prvCheckForValidListAndQueue+0x78>)
 800adee:	2110      	movs	r1, #16
 800adf0:	200a      	movs	r0, #10
 800adf2:	f7fe f86f 	bl	8008ed4 <xQueueGenericCreateStatic>
 800adf6:	4603      	mov	r3, r0
 800adf8:	4a08      	ldr	r2, [pc, #32]	; (800ae1c <prvCheckForValidListAndQueue+0x60>)
 800adfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800adfc:	4b07      	ldr	r3, [pc, #28]	; (800ae1c <prvCheckForValidListAndQueue+0x60>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d005      	beq.n	800ae10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ae04:	4b05      	ldr	r3, [pc, #20]	; (800ae1c <prvCheckForValidListAndQueue+0x60>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	490b      	ldr	r1, [pc, #44]	; (800ae38 <prvCheckForValidListAndQueue+0x7c>)
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fe fd42 	bl	8009894 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae10:	f000 f970 	bl	800b0f4 <vPortExitCritical>
}
 800ae14:	bf00      	nop
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	24000d4c 	.word	0x24000d4c
 800ae20:	24000d1c 	.word	0x24000d1c
 800ae24:	24000d30 	.word	0x24000d30
 800ae28:	24000d44 	.word	0x24000d44
 800ae2c:	24000d48 	.word	0x24000d48
 800ae30:	24000df8 	.word	0x24000df8
 800ae34:	24000d58 	.word	0x24000d58
 800ae38:	0800ba64 	.word	0x0800ba64

0800ae3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	3b04      	subs	r3, #4
 800ae4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ae54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	3b04      	subs	r3, #4
 800ae5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	f023 0201 	bic.w	r2, r3, #1
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	3b04      	subs	r3, #4
 800ae6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ae6c:	4a0c      	ldr	r2, [pc, #48]	; (800aea0 <pxPortInitialiseStack+0x64>)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	3b14      	subs	r3, #20
 800ae76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	3b04      	subs	r3, #4
 800ae82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f06f 0202 	mvn.w	r2, #2
 800ae8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	3b20      	subs	r3, #32
 800ae90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ae92:	68fb      	ldr	r3, [r7, #12]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3714      	adds	r7, #20
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr
 800aea0:	0800aea5 	.word	0x0800aea5

0800aea4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aeae:	4b12      	ldr	r3, [pc, #72]	; (800aef8 <prvTaskExitError+0x54>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aeb6:	d00a      	beq.n	800aece <prvTaskExitError+0x2a>
	__asm volatile
 800aeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebc:	f383 8811 	msr	BASEPRI, r3
 800aec0:	f3bf 8f6f 	isb	sy
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	60fb      	str	r3, [r7, #12]
}
 800aeca:	bf00      	nop
 800aecc:	e7fe      	b.n	800aecc <prvTaskExitError+0x28>
	__asm volatile
 800aece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed2:	f383 8811 	msr	BASEPRI, r3
 800aed6:	f3bf 8f6f 	isb	sy
 800aeda:	f3bf 8f4f 	dsb	sy
 800aede:	60bb      	str	r3, [r7, #8]
}
 800aee0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aee2:	bf00      	nop
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d0fc      	beq.n	800aee4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aeea:	bf00      	nop
 800aeec:	bf00      	nop
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr
 800aef8:	24000010 	.word	0x24000010
 800aefc:	00000000 	.word	0x00000000

0800af00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af00:	4b07      	ldr	r3, [pc, #28]	; (800af20 <pxCurrentTCBConst2>)
 800af02:	6819      	ldr	r1, [r3, #0]
 800af04:	6808      	ldr	r0, [r1, #0]
 800af06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af0a:	f380 8809 	msr	PSP, r0
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f04f 0000 	mov.w	r0, #0
 800af16:	f380 8811 	msr	BASEPRI, r0
 800af1a:	4770      	bx	lr
 800af1c:	f3af 8000 	nop.w

0800af20 <pxCurrentTCBConst2>:
 800af20:	2400081c 	.word	0x2400081c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af24:	bf00      	nop
 800af26:	bf00      	nop

0800af28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af28:	4808      	ldr	r0, [pc, #32]	; (800af4c <prvPortStartFirstTask+0x24>)
 800af2a:	6800      	ldr	r0, [r0, #0]
 800af2c:	6800      	ldr	r0, [r0, #0]
 800af2e:	f380 8808 	msr	MSP, r0
 800af32:	f04f 0000 	mov.w	r0, #0
 800af36:	f380 8814 	msr	CONTROL, r0
 800af3a:	b662      	cpsie	i
 800af3c:	b661      	cpsie	f
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	df00      	svc	0
 800af48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800af4a:	bf00      	nop
 800af4c:	e000ed08 	.word	0xe000ed08

0800af50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800af56:	4b46      	ldr	r3, [pc, #280]	; (800b070 <xPortStartScheduler+0x120>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a46      	ldr	r2, [pc, #280]	; (800b074 <xPortStartScheduler+0x124>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d10a      	bne.n	800af76 <xPortStartScheduler+0x26>
	__asm volatile
 800af60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af64:	f383 8811 	msr	BASEPRI, r3
 800af68:	f3bf 8f6f 	isb	sy
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	613b      	str	r3, [r7, #16]
}
 800af72:	bf00      	nop
 800af74:	e7fe      	b.n	800af74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800af76:	4b3e      	ldr	r3, [pc, #248]	; (800b070 <xPortStartScheduler+0x120>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a3f      	ldr	r2, [pc, #252]	; (800b078 <xPortStartScheduler+0x128>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d10a      	bne.n	800af96 <xPortStartScheduler+0x46>
	__asm volatile
 800af80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af84:	f383 8811 	msr	BASEPRI, r3
 800af88:	f3bf 8f6f 	isb	sy
 800af8c:	f3bf 8f4f 	dsb	sy
 800af90:	60fb      	str	r3, [r7, #12]
}
 800af92:	bf00      	nop
 800af94:	e7fe      	b.n	800af94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800af96:	4b39      	ldr	r3, [pc, #228]	; (800b07c <xPortStartScheduler+0x12c>)
 800af98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	22ff      	movs	r2, #255	; 0xff
 800afa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	b2db      	uxtb	r3, r3
 800afae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800afb0:	78fb      	ldrb	r3, [r7, #3]
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800afb8:	b2da      	uxtb	r2, r3
 800afba:	4b31      	ldr	r3, [pc, #196]	; (800b080 <xPortStartScheduler+0x130>)
 800afbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800afbe:	4b31      	ldr	r3, [pc, #196]	; (800b084 <xPortStartScheduler+0x134>)
 800afc0:	2207      	movs	r2, #7
 800afc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afc4:	e009      	b.n	800afda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800afc6:	4b2f      	ldr	r3, [pc, #188]	; (800b084 <xPortStartScheduler+0x134>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	3b01      	subs	r3, #1
 800afcc:	4a2d      	ldr	r2, [pc, #180]	; (800b084 <xPortStartScheduler+0x134>)
 800afce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800afd0:	78fb      	ldrb	r3, [r7, #3]
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afda:	78fb      	ldrb	r3, [r7, #3]
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afe2:	2b80      	cmp	r3, #128	; 0x80
 800afe4:	d0ef      	beq.n	800afc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800afe6:	4b27      	ldr	r3, [pc, #156]	; (800b084 <xPortStartScheduler+0x134>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f1c3 0307 	rsb	r3, r3, #7
 800afee:	2b04      	cmp	r3, #4
 800aff0:	d00a      	beq.n	800b008 <xPortStartScheduler+0xb8>
	__asm volatile
 800aff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff6:	f383 8811 	msr	BASEPRI, r3
 800affa:	f3bf 8f6f 	isb	sy
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	60bb      	str	r3, [r7, #8]
}
 800b004:	bf00      	nop
 800b006:	e7fe      	b.n	800b006 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b008:	4b1e      	ldr	r3, [pc, #120]	; (800b084 <xPortStartScheduler+0x134>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	021b      	lsls	r3, r3, #8
 800b00e:	4a1d      	ldr	r2, [pc, #116]	; (800b084 <xPortStartScheduler+0x134>)
 800b010:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b012:	4b1c      	ldr	r3, [pc, #112]	; (800b084 <xPortStartScheduler+0x134>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b01a:	4a1a      	ldr	r2, [pc, #104]	; (800b084 <xPortStartScheduler+0x134>)
 800b01c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	b2da      	uxtb	r2, r3
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b026:	4b18      	ldr	r3, [pc, #96]	; (800b088 <xPortStartScheduler+0x138>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a17      	ldr	r2, [pc, #92]	; (800b088 <xPortStartScheduler+0x138>)
 800b02c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b030:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b032:	4b15      	ldr	r3, [pc, #84]	; (800b088 <xPortStartScheduler+0x138>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a14      	ldr	r2, [pc, #80]	; (800b088 <xPortStartScheduler+0x138>)
 800b038:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b03c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b03e:	f000 f8dd 	bl	800b1fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b042:	4b12      	ldr	r3, [pc, #72]	; (800b08c <xPortStartScheduler+0x13c>)
 800b044:	2200      	movs	r2, #0
 800b046:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b048:	f000 f8fc 	bl	800b244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b04c:	4b10      	ldr	r3, [pc, #64]	; (800b090 <xPortStartScheduler+0x140>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a0f      	ldr	r2, [pc, #60]	; (800b090 <xPortStartScheduler+0x140>)
 800b052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b056:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b058:	f7ff ff66 	bl	800af28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b05c:	f7ff f84a 	bl	800a0f4 <vTaskSwitchContext>
	prvTaskExitError();
 800b060:	f7ff ff20 	bl	800aea4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3718      	adds	r7, #24
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	e000ed00 	.word	0xe000ed00
 800b074:	410fc271 	.word	0x410fc271
 800b078:	410fc270 	.word	0x410fc270
 800b07c:	e000e400 	.word	0xe000e400
 800b080:	24000e48 	.word	0x24000e48
 800b084:	24000e4c 	.word	0x24000e4c
 800b088:	e000ed20 	.word	0xe000ed20
 800b08c:	24000010 	.word	0x24000010
 800b090:	e000ef34 	.word	0xe000ef34

0800b094 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
	__asm volatile
 800b09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09e:	f383 8811 	msr	BASEPRI, r3
 800b0a2:	f3bf 8f6f 	isb	sy
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	607b      	str	r3, [r7, #4]
}
 800b0ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b0ae:	4b0f      	ldr	r3, [pc, #60]	; (800b0ec <vPortEnterCritical+0x58>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	4a0d      	ldr	r2, [pc, #52]	; (800b0ec <vPortEnterCritical+0x58>)
 800b0b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b0b8:	4b0c      	ldr	r3, [pc, #48]	; (800b0ec <vPortEnterCritical+0x58>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d10f      	bne.n	800b0e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b0c0:	4b0b      	ldr	r3, [pc, #44]	; (800b0f0 <vPortEnterCritical+0x5c>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00a      	beq.n	800b0e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ce:	f383 8811 	msr	BASEPRI, r3
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	603b      	str	r3, [r7, #0]
}
 800b0dc:	bf00      	nop
 800b0de:	e7fe      	b.n	800b0de <vPortEnterCritical+0x4a>
	}
}
 800b0e0:	bf00      	nop
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr
 800b0ec:	24000010 	.word	0x24000010
 800b0f0:	e000ed04 	.word	0xe000ed04

0800b0f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b0fa:	4b12      	ldr	r3, [pc, #72]	; (800b144 <vPortExitCritical+0x50>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d10a      	bne.n	800b118 <vPortExitCritical+0x24>
	__asm volatile
 800b102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b106:	f383 8811 	msr	BASEPRI, r3
 800b10a:	f3bf 8f6f 	isb	sy
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	607b      	str	r3, [r7, #4]
}
 800b114:	bf00      	nop
 800b116:	e7fe      	b.n	800b116 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b118:	4b0a      	ldr	r3, [pc, #40]	; (800b144 <vPortExitCritical+0x50>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	3b01      	subs	r3, #1
 800b11e:	4a09      	ldr	r2, [pc, #36]	; (800b144 <vPortExitCritical+0x50>)
 800b120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b122:	4b08      	ldr	r3, [pc, #32]	; (800b144 <vPortExitCritical+0x50>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d105      	bne.n	800b136 <vPortExitCritical+0x42>
 800b12a:	2300      	movs	r3, #0
 800b12c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	f383 8811 	msr	BASEPRI, r3
}
 800b134:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b136:	bf00      	nop
 800b138:	370c      	adds	r7, #12
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	24000010 	.word	0x24000010
	...

0800b150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b150:	f3ef 8009 	mrs	r0, PSP
 800b154:	f3bf 8f6f 	isb	sy
 800b158:	4b15      	ldr	r3, [pc, #84]	; (800b1b0 <pxCurrentTCBConst>)
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	f01e 0f10 	tst.w	lr, #16
 800b160:	bf08      	it	eq
 800b162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b16a:	6010      	str	r0, [r2, #0]
 800b16c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b170:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b174:	f380 8811 	msr	BASEPRI, r0
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	f3bf 8f6f 	isb	sy
 800b180:	f7fe ffb8 	bl	800a0f4 <vTaskSwitchContext>
 800b184:	f04f 0000 	mov.w	r0, #0
 800b188:	f380 8811 	msr	BASEPRI, r0
 800b18c:	bc09      	pop	{r0, r3}
 800b18e:	6819      	ldr	r1, [r3, #0]
 800b190:	6808      	ldr	r0, [r1, #0]
 800b192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b196:	f01e 0f10 	tst.w	lr, #16
 800b19a:	bf08      	it	eq
 800b19c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b1a0:	f380 8809 	msr	PSP, r0
 800b1a4:	f3bf 8f6f 	isb	sy
 800b1a8:	4770      	bx	lr
 800b1aa:	bf00      	nop
 800b1ac:	f3af 8000 	nop.w

0800b1b0 <pxCurrentTCBConst>:
 800b1b0:	2400081c 	.word	0x2400081c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b1b4:	bf00      	nop
 800b1b6:	bf00      	nop

0800b1b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c2:	f383 8811 	msr	BASEPRI, r3
 800b1c6:	f3bf 8f6f 	isb	sy
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	607b      	str	r3, [r7, #4]
}
 800b1d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b1d2:	f7fe fed5 	bl	8009f80 <xTaskIncrementTick>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d003      	beq.n	800b1e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b1dc:	4b06      	ldr	r3, [pc, #24]	; (800b1f8 <xPortSysTickHandler+0x40>)
 800b1de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1e2:	601a      	str	r2, [r3, #0]
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	f383 8811 	msr	BASEPRI, r3
}
 800b1ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b1f0:	bf00      	nop
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	e000ed04 	.word	0xe000ed04

0800b1fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b200:	4b0b      	ldr	r3, [pc, #44]	; (800b230 <vPortSetupTimerInterrupt+0x34>)
 800b202:	2200      	movs	r2, #0
 800b204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b206:	4b0b      	ldr	r3, [pc, #44]	; (800b234 <vPortSetupTimerInterrupt+0x38>)
 800b208:	2200      	movs	r2, #0
 800b20a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b20c:	4b0a      	ldr	r3, [pc, #40]	; (800b238 <vPortSetupTimerInterrupt+0x3c>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a0a      	ldr	r2, [pc, #40]	; (800b23c <vPortSetupTimerInterrupt+0x40>)
 800b212:	fba2 2303 	umull	r2, r3, r2, r3
 800b216:	099b      	lsrs	r3, r3, #6
 800b218:	4a09      	ldr	r2, [pc, #36]	; (800b240 <vPortSetupTimerInterrupt+0x44>)
 800b21a:	3b01      	subs	r3, #1
 800b21c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b21e:	4b04      	ldr	r3, [pc, #16]	; (800b230 <vPortSetupTimerInterrupt+0x34>)
 800b220:	2207      	movs	r2, #7
 800b222:	601a      	str	r2, [r3, #0]
}
 800b224:	bf00      	nop
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	e000e010 	.word	0xe000e010
 800b234:	e000e018 	.word	0xe000e018
 800b238:	24000000 	.word	0x24000000
 800b23c:	10624dd3 	.word	0x10624dd3
 800b240:	e000e014 	.word	0xe000e014

0800b244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b254 <vPortEnableVFP+0x10>
 800b248:	6801      	ldr	r1, [r0, #0]
 800b24a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b24e:	6001      	str	r1, [r0, #0]
 800b250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b252:	bf00      	nop
 800b254:	e000ed88 	.word	0xe000ed88

0800b258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b258:	b480      	push	{r7}
 800b25a:	b085      	sub	sp, #20
 800b25c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b25e:	f3ef 8305 	mrs	r3, IPSR
 800b262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2b0f      	cmp	r3, #15
 800b268:	d914      	bls.n	800b294 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b26a:	4a17      	ldr	r2, [pc, #92]	; (800b2c8 <vPortValidateInterruptPriority+0x70>)
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	4413      	add	r3, r2
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b274:	4b15      	ldr	r3, [pc, #84]	; (800b2cc <vPortValidateInterruptPriority+0x74>)
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	7afa      	ldrb	r2, [r7, #11]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d20a      	bcs.n	800b294 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b282:	f383 8811 	msr	BASEPRI, r3
 800b286:	f3bf 8f6f 	isb	sy
 800b28a:	f3bf 8f4f 	dsb	sy
 800b28e:	607b      	str	r3, [r7, #4]
}
 800b290:	bf00      	nop
 800b292:	e7fe      	b.n	800b292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b294:	4b0e      	ldr	r3, [pc, #56]	; (800b2d0 <vPortValidateInterruptPriority+0x78>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b29c:	4b0d      	ldr	r3, [pc, #52]	; (800b2d4 <vPortValidateInterruptPriority+0x7c>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d90a      	bls.n	800b2ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a8:	f383 8811 	msr	BASEPRI, r3
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	f3bf 8f4f 	dsb	sy
 800b2b4:	603b      	str	r3, [r7, #0]
}
 800b2b6:	bf00      	nop
 800b2b8:	e7fe      	b.n	800b2b8 <vPortValidateInterruptPriority+0x60>
	}
 800b2ba:	bf00      	nop
 800b2bc:	3714      	adds	r7, #20
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	e000e3f0 	.word	0xe000e3f0
 800b2cc:	24000e48 	.word	0x24000e48
 800b2d0:	e000ed0c 	.word	0xe000ed0c
 800b2d4:	24000e4c 	.word	0x24000e4c

0800b2d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b08a      	sub	sp, #40	; 0x28
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b2e4:	f7fe fd90 	bl	8009e08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b2e8:	4b5b      	ldr	r3, [pc, #364]	; (800b458 <pvPortMalloc+0x180>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d101      	bne.n	800b2f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b2f0:	f000 f920 	bl	800b534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b2f4:	4b59      	ldr	r3, [pc, #356]	; (800b45c <pvPortMalloc+0x184>)
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4013      	ands	r3, r2
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f040 8093 	bne.w	800b428 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d01d      	beq.n	800b344 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b308:	2208      	movs	r2, #8
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4413      	add	r3, r2
 800b30e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f003 0307 	and.w	r3, r3, #7
 800b316:	2b00      	cmp	r3, #0
 800b318:	d014      	beq.n	800b344 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f023 0307 	bic.w	r3, r3, #7
 800b320:	3308      	adds	r3, #8
 800b322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f003 0307 	and.w	r3, r3, #7
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00a      	beq.n	800b344 <pvPortMalloc+0x6c>
	__asm volatile
 800b32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b332:	f383 8811 	msr	BASEPRI, r3
 800b336:	f3bf 8f6f 	isb	sy
 800b33a:	f3bf 8f4f 	dsb	sy
 800b33e:	617b      	str	r3, [r7, #20]
}
 800b340:	bf00      	nop
 800b342:	e7fe      	b.n	800b342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d06e      	beq.n	800b428 <pvPortMalloc+0x150>
 800b34a:	4b45      	ldr	r3, [pc, #276]	; (800b460 <pvPortMalloc+0x188>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	429a      	cmp	r2, r3
 800b352:	d869      	bhi.n	800b428 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b354:	4b43      	ldr	r3, [pc, #268]	; (800b464 <pvPortMalloc+0x18c>)
 800b356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b358:	4b42      	ldr	r3, [pc, #264]	; (800b464 <pvPortMalloc+0x18c>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b35e:	e004      	b.n	800b36a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	429a      	cmp	r2, r3
 800b372:	d903      	bls.n	800b37c <pvPortMalloc+0xa4>
 800b374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d1f1      	bne.n	800b360 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b37c:	4b36      	ldr	r3, [pc, #216]	; (800b458 <pvPortMalloc+0x180>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b382:	429a      	cmp	r2, r3
 800b384:	d050      	beq.n	800b428 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b386:	6a3b      	ldr	r3, [r7, #32]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2208      	movs	r2, #8
 800b38c:	4413      	add	r3, r2
 800b38e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	6a3b      	ldr	r3, [r7, #32]
 800b396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	1ad2      	subs	r2, r2, r3
 800b3a0:	2308      	movs	r3, #8
 800b3a2:	005b      	lsls	r3, r3, #1
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d91f      	bls.n	800b3e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	f003 0307 	and.w	r3, r3, #7
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00a      	beq.n	800b3d0 <pvPortMalloc+0xf8>
	__asm volatile
 800b3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	613b      	str	r3, [r7, #16]
}
 800b3cc:	bf00      	nop
 800b3ce:	e7fe      	b.n	800b3ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d2:	685a      	ldr	r2, [r3, #4]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	1ad2      	subs	r2, r2, r3
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b3e2:	69b8      	ldr	r0, [r7, #24]
 800b3e4:	f000 f908 	bl	800b5f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b3e8:	4b1d      	ldr	r3, [pc, #116]	; (800b460 <pvPortMalloc+0x188>)
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	4a1b      	ldr	r2, [pc, #108]	; (800b460 <pvPortMalloc+0x188>)
 800b3f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b3f6:	4b1a      	ldr	r3, [pc, #104]	; (800b460 <pvPortMalloc+0x188>)
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	4b1b      	ldr	r3, [pc, #108]	; (800b468 <pvPortMalloc+0x190>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d203      	bcs.n	800b40a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b402:	4b17      	ldr	r3, [pc, #92]	; (800b460 <pvPortMalloc+0x188>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a18      	ldr	r2, [pc, #96]	; (800b468 <pvPortMalloc+0x190>)
 800b408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40c:	685a      	ldr	r2, [r3, #4]
 800b40e:	4b13      	ldr	r3, [pc, #76]	; (800b45c <pvPortMalloc+0x184>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	431a      	orrs	r2, r3
 800b414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41a:	2200      	movs	r2, #0
 800b41c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b41e:	4b13      	ldr	r3, [pc, #76]	; (800b46c <pvPortMalloc+0x194>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	3301      	adds	r3, #1
 800b424:	4a11      	ldr	r2, [pc, #68]	; (800b46c <pvPortMalloc+0x194>)
 800b426:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b428:	f7fe fcfc 	bl	8009e24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	f003 0307 	and.w	r3, r3, #7
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00a      	beq.n	800b44c <pvPortMalloc+0x174>
	__asm volatile
 800b436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43a:	f383 8811 	msr	BASEPRI, r3
 800b43e:	f3bf 8f6f 	isb	sy
 800b442:	f3bf 8f4f 	dsb	sy
 800b446:	60fb      	str	r3, [r7, #12]
}
 800b448:	bf00      	nop
 800b44a:	e7fe      	b.n	800b44a <pvPortMalloc+0x172>
	return pvReturn;
 800b44c:	69fb      	ldr	r3, [r7, #28]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3728      	adds	r7, #40	; 0x28
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	24004a58 	.word	0x24004a58
 800b45c:	24004a6c 	.word	0x24004a6c
 800b460:	24004a5c 	.word	0x24004a5c
 800b464:	24004a50 	.word	0x24004a50
 800b468:	24004a60 	.word	0x24004a60
 800b46c:	24004a64 	.word	0x24004a64

0800b470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b086      	sub	sp, #24
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d04d      	beq.n	800b51e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b482:	2308      	movs	r3, #8
 800b484:	425b      	negs	r3, r3
 800b486:	697a      	ldr	r2, [r7, #20]
 800b488:	4413      	add	r3, r2
 800b48a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	685a      	ldr	r2, [r3, #4]
 800b494:	4b24      	ldr	r3, [pc, #144]	; (800b528 <vPortFree+0xb8>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4013      	ands	r3, r2
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d10a      	bne.n	800b4b4 <vPortFree+0x44>
	__asm volatile
 800b49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	60fb      	str	r3, [r7, #12]
}
 800b4b0:	bf00      	nop
 800b4b2:	e7fe      	b.n	800b4b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00a      	beq.n	800b4d2 <vPortFree+0x62>
	__asm volatile
 800b4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c0:	f383 8811 	msr	BASEPRI, r3
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	60bb      	str	r3, [r7, #8]
}
 800b4ce:	bf00      	nop
 800b4d0:	e7fe      	b.n	800b4d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	685a      	ldr	r2, [r3, #4]
 800b4d6:	4b14      	ldr	r3, [pc, #80]	; (800b528 <vPortFree+0xb8>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4013      	ands	r3, r2
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d01e      	beq.n	800b51e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d11a      	bne.n	800b51e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	4b0e      	ldr	r3, [pc, #56]	; (800b528 <vPortFree+0xb8>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	43db      	mvns	r3, r3
 800b4f2:	401a      	ands	r2, r3
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b4f8:	f7fe fc86 	bl	8009e08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	685a      	ldr	r2, [r3, #4]
 800b500:	4b0a      	ldr	r3, [pc, #40]	; (800b52c <vPortFree+0xbc>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4413      	add	r3, r2
 800b506:	4a09      	ldr	r2, [pc, #36]	; (800b52c <vPortFree+0xbc>)
 800b508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b50a:	6938      	ldr	r0, [r7, #16]
 800b50c:	f000 f874 	bl	800b5f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b510:	4b07      	ldr	r3, [pc, #28]	; (800b530 <vPortFree+0xc0>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	3301      	adds	r3, #1
 800b516:	4a06      	ldr	r2, [pc, #24]	; (800b530 <vPortFree+0xc0>)
 800b518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b51a:	f7fe fc83 	bl	8009e24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b51e:	bf00      	nop
 800b520:	3718      	adds	r7, #24
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	24004a6c 	.word	0x24004a6c
 800b52c:	24004a5c 	.word	0x24004a5c
 800b530:	24004a68 	.word	0x24004a68

0800b534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b53a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b53e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b540:	4b27      	ldr	r3, [pc, #156]	; (800b5e0 <prvHeapInit+0xac>)
 800b542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f003 0307 	and.w	r3, r3, #7
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00c      	beq.n	800b568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	3307      	adds	r3, #7
 800b552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f023 0307 	bic.w	r3, r3, #7
 800b55a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b55c:	68ba      	ldr	r2, [r7, #8]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	1ad3      	subs	r3, r2, r3
 800b562:	4a1f      	ldr	r2, [pc, #124]	; (800b5e0 <prvHeapInit+0xac>)
 800b564:	4413      	add	r3, r2
 800b566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b56c:	4a1d      	ldr	r2, [pc, #116]	; (800b5e4 <prvHeapInit+0xb0>)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b572:	4b1c      	ldr	r3, [pc, #112]	; (800b5e4 <prvHeapInit+0xb0>)
 800b574:	2200      	movs	r2, #0
 800b576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	4413      	add	r3, r2
 800b57e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b580:	2208      	movs	r2, #8
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	1a9b      	subs	r3, r3, r2
 800b586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f023 0307 	bic.w	r3, r3, #7
 800b58e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	4a15      	ldr	r2, [pc, #84]	; (800b5e8 <prvHeapInit+0xb4>)
 800b594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b596:	4b14      	ldr	r3, [pc, #80]	; (800b5e8 <prvHeapInit+0xb4>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2200      	movs	r2, #0
 800b59c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b59e:	4b12      	ldr	r3, [pc, #72]	; (800b5e8 <prvHeapInit+0xb4>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	1ad2      	subs	r2, r2, r3
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b5b4:	4b0c      	ldr	r3, [pc, #48]	; (800b5e8 <prvHeapInit+0xb4>)
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	4a0a      	ldr	r2, [pc, #40]	; (800b5ec <prvHeapInit+0xb8>)
 800b5c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	4a09      	ldr	r2, [pc, #36]	; (800b5f0 <prvHeapInit+0xbc>)
 800b5ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b5cc:	4b09      	ldr	r3, [pc, #36]	; (800b5f4 <prvHeapInit+0xc0>)
 800b5ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b5d2:	601a      	str	r2, [r3, #0]
}
 800b5d4:	bf00      	nop
 800b5d6:	3714      	adds	r7, #20
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr
 800b5e0:	24000e50 	.word	0x24000e50
 800b5e4:	24004a50 	.word	0x24004a50
 800b5e8:	24004a58 	.word	0x24004a58
 800b5ec:	24004a60 	.word	0x24004a60
 800b5f0:	24004a5c 	.word	0x24004a5c
 800b5f4:	24004a6c 	.word	0x24004a6c

0800b5f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b600:	4b28      	ldr	r3, [pc, #160]	; (800b6a4 <prvInsertBlockIntoFreeList+0xac>)
 800b602:	60fb      	str	r3, [r7, #12]
 800b604:	e002      	b.n	800b60c <prvInsertBlockIntoFreeList+0x14>
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	60fb      	str	r3, [r7, #12]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	429a      	cmp	r2, r3
 800b614:	d8f7      	bhi.n	800b606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	68ba      	ldr	r2, [r7, #8]
 800b620:	4413      	add	r3, r2
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	429a      	cmp	r2, r3
 800b626:	d108      	bne.n	800b63a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	685a      	ldr	r2, [r3, #4]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	441a      	add	r2, r3
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	68ba      	ldr	r2, [r7, #8]
 800b644:	441a      	add	r2, r3
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d118      	bne.n	800b680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	4b15      	ldr	r3, [pc, #84]	; (800b6a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	429a      	cmp	r2, r3
 800b658:	d00d      	beq.n	800b676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	685a      	ldr	r2, [r3, #4]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	441a      	add	r2, r3
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	601a      	str	r2, [r3, #0]
 800b674:	e008      	b.n	800b688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b676:	4b0c      	ldr	r3, [pc, #48]	; (800b6a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	601a      	str	r2, [r3, #0]
 800b67e:	e003      	b.n	800b688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d002      	beq.n	800b696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b696:	bf00      	nop
 800b698:	3714      	adds	r7, #20
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	24004a50 	.word	0x24004a50
 800b6a8:	24004a58 	.word	0x24004a58

0800b6ac <atoi>:
 800b6ac:	220a      	movs	r2, #10
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	f000 b930 	b.w	800b914 <strtol>

0800b6b4 <__errno>:
 800b6b4:	4b01      	ldr	r3, [pc, #4]	; (800b6bc <__errno+0x8>)
 800b6b6:	6818      	ldr	r0, [r3, #0]
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	24000014 	.word	0x24000014

0800b6c0 <__libc_init_array>:
 800b6c0:	b570      	push	{r4, r5, r6, lr}
 800b6c2:	4d0d      	ldr	r5, [pc, #52]	; (800b6f8 <__libc_init_array+0x38>)
 800b6c4:	4c0d      	ldr	r4, [pc, #52]	; (800b6fc <__libc_init_array+0x3c>)
 800b6c6:	1b64      	subs	r4, r4, r5
 800b6c8:	10a4      	asrs	r4, r4, #2
 800b6ca:	2600      	movs	r6, #0
 800b6cc:	42a6      	cmp	r6, r4
 800b6ce:	d109      	bne.n	800b6e4 <__libc_init_array+0x24>
 800b6d0:	4d0b      	ldr	r5, [pc, #44]	; (800b700 <__libc_init_array+0x40>)
 800b6d2:	4c0c      	ldr	r4, [pc, #48]	; (800b704 <__libc_init_array+0x44>)
 800b6d4:	f000 f984 	bl	800b9e0 <_init>
 800b6d8:	1b64      	subs	r4, r4, r5
 800b6da:	10a4      	asrs	r4, r4, #2
 800b6dc:	2600      	movs	r6, #0
 800b6de:	42a6      	cmp	r6, r4
 800b6e0:	d105      	bne.n	800b6ee <__libc_init_array+0x2e>
 800b6e2:	bd70      	pop	{r4, r5, r6, pc}
 800b6e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6e8:	4798      	blx	r3
 800b6ea:	3601      	adds	r6, #1
 800b6ec:	e7ee      	b.n	800b6cc <__libc_init_array+0xc>
 800b6ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6f2:	4798      	blx	r3
 800b6f4:	3601      	adds	r6, #1
 800b6f6:	e7f2      	b.n	800b6de <__libc_init_array+0x1e>
 800b6f8:	0800bce8 	.word	0x0800bce8
 800b6fc:	0800bce8 	.word	0x0800bce8
 800b700:	0800bce8 	.word	0x0800bce8
 800b704:	0800bcec 	.word	0x0800bcec

0800b708 <__retarget_lock_acquire_recursive>:
 800b708:	4770      	bx	lr

0800b70a <__retarget_lock_release_recursive>:
 800b70a:	4770      	bx	lr

0800b70c <memcpy>:
 800b70c:	440a      	add	r2, r1
 800b70e:	4291      	cmp	r1, r2
 800b710:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b714:	d100      	bne.n	800b718 <memcpy+0xc>
 800b716:	4770      	bx	lr
 800b718:	b510      	push	{r4, lr}
 800b71a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b71e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b722:	4291      	cmp	r1, r2
 800b724:	d1f9      	bne.n	800b71a <memcpy+0xe>
 800b726:	bd10      	pop	{r4, pc}

0800b728 <memset>:
 800b728:	4402      	add	r2, r0
 800b72a:	4603      	mov	r3, r0
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d100      	bne.n	800b732 <memset+0xa>
 800b730:	4770      	bx	lr
 800b732:	f803 1b01 	strb.w	r1, [r3], #1
 800b736:	e7f9      	b.n	800b72c <memset+0x4>

0800b738 <cleanup_glue>:
 800b738:	b538      	push	{r3, r4, r5, lr}
 800b73a:	460c      	mov	r4, r1
 800b73c:	6809      	ldr	r1, [r1, #0]
 800b73e:	4605      	mov	r5, r0
 800b740:	b109      	cbz	r1, 800b746 <cleanup_glue+0xe>
 800b742:	f7ff fff9 	bl	800b738 <cleanup_glue>
 800b746:	4621      	mov	r1, r4
 800b748:	4628      	mov	r0, r5
 800b74a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b74e:	f000 b8f7 	b.w	800b940 <_free_r>
	...

0800b754 <_reclaim_reent>:
 800b754:	4b2c      	ldr	r3, [pc, #176]	; (800b808 <_reclaim_reent+0xb4>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4283      	cmp	r3, r0
 800b75a:	b570      	push	{r4, r5, r6, lr}
 800b75c:	4604      	mov	r4, r0
 800b75e:	d051      	beq.n	800b804 <_reclaim_reent+0xb0>
 800b760:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b762:	b143      	cbz	r3, 800b776 <_reclaim_reent+0x22>
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d14a      	bne.n	800b800 <_reclaim_reent+0xac>
 800b76a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b76c:	6819      	ldr	r1, [r3, #0]
 800b76e:	b111      	cbz	r1, 800b776 <_reclaim_reent+0x22>
 800b770:	4620      	mov	r0, r4
 800b772:	f000 f8e5 	bl	800b940 <_free_r>
 800b776:	6961      	ldr	r1, [r4, #20]
 800b778:	b111      	cbz	r1, 800b780 <_reclaim_reent+0x2c>
 800b77a:	4620      	mov	r0, r4
 800b77c:	f000 f8e0 	bl	800b940 <_free_r>
 800b780:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b782:	b111      	cbz	r1, 800b78a <_reclaim_reent+0x36>
 800b784:	4620      	mov	r0, r4
 800b786:	f000 f8db 	bl	800b940 <_free_r>
 800b78a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b78c:	b111      	cbz	r1, 800b794 <_reclaim_reent+0x40>
 800b78e:	4620      	mov	r0, r4
 800b790:	f000 f8d6 	bl	800b940 <_free_r>
 800b794:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b796:	b111      	cbz	r1, 800b79e <_reclaim_reent+0x4a>
 800b798:	4620      	mov	r0, r4
 800b79a:	f000 f8d1 	bl	800b940 <_free_r>
 800b79e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b7a0:	b111      	cbz	r1, 800b7a8 <_reclaim_reent+0x54>
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f000 f8cc 	bl	800b940 <_free_r>
 800b7a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b7aa:	b111      	cbz	r1, 800b7b2 <_reclaim_reent+0x5e>
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f000 f8c7 	bl	800b940 <_free_r>
 800b7b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b7b4:	b111      	cbz	r1, 800b7bc <_reclaim_reent+0x68>
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f000 f8c2 	bl	800b940 <_free_r>
 800b7bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7be:	b111      	cbz	r1, 800b7c6 <_reclaim_reent+0x72>
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f000 f8bd 	bl	800b940 <_free_r>
 800b7c6:	69a3      	ldr	r3, [r4, #24]
 800b7c8:	b1e3      	cbz	r3, 800b804 <_reclaim_reent+0xb0>
 800b7ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	4798      	blx	r3
 800b7d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b7d2:	b1b9      	cbz	r1, 800b804 <_reclaim_reent+0xb0>
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7da:	f7ff bfad 	b.w	800b738 <cleanup_glue>
 800b7de:	5949      	ldr	r1, [r1, r5]
 800b7e0:	b941      	cbnz	r1, 800b7f4 <_reclaim_reent+0xa0>
 800b7e2:	3504      	adds	r5, #4
 800b7e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7e6:	2d80      	cmp	r5, #128	; 0x80
 800b7e8:	68d9      	ldr	r1, [r3, #12]
 800b7ea:	d1f8      	bne.n	800b7de <_reclaim_reent+0x8a>
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f000 f8a7 	bl	800b940 <_free_r>
 800b7f2:	e7ba      	b.n	800b76a <_reclaim_reent+0x16>
 800b7f4:	680e      	ldr	r6, [r1, #0]
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f000 f8a2 	bl	800b940 <_free_r>
 800b7fc:	4631      	mov	r1, r6
 800b7fe:	e7ef      	b.n	800b7e0 <_reclaim_reent+0x8c>
 800b800:	2500      	movs	r5, #0
 800b802:	e7ef      	b.n	800b7e4 <_reclaim_reent+0x90>
 800b804:	bd70      	pop	{r4, r5, r6, pc}
 800b806:	bf00      	nop
 800b808:	24000014 	.word	0x24000014

0800b80c <_strtol_l.isra.0>:
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b812:	d001      	beq.n	800b818 <_strtol_l.isra.0+0xc>
 800b814:	2b24      	cmp	r3, #36	; 0x24
 800b816:	d906      	bls.n	800b826 <_strtol_l.isra.0+0x1a>
 800b818:	f7ff ff4c 	bl	800b6b4 <__errno>
 800b81c:	2316      	movs	r3, #22
 800b81e:	6003      	str	r3, [r0, #0]
 800b820:	2000      	movs	r0, #0
 800b822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b826:	4f3a      	ldr	r7, [pc, #232]	; (800b910 <_strtol_l.isra.0+0x104>)
 800b828:	468e      	mov	lr, r1
 800b82a:	4676      	mov	r6, lr
 800b82c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b830:	5de5      	ldrb	r5, [r4, r7]
 800b832:	f015 0508 	ands.w	r5, r5, #8
 800b836:	d1f8      	bne.n	800b82a <_strtol_l.isra.0+0x1e>
 800b838:	2c2d      	cmp	r4, #45	; 0x2d
 800b83a:	d134      	bne.n	800b8a6 <_strtol_l.isra.0+0x9a>
 800b83c:	f89e 4000 	ldrb.w	r4, [lr]
 800b840:	f04f 0801 	mov.w	r8, #1
 800b844:	f106 0e02 	add.w	lr, r6, #2
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d05c      	beq.n	800b906 <_strtol_l.isra.0+0xfa>
 800b84c:	2b10      	cmp	r3, #16
 800b84e:	d10c      	bne.n	800b86a <_strtol_l.isra.0+0x5e>
 800b850:	2c30      	cmp	r4, #48	; 0x30
 800b852:	d10a      	bne.n	800b86a <_strtol_l.isra.0+0x5e>
 800b854:	f89e 4000 	ldrb.w	r4, [lr]
 800b858:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b85c:	2c58      	cmp	r4, #88	; 0x58
 800b85e:	d14d      	bne.n	800b8fc <_strtol_l.isra.0+0xf0>
 800b860:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b864:	2310      	movs	r3, #16
 800b866:	f10e 0e02 	add.w	lr, lr, #2
 800b86a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b86e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800b872:	2600      	movs	r6, #0
 800b874:	fbbc f9f3 	udiv	r9, ip, r3
 800b878:	4635      	mov	r5, r6
 800b87a:	fb03 ca19 	mls	sl, r3, r9, ip
 800b87e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b882:	2f09      	cmp	r7, #9
 800b884:	d818      	bhi.n	800b8b8 <_strtol_l.isra.0+0xac>
 800b886:	463c      	mov	r4, r7
 800b888:	42a3      	cmp	r3, r4
 800b88a:	dd24      	ble.n	800b8d6 <_strtol_l.isra.0+0xca>
 800b88c:	2e00      	cmp	r6, #0
 800b88e:	db1f      	blt.n	800b8d0 <_strtol_l.isra.0+0xc4>
 800b890:	45a9      	cmp	r9, r5
 800b892:	d31d      	bcc.n	800b8d0 <_strtol_l.isra.0+0xc4>
 800b894:	d101      	bne.n	800b89a <_strtol_l.isra.0+0x8e>
 800b896:	45a2      	cmp	sl, r4
 800b898:	db1a      	blt.n	800b8d0 <_strtol_l.isra.0+0xc4>
 800b89a:	fb05 4503 	mla	r5, r5, r3, r4
 800b89e:	2601      	movs	r6, #1
 800b8a0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b8a4:	e7eb      	b.n	800b87e <_strtol_l.isra.0+0x72>
 800b8a6:	2c2b      	cmp	r4, #43	; 0x2b
 800b8a8:	bf08      	it	eq
 800b8aa:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b8ae:	46a8      	mov	r8, r5
 800b8b0:	bf08      	it	eq
 800b8b2:	f106 0e02 	addeq.w	lr, r6, #2
 800b8b6:	e7c7      	b.n	800b848 <_strtol_l.isra.0+0x3c>
 800b8b8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b8bc:	2f19      	cmp	r7, #25
 800b8be:	d801      	bhi.n	800b8c4 <_strtol_l.isra.0+0xb8>
 800b8c0:	3c37      	subs	r4, #55	; 0x37
 800b8c2:	e7e1      	b.n	800b888 <_strtol_l.isra.0+0x7c>
 800b8c4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b8c8:	2f19      	cmp	r7, #25
 800b8ca:	d804      	bhi.n	800b8d6 <_strtol_l.isra.0+0xca>
 800b8cc:	3c57      	subs	r4, #87	; 0x57
 800b8ce:	e7db      	b.n	800b888 <_strtol_l.isra.0+0x7c>
 800b8d0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b8d4:	e7e4      	b.n	800b8a0 <_strtol_l.isra.0+0x94>
 800b8d6:	2e00      	cmp	r6, #0
 800b8d8:	da05      	bge.n	800b8e6 <_strtol_l.isra.0+0xda>
 800b8da:	2322      	movs	r3, #34	; 0x22
 800b8dc:	6003      	str	r3, [r0, #0]
 800b8de:	4665      	mov	r5, ip
 800b8e0:	b942      	cbnz	r2, 800b8f4 <_strtol_l.isra.0+0xe8>
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	e79d      	b.n	800b822 <_strtol_l.isra.0+0x16>
 800b8e6:	f1b8 0f00 	cmp.w	r8, #0
 800b8ea:	d000      	beq.n	800b8ee <_strtol_l.isra.0+0xe2>
 800b8ec:	426d      	negs	r5, r5
 800b8ee:	2a00      	cmp	r2, #0
 800b8f0:	d0f7      	beq.n	800b8e2 <_strtol_l.isra.0+0xd6>
 800b8f2:	b10e      	cbz	r6, 800b8f8 <_strtol_l.isra.0+0xec>
 800b8f4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800b8f8:	6011      	str	r1, [r2, #0]
 800b8fa:	e7f2      	b.n	800b8e2 <_strtol_l.isra.0+0xd6>
 800b8fc:	2430      	movs	r4, #48	; 0x30
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1b3      	bne.n	800b86a <_strtol_l.isra.0+0x5e>
 800b902:	2308      	movs	r3, #8
 800b904:	e7b1      	b.n	800b86a <_strtol_l.isra.0+0x5e>
 800b906:	2c30      	cmp	r4, #48	; 0x30
 800b908:	d0a4      	beq.n	800b854 <_strtol_l.isra.0+0x48>
 800b90a:	230a      	movs	r3, #10
 800b90c:	e7ad      	b.n	800b86a <_strtol_l.isra.0+0x5e>
 800b90e:	bf00      	nop
 800b910:	0800bbdd 	.word	0x0800bbdd

0800b914 <strtol>:
 800b914:	4613      	mov	r3, r2
 800b916:	460a      	mov	r2, r1
 800b918:	4601      	mov	r1, r0
 800b91a:	4802      	ldr	r0, [pc, #8]	; (800b924 <strtol+0x10>)
 800b91c:	6800      	ldr	r0, [r0, #0]
 800b91e:	f7ff bf75 	b.w	800b80c <_strtol_l.isra.0>
 800b922:	bf00      	nop
 800b924:	24000014 	.word	0x24000014

0800b928 <__malloc_lock>:
 800b928:	4801      	ldr	r0, [pc, #4]	; (800b930 <__malloc_lock+0x8>)
 800b92a:	f7ff beed 	b.w	800b708 <__retarget_lock_acquire_recursive>
 800b92e:	bf00      	nop
 800b930:	24004ccc 	.word	0x24004ccc

0800b934 <__malloc_unlock>:
 800b934:	4801      	ldr	r0, [pc, #4]	; (800b93c <__malloc_unlock+0x8>)
 800b936:	f7ff bee8 	b.w	800b70a <__retarget_lock_release_recursive>
 800b93a:	bf00      	nop
 800b93c:	24004ccc 	.word	0x24004ccc

0800b940 <_free_r>:
 800b940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b942:	2900      	cmp	r1, #0
 800b944:	d048      	beq.n	800b9d8 <_free_r+0x98>
 800b946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b94a:	9001      	str	r0, [sp, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f1a1 0404 	sub.w	r4, r1, #4
 800b952:	bfb8      	it	lt
 800b954:	18e4      	addlt	r4, r4, r3
 800b956:	f7ff ffe7 	bl	800b928 <__malloc_lock>
 800b95a:	4a20      	ldr	r2, [pc, #128]	; (800b9dc <_free_r+0x9c>)
 800b95c:	9801      	ldr	r0, [sp, #4]
 800b95e:	6813      	ldr	r3, [r2, #0]
 800b960:	4615      	mov	r5, r2
 800b962:	b933      	cbnz	r3, 800b972 <_free_r+0x32>
 800b964:	6063      	str	r3, [r4, #4]
 800b966:	6014      	str	r4, [r2, #0]
 800b968:	b003      	add	sp, #12
 800b96a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b96e:	f7ff bfe1 	b.w	800b934 <__malloc_unlock>
 800b972:	42a3      	cmp	r3, r4
 800b974:	d90b      	bls.n	800b98e <_free_r+0x4e>
 800b976:	6821      	ldr	r1, [r4, #0]
 800b978:	1862      	adds	r2, r4, r1
 800b97a:	4293      	cmp	r3, r2
 800b97c:	bf04      	itt	eq
 800b97e:	681a      	ldreq	r2, [r3, #0]
 800b980:	685b      	ldreq	r3, [r3, #4]
 800b982:	6063      	str	r3, [r4, #4]
 800b984:	bf04      	itt	eq
 800b986:	1852      	addeq	r2, r2, r1
 800b988:	6022      	streq	r2, [r4, #0]
 800b98a:	602c      	str	r4, [r5, #0]
 800b98c:	e7ec      	b.n	800b968 <_free_r+0x28>
 800b98e:	461a      	mov	r2, r3
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	b10b      	cbz	r3, 800b998 <_free_r+0x58>
 800b994:	42a3      	cmp	r3, r4
 800b996:	d9fa      	bls.n	800b98e <_free_r+0x4e>
 800b998:	6811      	ldr	r1, [r2, #0]
 800b99a:	1855      	adds	r5, r2, r1
 800b99c:	42a5      	cmp	r5, r4
 800b99e:	d10b      	bne.n	800b9b8 <_free_r+0x78>
 800b9a0:	6824      	ldr	r4, [r4, #0]
 800b9a2:	4421      	add	r1, r4
 800b9a4:	1854      	adds	r4, r2, r1
 800b9a6:	42a3      	cmp	r3, r4
 800b9a8:	6011      	str	r1, [r2, #0]
 800b9aa:	d1dd      	bne.n	800b968 <_free_r+0x28>
 800b9ac:	681c      	ldr	r4, [r3, #0]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	6053      	str	r3, [r2, #4]
 800b9b2:	4421      	add	r1, r4
 800b9b4:	6011      	str	r1, [r2, #0]
 800b9b6:	e7d7      	b.n	800b968 <_free_r+0x28>
 800b9b8:	d902      	bls.n	800b9c0 <_free_r+0x80>
 800b9ba:	230c      	movs	r3, #12
 800b9bc:	6003      	str	r3, [r0, #0]
 800b9be:	e7d3      	b.n	800b968 <_free_r+0x28>
 800b9c0:	6825      	ldr	r5, [r4, #0]
 800b9c2:	1961      	adds	r1, r4, r5
 800b9c4:	428b      	cmp	r3, r1
 800b9c6:	bf04      	itt	eq
 800b9c8:	6819      	ldreq	r1, [r3, #0]
 800b9ca:	685b      	ldreq	r3, [r3, #4]
 800b9cc:	6063      	str	r3, [r4, #4]
 800b9ce:	bf04      	itt	eq
 800b9d0:	1949      	addeq	r1, r1, r5
 800b9d2:	6021      	streq	r1, [r4, #0]
 800b9d4:	6054      	str	r4, [r2, #4]
 800b9d6:	e7c7      	b.n	800b968 <_free_r+0x28>
 800b9d8:	b003      	add	sp, #12
 800b9da:	bd30      	pop	{r4, r5, pc}
 800b9dc:	24004a70 	.word	0x24004a70

0800b9e0 <_init>:
 800b9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e2:	bf00      	nop
 800b9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9e6:	bc08      	pop	{r3}
 800b9e8:	469e      	mov	lr, r3
 800b9ea:	4770      	bx	lr

0800b9ec <_fini>:
 800b9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ee:	bf00      	nop
 800b9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9f2:	bc08      	pop	{r3}
 800b9f4:	469e      	mov	lr, r3
 800b9f6:	4770      	bx	lr
