
blinky-queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008318  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  080085c8  080085c8  000185c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008788  08008788  00018788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008790  08008790  00018790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008794  08008794  00018794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08008798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ba4  24000078  08008810  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004c1c  08008810  00024c1c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fec5  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004bc7  00000000  00000000  0004ff6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001868  00000000  00000000  00054b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000016f0  00000000  00000000  000563a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032ede  00000000  00000000  00057a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e541  00000000  00000000  0008a96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014935f  00000000  00000000  000a8eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001f220e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006948  00000000  00000000  001f2264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080085b0 	.word	0x080085b0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	080085b0 	.word	0x080085b0

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandsToBlink */
  CommandsToBlinkHandle = osMessageQueueNew (16, sizeof(uint8_t), &CommandsToBlink_attributes);
 80005ec:	4a18      	ldr	r2, [pc, #96]	; (8000650 <MX_FREERTOS_Init+0x68>)
 80005ee:	2101      	movs	r1, #1
 80005f0:	2010      	movs	r0, #16
 80005f2:	f005 f9ae 	bl	8005952 <osMessageQueueNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a16      	ldr	r2, [pc, #88]	; (8000654 <MX_FREERTOS_Init+0x6c>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of times_blinked */
  times_blinkedHandle = osMessageQueueNew (16, sizeof(uint8_t), &times_blinked_attributes);
 80005fc:	4a16      	ldr	r2, [pc, #88]	; (8000658 <MX_FREERTOS_Init+0x70>)
 80005fe:	2101      	movs	r1, #1
 8000600:	2010      	movs	r0, #16
 8000602:	f005 f9a6 	bl	8005952 <osMessageQueueNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a14      	ldr	r2, [pc, #80]	; (800065c <MX_FREERTOS_Init+0x74>)
 800060a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CommandLine */
  CommandLineHandle = osThreadNew(StartCommandLine, NULL, &CommandLine_attributes);
 800060c:	4a14      	ldr	r2, [pc, #80]	; (8000660 <MX_FREERTOS_Init+0x78>)
 800060e:	2100      	movs	r1, #0
 8000610:	4814      	ldr	r0, [pc, #80]	; (8000664 <MX_FREERTOS_Init+0x7c>)
 8000612:	f005 f8f1 	bl	80057f8 <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a13      	ldr	r2, [pc, #76]	; (8000668 <MX_FREERTOS_Init+0x80>)
 800061a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker1 */
  Blinker1Handle = osThreadNew(StartBlinker1, NULL, &Blinker1_attributes);
 800061c:	4a13      	ldr	r2, [pc, #76]	; (800066c <MX_FREERTOS_Init+0x84>)
 800061e:	2100      	movs	r1, #0
 8000620:	4813      	ldr	r0, [pc, #76]	; (8000670 <MX_FREERTOS_Init+0x88>)
 8000622:	f005 f8e9 	bl	80057f8 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_FREERTOS_Init+0x8c>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker2 */
  Blinker2Handle = osThreadNew(StartBlinker2, NULL, &Blinker2_attributes);
 800062c:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_FREERTOS_Init+0x90>)
 800062e:	2100      	movs	r1, #0
 8000630:	4812      	ldr	r0, [pc, #72]	; (800067c <MX_FREERTOS_Init+0x94>)
 8000632:	f005 f8e1 	bl	80057f8 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a11      	ldr	r2, [pc, #68]	; (8000680 <MX_FREERTOS_Init+0x98>)
 800063a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker3 */
  Blinker3Handle = osThreadNew(StartBlinker3, NULL, &Blinker3_attributes);
 800063c:	4a11      	ldr	r2, [pc, #68]	; (8000684 <MX_FREERTOS_Init+0x9c>)
 800063e:	2100      	movs	r1, #0
 8000640:	4811      	ldr	r0, [pc, #68]	; (8000688 <MX_FREERTOS_Init+0xa0>)
 8000642:	f005 f8d9 	bl	80057f8 <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a10      	ldr	r2, [pc, #64]	; (800068c <MX_FREERTOS_Init+0xa4>)
 800064a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	080086c0 	.word	0x080086c0
 8000654:	24004ae8 	.word	0x24004ae8
 8000658:	080086d8 	.word	0x080086d8
 800065c:	24004aec 	.word	0x24004aec
 8000660:	08008630 	.word	0x08008630
 8000664:	08000691 	.word	0x08000691
 8000668:	24004ad8 	.word	0x24004ad8
 800066c:	08008654 	.word	0x08008654
 8000670:	08000725 	.word	0x08000725
 8000674:	24004ad4 	.word	0x24004ad4
 8000678:	08008678 	.word	0x08008678
 800067c:	08000735 	.word	0x08000735
 8000680:	24004ae0 	.word	0x24004ae0
 8000684:	0800869c 	.word	0x0800869c
 8000688:	08000745 	.word	0x08000745
 800068c:	24004ae4 	.word	0x24004ae4

08000690 <StartCommandLine>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCommandLine */
void StartCommandLine(void *argument)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandLine */
	uint8_t local_pointer = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
  for(;;)
  {
	 HAL_StatusTypeDef ret = HAL_UART_Receive(&huart3,rx_buffer ,1, 100);
 800069c:	2364      	movs	r3, #100	; 0x64
 800069e:	2201      	movs	r2, #1
 80006a0:	491b      	ldr	r1, [pc, #108]	; (8000710 <StartCommandLine+0x80>)
 80006a2:	481c      	ldr	r0, [pc, #112]	; (8000714 <StartCommandLine+0x84>)
 80006a4:	f003 fe30 	bl	8004308 <HAL_UART_Receive>
 80006a8:	4603      	mov	r3, r0
 80006aa:	73bb      	strb	r3, [r7, #14]
	 if(ret == HAL_OK){
 80006ac:	7bbb      	ldrb	r3, [r7, #14]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d12a      	bne.n	8000708 <StartCommandLine+0x78>
		  HAL_UART_Transmit(&huart3, rx_buffer, 1, 100);
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	2201      	movs	r2, #1
 80006b6:	4916      	ldr	r1, [pc, #88]	; (8000710 <StartCommandLine+0x80>)
 80006b8:	4816      	ldr	r0, [pc, #88]	; (8000714 <StartCommandLine+0x84>)
 80006ba:	f003 fd8f 	bl	80041dc <HAL_UART_Transmit>
		 local_buffer[local_pointer] = rx_buffer[0];
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	4a13      	ldr	r2, [pc, #76]	; (8000710 <StartCommandLine+0x80>)
 80006c2:	7811      	ldrb	r1, [r2, #0]
 80006c4:	4a14      	ldr	r2, [pc, #80]	; (8000718 <StartCommandLine+0x88>)
 80006c6:	54d1      	strb	r1, [r2, r3]
		 if(local_buffer[local_pointer] == '\n' || local_buffer[local_pointer] == '\r'){
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	4a13      	ldr	r2, [pc, #76]	; (8000718 <StartCommandLine+0x88>)
 80006cc:	5cd3      	ldrb	r3, [r2, r3]
 80006ce:	2b0a      	cmp	r3, #10
 80006d0:	d004      	beq.n	80006dc <StartCommandLine+0x4c>
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	4a10      	ldr	r2, [pc, #64]	; (8000718 <StartCommandLine+0x88>)
 80006d6:	5cd3      	ldrb	r3, [r2, r3]
 80006d8:	2b0d      	cmp	r3, #13
 80006da:	d10d      	bne.n	80006f8 <StartCommandLine+0x68>
			 new_message_flag = 1;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <StartCommandLine+0x8c>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
			 local_buffer[local_pointer+1 ] = '\n';
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	3301      	adds	r3, #1
 80006e6:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <StartCommandLine+0x88>)
 80006e8:	210a      	movs	r1, #10
 80006ea:	54d1      	strb	r1, [r2, r3]
			 message_length = local_pointer;
 80006ec:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <StartCommandLine+0x90>)
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	7013      	strb	r3, [r2, #0]
			 local_pointer = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	73fb      	strb	r3, [r7, #15]
 80006f6:	e007      	b.n	8000708 <StartCommandLine+0x78>
		 }else{
			 local_pointer++;
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	3301      	adds	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
			 if(local_pointer > RX_BUFFER_LENGTH){
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	2b64      	cmp	r3, #100	; 0x64
 8000702:	d901      	bls.n	8000708 <StartCommandLine+0x78>
				 local_pointer = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	73fb      	strb	r3, [r7, #15]
			 }
		 }
	 }
    osDelay(100);
 8000708:	2064      	movs	r0, #100	; 0x64
 800070a:	f005 f907 	bl	800591c <osDelay>
  {
 800070e:	e7c5      	b.n	800069c <StartCommandLine+0xc>
 8000710:	24004adc 	.word	0x24004adc
 8000714:	24004b3c 	.word	0x24004b3c
 8000718:	24004a6c 	.word	0x24004a6c
 800071c:	24000094 	.word	0x24000094
 8000720:	24004ad0 	.word	0x24004ad0

08000724 <StartBlinker1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinker1 */
void StartBlinker1(void *argument)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800072c:	2001      	movs	r0, #1
 800072e:	f005 f8f5 	bl	800591c <osDelay>
 8000732:	e7fb      	b.n	800072c <StartBlinker1+0x8>

08000734 <StartBlinker2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinker2 */
void StartBlinker2(void *argument)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f005 f8ed 	bl	800591c <osDelay>
 8000742:	e7fb      	b.n	800073c <StartBlinker2+0x8>

08000744 <StartBlinker3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinker3 */
void StartBlinker3(void *argument)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker3 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f005 f8e5 	bl	800591c <osDelay>
 8000752:	e7fb      	b.n	800074c <StartBlinker3+0x8>

08000754 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	4b80      	ldr	r3, [pc, #512]	; (800096c <MX_GPIO_Init+0x218>)
 800076c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000770:	4a7e      	ldr	r2, [pc, #504]	; (800096c <MX_GPIO_Init+0x218>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800077a:	4b7c      	ldr	r3, [pc, #496]	; (800096c <MX_GPIO_Init+0x218>)
 800077c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	623b      	str	r3, [r7, #32]
 8000786:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000788:	4b78      	ldr	r3, [pc, #480]	; (800096c <MX_GPIO_Init+0x218>)
 800078a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800078e:	4a77      	ldr	r2, [pc, #476]	; (800096c <MX_GPIO_Init+0x218>)
 8000790:	f043 0320 	orr.w	r3, r3, #32
 8000794:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000798:	4b74      	ldr	r3, [pc, #464]	; (800096c <MX_GPIO_Init+0x218>)
 800079a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800079e:	f003 0320 	and.w	r3, r3, #32
 80007a2:	61fb      	str	r3, [r7, #28]
 80007a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	4b71      	ldr	r3, [pc, #452]	; (800096c <MX_GPIO_Init+0x218>)
 80007a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ac:	4a6f      	ldr	r2, [pc, #444]	; (800096c <MX_GPIO_Init+0x218>)
 80007ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007b6:	4b6d      	ldr	r3, [pc, #436]	; (800096c <MX_GPIO_Init+0x218>)
 80007b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c0:	61bb      	str	r3, [r7, #24]
 80007c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c4:	4b69      	ldr	r3, [pc, #420]	; (800096c <MX_GPIO_Init+0x218>)
 80007c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ca:	4a68      	ldr	r2, [pc, #416]	; (800096c <MX_GPIO_Init+0x218>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007d4:	4b65      	ldr	r3, [pc, #404]	; (800096c <MX_GPIO_Init+0x218>)
 80007d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	4b62      	ldr	r3, [pc, #392]	; (800096c <MX_GPIO_Init+0x218>)
 80007e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e8:	4a60      	ldr	r2, [pc, #384]	; (800096c <MX_GPIO_Init+0x218>)
 80007ea:	f043 0308 	orr.w	r3, r3, #8
 80007ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007f2:	4b5e      	ldr	r3, [pc, #376]	; (800096c <MX_GPIO_Init+0x218>)
 80007f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f8:	f003 0308 	and.w	r3, r3, #8
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000800:	4b5a      	ldr	r3, [pc, #360]	; (800096c <MX_GPIO_Init+0x218>)
 8000802:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000806:	4a59      	ldr	r2, [pc, #356]	; (800096c <MX_GPIO_Init+0x218>)
 8000808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800080c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000810:	4b56      	ldr	r3, [pc, #344]	; (800096c <MX_GPIO_Init+0x218>)
 8000812:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b53      	ldr	r3, [pc, #332]	; (800096c <MX_GPIO_Init+0x218>)
 8000820:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000824:	4a51      	ldr	r2, [pc, #324]	; (800096c <MX_GPIO_Init+0x218>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800082e:	4b4f      	ldr	r3, [pc, #316]	; (800096c <MX_GPIO_Init+0x218>)
 8000830:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083c:	4b4b      	ldr	r3, [pc, #300]	; (800096c <MX_GPIO_Init+0x218>)
 800083e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000842:	4a4a      	ldr	r2, [pc, #296]	; (800096c <MX_GPIO_Init+0x218>)
 8000844:	f043 0310 	orr.w	r3, r3, #16
 8000848:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800084c:	4b47      	ldr	r3, [pc, #284]	; (800096c <MX_GPIO_Init+0x218>)
 800084e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000852:	f003 0310 	and.w	r3, r3, #16
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000860:	4843      	ldr	r0, [pc, #268]	; (8000970 <MX_GPIO_Init+0x21c>)
 8000862:	f000 fe1d 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f244 0101 	movw	r1, #16385	; 0x4001
 800086c:	4841      	ldr	r0, [pc, #260]	; (8000974 <MX_GPIO_Init+0x220>)
 800086e:	f000 fe17 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2102      	movs	r1, #2
 8000876:	4840      	ldr	r0, [pc, #256]	; (8000978 <MX_GPIO_Init+0x224>)
 8000878:	f000 fe12 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	4619      	mov	r1, r3
 8000890:	483a      	ldr	r0, [pc, #232]	; (800097c <MX_GPIO_Init+0x228>)
 8000892:	f000 fc55 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ac:	4619      	mov	r1, r3
 80008ae:	4830      	ldr	r0, [pc, #192]	; (8000970 <MX_GPIO_Init+0x21c>)
 80008b0:	f000 fc46 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80008b4:	f244 0301 	movw	r3, #16385	; 0x4001
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ca:	4619      	mov	r1, r3
 80008cc:	4829      	ldr	r0, [pc, #164]	; (8000974 <MX_GPIO_Init+0x220>)
 80008ce:	f000 fc37 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80008d2:	2380      	movs	r3, #128	; 0x80
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e4:	4619      	mov	r1, r3
 80008e6:	4826      	ldr	r0, [pc, #152]	; (8000980 <MX_GPIO_Init+0x22c>)
 80008e8:	f000 fc2a 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80008ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fe:	4619      	mov	r1, r3
 8000900:	4820      	ldr	r0, [pc, #128]	; (8000984 <MX_GPIO_Init+0x230>)
 8000902:	f000 fc1d 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000918:	230a      	movs	r3, #10
 800091a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000920:	4619      	mov	r1, r3
 8000922:	4818      	ldr	r0, [pc, #96]	; (8000984 <MX_GPIO_Init+0x230>)
 8000924:	f000 fc0c 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000928:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093e:	4619      	mov	r1, r3
 8000940:	4810      	ldr	r0, [pc, #64]	; (8000984 <MX_GPIO_Init+0x230>)
 8000942:	f000 fbfd 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000946:	2302      	movs	r3, #2
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095a:	4619      	mov	r1, r3
 800095c:	4806      	ldr	r0, [pc, #24]	; (8000978 <MX_GPIO_Init+0x224>)
 800095e:	f000 fbef 	bl	8001140 <HAL_GPIO_Init>

}
 8000962:	bf00      	nop
 8000964:	3738      	adds	r7, #56	; 0x38
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	58024400 	.word	0x58024400
 8000970:	58021400 	.word	0x58021400
 8000974:	58020400 	.word	0x58020400
 8000978:	58021000 	.word	0x58021000
 800097c:	58020800 	.word	0x58020800
 8000980:	58021800 	.word	0x58021800
 8000984:	58020000 	.word	0x58020000

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098c:	f000 fa9c 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000990:	f000 f80e 	bl	80009b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000994:	f7ff fede 	bl	8000754 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000998:	f000 f9b2 	bl	8000d00 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800099c:	f000 fa62 	bl	8000e64 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80009a0:	f004 fee0 	bl	8005764 <osKernelInitialize>
  MX_FREERTOS_Init();
 80009a4:	f7ff fe20 	bl	80005e8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80009a8:	f004 ff00 	bl	80057ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <main+0x24>
	...

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b09c      	sub	sp, #112	; 0x70
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	224c      	movs	r2, #76	; 0x4c
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f007 fd28 	bl	8008414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2220      	movs	r2, #32
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f007 fd22 	bl	8008414 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009d0:	2004      	movs	r0, #4
 80009d2:	f000 fd7f 	bl	80014d4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <SystemClock_Config+0xd8>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	4a2a      	ldr	r2, [pc, #168]	; (8000a88 <SystemClock_Config+0xd8>)
 80009e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009e4:	6193      	str	r3, [r2, #24]
 80009e6:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <SystemClock_Config+0xd8>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009f2:	bf00      	nop
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <SystemClock_Config+0xd8>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a00:	d1f8      	bne.n	80009f4 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a02:	2321      	movs	r3, #33	; 0x21
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a06:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a10:	2302      	movs	r3, #2
 8000a12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a14:	2302      	movs	r3, #2
 8000a16:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a1c:	2318      	movs	r3, #24
 8000a1e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a24:	2304      	movs	r3, #4
 8000a26:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a2c:	230c      	movs	r3, #12
 8000a2e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 fda3 	bl	8001588 <HAL_RCC_OscConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a48:	f000 f832 	bl	8000ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4c:	233f      	movs	r3, #63	; 0x3f
 8000a4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a50:	2303      	movs	r3, #3
 8000a52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2102      	movs	r1, #2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 f98d 	bl	8001d90 <HAL_RCC_ClockConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a7c:	f000 f818 	bl	8000ab0 <Error_Handler>
  }
}
 8000a80:	bf00      	nop
 8000a82:	3770      	adds	r7, #112	; 0x70
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	58024800 	.word	0x58024800

08000a8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d101      	bne.n	8000aa2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a9e:	f000 fa4f 	bl	8000f40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40001400 	.word	0x40001400

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_MspInit+0x38>)
 8000ac4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_MspInit+0x38>)
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_MspInit+0x38>)
 8000ad4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	210f      	movs	r1, #15
 8000ae4:	f06f 0001 	mvn.w	r0, #1
 8000ae8:	f000 fb02 	bl	80010f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	58024400 	.word	0x58024400

08000af8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b090      	sub	sp, #64	; 0x40
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b0f      	cmp	r3, #15
 8000b04:	d827      	bhi.n	8000b56 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000b06:	2200      	movs	r2, #0
 8000b08:	6879      	ldr	r1, [r7, #4]
 8000b0a:	2037      	movs	r0, #55	; 0x37
 8000b0c:	f000 faf0 	bl	80010f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b10:	2037      	movs	r0, #55	; 0x37
 8000b12:	f000 fb07 	bl	8001124 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000b16:	4a29      	ldr	r2, [pc, #164]	; (8000bbc <HAL_InitTick+0xc4>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000b1c:	4b28      	ldr	r3, [pc, #160]	; (8000bc0 <HAL_InitTick+0xc8>)
 8000b1e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b22:	4a27      	ldr	r2, [pc, #156]	; (8000bc0 <HAL_InitTick+0xc8>)
 8000b24:	f043 0320 	orr.w	r3, r3, #32
 8000b28:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000b2c:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <HAL_InitTick+0xc8>)
 8000b2e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b32:	f003 0320 	and.w	r3, r3, #32
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b3a:	f107 0210 	add.w	r2, r7, #16
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4611      	mov	r1, r2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f001 fcaf 	bl	80024a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d106      	bne.n	8000b62 <HAL_InitTick+0x6a>
 8000b54:	e001      	b.n	8000b5a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e02b      	b.n	8000bb2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b5a:	f001 fc79 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 8000b5e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000b60:	e004      	b.n	8000b6c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b62:	f001 fc75 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 8000b66:	4603      	mov	r3, r0
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b6e:	4a15      	ldr	r2, [pc, #84]	; (8000bc4 <HAL_InitTick+0xcc>)
 8000b70:	fba2 2303 	umull	r2, r3, r2, r3
 8000b74:	0c9b      	lsrs	r3, r3, #18
 8000b76:	3b01      	subs	r3, #1
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_InitTick+0xd0>)
 8000b7c:	4a13      	ldr	r2, [pc, #76]	; (8000bcc <HAL_InitTick+0xd4>)
 8000b7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_InitTick+0xd0>)
 8000b82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b86:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000b88:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <HAL_InitTick+0xd0>)
 8000b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b8c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_InitTick+0xd0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_InitTick+0xd0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000b9a:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <HAL_InitTick+0xd0>)
 8000b9c:	f002 fff4 	bl	8003b88 <HAL_TIM_Base_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d104      	bne.n	8000bb0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000ba6:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <HAL_InitTick+0xd0>)
 8000ba8:	f003 f850 	bl	8003c4c <HAL_TIM_Base_Start_IT>
 8000bac:	4603      	mov	r3, r0
 8000bae:	e000      	b.n	8000bb2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3740      	adds	r7, #64	; 0x40
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	24000008 	.word	0x24000008
 8000bc0:	58024400 	.word	0x58024400
 8000bc4:	431bde83 	.word	0x431bde83
 8000bc8:	24004af0 	.word	0x24004af0
 8000bcc:	40001400 	.word	0x40001400

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <TIM7_IRQHandler+0x10>)
 8000c02:	f003 f89b 	bl	8003d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	24004af0 	.word	0x24004af0

08000c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c14:	4b32      	ldr	r3, [pc, #200]	; (8000ce0 <SystemInit+0xd0>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1a:	4a31      	ldr	r2, [pc, #196]	; (8000ce0 <SystemInit+0xd0>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c24:	4b2f      	ldr	r3, [pc, #188]	; (8000ce4 <SystemInit+0xd4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 030f 	and.w	r3, r3, #15
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d807      	bhi.n	8000c40 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c30:	4b2c      	ldr	r3, [pc, #176]	; (8000ce4 <SystemInit+0xd4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f023 030f 	bic.w	r3, r3, #15
 8000c38:	4a2a      	ldr	r2, [pc, #168]	; (8000ce4 <SystemInit+0xd4>)
 8000c3a:	f043 0303 	orr.w	r3, r3, #3
 8000c3e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c40:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <SystemInit+0xd8>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a28      	ldr	r2, [pc, #160]	; (8000ce8 <SystemInit+0xd8>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c4c:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <SystemInit+0xd8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c52:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <SystemInit+0xd8>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	4924      	ldr	r1, [pc, #144]	; (8000ce8 <SystemInit+0xd8>)
 8000c58:	4b24      	ldr	r3, [pc, #144]	; (8000cec <SystemInit+0xdc>)
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <SystemInit+0xd4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 030c 	and.w	r3, r3, #12
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d007      	beq.n	8000c7a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <SystemInit+0xd4>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f023 030f 	bic.w	r3, r3, #15
 8000c72:	4a1c      	ldr	r2, [pc, #112]	; (8000ce4 <SystemInit+0xd4>)
 8000c74:	f043 0303 	orr.w	r3, r3, #3
 8000c78:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <SystemInit+0xd8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <SystemInit+0xd8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <SystemInit+0xd8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <SystemInit+0xd8>)
 8000c8e:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <SystemInit+0xe0>)
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <SystemInit+0xd8>)
 8000c94:	4a17      	ldr	r2, [pc, #92]	; (8000cf4 <SystemInit+0xe4>)
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <SystemInit+0xd8>)
 8000c9a:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <SystemInit+0xe8>)
 8000c9c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <SystemInit+0xd8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <SystemInit+0xd8>)
 8000ca6:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <SystemInit+0xe8>)
 8000ca8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <SystemInit+0xd8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <SystemInit+0xd8>)
 8000cb2:	4a11      	ldr	r2, [pc, #68]	; (8000cf8 <SystemInit+0xe8>)
 8000cb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <SystemInit+0xd8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <SystemInit+0xd8>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <SystemInit+0xd8>)
 8000cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <SystemInit+0xd8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <SystemInit+0xec>)
 8000cd0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000cd4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00
 8000ce4:	52002000 	.word	0x52002000
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cf0:	02020200 	.word	0x02020200
 8000cf4:	01ff0000 	.word	0x01ff0000
 8000cf8:	01010280 	.word	0x01010280
 8000cfc:	52004000 	.word	0x52004000

08000d00 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d04:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d06:	4a23      	ldr	r2, [pc, #140]	; (8000d94 <MX_USART3_UART_Init+0x94>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2a:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d36:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d48:	4811      	ldr	r0, [pc, #68]	; (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d4a:	f003 f9f7 	bl	800413c <HAL_UART_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d54:	f7ff feac 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d58:	2100      	movs	r1, #0
 8000d5a:	480d      	ldr	r0, [pc, #52]	; (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d5c:	f004 fbf4 	bl	8005548 <HAL_UARTEx_SetTxFifoThreshold>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d66:	f7ff fea3 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4808      	ldr	r0, [pc, #32]	; (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d6e:	f004 fc29 	bl	80055c4 <HAL_UARTEx_SetRxFifoThreshold>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d78:	f7ff fe9a 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d7c:	4804      	ldr	r0, [pc, #16]	; (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d7e:	f004 fbaa 	bl	80054d6 <HAL_UARTEx_DisableFifoMode>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d88:	f7ff fe92 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	24004b3c 	.word	0x24004b3c
 8000d94:	40004800 	.word	0x40004800

08000d98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0b8      	sub	sp, #224	; 0xe0
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	22b8      	movs	r2, #184	; 0xb8
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f007 fb2b 	bl	8008414 <memset>
  if(uartHandle->Instance==USART3)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a25      	ldr	r2, [pc, #148]	; (8000e58 <HAL_UART_MspInit+0xc0>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d142      	bne.n	8000e4e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 fba8 	bl	800252c <HAL_RCCEx_PeriphCLKConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000de2:	f7ff fe65 	bl	8000ab0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000de6:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <HAL_UART_MspInit+0xc4>)
 8000de8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000dec:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <HAL_UART_MspInit+0xc4>)
 8000dee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_UART_MspInit+0xc4>)
 8000df8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <HAL_UART_MspInit+0xc4>)
 8000e06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e0a:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <HAL_UART_MspInit+0xc4>)
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_UART_MspInit+0xc4>)
 8000e16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e3c:	2307      	movs	r3, #7
 8000e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e42:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <HAL_UART_MspInit+0xc8>)
 8000e4a:	f000 f979 	bl	8001140 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e4e:	bf00      	nop
 8000e50:	37e0      	adds	r7, #224	; 0xe0
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40004800 	.word	0x40004800
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	58020c00 	.word	0x58020c00

08000e64 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e78:	f7ff feca 	bl	8000c10 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e7e:	490d      	ldr	r1, [pc, #52]	; (8000eb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e94:	4c0a      	ldr	r4, [pc, #40]	; (8000ec0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f007 fa83 	bl	80083ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fd6f 	bl	8000988 <main>
  bx  lr
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eac:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000eb0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000eb4:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000eb8:	08008798 	.word	0x08008798
  ldr r2, =_sbss
 8000ebc:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000ec0:	24004c1c 	.word	0x24004c1c

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ece:	2003      	movs	r0, #3
 8000ed0:	f000 f903 	bl	80010da <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000ed4:	f001 f912 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_Init+0x68>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	0a1b      	lsrs	r3, r3, #8
 8000ee0:	f003 030f 	and.w	r3, r3, #15
 8000ee4:	4913      	ldr	r1, [pc, #76]	; (8000f34 <HAL_Init+0x6c>)
 8000ee6:	5ccb      	ldrb	r3, [r1, r3]
 8000ee8:	f003 031f 	and.w	r3, r3, #31
 8000eec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <HAL_Init+0x68>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <HAL_Init+0x6c>)
 8000efc:	5cd3      	ldrb	r3, [r2, r3]
 8000efe:	f003 031f 	and.w	r3, r3, #31
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	fa22 f303 	lsr.w	r3, r2, r3
 8000f08:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <HAL_Init+0x70>)
 8000f0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f0c:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <HAL_Init+0x74>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f12:	200f      	movs	r0, #15
 8000f14:	f7ff fdf0 	bl	8000af8 <HAL_InitTick>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e002      	b.n	8000f28 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f22:	f7ff fdcb 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	58024400 	.word	0x58024400
 8000f34:	080086f0 	.word	0x080086f0
 8000f38:	24000004 	.word	0x24000004
 8000f3c:	24000000 	.word	0x24000000

08000f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x20>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x24>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_IncTick+0x24>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	2400000c 	.word	0x2400000c
 8000f64:	24004bcc 	.word	0x24004bcc

08000f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <HAL_GetTick+0x14>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	24004bcc 	.word	0x24004bcc

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	4313      	orrs	r3, r2
 8000fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00
 8000fc4:	05fa0000 	.word	0x05fa0000

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	db0b      	blt.n	800100e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	f003 021f 	and.w	r2, r3, #31
 8000ffc:	4907      	ldr	r1, [pc, #28]	; (800101c <__NVIC_EnableIRQ+0x38>)
 8000ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	2001      	movs	r0, #1
 8001006:	fa00 f202 	lsl.w	r2, r0, r2
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ff4c 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010fe:	f7ff ff63 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 8001102:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	68b9      	ldr	r1, [r7, #8]
 8001108:	6978      	ldr	r0, [r7, #20]
 800110a:	f7ff ffb3 	bl	8001074 <NVIC_EncodePriority>
 800110e:	4602      	mov	r2, r0
 8001110:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001114:	4611      	mov	r1, r2
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff82 	bl	8001020 <__NVIC_SetPriority>
}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800112e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff56 	bl	8000fe4 <__NVIC_EnableIRQ>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800114e:	4b89      	ldr	r3, [pc, #548]	; (8001374 <HAL_GPIO_Init+0x234>)
 8001150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001152:	e194      	b.n	800147e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2101      	movs	r1, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 8186 	beq.w	8001478 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b01      	cmp	r3, #1
 8001176:	d005      	beq.n	8001184 <HAL_GPIO_Init+0x44>
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d130      	bne.n	80011e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ba:	2201      	movs	r2, #1
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	091b      	lsrs	r3, r3, #4
 80011d0:	f003 0201 	and.w	r2, r3, #1
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d017      	beq.n	8001222 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d123      	bne.n	8001276 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	220f      	movs	r2, #15
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	691a      	ldr	r2, [r3, #16]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	69b9      	ldr	r1, [r7, #24]
 8001272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	2203      	movs	r2, #3
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0203 	and.w	r2, r3, #3
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 80e0 	beq.w	8001478 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b8:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <HAL_GPIO_Init+0x238>)
 80012ba:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80012be:	4a2e      	ldr	r2, [pc, #184]	; (8001378 <HAL_GPIO_Init+0x238>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80012c8:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <HAL_GPIO_Init+0x238>)
 80012ca:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012d6:	4a29      	ldr	r2, [pc, #164]	; (800137c <HAL_GPIO_Init+0x23c>)
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3302      	adds	r3, #2
 80012de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	220f      	movs	r2, #15
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a20      	ldr	r2, [pc, #128]	; (8001380 <HAL_GPIO_Init+0x240>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d052      	beq.n	80013a8 <HAL_GPIO_Init+0x268>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a1f      	ldr	r2, [pc, #124]	; (8001384 <HAL_GPIO_Init+0x244>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d031      	beq.n	800136e <HAL_GPIO_Init+0x22e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a1e      	ldr	r2, [pc, #120]	; (8001388 <HAL_GPIO_Init+0x248>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d02b      	beq.n	800136a <HAL_GPIO_Init+0x22a>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a1d      	ldr	r2, [pc, #116]	; (800138c <HAL_GPIO_Init+0x24c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d025      	beq.n	8001366 <HAL_GPIO_Init+0x226>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a1c      	ldr	r2, [pc, #112]	; (8001390 <HAL_GPIO_Init+0x250>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d01f      	beq.n	8001362 <HAL_GPIO_Init+0x222>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <HAL_GPIO_Init+0x254>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d019      	beq.n	800135e <HAL_GPIO_Init+0x21e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a1a      	ldr	r2, [pc, #104]	; (8001398 <HAL_GPIO_Init+0x258>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_GPIO_Init+0x21a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a19      	ldr	r2, [pc, #100]	; (800139c <HAL_GPIO_Init+0x25c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00d      	beq.n	8001356 <HAL_GPIO_Init+0x216>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a18      	ldr	r2, [pc, #96]	; (80013a0 <HAL_GPIO_Init+0x260>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d007      	beq.n	8001352 <HAL_GPIO_Init+0x212>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <HAL_GPIO_Init+0x264>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_GPIO_Init+0x20e>
 800134a:	2309      	movs	r3, #9
 800134c:	e02d      	b.n	80013aa <HAL_GPIO_Init+0x26a>
 800134e:	230a      	movs	r3, #10
 8001350:	e02b      	b.n	80013aa <HAL_GPIO_Init+0x26a>
 8001352:	2308      	movs	r3, #8
 8001354:	e029      	b.n	80013aa <HAL_GPIO_Init+0x26a>
 8001356:	2307      	movs	r3, #7
 8001358:	e027      	b.n	80013aa <HAL_GPIO_Init+0x26a>
 800135a:	2306      	movs	r3, #6
 800135c:	e025      	b.n	80013aa <HAL_GPIO_Init+0x26a>
 800135e:	2305      	movs	r3, #5
 8001360:	e023      	b.n	80013aa <HAL_GPIO_Init+0x26a>
 8001362:	2304      	movs	r3, #4
 8001364:	e021      	b.n	80013aa <HAL_GPIO_Init+0x26a>
 8001366:	2303      	movs	r3, #3
 8001368:	e01f      	b.n	80013aa <HAL_GPIO_Init+0x26a>
 800136a:	2302      	movs	r3, #2
 800136c:	e01d      	b.n	80013aa <HAL_GPIO_Init+0x26a>
 800136e:	2301      	movs	r3, #1
 8001370:	e01b      	b.n	80013aa <HAL_GPIO_Init+0x26a>
 8001372:	bf00      	nop
 8001374:	58000080 	.word	0x58000080
 8001378:	58024400 	.word	0x58024400
 800137c:	58000400 	.word	0x58000400
 8001380:	58020000 	.word	0x58020000
 8001384:	58020400 	.word	0x58020400
 8001388:	58020800 	.word	0x58020800
 800138c:	58020c00 	.word	0x58020c00
 8001390:	58021000 	.word	0x58021000
 8001394:	58021400 	.word	0x58021400
 8001398:	58021800 	.word	0x58021800
 800139c:	58021c00 	.word	0x58021c00
 80013a0:	58022000 	.word	0x58022000
 80013a4:	58022400 	.word	0x58022400
 80013a8:	2300      	movs	r3, #0
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	f002 0203 	and.w	r2, r2, #3
 80013b0:	0092      	lsls	r2, r2, #2
 80013b2:	4093      	lsls	r3, r2
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ba:	4938      	ldr	r1, [pc, #224]	; (800149c <HAL_GPIO_Init+0x35c>)
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	3302      	adds	r3, #2
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80013ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800141c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	3301      	adds	r3, #1
 800147c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	fa22 f303 	lsr.w	r3, r2, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	f47f ae63 	bne.w	8001154 <HAL_GPIO_Init+0x14>
  }
}
 800148e:	bf00      	nop
 8001490:	bf00      	nop
 8001492:	3724      	adds	r7, #36	; 0x24
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	58000400 	.word	0x58000400

080014a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]
 80014ac:	4613      	mov	r3, r2
 80014ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b0:	787b      	ldrb	r3, [r7, #1]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80014bc:	e003      	b.n	80014c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	041a      	lsls	r2, r3, #16
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	619a      	str	r2, [r3, #24]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80014dc:	4b29      	ldr	r3, [pc, #164]	; (8001584 <HAL_PWREx_ConfigSupply+0xb0>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	2b06      	cmp	r3, #6
 80014e6:	d00a      	beq.n	80014fe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80014e8:	4b26      	ldr	r3, [pc, #152]	; (8001584 <HAL_PWREx_ConfigSupply+0xb0>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d001      	beq.n	80014fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e040      	b.n	800157c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e03e      	b.n	800157c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80014fe:	4b21      	ldr	r3, [pc, #132]	; (8001584 <HAL_PWREx_ConfigSupply+0xb0>)
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001506:	491f      	ldr	r1, [pc, #124]	; (8001584 <HAL_PWREx_ConfigSupply+0xb0>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4313      	orrs	r3, r2
 800150c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800150e:	f7ff fd2b 	bl	8000f68 <HAL_GetTick>
 8001512:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001514:	e009      	b.n	800152a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001516:	f7ff fd27 	bl	8000f68 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001524:	d901      	bls.n	800152a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e028      	b.n	800157c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <HAL_PWREx_ConfigSupply+0xb0>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001536:	d1ee      	bne.n	8001516 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b1e      	cmp	r3, #30
 800153c:	d008      	beq.n	8001550 <HAL_PWREx_ConfigSupply+0x7c>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b2e      	cmp	r3, #46	; 0x2e
 8001542:	d005      	beq.n	8001550 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b1d      	cmp	r3, #29
 8001548:	d002      	beq.n	8001550 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b2d      	cmp	r3, #45	; 0x2d
 800154e:	d114      	bne.n	800157a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001550:	f7ff fd0a 	bl	8000f68 <HAL_GetTick>
 8001554:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001556:	e009      	b.n	800156c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001558:	f7ff fd06 	bl	8000f68 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001566:	d901      	bls.n	800156c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e007      	b.n	800157c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_PWREx_ConfigSupply+0xb0>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001578:	d1ee      	bne.n	8001558 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	58024800 	.word	0x58024800

08001588 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08c      	sub	sp, #48	; 0x30
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e3f3      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80b3 	beq.w	800170e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015a8:	4b9e      	ldr	r3, [pc, #632]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015b2:	4b9c      	ldr	r3, [pc, #624]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80015b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ba:	2b10      	cmp	r3, #16
 80015bc:	d007      	beq.n	80015ce <HAL_RCC_OscConfig+0x46>
 80015be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c0:	2b18      	cmp	r3, #24
 80015c2:	d112      	bne.n	80015ea <HAL_RCC_OscConfig+0x62>
 80015c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d10d      	bne.n	80015ea <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ce:	4b95      	ldr	r3, [pc, #596]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 8098 	beq.w	800170c <HAL_RCC_OscConfig+0x184>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f040 8093 	bne.w	800170c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e3cb      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f2:	d106      	bne.n	8001602 <HAL_RCC_OscConfig+0x7a>
 80015f4:	4b8b      	ldr	r3, [pc, #556]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a8a      	ldr	r2, [pc, #552]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 80015fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	e058      	b.n	80016b4 <HAL_RCC_OscConfig+0x12c>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d112      	bne.n	8001630 <HAL_RCC_OscConfig+0xa8>
 800160a:	4b86      	ldr	r3, [pc, #536]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a85      	ldr	r2, [pc, #532]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b83      	ldr	r3, [pc, #524]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a82      	ldr	r2, [pc, #520]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 800161c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4b80      	ldr	r3, [pc, #512]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a7f      	ldr	r2, [pc, #508]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e041      	b.n	80016b4 <HAL_RCC_OscConfig+0x12c>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001638:	d112      	bne.n	8001660 <HAL_RCC_OscConfig+0xd8>
 800163a:	4b7a      	ldr	r3, [pc, #488]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a79      	ldr	r2, [pc, #484]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b77      	ldr	r3, [pc, #476]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a76      	ldr	r2, [pc, #472]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 800164c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b74      	ldr	r3, [pc, #464]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a73      	ldr	r2, [pc, #460]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e029      	b.n	80016b4 <HAL_RCC_OscConfig+0x12c>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001668:	d112      	bne.n	8001690 <HAL_RCC_OscConfig+0x108>
 800166a:	4b6e      	ldr	r3, [pc, #440]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a6d      	ldr	r2, [pc, #436]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	4b6b      	ldr	r3, [pc, #428]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6a      	ldr	r2, [pc, #424]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 800167c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b68      	ldr	r3, [pc, #416]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a67      	ldr	r2, [pc, #412]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e011      	b.n	80016b4 <HAL_RCC_OscConfig+0x12c>
 8001690:	4b64      	ldr	r3, [pc, #400]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a63      	ldr	r2, [pc, #396]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b61      	ldr	r3, [pc, #388]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a60      	ldr	r2, [pc, #384]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 80016a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b5e      	ldr	r3, [pc, #376]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a5d      	ldr	r2, [pc, #372]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 80016ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d013      	beq.n	80016e4 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff fc54 	bl	8000f68 <HAL_GetTick>
 80016c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff fc50 	bl	8000f68 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	; 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e355      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016d6:	4b53      	ldr	r3, [pc, #332]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x13c>
 80016e2:	e014      	b.n	800170e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fc40 	bl	8000f68 <HAL_GetTick>
 80016e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff fc3c 	bl	8000f68 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	; 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e341      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016fe:	4b49      	ldr	r3, [pc, #292]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x164>
 800170a:	e000      	b.n	800170e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 808c 	beq.w	8001834 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800171c:	4b41      	ldr	r3, [pc, #260]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001724:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001726:	4b3f      	ldr	r3, [pc, #252]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d007      	beq.n	8001742 <HAL_RCC_OscConfig+0x1ba>
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	2b18      	cmp	r3, #24
 8001736:	d137      	bne.n	80017a8 <HAL_RCC_OscConfig+0x220>
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d132      	bne.n	80017a8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001742:	4b38      	ldr	r3, [pc, #224]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <HAL_RCC_OscConfig+0x1d2>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e313      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800175a:	4b32      	ldr	r3, [pc, #200]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 0219 	bic.w	r2, r3, #25
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	492f      	ldr	r1, [pc, #188]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001768:	4313      	orrs	r3, r2
 800176a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800176c:	f7ff fbfc 	bl	8000f68 <HAL_GetTick>
 8001770:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001774:	f7ff fbf8 	bl	8000f68 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e2fd      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001786:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	061b      	lsls	r3, r3, #24
 80017a0:	4920      	ldr	r1, [pc, #128]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017a6:	e045      	b.n	8001834 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d026      	beq.n	80017fe <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017b0:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f023 0219 	bic.w	r2, r3, #25
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4919      	ldr	r1, [pc, #100]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c2:	f7ff fbd1 	bl	8000f68 <HAL_GetTick>
 80017c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ca:	f7ff fbcd 	bl	8000f68 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e2d2      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	061b      	lsls	r3, r3, #24
 80017f6:	490b      	ldr	r1, [pc, #44]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
 80017fc:	e01a      	b.n	8001834 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a08      	ldr	r2, [pc, #32]	; (8001824 <HAL_RCC_OscConfig+0x29c>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180a:	f7ff fbad 	bl	8000f68 <HAL_GetTick>
 800180e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001810:	e00a      	b.n	8001828 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001812:	f7ff fba9 	bl	8000f68 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d903      	bls.n	8001828 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e2ae      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
 8001824:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001828:	4b99      	ldr	r3, [pc, #612]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1ee      	bne.n	8001812 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2b00      	cmp	r3, #0
 800183e:	d06a      	beq.n	8001916 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001840:	4b93      	ldr	r3, [pc, #588]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001848:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800184a:	4b91      	ldr	r3, [pc, #580]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2b08      	cmp	r3, #8
 8001854:	d007      	beq.n	8001866 <HAL_RCC_OscConfig+0x2de>
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2b18      	cmp	r3, #24
 800185a:	d11b      	bne.n	8001894 <HAL_RCC_OscConfig+0x30c>
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	2b01      	cmp	r3, #1
 8001864:	d116      	bne.n	8001894 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001866:	4b8a      	ldr	r3, [pc, #552]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <HAL_RCC_OscConfig+0x2f6>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	2b80      	cmp	r3, #128	; 0x80
 8001878:	d001      	beq.n	800187e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e281      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800187e:	4b84      	ldr	r3, [pc, #528]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	061b      	lsls	r3, r3, #24
 800188c:	4980      	ldr	r1, [pc, #512]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 800188e:	4313      	orrs	r3, r2
 8001890:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001892:	e040      	b.n	8001916 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d023      	beq.n	80018e4 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800189c:	4b7c      	ldr	r3, [pc, #496]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a7b      	ldr	r2, [pc, #492]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 80018a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff fb5e 	bl	8000f68 <HAL_GetTick>
 80018ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80018b0:	f7ff fb5a 	bl	8000f68 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e25f      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018c2:	4b73      	ldr	r3, [pc, #460]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018ce:	4b70      	ldr	r3, [pc, #448]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	061b      	lsls	r3, r3, #24
 80018dc:	496c      	ldr	r1, [pc, #432]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	60cb      	str	r3, [r1, #12]
 80018e2:	e018      	b.n	8001916 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018e4:	4b6a      	ldr	r3, [pc, #424]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a69      	ldr	r2, [pc, #420]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 80018ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff fb3a 	bl	8000f68 <HAL_GetTick>
 80018f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80018f8:	f7ff fb36 	bl	8000f68 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e23b      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800190a:	4b61      	ldr	r3, [pc, #388]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d036      	beq.n	8001990 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d019      	beq.n	800195e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192a:	4b59      	ldr	r3, [pc, #356]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 800192c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800192e:	4a58      	ldr	r2, [pc, #352]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001936:	f7ff fb17 	bl	8000f68 <HAL_GetTick>
 800193a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193e:	f7ff fb13 	bl	8000f68 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e218      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001950:	4b4f      	ldr	r3, [pc, #316]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 8001952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x3b6>
 800195c:	e018      	b.n	8001990 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800195e:	4b4c      	ldr	r3, [pc, #304]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 8001960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001962:	4a4b      	ldr	r2, [pc, #300]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196a:	f7ff fafd 	bl	8000f68 <HAL_GetTick>
 800196e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001972:	f7ff faf9 	bl	8000f68 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e1fe      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001984:	4b42      	ldr	r3, [pc, #264]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 8001986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0320 	and.w	r3, r3, #32
 8001998:	2b00      	cmp	r3, #0
 800199a:	d036      	beq.n	8001a0a <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d019      	beq.n	80019d8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019a4:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a39      	ldr	r2, [pc, #228]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 80019aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019b0:	f7ff fada 	bl	8000f68 <HAL_GetTick>
 80019b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80019b8:	f7ff fad6 	bl	8000f68 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e1db      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019ca:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x430>
 80019d6:	e018      	b.n	8001a0a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019d8:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a2c      	ldr	r2, [pc, #176]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 80019de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019e4:	f7ff fac0 	bl	8000f68 <HAL_GetTick>
 80019e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80019ec:	f7ff fabc 	bl	8000f68 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e1c1      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019fe:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 80af 	beq.w	8001b76 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a18:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <HAL_RCC_OscConfig+0x50c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <HAL_RCC_OscConfig+0x50c>)
 8001a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a24:	f7ff faa0 	bl	8000f68 <HAL_GetTick>
 8001a28:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a2c:	f7ff fa9c 	bl	8000f68 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	; 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e1a1      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_RCC_OscConfig+0x50c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d106      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4d8>
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 8001a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a56:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5e:	e05b      	b.n	8001b18 <HAL_RCC_OscConfig+0x590>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d117      	bne.n	8001a98 <HAL_RCC_OscConfig+0x510>
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 8001a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6c:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 8001a6e:	f023 0301 	bic.w	r3, r3, #1
 8001a72:	6713      	str	r3, [r2, #112]	; 0x70
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 8001a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a78:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 8001a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a84:	4a02      	ldr	r2, [pc, #8]	; (8001a90 <HAL_RCC_OscConfig+0x508>)
 8001a86:	f023 0304 	bic.w	r3, r3, #4
 8001a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a8c:	e044      	b.n	8001b18 <HAL_RCC_OscConfig+0x590>
 8001a8e:	bf00      	nop
 8001a90:	58024400 	.word	0x58024400
 8001a94:	58024800 	.word	0x58024800
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d112      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x53e>
 8001aa0:	4b95      	ldr	r3, [pc, #596]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa4:	4a94      	ldr	r2, [pc, #592]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001aa6:	f043 0304 	orr.w	r3, r3, #4
 8001aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8001aac:	4b92      	ldr	r3, [pc, #584]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab0:	4a91      	ldr	r2, [pc, #580]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab8:	4b8f      	ldr	r3, [pc, #572]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abc:	4a8e      	ldr	r2, [pc, #568]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac4:	e028      	b.n	8001b18 <HAL_RCC_OscConfig+0x590>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b85      	cmp	r3, #133	; 0x85
 8001acc:	d112      	bne.n	8001af4 <HAL_RCC_OscConfig+0x56c>
 8001ace:	4b8a      	ldr	r3, [pc, #552]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad2:	4a89      	ldr	r2, [pc, #548]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8001ada:	4b87      	ldr	r3, [pc, #540]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ade:	4a86      	ldr	r2, [pc, #536]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae6:	4b84      	ldr	r3, [pc, #528]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aea:	4a83      	ldr	r2, [pc, #524]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6713      	str	r3, [r2, #112]	; 0x70
 8001af2:	e011      	b.n	8001b18 <HAL_RCC_OscConfig+0x590>
 8001af4:	4b80      	ldr	r3, [pc, #512]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af8:	4a7f      	ldr	r2, [pc, #508]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	6713      	str	r3, [r2, #112]	; 0x70
 8001b00:	4b7d      	ldr	r3, [pc, #500]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b04:	4a7c      	ldr	r2, [pc, #496]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001b06:	f023 0304 	bic.w	r3, r3, #4
 8001b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0c:	4b7a      	ldr	r3, [pc, #488]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b10:	4a79      	ldr	r2, [pc, #484]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d015      	beq.n	8001b4c <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b20:	f7ff fa22 	bl	8000f68 <HAL_GetTick>
 8001b24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b26:	e00a      	b.n	8001b3e <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b28:	f7ff fa1e 	bl	8000f68 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e121      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b3e:	4b6e      	ldr	r3, [pc, #440]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0ee      	beq.n	8001b28 <HAL_RCC_OscConfig+0x5a0>
 8001b4a:	e014      	b.n	8001b76 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4c:	f7ff fa0c 	bl	8000f68 <HAL_GetTick>
 8001b50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b54:	f7ff fa08 	bl	8000f68 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e10b      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b6a:	4b63      	ldr	r3, [pc, #396]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1ee      	bne.n	8001b54 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8100 	beq.w	8001d80 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b80:	4b5d      	ldr	r3, [pc, #372]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b88:	2b18      	cmp	r3, #24
 8001b8a:	f000 80bb 	beq.w	8001d04 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	f040 8095 	bne.w	8001cc2 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b98:	4b57      	ldr	r3, [pc, #348]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a56      	ldr	r2, [pc, #344]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff f9e0 	bl	8000f68 <HAL_GetTick>
 8001ba8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bac:	f7ff f9dc 	bl	8000f68 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e0e1      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bbe:	4b4e      	ldr	r3, [pc, #312]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bca:	4b4b      	ldr	r3, [pc, #300]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bce:	4b4b      	ldr	r3, [pc, #300]	; (8001cfc <HAL_RCC_OscConfig+0x774>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bda:	0112      	lsls	r2, r2, #4
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	4946      	ldr	r1, [pc, #280]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	628b      	str	r3, [r1, #40]	; 0x28
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	3b01      	subs	r3, #1
 8001bea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	025b      	lsls	r3, r3, #9
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	041b      	lsls	r3, r3, #16
 8001c02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	061b      	lsls	r3, r3, #24
 8001c10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c14:	4938      	ldr	r1, [pc, #224]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001c1a:	4b37      	ldr	r3, [pc, #220]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	4a36      	ldr	r2, [pc, #216]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c26:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2a:	4b35      	ldr	r3, [pc, #212]	; (8001d00 <HAL_RCC_OscConfig+0x778>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c32:	00d2      	lsls	r2, r2, #3
 8001c34:	4930      	ldr	r1, [pc, #192]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c3a:	4b2f      	ldr	r3, [pc, #188]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	f023 020c 	bic.w	r2, r3, #12
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	492c      	ldr	r1, [pc, #176]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c4c:	4b2a      	ldr	r3, [pc, #168]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	f023 0202 	bic.w	r2, r3, #2
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	4927      	ldr	r1, [pc, #156]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c5e:	4b26      	ldr	r3, [pc, #152]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	4a25      	ldr	r2, [pc, #148]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c6a:	4b23      	ldr	r3, [pc, #140]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	4a22      	ldr	r2, [pc, #136]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c76:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	4a1f      	ldr	r2, [pc, #124]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c86:	4a1c      	ldr	r2, [pc, #112]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a19      	ldr	r2, [pc, #100]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001c94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9a:	f7ff f965 	bl	8000f68 <HAL_GetTick>
 8001c9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca2:	f7ff f961 	bl	8000f68 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e066      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cb4:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x71a>
 8001cc0:	e05e      	b.n	8001d80 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a0c      	ldr	r2, [pc, #48]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001cc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cce:	f7ff f94b 	bl	8000f68 <HAL_GetTick>
 8001cd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7ff f947 	bl	8000f68 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e04c      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f0      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x74e>
 8001cf4:	e044      	b.n	8001d80 <HAL_RCC_OscConfig+0x7f8>
 8001cf6:	bf00      	nop
 8001cf8:	58024400 	.word	0x58024400
 8001cfc:	fffffc0c 	.word	0xfffffc0c
 8001d00:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d04:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_RCC_OscConfig+0x804>)
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HAL_RCC_OscConfig+0x804>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d031      	beq.n	8001d7c <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	f003 0203 	and.w	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d12a      	bne.n	8001d7c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d122      	bne.n	8001d7c <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d11a      	bne.n	8001d7c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	0a5b      	lsrs	r3, r3, #9
 8001d4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d52:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d111      	bne.n	8001d7c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	0c1b      	lsrs	r3, r3, #16
 8001d5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d64:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d108      	bne.n	8001d7c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	0e1b      	lsrs	r3, r3, #24
 8001d6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d76:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3730      	adds	r7, #48	; 0x30
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	58024400 	.word	0x58024400

08001d90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e19c      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da4:	4b8a      	ldr	r3, [pc, #552]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d910      	bls.n	8001dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b87      	ldr	r3, [pc, #540]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 020f 	bic.w	r2, r3, #15
 8001dba:	4985      	ldr	r1, [pc, #532]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b83      	ldr	r3, [pc, #524]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e184      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d010      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	4b7b      	ldr	r3, [pc, #492]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d908      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001df0:	4b78      	ldr	r3, [pc, #480]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	4975      	ldr	r1, [pc, #468]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d010      	beq.n	8001e30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	4b70      	ldr	r3, [pc, #448]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d908      	bls.n	8001e30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e1e:	4b6d      	ldr	r3, [pc, #436]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	496a      	ldr	r1, [pc, #424]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699a      	ldr	r2, [r3, #24]
 8001e40:	4b64      	ldr	r3, [pc, #400]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d908      	bls.n	8001e5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e4c:	4b61      	ldr	r3, [pc, #388]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	495e      	ldr	r1, [pc, #376]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d010      	beq.n	8001e8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	4b59      	ldr	r3, [pc, #356]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d908      	bls.n	8001e8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e7a:	4b56      	ldr	r3, [pc, #344]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4953      	ldr	r1, [pc, #332]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d010      	beq.n	8001eba <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	4b4d      	ldr	r3, [pc, #308]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d908      	bls.n	8001eba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea8:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f023 020f 	bic.w	r2, r3, #15
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4947      	ldr	r1, [pc, #284]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d055      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ec6:	4b43      	ldr	r3, [pc, #268]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	4940      	ldr	r1, [pc, #256]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ee0:	4b3c      	ldr	r3, [pc, #240]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d121      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0f6      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d107      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ef8:	4b36      	ldr	r3, [pc, #216]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d115      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0ea      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d107      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f10:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d109      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0de      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f20:	4b2c      	ldr	r3, [pc, #176]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0d6      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f30:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	f023 0207 	bic.w	r2, r3, #7
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4925      	ldr	r1, [pc, #148]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f42:	f7ff f811 	bl	8000f68 <HAL_GetTick>
 8001f46:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4a:	f7ff f80d 	bl	8000f68 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e0be      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f60:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d1eb      	bne.n	8001f4a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d010      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d208      	bcs.n	8001fa0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8e:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f023 020f 	bic.w	r2, r3, #15
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	490e      	ldr	r1, [pc, #56]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d214      	bcs.n	8001fd8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 020f 	bic.w	r2, r3, #15
 8001fb6:	4906      	ldr	r1, [pc, #24]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e086      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
 8001fd0:	52002000 	.word	0x52002000
 8001fd4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d010      	beq.n	8002006 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	4b3f      	ldr	r3, [pc, #252]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d208      	bcs.n	8002006 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ff4:	4b3c      	ldr	r3, [pc, #240]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	4939      	ldr	r1, [pc, #228]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002002:	4313      	orrs	r3, r2
 8002004:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d010      	beq.n	8002034 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	4b34      	ldr	r3, [pc, #208]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800201e:	429a      	cmp	r2, r3
 8002020:	d208      	bcs.n	8002034 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002022:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	492e      	ldr	r1, [pc, #184]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002030:	4313      	orrs	r3, r2
 8002032:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b00      	cmp	r3, #0
 800203e:	d010      	beq.n	8002062 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699a      	ldr	r2, [r3, #24]
 8002044:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800204c:	429a      	cmp	r2, r3
 800204e:	d208      	bcs.n	8002062 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002050:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	4922      	ldr	r1, [pc, #136]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 800205e:	4313      	orrs	r3, r2
 8002060:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b00      	cmp	r3, #0
 800206c:	d010      	beq.n	8002090 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69da      	ldr	r2, [r3, #28]
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800207a:	429a      	cmp	r2, r3
 800207c:	d208      	bcs.n	8002090 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	4917      	ldr	r1, [pc, #92]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 800208c:	4313      	orrs	r3, r2
 800208e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002090:	f000 f834 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 8002094:	4602      	mov	r2, r0
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	4912      	ldr	r1, [pc, #72]	; (80020ec <HAL_RCC_ClockConfig+0x35c>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ac:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	4a0d      	ldr	r2, [pc, #52]	; (80020ec <HAL_RCC_ClockConfig+0x35c>)
 80020b8:	5cd3      	ldrb	r3, [r2, r3]
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
 80020c4:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <HAL_RCC_ClockConfig+0x360>)
 80020c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020c8:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <HAL_RCC_ClockConfig+0x364>)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_RCC_ClockConfig+0x368>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fd10 	bl	8000af8 <HAL_InitTick>
 80020d8:	4603      	mov	r3, r0
 80020da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	58024400 	.word	0x58024400
 80020ec:	080086f0 	.word	0x080086f0
 80020f0:	24000004 	.word	0x24000004
 80020f4:	24000000 	.word	0x24000000
 80020f8:	24000008 	.word	0x24000008

080020fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002102:	4bb3      	ldr	r3, [pc, #716]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800210a:	2b18      	cmp	r3, #24
 800210c:	f200 8155 	bhi.w	80023ba <HAL_RCC_GetSysClockFreq+0x2be>
 8002110:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002116:	bf00      	nop
 8002118:	0800217d 	.word	0x0800217d
 800211c:	080023bb 	.word	0x080023bb
 8002120:	080023bb 	.word	0x080023bb
 8002124:	080023bb 	.word	0x080023bb
 8002128:	080023bb 	.word	0x080023bb
 800212c:	080023bb 	.word	0x080023bb
 8002130:	080023bb 	.word	0x080023bb
 8002134:	080023bb 	.word	0x080023bb
 8002138:	080021a3 	.word	0x080021a3
 800213c:	080023bb 	.word	0x080023bb
 8002140:	080023bb 	.word	0x080023bb
 8002144:	080023bb 	.word	0x080023bb
 8002148:	080023bb 	.word	0x080023bb
 800214c:	080023bb 	.word	0x080023bb
 8002150:	080023bb 	.word	0x080023bb
 8002154:	080023bb 	.word	0x080023bb
 8002158:	080021a9 	.word	0x080021a9
 800215c:	080023bb 	.word	0x080023bb
 8002160:	080023bb 	.word	0x080023bb
 8002164:	080023bb 	.word	0x080023bb
 8002168:	080023bb 	.word	0x080023bb
 800216c:	080023bb 	.word	0x080023bb
 8002170:	080023bb 	.word	0x080023bb
 8002174:	080023bb 	.word	0x080023bb
 8002178:	080021af 	.word	0x080021af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800217c:	4b94      	ldr	r3, [pc, #592]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d009      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002188:	4b91      	ldr	r3, [pc, #580]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	08db      	lsrs	r3, r3, #3
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	4a90      	ldr	r2, [pc, #576]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800219a:	e111      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800219c:	4b8d      	ldr	r3, [pc, #564]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800219e:	61bb      	str	r3, [r7, #24]
    break;
 80021a0:	e10e      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80021a2:	4b8d      	ldr	r3, [pc, #564]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021a4:	61bb      	str	r3, [r7, #24]
    break;
 80021a6:	e10b      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80021a8:	4b8c      	ldr	r3, [pc, #560]	; (80023dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80021aa:	61bb      	str	r3, [r7, #24]
    break;
 80021ac:	e108      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021ae:	4b88      	ldr	r3, [pc, #544]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80021b8:	4b85      	ldr	r3, [pc, #532]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021c4:	4b82      	ldr	r3, [pc, #520]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80021ce:	4b80      	ldr	r3, [pc, #512]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d2:	08db      	lsrs	r3, r3, #3
 80021d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80e1 	beq.w	80023b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	f000 8083 	beq.w	8002300 <HAL_RCC_GetSysClockFreq+0x204>
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	f200 80a1 	bhi.w	8002344 <HAL_RCC_GetSysClockFreq+0x248>
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x114>
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d056      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800220e:	e099      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002210:	4b6f      	ldr	r3, [pc, #444]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b00      	cmp	r3, #0
 800221a:	d02d      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800221c:	4b6c      	ldr	r3, [pc, #432]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	4a6b      	ldr	r2, [pc, #428]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
 800222c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	ee07 3a90 	vmov	s15, r3
 8002234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	ee07 3a90 	vmov	s15, r3
 800223e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002246:	4b62      	ldr	r3, [pc, #392]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800224e:	ee07 3a90 	vmov	s15, r3
 8002252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002256:	ed97 6a02 	vldr	s12, [r7, #8]
 800225a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80023e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800225e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800226a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800226e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002272:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002276:	e087      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002282:	eddf 6a58 	vldr	s13, [pc, #352]	; 80023e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800228a:	4b51      	ldr	r3, [pc, #324]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002292:	ee07 3a90 	vmov	s15, r3
 8002296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800229a:	ed97 6a02 	vldr	s12, [r7, #8]
 800229e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80023e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022ba:	e065      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	ee07 3a90 	vmov	s15, r3
 80022c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80023e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80022ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ce:	4b40      	ldr	r3, [pc, #256]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d6:	ee07 3a90 	vmov	s15, r3
 80022da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022de:	ed97 6a02 	vldr	s12, [r7, #8]
 80022e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80023e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022fe:	e043      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	ee07 3a90 	vmov	s15, r3
 8002306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800230a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80023ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800230e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002312:	4b2f      	ldr	r3, [pc, #188]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800231a:	ee07 3a90 	vmov	s15, r3
 800231e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002322:	ed97 6a02 	vldr	s12, [r7, #8]
 8002326:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80023e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800232a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800232e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800233a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002342:	e021      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	ee07 3a90 	vmov	s15, r3
 800234a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800234e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80023e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002356:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800235e:	ee07 3a90 	vmov	s15, r3
 8002362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002366:	ed97 6a02 	vldr	s12, [r7, #8]
 800236a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80023e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800236e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800237a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800237e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002382:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002386:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	0a5b      	lsrs	r3, r3, #9
 800238e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002392:	3301      	adds	r3, #1
 8002394:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80023a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ac:	ee17 3a90 	vmov	r3, s15
 80023b0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80023b2:	e005      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
    break;
 80023b8:	e002      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80023ba:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023bc:	61bb      	str	r3, [r7, #24]
    break;
 80023be:	bf00      	nop
  }

  return sysclockfreq;
 80023c0:	69bb      	ldr	r3, [r7, #24]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	58024400 	.word	0x58024400
 80023d4:	03d09000 	.word	0x03d09000
 80023d8:	003d0900 	.word	0x003d0900
 80023dc:	007a1200 	.word	0x007a1200
 80023e0:	46000000 	.word	0x46000000
 80023e4:	4c742400 	.word	0x4c742400
 80023e8:	4a742400 	.word	0x4a742400
 80023ec:	4af42400 	.word	0x4af42400

080023f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80023f6:	f7ff fe81 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 80023fa:	4602      	mov	r2, r0
 80023fc:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_RCC_GetHCLKFreq+0x50>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	490f      	ldr	r1, [pc, #60]	; (8002444 <HAL_RCC_GetHCLKFreq+0x54>)
 8002408:	5ccb      	ldrb	r3, [r1, r3]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	fa22 f303 	lsr.w	r3, r2, r3
 8002412:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_RCC_GetHCLKFreq+0x50>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	4a09      	ldr	r2, [pc, #36]	; (8002444 <HAL_RCC_GetHCLKFreq+0x54>)
 800241e:	5cd3      	ldrb	r3, [r2, r3]
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	4a07      	ldr	r2, [pc, #28]	; (8002448 <HAL_RCC_GetHCLKFreq+0x58>)
 800242c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800242e:	4a07      	ldr	r2, [pc, #28]	; (800244c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <HAL_RCC_GetHCLKFreq+0x58>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	58024400 	.word	0x58024400
 8002444:	080086f0 	.word	0x080086f0
 8002448:	24000004 	.word	0x24000004
 800244c:	24000000 	.word	0x24000000

08002450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002454:	f7ff ffcc 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002458:	4602      	mov	r2, r0
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_RCC_GetPCLK1Freq+0x24>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	4904      	ldr	r1, [pc, #16]	; (8002478 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002466:	5ccb      	ldrb	r3, [r1, r3]
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002470:	4618      	mov	r0, r3
 8002472:	bd80      	pop	{r7, pc}
 8002474:	58024400 	.word	0x58024400
 8002478:	080086f0 	.word	0x080086f0

0800247c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002480:	f7ff ffb6 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002484:	4602      	mov	r2, r0
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	0a1b      	lsrs	r3, r3, #8
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	4904      	ldr	r1, [pc, #16]	; (80024a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002492:	5ccb      	ldrb	r3, [r1, r3]
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	58024400 	.word	0x58024400
 80024a4:	080086f0 	.word	0x080086f0

080024a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	223f      	movs	r2, #63	; 0x3f
 80024b6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024b8:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <HAL_RCC_GetClockConfig+0x7c>)
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f003 0207 	and.w	r2, r3, #7
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80024c4:	4b17      	ldr	r3, [pc, #92]	; (8002524 <HAL_RCC_GetClockConfig+0x7c>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 80024d0:	4b14      	ldr	r3, [pc, #80]	; (8002524 <HAL_RCC_GetClockConfig+0x7c>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f003 020f 	and.w	r2, r3, #15
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_RCC_GetClockConfig+0x7c>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80024e8:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <HAL_RCC_GetClockConfig+0x7c>)
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_GetClockConfig+0x7c>)
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <HAL_RCC_GetClockConfig+0x7c>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_GetClockConfig+0x80>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 020f 	and.w	r2, r3, #15
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	601a      	str	r2, [r3, #0]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	58024400 	.word	0x58024400
 8002528:	52002000 	.word	0x52002000

0800252c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002534:	2300      	movs	r3, #0
 8002536:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002538:	2300      	movs	r3, #0
 800253a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d03f      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800254c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002550:	d02a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002552:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002556:	d824      	bhi.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002558:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800255c:	d018      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800255e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002562:	d81e      	bhi.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800256c:	d007      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800256e:	e018      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002570:	4ba6      	ldr	r3, [pc, #664]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	4aa5      	ldr	r2, [pc, #660]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800257c:	e015      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3304      	adds	r3, #4
 8002582:	2102      	movs	r1, #2
 8002584:	4618      	mov	r0, r3
 8002586:	f001 f99b 	bl	80038c0 <RCCEx_PLL2_Config>
 800258a:	4603      	mov	r3, r0
 800258c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800258e:	e00c      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3324      	adds	r3, #36	; 0x24
 8002594:	2102      	movs	r1, #2
 8002596:	4618      	mov	r0, r3
 8002598:	f001 fa44 	bl	8003a24 <RCCEx_PLL3_Config>
 800259c:	4603      	mov	r3, r0
 800259e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80025a0:	e003      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	75fb      	strb	r3, [r7, #23]
      break;
 80025a6:	e000      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d109      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80025b0:	4b96      	ldr	r3, [pc, #600]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80025b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025bc:	4993      	ldr	r1, [pc, #588]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	650b      	str	r3, [r1, #80]	; 0x50
 80025c2:	e001      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
 80025c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d03d      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d826      	bhi.n	800262a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80025dc:	a201      	add	r2, pc, #4	; (adr r2, 80025e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80025de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e2:	bf00      	nop
 80025e4:	080025f9 	.word	0x080025f9
 80025e8:	08002607 	.word	0x08002607
 80025ec:	08002619 	.word	0x08002619
 80025f0:	08002631 	.word	0x08002631
 80025f4:	08002631 	.word	0x08002631
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025f8:	4b84      	ldr	r3, [pc, #528]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	4a83      	ldr	r2, [pc, #524]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80025fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002604:	e015      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3304      	adds	r3, #4
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f001 f957 	bl	80038c0 <RCCEx_PLL2_Config>
 8002612:	4603      	mov	r3, r0
 8002614:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002616:	e00c      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3324      	adds	r3, #36	; 0x24
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f001 fa00 	bl	8003a24 <RCCEx_PLL3_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002628:	e003      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	75fb      	strb	r3, [r7, #23]
      break;
 800262e:	e000      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002632:	7dfb      	ldrb	r3, [r7, #23]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d109      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002638:	4b74      	ldr	r3, [pc, #464]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800263a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263c:	f023 0207 	bic.w	r2, r3, #7
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002644:	4971      	ldr	r1, [pc, #452]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	650b      	str	r3, [r1, #80]	; 0x50
 800264a:	e001      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800264c:	7dfb      	ldrb	r3, [r7, #23]
 800264e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002658:	2b00      	cmp	r3, #0
 800265a:	d04a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002660:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002664:	d031      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8002666:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800266a:	d82b      	bhi.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800266c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002670:	d02d      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002676:	d825      	bhi.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002678:	2bc0      	cmp	r3, #192	; 0xc0
 800267a:	d02a      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800267c:	2bc0      	cmp	r3, #192	; 0xc0
 800267e:	d821      	bhi.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002680:	2b80      	cmp	r3, #128	; 0x80
 8002682:	d016      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002684:	2b80      	cmp	r3, #128	; 0x80
 8002686:	d81d      	bhi.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800268c:	2b40      	cmp	r3, #64	; 0x40
 800268e:	d007      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002690:	e018      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002692:	4b5e      	ldr	r3, [pc, #376]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	4a5d      	ldr	r2, [pc, #372]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800269e:	e019      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3304      	adds	r3, #4
 80026a4:	2100      	movs	r1, #0
 80026a6:	4618      	mov	r0, r3
 80026a8:	f001 f90a 	bl	80038c0 <RCCEx_PLL2_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80026b0:	e010      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3324      	adds	r3, #36	; 0x24
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f001 f9b3 	bl	8003a24 <RCCEx_PLL3_Config>
 80026be:	4603      	mov	r3, r0
 80026c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80026c2:	e007      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	75fb      	strb	r3, [r7, #23]
      break;
 80026c8:	e004      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80026ca:	bf00      	nop
 80026cc:	e002      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80026ce:	bf00      	nop
 80026d0:	e000      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80026d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80026da:	4b4c      	ldr	r3, [pc, #304]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026de:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e6:	4949      	ldr	r1, [pc, #292]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	650b      	str	r3, [r1, #80]	; 0x50
 80026ec:	e001      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ee:	7dfb      	ldrb	r3, [r7, #23]
 80026f0:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d04f      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002702:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002706:	d036      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002708:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800270c:	d830      	bhi.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800270e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002712:	d032      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002718:	d82a      	bhi.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800271a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800271e:	d02e      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002720:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002724:	d824      	bhi.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272a:	d018      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x232>
 800272c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002730:	d81e      	bhi.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800273a:	d007      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x220>
 800273c:	e018      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800273e:	4b33      	ldr	r3, [pc, #204]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002742:	4a32      	ldr	r2, [pc, #200]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002748:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800274a:	e019      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3304      	adds	r3, #4
 8002750:	2100      	movs	r1, #0
 8002752:	4618      	mov	r0, r3
 8002754:	f001 f8b4 	bl	80038c0 <RCCEx_PLL2_Config>
 8002758:	4603      	mov	r3, r0
 800275a:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800275c:	e010      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3324      	adds	r3, #36	; 0x24
 8002762:	2100      	movs	r1, #0
 8002764:	4618      	mov	r0, r3
 8002766:	f001 f95d 	bl	8003a24 <RCCEx_PLL3_Config>
 800276a:	4603      	mov	r3, r0
 800276c:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800276e:	e007      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	75fb      	strb	r3, [r7, #23]
      break;
 8002774:	e004      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002776:	bf00      	nop
 8002778:	e002      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800277a:	bf00      	nop
 800277c:	e000      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800277e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002780:	7dfb      	ldrb	r3, [r7, #23]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002786:	4b21      	ldr	r3, [pc, #132]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278a:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	491e      	ldr	r1, [pc, #120]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002794:	4313      	orrs	r3, r2
 8002796:	650b      	str	r3, [r1, #80]	; 0x50
 8002798:	e001      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800279a:	7dfb      	ldrb	r3, [r7, #23]
 800279c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d034      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ae:	2b30      	cmp	r3, #48	; 0x30
 80027b0:	d01c      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80027b2:	2b30      	cmp	r3, #48	; 0x30
 80027b4:	d817      	bhi.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80027b6:	2b20      	cmp	r3, #32
 80027b8:	d00c      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	d813      	bhi.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d016      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 80027c2:	2b10      	cmp	r3, #16
 80027c4:	d10f      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	4a10      	ldr	r2, [pc, #64]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80027d2:	e00e      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3304      	adds	r3, #4
 80027d8:	2102      	movs	r1, #2
 80027da:	4618      	mov	r0, r3
 80027dc:	f001 f870 	bl	80038c0 <RCCEx_PLL2_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80027e4:	e005      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	75fb      	strb	r3, [r7, #23]
      break;
 80027ea:	e002      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80027ec:	bf00      	nop
 80027ee:	e000      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80027f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027f2:	7dfb      	ldrb	r3, [r7, #23]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10b      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002804:	4901      	ldr	r1, [pc, #4]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002806:	4313      	orrs	r3, r2
 8002808:	64cb      	str	r3, [r1, #76]	; 0x4c
 800280a:	e003      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800280c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002810:	7dfb      	ldrb	r3, [r7, #23]
 8002812:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d047      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002828:	d030      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800282a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800282e:	d82a      	bhi.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002830:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002834:	d02c      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8002836:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800283a:	d824      	bhi.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800283c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002840:	d018      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002846:	d81e      	bhi.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800284c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002850:	d007      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002852:	e018      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002854:	4bb0      	ldr	r3, [pc, #704]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	4aaf      	ldr	r2, [pc, #700]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800285a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800285e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002860:	e017      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3304      	adds	r3, #4
 8002866:	2100      	movs	r1, #0
 8002868:	4618      	mov	r0, r3
 800286a:	f001 f829 	bl	80038c0 <RCCEx_PLL2_Config>
 800286e:	4603      	mov	r3, r0
 8002870:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002872:	e00e      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3324      	adds	r3, #36	; 0x24
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f001 f8d2 	bl	8003a24 <RCCEx_PLL3_Config>
 8002880:	4603      	mov	r3, r0
 8002882:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002884:	e005      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	75fb      	strb	r3, [r7, #23]
      break;
 800288a:	e002      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800288c:	bf00      	nop
 800288e:	e000      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002890:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002892:	7dfb      	ldrb	r3, [r7, #23]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d109      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002898:	4b9f      	ldr	r3, [pc, #636]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800289a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a4:	499c      	ldr	r1, [pc, #624]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	650b      	str	r3, [r1, #80]	; 0x50
 80028aa:	e001      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d049      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c4:	d02e      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80028c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ca:	d828      	bhi.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80028cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028d0:	d02a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80028d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028d6:	d822      	bhi.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80028d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028dc:	d026      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x400>
 80028de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028e2:	d81c      	bhi.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80028e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028e8:	d010      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80028ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028ee:	d816      	bhi.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01d      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d111      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3304      	adds	r3, #4
 80028fe:	2101      	movs	r1, #1
 8002900:	4618      	mov	r0, r3
 8002902:	f000 ffdd 	bl	80038c0 <RCCEx_PLL2_Config>
 8002906:	4603      	mov	r3, r0
 8002908:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800290a:	e012      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3324      	adds	r3, #36	; 0x24
 8002910:	2101      	movs	r1, #1
 8002912:	4618      	mov	r0, r3
 8002914:	f001 f886 	bl	8003a24 <RCCEx_PLL3_Config>
 8002918:	4603      	mov	r3, r0
 800291a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800291c:	e009      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	75fb      	strb	r3, [r7, #23]
      break;
 8002922:	e006      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002924:	bf00      	nop
 8002926:	e004      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002928:	bf00      	nop
 800292a:	e002      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800292c:	bf00      	nop
 800292e:	e000      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002930:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002932:	7dfb      	ldrb	r3, [r7, #23]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002938:	4b77      	ldr	r3, [pc, #476]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800293a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800293c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002944:	4974      	ldr	r1, [pc, #464]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002946:	4313      	orrs	r3, r2
 8002948:	650b      	str	r3, [r1, #80]	; 0x50
 800294a:	e001      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294c:	7dfb      	ldrb	r3, [r7, #23]
 800294e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d053      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002962:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002966:	d034      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002968:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800296c:	d82e      	bhi.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800296e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002972:	d030      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8002974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002978:	d828      	bhi.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800297a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297e:	d02c      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002984:	d822      	bhi.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002986:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800298a:	d028      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800298c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002990:	d81c      	bhi.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002992:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002996:	d010      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8002998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800299c:	d816      	bhi.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d01f      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80029a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029a6:	d111      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3304      	adds	r3, #4
 80029ac:	2101      	movs	r1, #1
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 ff86 	bl	80038c0 <RCCEx_PLL2_Config>
 80029b4:	4603      	mov	r3, r0
 80029b6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80029b8:	e014      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3324      	adds	r3, #36	; 0x24
 80029be:	2101      	movs	r1, #1
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 f82f 	bl	8003a24 <RCCEx_PLL3_Config>
 80029c6:	4603      	mov	r3, r0
 80029c8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80029ca:	e00b      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	75fb      	strb	r3, [r7, #23]
      break;
 80029d0:	e008      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80029d2:	bf00      	nop
 80029d4:	e006      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80029d6:	bf00      	nop
 80029d8:	e004      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80029da:	bf00      	nop
 80029dc:	e002      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80029de:	bf00      	nop
 80029e0:	e000      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80029e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10a      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80029ea:	4b4b      	ldr	r3, [pc, #300]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80029f8:	4947      	ldr	r1, [pc, #284]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	658b      	str	r3, [r1, #88]	; 0x58
 80029fe:	e001      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a00:	7dfb      	ldrb	r3, [r7, #23]
 8002a02:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d02f      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a18:	d00e      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a1e:	d814      	bhi.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d015      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002a24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a28:	d10f      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a2a:	4b3b      	ldr	r3, [pc, #236]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	4a3a      	ldr	r2, [pc, #232]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002a36:	e00c      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 ff3e 	bl	80038c0 <RCCEx_PLL2_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002a48:	e003      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a4e:	e000      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002a50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d109      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a58:	4b2f      	ldr	r3, [pc, #188]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a64:	492c      	ldr	r1, [pc, #176]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	650b      	str	r3, [r1, #80]	; 0x50
 8002a6a:	e001      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a6c:	7dfb      	ldrb	r3, [r7, #23]
 8002a6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d032      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d81b      	bhi.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x590>
 8002a84:	a201      	add	r2, pc, #4	; (adr r2, 8002a8c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8a:	bf00      	nop
 8002a8c:	08002ac3 	.word	0x08002ac3
 8002a90:	08002a9d 	.word	0x08002a9d
 8002a94:	08002aab 	.word	0x08002aab
 8002a98:	08002ac3 	.word	0x08002ac3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a9c:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	4a1d      	ldr	r2, [pc, #116]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002aa8:	e00c      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3304      	adds	r3, #4
 8002aae:	2102      	movs	r1, #2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 ff05 	bl	80038c0 <RCCEx_PLL2_Config>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002aba:	e003      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	75fb      	strb	r3, [r7, #23]
      break;
 8002ac0:	e000      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8002ac2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002aca:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ace:	f023 0203 	bic.w	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	4910      	ldr	r1, [pc, #64]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002adc:	e001      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ade:	7dfb      	ldrb	r3, [r7, #23]
 8002ae0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 808a 	beq.w	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002af0:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a09      	ldr	r2, [pc, #36]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002afc:	f7fe fa34 	bl	8000f68 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b02:	e00d      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b04:	f7fe fa30 	bl	8000f68 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	; 0x64
 8002b10:	d906      	bls.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	75fb      	strb	r3, [r7, #23]
        break;
 8002b16:	e009      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002b18:	58024400 	.word	0x58024400
 8002b1c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b20:	4bba      	ldr	r3, [pc, #744]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0eb      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d166      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b32:	4bb7      	ldr	r3, [pc, #732]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b3c:	4053      	eors	r3, r2
 8002b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d013      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b46:	4bb2      	ldr	r3, [pc, #712]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b4e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b50:	4baf      	ldr	r3, [pc, #700]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	4aae      	ldr	r2, [pc, #696]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b5c:	4bac      	ldr	r3, [pc, #688]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	4aab      	ldr	r2, [pc, #684]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b66:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002b68:	4aa9      	ldr	r2, [pc, #676]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b78:	d115      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7a:	f7fe f9f5 	bl	8000f68 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b80:	e00b      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b82:	f7fe f9f1 	bl	8000f68 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d902      	bls.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	75fb      	strb	r3, [r7, #23]
            break;
 8002b98:	e005      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b9a:	4b9d      	ldr	r3, [pc, #628]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0ed      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8002ba6:	7dfb      	ldrb	r3, [r7, #23]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d126      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bba:	d10d      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8002bbc:	4b94      	ldr	r3, [pc, #592]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bca:	0919      	lsrs	r1, r3, #4
 8002bcc:	4b91      	ldr	r3, [pc, #580]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002bce:	400b      	ands	r3, r1
 8002bd0:	498f      	ldr	r1, [pc, #572]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	610b      	str	r3, [r1, #16]
 8002bd6:	e005      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8002bd8:	4b8d      	ldr	r3, [pc, #564]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	4a8c      	ldr	r2, [pc, #560]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bde:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002be2:	6113      	str	r3, [r2, #16]
 8002be4:	4b8a      	ldr	r3, [pc, #552]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002be6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf2:	4987      	ldr	r1, [pc, #540]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	670b      	str	r3, [r1, #112]	; 0x70
 8002bf8:	e004      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	75bb      	strb	r3, [r7, #22]
 8002bfe:	e001      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
 8002c02:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d07f      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c16:	2b28      	cmp	r3, #40	; 0x28
 8002c18:	d866      	bhi.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8002c1a:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8002c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c20:	08002cef 	.word	0x08002cef
 8002c24:	08002ce9 	.word	0x08002ce9
 8002c28:	08002ce9 	.word	0x08002ce9
 8002c2c:	08002ce9 	.word	0x08002ce9
 8002c30:	08002ce9 	.word	0x08002ce9
 8002c34:	08002ce9 	.word	0x08002ce9
 8002c38:	08002ce9 	.word	0x08002ce9
 8002c3c:	08002ce9 	.word	0x08002ce9
 8002c40:	08002cc5 	.word	0x08002cc5
 8002c44:	08002ce9 	.word	0x08002ce9
 8002c48:	08002ce9 	.word	0x08002ce9
 8002c4c:	08002ce9 	.word	0x08002ce9
 8002c50:	08002ce9 	.word	0x08002ce9
 8002c54:	08002ce9 	.word	0x08002ce9
 8002c58:	08002ce9 	.word	0x08002ce9
 8002c5c:	08002ce9 	.word	0x08002ce9
 8002c60:	08002cd7 	.word	0x08002cd7
 8002c64:	08002ce9 	.word	0x08002ce9
 8002c68:	08002ce9 	.word	0x08002ce9
 8002c6c:	08002ce9 	.word	0x08002ce9
 8002c70:	08002ce9 	.word	0x08002ce9
 8002c74:	08002ce9 	.word	0x08002ce9
 8002c78:	08002ce9 	.word	0x08002ce9
 8002c7c:	08002ce9 	.word	0x08002ce9
 8002c80:	08002cef 	.word	0x08002cef
 8002c84:	08002ce9 	.word	0x08002ce9
 8002c88:	08002ce9 	.word	0x08002ce9
 8002c8c:	08002ce9 	.word	0x08002ce9
 8002c90:	08002ce9 	.word	0x08002ce9
 8002c94:	08002ce9 	.word	0x08002ce9
 8002c98:	08002ce9 	.word	0x08002ce9
 8002c9c:	08002ce9 	.word	0x08002ce9
 8002ca0:	08002cef 	.word	0x08002cef
 8002ca4:	08002ce9 	.word	0x08002ce9
 8002ca8:	08002ce9 	.word	0x08002ce9
 8002cac:	08002ce9 	.word	0x08002ce9
 8002cb0:	08002ce9 	.word	0x08002ce9
 8002cb4:	08002ce9 	.word	0x08002ce9
 8002cb8:	08002ce9 	.word	0x08002ce9
 8002cbc:	08002ce9 	.word	0x08002ce9
 8002cc0:	08002cef 	.word	0x08002cef
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	2101      	movs	r1, #1
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fdf8 	bl	80038c0 <RCCEx_PLL2_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002cd4:	e00c      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3324      	adds	r3, #36	; 0x24
 8002cda:	2101      	movs	r1, #1
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fea1 	bl	8003a24 <RCCEx_PLL3_Config>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002ce6:	e003      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	75fb      	strb	r3, [r7, #23]
      break;
 8002cec:	e000      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8002cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10a      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002cf6:	4b46      	ldr	r3, [pc, #280]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d04:	4942      	ldr	r1, [pc, #264]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	654b      	str	r3, [r1, #84]	; 0x54
 8002d0a:	e001      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0c:	7dfb      	ldrb	r3, [r7, #23]
 8002d0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d038      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d20:	2b05      	cmp	r3, #5
 8002d22:	d821      	bhi.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002d24:	a201      	add	r2, pc, #4	; (adr r2, 8002d2c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2a:	bf00      	nop
 8002d2c:	08002d6f 	.word	0x08002d6f
 8002d30:	08002d45 	.word	0x08002d45
 8002d34:	08002d57 	.word	0x08002d57
 8002d38:	08002d6f 	.word	0x08002d6f
 8002d3c:	08002d6f 	.word	0x08002d6f
 8002d40:	08002d6f 	.word	0x08002d6f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3304      	adds	r3, #4
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 fdb8 	bl	80038c0 <RCCEx_PLL2_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002d54:	e00c      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3324      	adds	r3, #36	; 0x24
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fe61 	bl	8003a24 <RCCEx_PLL3_Config>
 8002d62:	4603      	mov	r3, r0
 8002d64:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002d66:	e003      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d6c:	e000      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8002d6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002d76:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	f023 0207 	bic.w	r2, r3, #7
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d82:	4923      	ldr	r1, [pc, #140]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	654b      	str	r3, [r1, #84]	; 0x54
 8002d88:	e001      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
 8002d8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d040      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	d821      	bhi.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8002da4:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002def 	.word	0x08002def
 8002db0:	08002dc5 	.word	0x08002dc5
 8002db4:	08002dd7 	.word	0x08002dd7
 8002db8:	08002def 	.word	0x08002def
 8002dbc:	08002def 	.word	0x08002def
 8002dc0:	08002def 	.word	0x08002def
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	2101      	movs	r1, #1
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fd78 	bl	80038c0 <RCCEx_PLL2_Config>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002dd4:	e00c      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3324      	adds	r3, #36	; 0x24
 8002dda:	2101      	movs	r1, #1
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fe21 	bl	8003a24 <RCCEx_PLL3_Config>
 8002de2:	4603      	mov	r3, r0
 8002de4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002de6:	e003      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	75fb      	strb	r3, [r7, #23]
      break;
 8002dec:	e000      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8002dee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d110      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002df6:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfa:	f023 0207 	bic.w	r2, r3, #7
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e04:	4902      	ldr	r1, [pc, #8]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	658b      	str	r3, [r1, #88]	; 0x58
 8002e0a:	e007      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8002e0c:	58024800 	.word	0x58024800
 8002e10:	58024400 	.word	0x58024400
 8002e14:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e18:	7dfb      	ldrb	r3, [r7, #23]
 8002e1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d04b      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e32:	d02e      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8002e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e38:	d828      	bhi.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3e:	d02a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8002e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e44:	d822      	bhi.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002e46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e4a:	d026      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002e4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e50:	d81c      	bhi.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e56:	d010      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8002e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e5c:	d816      	bhi.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01d      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8002e62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e66:	d111      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fd26 	bl	80038c0 <RCCEx_PLL2_Config>
 8002e74:	4603      	mov	r3, r0
 8002e76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002e78:	e012      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3324      	adds	r3, #36	; 0x24
 8002e7e:	2102      	movs	r1, #2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 fdcf 	bl	8003a24 <RCCEx_PLL3_Config>
 8002e86:	4603      	mov	r3, r0
 8002e88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002e8a:	e009      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e90:	e006      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002e92:	bf00      	nop
 8002e94:	e004      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002e96:	bf00      	nop
 8002e98:	e002      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002e9a:	bf00      	nop
 8002e9c:	e000      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002e9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10a      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ea6:	4bb3      	ldr	r3, [pc, #716]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eaa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb4:	49af      	ldr	r1, [pc, #700]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	654b      	str	r3, [r1, #84]	; 0x54
 8002eba:	e001      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
 8002ebe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d04b      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002ed2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ed6:	d02e      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8002ed8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002edc:	d828      	bhi.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee2:	d02a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee8:	d822      	bhi.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002eea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002eee:	d026      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002ef0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ef4:	d81c      	bhi.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002efa:	d010      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8002efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f00:	d816      	bhi.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01d      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0a:	d111      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3304      	adds	r3, #4
 8002f10:	2100      	movs	r1, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fcd4 	bl	80038c0 <RCCEx_PLL2_Config>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002f1c:	e012      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3324      	adds	r3, #36	; 0x24
 8002f22:	2102      	movs	r1, #2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fd7d 	bl	8003a24 <RCCEx_PLL3_Config>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002f2e:	e009      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	75fb      	strb	r3, [r7, #23]
      break;
 8002f34:	e006      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f36:	bf00      	nop
 8002f38:	e004      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e002      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e000      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10a      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f4a:	4b8a      	ldr	r3, [pc, #552]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f58:	4986      	ldr	r1, [pc, #536]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	658b      	str	r3, [r1, #88]	; 0x58
 8002f5e:	e001      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f60:	7dfb      	ldrb	r3, [r7, #23]
 8002f62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d04b      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f76:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002f7a:	d02e      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8002f7c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002f80:	d828      	bhi.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f86:	d02a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8002f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f8c:	d822      	bhi.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002f8e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002f92:	d026      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8002f94:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002f98:	d81c      	bhi.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002f9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f9e:	d010      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8002fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fa4:	d816      	bhi.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01d      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8002faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fae:	d111      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fc82 	bl	80038c0 <RCCEx_PLL2_Config>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002fc0:	e012      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3324      	adds	r3, #36	; 0x24
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 fd2b 	bl	8003a24 <RCCEx_PLL3_Config>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002fd2:	e009      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fd8:	e006      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e004      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002fde:	bf00      	nop
 8002fe0:	e002      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e000      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002fee:	4b61      	ldr	r3, [pc, #388]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ffc:	495d      	ldr	r1, [pc, #372]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	658b      	str	r3, [r1, #88]	; 0x58
 8003002:	e001      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301e:	d10a      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3324      	adds	r3, #36	; 0x24
 8003024:	2102      	movs	r1, #2
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fcfc 	bl	8003a24 <RCCEx_PLL3_Config>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003036:	4b4f      	ldr	r3, [pc, #316]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003044:	494b      	ldr	r1, [pc, #300]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003046:	4313      	orrs	r3, r2
 8003048:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b00      	cmp	r3, #0
 8003054:	d01a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800305c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003060:	d10a      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3324      	adds	r3, #36	; 0x24
 8003066:	2102      	movs	r1, #2
 8003068:	4618      	mov	r0, r3
 800306a:	f000 fcdb 	bl	8003a24 <RCCEx_PLL3_Config>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003078:	4b3e      	ldr	r3, [pc, #248]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800307a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003086:	493b      	ldr	r1, [pc, #236]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003088:	4313      	orrs	r3, r2
 800308a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d034      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800309e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030a2:	d01d      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80030a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030a8:	d817      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80030ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b2:	d009      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80030b4:	e011      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3304      	adds	r3, #4
 80030ba:	2100      	movs	r1, #0
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fbff 	bl	80038c0 <RCCEx_PLL2_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80030c6:	e00c      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3324      	adds	r3, #36	; 0x24
 80030cc:	2102      	movs	r1, #2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fca8 	bl	8003a24 <RCCEx_PLL3_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80030d8:	e003      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	75fb      	strb	r3, [r7, #23]
      break;
 80030de:	e000      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80030e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030e2:	7dfb      	ldrb	r3, [r7, #23]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030e8:	4b22      	ldr	r3, [pc, #136]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030f6:	491f      	ldr	r1, [pc, #124]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	658b      	str	r3, [r1, #88]	; 0x58
 80030fc:	e001      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
 8003100:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d036      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003114:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003118:	d01c      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800311a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800311e:	d816      	bhi.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003124:	d003      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003126:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800312a:	d007      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800312c:	e00f      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	4a10      	ldr	r2, [pc, #64]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003138:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800313a:	e00c      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3324      	adds	r3, #36	; 0x24
 8003140:	2101      	movs	r1, #1
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fc6e 	bl	8003a24 <RCCEx_PLL3_Config>
 8003148:	4603      	mov	r3, r0
 800314a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800314c:	e003      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	75fb      	strb	r3, [r7, #23]
      break;
 8003152:	e000      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003156:	7dfb      	ldrb	r3, [r7, #23]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10d      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800315e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003160:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800316a:	4902      	ldr	r1, [pc, #8]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800316c:	4313      	orrs	r3, r2
 800316e:	654b      	str	r3, [r1, #84]	; 0x54
 8003170:	e004      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8003172:	bf00      	nop
 8003174:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003178:	7dfb      	ldrb	r3, [r7, #23]
 800317a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d029      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003194:	d007      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8003196:	e00f      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003198:	4b69      	ldr	r3, [pc, #420]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	4a68      	ldr	r2, [pc, #416]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800319e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80031a4:	e00b      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3304      	adds	r3, #4
 80031aa:	2102      	movs	r1, #2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fb87 	bl	80038c0 <RCCEx_PLL2_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80031b6:	e002      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	75fb      	strb	r3, [r7, #23]
      break;
 80031bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031be:	7dfb      	ldrb	r3, [r7, #23]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80031c4:	4b5e      	ldr	r3, [pc, #376]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d0:	495b      	ldr	r1, [pc, #364]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80031d6:	e001      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00a      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3324      	adds	r3, #36	; 0x24
 80031ec:	2102      	movs	r1, #2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fc18 	bl	8003a24 <RCCEx_PLL3_Config>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d032      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003214:	d017      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8003216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800321a:	d811      	bhi.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800321c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003220:	d013      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8003222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003226:	d80b      	bhi.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d010      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xd22>
 800322c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003230:	d106      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003232:	4b43      	ldr	r3, [pc, #268]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	4a42      	ldr	r2, [pc, #264]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800323e:	e007      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	75fb      	strb	r3, [r7, #23]
      break;
 8003244:	e004      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003246:	bf00      	nop
 8003248:	e002      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800324a:	bf00      	nop
 800324c:	e000      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800324e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003250:	7dfb      	ldrb	r3, [r7, #23]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003256:	4b3a      	ldr	r3, [pc, #232]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003264:	4936      	ldr	r1, [pc, #216]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003266:	4313      	orrs	r3, r2
 8003268:	654b      	str	r3, [r1, #84]	; 0x54
 800326a:	e001      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800327c:	4b30      	ldr	r3, [pc, #192]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800327e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003280:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003288:	492d      	ldr	r1, [pc, #180]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800328a:	4313      	orrs	r3, r2
 800328c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800329a:	4b29      	ldr	r3, [pc, #164]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800329c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a6:	4926      	ldr	r1, [pc, #152]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80032b8:	4b21      	ldr	r3, [pc, #132]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c4:	491e      	ldr	r1, [pc, #120]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032d6:	4b1a      	ldr	r3, [pc, #104]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	4a19      	ldr	r2, [pc, #100]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80032e0:	6113      	str	r3, [r2, #16]
 80032e2:	4b17      	ldr	r3, [pc, #92]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80032ec:	4914      	ldr	r1, [pc, #80]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	da08      	bge.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80032fa:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003306:	490e      	ldr	r1, [pc, #56]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003308:	4313      	orrs	r3, r2
 800330a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d009      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003318:	4b09      	ldr	r3, [pc, #36]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800331a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003326:	4906      	ldr	r1, [pc, #24]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003328:	4313      	orrs	r3, r2
 800332a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800332c:	7dbb      	ldrb	r3, [r7, #22]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e000      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	58024400 	.word	0x58024400

08003344 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003348:	f7ff f852 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	091b      	lsrs	r3, r3, #4
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4904      	ldr	r1, [pc, #16]	; (800336c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800335a:	5ccb      	ldrb	r3, [r1, r3]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	58024400 	.word	0x58024400
 800336c:	080086f0 	.word	0x080086f0

08003370 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003370:	b480      	push	{r7}
 8003372:	b089      	sub	sp, #36	; 0x24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003378:	4ba1      	ldr	r3, [pc, #644]	; (8003600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003382:	4b9f      	ldr	r3, [pc, #636]	; (8003600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	0b1b      	lsrs	r3, r3, #12
 8003388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800338c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800338e:	4b9c      	ldr	r3, [pc, #624]	; (8003600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800339a:	4b99      	ldr	r3, [pc, #612]	; (8003600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	08db      	lsrs	r3, r3, #3
 80033a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	fb02 f303 	mul.w	r3, r2, r3
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8111 	beq.w	80035e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	f000 8083 	beq.w	80034cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	f200 80a1 	bhi.w	8003510 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d056      	beq.n	8003488 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80033da:	e099      	b.n	8003510 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033dc:	4b88      	ldr	r3, [pc, #544]	; (8003600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d02d      	beq.n	8003444 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033e8:	4b85      	ldr	r3, [pc, #532]	; (8003600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	08db      	lsrs	r3, r3, #3
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	4a84      	ldr	r2, [pc, #528]	; (8003604 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
 80033f8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	ee07 3a90 	vmov	s15, r3
 8003400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	ee07 3a90 	vmov	s15, r3
 800340a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003412:	4b7b      	ldr	r3, [pc, #492]	; (8003600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003422:	ed97 6a03 	vldr	s12, [r7, #12]
 8003426:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800342a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800342e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800343a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800343e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003442:	e087      	b.n	8003554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800344e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800360c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003456:	4b6a      	ldr	r3, [pc, #424]	; (8003600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003466:	ed97 6a03 	vldr	s12, [r7, #12]
 800346a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800346e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800347a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800347e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003482:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003486:	e065      	b.n	8003554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003492:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003610 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800349a:	4b59      	ldr	r3, [pc, #356]	; (8003600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80034ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80034b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034ca:	e043      	b.n	8003554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003614 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80034da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034de:	4b48      	ldr	r3, [pc, #288]	; (8003600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80034f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80034f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800350a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800350e:	e021      	b.n	8003554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	ee07 3a90 	vmov	s15, r3
 8003516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800351a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003610 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800351e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003522:	4b37      	ldr	r3, [pc, #220]	; (8003600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003532:	ed97 6a03 	vldr	s12, [r7, #12]
 8003536:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800353a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800353e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800354a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003552:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003554:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	0a5b      	lsrs	r3, r3, #9
 800355a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800355e:	ee07 3a90 	vmov	s15, r3
 8003562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003566:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800356a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800356e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800357a:	ee17 2a90 	vmov	r2, s15
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003582:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	0c1b      	lsrs	r3, r3, #16
 8003588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800358c:	ee07 3a90 	vmov	s15, r3
 8003590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003594:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003598:	ee37 7a87 	vadd.f32	s14, s15, s14
 800359c:	edd7 6a07 	vldr	s13, [r7, #28]
 80035a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035a8:	ee17 2a90 	vmov	r2, s15
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80035b0:	4b13      	ldr	r3, [pc, #76]	; (8003600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	0e1b      	lsrs	r3, r3, #24
 80035b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80035ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035d6:	ee17 2a90 	vmov	r2, s15
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80035de:	e008      	b.n	80035f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	609a      	str	r2, [r3, #8]
}
 80035f2:	bf00      	nop
 80035f4:	3724      	adds	r7, #36	; 0x24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	58024400 	.word	0x58024400
 8003604:	03d09000 	.word	0x03d09000
 8003608:	46000000 	.word	0x46000000
 800360c:	4c742400 	.word	0x4c742400
 8003610:	4a742400 	.word	0x4a742400
 8003614:	4af42400 	.word	0x4af42400

08003618 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	; 0x24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003620:	4ba1      	ldr	r3, [pc, #644]	; (80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800362a:	4b9f      	ldr	r3, [pc, #636]	; (80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362e:	0d1b      	lsrs	r3, r3, #20
 8003630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003634:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003636:	4b9c      	ldr	r3, [pc, #624]	; (80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	0a1b      	lsrs	r3, r3, #8
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003642:	4b99      	ldr	r3, [pc, #612]	; (80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	08db      	lsrs	r3, r3, #3
 8003648:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	fb02 f303 	mul.w	r3, r2, r3
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8111 	beq.w	8003888 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	2b02      	cmp	r3, #2
 800366a:	f000 8083 	beq.w	8003774 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	2b02      	cmp	r3, #2
 8003672:	f200 80a1 	bhi.w	80037b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d056      	beq.n	8003730 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003682:	e099      	b.n	80037b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003684:	4b88      	ldr	r3, [pc, #544]	; (80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b00      	cmp	r3, #0
 800368e:	d02d      	beq.n	80036ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003690:	4b85      	ldr	r3, [pc, #532]	; (80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	08db      	lsrs	r3, r3, #3
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	4a84      	ldr	r2, [pc, #528]	; (80038ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800369c:	fa22 f303 	lsr.w	r3, r2, r3
 80036a0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	ee07 3a90 	vmov	s15, r3
 80036a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	ee07 3a90 	vmov	s15, r3
 80036b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ba:	4b7b      	ldr	r3, [pc, #492]	; (80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c2:	ee07 3a90 	vmov	s15, r3
 80036c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80036ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80036d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80036ea:	e087      	b.n	80037fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	ee07 3a90 	vmov	s15, r3
 80036f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80038b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80036fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036fe:	4b6a      	ldr	r3, [pc, #424]	; (80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800370e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003712:	eddf 5a67 	vldr	s11, [pc, #412]	; 80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800371a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800371e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800372a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800372e:	e065      	b.n	80037fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800373a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80038b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800373e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003742:	4b59      	ldr	r3, [pc, #356]	; (80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800374a:	ee07 3a90 	vmov	s15, r3
 800374e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003752:	ed97 6a03 	vldr	s12, [r7, #12]
 8003756:	eddf 5a56 	vldr	s11, [pc, #344]	; 80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800375a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800375e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800376a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003772:	e043      	b.n	80037fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80038bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003786:	4b48      	ldr	r3, [pc, #288]	; (80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003796:	ed97 6a03 	vldr	s12, [r7, #12]
 800379a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800379e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037b6:	e021      	b.n	80037fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80038b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80037c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ca:	4b37      	ldr	r3, [pc, #220]	; (80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037da:	ed97 6a03 	vldr	s12, [r7, #12]
 80037de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80037e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80037fc:	4b2a      	ldr	r3, [pc, #168]	; (80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	0a5b      	lsrs	r3, r3, #9
 8003802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800380e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003812:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003816:	edd7 6a07 	vldr	s13, [r7, #28]
 800381a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800381e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003822:	ee17 2a90 	vmov	r2, s15
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800382a:	4b1f      	ldr	r3, [pc, #124]	; (80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	0c1b      	lsrs	r3, r3, #16
 8003830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003834:	ee07 3a90 	vmov	s15, r3
 8003838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003840:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003844:	edd7 6a07 	vldr	s13, [r7, #28]
 8003848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800384c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003850:	ee17 2a90 	vmov	r2, s15
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003858:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	0e1b      	lsrs	r3, r3, #24
 800385e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003862:	ee07 3a90 	vmov	s15, r3
 8003866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800386a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800386e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003872:	edd7 6a07 	vldr	s13, [r7, #28]
 8003876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800387a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800387e:	ee17 2a90 	vmov	r2, s15
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003886:	e008      	b.n	800389a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	609a      	str	r2, [r3, #8]
}
 800389a:	bf00      	nop
 800389c:	3724      	adds	r7, #36	; 0x24
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	58024400 	.word	0x58024400
 80038ac:	03d09000 	.word	0x03d09000
 80038b0:	46000000 	.word	0x46000000
 80038b4:	4c742400 	.word	0x4c742400
 80038b8:	4a742400 	.word	0x4a742400
 80038bc:	4af42400 	.word	0x4af42400

080038c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80038ce:	4b53      	ldr	r3, [pc, #332]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d101      	bne.n	80038de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e099      	b.n	8003a12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80038de:	4b4f      	ldr	r3, [pc, #316]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a4e      	ldr	r2, [pc, #312]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 80038e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ea:	f7fd fb3d 	bl	8000f68 <HAL_GetTick>
 80038ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80038f0:	e008      	b.n	8003904 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80038f2:	f7fd fb39 	bl	8000f68 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e086      	b.n	8003a12 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003904:	4b45      	ldr	r3, [pc, #276]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f0      	bne.n	80038f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003910:	4b42      	ldr	r3, [pc, #264]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	031b      	lsls	r3, r3, #12
 800391e:	493f      	ldr	r1, [pc, #252]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 8003920:	4313      	orrs	r3, r2
 8003922:	628b      	str	r3, [r1, #40]	; 0x28
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	3b01      	subs	r3, #1
 800392a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	3b01      	subs	r3, #1
 8003934:	025b      	lsls	r3, r3, #9
 8003936:	b29b      	uxth	r3, r3
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	3b01      	subs	r3, #1
 8003940:	041b      	lsls	r3, r3, #16
 8003942:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	3b01      	subs	r3, #1
 800394e:	061b      	lsls	r3, r3, #24
 8003950:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003954:	4931      	ldr	r1, [pc, #196]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 8003956:	4313      	orrs	r3, r2
 8003958:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800395a:	4b30      	ldr	r3, [pc, #192]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	492d      	ldr	r1, [pc, #180]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 8003968:	4313      	orrs	r3, r2
 800396a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800396c:	4b2b      	ldr	r3, [pc, #172]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	f023 0220 	bic.w	r2, r3, #32
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	4928      	ldr	r1, [pc, #160]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 800397a:	4313      	orrs	r3, r2
 800397c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800397e:	4b27      	ldr	r3, [pc, #156]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	4a26      	ldr	r2, [pc, #152]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 8003984:	f023 0310 	bic.w	r3, r3, #16
 8003988:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800398a:	4b24      	ldr	r3, [pc, #144]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 800398c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800398e:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <RCCEx_PLL2_Config+0x160>)
 8003990:	4013      	ands	r3, r2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	69d2      	ldr	r2, [r2, #28]
 8003996:	00d2      	lsls	r2, r2, #3
 8003998:	4920      	ldr	r1, [pc, #128]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 800399a:	4313      	orrs	r3, r2
 800399c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800399e:	4b1f      	ldr	r3, [pc, #124]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	4a1e      	ldr	r2, [pc, #120]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 80039a4:	f043 0310 	orr.w	r3, r3, #16
 80039a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d106      	bne.n	80039be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80039b0:	4b1a      	ldr	r3, [pc, #104]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	4a19      	ldr	r2, [pc, #100]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 80039b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039bc:	e00f      	b.n	80039de <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d106      	bne.n	80039d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80039c4:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	4a14      	ldr	r2, [pc, #80]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 80039ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039d0:	e005      	b.n	80039de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80039d2:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	4a11      	ldr	r2, [pc, #68]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 80039d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80039de:	4b0f      	ldr	r3, [pc, #60]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a0e      	ldr	r2, [pc, #56]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 80039e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ea:	f7fd fabd 	bl	8000f68 <HAL_GetTick>
 80039ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80039f0:	e008      	b.n	8003a04 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80039f2:	f7fd fab9 	bl	8000f68 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e006      	b.n	8003a12 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a04:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <RCCEx_PLL2_Config+0x15c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	58024400 	.word	0x58024400
 8003a20:	ffff0007 	.word	0xffff0007

08003a24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a32:	4b53      	ldr	r3, [pc, #332]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d101      	bne.n	8003a42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e099      	b.n	8003b76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003a42:	4b4f      	ldr	r3, [pc, #316]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a4e      	ldr	r2, [pc, #312]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a4e:	f7fd fa8b 	bl	8000f68 <HAL_GetTick>
 8003a52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003a54:	e008      	b.n	8003a68 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003a56:	f7fd fa87 	bl	8000f68 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e086      	b.n	8003b76 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003a68:	4b45      	ldr	r3, [pc, #276]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f0      	bne.n	8003a56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003a74:	4b42      	ldr	r3, [pc, #264]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	051b      	lsls	r3, r3, #20
 8003a82:	493f      	ldr	r1, [pc, #252]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	628b      	str	r3, [r1, #40]	; 0x28
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	025b      	lsls	r3, r3, #9
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	041b      	lsls	r3, r3, #16
 8003aa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	061b      	lsls	r3, r3, #24
 8003ab4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ab8:	4931      	ldr	r1, [pc, #196]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003abe:	4b30      	ldr	r3, [pc, #192]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	492d      	ldr	r1, [pc, #180]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ad0:	4b2b      	ldr	r3, [pc, #172]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	4928      	ldr	r1, [pc, #160]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003ae2:	4b27      	ldr	r3, [pc, #156]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	4a26      	ldr	r2, [pc, #152]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003aee:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003af2:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <RCCEx_PLL3_Config+0x160>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	69d2      	ldr	r2, [r2, #28]
 8003afa:	00d2      	lsls	r2, r2, #3
 8003afc:	4920      	ldr	r1, [pc, #128]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003b02:	4b1f      	ldr	r3, [pc, #124]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	4a1e      	ldr	r2, [pc, #120]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d106      	bne.n	8003b22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003b14:	4b1a      	ldr	r3, [pc, #104]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	4a19      	ldr	r2, [pc, #100]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003b1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b20:	e00f      	b.n	8003b42 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d106      	bne.n	8003b36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003b28:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	4a14      	ldr	r2, [pc, #80]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003b2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b34:	e005      	b.n	8003b42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003b36:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	4a11      	ldr	r2, [pc, #68]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003b3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003b42:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a0e      	ldr	r2, [pc, #56]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b4e:	f7fd fa0b 	bl	8000f68 <HAL_GetTick>
 8003b52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003b54:	e008      	b.n	8003b68 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003b56:	f7fd fa07 	bl	8000f68 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e006      	b.n	8003b76 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <RCCEx_PLL3_Config+0x15c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	58024400 	.word	0x58024400
 8003b84:	ffff0007 	.word	0xffff0007

08003b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e049      	b.n	8003c2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f841 	bl	8003c36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f000 fa00 	bl	8003fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
	...

08003c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d001      	beq.n	8003c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e054      	b.n	8003d0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a26      	ldr	r2, [pc, #152]	; (8003d1c <HAL_TIM_Base_Start_IT+0xd0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d022      	beq.n	8003ccc <HAL_TIM_Base_Start_IT+0x80>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8e:	d01d      	beq.n	8003ccc <HAL_TIM_Base_Start_IT+0x80>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a22      	ldr	r2, [pc, #136]	; (8003d20 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d018      	beq.n	8003ccc <HAL_TIM_Base_Start_IT+0x80>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a21      	ldr	r2, [pc, #132]	; (8003d24 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d013      	beq.n	8003ccc <HAL_TIM_Base_Start_IT+0x80>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1f      	ldr	r2, [pc, #124]	; (8003d28 <HAL_TIM_Base_Start_IT+0xdc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00e      	beq.n	8003ccc <HAL_TIM_Base_Start_IT+0x80>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <HAL_TIM_Base_Start_IT+0xe0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d009      	beq.n	8003ccc <HAL_TIM_Base_Start_IT+0x80>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <HAL_TIM_Base_Start_IT+0xe4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d004      	beq.n	8003ccc <HAL_TIM_Base_Start_IT+0x80>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <HAL_TIM_Base_Start_IT+0xe8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d115      	bne.n	8003cf8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	4b19      	ldr	r3, [pc, #100]	; (8003d38 <HAL_TIM_Base_Start_IT+0xec>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b06      	cmp	r3, #6
 8003cdc:	d015      	beq.n	8003d0a <HAL_TIM_Base_Start_IT+0xbe>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce4:	d011      	beq.n	8003d0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf6:	e008      	b.n	8003d0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	e000      	b.n	8003d0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40010000 	.word	0x40010000
 8003d20:	40000400 	.word	0x40000400
 8003d24:	40000800 	.word	0x40000800
 8003d28:	40000c00 	.word	0x40000c00
 8003d2c:	40010400 	.word	0x40010400
 8003d30:	40001800 	.word	0x40001800
 8003d34:	40014000 	.word	0x40014000
 8003d38:	00010007 	.word	0x00010007

08003d3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d122      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d11b      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0202 	mvn.w	r2, #2
 8003d68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f905 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003d84:	e005      	b.n	8003d92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f8f7 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f908 	bl	8003fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d122      	bne.n	8003dec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d11b      	bne.n	8003dec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0204 	mvn.w	r2, #4
 8003dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f8db 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003dd8:	e005      	b.n	8003de6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f8cd 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f8de 	bl	8003fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d122      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d11b      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0208 	mvn.w	r2, #8
 8003e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2204      	movs	r2, #4
 8003e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f8b1 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003e2c:	e005      	b.n	8003e3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f8a3 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f8b4 	bl	8003fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d122      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d11b      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0210 	mvn.w	r2, #16
 8003e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2208      	movs	r2, #8
 8003e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f887 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f879 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f88a 	bl	8003fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d10e      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d107      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0201 	mvn.w	r2, #1
 8003eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fc fde6 	bl	8000a8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eca:	2b80      	cmp	r3, #128	; 0x80
 8003ecc:	d10e      	bne.n	8003eec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed8:	2b80      	cmp	r3, #128	; 0x80
 8003eda:	d107      	bne.n	8003eec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f914 	bl	8004114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003efa:	d10e      	bne.n	8003f1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f06:	2b80      	cmp	r3, #128	; 0x80
 8003f08:	d107      	bne.n	8003f1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f907 	bl	8004128 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b40      	cmp	r3, #64	; 0x40
 8003f26:	d10e      	bne.n	8003f46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f32:	2b40      	cmp	r3, #64	; 0x40
 8003f34:	d107      	bne.n	8003f46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f838 	bl	8003fb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d10e      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d107      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f06f 0220 	mvn.w	r2, #32
 8003f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f8c7 	bl	8004100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a40      	ldr	r2, [pc, #256]	; (80040e0 <TIM_Base_SetConfig+0x114>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d013      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fea:	d00f      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a3d      	ldr	r2, [pc, #244]	; (80040e4 <TIM_Base_SetConfig+0x118>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00b      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a3c      	ldr	r2, [pc, #240]	; (80040e8 <TIM_Base_SetConfig+0x11c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d007      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a3b      	ldr	r2, [pc, #236]	; (80040ec <TIM_Base_SetConfig+0x120>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d003      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a3a      	ldr	r2, [pc, #232]	; (80040f0 <TIM_Base_SetConfig+0x124>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d108      	bne.n	800401e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2f      	ldr	r2, [pc, #188]	; (80040e0 <TIM_Base_SetConfig+0x114>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01f      	beq.n	8004066 <TIM_Base_SetConfig+0x9a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800402c:	d01b      	beq.n	8004066 <TIM_Base_SetConfig+0x9a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a2c      	ldr	r2, [pc, #176]	; (80040e4 <TIM_Base_SetConfig+0x118>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d017      	beq.n	8004066 <TIM_Base_SetConfig+0x9a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a2b      	ldr	r2, [pc, #172]	; (80040e8 <TIM_Base_SetConfig+0x11c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d013      	beq.n	8004066 <TIM_Base_SetConfig+0x9a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a2a      	ldr	r2, [pc, #168]	; (80040ec <TIM_Base_SetConfig+0x120>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00f      	beq.n	8004066 <TIM_Base_SetConfig+0x9a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a29      	ldr	r2, [pc, #164]	; (80040f0 <TIM_Base_SetConfig+0x124>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00b      	beq.n	8004066 <TIM_Base_SetConfig+0x9a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a28      	ldr	r2, [pc, #160]	; (80040f4 <TIM_Base_SetConfig+0x128>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d007      	beq.n	8004066 <TIM_Base_SetConfig+0x9a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a27      	ldr	r2, [pc, #156]	; (80040f8 <TIM_Base_SetConfig+0x12c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d003      	beq.n	8004066 <TIM_Base_SetConfig+0x9a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a26      	ldr	r2, [pc, #152]	; (80040fc <TIM_Base_SetConfig+0x130>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d108      	bne.n	8004078 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a10      	ldr	r2, [pc, #64]	; (80040e0 <TIM_Base_SetConfig+0x114>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00f      	beq.n	80040c4 <TIM_Base_SetConfig+0xf8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a12      	ldr	r2, [pc, #72]	; (80040f0 <TIM_Base_SetConfig+0x124>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00b      	beq.n	80040c4 <TIM_Base_SetConfig+0xf8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a11      	ldr	r2, [pc, #68]	; (80040f4 <TIM_Base_SetConfig+0x128>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d007      	beq.n	80040c4 <TIM_Base_SetConfig+0xf8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a10      	ldr	r2, [pc, #64]	; (80040f8 <TIM_Base_SetConfig+0x12c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_Base_SetConfig+0xf8>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a0f      	ldr	r2, [pc, #60]	; (80040fc <TIM_Base_SetConfig+0x130>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d103      	bne.n	80040cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	615a      	str	r2, [r3, #20]
}
 80040d2:	bf00      	nop
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40000400 	.word	0x40000400
 80040e8:	40000800 	.word	0x40000800
 80040ec:	40000c00 	.word	0x40000c00
 80040f0:	40010400 	.word	0x40010400
 80040f4:	40014000 	.word	0x40014000
 80040f8:	40014400 	.word	0x40014400
 80040fc:	40014800 	.word	0x40014800

08004100 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e042      	b.n	80041d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004154:	2b00      	cmp	r3, #0
 8004156:	d106      	bne.n	8004166 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7fc fe19 	bl	8000d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2224      	movs	r2, #36	; 0x24
 800416a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f996 	bl	80044b0 <UART_SetConfig>
 8004184:	4603      	mov	r3, r0
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e022      	b.n	80041d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 ffe8 	bl	800516c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f001 f86f 	bl	80052b0 <UART_CheckIdleState>
 80041d2:	4603      	mov	r3, r0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08a      	sub	sp, #40	; 0x28
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	f040 8083 	bne.w	80042fe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <HAL_UART_Transmit+0x28>
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e07b      	b.n	8004300 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800420e:	2b01      	cmp	r3, #1
 8004210:	d101      	bne.n	8004216 <HAL_UART_Transmit+0x3a>
 8004212:	2302      	movs	r3, #2
 8004214:	e074      	b.n	8004300 <HAL_UART_Transmit+0x124>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2221      	movs	r2, #33	; 0x21
 800422a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800422e:	f7fc fe9b 	bl	8000f68 <HAL_GetTick>
 8004232:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	88fa      	ldrh	r2, [r7, #6]
 8004238:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	88fa      	ldrh	r2, [r7, #6]
 8004240:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424c:	d108      	bne.n	8004260 <HAL_UART_Transmit+0x84>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d104      	bne.n	8004260 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	61bb      	str	r3, [r7, #24]
 800425e:	e003      	b.n	8004268 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004264:	2300      	movs	r3, #0
 8004266:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004270:	e02c      	b.n	80042cc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2200      	movs	r2, #0
 800427a:	2180      	movs	r1, #128	; 0x80
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f001 f862 	bl	8005346 <UART_WaitOnFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e039      	b.n	8004300 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10b      	bne.n	80042aa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	3302      	adds	r3, #2
 80042a6:	61bb      	str	r3, [r7, #24]
 80042a8:	e007      	b.n	80042ba <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	781a      	ldrb	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	3301      	adds	r3, #1
 80042b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1cc      	bne.n	8004272 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2200      	movs	r2, #0
 80042e0:	2140      	movs	r1, #64	; 0x40
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f001 f82f 	bl	8005346 <UART_WaitOnFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e006      	b.n	8004300 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e000      	b.n	8004300 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3720      	adds	r7, #32
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08a      	sub	sp, #40	; 0x28
 800430c:	af02      	add	r7, sp, #8
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431e:	2b20      	cmp	r3, #32
 8004320:	f040 80c0 	bne.w	80044a4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_UART_Receive+0x28>
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0b8      	b.n	80044a6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_UART_Receive+0x3a>
 800433e:	2302      	movs	r3, #2
 8004340:	e0b1      	b.n	80044a6 <HAL_UART_Receive+0x19e>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2222      	movs	r2, #34	; 0x22
 8004356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004360:	f7fc fe02 	bl	8000f68 <HAL_GetTick>
 8004364:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	88fa      	ldrh	r2, [r7, #6]
 800436a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	88fa      	ldrh	r2, [r7, #6]
 8004372:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437e:	d10e      	bne.n	800439e <HAL_UART_Receive+0x96>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d105      	bne.n	8004394 <HAL_UART_Receive+0x8c>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800438e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004392:	e02d      	b.n	80043f0 <HAL_UART_Receive+0xe8>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	22ff      	movs	r2, #255	; 0xff
 8004398:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800439c:	e028      	b.n	80043f0 <HAL_UART_Receive+0xe8>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10d      	bne.n	80043c2 <HAL_UART_Receive+0xba>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d104      	bne.n	80043b8 <HAL_UART_Receive+0xb0>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	22ff      	movs	r2, #255	; 0xff
 80043b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80043b6:	e01b      	b.n	80043f0 <HAL_UART_Receive+0xe8>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	227f      	movs	r2, #127	; 0x7f
 80043bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80043c0:	e016      	b.n	80043f0 <HAL_UART_Receive+0xe8>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043ca:	d10d      	bne.n	80043e8 <HAL_UART_Receive+0xe0>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d104      	bne.n	80043de <HAL_UART_Receive+0xd6>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	227f      	movs	r2, #127	; 0x7f
 80043d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80043dc:	e008      	b.n	80043f0 <HAL_UART_Receive+0xe8>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	223f      	movs	r2, #63	; 0x3f
 80043e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80043e6:	e003      	b.n	80043f0 <HAL_UART_Receive+0xe8>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80043f6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004400:	d108      	bne.n	8004414 <HAL_UART_Receive+0x10c>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d104      	bne.n	8004414 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	e003      	b.n	800441c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004418:	2300      	movs	r3, #0
 800441a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004424:	e032      	b.n	800448c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2200      	movs	r2, #0
 800442e:	2120      	movs	r1, #32
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 ff88 	bl	8005346 <UART_WaitOnFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e032      	b.n	80044a6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10c      	bne.n	8004460 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	b29a      	uxth	r2, r3
 800444e:	8a7b      	ldrh	r3, [r7, #18]
 8004450:	4013      	ands	r3, r2
 8004452:	b29a      	uxth	r2, r3
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	3302      	adds	r3, #2
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	e00c      	b.n	800447a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	b2da      	uxtb	r2, r3
 8004468:	8a7b      	ldrh	r3, [r7, #18]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	4013      	ands	r3, r2
 800446e:	b2da      	uxtb	r2, r3
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	3301      	adds	r3, #1
 8004478:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1c6      	bne.n	8004426 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	e000      	b.n	80044a6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80044a4:	2302      	movs	r3, #2
  }
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3720      	adds	r7, #32
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b0:	b5b0      	push	{r4, r5, r7, lr}
 80044b2:	b08e      	sub	sp, #56	; 0x38
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	4bbf      	ldr	r3, [pc, #764]	; (80047dc <UART_SetConfig+0x32c>)
 80044de:	4013      	ands	r3, r2
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6812      	ldr	r2, [r2, #0]
 80044e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80044e6:	430b      	orrs	r3, r1
 80044e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4ab5      	ldr	r2, [pc, #724]	; (80047e0 <UART_SetConfig+0x330>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d004      	beq.n	800451a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004516:	4313      	orrs	r3, r2
 8004518:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	4bb0      	ldr	r3, [pc, #704]	; (80047e4 <UART_SetConfig+0x334>)
 8004522:	4013      	ands	r3, r2
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800452a:	430b      	orrs	r3, r1
 800452c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	f023 010f 	bic.w	r1, r3, #15
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4aa7      	ldr	r2, [pc, #668]	; (80047e8 <UART_SetConfig+0x338>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d176      	bne.n	800463c <UART_SetConfig+0x18c>
 800454e:	4ba7      	ldr	r3, [pc, #668]	; (80047ec <UART_SetConfig+0x33c>)
 8004550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004556:	2b28      	cmp	r3, #40	; 0x28
 8004558:	d86c      	bhi.n	8004634 <UART_SetConfig+0x184>
 800455a:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <UART_SetConfig+0xb0>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	08004605 	.word	0x08004605
 8004564:	08004635 	.word	0x08004635
 8004568:	08004635 	.word	0x08004635
 800456c:	08004635 	.word	0x08004635
 8004570:	08004635 	.word	0x08004635
 8004574:	08004635 	.word	0x08004635
 8004578:	08004635 	.word	0x08004635
 800457c:	08004635 	.word	0x08004635
 8004580:	0800460d 	.word	0x0800460d
 8004584:	08004635 	.word	0x08004635
 8004588:	08004635 	.word	0x08004635
 800458c:	08004635 	.word	0x08004635
 8004590:	08004635 	.word	0x08004635
 8004594:	08004635 	.word	0x08004635
 8004598:	08004635 	.word	0x08004635
 800459c:	08004635 	.word	0x08004635
 80045a0:	08004615 	.word	0x08004615
 80045a4:	08004635 	.word	0x08004635
 80045a8:	08004635 	.word	0x08004635
 80045ac:	08004635 	.word	0x08004635
 80045b0:	08004635 	.word	0x08004635
 80045b4:	08004635 	.word	0x08004635
 80045b8:	08004635 	.word	0x08004635
 80045bc:	08004635 	.word	0x08004635
 80045c0:	0800461d 	.word	0x0800461d
 80045c4:	08004635 	.word	0x08004635
 80045c8:	08004635 	.word	0x08004635
 80045cc:	08004635 	.word	0x08004635
 80045d0:	08004635 	.word	0x08004635
 80045d4:	08004635 	.word	0x08004635
 80045d8:	08004635 	.word	0x08004635
 80045dc:	08004635 	.word	0x08004635
 80045e0:	08004625 	.word	0x08004625
 80045e4:	08004635 	.word	0x08004635
 80045e8:	08004635 	.word	0x08004635
 80045ec:	08004635 	.word	0x08004635
 80045f0:	08004635 	.word	0x08004635
 80045f4:	08004635 	.word	0x08004635
 80045f8:	08004635 	.word	0x08004635
 80045fc:	08004635 	.word	0x08004635
 8004600:	0800462d 	.word	0x0800462d
 8004604:	2301      	movs	r3, #1
 8004606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800460a:	e326      	b.n	8004c5a <UART_SetConfig+0x7aa>
 800460c:	2304      	movs	r3, #4
 800460e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004612:	e322      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004614:	2308      	movs	r3, #8
 8004616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800461a:	e31e      	b.n	8004c5a <UART_SetConfig+0x7aa>
 800461c:	2310      	movs	r3, #16
 800461e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004622:	e31a      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004624:	2320      	movs	r3, #32
 8004626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800462a:	e316      	b.n	8004c5a <UART_SetConfig+0x7aa>
 800462c:	2340      	movs	r3, #64	; 0x40
 800462e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004632:	e312      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004634:	2380      	movs	r3, #128	; 0x80
 8004636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800463a:	e30e      	b.n	8004c5a <UART_SetConfig+0x7aa>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a6b      	ldr	r2, [pc, #428]	; (80047f0 <UART_SetConfig+0x340>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d130      	bne.n	80046a8 <UART_SetConfig+0x1f8>
 8004646:	4b69      	ldr	r3, [pc, #420]	; (80047ec <UART_SetConfig+0x33c>)
 8004648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	2b05      	cmp	r3, #5
 8004650:	d826      	bhi.n	80046a0 <UART_SetConfig+0x1f0>
 8004652:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <UART_SetConfig+0x1a8>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	08004671 	.word	0x08004671
 800465c:	08004679 	.word	0x08004679
 8004660:	08004681 	.word	0x08004681
 8004664:	08004689 	.word	0x08004689
 8004668:	08004691 	.word	0x08004691
 800466c:	08004699 	.word	0x08004699
 8004670:	2300      	movs	r3, #0
 8004672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004676:	e2f0      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004678:	2304      	movs	r3, #4
 800467a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800467e:	e2ec      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004680:	2308      	movs	r3, #8
 8004682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004686:	e2e8      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004688:	2310      	movs	r3, #16
 800468a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800468e:	e2e4      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004690:	2320      	movs	r3, #32
 8004692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004696:	e2e0      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004698:	2340      	movs	r3, #64	; 0x40
 800469a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800469e:	e2dc      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80046a0:	2380      	movs	r3, #128	; 0x80
 80046a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046a6:	e2d8      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a51      	ldr	r2, [pc, #324]	; (80047f4 <UART_SetConfig+0x344>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d130      	bne.n	8004714 <UART_SetConfig+0x264>
 80046b2:	4b4e      	ldr	r3, [pc, #312]	; (80047ec <UART_SetConfig+0x33c>)
 80046b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	2b05      	cmp	r3, #5
 80046bc:	d826      	bhi.n	800470c <UART_SetConfig+0x25c>
 80046be:	a201      	add	r2, pc, #4	; (adr r2, 80046c4 <UART_SetConfig+0x214>)
 80046c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c4:	080046dd 	.word	0x080046dd
 80046c8:	080046e5 	.word	0x080046e5
 80046cc:	080046ed 	.word	0x080046ed
 80046d0:	080046f5 	.word	0x080046f5
 80046d4:	080046fd 	.word	0x080046fd
 80046d8:	08004705 	.word	0x08004705
 80046dc:	2300      	movs	r3, #0
 80046de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046e2:	e2ba      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80046e4:	2304      	movs	r3, #4
 80046e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046ea:	e2b6      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80046ec:	2308      	movs	r3, #8
 80046ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046f2:	e2b2      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80046f4:	2310      	movs	r3, #16
 80046f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046fa:	e2ae      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80046fc:	2320      	movs	r3, #32
 80046fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004702:	e2aa      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004704:	2340      	movs	r3, #64	; 0x40
 8004706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800470a:	e2a6      	b.n	8004c5a <UART_SetConfig+0x7aa>
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004712:	e2a2      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a37      	ldr	r2, [pc, #220]	; (80047f8 <UART_SetConfig+0x348>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d130      	bne.n	8004780 <UART_SetConfig+0x2d0>
 800471e:	4b33      	ldr	r3, [pc, #204]	; (80047ec <UART_SetConfig+0x33c>)
 8004720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	2b05      	cmp	r3, #5
 8004728:	d826      	bhi.n	8004778 <UART_SetConfig+0x2c8>
 800472a:	a201      	add	r2, pc, #4	; (adr r2, 8004730 <UART_SetConfig+0x280>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	08004749 	.word	0x08004749
 8004734:	08004751 	.word	0x08004751
 8004738:	08004759 	.word	0x08004759
 800473c:	08004761 	.word	0x08004761
 8004740:	08004769 	.word	0x08004769
 8004744:	08004771 	.word	0x08004771
 8004748:	2300      	movs	r3, #0
 800474a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800474e:	e284      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004750:	2304      	movs	r3, #4
 8004752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004756:	e280      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004758:	2308      	movs	r3, #8
 800475a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800475e:	e27c      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004760:	2310      	movs	r3, #16
 8004762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004766:	e278      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004768:	2320      	movs	r3, #32
 800476a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800476e:	e274      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004770:	2340      	movs	r3, #64	; 0x40
 8004772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004776:	e270      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004778:	2380      	movs	r3, #128	; 0x80
 800477a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800477e:	e26c      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a1d      	ldr	r2, [pc, #116]	; (80047fc <UART_SetConfig+0x34c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d142      	bne.n	8004810 <UART_SetConfig+0x360>
 800478a:	4b18      	ldr	r3, [pc, #96]	; (80047ec <UART_SetConfig+0x33c>)
 800478c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	2b05      	cmp	r3, #5
 8004794:	d838      	bhi.n	8004808 <UART_SetConfig+0x358>
 8004796:	a201      	add	r2, pc, #4	; (adr r2, 800479c <UART_SetConfig+0x2ec>)
 8004798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479c:	080047b5 	.word	0x080047b5
 80047a0:	080047bd 	.word	0x080047bd
 80047a4:	080047c5 	.word	0x080047c5
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047d5 	.word	0x080047d5
 80047b0:	08004801 	.word	0x08004801
 80047b4:	2300      	movs	r3, #0
 80047b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ba:	e24e      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80047bc:	2304      	movs	r3, #4
 80047be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047c2:	e24a      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80047c4:	2308      	movs	r3, #8
 80047c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ca:	e246      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80047cc:	2310      	movs	r3, #16
 80047ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047d2:	e242      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80047d4:	2320      	movs	r3, #32
 80047d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047da:	e23e      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80047dc:	cfff69f3 	.word	0xcfff69f3
 80047e0:	58000c00 	.word	0x58000c00
 80047e4:	11fff4ff 	.word	0x11fff4ff
 80047e8:	40011000 	.word	0x40011000
 80047ec:	58024400 	.word	0x58024400
 80047f0:	40004400 	.word	0x40004400
 80047f4:	40004800 	.word	0x40004800
 80047f8:	40004c00 	.word	0x40004c00
 80047fc:	40005000 	.word	0x40005000
 8004800:	2340      	movs	r3, #64	; 0x40
 8004802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004806:	e228      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800480e:	e224      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4ab1      	ldr	r2, [pc, #708]	; (8004adc <UART_SetConfig+0x62c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d176      	bne.n	8004908 <UART_SetConfig+0x458>
 800481a:	4bb1      	ldr	r3, [pc, #708]	; (8004ae0 <UART_SetConfig+0x630>)
 800481c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004822:	2b28      	cmp	r3, #40	; 0x28
 8004824:	d86c      	bhi.n	8004900 <UART_SetConfig+0x450>
 8004826:	a201      	add	r2, pc, #4	; (adr r2, 800482c <UART_SetConfig+0x37c>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	080048d1 	.word	0x080048d1
 8004830:	08004901 	.word	0x08004901
 8004834:	08004901 	.word	0x08004901
 8004838:	08004901 	.word	0x08004901
 800483c:	08004901 	.word	0x08004901
 8004840:	08004901 	.word	0x08004901
 8004844:	08004901 	.word	0x08004901
 8004848:	08004901 	.word	0x08004901
 800484c:	080048d9 	.word	0x080048d9
 8004850:	08004901 	.word	0x08004901
 8004854:	08004901 	.word	0x08004901
 8004858:	08004901 	.word	0x08004901
 800485c:	08004901 	.word	0x08004901
 8004860:	08004901 	.word	0x08004901
 8004864:	08004901 	.word	0x08004901
 8004868:	08004901 	.word	0x08004901
 800486c:	080048e1 	.word	0x080048e1
 8004870:	08004901 	.word	0x08004901
 8004874:	08004901 	.word	0x08004901
 8004878:	08004901 	.word	0x08004901
 800487c:	08004901 	.word	0x08004901
 8004880:	08004901 	.word	0x08004901
 8004884:	08004901 	.word	0x08004901
 8004888:	08004901 	.word	0x08004901
 800488c:	080048e9 	.word	0x080048e9
 8004890:	08004901 	.word	0x08004901
 8004894:	08004901 	.word	0x08004901
 8004898:	08004901 	.word	0x08004901
 800489c:	08004901 	.word	0x08004901
 80048a0:	08004901 	.word	0x08004901
 80048a4:	08004901 	.word	0x08004901
 80048a8:	08004901 	.word	0x08004901
 80048ac:	080048f1 	.word	0x080048f1
 80048b0:	08004901 	.word	0x08004901
 80048b4:	08004901 	.word	0x08004901
 80048b8:	08004901 	.word	0x08004901
 80048bc:	08004901 	.word	0x08004901
 80048c0:	08004901 	.word	0x08004901
 80048c4:	08004901 	.word	0x08004901
 80048c8:	08004901 	.word	0x08004901
 80048cc:	080048f9 	.word	0x080048f9
 80048d0:	2301      	movs	r3, #1
 80048d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048d6:	e1c0      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80048d8:	2304      	movs	r3, #4
 80048da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048de:	e1bc      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80048e0:	2308      	movs	r3, #8
 80048e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048e6:	e1b8      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80048e8:	2310      	movs	r3, #16
 80048ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ee:	e1b4      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80048f0:	2320      	movs	r3, #32
 80048f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048f6:	e1b0      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80048f8:	2340      	movs	r3, #64	; 0x40
 80048fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048fe:	e1ac      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004900:	2380      	movs	r3, #128	; 0x80
 8004902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004906:	e1a8      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a75      	ldr	r2, [pc, #468]	; (8004ae4 <UART_SetConfig+0x634>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d130      	bne.n	8004974 <UART_SetConfig+0x4c4>
 8004912:	4b73      	ldr	r3, [pc, #460]	; (8004ae0 <UART_SetConfig+0x630>)
 8004914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	2b05      	cmp	r3, #5
 800491c:	d826      	bhi.n	800496c <UART_SetConfig+0x4bc>
 800491e:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <UART_SetConfig+0x474>)
 8004920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004924:	0800493d 	.word	0x0800493d
 8004928:	08004945 	.word	0x08004945
 800492c:	0800494d 	.word	0x0800494d
 8004930:	08004955 	.word	0x08004955
 8004934:	0800495d 	.word	0x0800495d
 8004938:	08004965 	.word	0x08004965
 800493c:	2300      	movs	r3, #0
 800493e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004942:	e18a      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004944:	2304      	movs	r3, #4
 8004946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800494a:	e186      	b.n	8004c5a <UART_SetConfig+0x7aa>
 800494c:	2308      	movs	r3, #8
 800494e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004952:	e182      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004954:	2310      	movs	r3, #16
 8004956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800495a:	e17e      	b.n	8004c5a <UART_SetConfig+0x7aa>
 800495c:	2320      	movs	r3, #32
 800495e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004962:	e17a      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004964:	2340      	movs	r3, #64	; 0x40
 8004966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800496a:	e176      	b.n	8004c5a <UART_SetConfig+0x7aa>
 800496c:	2380      	movs	r3, #128	; 0x80
 800496e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004972:	e172      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a5b      	ldr	r2, [pc, #364]	; (8004ae8 <UART_SetConfig+0x638>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d130      	bne.n	80049e0 <UART_SetConfig+0x530>
 800497e:	4b58      	ldr	r3, [pc, #352]	; (8004ae0 <UART_SetConfig+0x630>)
 8004980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	2b05      	cmp	r3, #5
 8004988:	d826      	bhi.n	80049d8 <UART_SetConfig+0x528>
 800498a:	a201      	add	r2, pc, #4	; (adr r2, 8004990 <UART_SetConfig+0x4e0>)
 800498c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004990:	080049a9 	.word	0x080049a9
 8004994:	080049b1 	.word	0x080049b1
 8004998:	080049b9 	.word	0x080049b9
 800499c:	080049c1 	.word	0x080049c1
 80049a0:	080049c9 	.word	0x080049c9
 80049a4:	080049d1 	.word	0x080049d1
 80049a8:	2300      	movs	r3, #0
 80049aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049ae:	e154      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80049b0:	2304      	movs	r3, #4
 80049b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049b6:	e150      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80049b8:	2308      	movs	r3, #8
 80049ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049be:	e14c      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80049c0:	2310      	movs	r3, #16
 80049c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049c6:	e148      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80049c8:	2320      	movs	r3, #32
 80049ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049ce:	e144      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80049d0:	2340      	movs	r3, #64	; 0x40
 80049d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049d6:	e140      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80049d8:	2380      	movs	r3, #128	; 0x80
 80049da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049de:	e13c      	b.n	8004c5a <UART_SetConfig+0x7aa>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a41      	ldr	r2, [pc, #260]	; (8004aec <UART_SetConfig+0x63c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	f040 8082 	bne.w	8004af0 <UART_SetConfig+0x640>
 80049ec:	4b3c      	ldr	r3, [pc, #240]	; (8004ae0 <UART_SetConfig+0x630>)
 80049ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049f4:	2b28      	cmp	r3, #40	; 0x28
 80049f6:	d86d      	bhi.n	8004ad4 <UART_SetConfig+0x624>
 80049f8:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <UART_SetConfig+0x550>)
 80049fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fe:	bf00      	nop
 8004a00:	08004aa5 	.word	0x08004aa5
 8004a04:	08004ad5 	.word	0x08004ad5
 8004a08:	08004ad5 	.word	0x08004ad5
 8004a0c:	08004ad5 	.word	0x08004ad5
 8004a10:	08004ad5 	.word	0x08004ad5
 8004a14:	08004ad5 	.word	0x08004ad5
 8004a18:	08004ad5 	.word	0x08004ad5
 8004a1c:	08004ad5 	.word	0x08004ad5
 8004a20:	08004aad 	.word	0x08004aad
 8004a24:	08004ad5 	.word	0x08004ad5
 8004a28:	08004ad5 	.word	0x08004ad5
 8004a2c:	08004ad5 	.word	0x08004ad5
 8004a30:	08004ad5 	.word	0x08004ad5
 8004a34:	08004ad5 	.word	0x08004ad5
 8004a38:	08004ad5 	.word	0x08004ad5
 8004a3c:	08004ad5 	.word	0x08004ad5
 8004a40:	08004ab5 	.word	0x08004ab5
 8004a44:	08004ad5 	.word	0x08004ad5
 8004a48:	08004ad5 	.word	0x08004ad5
 8004a4c:	08004ad5 	.word	0x08004ad5
 8004a50:	08004ad5 	.word	0x08004ad5
 8004a54:	08004ad5 	.word	0x08004ad5
 8004a58:	08004ad5 	.word	0x08004ad5
 8004a5c:	08004ad5 	.word	0x08004ad5
 8004a60:	08004abd 	.word	0x08004abd
 8004a64:	08004ad5 	.word	0x08004ad5
 8004a68:	08004ad5 	.word	0x08004ad5
 8004a6c:	08004ad5 	.word	0x08004ad5
 8004a70:	08004ad5 	.word	0x08004ad5
 8004a74:	08004ad5 	.word	0x08004ad5
 8004a78:	08004ad5 	.word	0x08004ad5
 8004a7c:	08004ad5 	.word	0x08004ad5
 8004a80:	08004ac5 	.word	0x08004ac5
 8004a84:	08004ad5 	.word	0x08004ad5
 8004a88:	08004ad5 	.word	0x08004ad5
 8004a8c:	08004ad5 	.word	0x08004ad5
 8004a90:	08004ad5 	.word	0x08004ad5
 8004a94:	08004ad5 	.word	0x08004ad5
 8004a98:	08004ad5 	.word	0x08004ad5
 8004a9c:	08004ad5 	.word	0x08004ad5
 8004aa0:	08004acd 	.word	0x08004acd
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aaa:	e0d6      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004aac:	2304      	movs	r3, #4
 8004aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ab2:	e0d2      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004ab4:	2308      	movs	r3, #8
 8004ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aba:	e0ce      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004abc:	2310      	movs	r3, #16
 8004abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ac2:	e0ca      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004ac4:	2320      	movs	r3, #32
 8004ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aca:	e0c6      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004acc:	2340      	movs	r3, #64	; 0x40
 8004ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ad2:	e0c2      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004ad4:	2380      	movs	r3, #128	; 0x80
 8004ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ada:	e0be      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004adc:	40011400 	.word	0x40011400
 8004ae0:	58024400 	.word	0x58024400
 8004ae4:	40007800 	.word	0x40007800
 8004ae8:	40007c00 	.word	0x40007c00
 8004aec:	40011800 	.word	0x40011800
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4aad      	ldr	r2, [pc, #692]	; (8004dac <UART_SetConfig+0x8fc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d176      	bne.n	8004be8 <UART_SetConfig+0x738>
 8004afa:	4bad      	ldr	r3, [pc, #692]	; (8004db0 <UART_SetConfig+0x900>)
 8004afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b02:	2b28      	cmp	r3, #40	; 0x28
 8004b04:	d86c      	bhi.n	8004be0 <UART_SetConfig+0x730>
 8004b06:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <UART_SetConfig+0x65c>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004bb1 	.word	0x08004bb1
 8004b10:	08004be1 	.word	0x08004be1
 8004b14:	08004be1 	.word	0x08004be1
 8004b18:	08004be1 	.word	0x08004be1
 8004b1c:	08004be1 	.word	0x08004be1
 8004b20:	08004be1 	.word	0x08004be1
 8004b24:	08004be1 	.word	0x08004be1
 8004b28:	08004be1 	.word	0x08004be1
 8004b2c:	08004bb9 	.word	0x08004bb9
 8004b30:	08004be1 	.word	0x08004be1
 8004b34:	08004be1 	.word	0x08004be1
 8004b38:	08004be1 	.word	0x08004be1
 8004b3c:	08004be1 	.word	0x08004be1
 8004b40:	08004be1 	.word	0x08004be1
 8004b44:	08004be1 	.word	0x08004be1
 8004b48:	08004be1 	.word	0x08004be1
 8004b4c:	08004bc1 	.word	0x08004bc1
 8004b50:	08004be1 	.word	0x08004be1
 8004b54:	08004be1 	.word	0x08004be1
 8004b58:	08004be1 	.word	0x08004be1
 8004b5c:	08004be1 	.word	0x08004be1
 8004b60:	08004be1 	.word	0x08004be1
 8004b64:	08004be1 	.word	0x08004be1
 8004b68:	08004be1 	.word	0x08004be1
 8004b6c:	08004bc9 	.word	0x08004bc9
 8004b70:	08004be1 	.word	0x08004be1
 8004b74:	08004be1 	.word	0x08004be1
 8004b78:	08004be1 	.word	0x08004be1
 8004b7c:	08004be1 	.word	0x08004be1
 8004b80:	08004be1 	.word	0x08004be1
 8004b84:	08004be1 	.word	0x08004be1
 8004b88:	08004be1 	.word	0x08004be1
 8004b8c:	08004bd1 	.word	0x08004bd1
 8004b90:	08004be1 	.word	0x08004be1
 8004b94:	08004be1 	.word	0x08004be1
 8004b98:	08004be1 	.word	0x08004be1
 8004b9c:	08004be1 	.word	0x08004be1
 8004ba0:	08004be1 	.word	0x08004be1
 8004ba4:	08004be1 	.word	0x08004be1
 8004ba8:	08004be1 	.word	0x08004be1
 8004bac:	08004bd9 	.word	0x08004bd9
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bb6:	e050      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004bb8:	2304      	movs	r3, #4
 8004bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bbe:	e04c      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004bc0:	2308      	movs	r3, #8
 8004bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bc6:	e048      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004bc8:	2310      	movs	r3, #16
 8004bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bce:	e044      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004bd0:	2320      	movs	r3, #32
 8004bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bd6:	e040      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004bd8:	2340      	movs	r3, #64	; 0x40
 8004bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bde:	e03c      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004be0:	2380      	movs	r3, #128	; 0x80
 8004be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004be6:	e038      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a71      	ldr	r2, [pc, #452]	; (8004db4 <UART_SetConfig+0x904>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d130      	bne.n	8004c54 <UART_SetConfig+0x7a4>
 8004bf2:	4b6f      	ldr	r3, [pc, #444]	; (8004db0 <UART_SetConfig+0x900>)
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	2b05      	cmp	r3, #5
 8004bfc:	d826      	bhi.n	8004c4c <UART_SetConfig+0x79c>
 8004bfe:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <UART_SetConfig+0x754>)
 8004c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c04:	08004c1d 	.word	0x08004c1d
 8004c08:	08004c25 	.word	0x08004c25
 8004c0c:	08004c2d 	.word	0x08004c2d
 8004c10:	08004c35 	.word	0x08004c35
 8004c14:	08004c3d 	.word	0x08004c3d
 8004c18:	08004c45 	.word	0x08004c45
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c22:	e01a      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004c24:	2304      	movs	r3, #4
 8004c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c2a:	e016      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004c2c:	2308      	movs	r3, #8
 8004c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c32:	e012      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004c34:	2310      	movs	r3, #16
 8004c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c3a:	e00e      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004c3c:	2320      	movs	r3, #32
 8004c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c42:	e00a      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004c44:	2340      	movs	r3, #64	; 0x40
 8004c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c4a:	e006      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004c4c:	2380      	movs	r3, #128	; 0x80
 8004c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c52:	e002      	b.n	8004c5a <UART_SetConfig+0x7aa>
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a55      	ldr	r2, [pc, #340]	; (8004db4 <UART_SetConfig+0x904>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	f040 80f0 	bne.w	8004e46 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	dc46      	bgt.n	8004cfc <UART_SetConfig+0x84c>
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	db75      	blt.n	8004d5e <UART_SetConfig+0x8ae>
 8004c72:	3b02      	subs	r3, #2
 8004c74:	2b1e      	cmp	r3, #30
 8004c76:	d872      	bhi.n	8004d5e <UART_SetConfig+0x8ae>
 8004c78:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <UART_SetConfig+0x7d0>)
 8004c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7e:	bf00      	nop
 8004c80:	08004d03 	.word	0x08004d03
 8004c84:	08004d5f 	.word	0x08004d5f
 8004c88:	08004d0b 	.word	0x08004d0b
 8004c8c:	08004d5f 	.word	0x08004d5f
 8004c90:	08004d5f 	.word	0x08004d5f
 8004c94:	08004d5f 	.word	0x08004d5f
 8004c98:	08004d1b 	.word	0x08004d1b
 8004c9c:	08004d5f 	.word	0x08004d5f
 8004ca0:	08004d5f 	.word	0x08004d5f
 8004ca4:	08004d5f 	.word	0x08004d5f
 8004ca8:	08004d5f 	.word	0x08004d5f
 8004cac:	08004d5f 	.word	0x08004d5f
 8004cb0:	08004d5f 	.word	0x08004d5f
 8004cb4:	08004d5f 	.word	0x08004d5f
 8004cb8:	08004d2b 	.word	0x08004d2b
 8004cbc:	08004d5f 	.word	0x08004d5f
 8004cc0:	08004d5f 	.word	0x08004d5f
 8004cc4:	08004d5f 	.word	0x08004d5f
 8004cc8:	08004d5f 	.word	0x08004d5f
 8004ccc:	08004d5f 	.word	0x08004d5f
 8004cd0:	08004d5f 	.word	0x08004d5f
 8004cd4:	08004d5f 	.word	0x08004d5f
 8004cd8:	08004d5f 	.word	0x08004d5f
 8004cdc:	08004d5f 	.word	0x08004d5f
 8004ce0:	08004d5f 	.word	0x08004d5f
 8004ce4:	08004d5f 	.word	0x08004d5f
 8004ce8:	08004d5f 	.word	0x08004d5f
 8004cec:	08004d5f 	.word	0x08004d5f
 8004cf0:	08004d5f 	.word	0x08004d5f
 8004cf4:	08004d5f 	.word	0x08004d5f
 8004cf8:	08004d51 	.word	0x08004d51
 8004cfc:	2b40      	cmp	r3, #64	; 0x40
 8004cfe:	d02a      	beq.n	8004d56 <UART_SetConfig+0x8a6>
 8004d00:	e02d      	b.n	8004d5e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004d02:	f7fe fb1f 	bl	8003344 <HAL_RCCEx_GetD3PCLK1Freq>
 8004d06:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004d08:	e02f      	b.n	8004d6a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d0a:	f107 0314 	add.w	r3, r7, #20
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fe fb2e 	bl	8003370 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d18:	e027      	b.n	8004d6a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d1a:	f107 0308 	add.w	r3, r7, #8
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fe fc7a 	bl	8003618 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d28:	e01f      	b.n	8004d6a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d2a:	4b21      	ldr	r3, [pc, #132]	; (8004db0 <UART_SetConfig+0x900>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d009      	beq.n	8004d4a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d36:	4b1e      	ldr	r3, [pc, #120]	; (8004db0 <UART_SetConfig+0x900>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	08db      	lsrs	r3, r3, #3
 8004d3c:	f003 0303 	and.w	r3, r3, #3
 8004d40:	4a1d      	ldr	r2, [pc, #116]	; (8004db8 <UART_SetConfig+0x908>)
 8004d42:	fa22 f303 	lsr.w	r3, r2, r3
 8004d46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d48:	e00f      	b.n	8004d6a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8004d4a:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <UART_SetConfig+0x908>)
 8004d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d4e:	e00c      	b.n	8004d6a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d50:	4b1a      	ldr	r3, [pc, #104]	; (8004dbc <UART_SetConfig+0x90c>)
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d54:	e009      	b.n	8004d6a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d5c:	e005      	b.n	8004d6a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004d68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 81e6 	beq.w	800513e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	4a12      	ldr	r2, [pc, #72]	; (8004dc0 <UART_SetConfig+0x910>)
 8004d78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d84:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	4413      	add	r3, r2
 8004d90:	6a3a      	ldr	r2, [r7, #32]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d305      	bcc.n	8004da2 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d9c:	6a3a      	ldr	r2, [r7, #32]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d910      	bls.n	8004dc4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004da8:	e1c9      	b.n	800513e <UART_SetConfig+0xc8e>
 8004daa:	bf00      	nop
 8004dac:	40011c00 	.word	0x40011c00
 8004db0:	58024400 	.word	0x58024400
 8004db4:	58000c00 	.word	0x58000c00
 8004db8:	03d09000 	.word	0x03d09000
 8004dbc:	003d0900 	.word	0x003d0900
 8004dc0:	08008700 	.word	0x08008700
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f04f 0100 	mov.w	r1, #0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	4ac1      	ldr	r2, [pc, #772]	; (80050d8 <UART_SetConfig+0xc28>)
 8004dd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	f7fb fa88 	bl	80002f0 <__aeabi_uldivmod>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4610      	mov	r0, r2
 8004de6:	4619      	mov	r1, r3
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	020b      	lsls	r3, r1, #8
 8004df2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004df6:	0202      	lsls	r2, r0, #8
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	6849      	ldr	r1, [r1, #4]
 8004dfc:	0849      	lsrs	r1, r1, #1
 8004dfe:	4608      	mov	r0, r1
 8004e00:	f04f 0100 	mov.w	r1, #0
 8004e04:	1814      	adds	r4, r2, r0
 8004e06:	eb43 0501 	adc.w	r5, r3, r1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	4620      	mov	r0, r4
 8004e16:	4629      	mov	r1, r5
 8004e18:	f7fb fa6a 	bl	80002f0 <__aeabi_uldivmod>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4613      	mov	r3, r2
 8004e22:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e2a:	d308      	bcc.n	8004e3e <UART_SetConfig+0x98e>
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e32:	d204      	bcs.n	8004e3e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e3a:	60da      	str	r2, [r3, #12]
 8004e3c:	e17f      	b.n	800513e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004e44:	e17b      	b.n	800513e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e4e:	f040 80bd 	bne.w	8004fcc <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8004e52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e56:	2b20      	cmp	r3, #32
 8004e58:	dc48      	bgt.n	8004eec <UART_SetConfig+0xa3c>
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	db7b      	blt.n	8004f56 <UART_SetConfig+0xaa6>
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d879      	bhi.n	8004f56 <UART_SetConfig+0xaa6>
 8004e62:	a201      	add	r2, pc, #4	; (adr r2, 8004e68 <UART_SetConfig+0x9b8>)
 8004e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e68:	08004ef3 	.word	0x08004ef3
 8004e6c:	08004efb 	.word	0x08004efb
 8004e70:	08004f57 	.word	0x08004f57
 8004e74:	08004f57 	.word	0x08004f57
 8004e78:	08004f03 	.word	0x08004f03
 8004e7c:	08004f57 	.word	0x08004f57
 8004e80:	08004f57 	.word	0x08004f57
 8004e84:	08004f57 	.word	0x08004f57
 8004e88:	08004f13 	.word	0x08004f13
 8004e8c:	08004f57 	.word	0x08004f57
 8004e90:	08004f57 	.word	0x08004f57
 8004e94:	08004f57 	.word	0x08004f57
 8004e98:	08004f57 	.word	0x08004f57
 8004e9c:	08004f57 	.word	0x08004f57
 8004ea0:	08004f57 	.word	0x08004f57
 8004ea4:	08004f57 	.word	0x08004f57
 8004ea8:	08004f23 	.word	0x08004f23
 8004eac:	08004f57 	.word	0x08004f57
 8004eb0:	08004f57 	.word	0x08004f57
 8004eb4:	08004f57 	.word	0x08004f57
 8004eb8:	08004f57 	.word	0x08004f57
 8004ebc:	08004f57 	.word	0x08004f57
 8004ec0:	08004f57 	.word	0x08004f57
 8004ec4:	08004f57 	.word	0x08004f57
 8004ec8:	08004f57 	.word	0x08004f57
 8004ecc:	08004f57 	.word	0x08004f57
 8004ed0:	08004f57 	.word	0x08004f57
 8004ed4:	08004f57 	.word	0x08004f57
 8004ed8:	08004f57 	.word	0x08004f57
 8004edc:	08004f57 	.word	0x08004f57
 8004ee0:	08004f57 	.word	0x08004f57
 8004ee4:	08004f57 	.word	0x08004f57
 8004ee8:	08004f49 	.word	0x08004f49
 8004eec:	2b40      	cmp	r3, #64	; 0x40
 8004eee:	d02e      	beq.n	8004f4e <UART_SetConfig+0xa9e>
 8004ef0:	e031      	b.n	8004f56 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef2:	f7fd faad 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 8004ef6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004ef8:	e033      	b.n	8004f62 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004efa:	f7fd fabf 	bl	800247c <HAL_RCC_GetPCLK2Freq>
 8004efe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004f00:	e02f      	b.n	8004f62 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f02:	f107 0314 	add.w	r3, r7, #20
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fe fa32 	bl	8003370 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f10:	e027      	b.n	8004f62 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f12:	f107 0308 	add.w	r3, r7, #8
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fe fb7e 	bl	8003618 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f20:	e01f      	b.n	8004f62 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f22:	4b6e      	ldr	r3, [pc, #440]	; (80050dc <UART_SetConfig+0xc2c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f2e:	4b6b      	ldr	r3, [pc, #428]	; (80050dc <UART_SetConfig+0xc2c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	08db      	lsrs	r3, r3, #3
 8004f34:	f003 0303 	and.w	r3, r3, #3
 8004f38:	4a69      	ldr	r2, [pc, #420]	; (80050e0 <UART_SetConfig+0xc30>)
 8004f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f40:	e00f      	b.n	8004f62 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8004f42:	4b67      	ldr	r3, [pc, #412]	; (80050e0 <UART_SetConfig+0xc30>)
 8004f44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f46:	e00c      	b.n	8004f62 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f48:	4b66      	ldr	r3, [pc, #408]	; (80050e4 <UART_SetConfig+0xc34>)
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f4c:	e009      	b.n	8004f62 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f54:	e005      	b.n	8004f62 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004f60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 80ea 	beq.w	800513e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	4a5a      	ldr	r2, [pc, #360]	; (80050d8 <UART_SetConfig+0xc28>)
 8004f70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f74:	461a      	mov	r2, r3
 8004f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f78:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f7c:	005a      	lsls	r2, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	085b      	lsrs	r3, r3, #1
 8004f84:	441a      	add	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	2b0f      	cmp	r3, #15
 8004f94:	d916      	bls.n	8004fc4 <UART_SetConfig+0xb14>
 8004f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f9c:	d212      	bcs.n	8004fc4 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f023 030f 	bic.w	r3, r3, #15
 8004fa6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004faa:	085b      	lsrs	r3, r3, #1
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004fc0:	60da      	str	r2, [r3, #12]
 8004fc2:	e0bc      	b.n	800513e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004fca:	e0b8      	b.n	800513e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fcc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	dc4b      	bgt.n	800506c <UART_SetConfig+0xbbc>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f2c0 8087 	blt.w	80050e8 <UART_SetConfig+0xc38>
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	f200 8084 	bhi.w	80050e8 <UART_SetConfig+0xc38>
 8004fe0:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <UART_SetConfig+0xb38>)
 8004fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe6:	bf00      	nop
 8004fe8:	08005073 	.word	0x08005073
 8004fec:	0800507b 	.word	0x0800507b
 8004ff0:	080050e9 	.word	0x080050e9
 8004ff4:	080050e9 	.word	0x080050e9
 8004ff8:	08005083 	.word	0x08005083
 8004ffc:	080050e9 	.word	0x080050e9
 8005000:	080050e9 	.word	0x080050e9
 8005004:	080050e9 	.word	0x080050e9
 8005008:	08005093 	.word	0x08005093
 800500c:	080050e9 	.word	0x080050e9
 8005010:	080050e9 	.word	0x080050e9
 8005014:	080050e9 	.word	0x080050e9
 8005018:	080050e9 	.word	0x080050e9
 800501c:	080050e9 	.word	0x080050e9
 8005020:	080050e9 	.word	0x080050e9
 8005024:	080050e9 	.word	0x080050e9
 8005028:	080050a3 	.word	0x080050a3
 800502c:	080050e9 	.word	0x080050e9
 8005030:	080050e9 	.word	0x080050e9
 8005034:	080050e9 	.word	0x080050e9
 8005038:	080050e9 	.word	0x080050e9
 800503c:	080050e9 	.word	0x080050e9
 8005040:	080050e9 	.word	0x080050e9
 8005044:	080050e9 	.word	0x080050e9
 8005048:	080050e9 	.word	0x080050e9
 800504c:	080050e9 	.word	0x080050e9
 8005050:	080050e9 	.word	0x080050e9
 8005054:	080050e9 	.word	0x080050e9
 8005058:	080050e9 	.word	0x080050e9
 800505c:	080050e9 	.word	0x080050e9
 8005060:	080050e9 	.word	0x080050e9
 8005064:	080050e9 	.word	0x080050e9
 8005068:	080050c9 	.word	0x080050c9
 800506c:	2b40      	cmp	r3, #64	; 0x40
 800506e:	d02e      	beq.n	80050ce <UART_SetConfig+0xc1e>
 8005070:	e03a      	b.n	80050e8 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005072:	f7fd f9ed 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 8005076:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005078:	e03c      	b.n	80050f4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800507a:	f7fd f9ff 	bl	800247c <HAL_RCC_GetPCLK2Freq>
 800507e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005080:	e038      	b.n	80050f4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005082:	f107 0314 	add.w	r3, r7, #20
 8005086:	4618      	mov	r0, r3
 8005088:	f7fe f972 	bl	8003370 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005090:	e030      	b.n	80050f4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005092:	f107 0308 	add.w	r3, r7, #8
 8005096:	4618      	mov	r0, r3
 8005098:	f7fe fabe 	bl	8003618 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050a0:	e028      	b.n	80050f4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050a2:	4b0e      	ldr	r3, [pc, #56]	; (80050dc <UART_SetConfig+0xc2c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d009      	beq.n	80050c2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050ae:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <UART_SetConfig+0xc2c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	08db      	lsrs	r3, r3, #3
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	4a09      	ldr	r2, [pc, #36]	; (80050e0 <UART_SetConfig+0xc30>)
 80050ba:	fa22 f303 	lsr.w	r3, r2, r3
 80050be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050c0:	e018      	b.n	80050f4 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80050c2:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <UART_SetConfig+0xc30>)
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050c6:	e015      	b.n	80050f4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80050c8:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <UART_SetConfig+0xc34>)
 80050ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050cc:	e012      	b.n	80050f4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050d4:	e00e      	b.n	80050f4 <UART_SetConfig+0xc44>
 80050d6:	bf00      	nop
 80050d8:	08008700 	.word	0x08008700
 80050dc:	58024400 	.word	0x58024400
 80050e0:	03d09000 	.word	0x03d09000
 80050e4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80050f2:	bf00      	nop
    }

    if (pclk != 0U)
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d021      	beq.n	800513e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	4a1a      	ldr	r2, [pc, #104]	; (8005168 <UART_SetConfig+0xcb8>)
 8005100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005104:	461a      	mov	r2, r3
 8005106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005108:	fbb3 f2f2 	udiv	r2, r3, r2
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	085b      	lsrs	r3, r3, #1
 8005112:	441a      	add	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	fbb2 f3f3 	udiv	r3, r2, r3
 800511c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800511e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005120:	2b0f      	cmp	r3, #15
 8005122:	d909      	bls.n	8005138 <UART_SetConfig+0xc88>
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800512a:	d205      	bcs.n	8005138 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	b29a      	uxth	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60da      	str	r2, [r3, #12]
 8005136:	e002      	b.n	800513e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800515a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800515e:	4618      	mov	r0, r3
 8005160:	3738      	adds	r7, #56	; 0x38
 8005162:	46bd      	mov	sp, r7
 8005164:	bdb0      	pop	{r4, r5, r7, pc}
 8005166:	bf00      	nop
 8005168:	08008700 	.word	0x08008700

0800516c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005222:	f003 0320 	and.w	r3, r3, #32
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01a      	beq.n	8005282 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800526a:	d10a      	bne.n	8005282 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	605a      	str	r2, [r3, #4]
  }
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052c0:	f7fb fe52 	bl	8000f68 <HAL_GetTick>
 80052c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d10e      	bne.n	80052f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f82f 	bl	8005346 <UART_WaitOnFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e025      	b.n	800533e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d10e      	bne.n	800531e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f819 	bl	8005346 <UART_WaitOnFlagUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e00f      	b.n	800533e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2220      	movs	r2, #32
 8005322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b09c      	sub	sp, #112	; 0x70
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	603b      	str	r3, [r7, #0]
 8005352:	4613      	mov	r3, r2
 8005354:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005356:	e0a9      	b.n	80054ac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800535a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800535e:	f000 80a5 	beq.w	80054ac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005362:	f7fb fe01 	bl	8000f68 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800536e:	429a      	cmp	r2, r3
 8005370:	d302      	bcc.n	8005378 <UART_WaitOnFlagUntilTimeout+0x32>
 8005372:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005374:	2b00      	cmp	r3, #0
 8005376:	d140      	bne.n	80053fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005388:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800538c:	667b      	str	r3, [r7, #100]	; 0x64
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005398:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800539c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e6      	bne.n	8005378 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3308      	adds	r3, #8
 80053b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053bc:	f023 0301 	bic.w	r3, r3, #1
 80053c0:	663b      	str	r3, [r7, #96]	; 0x60
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3308      	adds	r3, #8
 80053c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80053cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053d2:	e841 2300 	strex	r3, r2, [r1]
 80053d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1e5      	bne.n	80053aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e069      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d051      	beq.n	80054ac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005416:	d149      	bne.n	80054ac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005420:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005436:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005440:	637b      	str	r3, [r7, #52]	; 0x34
 8005442:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005448:	e841 2300 	strex	r3, r2, [r1]
 800544c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e6      	bne.n	8005422 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3308      	adds	r3, #8
 800545a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	613b      	str	r3, [r7, #16]
   return(result);
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f023 0301 	bic.w	r3, r3, #1
 800546a:	66bb      	str	r3, [r7, #104]	; 0x68
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3308      	adds	r3, #8
 8005472:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005474:	623a      	str	r2, [r7, #32]
 8005476:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	69f9      	ldr	r1, [r7, #28]
 800547a:	6a3a      	ldr	r2, [r7, #32]
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	61bb      	str	r3, [r7, #24]
   return(result);
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e5      	bne.n	8005454 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2220      	movs	r2, #32
 800548c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e010      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	69da      	ldr	r2, [r3, #28]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4013      	ands	r3, r2
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	bf0c      	ite	eq
 80054bc:	2301      	moveq	r3, #1
 80054be:	2300      	movne	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	f43f af46 	beq.w	8005358 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3770      	adds	r7, #112	; 0x70
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b085      	sub	sp, #20
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d101      	bne.n	80054ec <HAL_UARTEx_DisableFifoMode+0x16>
 80054e8:	2302      	movs	r3, #2
 80054ea:	e027      	b.n	800553c <HAL_UARTEx_DisableFifoMode+0x66>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2224      	movs	r2, #36	; 0x24
 80054f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0201 	bic.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800551a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2220      	movs	r2, #32
 800552e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005558:	2b01      	cmp	r3, #1
 800555a:	d101      	bne.n	8005560 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800555c:	2302      	movs	r3, #2
 800555e:	e02d      	b.n	80055bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2224      	movs	r2, #36	; 0x24
 800556c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0201 	bic.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f84f 	bl	8005640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d101      	bne.n	80055dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055d8:	2302      	movs	r3, #2
 80055da:	e02d      	b.n	8005638 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2224      	movs	r2, #36	; 0x24
 80055e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0201 	bic.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f811 	bl	8005640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2220      	movs	r2, #32
 800562a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800564c:	2b00      	cmp	r3, #0
 800564e:	d108      	bne.n	8005662 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005660:	e031      	b.n	80056c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005662:	2310      	movs	r3, #16
 8005664:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005666:	2310      	movs	r3, #16
 8005668:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	0e5b      	lsrs	r3, r3, #25
 8005672:	b2db      	uxtb	r3, r3
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	0f5b      	lsrs	r3, r3, #29
 8005682:	b2db      	uxtb	r3, r3
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800568a:	7bbb      	ldrb	r3, [r7, #14]
 800568c:	7b3a      	ldrb	r2, [r7, #12]
 800568e:	4911      	ldr	r1, [pc, #68]	; (80056d4 <UARTEx_SetNbDataToProcess+0x94>)
 8005690:	5c8a      	ldrb	r2, [r1, r2]
 8005692:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005696:	7b3a      	ldrb	r2, [r7, #12]
 8005698:	490f      	ldr	r1, [pc, #60]	; (80056d8 <UARTEx_SetNbDataToProcess+0x98>)
 800569a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800569c:	fb93 f3f2 	sdiv	r3, r3, r2
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	7b7a      	ldrb	r2, [r7, #13]
 80056ac:	4909      	ldr	r1, [pc, #36]	; (80056d4 <UARTEx_SetNbDataToProcess+0x94>)
 80056ae:	5c8a      	ldrb	r2, [r1, r2]
 80056b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056b4:	7b7a      	ldrb	r2, [r7, #13]
 80056b6:	4908      	ldr	r1, [pc, #32]	; (80056d8 <UARTEx_SetNbDataToProcess+0x98>)
 80056b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80056be:	b29a      	uxth	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056c6:	bf00      	nop
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	08008718 	.word	0x08008718
 80056d8:	08008720 	.word	0x08008720

080056dc <__NVIC_SetPriority>:
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	4603      	mov	r3, r0
 80056e4:	6039      	str	r1, [r7, #0]
 80056e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80056e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	db0a      	blt.n	8005706 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	490c      	ldr	r1, [pc, #48]	; (8005728 <__NVIC_SetPriority+0x4c>)
 80056f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056fa:	0112      	lsls	r2, r2, #4
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	440b      	add	r3, r1
 8005700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005704:	e00a      	b.n	800571c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	b2da      	uxtb	r2, r3
 800570a:	4908      	ldr	r1, [pc, #32]	; (800572c <__NVIC_SetPriority+0x50>)
 800570c:	88fb      	ldrh	r3, [r7, #6]
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	3b04      	subs	r3, #4
 8005714:	0112      	lsls	r2, r2, #4
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	440b      	add	r3, r1
 800571a:	761a      	strb	r2, [r3, #24]
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	e000e100 	.word	0xe000e100
 800572c:	e000ed00 	.word	0xe000ed00

08005730 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005734:	4b05      	ldr	r3, [pc, #20]	; (800574c <SysTick_Handler+0x1c>)
 8005736:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005738:	f001 fdd4 	bl	80072e4 <xTaskGetSchedulerState>
 800573c:	4603      	mov	r3, r0
 800573e:	2b01      	cmp	r3, #1
 8005740:	d001      	beq.n	8005746 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005742:	f002 fbb9 	bl	8007eb8 <xPortSysTickHandler>
  }
}
 8005746:	bf00      	nop
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	e000e010 	.word	0xe000e010

08005750 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005754:	2100      	movs	r1, #0
 8005756:	f06f 0004 	mvn.w	r0, #4
 800575a:	f7ff ffbf 	bl	80056dc <__NVIC_SetPriority>
#endif
}
 800575e:	bf00      	nop
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800576a:	f3ef 8305 	mrs	r3, IPSR
 800576e:	603b      	str	r3, [r7, #0]
  return(result);
 8005770:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005776:	f06f 0305 	mvn.w	r3, #5
 800577a:	607b      	str	r3, [r7, #4]
 800577c:	e00c      	b.n	8005798 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800577e:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <osKernelInitialize+0x44>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d105      	bne.n	8005792 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005786:	4b08      	ldr	r3, [pc, #32]	; (80057a8 <osKernelInitialize+0x44>)
 8005788:	2201      	movs	r2, #1
 800578a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800578c:	2300      	movs	r3, #0
 800578e:	607b      	str	r3, [r7, #4]
 8005790:	e002      	b.n	8005798 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005796:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005798:	687b      	ldr	r3, [r7, #4]
}
 800579a:	4618      	mov	r0, r3
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	24000098 	.word	0x24000098

080057ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057b2:	f3ef 8305 	mrs	r3, IPSR
 80057b6:	603b      	str	r3, [r7, #0]
  return(result);
 80057b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80057be:	f06f 0305 	mvn.w	r3, #5
 80057c2:	607b      	str	r3, [r7, #4]
 80057c4:	e010      	b.n	80057e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80057c6:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <osKernelStart+0x48>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d109      	bne.n	80057e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80057ce:	f7ff ffbf 	bl	8005750 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80057d2:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <osKernelStart+0x48>)
 80057d4:	2202      	movs	r2, #2
 80057d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80057d8:	f001 f928 	bl	8006a2c <vTaskStartScheduler>
      stat = osOK;
 80057dc:	2300      	movs	r3, #0
 80057de:	607b      	str	r3, [r7, #4]
 80057e0:	e002      	b.n	80057e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80057e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80057e8:	687b      	ldr	r3, [r7, #4]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	24000098 	.word	0x24000098

080057f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08e      	sub	sp, #56	; 0x38
 80057fc:	af04      	add	r7, sp, #16
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005804:	2300      	movs	r3, #0
 8005806:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005808:	f3ef 8305 	mrs	r3, IPSR
 800580c:	617b      	str	r3, [r7, #20]
  return(result);
 800580e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005810:	2b00      	cmp	r3, #0
 8005812:	d17e      	bne.n	8005912 <osThreadNew+0x11a>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d07b      	beq.n	8005912 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800581a:	2380      	movs	r3, #128	; 0x80
 800581c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800581e:	2318      	movs	r3, #24
 8005820:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005822:	2300      	movs	r3, #0
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800582a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d045      	beq.n	80058be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <osThreadNew+0x48>
        name = attr->name;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d008      	beq.n	8005866 <osThreadNew+0x6e>
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	2b38      	cmp	r3, #56	; 0x38
 8005858:	d805      	bhi.n	8005866 <osThreadNew+0x6e>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <osThreadNew+0x72>
        return (NULL);
 8005866:	2300      	movs	r3, #0
 8005868:	e054      	b.n	8005914 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	089b      	lsrs	r3, r3, #2
 8005878:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00e      	beq.n	80058a0 <osThreadNew+0xa8>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	2bbb      	cmp	r3, #187	; 0xbb
 8005888:	d90a      	bls.n	80058a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800588e:	2b00      	cmp	r3, #0
 8005890:	d006      	beq.n	80058a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <osThreadNew+0xa8>
        mem = 1;
 800589a:	2301      	movs	r3, #1
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	e010      	b.n	80058c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10c      	bne.n	80058c2 <osThreadNew+0xca>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d108      	bne.n	80058c2 <osThreadNew+0xca>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d104      	bne.n	80058c2 <osThreadNew+0xca>
          mem = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	61bb      	str	r3, [r7, #24]
 80058bc:	e001      	b.n	80058c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80058be:	2300      	movs	r3, #0
 80058c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d110      	bne.n	80058ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058d0:	9202      	str	r2, [sp, #8]
 80058d2:	9301      	str	r3, [sp, #4]
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	6a3a      	ldr	r2, [r7, #32]
 80058dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 feb8 	bl	8006654 <xTaskCreateStatic>
 80058e4:	4603      	mov	r3, r0
 80058e6:	613b      	str	r3, [r7, #16]
 80058e8:	e013      	b.n	8005912 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d110      	bne.n	8005912 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	f107 0310 	add.w	r3, r7, #16
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 ff03 	bl	800670e <xTaskCreate>
 8005908:	4603      	mov	r3, r0
 800590a:	2b01      	cmp	r3, #1
 800590c:	d001      	beq.n	8005912 <osThreadNew+0x11a>
            hTask = NULL;
 800590e:	2300      	movs	r3, #0
 8005910:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005912:	693b      	ldr	r3, [r7, #16]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3728      	adds	r7, #40	; 0x28
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005924:	f3ef 8305 	mrs	r3, IPSR
 8005928:	60bb      	str	r3, [r7, #8]
  return(result);
 800592a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <osDelay+0x1c>
    stat = osErrorISR;
 8005930:	f06f 0305 	mvn.w	r3, #5
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	e007      	b.n	8005948 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d002      	beq.n	8005948 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f001 f83e 	bl	80069c4 <vTaskDelay>
    }
  }

  return (stat);
 8005948:	68fb      	ldr	r3, [r7, #12]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005952:	b580      	push	{r7, lr}
 8005954:	b08a      	sub	sp, #40	; 0x28
 8005956:	af02      	add	r7, sp, #8
 8005958:	60f8      	str	r0, [r7, #12]
 800595a:	60b9      	str	r1, [r7, #8]
 800595c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800595e:	2300      	movs	r3, #0
 8005960:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005962:	f3ef 8305 	mrs	r3, IPSR
 8005966:	613b      	str	r3, [r7, #16]
  return(result);
 8005968:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800596a:	2b00      	cmp	r3, #0
 800596c:	d15f      	bne.n	8005a2e <osMessageQueueNew+0xdc>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d05c      	beq.n	8005a2e <osMessageQueueNew+0xdc>
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d059      	beq.n	8005a2e <osMessageQueueNew+0xdc>
    mem = -1;
 800597a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800597e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d029      	beq.n	80059da <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d012      	beq.n	80059b4 <osMessageQueueNew+0x62>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	2b4f      	cmp	r3, #79	; 0x4f
 8005994:	d90e      	bls.n	80059b4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695a      	ldr	r2, [r3, #20]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	68b9      	ldr	r1, [r7, #8]
 80059a6:	fb01 f303 	mul.w	r3, r1, r3
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d302      	bcc.n	80059b4 <osMessageQueueNew+0x62>
        mem = 1;
 80059ae:	2301      	movs	r3, #1
 80059b0:	61bb      	str	r3, [r7, #24]
 80059b2:	e014      	b.n	80059de <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d110      	bne.n	80059de <osMessageQueueNew+0x8c>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10c      	bne.n	80059de <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d108      	bne.n	80059de <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d104      	bne.n	80059de <osMessageQueueNew+0x8c>
          mem = 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	61bb      	str	r3, [r7, #24]
 80059d8:	e001      	b.n	80059de <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80059da:	2300      	movs	r3, #0
 80059dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d10b      	bne.n	80059fc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	2100      	movs	r1, #0
 80059ee:	9100      	str	r1, [sp, #0]
 80059f0:	68b9      	ldr	r1, [r7, #8]
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 f970 	bl	8005cd8 <xQueueGenericCreateStatic>
 80059f8:	61f8      	str	r0, [r7, #28]
 80059fa:	e008      	b.n	8005a0e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d105      	bne.n	8005a0e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005a02:	2200      	movs	r2, #0
 8005a04:	68b9      	ldr	r1, [r7, #8]
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 f9de 	bl	8005dc8 <xQueueGenericCreate>
 8005a0c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00c      	beq.n	8005a2e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	e001      	b.n	8005a26 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005a26:	6979      	ldr	r1, [r7, #20]
 8005a28:	69f8      	ldr	r0, [r7, #28]
 8005a2a:	f000 fdb5 	bl	8006598 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005a2e:	69fb      	ldr	r3, [r7, #28]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3720      	adds	r7, #32
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4a07      	ldr	r2, [pc, #28]	; (8005a64 <vApplicationGetIdleTaskMemory+0x2c>)
 8005a48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	4a06      	ldr	r2, [pc, #24]	; (8005a68 <vApplicationGetIdleTaskMemory+0x30>)
 8005a4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2280      	movs	r2, #128	; 0x80
 8005a54:	601a      	str	r2, [r3, #0]
}
 8005a56:	bf00      	nop
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	2400009c 	.word	0x2400009c
 8005a68:	24000158 	.word	0x24000158

08005a6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4a07      	ldr	r2, [pc, #28]	; (8005a98 <vApplicationGetTimerTaskMemory+0x2c>)
 8005a7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	4a06      	ldr	r2, [pc, #24]	; (8005a9c <vApplicationGetTimerTaskMemory+0x30>)
 8005a82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a8a:	601a      	str	r2, [r3, #0]
}
 8005a8c:	bf00      	nop
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	24000358 	.word	0x24000358
 8005a9c:	24000414 	.word	0x24000414

08005aa0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f103 0208 	add.w	r2, r3, #8
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ab8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f103 0208 	add.w	r2, r3, #8
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f103 0208 	add.w	r2, r3, #8
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005afa:	b480      	push	{r7}
 8005afc:	b085      	sub	sp, #20
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	601a      	str	r2, [r3, #0]
}
 8005b36:	bf00      	nop
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b42:	b480      	push	{r7}
 8005b44:	b085      	sub	sp, #20
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b58:	d103      	bne.n	8005b62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	e00c      	b.n	8005b7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3308      	adds	r3, #8
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	e002      	b.n	8005b70 <vListInsert+0x2e>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d2f6      	bcs.n	8005b6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	601a      	str	r2, [r3, #0]
}
 8005ba8:	bf00      	nop
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6892      	ldr	r2, [r2, #8]
 8005bca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6852      	ldr	r2, [r2, #4]
 8005bd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d103      	bne.n	8005be8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	1e5a      	subs	r2, r3, #1
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c2e:	bf00      	nop
 8005c30:	e7fe      	b.n	8005c30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c32:	f002 f8af 	bl	8007d94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3e:	68f9      	ldr	r1, [r7, #12]
 8005c40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c42:	fb01 f303 	mul.w	r3, r1, r3
 8005c46:	441a      	add	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c62:	3b01      	subs	r3, #1
 8005c64:	68f9      	ldr	r1, [r7, #12]
 8005c66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	441a      	add	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	22ff      	movs	r2, #255	; 0xff
 8005c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	22ff      	movs	r2, #255	; 0xff
 8005c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d114      	bne.n	8005cb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d01a      	beq.n	8005cc6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3310      	adds	r3, #16
 8005c94:	4618      	mov	r0, r3
 8005c96:	f001 f963 	bl	8006f60 <xTaskRemoveFromEventList>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d012      	beq.n	8005cc6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ca0:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <xQueueGenericReset+0xcc>)
 8005ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	e009      	b.n	8005cc6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3310      	adds	r3, #16
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7ff fef2 	bl	8005aa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3324      	adds	r3, #36	; 0x24
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7ff feed 	bl	8005aa0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005cc6:	f002 f895 	bl	8007df4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005cca:	2301      	movs	r3, #1
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	e000ed04 	.word	0xe000ed04

08005cd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08e      	sub	sp, #56	; 0x38
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
 8005ce4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10a      	bne.n	8005d02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cfe:	bf00      	nop
 8005d00:	e7fe      	b.n	8005d00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d1a:	bf00      	nop
 8005d1c:	e7fe      	b.n	8005d1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <xQueueGenericCreateStatic+0x52>
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <xQueueGenericCreateStatic+0x56>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <xQueueGenericCreateStatic+0x58>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10a      	bne.n	8005d4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	623b      	str	r3, [r7, #32]
}
 8005d46:	bf00      	nop
 8005d48:	e7fe      	b.n	8005d48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d102      	bne.n	8005d56 <xQueueGenericCreateStatic+0x7e>
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <xQueueGenericCreateStatic+0x82>
 8005d56:	2301      	movs	r3, #1
 8005d58:	e000      	b.n	8005d5c <xQueueGenericCreateStatic+0x84>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10a      	bne.n	8005d76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	61fb      	str	r3, [r7, #28]
}
 8005d72:	bf00      	nop
 8005d74:	e7fe      	b.n	8005d74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d76:	2350      	movs	r3, #80	; 0x50
 8005d78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b50      	cmp	r3, #80	; 0x50
 8005d7e:	d00a      	beq.n	8005d96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	61bb      	str	r3, [r7, #24]
}
 8005d92:	bf00      	nop
 8005d94:	e7fe      	b.n	8005d94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00d      	beq.n	8005dbe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005daa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	4613      	mov	r3, r2
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	68b9      	ldr	r1, [r7, #8]
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 f83f 	bl	8005e3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3730      	adds	r7, #48	; 0x30
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08a      	sub	sp, #40	; 0x28
 8005dcc:	af02      	add	r7, sp, #8
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10a      	bne.n	8005df2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	613b      	str	r3, [r7, #16]
}
 8005dee:	bf00      	nop
 8005df0:	e7fe      	b.n	8005df0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	fb02 f303 	mul.w	r3, r2, r3
 8005dfa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	3350      	adds	r3, #80	; 0x50
 8005e00:	4618      	mov	r0, r3
 8005e02:	f002 f8e9 	bl	8007fd8 <pvPortMalloc>
 8005e06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d011      	beq.n	8005e32 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	3350      	adds	r3, #80	; 0x50
 8005e16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e20:	79fa      	ldrb	r2, [r7, #7]
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	4613      	mov	r3, r2
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 f805 	bl	8005e3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e32:	69bb      	ldr	r3, [r7, #24]
	}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3720      	adds	r7, #32
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d103      	bne.n	8005e58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	e002      	b.n	8005e5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	69b8      	ldr	r0, [r7, #24]
 8005e6e:	f7ff fecb 	bl	8005c08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	78fa      	ldrb	r2, [r7, #3]
 8005e76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e7a:	bf00      	nop
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b08e      	sub	sp, #56	; 0x38
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e92:	2300      	movs	r3, #0
 8005e94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10a      	bne.n	8005eb6 <xQueueGenericSend+0x32>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005eb2:	bf00      	nop
 8005eb4:	e7fe      	b.n	8005eb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d103      	bne.n	8005ec4 <xQueueGenericSend+0x40>
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <xQueueGenericSend+0x44>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e000      	b.n	8005eca <xQueueGenericSend+0x46>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10a      	bne.n	8005ee4 <xQueueGenericSend+0x60>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ee0:	bf00      	nop
 8005ee2:	e7fe      	b.n	8005ee2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d103      	bne.n	8005ef2 <xQueueGenericSend+0x6e>
 8005eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <xQueueGenericSend+0x72>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <xQueueGenericSend+0x74>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10a      	bne.n	8005f12 <xQueueGenericSend+0x8e>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	623b      	str	r3, [r7, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	e7fe      	b.n	8005f10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f12:	f001 f9e7 	bl	80072e4 <xTaskGetSchedulerState>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d102      	bne.n	8005f22 <xQueueGenericSend+0x9e>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <xQueueGenericSend+0xa2>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <xQueueGenericSend+0xa4>
 8005f26:	2300      	movs	r3, #0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10a      	bne.n	8005f42 <xQueueGenericSend+0xbe>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	61fb      	str	r3, [r7, #28]
}
 8005f3e:	bf00      	nop
 8005f40:	e7fe      	b.n	8005f40 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f42:	f001 ff27 	bl	8007d94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d302      	bcc.n	8005f58 <xQueueGenericSend+0xd4>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d129      	bne.n	8005fac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f5e:	f000 fa0b 	bl	8006378 <prvCopyDataToQueue>
 8005f62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d010      	beq.n	8005f8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	3324      	adds	r3, #36	; 0x24
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 fff5 	bl	8006f60 <xTaskRemoveFromEventList>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d013      	beq.n	8005fa4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f7c:	4b3f      	ldr	r3, [pc, #252]	; (800607c <xQueueGenericSend+0x1f8>)
 8005f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	e00a      	b.n	8005fa4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d007      	beq.n	8005fa4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f94:	4b39      	ldr	r3, [pc, #228]	; (800607c <xQueueGenericSend+0x1f8>)
 8005f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005fa4:	f001 ff26 	bl	8007df4 <vPortExitCritical>
				return pdPASS;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e063      	b.n	8006074 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d103      	bne.n	8005fba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fb2:	f001 ff1f 	bl	8007df4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	e05c      	b.n	8006074 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d106      	bne.n	8005fce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fc0:	f107 0314 	add.w	r3, r7, #20
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f001 f82f 	bl	8007028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fce:	f001 ff11 	bl	8007df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fd2:	f000 fd9b 	bl	8006b0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fd6:	f001 fedd 	bl	8007d94 <vPortEnterCritical>
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fe0:	b25b      	sxtb	r3, r3
 8005fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fe6:	d103      	bne.n	8005ff0 <xQueueGenericSend+0x16c>
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ff6:	b25b      	sxtb	r3, r3
 8005ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ffc:	d103      	bne.n	8006006 <xQueueGenericSend+0x182>
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006006:	f001 fef5 	bl	8007df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800600a:	1d3a      	adds	r2, r7, #4
 800600c:	f107 0314 	add.w	r3, r7, #20
 8006010:	4611      	mov	r1, r2
 8006012:	4618      	mov	r0, r3
 8006014:	f001 f81e 	bl	8007054 <xTaskCheckForTimeOut>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d124      	bne.n	8006068 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800601e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006020:	f000 faa2 	bl	8006568 <prvIsQueueFull>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d018      	beq.n	800605c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	3310      	adds	r3, #16
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	4611      	mov	r1, r2
 8006032:	4618      	mov	r0, r3
 8006034:	f000 ff44 	bl	8006ec0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800603a:	f000 fa2d 	bl	8006498 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800603e:	f000 fd73 	bl	8006b28 <xTaskResumeAll>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	f47f af7c 	bne.w	8005f42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800604a:	4b0c      	ldr	r3, [pc, #48]	; (800607c <xQueueGenericSend+0x1f8>)
 800604c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	e772      	b.n	8005f42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800605c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800605e:	f000 fa1b 	bl	8006498 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006062:	f000 fd61 	bl	8006b28 <xTaskResumeAll>
 8006066:	e76c      	b.n	8005f42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800606a:	f000 fa15 	bl	8006498 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800606e:	f000 fd5b 	bl	8006b28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006072:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006074:	4618      	mov	r0, r3
 8006076:	3738      	adds	r7, #56	; 0x38
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	e000ed04 	.word	0xe000ed04

08006080 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b090      	sub	sp, #64	; 0x40
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10a      	bne.n	80060ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060aa:	bf00      	nop
 80060ac:	e7fe      	b.n	80060ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d103      	bne.n	80060bc <xQueueGenericSendFromISR+0x3c>
 80060b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <xQueueGenericSendFromISR+0x40>
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <xQueueGenericSendFromISR+0x42>
 80060c0:	2300      	movs	r3, #0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10a      	bne.n	80060dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060d8:	bf00      	nop
 80060da:	e7fe      	b.n	80060da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d103      	bne.n	80060ea <xQueueGenericSendFromISR+0x6a>
 80060e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <xQueueGenericSendFromISR+0x6e>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <xQueueGenericSendFromISR+0x70>
 80060ee:	2300      	movs	r3, #0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	623b      	str	r3, [r7, #32]
}
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800610a:	f001 ff25 	bl	8007f58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800610e:	f3ef 8211 	mrs	r2, BASEPRI
 8006112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	61fa      	str	r2, [r7, #28]
 8006124:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006126:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006128:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800612e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006132:	429a      	cmp	r2, r3
 8006134:	d302      	bcc.n	800613c <xQueueGenericSendFromISR+0xbc>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b02      	cmp	r3, #2
 800613a:	d12f      	bne.n	800619c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	68b9      	ldr	r1, [r7, #8]
 8006150:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006152:	f000 f911 	bl	8006378 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006156:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800615a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800615e:	d112      	bne.n	8006186 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	2b00      	cmp	r3, #0
 8006166:	d016      	beq.n	8006196 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616a:	3324      	adds	r3, #36	; 0x24
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fef7 	bl	8006f60 <xTaskRemoveFromEventList>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00e      	beq.n	8006196 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00b      	beq.n	8006196 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	e007      	b.n	8006196 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006186:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800618a:	3301      	adds	r3, #1
 800618c:	b2db      	uxtb	r3, r3
 800618e:	b25a      	sxtb	r2, r3
 8006190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006196:	2301      	movs	r3, #1
 8006198:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800619a:	e001      	b.n	80061a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800619c:	2300      	movs	r3, #0
 800619e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3740      	adds	r7, #64	; 0x40
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08c      	sub	sp, #48	; 0x30
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061c4:	2300      	movs	r3, #0
 80061c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10a      	bne.n	80061e8 <xQueueReceive+0x30>
	__asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	623b      	str	r3, [r7, #32]
}
 80061e4:	bf00      	nop
 80061e6:	e7fe      	b.n	80061e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d103      	bne.n	80061f6 <xQueueReceive+0x3e>
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <xQueueReceive+0x42>
 80061f6:	2301      	movs	r3, #1
 80061f8:	e000      	b.n	80061fc <xQueueReceive+0x44>
 80061fa:	2300      	movs	r3, #0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10a      	bne.n	8006216 <xQueueReceive+0x5e>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	61fb      	str	r3, [r7, #28]
}
 8006212:	bf00      	nop
 8006214:	e7fe      	b.n	8006214 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006216:	f001 f865 	bl	80072e4 <xTaskGetSchedulerState>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d102      	bne.n	8006226 <xQueueReceive+0x6e>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <xQueueReceive+0x72>
 8006226:	2301      	movs	r3, #1
 8006228:	e000      	b.n	800622c <xQueueReceive+0x74>
 800622a:	2300      	movs	r3, #0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10a      	bne.n	8006246 <xQueueReceive+0x8e>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	61bb      	str	r3, [r7, #24]
}
 8006242:	bf00      	nop
 8006244:	e7fe      	b.n	8006244 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006246:	f001 fda5 	bl	8007d94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	2b00      	cmp	r3, #0
 8006254:	d01f      	beq.n	8006296 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800625a:	f000 f8f7 	bl	800644c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	1e5a      	subs	r2, r3, #1
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00f      	beq.n	800628e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	3310      	adds	r3, #16
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fe74 	bl	8006f60 <xTaskRemoveFromEventList>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d007      	beq.n	800628e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800627e:	4b3d      	ldr	r3, [pc, #244]	; (8006374 <xQueueReceive+0x1bc>)
 8006280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800628e:	f001 fdb1 	bl	8007df4 <vPortExitCritical>
				return pdPASS;
 8006292:	2301      	movs	r3, #1
 8006294:	e069      	b.n	800636a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d103      	bne.n	80062a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800629c:	f001 fdaa 	bl	8007df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062a0:	2300      	movs	r3, #0
 80062a2:	e062      	b.n	800636a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d106      	bne.n	80062b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062aa:	f107 0310 	add.w	r3, r7, #16
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 feba 	bl	8007028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062b4:	2301      	movs	r3, #1
 80062b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062b8:	f001 fd9c 	bl	8007df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062bc:	f000 fc26 	bl	8006b0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062c0:	f001 fd68 	bl	8007d94 <vPortEnterCritical>
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062ca:	b25b      	sxtb	r3, r3
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062d0:	d103      	bne.n	80062da <xQueueReceive+0x122>
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062e0:	b25b      	sxtb	r3, r3
 80062e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062e6:	d103      	bne.n	80062f0 <xQueueReceive+0x138>
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062f0:	f001 fd80 	bl	8007df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062f4:	1d3a      	adds	r2, r7, #4
 80062f6:	f107 0310 	add.w	r3, r7, #16
 80062fa:	4611      	mov	r1, r2
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fea9 	bl	8007054 <xTaskCheckForTimeOut>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d123      	bne.n	8006350 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800630a:	f000 f917 	bl	800653c <prvIsQueueEmpty>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d017      	beq.n	8006344 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	3324      	adds	r3, #36	; 0x24
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	4611      	mov	r1, r2
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fdcf 	bl	8006ec0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006324:	f000 f8b8 	bl	8006498 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006328:	f000 fbfe 	bl	8006b28 <xTaskResumeAll>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d189      	bne.n	8006246 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006332:	4b10      	ldr	r3, [pc, #64]	; (8006374 <xQueueReceive+0x1bc>)
 8006334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	e780      	b.n	8006246 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006346:	f000 f8a7 	bl	8006498 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800634a:	f000 fbed 	bl	8006b28 <xTaskResumeAll>
 800634e:	e77a      	b.n	8006246 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006352:	f000 f8a1 	bl	8006498 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006356:	f000 fbe7 	bl	8006b28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800635a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800635c:	f000 f8ee 	bl	800653c <prvIsQueueEmpty>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	f43f af6f 	beq.w	8006246 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006368:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800636a:	4618      	mov	r0, r3
 800636c:	3730      	adds	r7, #48	; 0x30
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	e000ed04 	.word	0xe000ed04

08006378 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006384:	2300      	movs	r3, #0
 8006386:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10d      	bne.n	80063b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d14d      	bne.n	800643a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 ffbc 	bl	8007320 <xTaskPriorityDisinherit>
 80063a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	609a      	str	r2, [r3, #8]
 80063b0:	e043      	b.n	800643a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d119      	bne.n	80063ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6858      	ldr	r0, [r3, #4]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	461a      	mov	r2, r3
 80063c2:	68b9      	ldr	r1, [r7, #8]
 80063c4:	f002 f818 	bl	80083f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	441a      	add	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	685a      	ldr	r2, [r3, #4]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d32b      	bcc.n	800643a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	605a      	str	r2, [r3, #4]
 80063ea:	e026      	b.n	800643a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	68d8      	ldr	r0, [r3, #12]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f4:	461a      	mov	r2, r3
 80063f6:	68b9      	ldr	r1, [r7, #8]
 80063f8:	f001 fffe 	bl	80083f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006404:	425b      	negs	r3, r3
 8006406:	441a      	add	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	429a      	cmp	r2, r3
 8006416:	d207      	bcs.n	8006428 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006420:	425b      	negs	r3, r3
 8006422:	441a      	add	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b02      	cmp	r3, #2
 800642c:	d105      	bne.n	800643a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d002      	beq.n	800643a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	3b01      	subs	r3, #1
 8006438:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	1c5a      	adds	r2, r3, #1
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006442:	697b      	ldr	r3, [r7, #20]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	2b00      	cmp	r3, #0
 800645c:	d018      	beq.n	8006490 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	441a      	add	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	429a      	cmp	r2, r3
 8006476:	d303      	bcc.n	8006480 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68d9      	ldr	r1, [r3, #12]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006488:	461a      	mov	r2, r3
 800648a:	6838      	ldr	r0, [r7, #0]
 800648c:	f001 ffb4 	bl	80083f8 <memcpy>
	}
}
 8006490:	bf00      	nop
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80064a0:	f001 fc78 	bl	8007d94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064ac:	e011      	b.n	80064d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d012      	beq.n	80064dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	3324      	adds	r3, #36	; 0x24
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 fd50 	bl	8006f60 <xTaskRemoveFromEventList>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064c6:	f000 fe27 	bl	8007118 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	dce9      	bgt.n	80064ae <prvUnlockQueue+0x16>
 80064da:	e000      	b.n	80064de <prvUnlockQueue+0x46>
					break;
 80064dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	22ff      	movs	r2, #255	; 0xff
 80064e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80064e6:	f001 fc85 	bl	8007df4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064ea:	f001 fc53 	bl	8007d94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064f6:	e011      	b.n	800651c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d012      	beq.n	8006526 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3310      	adds	r3, #16
 8006504:	4618      	mov	r0, r3
 8006506:	f000 fd2b 	bl	8006f60 <xTaskRemoveFromEventList>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006510:	f000 fe02 	bl	8007118 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006514:	7bbb      	ldrb	r3, [r7, #14]
 8006516:	3b01      	subs	r3, #1
 8006518:	b2db      	uxtb	r3, r3
 800651a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800651c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006520:	2b00      	cmp	r3, #0
 8006522:	dce9      	bgt.n	80064f8 <prvUnlockQueue+0x60>
 8006524:	e000      	b.n	8006528 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006526:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	22ff      	movs	r2, #255	; 0xff
 800652c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006530:	f001 fc60 	bl	8007df4 <vPortExitCritical>
}
 8006534:	bf00      	nop
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006544:	f001 fc26 	bl	8007d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	2b00      	cmp	r3, #0
 800654e:	d102      	bne.n	8006556 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006550:	2301      	movs	r3, #1
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	e001      	b.n	800655a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800655a:	f001 fc4b 	bl	8007df4 <vPortExitCritical>

	return xReturn;
 800655e:	68fb      	ldr	r3, [r7, #12]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006570:	f001 fc10 	bl	8007d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657c:	429a      	cmp	r2, r3
 800657e:	d102      	bne.n	8006586 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006580:	2301      	movs	r3, #1
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	e001      	b.n	800658a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006586:	2300      	movs	r3, #0
 8006588:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800658a:	f001 fc33 	bl	8007df4 <vPortExitCritical>

	return xReturn;
 800658e:	68fb      	ldr	r3, [r7, #12]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	e014      	b.n	80065d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80065a8:	4a0f      	ldr	r2, [pc, #60]	; (80065e8 <vQueueAddToRegistry+0x50>)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10b      	bne.n	80065cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80065b4:	490c      	ldr	r1, [pc, #48]	; (80065e8 <vQueueAddToRegistry+0x50>)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80065be:	4a0a      	ldr	r2, [pc, #40]	; (80065e8 <vQueueAddToRegistry+0x50>)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	4413      	add	r3, r2
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065ca:	e006      	b.n	80065da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3301      	adds	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2b07      	cmp	r3, #7
 80065d6:	d9e7      	bls.n	80065a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065d8:	bf00      	nop
 80065da:	bf00      	nop
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	24004bd0 	.word	0x24004bd0

080065ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065fc:	f001 fbca 	bl	8007d94 <vPortEnterCritical>
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006606:	b25b      	sxtb	r3, r3
 8006608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800660c:	d103      	bne.n	8006616 <vQueueWaitForMessageRestricted+0x2a>
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800661c:	b25b      	sxtb	r3, r3
 800661e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006622:	d103      	bne.n	800662c <vQueueWaitForMessageRestricted+0x40>
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800662c:	f001 fbe2 	bl	8007df4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006634:	2b00      	cmp	r3, #0
 8006636:	d106      	bne.n	8006646 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	3324      	adds	r3, #36	; 0x24
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	68b9      	ldr	r1, [r7, #8]
 8006640:	4618      	mov	r0, r3
 8006642:	f000 fc61 	bl	8006f08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006646:	6978      	ldr	r0, [r7, #20]
 8006648:	f7ff ff26 	bl	8006498 <prvUnlockQueue>
	}
 800664c:	bf00      	nop
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006654:	b580      	push	{r7, lr}
 8006656:	b08e      	sub	sp, #56	; 0x38
 8006658:	af04      	add	r7, sp, #16
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
 8006660:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10a      	bne.n	800667e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	623b      	str	r3, [r7, #32]
}
 800667a:	bf00      	nop
 800667c:	e7fe      	b.n	800667c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <xTaskCreateStatic+0x46>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	61fb      	str	r3, [r7, #28]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800669a:	23bc      	movs	r3, #188	; 0xbc
 800669c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	2bbc      	cmp	r3, #188	; 0xbc
 80066a2:	d00a      	beq.n	80066ba <xTaskCreateStatic+0x66>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	61bb      	str	r3, [r7, #24]
}
 80066b6:	bf00      	nop
 80066b8:	e7fe      	b.n	80066b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d01e      	beq.n	8006700 <xTaskCreateStatic+0xac>
 80066c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01b      	beq.n	8006700 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	2202      	movs	r2, #2
 80066d6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066da:	2300      	movs	r3, #0
 80066dc:	9303      	str	r3, [sp, #12]
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	9302      	str	r3, [sp, #8]
 80066e2:	f107 0314 	add.w	r3, r7, #20
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	68b9      	ldr	r1, [r7, #8]
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 f850 	bl	8006798 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066fa:	f000 f8f3 	bl	80068e4 <prvAddNewTaskToReadyList>
 80066fe:	e001      	b.n	8006704 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006700:	2300      	movs	r3, #0
 8006702:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006704:	697b      	ldr	r3, [r7, #20]
	}
 8006706:	4618      	mov	r0, r3
 8006708:	3728      	adds	r7, #40	; 0x28
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800670e:	b580      	push	{r7, lr}
 8006710:	b08c      	sub	sp, #48	; 0x30
 8006712:	af04      	add	r7, sp, #16
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	603b      	str	r3, [r7, #0]
 800671a:	4613      	mov	r3, r2
 800671c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800671e:	88fb      	ldrh	r3, [r7, #6]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4618      	mov	r0, r3
 8006724:	f001 fc58 	bl	8007fd8 <pvPortMalloc>
 8006728:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00e      	beq.n	800674e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006730:	20bc      	movs	r0, #188	; 0xbc
 8006732:	f001 fc51 	bl	8007fd8 <pvPortMalloc>
 8006736:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	631a      	str	r2, [r3, #48]	; 0x30
 8006744:	e005      	b.n	8006752 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006746:	6978      	ldr	r0, [r7, #20]
 8006748:	f001 fd12 	bl	8008170 <vPortFree>
 800674c:	e001      	b.n	8006752 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800674e:	2300      	movs	r3, #0
 8006750:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d017      	beq.n	8006788 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006760:	88fa      	ldrh	r2, [r7, #6]
 8006762:	2300      	movs	r3, #0
 8006764:	9303      	str	r3, [sp, #12]
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	9302      	str	r3, [sp, #8]
 800676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676c:	9301      	str	r3, [sp, #4]
 800676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	68b9      	ldr	r1, [r7, #8]
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 f80e 	bl	8006798 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800677c:	69f8      	ldr	r0, [r7, #28]
 800677e:	f000 f8b1 	bl	80068e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006782:	2301      	movs	r3, #1
 8006784:	61bb      	str	r3, [r7, #24]
 8006786:	e002      	b.n	800678e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800678c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800678e:	69bb      	ldr	r3, [r7, #24]
	}
 8006790:	4618      	mov	r0, r3
 8006792:	3720      	adds	r7, #32
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b088      	sub	sp, #32
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	461a      	mov	r2, r3
 80067b0:	21a5      	movs	r1, #165	; 0xa5
 80067b2:	f001 fe2f 	bl	8008414 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80067c0:	440b      	add	r3, r1
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	f023 0307 	bic.w	r3, r3, #7
 80067ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	f003 0307 	and.w	r3, r3, #7
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00a      	beq.n	80067f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80067da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	617b      	str	r3, [r7, #20]
}
 80067ec:	bf00      	nop
 80067ee:	e7fe      	b.n	80067ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d01f      	beq.n	8006836 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067f6:	2300      	movs	r3, #0
 80067f8:	61fb      	str	r3, [r7, #28]
 80067fa:	e012      	b.n	8006822 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	4413      	add	r3, r2
 8006802:	7819      	ldrb	r1, [r3, #0]
 8006804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	4413      	add	r3, r2
 800680a:	3334      	adds	r3, #52	; 0x34
 800680c:	460a      	mov	r2, r1
 800680e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	4413      	add	r3, r2
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d006      	beq.n	800682a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	3301      	adds	r3, #1
 8006820:	61fb      	str	r3, [r7, #28]
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	2b0f      	cmp	r3, #15
 8006826:	d9e9      	bls.n	80067fc <prvInitialiseNewTask+0x64>
 8006828:	e000      	b.n	800682c <prvInitialiseNewTask+0x94>
			{
				break;
 800682a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800682c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006834:	e003      	b.n	800683e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006840:	2b37      	cmp	r3, #55	; 0x37
 8006842:	d901      	bls.n	8006848 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006844:	2337      	movs	r3, #55	; 0x37
 8006846:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800684c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006852:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006856:	2200      	movs	r2, #0
 8006858:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	3304      	adds	r3, #4
 800685e:	4618      	mov	r0, r3
 8006860:	f7ff f93e 	bl	8005ae0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006866:	3318      	adds	r3, #24
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff f939 	bl	8005ae0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006872:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006882:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	2200      	movs	r2, #0
 8006888:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688e:	2200      	movs	r2, #0
 8006890:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	3354      	adds	r3, #84	; 0x54
 8006898:	2260      	movs	r2, #96	; 0x60
 800689a:	2100      	movs	r1, #0
 800689c:	4618      	mov	r0, r3
 800689e:	f001 fdb9 	bl	8008414 <memset>
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	4a0c      	ldr	r2, [pc, #48]	; (80068d8 <prvInitialiseNewTask+0x140>)
 80068a6:	659a      	str	r2, [r3, #88]	; 0x58
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	4a0c      	ldr	r2, [pc, #48]	; (80068dc <prvInitialiseNewTask+0x144>)
 80068ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	4a0b      	ldr	r2, [pc, #44]	; (80068e0 <prvInitialiseNewTask+0x148>)
 80068b2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	68f9      	ldr	r1, [r7, #12]
 80068b8:	69b8      	ldr	r0, [r7, #24]
 80068ba:	f001 f941 	bl	8007b40 <pxPortInitialiseStack>
 80068be:	4602      	mov	r2, r0
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068d0:	bf00      	nop
 80068d2:	3720      	adds	r7, #32
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	08008748 	.word	0x08008748
 80068dc:	08008768 	.word	0x08008768
 80068e0:	08008728 	.word	0x08008728

080068e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068ec:	f001 fa52 	bl	8007d94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068f0:	4b2d      	ldr	r3, [pc, #180]	; (80069a8 <prvAddNewTaskToReadyList+0xc4>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3301      	adds	r3, #1
 80068f6:	4a2c      	ldr	r2, [pc, #176]	; (80069a8 <prvAddNewTaskToReadyList+0xc4>)
 80068f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068fa:	4b2c      	ldr	r3, [pc, #176]	; (80069ac <prvAddNewTaskToReadyList+0xc8>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006902:	4a2a      	ldr	r2, [pc, #168]	; (80069ac <prvAddNewTaskToReadyList+0xc8>)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006908:	4b27      	ldr	r3, [pc, #156]	; (80069a8 <prvAddNewTaskToReadyList+0xc4>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d110      	bne.n	8006932 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006910:	f000 fc26 	bl	8007160 <prvInitialiseTaskLists>
 8006914:	e00d      	b.n	8006932 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006916:	4b26      	ldr	r3, [pc, #152]	; (80069b0 <prvAddNewTaskToReadyList+0xcc>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d109      	bne.n	8006932 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800691e:	4b23      	ldr	r3, [pc, #140]	; (80069ac <prvAddNewTaskToReadyList+0xc8>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006928:	429a      	cmp	r2, r3
 800692a:	d802      	bhi.n	8006932 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800692c:	4a1f      	ldr	r2, [pc, #124]	; (80069ac <prvAddNewTaskToReadyList+0xc8>)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006932:	4b20      	ldr	r3, [pc, #128]	; (80069b4 <prvAddNewTaskToReadyList+0xd0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3301      	adds	r3, #1
 8006938:	4a1e      	ldr	r2, [pc, #120]	; (80069b4 <prvAddNewTaskToReadyList+0xd0>)
 800693a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800693c:	4b1d      	ldr	r3, [pc, #116]	; (80069b4 <prvAddNewTaskToReadyList+0xd0>)
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006948:	4b1b      	ldr	r3, [pc, #108]	; (80069b8 <prvAddNewTaskToReadyList+0xd4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	429a      	cmp	r2, r3
 800694e:	d903      	bls.n	8006958 <prvAddNewTaskToReadyList+0x74>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006954:	4a18      	ldr	r2, [pc, #96]	; (80069b8 <prvAddNewTaskToReadyList+0xd4>)
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695c:	4613      	mov	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4a15      	ldr	r2, [pc, #84]	; (80069bc <prvAddNewTaskToReadyList+0xd8>)
 8006966:	441a      	add	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3304      	adds	r3, #4
 800696c:	4619      	mov	r1, r3
 800696e:	4610      	mov	r0, r2
 8006970:	f7ff f8c3 	bl	8005afa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006974:	f001 fa3e 	bl	8007df4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006978:	4b0d      	ldr	r3, [pc, #52]	; (80069b0 <prvAddNewTaskToReadyList+0xcc>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00e      	beq.n	800699e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006980:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <prvAddNewTaskToReadyList+0xc8>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698a:	429a      	cmp	r2, r3
 800698c:	d207      	bcs.n	800699e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800698e:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <prvAddNewTaskToReadyList+0xdc>)
 8006990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800699e:	bf00      	nop
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	24000ce8 	.word	0x24000ce8
 80069ac:	24000814 	.word	0x24000814
 80069b0:	24000cf4 	.word	0x24000cf4
 80069b4:	24000d04 	.word	0x24000d04
 80069b8:	24000cf0 	.word	0x24000cf0
 80069bc:	24000818 	.word	0x24000818
 80069c0:	e000ed04 	.word	0xe000ed04

080069c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d017      	beq.n	8006a06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069d6:	4b13      	ldr	r3, [pc, #76]	; (8006a24 <vTaskDelay+0x60>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00a      	beq.n	80069f4 <vTaskDelay+0x30>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	60bb      	str	r3, [r7, #8]
}
 80069f0:	bf00      	nop
 80069f2:	e7fe      	b.n	80069f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069f4:	f000 f88a 	bl	8006b0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069f8:	2100      	movs	r1, #0
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fcfe 	bl	80073fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a00:	f000 f892 	bl	8006b28 <xTaskResumeAll>
 8006a04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d107      	bne.n	8006a1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a0c:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <vTaskDelay+0x64>)
 8006a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a1c:	bf00      	nop
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	24000d10 	.word	0x24000d10
 8006a28:	e000ed04 	.word	0xe000ed04

08006a2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b08a      	sub	sp, #40	; 0x28
 8006a30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a36:	2300      	movs	r3, #0
 8006a38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a3a:	463a      	mov	r2, r7
 8006a3c:	1d39      	adds	r1, r7, #4
 8006a3e:	f107 0308 	add.w	r3, r7, #8
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fe fff8 	bl	8005a38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	9202      	str	r2, [sp, #8]
 8006a50:	9301      	str	r3, [sp, #4]
 8006a52:	2300      	movs	r3, #0
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	2300      	movs	r3, #0
 8006a58:	460a      	mov	r2, r1
 8006a5a:	4924      	ldr	r1, [pc, #144]	; (8006aec <vTaskStartScheduler+0xc0>)
 8006a5c:	4824      	ldr	r0, [pc, #144]	; (8006af0 <vTaskStartScheduler+0xc4>)
 8006a5e:	f7ff fdf9 	bl	8006654 <xTaskCreateStatic>
 8006a62:	4603      	mov	r3, r0
 8006a64:	4a23      	ldr	r2, [pc, #140]	; (8006af4 <vTaskStartScheduler+0xc8>)
 8006a66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a68:	4b22      	ldr	r3, [pc, #136]	; (8006af4 <vTaskStartScheduler+0xc8>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a70:	2301      	movs	r3, #1
 8006a72:	617b      	str	r3, [r7, #20]
 8006a74:	e001      	b.n	8006a7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d102      	bne.n	8006a86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a80:	f000 fd10 	bl	80074a4 <xTimerCreateTimerTask>
 8006a84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d11b      	bne.n	8006ac4 <vTaskStartScheduler+0x98>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	613b      	str	r3, [r7, #16]
}
 8006a9e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006aa0:	4b15      	ldr	r3, [pc, #84]	; (8006af8 <vTaskStartScheduler+0xcc>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3354      	adds	r3, #84	; 0x54
 8006aa6:	4a15      	ldr	r2, [pc, #84]	; (8006afc <vTaskStartScheduler+0xd0>)
 8006aa8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006aaa:	4b15      	ldr	r3, [pc, #84]	; (8006b00 <vTaskStartScheduler+0xd4>)
 8006aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ab0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ab2:	4b14      	ldr	r3, [pc, #80]	; (8006b04 <vTaskStartScheduler+0xd8>)
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ab8:	4b13      	ldr	r3, [pc, #76]	; (8006b08 <vTaskStartScheduler+0xdc>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006abe:	f001 f8c7 	bl	8007c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ac2:	e00e      	b.n	8006ae2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aca:	d10a      	bne.n	8006ae2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	60fb      	str	r3, [r7, #12]
}
 8006ade:	bf00      	nop
 8006ae0:	e7fe      	b.n	8006ae0 <vTaskStartScheduler+0xb4>
}
 8006ae2:	bf00      	nop
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	08008618 	.word	0x08008618
 8006af0:	08007131 	.word	0x08007131
 8006af4:	24000d0c 	.word	0x24000d0c
 8006af8:	24000814 	.word	0x24000814
 8006afc:	24000014 	.word	0x24000014
 8006b00:	24000d08 	.word	0x24000d08
 8006b04:	24000cf4 	.word	0x24000cf4
 8006b08:	24000cec 	.word	0x24000cec

08006b0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b10:	4b04      	ldr	r3, [pc, #16]	; (8006b24 <vTaskSuspendAll+0x18>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3301      	adds	r3, #1
 8006b16:	4a03      	ldr	r2, [pc, #12]	; (8006b24 <vTaskSuspendAll+0x18>)
 8006b18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b1a:	bf00      	nop
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	24000d10 	.word	0x24000d10

08006b28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b32:	2300      	movs	r3, #0
 8006b34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b36:	4b42      	ldr	r3, [pc, #264]	; (8006c40 <xTaskResumeAll+0x118>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10a      	bne.n	8006b54 <xTaskResumeAll+0x2c>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	603b      	str	r3, [r7, #0]
}
 8006b50:	bf00      	nop
 8006b52:	e7fe      	b.n	8006b52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b54:	f001 f91e 	bl	8007d94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b58:	4b39      	ldr	r3, [pc, #228]	; (8006c40 <xTaskResumeAll+0x118>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	4a38      	ldr	r2, [pc, #224]	; (8006c40 <xTaskResumeAll+0x118>)
 8006b60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b62:	4b37      	ldr	r3, [pc, #220]	; (8006c40 <xTaskResumeAll+0x118>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d162      	bne.n	8006c30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b6a:	4b36      	ldr	r3, [pc, #216]	; (8006c44 <xTaskResumeAll+0x11c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d05e      	beq.n	8006c30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b72:	e02f      	b.n	8006bd4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b74:	4b34      	ldr	r3, [pc, #208]	; (8006c48 <xTaskResumeAll+0x120>)
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	3318      	adds	r3, #24
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7ff f817 	bl	8005bb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	3304      	adds	r3, #4
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7ff f812 	bl	8005bb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b94:	4b2d      	ldr	r3, [pc, #180]	; (8006c4c <xTaskResumeAll+0x124>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d903      	bls.n	8006ba4 <xTaskResumeAll+0x7c>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba0:	4a2a      	ldr	r2, [pc, #168]	; (8006c4c <xTaskResumeAll+0x124>)
 8006ba2:	6013      	str	r3, [r2, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba8:	4613      	mov	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4a27      	ldr	r2, [pc, #156]	; (8006c50 <xTaskResumeAll+0x128>)
 8006bb2:	441a      	add	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3304      	adds	r3, #4
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4610      	mov	r0, r2
 8006bbc:	f7fe ff9d 	bl	8005afa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc4:	4b23      	ldr	r3, [pc, #140]	; (8006c54 <xTaskResumeAll+0x12c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d302      	bcc.n	8006bd4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006bce:	4b22      	ldr	r3, [pc, #136]	; (8006c58 <xTaskResumeAll+0x130>)
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bd4:	4b1c      	ldr	r3, [pc, #112]	; (8006c48 <xTaskResumeAll+0x120>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1cb      	bne.n	8006b74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006be2:	f000 fb5f 	bl	80072a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006be6:	4b1d      	ldr	r3, [pc, #116]	; (8006c5c <xTaskResumeAll+0x134>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d010      	beq.n	8006c14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bf2:	f000 f847 	bl	8006c84 <xTaskIncrementTick>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d002      	beq.n	8006c02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006bfc:	4b16      	ldr	r3, [pc, #88]	; (8006c58 <xTaskResumeAll+0x130>)
 8006bfe:	2201      	movs	r2, #1
 8006c00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1f1      	bne.n	8006bf2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006c0e:	4b13      	ldr	r3, [pc, #76]	; (8006c5c <xTaskResumeAll+0x134>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c14:	4b10      	ldr	r3, [pc, #64]	; (8006c58 <xTaskResumeAll+0x130>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d009      	beq.n	8006c30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c20:	4b0f      	ldr	r3, [pc, #60]	; (8006c60 <xTaskResumeAll+0x138>)
 8006c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c30:	f001 f8e0 	bl	8007df4 <vPortExitCritical>

	return xAlreadyYielded;
 8006c34:	68bb      	ldr	r3, [r7, #8]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	24000d10 	.word	0x24000d10
 8006c44:	24000ce8 	.word	0x24000ce8
 8006c48:	24000ca8 	.word	0x24000ca8
 8006c4c:	24000cf0 	.word	0x24000cf0
 8006c50:	24000818 	.word	0x24000818
 8006c54:	24000814 	.word	0x24000814
 8006c58:	24000cfc 	.word	0x24000cfc
 8006c5c:	24000cf8 	.word	0x24000cf8
 8006c60:	e000ed04 	.word	0xe000ed04

08006c64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c6a:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <xTaskGetTickCount+0x1c>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c70:	687b      	ldr	r3, [r7, #4]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	24000cec 	.word	0x24000cec

08006c84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c8e:	4b4f      	ldr	r3, [pc, #316]	; (8006dcc <xTaskIncrementTick+0x148>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f040 808f 	bne.w	8006db6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c98:	4b4d      	ldr	r3, [pc, #308]	; (8006dd0 <xTaskIncrementTick+0x14c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ca0:	4a4b      	ldr	r2, [pc, #300]	; (8006dd0 <xTaskIncrementTick+0x14c>)
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d120      	bne.n	8006cee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006cac:	4b49      	ldr	r3, [pc, #292]	; (8006dd4 <xTaskIncrementTick+0x150>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00a      	beq.n	8006ccc <xTaskIncrementTick+0x48>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	603b      	str	r3, [r7, #0]
}
 8006cc8:	bf00      	nop
 8006cca:	e7fe      	b.n	8006cca <xTaskIncrementTick+0x46>
 8006ccc:	4b41      	ldr	r3, [pc, #260]	; (8006dd4 <xTaskIncrementTick+0x150>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60fb      	str	r3, [r7, #12]
 8006cd2:	4b41      	ldr	r3, [pc, #260]	; (8006dd8 <xTaskIncrementTick+0x154>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a3f      	ldr	r2, [pc, #252]	; (8006dd4 <xTaskIncrementTick+0x150>)
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	4a3f      	ldr	r2, [pc, #252]	; (8006dd8 <xTaskIncrementTick+0x154>)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6013      	str	r3, [r2, #0]
 8006ce0:	4b3e      	ldr	r3, [pc, #248]	; (8006ddc <xTaskIncrementTick+0x158>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	4a3d      	ldr	r2, [pc, #244]	; (8006ddc <xTaskIncrementTick+0x158>)
 8006ce8:	6013      	str	r3, [r2, #0]
 8006cea:	f000 fadb 	bl	80072a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cee:	4b3c      	ldr	r3, [pc, #240]	; (8006de0 <xTaskIncrementTick+0x15c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d349      	bcc.n	8006d8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cf8:	4b36      	ldr	r3, [pc, #216]	; (8006dd4 <xTaskIncrementTick+0x150>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d104      	bne.n	8006d0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d02:	4b37      	ldr	r3, [pc, #220]	; (8006de0 <xTaskIncrementTick+0x15c>)
 8006d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d08:	601a      	str	r2, [r3, #0]
					break;
 8006d0a:	e03f      	b.n	8006d8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d0c:	4b31      	ldr	r3, [pc, #196]	; (8006dd4 <xTaskIncrementTick+0x150>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d203      	bcs.n	8006d2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d24:	4a2e      	ldr	r2, [pc, #184]	; (8006de0 <xTaskIncrementTick+0x15c>)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d2a:	e02f      	b.n	8006d8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	3304      	adds	r3, #4
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fe ff3f 	bl	8005bb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d004      	beq.n	8006d48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	3318      	adds	r3, #24
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fe ff36 	bl	8005bb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4c:	4b25      	ldr	r3, [pc, #148]	; (8006de4 <xTaskIncrementTick+0x160>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d903      	bls.n	8006d5c <xTaskIncrementTick+0xd8>
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d58:	4a22      	ldr	r2, [pc, #136]	; (8006de4 <xTaskIncrementTick+0x160>)
 8006d5a:	6013      	str	r3, [r2, #0]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4a1f      	ldr	r2, [pc, #124]	; (8006de8 <xTaskIncrementTick+0x164>)
 8006d6a:	441a      	add	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	4619      	mov	r1, r3
 8006d72:	4610      	mov	r0, r2
 8006d74:	f7fe fec1 	bl	8005afa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7c:	4b1b      	ldr	r3, [pc, #108]	; (8006dec <xTaskIncrementTick+0x168>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d3b8      	bcc.n	8006cf8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006d86:	2301      	movs	r3, #1
 8006d88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d8a:	e7b5      	b.n	8006cf8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d8c:	4b17      	ldr	r3, [pc, #92]	; (8006dec <xTaskIncrementTick+0x168>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d92:	4915      	ldr	r1, [pc, #84]	; (8006de8 <xTaskIncrementTick+0x164>)
 8006d94:	4613      	mov	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	440b      	add	r3, r1
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d901      	bls.n	8006da8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006da4:	2301      	movs	r3, #1
 8006da6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006da8:	4b11      	ldr	r3, [pc, #68]	; (8006df0 <xTaskIncrementTick+0x16c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d007      	beq.n	8006dc0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006db0:	2301      	movs	r3, #1
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	e004      	b.n	8006dc0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006db6:	4b0f      	ldr	r3, [pc, #60]	; (8006df4 <xTaskIncrementTick+0x170>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	4a0d      	ldr	r2, [pc, #52]	; (8006df4 <xTaskIncrementTick+0x170>)
 8006dbe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006dc0:	697b      	ldr	r3, [r7, #20]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	24000d10 	.word	0x24000d10
 8006dd0:	24000cec 	.word	0x24000cec
 8006dd4:	24000ca0 	.word	0x24000ca0
 8006dd8:	24000ca4 	.word	0x24000ca4
 8006ddc:	24000d00 	.word	0x24000d00
 8006de0:	24000d08 	.word	0x24000d08
 8006de4:	24000cf0 	.word	0x24000cf0
 8006de8:	24000818 	.word	0x24000818
 8006dec:	24000814 	.word	0x24000814
 8006df0:	24000cfc 	.word	0x24000cfc
 8006df4:	24000cf8 	.word	0x24000cf8

08006df8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dfe:	4b2a      	ldr	r3, [pc, #168]	; (8006ea8 <vTaskSwitchContext+0xb0>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e06:	4b29      	ldr	r3, [pc, #164]	; (8006eac <vTaskSwitchContext+0xb4>)
 8006e08:	2201      	movs	r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e0c:	e046      	b.n	8006e9c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006e0e:	4b27      	ldr	r3, [pc, #156]	; (8006eac <vTaskSwitchContext+0xb4>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e14:	4b26      	ldr	r3, [pc, #152]	; (8006eb0 <vTaskSwitchContext+0xb8>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	e010      	b.n	8006e3e <vTaskSwitchContext+0x46>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10a      	bne.n	8006e38 <vTaskSwitchContext+0x40>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	607b      	str	r3, [r7, #4]
}
 8006e34:	bf00      	nop
 8006e36:	e7fe      	b.n	8006e36 <vTaskSwitchContext+0x3e>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	60fb      	str	r3, [r7, #12]
 8006e3e:	491d      	ldr	r1, [pc, #116]	; (8006eb4 <vTaskSwitchContext+0xbc>)
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4613      	mov	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	440b      	add	r3, r1
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0e4      	beq.n	8006e1c <vTaskSwitchContext+0x24>
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	4613      	mov	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4a15      	ldr	r2, [pc, #84]	; (8006eb4 <vTaskSwitchContext+0xbc>)
 8006e5e:	4413      	add	r3, r2
 8006e60:	60bb      	str	r3, [r7, #8]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	605a      	str	r2, [r3, #4]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	3308      	adds	r3, #8
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d104      	bne.n	8006e82 <vTaskSwitchContext+0x8a>
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	605a      	str	r2, [r3, #4]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	4a0b      	ldr	r2, [pc, #44]	; (8006eb8 <vTaskSwitchContext+0xc0>)
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	4a08      	ldr	r2, [pc, #32]	; (8006eb0 <vTaskSwitchContext+0xb8>)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e92:	4b09      	ldr	r3, [pc, #36]	; (8006eb8 <vTaskSwitchContext+0xc0>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3354      	adds	r3, #84	; 0x54
 8006e98:	4a08      	ldr	r2, [pc, #32]	; (8006ebc <vTaskSwitchContext+0xc4>)
 8006e9a:	6013      	str	r3, [r2, #0]
}
 8006e9c:	bf00      	nop
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	24000d10 	.word	0x24000d10
 8006eac:	24000cfc 	.word	0x24000cfc
 8006eb0:	24000cf0 	.word	0x24000cf0
 8006eb4:	24000818 	.word	0x24000818
 8006eb8:	24000814 	.word	0x24000814
 8006ebc:	24000014 	.word	0x24000014

08006ec0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10a      	bne.n	8006ee6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	60fb      	str	r3, [r7, #12]
}
 8006ee2:	bf00      	nop
 8006ee4:	e7fe      	b.n	8006ee4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ee6:	4b07      	ldr	r3, [pc, #28]	; (8006f04 <vTaskPlaceOnEventList+0x44>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3318      	adds	r3, #24
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7fe fe27 	bl	8005b42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	6838      	ldr	r0, [r7, #0]
 8006ef8:	f000 fa80 	bl	80073fc <prvAddCurrentTaskToDelayedList>
}
 8006efc:	bf00      	nop
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	24000814 	.word	0x24000814

08006f08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10a      	bne.n	8006f30 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1e:	f383 8811 	msr	BASEPRI, r3
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	617b      	str	r3, [r7, #20]
}
 8006f2c:	bf00      	nop
 8006f2e:	e7fe      	b.n	8006f2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f30:	4b0a      	ldr	r3, [pc, #40]	; (8006f5c <vTaskPlaceOnEventListRestricted+0x54>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3318      	adds	r3, #24
 8006f36:	4619      	mov	r1, r3
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f7fe fdde 	bl	8005afa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	68b8      	ldr	r0, [r7, #8]
 8006f4e:	f000 fa55 	bl	80073fc <prvAddCurrentTaskToDelayedList>
	}
 8006f52:	bf00      	nop
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	24000814 	.word	0x24000814

08006f60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10a      	bne.n	8006f8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	60fb      	str	r3, [r7, #12]
}
 8006f88:	bf00      	nop
 8006f8a:	e7fe      	b.n	8006f8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	3318      	adds	r3, #24
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fe fe0f 	bl	8005bb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f96:	4b1e      	ldr	r3, [pc, #120]	; (8007010 <xTaskRemoveFromEventList+0xb0>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d11d      	bne.n	8006fda <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fe fe06 	bl	8005bb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fac:	4b19      	ldr	r3, [pc, #100]	; (8007014 <xTaskRemoveFromEventList+0xb4>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d903      	bls.n	8006fbc <xTaskRemoveFromEventList+0x5c>
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb8:	4a16      	ldr	r2, [pc, #88]	; (8007014 <xTaskRemoveFromEventList+0xb4>)
 8006fba:	6013      	str	r3, [r2, #0]
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4a13      	ldr	r2, [pc, #76]	; (8007018 <xTaskRemoveFromEventList+0xb8>)
 8006fca:	441a      	add	r2, r3
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	3304      	adds	r3, #4
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	f7fe fd91 	bl	8005afa <vListInsertEnd>
 8006fd8:	e005      	b.n	8006fe6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	3318      	adds	r3, #24
 8006fde:	4619      	mov	r1, r3
 8006fe0:	480e      	ldr	r0, [pc, #56]	; (800701c <xTaskRemoveFromEventList+0xbc>)
 8006fe2:	f7fe fd8a 	bl	8005afa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fea:	4b0d      	ldr	r3, [pc, #52]	; (8007020 <xTaskRemoveFromEventList+0xc0>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d905      	bls.n	8007000 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <xTaskRemoveFromEventList+0xc4>)
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	e001      	b.n	8007004 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007000:	2300      	movs	r3, #0
 8007002:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007004:	697b      	ldr	r3, [r7, #20]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	24000d10 	.word	0x24000d10
 8007014:	24000cf0 	.word	0x24000cf0
 8007018:	24000818 	.word	0x24000818
 800701c:	24000ca8 	.word	0x24000ca8
 8007020:	24000814 	.word	0x24000814
 8007024:	24000cfc 	.word	0x24000cfc

08007028 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007030:	4b06      	ldr	r3, [pc, #24]	; (800704c <vTaskInternalSetTimeOutState+0x24>)
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007038:	4b05      	ldr	r3, [pc, #20]	; (8007050 <vTaskInternalSetTimeOutState+0x28>)
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	605a      	str	r2, [r3, #4]
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	24000d00 	.word	0x24000d00
 8007050:	24000cec 	.word	0x24000cec

08007054 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b088      	sub	sp, #32
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10a      	bne.n	800707a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	613b      	str	r3, [r7, #16]
}
 8007076:	bf00      	nop
 8007078:	e7fe      	b.n	8007078 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10a      	bne.n	8007096 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	60fb      	str	r3, [r7, #12]
}
 8007092:	bf00      	nop
 8007094:	e7fe      	b.n	8007094 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007096:	f000 fe7d 	bl	8007d94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800709a:	4b1d      	ldr	r3, [pc, #116]	; (8007110 <xTaskCheckForTimeOut+0xbc>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070b2:	d102      	bne.n	80070ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80070b4:	2300      	movs	r3, #0
 80070b6:	61fb      	str	r3, [r7, #28]
 80070b8:	e023      	b.n	8007102 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	4b15      	ldr	r3, [pc, #84]	; (8007114 <xTaskCheckForTimeOut+0xc0>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d007      	beq.n	80070d6 <xTaskCheckForTimeOut+0x82>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d302      	bcc.n	80070d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070d0:	2301      	movs	r3, #1
 80070d2:	61fb      	str	r3, [r7, #28]
 80070d4:	e015      	b.n	8007102 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d20b      	bcs.n	80070f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	1ad2      	subs	r2, r2, r3
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7ff ff9b 	bl	8007028 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070f2:	2300      	movs	r3, #0
 80070f4:	61fb      	str	r3, [r7, #28]
 80070f6:	e004      	b.n	8007102 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	2200      	movs	r2, #0
 80070fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070fe:	2301      	movs	r3, #1
 8007100:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007102:	f000 fe77 	bl	8007df4 <vPortExitCritical>

	return xReturn;
 8007106:	69fb      	ldr	r3, [r7, #28]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3720      	adds	r7, #32
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	24000cec 	.word	0x24000cec
 8007114:	24000d00 	.word	0x24000d00

08007118 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800711c:	4b03      	ldr	r3, [pc, #12]	; (800712c <vTaskMissedYield+0x14>)
 800711e:	2201      	movs	r2, #1
 8007120:	601a      	str	r2, [r3, #0]
}
 8007122:	bf00      	nop
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	24000cfc 	.word	0x24000cfc

08007130 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007138:	f000 f852 	bl	80071e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800713c:	4b06      	ldr	r3, [pc, #24]	; (8007158 <prvIdleTask+0x28>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d9f9      	bls.n	8007138 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007144:	4b05      	ldr	r3, [pc, #20]	; (800715c <prvIdleTask+0x2c>)
 8007146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007154:	e7f0      	b.n	8007138 <prvIdleTask+0x8>
 8007156:	bf00      	nop
 8007158:	24000818 	.word	0x24000818
 800715c:	e000ed04 	.word	0xe000ed04

08007160 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007166:	2300      	movs	r3, #0
 8007168:	607b      	str	r3, [r7, #4]
 800716a:	e00c      	b.n	8007186 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	4613      	mov	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4a12      	ldr	r2, [pc, #72]	; (80071c0 <prvInitialiseTaskLists+0x60>)
 8007178:	4413      	add	r3, r2
 800717a:	4618      	mov	r0, r3
 800717c:	f7fe fc90 	bl	8005aa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3301      	adds	r3, #1
 8007184:	607b      	str	r3, [r7, #4]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b37      	cmp	r3, #55	; 0x37
 800718a:	d9ef      	bls.n	800716c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800718c:	480d      	ldr	r0, [pc, #52]	; (80071c4 <prvInitialiseTaskLists+0x64>)
 800718e:	f7fe fc87 	bl	8005aa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007192:	480d      	ldr	r0, [pc, #52]	; (80071c8 <prvInitialiseTaskLists+0x68>)
 8007194:	f7fe fc84 	bl	8005aa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007198:	480c      	ldr	r0, [pc, #48]	; (80071cc <prvInitialiseTaskLists+0x6c>)
 800719a:	f7fe fc81 	bl	8005aa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800719e:	480c      	ldr	r0, [pc, #48]	; (80071d0 <prvInitialiseTaskLists+0x70>)
 80071a0:	f7fe fc7e 	bl	8005aa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071a4:	480b      	ldr	r0, [pc, #44]	; (80071d4 <prvInitialiseTaskLists+0x74>)
 80071a6:	f7fe fc7b 	bl	8005aa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071aa:	4b0b      	ldr	r3, [pc, #44]	; (80071d8 <prvInitialiseTaskLists+0x78>)
 80071ac:	4a05      	ldr	r2, [pc, #20]	; (80071c4 <prvInitialiseTaskLists+0x64>)
 80071ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071b0:	4b0a      	ldr	r3, [pc, #40]	; (80071dc <prvInitialiseTaskLists+0x7c>)
 80071b2:	4a05      	ldr	r2, [pc, #20]	; (80071c8 <prvInitialiseTaskLists+0x68>)
 80071b4:	601a      	str	r2, [r3, #0]
}
 80071b6:	bf00      	nop
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	24000818 	.word	0x24000818
 80071c4:	24000c78 	.word	0x24000c78
 80071c8:	24000c8c 	.word	0x24000c8c
 80071cc:	24000ca8 	.word	0x24000ca8
 80071d0:	24000cbc 	.word	0x24000cbc
 80071d4:	24000cd4 	.word	0x24000cd4
 80071d8:	24000ca0 	.word	0x24000ca0
 80071dc:	24000ca4 	.word	0x24000ca4

080071e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071e6:	e019      	b.n	800721c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071e8:	f000 fdd4 	bl	8007d94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ec:	4b10      	ldr	r3, [pc, #64]	; (8007230 <prvCheckTasksWaitingTermination+0x50>)
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	3304      	adds	r3, #4
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7fe fcdb 	bl	8005bb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071fe:	4b0d      	ldr	r3, [pc, #52]	; (8007234 <prvCheckTasksWaitingTermination+0x54>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3b01      	subs	r3, #1
 8007204:	4a0b      	ldr	r2, [pc, #44]	; (8007234 <prvCheckTasksWaitingTermination+0x54>)
 8007206:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007208:	4b0b      	ldr	r3, [pc, #44]	; (8007238 <prvCheckTasksWaitingTermination+0x58>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3b01      	subs	r3, #1
 800720e:	4a0a      	ldr	r2, [pc, #40]	; (8007238 <prvCheckTasksWaitingTermination+0x58>)
 8007210:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007212:	f000 fdef 	bl	8007df4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f810 	bl	800723c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800721c:	4b06      	ldr	r3, [pc, #24]	; (8007238 <prvCheckTasksWaitingTermination+0x58>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1e1      	bne.n	80071e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	24000cbc 	.word	0x24000cbc
 8007234:	24000ce8 	.word	0x24000ce8
 8007238:	24000cd0 	.word	0x24000cd0

0800723c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3354      	adds	r3, #84	; 0x54
 8007248:	4618      	mov	r0, r3
 800724a:	f001 f8f9 	bl	8008440 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007254:	2b00      	cmp	r3, #0
 8007256:	d108      	bne.n	800726a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725c:	4618      	mov	r0, r3
 800725e:	f000 ff87 	bl	8008170 <vPortFree>
				vPortFree( pxTCB );
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 ff84 	bl	8008170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007268:	e018      	b.n	800729c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007270:	2b01      	cmp	r3, #1
 8007272:	d103      	bne.n	800727c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 ff7b 	bl	8008170 <vPortFree>
	}
 800727a:	e00f      	b.n	800729c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007282:	2b02      	cmp	r3, #2
 8007284:	d00a      	beq.n	800729c <prvDeleteTCB+0x60>
	__asm volatile
 8007286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728a:	f383 8811 	msr	BASEPRI, r3
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	60fb      	str	r3, [r7, #12]
}
 8007298:	bf00      	nop
 800729a:	e7fe      	b.n	800729a <prvDeleteTCB+0x5e>
	}
 800729c:	bf00      	nop
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072aa:	4b0c      	ldr	r3, [pc, #48]	; (80072dc <prvResetNextTaskUnblockTime+0x38>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d104      	bne.n	80072be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80072b4:	4b0a      	ldr	r3, [pc, #40]	; (80072e0 <prvResetNextTaskUnblockTime+0x3c>)
 80072b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072bc:	e008      	b.n	80072d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072be:	4b07      	ldr	r3, [pc, #28]	; (80072dc <prvResetNextTaskUnblockTime+0x38>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	4a04      	ldr	r2, [pc, #16]	; (80072e0 <prvResetNextTaskUnblockTime+0x3c>)
 80072ce:	6013      	str	r3, [r2, #0]
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	24000ca0 	.word	0x24000ca0
 80072e0:	24000d08 	.word	0x24000d08

080072e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072ea:	4b0b      	ldr	r3, [pc, #44]	; (8007318 <xTaskGetSchedulerState+0x34>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d102      	bne.n	80072f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072f2:	2301      	movs	r3, #1
 80072f4:	607b      	str	r3, [r7, #4]
 80072f6:	e008      	b.n	800730a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072f8:	4b08      	ldr	r3, [pc, #32]	; (800731c <xTaskGetSchedulerState+0x38>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d102      	bne.n	8007306 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007300:	2302      	movs	r3, #2
 8007302:	607b      	str	r3, [r7, #4]
 8007304:	e001      	b.n	800730a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007306:	2300      	movs	r3, #0
 8007308:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800730a:	687b      	ldr	r3, [r7, #4]
	}
 800730c:	4618      	mov	r0, r3
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	24000cf4 	.word	0x24000cf4
 800731c:	24000d10 	.word	0x24000d10

08007320 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800732c:	2300      	movs	r3, #0
 800732e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d056      	beq.n	80073e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007336:	4b2e      	ldr	r3, [pc, #184]	; (80073f0 <xTaskPriorityDisinherit+0xd0>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	429a      	cmp	r2, r3
 800733e:	d00a      	beq.n	8007356 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	60fb      	str	r3, [r7, #12]
}
 8007352:	bf00      	nop
 8007354:	e7fe      	b.n	8007354 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10a      	bne.n	8007374 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	60bb      	str	r3, [r7, #8]
}
 8007370:	bf00      	nop
 8007372:	e7fe      	b.n	8007372 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007378:	1e5a      	subs	r2, r3, #1
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007386:	429a      	cmp	r2, r3
 8007388:	d02c      	beq.n	80073e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800738e:	2b00      	cmp	r3, #0
 8007390:	d128      	bne.n	80073e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	3304      	adds	r3, #4
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe fc0c 	bl	8005bb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b4:	4b0f      	ldr	r3, [pc, #60]	; (80073f4 <xTaskPriorityDisinherit+0xd4>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d903      	bls.n	80073c4 <xTaskPriorityDisinherit+0xa4>
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	4a0c      	ldr	r2, [pc, #48]	; (80073f4 <xTaskPriorityDisinherit+0xd4>)
 80073c2:	6013      	str	r3, [r2, #0]
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c8:	4613      	mov	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4a09      	ldr	r2, [pc, #36]	; (80073f8 <xTaskPriorityDisinherit+0xd8>)
 80073d2:	441a      	add	r2, r3
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	3304      	adds	r3, #4
 80073d8:	4619      	mov	r1, r3
 80073da:	4610      	mov	r0, r2
 80073dc:	f7fe fb8d 	bl	8005afa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80073e0:	2301      	movs	r3, #1
 80073e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073e4:	697b      	ldr	r3, [r7, #20]
	}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	24000814 	.word	0x24000814
 80073f4:	24000cf0 	.word	0x24000cf0
 80073f8:	24000818 	.word	0x24000818

080073fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007406:	4b21      	ldr	r3, [pc, #132]	; (800748c <prvAddCurrentTaskToDelayedList+0x90>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800740c:	4b20      	ldr	r3, [pc, #128]	; (8007490 <prvAddCurrentTaskToDelayedList+0x94>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3304      	adds	r3, #4
 8007412:	4618      	mov	r0, r3
 8007414:	f7fe fbce 	bl	8005bb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800741e:	d10a      	bne.n	8007436 <prvAddCurrentTaskToDelayedList+0x3a>
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d007      	beq.n	8007436 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007426:	4b1a      	ldr	r3, [pc, #104]	; (8007490 <prvAddCurrentTaskToDelayedList+0x94>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3304      	adds	r3, #4
 800742c:	4619      	mov	r1, r3
 800742e:	4819      	ldr	r0, [pc, #100]	; (8007494 <prvAddCurrentTaskToDelayedList+0x98>)
 8007430:	f7fe fb63 	bl	8005afa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007434:	e026      	b.n	8007484 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4413      	add	r3, r2
 800743c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800743e:	4b14      	ldr	r3, [pc, #80]	; (8007490 <prvAddCurrentTaskToDelayedList+0x94>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	429a      	cmp	r2, r3
 800744c:	d209      	bcs.n	8007462 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800744e:	4b12      	ldr	r3, [pc, #72]	; (8007498 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <prvAddCurrentTaskToDelayedList+0x94>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3304      	adds	r3, #4
 8007458:	4619      	mov	r1, r3
 800745a:	4610      	mov	r0, r2
 800745c:	f7fe fb71 	bl	8005b42 <vListInsert>
}
 8007460:	e010      	b.n	8007484 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007462:	4b0e      	ldr	r3, [pc, #56]	; (800749c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <prvAddCurrentTaskToDelayedList+0x94>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3304      	adds	r3, #4
 800746c:	4619      	mov	r1, r3
 800746e:	4610      	mov	r0, r2
 8007470:	f7fe fb67 	bl	8005b42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007474:	4b0a      	ldr	r3, [pc, #40]	; (80074a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	429a      	cmp	r2, r3
 800747c:	d202      	bcs.n	8007484 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800747e:	4a08      	ldr	r2, [pc, #32]	; (80074a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	6013      	str	r3, [r2, #0]
}
 8007484:	bf00      	nop
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	24000cec 	.word	0x24000cec
 8007490:	24000814 	.word	0x24000814
 8007494:	24000cd4 	.word	0x24000cd4
 8007498:	24000ca4 	.word	0x24000ca4
 800749c:	24000ca0 	.word	0x24000ca0
 80074a0:	24000d08 	.word	0x24000d08

080074a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08a      	sub	sp, #40	; 0x28
 80074a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80074aa:	2300      	movs	r3, #0
 80074ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80074ae:	f000 fb07 	bl	8007ac0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80074b2:	4b1c      	ldr	r3, [pc, #112]	; (8007524 <xTimerCreateTimerTask+0x80>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d021      	beq.n	80074fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80074ba:	2300      	movs	r3, #0
 80074bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80074be:	2300      	movs	r3, #0
 80074c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80074c2:	1d3a      	adds	r2, r7, #4
 80074c4:	f107 0108 	add.w	r1, r7, #8
 80074c8:	f107 030c 	add.w	r3, r7, #12
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7fe facd 	bl	8005a6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80074d2:	6879      	ldr	r1, [r7, #4]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	9202      	str	r2, [sp, #8]
 80074da:	9301      	str	r3, [sp, #4]
 80074dc:	2302      	movs	r3, #2
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	2300      	movs	r3, #0
 80074e2:	460a      	mov	r2, r1
 80074e4:	4910      	ldr	r1, [pc, #64]	; (8007528 <xTimerCreateTimerTask+0x84>)
 80074e6:	4811      	ldr	r0, [pc, #68]	; (800752c <xTimerCreateTimerTask+0x88>)
 80074e8:	f7ff f8b4 	bl	8006654 <xTaskCreateStatic>
 80074ec:	4603      	mov	r3, r0
 80074ee:	4a10      	ldr	r2, [pc, #64]	; (8007530 <xTimerCreateTimerTask+0x8c>)
 80074f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074f2:	4b0f      	ldr	r3, [pc, #60]	; (8007530 <xTimerCreateTimerTask+0x8c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80074fa:	2301      	movs	r3, #1
 80074fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10a      	bne.n	800751a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	613b      	str	r3, [r7, #16]
}
 8007516:	bf00      	nop
 8007518:	e7fe      	b.n	8007518 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800751a:	697b      	ldr	r3, [r7, #20]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3718      	adds	r7, #24
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	24000d44 	.word	0x24000d44
 8007528:	08008620 	.word	0x08008620
 800752c:	08007669 	.word	0x08007669
 8007530:	24000d48 	.word	0x24000d48

08007534 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b08a      	sub	sp, #40	; 0x28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
 8007540:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007542:	2300      	movs	r3, #0
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10a      	bne.n	8007562 <xTimerGenericCommand+0x2e>
	__asm volatile
 800754c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	623b      	str	r3, [r7, #32]
}
 800755e:	bf00      	nop
 8007560:	e7fe      	b.n	8007560 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007562:	4b1a      	ldr	r3, [pc, #104]	; (80075cc <xTimerGenericCommand+0x98>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d02a      	beq.n	80075c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2b05      	cmp	r3, #5
 800757a:	dc18      	bgt.n	80075ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800757c:	f7ff feb2 	bl	80072e4 <xTaskGetSchedulerState>
 8007580:	4603      	mov	r3, r0
 8007582:	2b02      	cmp	r3, #2
 8007584:	d109      	bne.n	800759a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007586:	4b11      	ldr	r3, [pc, #68]	; (80075cc <xTimerGenericCommand+0x98>)
 8007588:	6818      	ldr	r0, [r3, #0]
 800758a:	f107 0110 	add.w	r1, r7, #16
 800758e:	2300      	movs	r3, #0
 8007590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007592:	f7fe fc77 	bl	8005e84 <xQueueGenericSend>
 8007596:	6278      	str	r0, [r7, #36]	; 0x24
 8007598:	e012      	b.n	80075c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800759a:	4b0c      	ldr	r3, [pc, #48]	; (80075cc <xTimerGenericCommand+0x98>)
 800759c:	6818      	ldr	r0, [r3, #0]
 800759e:	f107 0110 	add.w	r1, r7, #16
 80075a2:	2300      	movs	r3, #0
 80075a4:	2200      	movs	r2, #0
 80075a6:	f7fe fc6d 	bl	8005e84 <xQueueGenericSend>
 80075aa:	6278      	str	r0, [r7, #36]	; 0x24
 80075ac:	e008      	b.n	80075c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075ae:	4b07      	ldr	r3, [pc, #28]	; (80075cc <xTimerGenericCommand+0x98>)
 80075b0:	6818      	ldr	r0, [r3, #0]
 80075b2:	f107 0110 	add.w	r1, r7, #16
 80075b6:	2300      	movs	r3, #0
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	f7fe fd61 	bl	8006080 <xQueueGenericSendFromISR>
 80075be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3728      	adds	r7, #40	; 0x28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	24000d44 	.word	0x24000d44

080075d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af02      	add	r7, sp, #8
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075da:	4b22      	ldr	r3, [pc, #136]	; (8007664 <prvProcessExpiredTimer+0x94>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	3304      	adds	r3, #4
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fe fae3 	bl	8005bb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d022      	beq.n	8007642 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	699a      	ldr	r2, [r3, #24]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	18d1      	adds	r1, r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	6978      	ldr	r0, [r7, #20]
 800760a:	f000 f8d1 	bl	80077b0 <prvInsertTimerInActiveList>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d01f      	beq.n	8007654 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007614:	2300      	movs	r3, #0
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	2300      	movs	r3, #0
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	2100      	movs	r1, #0
 800761e:	6978      	ldr	r0, [r7, #20]
 8007620:	f7ff ff88 	bl	8007534 <xTimerGenericCommand>
 8007624:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d113      	bne.n	8007654 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	60fb      	str	r3, [r7, #12]
}
 800763e:	bf00      	nop
 8007640:	e7fe      	b.n	8007640 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007648:	f023 0301 	bic.w	r3, r3, #1
 800764c:	b2da      	uxtb	r2, r3
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	6978      	ldr	r0, [r7, #20]
 800765a:	4798      	blx	r3
}
 800765c:	bf00      	nop
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	24000d3c 	.word	0x24000d3c

08007668 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007670:	f107 0308 	add.w	r3, r7, #8
 8007674:	4618      	mov	r0, r3
 8007676:	f000 f857 	bl	8007728 <prvGetNextExpireTime>
 800767a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	4619      	mov	r1, r3
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 f803 	bl	800768c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007686:	f000 f8d5 	bl	8007834 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800768a:	e7f1      	b.n	8007670 <prvTimerTask+0x8>

0800768c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007696:	f7ff fa39 	bl	8006b0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800769a:	f107 0308 	add.w	r3, r7, #8
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 f866 	bl	8007770 <prvSampleTimeNow>
 80076a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d130      	bne.n	800770e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <prvProcessTimerOrBlockTask+0x3c>
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d806      	bhi.n	80076c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80076ba:	f7ff fa35 	bl	8006b28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80076be:	68f9      	ldr	r1, [r7, #12]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7ff ff85 	bl	80075d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80076c6:	e024      	b.n	8007712 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d008      	beq.n	80076e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076ce:	4b13      	ldr	r3, [pc, #76]	; (800771c <prvProcessTimerOrBlockTask+0x90>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <prvProcessTimerOrBlockTask+0x50>
 80076d8:	2301      	movs	r3, #1
 80076da:	e000      	b.n	80076de <prvProcessTimerOrBlockTask+0x52>
 80076dc:	2300      	movs	r3, #0
 80076de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076e0:	4b0f      	ldr	r3, [pc, #60]	; (8007720 <prvProcessTimerOrBlockTask+0x94>)
 80076e2:	6818      	ldr	r0, [r3, #0]
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	4619      	mov	r1, r3
 80076ee:	f7fe ff7d 	bl	80065ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076f2:	f7ff fa19 	bl	8006b28 <xTaskResumeAll>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10a      	bne.n	8007712 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80076fc:	4b09      	ldr	r3, [pc, #36]	; (8007724 <prvProcessTimerOrBlockTask+0x98>)
 80076fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	f3bf 8f6f 	isb	sy
}
 800770c:	e001      	b.n	8007712 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800770e:	f7ff fa0b 	bl	8006b28 <xTaskResumeAll>
}
 8007712:	bf00      	nop
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	24000d40 	.word	0x24000d40
 8007720:	24000d44 	.word	0x24000d44
 8007724:	e000ed04 	.word	0xe000ed04

08007728 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007730:	4b0e      	ldr	r3, [pc, #56]	; (800776c <prvGetNextExpireTime+0x44>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <prvGetNextExpireTime+0x16>
 800773a:	2201      	movs	r2, #1
 800773c:	e000      	b.n	8007740 <prvGetNextExpireTime+0x18>
 800773e:	2200      	movs	r2, #0
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d105      	bne.n	8007758 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800774c:	4b07      	ldr	r3, [pc, #28]	; (800776c <prvGetNextExpireTime+0x44>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	60fb      	str	r3, [r7, #12]
 8007756:	e001      	b.n	800775c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800775c:	68fb      	ldr	r3, [r7, #12]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3714      	adds	r7, #20
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	24000d3c 	.word	0x24000d3c

08007770 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007778:	f7ff fa74 	bl	8006c64 <xTaskGetTickCount>
 800777c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800777e:	4b0b      	ldr	r3, [pc, #44]	; (80077ac <prvSampleTimeNow+0x3c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	429a      	cmp	r2, r3
 8007786:	d205      	bcs.n	8007794 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007788:	f000 f936 	bl	80079f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	e002      	b.n	800779a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800779a:	4a04      	ldr	r2, [pc, #16]	; (80077ac <prvSampleTimeNow+0x3c>)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80077a0:	68fb      	ldr	r3, [r7, #12]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	24000d4c 	.word	0x24000d4c

080077b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80077be:	2300      	movs	r3, #0
 80077c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d812      	bhi.n	80077fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	1ad2      	subs	r2, r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d302      	bcc.n	80077ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077e4:	2301      	movs	r3, #1
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	e01b      	b.n	8007822 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077ea:	4b10      	ldr	r3, [pc, #64]	; (800782c <prvInsertTimerInActiveList+0x7c>)
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3304      	adds	r3, #4
 80077f2:	4619      	mov	r1, r3
 80077f4:	4610      	mov	r0, r2
 80077f6:	f7fe f9a4 	bl	8005b42 <vListInsert>
 80077fa:	e012      	b.n	8007822 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	429a      	cmp	r2, r3
 8007802:	d206      	bcs.n	8007812 <prvInsertTimerInActiveList+0x62>
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	429a      	cmp	r2, r3
 800780a:	d302      	bcc.n	8007812 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800780c:	2301      	movs	r3, #1
 800780e:	617b      	str	r3, [r7, #20]
 8007810:	e007      	b.n	8007822 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007812:	4b07      	ldr	r3, [pc, #28]	; (8007830 <prvInsertTimerInActiveList+0x80>)
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3304      	adds	r3, #4
 800781a:	4619      	mov	r1, r3
 800781c:	4610      	mov	r0, r2
 800781e:	f7fe f990 	bl	8005b42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007822:	697b      	ldr	r3, [r7, #20]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	24000d40 	.word	0x24000d40
 8007830:	24000d3c 	.word	0x24000d3c

08007834 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08e      	sub	sp, #56	; 0x38
 8007838:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800783a:	e0ca      	b.n	80079d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	da18      	bge.n	8007874 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007842:	1d3b      	adds	r3, r7, #4
 8007844:	3304      	adds	r3, #4
 8007846:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10a      	bne.n	8007864 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	61fb      	str	r3, [r7, #28]
}
 8007860:	bf00      	nop
 8007862:	e7fe      	b.n	8007862 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800786a:	6850      	ldr	r0, [r2, #4]
 800786c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800786e:	6892      	ldr	r2, [r2, #8]
 8007870:	4611      	mov	r1, r2
 8007872:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	f2c0 80aa 	blt.w	80079d0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d004      	beq.n	8007892 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	3304      	adds	r3, #4
 800788c:	4618      	mov	r0, r3
 800788e:	f7fe f991 	bl	8005bb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007892:	463b      	mov	r3, r7
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff ff6b 	bl	8007770 <prvSampleTimeNow>
 800789a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b09      	cmp	r3, #9
 80078a0:	f200 8097 	bhi.w	80079d2 <prvProcessReceivedCommands+0x19e>
 80078a4:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <prvProcessReceivedCommands+0x78>)
 80078a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078aa:	bf00      	nop
 80078ac:	080078d5 	.word	0x080078d5
 80078b0:	080078d5 	.word	0x080078d5
 80078b4:	080078d5 	.word	0x080078d5
 80078b8:	08007949 	.word	0x08007949
 80078bc:	0800795d 	.word	0x0800795d
 80078c0:	080079a7 	.word	0x080079a7
 80078c4:	080078d5 	.word	0x080078d5
 80078c8:	080078d5 	.word	0x080078d5
 80078cc:	08007949 	.word	0x08007949
 80078d0:	0800795d 	.word	0x0800795d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078da:	f043 0301 	orr.w	r3, r3, #1
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	18d1      	adds	r1, r2, r3
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078f4:	f7ff ff5c 	bl	80077b0 <prvInsertTimerInActiveList>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d069      	beq.n	80079d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007904:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800790c:	f003 0304 	and.w	r3, r3, #4
 8007910:	2b00      	cmp	r3, #0
 8007912:	d05e      	beq.n	80079d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	441a      	add	r2, r3
 800791c:	2300      	movs	r3, #0
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	2300      	movs	r3, #0
 8007922:	2100      	movs	r1, #0
 8007924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007926:	f7ff fe05 	bl	8007534 <xTimerGenericCommand>
 800792a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d14f      	bne.n	80079d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	61bb      	str	r3, [r7, #24]
}
 8007944:	bf00      	nop
 8007946:	e7fe      	b.n	8007946 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800794e:	f023 0301 	bic.w	r3, r3, #1
 8007952:	b2da      	uxtb	r2, r3
 8007954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800795a:	e03a      	b.n	80079d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800795c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007962:	f043 0301 	orr.w	r3, r3, #1
 8007966:	b2da      	uxtb	r2, r3
 8007968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007972:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10a      	bne.n	8007992 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	617b      	str	r3, [r7, #20]
}
 800798e:	bf00      	nop
 8007990:	e7fe      	b.n	8007990 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007994:	699a      	ldr	r2, [r3, #24]
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	18d1      	adds	r1, r2, r3
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800799e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079a0:	f7ff ff06 	bl	80077b0 <prvInsertTimerInActiveList>
					break;
 80079a4:	e015      	b.n	80079d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80079a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079ac:	f003 0302 	and.w	r3, r3, #2
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d103      	bne.n	80079bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80079b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079b6:	f000 fbdb 	bl	8008170 <vPortFree>
 80079ba:	e00a      	b.n	80079d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079c2:	f023 0301 	bic.w	r3, r3, #1
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80079ce:	e000      	b.n	80079d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80079d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079d2:	4b08      	ldr	r3, [pc, #32]	; (80079f4 <prvProcessReceivedCommands+0x1c0>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	1d39      	adds	r1, r7, #4
 80079d8:	2200      	movs	r2, #0
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fe fbec 	bl	80061b8 <xQueueReceive>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f47f af2a 	bne.w	800783c <prvProcessReceivedCommands+0x8>
	}
}
 80079e8:	bf00      	nop
 80079ea:	bf00      	nop
 80079ec:	3730      	adds	r7, #48	; 0x30
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	24000d44 	.word	0x24000d44

080079f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b088      	sub	sp, #32
 80079fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079fe:	e048      	b.n	8007a92 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a00:	4b2d      	ldr	r3, [pc, #180]	; (8007ab8 <prvSwitchTimerLists+0xc0>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a0a:	4b2b      	ldr	r3, [pc, #172]	; (8007ab8 <prvSwitchTimerLists+0xc0>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	3304      	adds	r3, #4
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fe f8cb 	bl	8005bb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a2c:	f003 0304 	and.w	r3, r3, #4
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d02e      	beq.n	8007a92 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d90e      	bls.n	8007a64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a52:	4b19      	ldr	r3, [pc, #100]	; (8007ab8 <prvSwitchTimerLists+0xc0>)
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	f7fe f870 	bl	8005b42 <vListInsert>
 8007a62:	e016      	b.n	8007a92 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a64:	2300      	movs	r3, #0
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	2300      	movs	r3, #0
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f7ff fd60 	bl	8007534 <xTimerGenericCommand>
 8007a74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10a      	bne.n	8007a92 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a80:	f383 8811 	msr	BASEPRI, r3
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	603b      	str	r3, [r7, #0]
}
 8007a8e:	bf00      	nop
 8007a90:	e7fe      	b.n	8007a90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a92:	4b09      	ldr	r3, [pc, #36]	; (8007ab8 <prvSwitchTimerLists+0xc0>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1b1      	bne.n	8007a00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a9c:	4b06      	ldr	r3, [pc, #24]	; (8007ab8 <prvSwitchTimerLists+0xc0>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007aa2:	4b06      	ldr	r3, [pc, #24]	; (8007abc <prvSwitchTimerLists+0xc4>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a04      	ldr	r2, [pc, #16]	; (8007ab8 <prvSwitchTimerLists+0xc0>)
 8007aa8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007aaa:	4a04      	ldr	r2, [pc, #16]	; (8007abc <prvSwitchTimerLists+0xc4>)
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	6013      	str	r3, [r2, #0]
}
 8007ab0:	bf00      	nop
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	24000d3c 	.word	0x24000d3c
 8007abc:	24000d40 	.word	0x24000d40

08007ac0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ac6:	f000 f965 	bl	8007d94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007aca:	4b15      	ldr	r3, [pc, #84]	; (8007b20 <prvCheckForValidListAndQueue+0x60>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d120      	bne.n	8007b14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007ad2:	4814      	ldr	r0, [pc, #80]	; (8007b24 <prvCheckForValidListAndQueue+0x64>)
 8007ad4:	f7fd ffe4 	bl	8005aa0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ad8:	4813      	ldr	r0, [pc, #76]	; (8007b28 <prvCheckForValidListAndQueue+0x68>)
 8007ada:	f7fd ffe1 	bl	8005aa0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ade:	4b13      	ldr	r3, [pc, #76]	; (8007b2c <prvCheckForValidListAndQueue+0x6c>)
 8007ae0:	4a10      	ldr	r2, [pc, #64]	; (8007b24 <prvCheckForValidListAndQueue+0x64>)
 8007ae2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ae4:	4b12      	ldr	r3, [pc, #72]	; (8007b30 <prvCheckForValidListAndQueue+0x70>)
 8007ae6:	4a10      	ldr	r2, [pc, #64]	; (8007b28 <prvCheckForValidListAndQueue+0x68>)
 8007ae8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007aea:	2300      	movs	r3, #0
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	4b11      	ldr	r3, [pc, #68]	; (8007b34 <prvCheckForValidListAndQueue+0x74>)
 8007af0:	4a11      	ldr	r2, [pc, #68]	; (8007b38 <prvCheckForValidListAndQueue+0x78>)
 8007af2:	2110      	movs	r1, #16
 8007af4:	200a      	movs	r0, #10
 8007af6:	f7fe f8ef 	bl	8005cd8 <xQueueGenericCreateStatic>
 8007afa:	4603      	mov	r3, r0
 8007afc:	4a08      	ldr	r2, [pc, #32]	; (8007b20 <prvCheckForValidListAndQueue+0x60>)
 8007afe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b00:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <prvCheckForValidListAndQueue+0x60>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d005      	beq.n	8007b14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b08:	4b05      	ldr	r3, [pc, #20]	; (8007b20 <prvCheckForValidListAndQueue+0x60>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	490b      	ldr	r1, [pc, #44]	; (8007b3c <prvCheckForValidListAndQueue+0x7c>)
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fe fd42 	bl	8006598 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b14:	f000 f96e 	bl	8007df4 <vPortExitCritical>
}
 8007b18:	bf00      	nop
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	24000d44 	.word	0x24000d44
 8007b24:	24000d14 	.word	0x24000d14
 8007b28:	24000d28 	.word	0x24000d28
 8007b2c:	24000d3c 	.word	0x24000d3c
 8007b30:	24000d40 	.word	0x24000d40
 8007b34:	24000df0 	.word	0x24000df0
 8007b38:	24000d50 	.word	0x24000d50
 8007b3c:	08008628 	.word	0x08008628

08007b40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3b04      	subs	r3, #4
 8007b50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	3b04      	subs	r3, #4
 8007b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	f023 0201 	bic.w	r2, r3, #1
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3b04      	subs	r3, #4
 8007b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b70:	4a0c      	ldr	r2, [pc, #48]	; (8007ba4 <pxPortInitialiseStack+0x64>)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3b14      	subs	r3, #20
 8007b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3b04      	subs	r3, #4
 8007b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f06f 0202 	mvn.w	r2, #2
 8007b8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	3b20      	subs	r3, #32
 8007b94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b96:	68fb      	ldr	r3, [r7, #12]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	08007ba9 	.word	0x08007ba9

08007ba8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007bb2:	4b12      	ldr	r3, [pc, #72]	; (8007bfc <prvTaskExitError+0x54>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bba:	d00a      	beq.n	8007bd2 <prvTaskExitError+0x2a>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	60fb      	str	r3, [r7, #12]
}
 8007bce:	bf00      	nop
 8007bd0:	e7fe      	b.n	8007bd0 <prvTaskExitError+0x28>
	__asm volatile
 8007bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	60bb      	str	r3, [r7, #8]
}
 8007be4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007be6:	bf00      	nop
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d0fc      	beq.n	8007be8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bee:	bf00      	nop
 8007bf0:	bf00      	nop
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	24000010 	.word	0x24000010

08007c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c00:	4b07      	ldr	r3, [pc, #28]	; (8007c20 <pxCurrentTCBConst2>)
 8007c02:	6819      	ldr	r1, [r3, #0]
 8007c04:	6808      	ldr	r0, [r1, #0]
 8007c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0a:	f380 8809 	msr	PSP, r0
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f04f 0000 	mov.w	r0, #0
 8007c16:	f380 8811 	msr	BASEPRI, r0
 8007c1a:	4770      	bx	lr
 8007c1c:	f3af 8000 	nop.w

08007c20 <pxCurrentTCBConst2>:
 8007c20:	24000814 	.word	0x24000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop

08007c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c28:	4808      	ldr	r0, [pc, #32]	; (8007c4c <prvPortStartFirstTask+0x24>)
 8007c2a:	6800      	ldr	r0, [r0, #0]
 8007c2c:	6800      	ldr	r0, [r0, #0]
 8007c2e:	f380 8808 	msr	MSP, r0
 8007c32:	f04f 0000 	mov.w	r0, #0
 8007c36:	f380 8814 	msr	CONTROL, r0
 8007c3a:	b662      	cpsie	i
 8007c3c:	b661      	cpsie	f
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	df00      	svc	0
 8007c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c4a:	bf00      	nop
 8007c4c:	e000ed08 	.word	0xe000ed08

08007c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c56:	4b46      	ldr	r3, [pc, #280]	; (8007d70 <xPortStartScheduler+0x120>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a46      	ldr	r2, [pc, #280]	; (8007d74 <xPortStartScheduler+0x124>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d10a      	bne.n	8007c76 <xPortStartScheduler+0x26>
	__asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	613b      	str	r3, [r7, #16]
}
 8007c72:	bf00      	nop
 8007c74:	e7fe      	b.n	8007c74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c76:	4b3e      	ldr	r3, [pc, #248]	; (8007d70 <xPortStartScheduler+0x120>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a3f      	ldr	r2, [pc, #252]	; (8007d78 <xPortStartScheduler+0x128>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d10a      	bne.n	8007c96 <xPortStartScheduler+0x46>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	60fb      	str	r3, [r7, #12]
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c96:	4b39      	ldr	r3, [pc, #228]	; (8007d7c <xPortStartScheduler+0x12c>)
 8007c98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	22ff      	movs	r2, #255	; 0xff
 8007ca6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	4b31      	ldr	r3, [pc, #196]	; (8007d80 <xPortStartScheduler+0x130>)
 8007cbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cbe:	4b31      	ldr	r3, [pc, #196]	; (8007d84 <xPortStartScheduler+0x134>)
 8007cc0:	2207      	movs	r2, #7
 8007cc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cc4:	e009      	b.n	8007cda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007cc6:	4b2f      	ldr	r3, [pc, #188]	; (8007d84 <xPortStartScheduler+0x134>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	4a2d      	ldr	r2, [pc, #180]	; (8007d84 <xPortStartScheduler+0x134>)
 8007cce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007cd0:	78fb      	ldrb	r3, [r7, #3]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	005b      	lsls	r3, r3, #1
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cda:	78fb      	ldrb	r3, [r7, #3]
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce2:	2b80      	cmp	r3, #128	; 0x80
 8007ce4:	d0ef      	beq.n	8007cc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ce6:	4b27      	ldr	r3, [pc, #156]	; (8007d84 <xPortStartScheduler+0x134>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f1c3 0307 	rsb	r3, r3, #7
 8007cee:	2b04      	cmp	r3, #4
 8007cf0:	d00a      	beq.n	8007d08 <xPortStartScheduler+0xb8>
	__asm volatile
 8007cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	60bb      	str	r3, [r7, #8]
}
 8007d04:	bf00      	nop
 8007d06:	e7fe      	b.n	8007d06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d08:	4b1e      	ldr	r3, [pc, #120]	; (8007d84 <xPortStartScheduler+0x134>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	021b      	lsls	r3, r3, #8
 8007d0e:	4a1d      	ldr	r2, [pc, #116]	; (8007d84 <xPortStartScheduler+0x134>)
 8007d10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d12:	4b1c      	ldr	r3, [pc, #112]	; (8007d84 <xPortStartScheduler+0x134>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d1a:	4a1a      	ldr	r2, [pc, #104]	; (8007d84 <xPortStartScheduler+0x134>)
 8007d1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d26:	4b18      	ldr	r3, [pc, #96]	; (8007d88 <xPortStartScheduler+0x138>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a17      	ldr	r2, [pc, #92]	; (8007d88 <xPortStartScheduler+0x138>)
 8007d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d32:	4b15      	ldr	r3, [pc, #84]	; (8007d88 <xPortStartScheduler+0x138>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a14      	ldr	r2, [pc, #80]	; (8007d88 <xPortStartScheduler+0x138>)
 8007d38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d3e:	f000 f8dd 	bl	8007efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d42:	4b12      	ldr	r3, [pc, #72]	; (8007d8c <xPortStartScheduler+0x13c>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d48:	f000 f8fc 	bl	8007f44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d4c:	4b10      	ldr	r3, [pc, #64]	; (8007d90 <xPortStartScheduler+0x140>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a0f      	ldr	r2, [pc, #60]	; (8007d90 <xPortStartScheduler+0x140>)
 8007d52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d58:	f7ff ff66 	bl	8007c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d5c:	f7ff f84c 	bl	8006df8 <vTaskSwitchContext>
	prvTaskExitError();
 8007d60:	f7ff ff22 	bl	8007ba8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	e000ed00 	.word	0xe000ed00
 8007d74:	410fc271 	.word	0x410fc271
 8007d78:	410fc270 	.word	0x410fc270
 8007d7c:	e000e400 	.word	0xe000e400
 8007d80:	24000e40 	.word	0x24000e40
 8007d84:	24000e44 	.word	0x24000e44
 8007d88:	e000ed20 	.word	0xe000ed20
 8007d8c:	24000010 	.word	0x24000010
 8007d90:	e000ef34 	.word	0xe000ef34

08007d94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	607b      	str	r3, [r7, #4]
}
 8007dac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007dae:	4b0f      	ldr	r3, [pc, #60]	; (8007dec <vPortEnterCritical+0x58>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3301      	adds	r3, #1
 8007db4:	4a0d      	ldr	r2, [pc, #52]	; (8007dec <vPortEnterCritical+0x58>)
 8007db6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007db8:	4b0c      	ldr	r3, [pc, #48]	; (8007dec <vPortEnterCritical+0x58>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d10f      	bne.n	8007de0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007dc0:	4b0b      	ldr	r3, [pc, #44]	; (8007df0 <vPortEnterCritical+0x5c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	603b      	str	r3, [r7, #0]
}
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <vPortEnterCritical+0x4a>
	}
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	24000010 	.word	0x24000010
 8007df0:	e000ed04 	.word	0xe000ed04

08007df4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dfa:	4b12      	ldr	r3, [pc, #72]	; (8007e44 <vPortExitCritical+0x50>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10a      	bne.n	8007e18 <vPortExitCritical+0x24>
	__asm volatile
 8007e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	607b      	str	r3, [r7, #4]
}
 8007e14:	bf00      	nop
 8007e16:	e7fe      	b.n	8007e16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e18:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <vPortExitCritical+0x50>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	4a09      	ldr	r2, [pc, #36]	; (8007e44 <vPortExitCritical+0x50>)
 8007e20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e22:	4b08      	ldr	r3, [pc, #32]	; (8007e44 <vPortExitCritical+0x50>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d105      	bne.n	8007e36 <vPortExitCritical+0x42>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	f383 8811 	msr	BASEPRI, r3
}
 8007e34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e36:	bf00      	nop
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	24000010 	.word	0x24000010
	...

08007e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e50:	f3ef 8009 	mrs	r0, PSP
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	4b15      	ldr	r3, [pc, #84]	; (8007eb0 <pxCurrentTCBConst>)
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	f01e 0f10 	tst.w	lr, #16
 8007e60:	bf08      	it	eq
 8007e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6a:	6010      	str	r0, [r2, #0]
 8007e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e74:	f380 8811 	msr	BASEPRI, r0
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f7fe ffba 	bl	8006df8 <vTaskSwitchContext>
 8007e84:	f04f 0000 	mov.w	r0, #0
 8007e88:	f380 8811 	msr	BASEPRI, r0
 8007e8c:	bc09      	pop	{r0, r3}
 8007e8e:	6819      	ldr	r1, [r3, #0]
 8007e90:	6808      	ldr	r0, [r1, #0]
 8007e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e96:	f01e 0f10 	tst.w	lr, #16
 8007e9a:	bf08      	it	eq
 8007e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ea0:	f380 8809 	msr	PSP, r0
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	f3af 8000 	nop.w

08007eb0 <pxCurrentTCBConst>:
 8007eb0:	24000814 	.word	0x24000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007eb4:	bf00      	nop
 8007eb6:	bf00      	nop

08007eb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	607b      	str	r3, [r7, #4]
}
 8007ed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ed2:	f7fe fed7 	bl	8006c84 <xTaskIncrementTick>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007edc:	4b06      	ldr	r3, [pc, #24]	; (8007ef8 <xPortSysTickHandler+0x40>)
 8007ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	f383 8811 	msr	BASEPRI, r3
}
 8007eee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	e000ed04 	.word	0xe000ed04

08007efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007efc:	b480      	push	{r7}
 8007efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f00:	4b0b      	ldr	r3, [pc, #44]	; (8007f30 <vPortSetupTimerInterrupt+0x34>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f06:	4b0b      	ldr	r3, [pc, #44]	; (8007f34 <vPortSetupTimerInterrupt+0x38>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f0c:	4b0a      	ldr	r3, [pc, #40]	; (8007f38 <vPortSetupTimerInterrupt+0x3c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a0a      	ldr	r2, [pc, #40]	; (8007f3c <vPortSetupTimerInterrupt+0x40>)
 8007f12:	fba2 2303 	umull	r2, r3, r2, r3
 8007f16:	099b      	lsrs	r3, r3, #6
 8007f18:	4a09      	ldr	r2, [pc, #36]	; (8007f40 <vPortSetupTimerInterrupt+0x44>)
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f1e:	4b04      	ldr	r3, [pc, #16]	; (8007f30 <vPortSetupTimerInterrupt+0x34>)
 8007f20:	2207      	movs	r2, #7
 8007f22:	601a      	str	r2, [r3, #0]
}
 8007f24:	bf00      	nop
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	e000e010 	.word	0xe000e010
 8007f34:	e000e018 	.word	0xe000e018
 8007f38:	24000000 	.word	0x24000000
 8007f3c:	10624dd3 	.word	0x10624dd3
 8007f40:	e000e014 	.word	0xe000e014

08007f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f54 <vPortEnableVFP+0x10>
 8007f48:	6801      	ldr	r1, [r0, #0]
 8007f4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f4e:	6001      	str	r1, [r0, #0]
 8007f50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f52:	bf00      	nop
 8007f54:	e000ed88 	.word	0xe000ed88

08007f58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f5e:	f3ef 8305 	mrs	r3, IPSR
 8007f62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2b0f      	cmp	r3, #15
 8007f68:	d914      	bls.n	8007f94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f6a:	4a17      	ldr	r2, [pc, #92]	; (8007fc8 <vPortValidateInterruptPriority+0x70>)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4413      	add	r3, r2
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f74:	4b15      	ldr	r3, [pc, #84]	; (8007fcc <vPortValidateInterruptPriority+0x74>)
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	7afa      	ldrb	r2, [r7, #11]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d20a      	bcs.n	8007f94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	607b      	str	r3, [r7, #4]
}
 8007f90:	bf00      	nop
 8007f92:	e7fe      	b.n	8007f92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f94:	4b0e      	ldr	r3, [pc, #56]	; (8007fd0 <vPortValidateInterruptPriority+0x78>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f9c:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <vPortValidateInterruptPriority+0x7c>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d90a      	bls.n	8007fba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	603b      	str	r3, [r7, #0]
}
 8007fb6:	bf00      	nop
 8007fb8:	e7fe      	b.n	8007fb8 <vPortValidateInterruptPriority+0x60>
	}
 8007fba:	bf00      	nop
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	e000e3f0 	.word	0xe000e3f0
 8007fcc:	24000e40 	.word	0x24000e40
 8007fd0:	e000ed0c 	.word	0xe000ed0c
 8007fd4:	24000e44 	.word	0x24000e44

08007fd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08a      	sub	sp, #40	; 0x28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fe4:	f7fe fd92 	bl	8006b0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fe8:	4b5b      	ldr	r3, [pc, #364]	; (8008158 <pvPortMalloc+0x180>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ff0:	f000 f920 	bl	8008234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ff4:	4b59      	ldr	r3, [pc, #356]	; (800815c <pvPortMalloc+0x184>)
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f040 8093 	bne.w	8008128 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d01d      	beq.n	8008044 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008008:	2208      	movs	r2, #8
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4413      	add	r3, r2
 800800e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f003 0307 	and.w	r3, r3, #7
 8008016:	2b00      	cmp	r3, #0
 8008018:	d014      	beq.n	8008044 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f023 0307 	bic.w	r3, r3, #7
 8008020:	3308      	adds	r3, #8
 8008022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f003 0307 	and.w	r3, r3, #7
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00a      	beq.n	8008044 <pvPortMalloc+0x6c>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	617b      	str	r3, [r7, #20]
}
 8008040:	bf00      	nop
 8008042:	e7fe      	b.n	8008042 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d06e      	beq.n	8008128 <pvPortMalloc+0x150>
 800804a:	4b45      	ldr	r3, [pc, #276]	; (8008160 <pvPortMalloc+0x188>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	429a      	cmp	r2, r3
 8008052:	d869      	bhi.n	8008128 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008054:	4b43      	ldr	r3, [pc, #268]	; (8008164 <pvPortMalloc+0x18c>)
 8008056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008058:	4b42      	ldr	r3, [pc, #264]	; (8008164 <pvPortMalloc+0x18c>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800805e:	e004      	b.n	800806a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	429a      	cmp	r2, r3
 8008072:	d903      	bls.n	800807c <pvPortMalloc+0xa4>
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1f1      	bne.n	8008060 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800807c:	4b36      	ldr	r3, [pc, #216]	; (8008158 <pvPortMalloc+0x180>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008082:	429a      	cmp	r2, r3
 8008084:	d050      	beq.n	8008128 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2208      	movs	r2, #8
 800808c:	4413      	add	r3, r2
 800808e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	1ad2      	subs	r2, r2, r3
 80080a0:	2308      	movs	r3, #8
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d91f      	bls.n	80080e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4413      	add	r3, r2
 80080ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	f003 0307 	and.w	r3, r3, #7
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00a      	beq.n	80080d0 <pvPortMalloc+0xf8>
	__asm volatile
 80080ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	613b      	str	r3, [r7, #16]
}
 80080cc:	bf00      	nop
 80080ce:	e7fe      	b.n	80080ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	1ad2      	subs	r2, r2, r3
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080e2:	69b8      	ldr	r0, [r7, #24]
 80080e4:	f000 f908 	bl	80082f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080e8:	4b1d      	ldr	r3, [pc, #116]	; (8008160 <pvPortMalloc+0x188>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	4a1b      	ldr	r2, [pc, #108]	; (8008160 <pvPortMalloc+0x188>)
 80080f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080f6:	4b1a      	ldr	r3, [pc, #104]	; (8008160 <pvPortMalloc+0x188>)
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	4b1b      	ldr	r3, [pc, #108]	; (8008168 <pvPortMalloc+0x190>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d203      	bcs.n	800810a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008102:	4b17      	ldr	r3, [pc, #92]	; (8008160 <pvPortMalloc+0x188>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a18      	ldr	r2, [pc, #96]	; (8008168 <pvPortMalloc+0x190>)
 8008108:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	4b13      	ldr	r3, [pc, #76]	; (800815c <pvPortMalloc+0x184>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	431a      	orrs	r2, r3
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811a:	2200      	movs	r2, #0
 800811c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800811e:	4b13      	ldr	r3, [pc, #76]	; (800816c <pvPortMalloc+0x194>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3301      	adds	r3, #1
 8008124:	4a11      	ldr	r2, [pc, #68]	; (800816c <pvPortMalloc+0x194>)
 8008126:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008128:	f7fe fcfe 	bl	8006b28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	f003 0307 	and.w	r3, r3, #7
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00a      	beq.n	800814c <pvPortMalloc+0x174>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	60fb      	str	r3, [r7, #12]
}
 8008148:	bf00      	nop
 800814a:	e7fe      	b.n	800814a <pvPortMalloc+0x172>
	return pvReturn;
 800814c:	69fb      	ldr	r3, [r7, #28]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3728      	adds	r7, #40	; 0x28
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	24004a50 	.word	0x24004a50
 800815c:	24004a64 	.word	0x24004a64
 8008160:	24004a54 	.word	0x24004a54
 8008164:	24004a48 	.word	0x24004a48
 8008168:	24004a58 	.word	0x24004a58
 800816c:	24004a5c 	.word	0x24004a5c

08008170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d04d      	beq.n	800821e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008182:	2308      	movs	r3, #8
 8008184:	425b      	negs	r3, r3
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	4413      	add	r3, r2
 800818a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	4b24      	ldr	r3, [pc, #144]	; (8008228 <vPortFree+0xb8>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4013      	ands	r3, r2
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10a      	bne.n	80081b4 <vPortFree+0x44>
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	60fb      	str	r3, [r7, #12]
}
 80081b0:	bf00      	nop
 80081b2:	e7fe      	b.n	80081b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00a      	beq.n	80081d2 <vPortFree+0x62>
	__asm volatile
 80081bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	60bb      	str	r3, [r7, #8]
}
 80081ce:	bf00      	nop
 80081d0:	e7fe      	b.n	80081d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	685a      	ldr	r2, [r3, #4]
 80081d6:	4b14      	ldr	r3, [pc, #80]	; (8008228 <vPortFree+0xb8>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4013      	ands	r3, r2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d01e      	beq.n	800821e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d11a      	bne.n	800821e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	4b0e      	ldr	r3, [pc, #56]	; (8008228 <vPortFree+0xb8>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	43db      	mvns	r3, r3
 80081f2:	401a      	ands	r2, r3
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081f8:	f7fe fc88 	bl	8006b0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	4b0a      	ldr	r3, [pc, #40]	; (800822c <vPortFree+0xbc>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4413      	add	r3, r2
 8008206:	4a09      	ldr	r2, [pc, #36]	; (800822c <vPortFree+0xbc>)
 8008208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800820a:	6938      	ldr	r0, [r7, #16]
 800820c:	f000 f874 	bl	80082f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008210:	4b07      	ldr	r3, [pc, #28]	; (8008230 <vPortFree+0xc0>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	3301      	adds	r3, #1
 8008216:	4a06      	ldr	r2, [pc, #24]	; (8008230 <vPortFree+0xc0>)
 8008218:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800821a:	f7fe fc85 	bl	8006b28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800821e:	bf00      	nop
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	24004a64 	.word	0x24004a64
 800822c:	24004a54 	.word	0x24004a54
 8008230:	24004a60 	.word	0x24004a60

08008234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800823a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800823e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008240:	4b27      	ldr	r3, [pc, #156]	; (80082e0 <prvHeapInit+0xac>)
 8008242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f003 0307 	and.w	r3, r3, #7
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00c      	beq.n	8008268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3307      	adds	r3, #7
 8008252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f023 0307 	bic.w	r3, r3, #7
 800825a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	4a1f      	ldr	r2, [pc, #124]	; (80082e0 <prvHeapInit+0xac>)
 8008264:	4413      	add	r3, r2
 8008266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800826c:	4a1d      	ldr	r2, [pc, #116]	; (80082e4 <prvHeapInit+0xb0>)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008272:	4b1c      	ldr	r3, [pc, #112]	; (80082e4 <prvHeapInit+0xb0>)
 8008274:	2200      	movs	r2, #0
 8008276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	4413      	add	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008280:	2208      	movs	r2, #8
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	1a9b      	subs	r3, r3, r2
 8008286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f023 0307 	bic.w	r3, r3, #7
 800828e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	4a15      	ldr	r2, [pc, #84]	; (80082e8 <prvHeapInit+0xb4>)
 8008294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008296:	4b14      	ldr	r3, [pc, #80]	; (80082e8 <prvHeapInit+0xb4>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2200      	movs	r2, #0
 800829c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800829e:	4b12      	ldr	r3, [pc, #72]	; (80082e8 <prvHeapInit+0xb4>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2200      	movs	r2, #0
 80082a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	1ad2      	subs	r2, r2, r3
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082b4:	4b0c      	ldr	r3, [pc, #48]	; (80082e8 <prvHeapInit+0xb4>)
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	4a0a      	ldr	r2, [pc, #40]	; (80082ec <prvHeapInit+0xb8>)
 80082c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	4a09      	ldr	r2, [pc, #36]	; (80082f0 <prvHeapInit+0xbc>)
 80082ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082cc:	4b09      	ldr	r3, [pc, #36]	; (80082f4 <prvHeapInit+0xc0>)
 80082ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082d2:	601a      	str	r2, [r3, #0]
}
 80082d4:	bf00      	nop
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	24000e48 	.word	0x24000e48
 80082e4:	24004a48 	.word	0x24004a48
 80082e8:	24004a50 	.word	0x24004a50
 80082ec:	24004a58 	.word	0x24004a58
 80082f0:	24004a54 	.word	0x24004a54
 80082f4:	24004a64 	.word	0x24004a64

080082f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008300:	4b28      	ldr	r3, [pc, #160]	; (80083a4 <prvInsertBlockIntoFreeList+0xac>)
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	e002      	b.n	800830c <prvInsertBlockIntoFreeList+0x14>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	429a      	cmp	r2, r3
 8008314:	d8f7      	bhi.n	8008306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	4413      	add	r3, r2
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	429a      	cmp	r2, r3
 8008326:	d108      	bne.n	800833a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	441a      	add	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	441a      	add	r2, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	429a      	cmp	r2, r3
 800834c:	d118      	bne.n	8008380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	4b15      	ldr	r3, [pc, #84]	; (80083a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	429a      	cmp	r2, r3
 8008358:	d00d      	beq.n	8008376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	441a      	add	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	e008      	b.n	8008388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008376:	4b0c      	ldr	r3, [pc, #48]	; (80083a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	e003      	b.n	8008388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	429a      	cmp	r2, r3
 800838e:	d002      	beq.n	8008396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008396:	bf00      	nop
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	24004a48 	.word	0x24004a48
 80083a8:	24004a50 	.word	0x24004a50

080083ac <__libc_init_array>:
 80083ac:	b570      	push	{r4, r5, r6, lr}
 80083ae:	4d0d      	ldr	r5, [pc, #52]	; (80083e4 <__libc_init_array+0x38>)
 80083b0:	4c0d      	ldr	r4, [pc, #52]	; (80083e8 <__libc_init_array+0x3c>)
 80083b2:	1b64      	subs	r4, r4, r5
 80083b4:	10a4      	asrs	r4, r4, #2
 80083b6:	2600      	movs	r6, #0
 80083b8:	42a6      	cmp	r6, r4
 80083ba:	d109      	bne.n	80083d0 <__libc_init_array+0x24>
 80083bc:	4d0b      	ldr	r5, [pc, #44]	; (80083ec <__libc_init_array+0x40>)
 80083be:	4c0c      	ldr	r4, [pc, #48]	; (80083f0 <__libc_init_array+0x44>)
 80083c0:	f000 f8f6 	bl	80085b0 <_init>
 80083c4:	1b64      	subs	r4, r4, r5
 80083c6:	10a4      	asrs	r4, r4, #2
 80083c8:	2600      	movs	r6, #0
 80083ca:	42a6      	cmp	r6, r4
 80083cc:	d105      	bne.n	80083da <__libc_init_array+0x2e>
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
 80083d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083d4:	4798      	blx	r3
 80083d6:	3601      	adds	r6, #1
 80083d8:	e7ee      	b.n	80083b8 <__libc_init_array+0xc>
 80083da:	f855 3b04 	ldr.w	r3, [r5], #4
 80083de:	4798      	blx	r3
 80083e0:	3601      	adds	r6, #1
 80083e2:	e7f2      	b.n	80083ca <__libc_init_array+0x1e>
 80083e4:	08008790 	.word	0x08008790
 80083e8:	08008790 	.word	0x08008790
 80083ec:	08008790 	.word	0x08008790
 80083f0:	08008794 	.word	0x08008794

080083f4 <__retarget_lock_acquire_recursive>:
 80083f4:	4770      	bx	lr

080083f6 <__retarget_lock_release_recursive>:
 80083f6:	4770      	bx	lr

080083f8 <memcpy>:
 80083f8:	440a      	add	r2, r1
 80083fa:	4291      	cmp	r1, r2
 80083fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008400:	d100      	bne.n	8008404 <memcpy+0xc>
 8008402:	4770      	bx	lr
 8008404:	b510      	push	{r4, lr}
 8008406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800840a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800840e:	4291      	cmp	r1, r2
 8008410:	d1f9      	bne.n	8008406 <memcpy+0xe>
 8008412:	bd10      	pop	{r4, pc}

08008414 <memset>:
 8008414:	4402      	add	r2, r0
 8008416:	4603      	mov	r3, r0
 8008418:	4293      	cmp	r3, r2
 800841a:	d100      	bne.n	800841e <memset+0xa>
 800841c:	4770      	bx	lr
 800841e:	f803 1b01 	strb.w	r1, [r3], #1
 8008422:	e7f9      	b.n	8008418 <memset+0x4>

08008424 <cleanup_glue>:
 8008424:	b538      	push	{r3, r4, r5, lr}
 8008426:	460c      	mov	r4, r1
 8008428:	6809      	ldr	r1, [r1, #0]
 800842a:	4605      	mov	r5, r0
 800842c:	b109      	cbz	r1, 8008432 <cleanup_glue+0xe>
 800842e:	f7ff fff9 	bl	8008424 <cleanup_glue>
 8008432:	4621      	mov	r1, r4
 8008434:	4628      	mov	r0, r5
 8008436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800843a:	f000 b869 	b.w	8008510 <_free_r>
	...

08008440 <_reclaim_reent>:
 8008440:	4b2c      	ldr	r3, [pc, #176]	; (80084f4 <_reclaim_reent+0xb4>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4283      	cmp	r3, r0
 8008446:	b570      	push	{r4, r5, r6, lr}
 8008448:	4604      	mov	r4, r0
 800844a:	d051      	beq.n	80084f0 <_reclaim_reent+0xb0>
 800844c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800844e:	b143      	cbz	r3, 8008462 <_reclaim_reent+0x22>
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d14a      	bne.n	80084ec <_reclaim_reent+0xac>
 8008456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008458:	6819      	ldr	r1, [r3, #0]
 800845a:	b111      	cbz	r1, 8008462 <_reclaim_reent+0x22>
 800845c:	4620      	mov	r0, r4
 800845e:	f000 f857 	bl	8008510 <_free_r>
 8008462:	6961      	ldr	r1, [r4, #20]
 8008464:	b111      	cbz	r1, 800846c <_reclaim_reent+0x2c>
 8008466:	4620      	mov	r0, r4
 8008468:	f000 f852 	bl	8008510 <_free_r>
 800846c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800846e:	b111      	cbz	r1, 8008476 <_reclaim_reent+0x36>
 8008470:	4620      	mov	r0, r4
 8008472:	f000 f84d 	bl	8008510 <_free_r>
 8008476:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008478:	b111      	cbz	r1, 8008480 <_reclaim_reent+0x40>
 800847a:	4620      	mov	r0, r4
 800847c:	f000 f848 	bl	8008510 <_free_r>
 8008480:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008482:	b111      	cbz	r1, 800848a <_reclaim_reent+0x4a>
 8008484:	4620      	mov	r0, r4
 8008486:	f000 f843 	bl	8008510 <_free_r>
 800848a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800848c:	b111      	cbz	r1, 8008494 <_reclaim_reent+0x54>
 800848e:	4620      	mov	r0, r4
 8008490:	f000 f83e 	bl	8008510 <_free_r>
 8008494:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008496:	b111      	cbz	r1, 800849e <_reclaim_reent+0x5e>
 8008498:	4620      	mov	r0, r4
 800849a:	f000 f839 	bl	8008510 <_free_r>
 800849e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80084a0:	b111      	cbz	r1, 80084a8 <_reclaim_reent+0x68>
 80084a2:	4620      	mov	r0, r4
 80084a4:	f000 f834 	bl	8008510 <_free_r>
 80084a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084aa:	b111      	cbz	r1, 80084b2 <_reclaim_reent+0x72>
 80084ac:	4620      	mov	r0, r4
 80084ae:	f000 f82f 	bl	8008510 <_free_r>
 80084b2:	69a3      	ldr	r3, [r4, #24]
 80084b4:	b1e3      	cbz	r3, 80084f0 <_reclaim_reent+0xb0>
 80084b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80084b8:	4620      	mov	r0, r4
 80084ba:	4798      	blx	r3
 80084bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80084be:	b1b9      	cbz	r1, 80084f0 <_reclaim_reent+0xb0>
 80084c0:	4620      	mov	r0, r4
 80084c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80084c6:	f7ff bfad 	b.w	8008424 <cleanup_glue>
 80084ca:	5949      	ldr	r1, [r1, r5]
 80084cc:	b941      	cbnz	r1, 80084e0 <_reclaim_reent+0xa0>
 80084ce:	3504      	adds	r5, #4
 80084d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084d2:	2d80      	cmp	r5, #128	; 0x80
 80084d4:	68d9      	ldr	r1, [r3, #12]
 80084d6:	d1f8      	bne.n	80084ca <_reclaim_reent+0x8a>
 80084d8:	4620      	mov	r0, r4
 80084da:	f000 f819 	bl	8008510 <_free_r>
 80084de:	e7ba      	b.n	8008456 <_reclaim_reent+0x16>
 80084e0:	680e      	ldr	r6, [r1, #0]
 80084e2:	4620      	mov	r0, r4
 80084e4:	f000 f814 	bl	8008510 <_free_r>
 80084e8:	4631      	mov	r1, r6
 80084ea:	e7ef      	b.n	80084cc <_reclaim_reent+0x8c>
 80084ec:	2500      	movs	r5, #0
 80084ee:	e7ef      	b.n	80084d0 <_reclaim_reent+0x90>
 80084f0:	bd70      	pop	{r4, r5, r6, pc}
 80084f2:	bf00      	nop
 80084f4:	24000014 	.word	0x24000014

080084f8 <__malloc_lock>:
 80084f8:	4801      	ldr	r0, [pc, #4]	; (8008500 <__malloc_lock+0x8>)
 80084fa:	f7ff bf7b 	b.w	80083f4 <__retarget_lock_acquire_recursive>
 80084fe:	bf00      	nop
 8008500:	24004c14 	.word	0x24004c14

08008504 <__malloc_unlock>:
 8008504:	4801      	ldr	r0, [pc, #4]	; (800850c <__malloc_unlock+0x8>)
 8008506:	f7ff bf76 	b.w	80083f6 <__retarget_lock_release_recursive>
 800850a:	bf00      	nop
 800850c:	24004c14 	.word	0x24004c14

08008510 <_free_r>:
 8008510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008512:	2900      	cmp	r1, #0
 8008514:	d048      	beq.n	80085a8 <_free_r+0x98>
 8008516:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800851a:	9001      	str	r0, [sp, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	f1a1 0404 	sub.w	r4, r1, #4
 8008522:	bfb8      	it	lt
 8008524:	18e4      	addlt	r4, r4, r3
 8008526:	f7ff ffe7 	bl	80084f8 <__malloc_lock>
 800852a:	4a20      	ldr	r2, [pc, #128]	; (80085ac <_free_r+0x9c>)
 800852c:	9801      	ldr	r0, [sp, #4]
 800852e:	6813      	ldr	r3, [r2, #0]
 8008530:	4615      	mov	r5, r2
 8008532:	b933      	cbnz	r3, 8008542 <_free_r+0x32>
 8008534:	6063      	str	r3, [r4, #4]
 8008536:	6014      	str	r4, [r2, #0]
 8008538:	b003      	add	sp, #12
 800853a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800853e:	f7ff bfe1 	b.w	8008504 <__malloc_unlock>
 8008542:	42a3      	cmp	r3, r4
 8008544:	d90b      	bls.n	800855e <_free_r+0x4e>
 8008546:	6821      	ldr	r1, [r4, #0]
 8008548:	1862      	adds	r2, r4, r1
 800854a:	4293      	cmp	r3, r2
 800854c:	bf04      	itt	eq
 800854e:	681a      	ldreq	r2, [r3, #0]
 8008550:	685b      	ldreq	r3, [r3, #4]
 8008552:	6063      	str	r3, [r4, #4]
 8008554:	bf04      	itt	eq
 8008556:	1852      	addeq	r2, r2, r1
 8008558:	6022      	streq	r2, [r4, #0]
 800855a:	602c      	str	r4, [r5, #0]
 800855c:	e7ec      	b.n	8008538 <_free_r+0x28>
 800855e:	461a      	mov	r2, r3
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	b10b      	cbz	r3, 8008568 <_free_r+0x58>
 8008564:	42a3      	cmp	r3, r4
 8008566:	d9fa      	bls.n	800855e <_free_r+0x4e>
 8008568:	6811      	ldr	r1, [r2, #0]
 800856a:	1855      	adds	r5, r2, r1
 800856c:	42a5      	cmp	r5, r4
 800856e:	d10b      	bne.n	8008588 <_free_r+0x78>
 8008570:	6824      	ldr	r4, [r4, #0]
 8008572:	4421      	add	r1, r4
 8008574:	1854      	adds	r4, r2, r1
 8008576:	42a3      	cmp	r3, r4
 8008578:	6011      	str	r1, [r2, #0]
 800857a:	d1dd      	bne.n	8008538 <_free_r+0x28>
 800857c:	681c      	ldr	r4, [r3, #0]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	6053      	str	r3, [r2, #4]
 8008582:	4421      	add	r1, r4
 8008584:	6011      	str	r1, [r2, #0]
 8008586:	e7d7      	b.n	8008538 <_free_r+0x28>
 8008588:	d902      	bls.n	8008590 <_free_r+0x80>
 800858a:	230c      	movs	r3, #12
 800858c:	6003      	str	r3, [r0, #0]
 800858e:	e7d3      	b.n	8008538 <_free_r+0x28>
 8008590:	6825      	ldr	r5, [r4, #0]
 8008592:	1961      	adds	r1, r4, r5
 8008594:	428b      	cmp	r3, r1
 8008596:	bf04      	itt	eq
 8008598:	6819      	ldreq	r1, [r3, #0]
 800859a:	685b      	ldreq	r3, [r3, #4]
 800859c:	6063      	str	r3, [r4, #4]
 800859e:	bf04      	itt	eq
 80085a0:	1949      	addeq	r1, r1, r5
 80085a2:	6021      	streq	r1, [r4, #0]
 80085a4:	6054      	str	r4, [r2, #4]
 80085a6:	e7c7      	b.n	8008538 <_free_r+0x28>
 80085a8:	b003      	add	sp, #12
 80085aa:	bd30      	pop	{r4, r5, pc}
 80085ac:	24004a68 	.word	0x24004a68

080085b0 <_init>:
 80085b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b2:	bf00      	nop
 80085b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085b6:	bc08      	pop	{r3}
 80085b8:	469e      	mov	lr, r3
 80085ba:	4770      	bx	lr

080085bc <_fini>:
 80085bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085be:	bf00      	nop
 80085c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085c2:	bc08      	pop	{r3}
 80085c4:	469e      	mov	lr, r3
 80085c6:	4770      	bx	lr
