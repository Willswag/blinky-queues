
blinky-queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5e8  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800a898  0800a898  0001a898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ab80  0800ab80  0001ab80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ab88  0800ab88  0001ab88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ab8c  0800ab8c  0001ab8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800ab90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004c10  24000078  0800ac08  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004c88  0800ac08  00024c88  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031e8a  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004ebc  00000000  00000000  00051f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001918  00000000  00000000  00056df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001790  00000000  00000000  00058708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003345c  00000000  00000000  00059e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020ffb  00000000  00000000  0008d2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014a50a  00000000  00000000  000ae2ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001f87f9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006cf0  00000000  00000000  001f884c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a880 	.word	0x0800a880

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	0800a880 	.word	0x0800a880

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandsToBlink */
  CommandsToBlinkHandle = osMessageQueueNew (16, sizeof(uint16_t), &CommandsToBlink_attributes);
 80005ec:	4a1c      	ldr	r2, [pc, #112]	; (8000660 <MX_FREERTOS_Init+0x78>)
 80005ee:	2102      	movs	r1, #2
 80005f0:	2010      	movs	r0, #16
 80005f2:	f007 f940 	bl	8007876 <osMessageQueueNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a1a      	ldr	r2, [pc, #104]	; (8000664 <MX_FREERTOS_Init+0x7c>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of times_blinked */
  times_blinkedHandle = osMessageQueueNew (16, sizeof(uint16_t), &times_blinked_attributes);
 80005fc:	4a1a      	ldr	r2, [pc, #104]	; (8000668 <MX_FREERTOS_Init+0x80>)
 80005fe:	2102      	movs	r1, #2
 8000600:	2010      	movs	r0, #16
 8000602:	f007 f938 	bl	8007876 <osMessageQueueNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a18      	ldr	r2, [pc, #96]	; (800066c <MX_FREERTOS_Init+0x84>)
 800060a:	6013      	str	r3, [r2, #0]

  /* creation of rawCommands */
  rawCommandsHandle = osMessageQueueNew (16, sizeof(char), &rawCommands_attributes);
 800060c:	4a18      	ldr	r2, [pc, #96]	; (8000670 <MX_FREERTOS_Init+0x88>)
 800060e:	2101      	movs	r1, #1
 8000610:	2010      	movs	r0, #16
 8000612:	f007 f930 	bl	8007876 <osMessageQueueNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a16      	ldr	r2, [pc, #88]	; (8000674 <MX_FREERTOS_Init+0x8c>)
 800061a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CommandLine */
  CommandLineHandle = osThreadNew(StartCommandLine, NULL, &CommandLine_attributes);
 800061c:	4a16      	ldr	r2, [pc, #88]	; (8000678 <MX_FREERTOS_Init+0x90>)
 800061e:	2100      	movs	r1, #0
 8000620:	4816      	ldr	r0, [pc, #88]	; (800067c <MX_FREERTOS_Init+0x94>)
 8000622:	f007 f87b 	bl	800771c <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a15      	ldr	r2, [pc, #84]	; (8000680 <MX_FREERTOS_Init+0x98>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker1 */
  Blinker1Handle = osThreadNew(StartBlinker1, NULL, &Blinker1_attributes);
 800062c:	4a15      	ldr	r2, [pc, #84]	; (8000684 <MX_FREERTOS_Init+0x9c>)
 800062e:	2100      	movs	r1, #0
 8000630:	4815      	ldr	r0, [pc, #84]	; (8000688 <MX_FREERTOS_Init+0xa0>)
 8000632:	f007 f873 	bl	800771c <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <MX_FREERTOS_Init+0xa4>)
 800063a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker2 */
  Blinker2Handle = osThreadNew(StartBlinker2, NULL, &Blinker2_attributes);
 800063c:	4a14      	ldr	r2, [pc, #80]	; (8000690 <MX_FREERTOS_Init+0xa8>)
 800063e:	2100      	movs	r1, #0
 8000640:	4814      	ldr	r0, [pc, #80]	; (8000694 <MX_FREERTOS_Init+0xac>)
 8000642:	f007 f86b 	bl	800771c <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <MX_FREERTOS_Init+0xb0>)
 800064a:	6013      	str	r3, [r2, #0]

  /* creation of Blinker3 */
  Blinker3Handle = osThreadNew(StartBlinker3, NULL, &Blinker3_attributes);
 800064c:	4a13      	ldr	r2, [pc, #76]	; (800069c <MX_FREERTOS_Init+0xb4>)
 800064e:	2100      	movs	r1, #0
 8000650:	4813      	ldr	r0, [pc, #76]	; (80006a0 <MX_FREERTOS_Init+0xb8>)
 8000652:	f007 f863 	bl	800771c <osThreadNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <MX_FREERTOS_Init+0xbc>)
 800065a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	0800a99c 	.word	0x0800a99c
 8000664:	24004b50 	.word	0x24004b50
 8000668:	0800a9b4 	.word	0x0800a9b4
 800066c:	24004b58 	.word	0x24004b58
 8000670:	0800a9cc 	.word	0x0800a9cc
 8000674:	24004b54 	.word	0x24004b54
 8000678:	0800a90c 	.word	0x0800a90c
 800067c:	080006a9 	.word	0x080006a9
 8000680:	24004ae0 	.word	0x24004ae0
 8000684:	0800a930 	.word	0x0800a930
 8000688:	0800075d 	.word	0x0800075d
 800068c:	24004adc 	.word	0x24004adc
 8000690:	0800a954 	.word	0x0800a954
 8000694:	080007d1 	.word	0x080007d1
 8000698:	24004b48 	.word	0x24004b48
 800069c:	0800a978 	.word	0x0800a978
 80006a0:	080007e1 	.word	0x080007e1
 80006a4:	24004b4c 	.word	0x24004b4c

080006a8 <StartCommandLine>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommandLine */
void StartCommandLine(void *argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandLine */
	uint8_t local_index = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char* delay_ptr = NULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
	uint16_t delay_len = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	837b      	strh	r3, [r7, #26]
	uint16_t total_blinks = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	833b      	strh	r3, [r7, #24]
	char new_char;
	Command loc_com;
	/* Infinite loop */
	for(;;)
	{
		status = osMessageQueueGet(rawCommandsHandle, &new_char, NULL, 0);
 80006c2:	4b24      	ldr	r3, [pc, #144]	; (8000754 <StartCommandLine+0xac>)
 80006c4:	6818      	ldr	r0, [r3, #0]
 80006c6:	f107 0113 	add.w	r1, r7, #19
 80006ca:	2300      	movs	r3, #0
 80006cc:	2200      	movs	r2, #0
 80006ce:	f007 f9a5 	bl	8007a1c <osMessageQueueGet>
 80006d2:	6178      	str	r0, [r7, #20]
		if(status == osOK)
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d137      	bne.n	800074a <StartCommandLine+0xa2>
		{
			rx_buffer[local_index] = new_char;
 80006da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006de:	7cf9      	ldrb	r1, [r7, #19]
 80006e0:	4a1d      	ldr	r2, [pc, #116]	; (8000758 <StartCommandLine+0xb0>)
 80006e2:	54d1      	strb	r1, [r2, r3]
			local_index++;
 80006e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006e8:	3301      	adds	r3, #1
 80006ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(local_index == RX_BUFFER_LENGTH )
 80006ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006f2:	2b64      	cmp	r3, #100	; 0x64
 80006f4:	d102      	bne.n	80006fc <StartCommandLine+0x54>
			{
				local_index = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}

			if(new_char == '\n' || new_char == '\r')
 80006fc:	7cfb      	ldrb	r3, [r7, #19]
 80006fe:	2b0a      	cmp	r3, #10
 8000700:	d002      	beq.n	8000708 <StartCommandLine+0x60>
 8000702:	7cfb      	ldrb	r3, [r7, #19]
 8000704:	2b0d      	cmp	r3, #13
 8000706:	d120      	bne.n	800074a <StartCommandLine+0xa2>
			{
				char* buff_ptr = rx_buffer;
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <StartCommandLine+0xb0>)
 800070a:	623b      	str	r3, [r7, #32]
				while(*buff_ptr != '\r'){
 800070c:	e011      	b.n	8000732 <StartCommandLine+0x8a>
					switch (*buff_ptr) {
 800070e:	6a3b      	ldr	r3, [r7, #32]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b6c      	cmp	r3, #108	; 0x6c
 8000714:	d109      	bne.n	800072a <StartCommandLine+0x82>
						case 'l':
							buff_ptr++;
 8000716:	6a3b      	ldr	r3, [r7, #32]
 8000718:	3301      	adds	r3, #1
 800071a:	623b      	str	r3, [r7, #32]
							loc_com.led = atoi(buff_ptr);
 800071c:	6a38      	ldr	r0, [r7, #32]
 800071e:	f009 ff15 	bl	800a54c <atoi>
 8000722:	4603      	mov	r3, r0
 8000724:	b2db      	uxtb	r3, r3
 8000726:	723b      	strb	r3, [r7, #8]
							break;
 8000728:	e000      	b.n	800072c <StartCommandLine+0x84>
						default:
							break;
 800072a:	bf00      	nop
					}
					buff_ptr++;
 800072c:	6a3b      	ldr	r3, [r7, #32]
 800072e:	3301      	adds	r3, #1
 8000730:	623b      	str	r3, [r7, #32]
				while(*buff_ptr != '\r'){
 8000732:	6a3b      	ldr	r3, [r7, #32]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b0d      	cmp	r3, #13
 8000738:	d1e9      	bne.n	800070e <StartCommandLine+0x66>
				}
				local_index = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				memset(rx_buffer,0,RX_BUFFER_LENGTH);
 8000740:	2264      	movs	r2, #100	; 0x64
 8000742:	2100      	movs	r1, #0
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <StartCommandLine+0xb0>)
 8000746:	f009 ff3f 	bl	800a5c8 <memset>
			}
		}
		osDelay(10);
 800074a:	200a      	movs	r0, #10
 800074c:	f007 f878 	bl	8007840 <osDelay>
		status = osMessageQueueGet(rawCommandsHandle, &new_char, NULL, 0);
 8000750:	e7b7      	b.n	80006c2 <StartCommandLine+0x1a>
 8000752:	bf00      	nop
 8000754:	24004b54 	.word	0x24004b54
 8000758:	24004ae4 	.word	0x24004ae4

0800075c <StartBlinker1>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker1 */
void StartBlinker1(void *argument)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker1 */
	uint16_t blink_rate = 1000;
 8000764:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000768:	81fb      	strh	r3, [r7, #14]
	uint16_t blinks = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	81bb      	strh	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{

		osMessageQueueGet(CommandsToBlinkHandle,&blink_rate , NULL, 0);
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <StartBlinker1+0x64>)
 8000770:	6818      	ldr	r0, [r3, #0]
 8000772:	f107 010e 	add.w	r1, r7, #14
 8000776:	2300      	movs	r3, #0
 8000778:	2200      	movs	r2, #0
 800077a:	f007 f94f 	bl	8007a1c <osMessageQueueGet>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800077e:	2101      	movs	r1, #1
 8000780:	4810      	ldr	r0, [pc, #64]	; (80007c4 <StartBlinker1+0x68>)
 8000782:	f001 fc90 	bl	80020a6 <HAL_GPIO_TogglePin>
		blinks++;
 8000786:	89bb      	ldrh	r3, [r7, #12]
 8000788:	3301      	adds	r3, #1
 800078a:	b29b      	uxth	r3, r3
 800078c:	81bb      	strh	r3, [r7, #12]
		if (blinks%100 == 0) {
 800078e:	89bb      	ldrh	r3, [r7, #12]
 8000790:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <StartBlinker1+0x6c>)
 8000792:	fba2 1203 	umull	r1, r2, r2, r3
 8000796:	0952      	lsrs	r2, r2, #5
 8000798:	2164      	movs	r1, #100	; 0x64
 800079a:	fb01 f202 	mul.w	r2, r1, r2
 800079e:	1a9b      	subs	r3, r3, r2
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d107      	bne.n	80007b6 <StartBlinker1+0x5a>
			osMessageQueuePut(times_blinkedHandle, &blinks , NULL, 0);
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <StartBlinker1+0x70>)
 80007a8:	6818      	ldr	r0, [r3, #0]
 80007aa:	f107 010c 	add.w	r1, r7, #12
 80007ae:	2300      	movs	r3, #0
 80007b0:	2200      	movs	r2, #0
 80007b2:	f007 f8d3 	bl	800795c <osMessageQueuePut>
		}
		osDelay(blink_rate);
 80007b6:	89fb      	ldrh	r3, [r7, #14]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f007 f841 	bl	8007840 <osDelay>
		osMessageQueueGet(CommandsToBlinkHandle,&blink_rate , NULL, 0);
 80007be:	e7d6      	b.n	800076e <StartBlinker1+0x12>
 80007c0:	24004b50 	.word	0x24004b50
 80007c4:	58020400 	.word	0x58020400
 80007c8:	51eb851f 	.word	0x51eb851f
 80007cc:	24004b58 	.word	0x24004b58

080007d0 <StartBlinker2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker2 */
void StartBlinker2(void *argument)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker2 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80007d8:	2001      	movs	r0, #1
 80007da:	f007 f831 	bl	8007840 <osDelay>
 80007de:	e7fb      	b.n	80007d8 <StartBlinker2+0x8>

080007e0 <StartBlinker3>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker3 */
void StartBlinker3(void *argument)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker3 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f007 f829 	bl	8007840 <osDelay>
 80007ee:	e7fb      	b.n	80007e8 <StartBlinker3+0x8>

080007f0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08e      	sub	sp, #56	; 0x38
 80007f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b80      	ldr	r3, [pc, #512]	; (8000a08 <MX_GPIO_Init+0x218>)
 8000808:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800080c:	4a7e      	ldr	r2, [pc, #504]	; (8000a08 <MX_GPIO_Init+0x218>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000816:	4b7c      	ldr	r3, [pc, #496]	; (8000a08 <MX_GPIO_Init+0x218>)
 8000818:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	623b      	str	r3, [r7, #32]
 8000822:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000824:	4b78      	ldr	r3, [pc, #480]	; (8000a08 <MX_GPIO_Init+0x218>)
 8000826:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800082a:	4a77      	ldr	r2, [pc, #476]	; (8000a08 <MX_GPIO_Init+0x218>)
 800082c:	f043 0320 	orr.w	r3, r3, #32
 8000830:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000834:	4b74      	ldr	r3, [pc, #464]	; (8000a08 <MX_GPIO_Init+0x218>)
 8000836:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800083a:	f003 0320 	and.w	r3, r3, #32
 800083e:	61fb      	str	r3, [r7, #28]
 8000840:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	4b71      	ldr	r3, [pc, #452]	; (8000a08 <MX_GPIO_Init+0x218>)
 8000844:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000848:	4a6f      	ldr	r2, [pc, #444]	; (8000a08 <MX_GPIO_Init+0x218>)
 800084a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000852:	4b6d      	ldr	r3, [pc, #436]	; (8000a08 <MX_GPIO_Init+0x218>)
 8000854:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085c:	61bb      	str	r3, [r7, #24]
 800085e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000860:	4b69      	ldr	r3, [pc, #420]	; (8000a08 <MX_GPIO_Init+0x218>)
 8000862:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000866:	4a68      	ldr	r2, [pc, #416]	; (8000a08 <MX_GPIO_Init+0x218>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000870:	4b65      	ldr	r3, [pc, #404]	; (8000a08 <MX_GPIO_Init+0x218>)
 8000872:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	4b62      	ldr	r3, [pc, #392]	; (8000a08 <MX_GPIO_Init+0x218>)
 8000880:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000884:	4a60      	ldr	r2, [pc, #384]	; (8000a08 <MX_GPIO_Init+0x218>)
 8000886:	f043 0308 	orr.w	r3, r3, #8
 800088a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800088e:	4b5e      	ldr	r3, [pc, #376]	; (8000a08 <MX_GPIO_Init+0x218>)
 8000890:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000894:	f003 0308 	and.w	r3, r3, #8
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089c:	4b5a      	ldr	r3, [pc, #360]	; (8000a08 <MX_GPIO_Init+0x218>)
 800089e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a2:	4a59      	ldr	r2, [pc, #356]	; (8000a08 <MX_GPIO_Init+0x218>)
 80008a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ac:	4b56      	ldr	r3, [pc, #344]	; (8000a08 <MX_GPIO_Init+0x218>)
 80008ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b53      	ldr	r3, [pc, #332]	; (8000a08 <MX_GPIO_Init+0x218>)
 80008bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c0:	4a51      	ldr	r2, [pc, #324]	; (8000a08 <MX_GPIO_Init+0x218>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ca:	4b4f      	ldr	r3, [pc, #316]	; (8000a08 <MX_GPIO_Init+0x218>)
 80008cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d8:	4b4b      	ldr	r3, [pc, #300]	; (8000a08 <MX_GPIO_Init+0x218>)
 80008da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008de:	4a4a      	ldr	r2, [pc, #296]	; (8000a08 <MX_GPIO_Init+0x218>)
 80008e0:	f043 0310 	orr.w	r3, r3, #16
 80008e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008e8:	4b47      	ldr	r3, [pc, #284]	; (8000a08 <MX_GPIO_Init+0x218>)
 80008ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ee:	f003 0310 	and.w	r3, r3, #16
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008fc:	4843      	ldr	r0, [pc, #268]	; (8000a0c <MX_GPIO_Init+0x21c>)
 80008fe:	f001 fbb9 	bl	8002074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f244 0101 	movw	r1, #16385	; 0x4001
 8000908:	4841      	ldr	r0, [pc, #260]	; (8000a10 <MX_GPIO_Init+0x220>)
 800090a:	f001 fbb3 	bl	8002074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2102      	movs	r1, #2
 8000912:	4840      	ldr	r0, [pc, #256]	; (8000a14 <MX_GPIO_Init+0x224>)
 8000914:	f001 fbae 	bl	8002074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092a:	4619      	mov	r1, r3
 800092c:	483a      	ldr	r0, [pc, #232]	; (8000a18 <MX_GPIO_Init+0x228>)
 800092e:	f001 f9f1 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000948:	4619      	mov	r1, r3
 800094a:	4830      	ldr	r0, [pc, #192]	; (8000a0c <MX_GPIO_Init+0x21c>)
 800094c:	f001 f9e2 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000950:	f244 0301 	movw	r3, #16385	; 0x4001
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000966:	4619      	mov	r1, r3
 8000968:	4829      	ldr	r0, [pc, #164]	; (8000a10 <MX_GPIO_Init+0x220>)
 800096a:	f001 f9d3 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800096e:	2380      	movs	r3, #128	; 0x80
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000972:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000980:	4619      	mov	r1, r3
 8000982:	4826      	ldr	r0, [pc, #152]	; (8000a1c <MX_GPIO_Init+0x22c>)
 8000984:	f001 f9c6 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	4820      	ldr	r0, [pc, #128]	; (8000a20 <MX_GPIO_Init+0x230>)
 800099e:	f001 f9b9 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80009a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80009b4:	230a      	movs	r3, #10
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	4619      	mov	r1, r3
 80009be:	4818      	ldr	r0, [pc, #96]	; (8000a20 <MX_GPIO_Init+0x230>)
 80009c0:	f001 f9a8 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80009c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009da:	4619      	mov	r1, r3
 80009dc:	4810      	ldr	r0, [pc, #64]	; (8000a20 <MX_GPIO_Init+0x230>)
 80009de:	f001 f999 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009e2:	2302      	movs	r3, #2
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f6:	4619      	mov	r1, r3
 80009f8:	4806      	ldr	r0, [pc, #24]	; (8000a14 <MX_GPIO_Init+0x224>)
 80009fa:	f001 f98b 	bl	8001d14 <HAL_GPIO_Init>

}
 80009fe:	bf00      	nop
 8000a00:	3738      	adds	r7, #56	; 0x38
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	58024400 	.word	0x58024400
 8000a0c:	58021400 	.word	0x58021400
 8000a10:	58020400 	.word	0x58020400
 8000a14:	58021000 	.word	0x58021000
 8000a18:	58020800 	.word	0x58020800
 8000a1c:	58021800 	.word	0x58021800
 8000a20:	58020000 	.word	0x58020000

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a28:	f000 fad6 	bl	8000fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2c:	f000 f816 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a30:	f7ff fede 	bl	80007f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a34:	f000 f9c4 	bl	8000dc0 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a38:	f000 fa9c 	bl	8000f74 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT (&huart3, UART3_rxBuffer, 1);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	4905      	ldr	r1, [pc, #20]	; (8000a54 <main+0x30>)
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <main+0x34>)
 8000a42:	f004 fa65 	bl	8004f10 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000a46:	f006 fe1f 	bl	8007688 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000a4a:	f7ff fdcd 	bl	80005e8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000a4e:	f006 fe3f 	bl	80076d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <main+0x2e>
 8000a54:	24000094 	.word	0x24000094
 8000a58:	24004ba8 	.word	0x24004ba8

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b09c      	sub	sp, #112	; 0x70
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a66:	224c      	movs	r2, #76	; 0x4c
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f009 fdac 	bl	800a5c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2220      	movs	r2, #32
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f009 fda6 	bl	800a5c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a7c:	2004      	movs	r0, #4
 8000a7e:	f001 fb2d 	bl	80020dc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <SystemClock_Config+0xd8>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	4a2a      	ldr	r2, [pc, #168]	; (8000b34 <SystemClock_Config+0xd8>)
 8000a8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a90:	6193      	str	r3, [r2, #24]
 8000a92:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <SystemClock_Config+0xd8>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a9e:	bf00      	nop
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <SystemClock_Config+0xd8>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aac:	d1f8      	bne.n	8000aa0 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000aae:	2321      	movs	r3, #33	; 0x21
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ab2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abc:	2302      	movs	r3, #2
 8000abe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000ac8:	2318      	movs	r3, #24
 8000aca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ad8:	230c      	movs	r3, #12
 8000ada:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 fb51 	bl	8002190 <HAL_RCC_OscConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000af4:	f000 f832 	bl	8000b5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af8:	233f      	movs	r3, #63	; 0x3f
 8000afa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afc:	2303      	movs	r3, #3
 8000afe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 ff3b 	bl	8002998 <HAL_RCC_ClockConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b28:	f000 f818 	bl	8000b5c <Error_Handler>
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3770      	adds	r7, #112	; 0x70
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	58024800 	.word	0x58024800

08000b38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d101      	bne.n	8000b4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b4a:	f000 fa81 	bl	8001050 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40001400 	.word	0x40001400

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_MspInit+0x38>)
 8000b70:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b74:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <HAL_MspInit+0x38>)
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_MspInit+0x38>)
 8000b80:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	210f      	movs	r1, #15
 8000b90:	f06f 0001 	mvn.w	r0, #1
 8000b94:	f000 fb34 	bl	8001200 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	58024400 	.word	0x58024400

08000ba4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b090      	sub	sp, #64	; 0x40
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b0f      	cmp	r3, #15
 8000bb0:	d827      	bhi.n	8000c02 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	2037      	movs	r0, #55	; 0x37
 8000bb8:	f000 fb22 	bl	8001200 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000bbc:	2037      	movs	r0, #55	; 0x37
 8000bbe:	f000 fb39 	bl	8001234 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000bc2:	4a29      	ldr	r2, [pc, #164]	; (8000c68 <HAL_InitTick+0xc4>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bc8:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <HAL_InitTick+0xc8>)
 8000bca:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000bce:	4a27      	ldr	r2, [pc, #156]	; (8000c6c <HAL_InitTick+0xc8>)
 8000bd0:	f043 0320 	orr.w	r3, r3, #32
 8000bd4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000bd8:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <HAL_InitTick+0xc8>)
 8000bda:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000bde:	f003 0320 	and.w	r3, r3, #32
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000be6:	f107 0210 	add.w	r2, r7, #16
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f002 fa5d 	bl	80030b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d106      	bne.n	8000c0e <HAL_InitTick+0x6a>
 8000c00:	e001      	b.n	8000c06 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e02b      	b.n	8000c5e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c06:	f002 fa27 	bl	8003058 <HAL_RCC_GetPCLK1Freq>
 8000c0a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000c0c:	e004      	b.n	8000c18 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c0e:	f002 fa23 	bl	8003058 <HAL_RCC_GetPCLK1Freq>
 8000c12:	4603      	mov	r3, r0
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c1a:	4a15      	ldr	r2, [pc, #84]	; (8000c70 <HAL_InitTick+0xcc>)
 8000c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c20:	0c9b      	lsrs	r3, r3, #18
 8000c22:	3b01      	subs	r3, #1
 8000c24:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <HAL_InitTick+0xd0>)
 8000c28:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <HAL_InitTick+0xd4>)
 8000c2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_InitTick+0xd0>)
 8000c2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c32:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c34:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <HAL_InitTick+0xd0>)
 8000c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c38:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_InitTick+0xd0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_InitTick+0xd0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000c46:	480b      	ldr	r0, [pc, #44]	; (8000c74 <HAL_InitTick+0xd0>)
 8000c48:	f003 fda2 	bl	8004790 <HAL_TIM_Base_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d104      	bne.n	8000c5c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000c52:	4808      	ldr	r0, [pc, #32]	; (8000c74 <HAL_InitTick+0xd0>)
 8000c54:	f003 fdfe 	bl	8004854 <HAL_TIM_Base_Start_IT>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	e000      	b.n	8000c5e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3740      	adds	r7, #64	; 0x40
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	24000008 	.word	0x24000008
 8000c6c:	58024400 	.word	0x58024400
 8000c70:	431bde83 	.word	0x431bde83
 8000c74:	24004b5c 	.word	0x24004b5c
 8000c78:	40001400 	.word	0x40001400

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <USART3_IRQHandler+0x10>)
 8000cae:	f004 f985 	bl	8004fbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	24004ba8 	.word	0x24004ba8

08000cbc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <TIM7_IRQHandler+0x10>)
 8000cc2:	f003 fe3f 	bl	8004944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	24004b5c 	.word	0x24004b5c

08000cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b32      	ldr	r3, [pc, #200]	; (8000da0 <SystemInit+0xd0>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cda:	4a31      	ldr	r2, [pc, #196]	; (8000da0 <SystemInit+0xd0>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ce4:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <SystemInit+0xd4>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 030f 	and.w	r3, r3, #15
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d807      	bhi.n	8000d00 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <SystemInit+0xd4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f023 030f 	bic.w	r3, r3, #15
 8000cf8:	4a2a      	ldr	r2, [pc, #168]	; (8000da4 <SystemInit+0xd4>)
 8000cfa:	f043 0303 	orr.w	r3, r3, #3
 8000cfe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d00:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <SystemInit+0xd8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a28      	ldr	r2, [pc, #160]	; (8000da8 <SystemInit+0xd8>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d0c:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <SystemInit+0xd8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d12:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <SystemInit+0xd8>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	4924      	ldr	r1, [pc, #144]	; (8000da8 <SystemInit+0xd8>)
 8000d18:	4b24      	ldr	r3, [pc, #144]	; (8000dac <SystemInit+0xdc>)
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d1e:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <SystemInit+0xd4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 030c 	and.w	r3, r3, #12
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d007      	beq.n	8000d3a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <SystemInit+0xd4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f023 030f 	bic.w	r3, r3, #15
 8000d32:	4a1c      	ldr	r2, [pc, #112]	; (8000da4 <SystemInit+0xd4>)
 8000d34:	f043 0303 	orr.w	r3, r3, #3
 8000d38:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <SystemInit+0xd8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <SystemInit+0xd8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <SystemInit+0xd8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <SystemInit+0xd8>)
 8000d4e:	4a18      	ldr	r2, [pc, #96]	; (8000db0 <SystemInit+0xe0>)
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <SystemInit+0xd8>)
 8000d54:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <SystemInit+0xe4>)
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <SystemInit+0xd8>)
 8000d5a:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <SystemInit+0xe8>)
 8000d5c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <SystemInit+0xd8>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <SystemInit+0xd8>)
 8000d66:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <SystemInit+0xe8>)
 8000d68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <SystemInit+0xd8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <SystemInit+0xd8>)
 8000d72:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <SystemInit+0xe8>)
 8000d74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <SystemInit+0xd8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <SystemInit+0xd8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a09      	ldr	r2, [pc, #36]	; (8000da8 <SystemInit+0xd8>)
 8000d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <SystemInit+0xd8>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <SystemInit+0xec>)
 8000d90:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d94:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00
 8000da4:	52002000 	.word	0x52002000
 8000da8:	58024400 	.word	0x58024400
 8000dac:	eaf6ed7f 	.word	0xeaf6ed7f
 8000db0:	02020200 	.word	0x02020200
 8000db4:	01ff0000 	.word	0x01ff0000
 8000db8:	01010280 	.word	0x01010280
 8000dbc:	52004000 	.word	0x52004000

08000dc0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dc4:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000dc6:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <MX_USART3_UART_Init+0x94>)
 8000dc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dca:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df0:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df6:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e08:	4811      	ldr	r0, [pc, #68]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000e0a:	f003 ff9b 	bl	8004d44 <HAL_UART_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e14:	f7ff fea2 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e18:	2100      	movs	r1, #0
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000e1c:	f006 fb25 	bl	800746a <HAL_UARTEx_SetTxFifoThreshold>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e26:	f7ff fe99 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4808      	ldr	r0, [pc, #32]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000e2e:	f006 fb5a 	bl	80074e6 <HAL_UARTEx_SetRxFifoThreshold>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e38:	f7ff fe90 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e3c:	4804      	ldr	r0, [pc, #16]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000e3e:	f006 fadb 	bl	80073f8 <HAL_UARTEx_DisableFifoMode>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e48:	f7ff fe88 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	24004ba8 	.word	0x24004ba8
 8000e54:	40004800 	.word	0x40004800

08000e58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b0b8      	sub	sp, #224	; 0xe0
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	22b8      	movs	r2, #184	; 0xb8
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f009 fba5 	bl	800a5c8 <memset>
  if(uartHandle->Instance==USART3)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a29      	ldr	r2, [pc, #164]	; (8000f28 <HAL_UART_MspInit+0xd0>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d14a      	bne.n	8000f1e <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 f94c 	bl	8003134 <HAL_RCCEx_PeriphCLKConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ea2:	f7ff fe5b 	bl	8000b5c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <HAL_UART_MspInit+0xd4>)
 8000ea8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000eac:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <HAL_UART_MspInit+0xd4>)
 8000eae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_UART_MspInit+0xd4>)
 8000eb8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <HAL_UART_MspInit+0xd4>)
 8000ec6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eca:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <HAL_UART_MspInit+0xd4>)
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ed4:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_UART_MspInit+0xd4>)
 8000ed6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ee2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ee6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000efc:	2307      	movs	r3, #7
 8000efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f02:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f06:	4619      	mov	r1, r3
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <HAL_UART_MspInit+0xd8>)
 8000f0a:	f000 ff03 	bl	8001d14 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2105      	movs	r1, #5
 8000f12:	2027      	movs	r0, #39	; 0x27
 8000f14:	f000 f974 	bl	8001200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f18:	2027      	movs	r0, #39	; 0x27
 8000f1a:	f000 f98b 	bl	8001234 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f1e:	bf00      	nop
 8000f20:	37e0      	adds	r7, #224	; 0xe0
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40004800 	.word	0x40004800
 8000f2c:	58024400 	.word	0x58024400
 8000f30:	58020c00 	.word	0x58020c00

08000f34 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, UART3_rxBuffer, 1, 100);
 8000f3c:	2364      	movs	r3, #100	; 0x64
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4909      	ldr	r1, [pc, #36]	; (8000f68 <HAL_UART_RxCpltCallback+0x34>)
 8000f42:	480a      	ldr	r0, [pc, #40]	; (8000f6c <HAL_UART_RxCpltCallback+0x38>)
 8000f44:	f003 ff4e 	bl	8004de4 <HAL_UART_Transmit>
    osMessageQueuePut(rawCommandsHandle, UART3_rxBuffer ,NULL , 0);
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_UART_RxCpltCallback+0x3c>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4905      	ldr	r1, [pc, #20]	; (8000f68 <HAL_UART_RxCpltCallback+0x34>)
 8000f52:	f006 fd03 	bl	800795c <osMessageQueuePut>
    HAL_UART_Receive_IT(&huart3, UART3_rxBuffer, 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	4903      	ldr	r1, [pc, #12]	; (8000f68 <HAL_UART_RxCpltCallback+0x34>)
 8000f5a:	4804      	ldr	r0, [pc, #16]	; (8000f6c <HAL_UART_RxCpltCallback+0x38>)
 8000f5c:	f003 ffd8 	bl	8004f10 <HAL_UART_Receive_IT>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	24000094 	.word	0x24000094
 8000f6c:	24004ba8 	.word	0x24004ba8
 8000f70:	24004b54 	.word	0x24004b54

08000f74 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fbc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f88:	f7ff fea2 	bl	8000cd0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f8e:	490d      	ldr	r1, [pc, #52]	; (8000fc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f94:	e002      	b.n	8000f9c <LoopCopyDataInit>

08000f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9a:	3304      	adds	r3, #4

08000f9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa0:	d3f9      	bcc.n	8000f96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa4:	4c0a      	ldr	r4, [pc, #40]	; (8000fd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa8:	e001      	b.n	8000fae <LoopFillZerobss>

08000faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fac:	3204      	adds	r2, #4

08000fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb0:	d3fb      	bcc.n	8000faa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fb2:	f009 fad5 	bl	800a560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb6:	f7ff fd35 	bl	8000a24 <main>
  bx  lr
 8000fba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fbc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000fc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fc4:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000fc8:	0800ab90 	.word	0x0800ab90
  ldr r2, =_sbss
 8000fcc:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000fd0:	24004c88 	.word	0x24004c88

08000fd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC_IRQHandler>
	...

08000fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fde:	2003      	movs	r0, #3
 8000fe0:	f000 f903 	bl	80011ea <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000fe4:	f001 fe8e 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_Init+0x68>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	0a1b      	lsrs	r3, r3, #8
 8000ff0:	f003 030f 	and.w	r3, r3, #15
 8000ff4:	4913      	ldr	r1, [pc, #76]	; (8001044 <HAL_Init+0x6c>)
 8000ff6:	5ccb      	ldrb	r3, [r1, r3]
 8000ff8:	f003 031f 	and.w	r3, r3, #31
 8000ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8001000:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <HAL_Init+0x68>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <HAL_Init+0x6c>)
 800100c:	5cd3      	ldrb	r3, [r2, r3]
 800100e:	f003 031f 	and.w	r3, r3, #31
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	fa22 f303 	lsr.w	r3, r2, r3
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <HAL_Init+0x70>)
 800101a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800101c:	4a0b      	ldr	r2, [pc, #44]	; (800104c <HAL_Init+0x74>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001022:	200f      	movs	r0, #15
 8001024:	f7ff fdbe 	bl	8000ba4 <HAL_InitTick>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e002      	b.n	8001038 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001032:	f7ff fd99 	bl	8000b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	58024400 	.word	0x58024400
 8001044:	0800a9e4 	.word	0x0800a9e4
 8001048:	24000004 	.word	0x24000004
 800104c:	24000000 	.word	0x24000000

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	2400000c 	.word	0x2400000c
 8001074:	24004c38 	.word	0x24004c38

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	24004c38 	.word	0x24004c38

08001090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <__NVIC_SetPriorityGrouping+0x40>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	4313      	orrs	r3, r2
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <__NVIC_SetPriorityGrouping+0x40>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00
 80010d4:	05fa0000 	.word	0x05fa0000

080010d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__NVIC_GetPriorityGrouping+0x18>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 0307 	and.w	r3, r3, #7
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001102:	2b00      	cmp	r3, #0
 8001104:	db0b      	blt.n	800111e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	f003 021f 	and.w	r2, r3, #31
 800110c:	4907      	ldr	r1, [pc, #28]	; (800112c <__NVIC_EnableIRQ+0x38>)
 800110e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	2001      	movs	r0, #1
 8001116:	fa00 f202 	lsl.w	r2, r0, r2
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000e100 	.word	0xe000e100

08001130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	; (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
         );
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ff4c 	bl	8001090 <__NVIC_SetPriorityGrouping>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800120e:	f7ff ff63 	bl	80010d8 <__NVIC_GetPriorityGrouping>
 8001212:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	68b9      	ldr	r1, [r7, #8]
 8001218:	6978      	ldr	r0, [r7, #20]
 800121a:	f7ff ffb3 	bl	8001184 <NVIC_EncodePriority>
 800121e:	4602      	mov	r2, r0
 8001220:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff82 	bl	8001130 <__NVIC_SetPriority>
}
 800122c:	bf00      	nop
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff56 	bl	80010f4 <__NVIC_EnableIRQ>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff ff0e 	bl	8001078 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e2dc      	b.n	8001822 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d008      	beq.n	8001286 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2280      	movs	r2, #128	; 0x80
 8001278:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e2cd      	b.n	8001822 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a76      	ldr	r2, [pc, #472]	; (8001464 <HAL_DMA_Abort+0x214>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d04a      	beq.n	8001326 <HAL_DMA_Abort+0xd6>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a74      	ldr	r2, [pc, #464]	; (8001468 <HAL_DMA_Abort+0x218>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d045      	beq.n	8001326 <HAL_DMA_Abort+0xd6>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a73      	ldr	r2, [pc, #460]	; (800146c <HAL_DMA_Abort+0x21c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d040      	beq.n	8001326 <HAL_DMA_Abort+0xd6>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a71      	ldr	r2, [pc, #452]	; (8001470 <HAL_DMA_Abort+0x220>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d03b      	beq.n	8001326 <HAL_DMA_Abort+0xd6>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a70      	ldr	r2, [pc, #448]	; (8001474 <HAL_DMA_Abort+0x224>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d036      	beq.n	8001326 <HAL_DMA_Abort+0xd6>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a6e      	ldr	r2, [pc, #440]	; (8001478 <HAL_DMA_Abort+0x228>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d031      	beq.n	8001326 <HAL_DMA_Abort+0xd6>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6d      	ldr	r2, [pc, #436]	; (800147c <HAL_DMA_Abort+0x22c>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d02c      	beq.n	8001326 <HAL_DMA_Abort+0xd6>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a6b      	ldr	r2, [pc, #428]	; (8001480 <HAL_DMA_Abort+0x230>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d027      	beq.n	8001326 <HAL_DMA_Abort+0xd6>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a6a      	ldr	r2, [pc, #424]	; (8001484 <HAL_DMA_Abort+0x234>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d022      	beq.n	8001326 <HAL_DMA_Abort+0xd6>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a68      	ldr	r2, [pc, #416]	; (8001488 <HAL_DMA_Abort+0x238>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d01d      	beq.n	8001326 <HAL_DMA_Abort+0xd6>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a67      	ldr	r2, [pc, #412]	; (800148c <HAL_DMA_Abort+0x23c>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d018      	beq.n	8001326 <HAL_DMA_Abort+0xd6>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a65      	ldr	r2, [pc, #404]	; (8001490 <HAL_DMA_Abort+0x240>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_DMA_Abort+0xd6>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a64      	ldr	r2, [pc, #400]	; (8001494 <HAL_DMA_Abort+0x244>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d00e      	beq.n	8001326 <HAL_DMA_Abort+0xd6>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a62      	ldr	r2, [pc, #392]	; (8001498 <HAL_DMA_Abort+0x248>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d009      	beq.n	8001326 <HAL_DMA_Abort+0xd6>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a61      	ldr	r2, [pc, #388]	; (800149c <HAL_DMA_Abort+0x24c>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d004      	beq.n	8001326 <HAL_DMA_Abort+0xd6>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a5f      	ldr	r2, [pc, #380]	; (80014a0 <HAL_DMA_Abort+0x250>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_DMA_Abort+0xda>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <HAL_DMA_Abort+0xdc>
 800132a:	2300      	movs	r3, #0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d013      	beq.n	8001358 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 021e 	bic.w	r2, r2, #30
 800133e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	695a      	ldr	r2, [r3, #20]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800134e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	e00a      	b.n	800136e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 020e 	bic.w	r2, r2, #14
 8001366:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a3c      	ldr	r2, [pc, #240]	; (8001464 <HAL_DMA_Abort+0x214>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d072      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a3a      	ldr	r2, [pc, #232]	; (8001468 <HAL_DMA_Abort+0x218>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d06d      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a39      	ldr	r2, [pc, #228]	; (800146c <HAL_DMA_Abort+0x21c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d068      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a37      	ldr	r2, [pc, #220]	; (8001470 <HAL_DMA_Abort+0x220>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d063      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a36      	ldr	r2, [pc, #216]	; (8001474 <HAL_DMA_Abort+0x224>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d05e      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a34      	ldr	r2, [pc, #208]	; (8001478 <HAL_DMA_Abort+0x228>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d059      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a33      	ldr	r2, [pc, #204]	; (800147c <HAL_DMA_Abort+0x22c>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d054      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a31      	ldr	r2, [pc, #196]	; (8001480 <HAL_DMA_Abort+0x230>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d04f      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a30      	ldr	r2, [pc, #192]	; (8001484 <HAL_DMA_Abort+0x234>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d04a      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a2e      	ldr	r2, [pc, #184]	; (8001488 <HAL_DMA_Abort+0x238>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d045      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a2d      	ldr	r2, [pc, #180]	; (800148c <HAL_DMA_Abort+0x23c>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d040      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a2b      	ldr	r2, [pc, #172]	; (8001490 <HAL_DMA_Abort+0x240>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d03b      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a2a      	ldr	r2, [pc, #168]	; (8001494 <HAL_DMA_Abort+0x244>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d036      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a28      	ldr	r2, [pc, #160]	; (8001498 <HAL_DMA_Abort+0x248>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d031      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a27      	ldr	r2, [pc, #156]	; (800149c <HAL_DMA_Abort+0x24c>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d02c      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a25      	ldr	r2, [pc, #148]	; (80014a0 <HAL_DMA_Abort+0x250>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d027      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a24      	ldr	r2, [pc, #144]	; (80014a4 <HAL_DMA_Abort+0x254>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d022      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <HAL_DMA_Abort+0x258>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d01d      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a21      	ldr	r2, [pc, #132]	; (80014ac <HAL_DMA_Abort+0x25c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d018      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a1f      	ldr	r2, [pc, #124]	; (80014b0 <HAL_DMA_Abort+0x260>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a1e      	ldr	r2, [pc, #120]	; (80014b4 <HAL_DMA_Abort+0x264>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d00e      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1c      	ldr	r2, [pc, #112]	; (80014b8 <HAL_DMA_Abort+0x268>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d009      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a1b      	ldr	r2, [pc, #108]	; (80014bc <HAL_DMA_Abort+0x26c>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d004      	beq.n	800145e <HAL_DMA_Abort+0x20e>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <HAL_DMA_Abort+0x270>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d132      	bne.n	80014c4 <HAL_DMA_Abort+0x274>
 800145e:	2301      	movs	r3, #1
 8001460:	e031      	b.n	80014c6 <HAL_DMA_Abort+0x276>
 8001462:	bf00      	nop
 8001464:	40020010 	.word	0x40020010
 8001468:	40020028 	.word	0x40020028
 800146c:	40020040 	.word	0x40020040
 8001470:	40020058 	.word	0x40020058
 8001474:	40020070 	.word	0x40020070
 8001478:	40020088 	.word	0x40020088
 800147c:	400200a0 	.word	0x400200a0
 8001480:	400200b8 	.word	0x400200b8
 8001484:	40020410 	.word	0x40020410
 8001488:	40020428 	.word	0x40020428
 800148c:	40020440 	.word	0x40020440
 8001490:	40020458 	.word	0x40020458
 8001494:	40020470 	.word	0x40020470
 8001498:	40020488 	.word	0x40020488
 800149c:	400204a0 	.word	0x400204a0
 80014a0:	400204b8 	.word	0x400204b8
 80014a4:	58025408 	.word	0x58025408
 80014a8:	5802541c 	.word	0x5802541c
 80014ac:	58025430 	.word	0x58025430
 80014b0:	58025444 	.word	0x58025444
 80014b4:	58025458 	.word	0x58025458
 80014b8:	5802546c 	.word	0x5802546c
 80014bc:	58025480 	.word	0x58025480
 80014c0:	58025494 	.word	0x58025494
 80014c4:	2300      	movs	r3, #0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a6d      	ldr	r2, [pc, #436]	; (8001694 <HAL_DMA_Abort+0x444>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d04a      	beq.n	800157a <HAL_DMA_Abort+0x32a>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a6b      	ldr	r2, [pc, #428]	; (8001698 <HAL_DMA_Abort+0x448>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d045      	beq.n	800157a <HAL_DMA_Abort+0x32a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a6a      	ldr	r2, [pc, #424]	; (800169c <HAL_DMA_Abort+0x44c>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d040      	beq.n	800157a <HAL_DMA_Abort+0x32a>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a68      	ldr	r2, [pc, #416]	; (80016a0 <HAL_DMA_Abort+0x450>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d03b      	beq.n	800157a <HAL_DMA_Abort+0x32a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a67      	ldr	r2, [pc, #412]	; (80016a4 <HAL_DMA_Abort+0x454>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d036      	beq.n	800157a <HAL_DMA_Abort+0x32a>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a65      	ldr	r2, [pc, #404]	; (80016a8 <HAL_DMA_Abort+0x458>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d031      	beq.n	800157a <HAL_DMA_Abort+0x32a>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a64      	ldr	r2, [pc, #400]	; (80016ac <HAL_DMA_Abort+0x45c>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d02c      	beq.n	800157a <HAL_DMA_Abort+0x32a>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a62      	ldr	r2, [pc, #392]	; (80016b0 <HAL_DMA_Abort+0x460>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d027      	beq.n	800157a <HAL_DMA_Abort+0x32a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a61      	ldr	r2, [pc, #388]	; (80016b4 <HAL_DMA_Abort+0x464>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d022      	beq.n	800157a <HAL_DMA_Abort+0x32a>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a5f      	ldr	r2, [pc, #380]	; (80016b8 <HAL_DMA_Abort+0x468>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d01d      	beq.n	800157a <HAL_DMA_Abort+0x32a>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a5e      	ldr	r2, [pc, #376]	; (80016bc <HAL_DMA_Abort+0x46c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d018      	beq.n	800157a <HAL_DMA_Abort+0x32a>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a5c      	ldr	r2, [pc, #368]	; (80016c0 <HAL_DMA_Abort+0x470>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d013      	beq.n	800157a <HAL_DMA_Abort+0x32a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a5b      	ldr	r2, [pc, #364]	; (80016c4 <HAL_DMA_Abort+0x474>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d00e      	beq.n	800157a <HAL_DMA_Abort+0x32a>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a59      	ldr	r2, [pc, #356]	; (80016c8 <HAL_DMA_Abort+0x478>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d009      	beq.n	800157a <HAL_DMA_Abort+0x32a>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a58      	ldr	r2, [pc, #352]	; (80016cc <HAL_DMA_Abort+0x47c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d004      	beq.n	800157a <HAL_DMA_Abort+0x32a>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a56      	ldr	r2, [pc, #344]	; (80016d0 <HAL_DMA_Abort+0x480>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d108      	bne.n	800158c <HAL_DMA_Abort+0x33c>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0201 	bic.w	r2, r2, #1
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	e007      	b.n	800159c <HAL_DMA_Abort+0x34c>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0201 	bic.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800159c:	e013      	b.n	80015c6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800159e:	f7ff fd6b 	bl	8001078 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b05      	cmp	r3, #5
 80015aa:	d90c      	bls.n	80015c6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2220      	movs	r2, #32
 80015b0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2203      	movs	r2, #3
 80015b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e12d      	b.n	8001822 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1e5      	bne.n	800159e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a2f      	ldr	r2, [pc, #188]	; (8001694 <HAL_DMA_Abort+0x444>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d04a      	beq.n	8001672 <HAL_DMA_Abort+0x422>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a2d      	ldr	r2, [pc, #180]	; (8001698 <HAL_DMA_Abort+0x448>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d045      	beq.n	8001672 <HAL_DMA_Abort+0x422>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a2c      	ldr	r2, [pc, #176]	; (800169c <HAL_DMA_Abort+0x44c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d040      	beq.n	8001672 <HAL_DMA_Abort+0x422>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a2a      	ldr	r2, [pc, #168]	; (80016a0 <HAL_DMA_Abort+0x450>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d03b      	beq.n	8001672 <HAL_DMA_Abort+0x422>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a29      	ldr	r2, [pc, #164]	; (80016a4 <HAL_DMA_Abort+0x454>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d036      	beq.n	8001672 <HAL_DMA_Abort+0x422>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a27      	ldr	r2, [pc, #156]	; (80016a8 <HAL_DMA_Abort+0x458>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d031      	beq.n	8001672 <HAL_DMA_Abort+0x422>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a26      	ldr	r2, [pc, #152]	; (80016ac <HAL_DMA_Abort+0x45c>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d02c      	beq.n	8001672 <HAL_DMA_Abort+0x422>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a24      	ldr	r2, [pc, #144]	; (80016b0 <HAL_DMA_Abort+0x460>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d027      	beq.n	8001672 <HAL_DMA_Abort+0x422>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a23      	ldr	r2, [pc, #140]	; (80016b4 <HAL_DMA_Abort+0x464>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d022      	beq.n	8001672 <HAL_DMA_Abort+0x422>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a21      	ldr	r2, [pc, #132]	; (80016b8 <HAL_DMA_Abort+0x468>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d01d      	beq.n	8001672 <HAL_DMA_Abort+0x422>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a20      	ldr	r2, [pc, #128]	; (80016bc <HAL_DMA_Abort+0x46c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d018      	beq.n	8001672 <HAL_DMA_Abort+0x422>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1e      	ldr	r2, [pc, #120]	; (80016c0 <HAL_DMA_Abort+0x470>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d013      	beq.n	8001672 <HAL_DMA_Abort+0x422>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <HAL_DMA_Abort+0x474>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d00e      	beq.n	8001672 <HAL_DMA_Abort+0x422>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <HAL_DMA_Abort+0x478>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d009      	beq.n	8001672 <HAL_DMA_Abort+0x422>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a1a      	ldr	r2, [pc, #104]	; (80016cc <HAL_DMA_Abort+0x47c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d004      	beq.n	8001672 <HAL_DMA_Abort+0x422>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a18      	ldr	r2, [pc, #96]	; (80016d0 <HAL_DMA_Abort+0x480>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d101      	bne.n	8001676 <HAL_DMA_Abort+0x426>
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <HAL_DMA_Abort+0x428>
 8001676:	2300      	movs	r3, #0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d02b      	beq.n	80016d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001680:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	223f      	movs	r2, #63	; 0x3f
 800168c:	409a      	lsls	r2, r3
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	e02a      	b.n	80016ea <HAL_DMA_Abort+0x49a>
 8001694:	40020010 	.word	0x40020010
 8001698:	40020028 	.word	0x40020028
 800169c:	40020040 	.word	0x40020040
 80016a0:	40020058 	.word	0x40020058
 80016a4:	40020070 	.word	0x40020070
 80016a8:	40020088 	.word	0x40020088
 80016ac:	400200a0 	.word	0x400200a0
 80016b0:	400200b8 	.word	0x400200b8
 80016b4:	40020410 	.word	0x40020410
 80016b8:	40020428 	.word	0x40020428
 80016bc:	40020440 	.word	0x40020440
 80016c0:	40020458 	.word	0x40020458
 80016c4:	40020470 	.word	0x40020470
 80016c8:	40020488 	.word	0x40020488
 80016cc:	400204a0 	.word	0x400204a0
 80016d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016de:	f003 031f 	and.w	r3, r3, #31
 80016e2:	2201      	movs	r2, #1
 80016e4:	409a      	lsls	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a4f      	ldr	r2, [pc, #316]	; (800182c <HAL_DMA_Abort+0x5dc>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d072      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a4d      	ldr	r2, [pc, #308]	; (8001830 <HAL_DMA_Abort+0x5e0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d06d      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a4c      	ldr	r2, [pc, #304]	; (8001834 <HAL_DMA_Abort+0x5e4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d068      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a4a      	ldr	r2, [pc, #296]	; (8001838 <HAL_DMA_Abort+0x5e8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d063      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a49      	ldr	r2, [pc, #292]	; (800183c <HAL_DMA_Abort+0x5ec>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d05e      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a47      	ldr	r2, [pc, #284]	; (8001840 <HAL_DMA_Abort+0x5f0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d059      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a46      	ldr	r2, [pc, #280]	; (8001844 <HAL_DMA_Abort+0x5f4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d054      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a44      	ldr	r2, [pc, #272]	; (8001848 <HAL_DMA_Abort+0x5f8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d04f      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a43      	ldr	r2, [pc, #268]	; (800184c <HAL_DMA_Abort+0x5fc>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d04a      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a41      	ldr	r2, [pc, #260]	; (8001850 <HAL_DMA_Abort+0x600>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d045      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a40      	ldr	r2, [pc, #256]	; (8001854 <HAL_DMA_Abort+0x604>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d040      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a3e      	ldr	r2, [pc, #248]	; (8001858 <HAL_DMA_Abort+0x608>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d03b      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a3d      	ldr	r2, [pc, #244]	; (800185c <HAL_DMA_Abort+0x60c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d036      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a3b      	ldr	r2, [pc, #236]	; (8001860 <HAL_DMA_Abort+0x610>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d031      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a3a      	ldr	r2, [pc, #232]	; (8001864 <HAL_DMA_Abort+0x614>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d02c      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a38      	ldr	r2, [pc, #224]	; (8001868 <HAL_DMA_Abort+0x618>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d027      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a37      	ldr	r2, [pc, #220]	; (800186c <HAL_DMA_Abort+0x61c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d022      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a35      	ldr	r2, [pc, #212]	; (8001870 <HAL_DMA_Abort+0x620>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d01d      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a34      	ldr	r2, [pc, #208]	; (8001874 <HAL_DMA_Abort+0x624>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d018      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a32      	ldr	r2, [pc, #200]	; (8001878 <HAL_DMA_Abort+0x628>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a31      	ldr	r2, [pc, #196]	; (800187c <HAL_DMA_Abort+0x62c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d00e      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a2f      	ldr	r2, [pc, #188]	; (8001880 <HAL_DMA_Abort+0x630>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d009      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a2e      	ldr	r2, [pc, #184]	; (8001884 <HAL_DMA_Abort+0x634>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d004      	beq.n	80017da <HAL_DMA_Abort+0x58a>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a2c      	ldr	r2, [pc, #176]	; (8001888 <HAL_DMA_Abort+0x638>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d101      	bne.n	80017de <HAL_DMA_Abort+0x58e>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_DMA_Abort+0x590>
 80017de:	2300      	movs	r3, #0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d015      	beq.n	8001810 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80017ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00c      	beq.n	8001810 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001800:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001804:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800180e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40020010 	.word	0x40020010
 8001830:	40020028 	.word	0x40020028
 8001834:	40020040 	.word	0x40020040
 8001838:	40020058 	.word	0x40020058
 800183c:	40020070 	.word	0x40020070
 8001840:	40020088 	.word	0x40020088
 8001844:	400200a0 	.word	0x400200a0
 8001848:	400200b8 	.word	0x400200b8
 800184c:	40020410 	.word	0x40020410
 8001850:	40020428 	.word	0x40020428
 8001854:	40020440 	.word	0x40020440
 8001858:	40020458 	.word	0x40020458
 800185c:	40020470 	.word	0x40020470
 8001860:	40020488 	.word	0x40020488
 8001864:	400204a0 	.word	0x400204a0
 8001868:	400204b8 	.word	0x400204b8
 800186c:	58025408 	.word	0x58025408
 8001870:	5802541c 	.word	0x5802541c
 8001874:	58025430 	.word	0x58025430
 8001878:	58025444 	.word	0x58025444
 800187c:	58025458 	.word	0x58025458
 8001880:	5802546c 	.word	0x5802546c
 8001884:	58025480 	.word	0x58025480
 8001888:	58025494 	.word	0x58025494

0800188c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e205      	b.n	8001caa <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d004      	beq.n	80018b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2280      	movs	r2, #128	; 0x80
 80018ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e1fa      	b.n	8001caa <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a8c      	ldr	r2, [pc, #560]	; (8001aec <HAL_DMA_Abort_IT+0x260>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d04a      	beq.n	8001954 <HAL_DMA_Abort_IT+0xc8>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a8b      	ldr	r2, [pc, #556]	; (8001af0 <HAL_DMA_Abort_IT+0x264>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d045      	beq.n	8001954 <HAL_DMA_Abort_IT+0xc8>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a89      	ldr	r2, [pc, #548]	; (8001af4 <HAL_DMA_Abort_IT+0x268>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d040      	beq.n	8001954 <HAL_DMA_Abort_IT+0xc8>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a88      	ldr	r2, [pc, #544]	; (8001af8 <HAL_DMA_Abort_IT+0x26c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d03b      	beq.n	8001954 <HAL_DMA_Abort_IT+0xc8>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a86      	ldr	r2, [pc, #536]	; (8001afc <HAL_DMA_Abort_IT+0x270>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d036      	beq.n	8001954 <HAL_DMA_Abort_IT+0xc8>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a85      	ldr	r2, [pc, #532]	; (8001b00 <HAL_DMA_Abort_IT+0x274>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d031      	beq.n	8001954 <HAL_DMA_Abort_IT+0xc8>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a83      	ldr	r2, [pc, #524]	; (8001b04 <HAL_DMA_Abort_IT+0x278>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d02c      	beq.n	8001954 <HAL_DMA_Abort_IT+0xc8>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a82      	ldr	r2, [pc, #520]	; (8001b08 <HAL_DMA_Abort_IT+0x27c>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d027      	beq.n	8001954 <HAL_DMA_Abort_IT+0xc8>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a80      	ldr	r2, [pc, #512]	; (8001b0c <HAL_DMA_Abort_IT+0x280>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d022      	beq.n	8001954 <HAL_DMA_Abort_IT+0xc8>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a7f      	ldr	r2, [pc, #508]	; (8001b10 <HAL_DMA_Abort_IT+0x284>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d01d      	beq.n	8001954 <HAL_DMA_Abort_IT+0xc8>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a7d      	ldr	r2, [pc, #500]	; (8001b14 <HAL_DMA_Abort_IT+0x288>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d018      	beq.n	8001954 <HAL_DMA_Abort_IT+0xc8>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a7c      	ldr	r2, [pc, #496]	; (8001b18 <HAL_DMA_Abort_IT+0x28c>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d013      	beq.n	8001954 <HAL_DMA_Abort_IT+0xc8>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a7a      	ldr	r2, [pc, #488]	; (8001b1c <HAL_DMA_Abort_IT+0x290>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00e      	beq.n	8001954 <HAL_DMA_Abort_IT+0xc8>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a79      	ldr	r2, [pc, #484]	; (8001b20 <HAL_DMA_Abort_IT+0x294>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d009      	beq.n	8001954 <HAL_DMA_Abort_IT+0xc8>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a77      	ldr	r2, [pc, #476]	; (8001b24 <HAL_DMA_Abort_IT+0x298>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d004      	beq.n	8001954 <HAL_DMA_Abort_IT+0xc8>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a76      	ldr	r2, [pc, #472]	; (8001b28 <HAL_DMA_Abort_IT+0x29c>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d101      	bne.n	8001958 <HAL_DMA_Abort_IT+0xcc>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <HAL_DMA_Abort_IT+0xce>
 8001958:	2300      	movs	r3, #0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d065      	beq.n	8001a2a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2204      	movs	r2, #4
 8001962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a60      	ldr	r2, [pc, #384]	; (8001aec <HAL_DMA_Abort_IT+0x260>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d04a      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x17a>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a5e      	ldr	r2, [pc, #376]	; (8001af0 <HAL_DMA_Abort_IT+0x264>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d045      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x17a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a5d      	ldr	r2, [pc, #372]	; (8001af4 <HAL_DMA_Abort_IT+0x268>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d040      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x17a>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a5b      	ldr	r2, [pc, #364]	; (8001af8 <HAL_DMA_Abort_IT+0x26c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d03b      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x17a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a5a      	ldr	r2, [pc, #360]	; (8001afc <HAL_DMA_Abort_IT+0x270>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d036      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x17a>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a58      	ldr	r2, [pc, #352]	; (8001b00 <HAL_DMA_Abort_IT+0x274>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d031      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x17a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a57      	ldr	r2, [pc, #348]	; (8001b04 <HAL_DMA_Abort_IT+0x278>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d02c      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x17a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a55      	ldr	r2, [pc, #340]	; (8001b08 <HAL_DMA_Abort_IT+0x27c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d027      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x17a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a54      	ldr	r2, [pc, #336]	; (8001b0c <HAL_DMA_Abort_IT+0x280>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d022      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x17a>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a52      	ldr	r2, [pc, #328]	; (8001b10 <HAL_DMA_Abort_IT+0x284>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d01d      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x17a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a51      	ldr	r2, [pc, #324]	; (8001b14 <HAL_DMA_Abort_IT+0x288>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d018      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x17a>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a4f      	ldr	r2, [pc, #316]	; (8001b18 <HAL_DMA_Abort_IT+0x28c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x17a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a4e      	ldr	r2, [pc, #312]	; (8001b1c <HAL_DMA_Abort_IT+0x290>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d00e      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x17a>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a4c      	ldr	r2, [pc, #304]	; (8001b20 <HAL_DMA_Abort_IT+0x294>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d009      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x17a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a4b      	ldr	r2, [pc, #300]	; (8001b24 <HAL_DMA_Abort_IT+0x298>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d004      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x17a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a49      	ldr	r2, [pc, #292]	; (8001b28 <HAL_DMA_Abort_IT+0x29c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d108      	bne.n	8001a18 <HAL_DMA_Abort_IT+0x18c>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e147      	b.n	8001ca8 <HAL_DMA_Abort_IT+0x41c>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0201 	bic.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	e13e      	b.n	8001ca8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 020e 	bic.w	r2, r2, #14
 8001a38:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a2b      	ldr	r2, [pc, #172]	; (8001aec <HAL_DMA_Abort_IT+0x260>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d04a      	beq.n	8001ada <HAL_DMA_Abort_IT+0x24e>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a29      	ldr	r2, [pc, #164]	; (8001af0 <HAL_DMA_Abort_IT+0x264>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d045      	beq.n	8001ada <HAL_DMA_Abort_IT+0x24e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a28      	ldr	r2, [pc, #160]	; (8001af4 <HAL_DMA_Abort_IT+0x268>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d040      	beq.n	8001ada <HAL_DMA_Abort_IT+0x24e>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a26      	ldr	r2, [pc, #152]	; (8001af8 <HAL_DMA_Abort_IT+0x26c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d03b      	beq.n	8001ada <HAL_DMA_Abort_IT+0x24e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a25      	ldr	r2, [pc, #148]	; (8001afc <HAL_DMA_Abort_IT+0x270>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d036      	beq.n	8001ada <HAL_DMA_Abort_IT+0x24e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a23      	ldr	r2, [pc, #140]	; (8001b00 <HAL_DMA_Abort_IT+0x274>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d031      	beq.n	8001ada <HAL_DMA_Abort_IT+0x24e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <HAL_DMA_Abort_IT+0x278>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d02c      	beq.n	8001ada <HAL_DMA_Abort_IT+0x24e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a20      	ldr	r2, [pc, #128]	; (8001b08 <HAL_DMA_Abort_IT+0x27c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d027      	beq.n	8001ada <HAL_DMA_Abort_IT+0x24e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a1f      	ldr	r2, [pc, #124]	; (8001b0c <HAL_DMA_Abort_IT+0x280>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d022      	beq.n	8001ada <HAL_DMA_Abort_IT+0x24e>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a1d      	ldr	r2, [pc, #116]	; (8001b10 <HAL_DMA_Abort_IT+0x284>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d01d      	beq.n	8001ada <HAL_DMA_Abort_IT+0x24e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a1c      	ldr	r2, [pc, #112]	; (8001b14 <HAL_DMA_Abort_IT+0x288>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d018      	beq.n	8001ada <HAL_DMA_Abort_IT+0x24e>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a1a      	ldr	r2, [pc, #104]	; (8001b18 <HAL_DMA_Abort_IT+0x28c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d013      	beq.n	8001ada <HAL_DMA_Abort_IT+0x24e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a19      	ldr	r2, [pc, #100]	; (8001b1c <HAL_DMA_Abort_IT+0x290>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d00e      	beq.n	8001ada <HAL_DMA_Abort_IT+0x24e>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <HAL_DMA_Abort_IT+0x294>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d009      	beq.n	8001ada <HAL_DMA_Abort_IT+0x24e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a16      	ldr	r2, [pc, #88]	; (8001b24 <HAL_DMA_Abort_IT+0x298>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d004      	beq.n	8001ada <HAL_DMA_Abort_IT+0x24e>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a14      	ldr	r2, [pc, #80]	; (8001b28 <HAL_DMA_Abort_IT+0x29c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d128      	bne.n	8001b2c <HAL_DMA_Abort_IT+0x2a0>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0201 	bic.w	r2, r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	e027      	b.n	8001b3c <HAL_DMA_Abort_IT+0x2b0>
 8001aec:	40020010 	.word	0x40020010
 8001af0:	40020028 	.word	0x40020028
 8001af4:	40020040 	.word	0x40020040
 8001af8:	40020058 	.word	0x40020058
 8001afc:	40020070 	.word	0x40020070
 8001b00:	40020088 	.word	0x40020088
 8001b04:	400200a0 	.word	0x400200a0
 8001b08:	400200b8 	.word	0x400200b8
 8001b0c:	40020410 	.word	0x40020410
 8001b10:	40020428 	.word	0x40020428
 8001b14:	40020440 	.word	0x40020440
 8001b18:	40020458 	.word	0x40020458
 8001b1c:	40020470 	.word	0x40020470
 8001b20:	40020488 	.word	0x40020488
 8001b24:	400204a0 	.word	0x400204a0
 8001b28:	400204b8 	.word	0x400204b8
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0201 	bic.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a5c      	ldr	r2, [pc, #368]	; (8001cb4 <HAL_DMA_Abort_IT+0x428>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d072      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a5b      	ldr	r2, [pc, #364]	; (8001cb8 <HAL_DMA_Abort_IT+0x42c>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d06d      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a59      	ldr	r2, [pc, #356]	; (8001cbc <HAL_DMA_Abort_IT+0x430>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d068      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_DMA_Abort_IT+0x434>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d063      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a56      	ldr	r2, [pc, #344]	; (8001cc4 <HAL_DMA_Abort_IT+0x438>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d05e      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a55      	ldr	r2, [pc, #340]	; (8001cc8 <HAL_DMA_Abort_IT+0x43c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d059      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a53      	ldr	r2, [pc, #332]	; (8001ccc <HAL_DMA_Abort_IT+0x440>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d054      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a52      	ldr	r2, [pc, #328]	; (8001cd0 <HAL_DMA_Abort_IT+0x444>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d04f      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a50      	ldr	r2, [pc, #320]	; (8001cd4 <HAL_DMA_Abort_IT+0x448>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d04a      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a4f      	ldr	r2, [pc, #316]	; (8001cd8 <HAL_DMA_Abort_IT+0x44c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d045      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a4d      	ldr	r2, [pc, #308]	; (8001cdc <HAL_DMA_Abort_IT+0x450>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d040      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a4c      	ldr	r2, [pc, #304]	; (8001ce0 <HAL_DMA_Abort_IT+0x454>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d03b      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a4a      	ldr	r2, [pc, #296]	; (8001ce4 <HAL_DMA_Abort_IT+0x458>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d036      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a49      	ldr	r2, [pc, #292]	; (8001ce8 <HAL_DMA_Abort_IT+0x45c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d031      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a47      	ldr	r2, [pc, #284]	; (8001cec <HAL_DMA_Abort_IT+0x460>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d02c      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a46      	ldr	r2, [pc, #280]	; (8001cf0 <HAL_DMA_Abort_IT+0x464>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d027      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a44      	ldr	r2, [pc, #272]	; (8001cf4 <HAL_DMA_Abort_IT+0x468>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d022      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a43      	ldr	r2, [pc, #268]	; (8001cf8 <HAL_DMA_Abort_IT+0x46c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d01d      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a41      	ldr	r2, [pc, #260]	; (8001cfc <HAL_DMA_Abort_IT+0x470>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d018      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a40      	ldr	r2, [pc, #256]	; (8001d00 <HAL_DMA_Abort_IT+0x474>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d013      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a3e      	ldr	r2, [pc, #248]	; (8001d04 <HAL_DMA_Abort_IT+0x478>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00e      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a3d      	ldr	r2, [pc, #244]	; (8001d08 <HAL_DMA_Abort_IT+0x47c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d009      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a3b      	ldr	r2, [pc, #236]	; (8001d0c <HAL_DMA_Abort_IT+0x480>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d004      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x3a0>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a3a      	ldr	r2, [pc, #232]	; (8001d10 <HAL_DMA_Abort_IT+0x484>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_DMA_Abort_IT+0x3a4>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <HAL_DMA_Abort_IT+0x3a6>
 8001c30:	2300      	movs	r3, #0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d028      	beq.n	8001c88 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c44:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	2201      	movs	r2, #1
 8001c56:	409a      	lsls	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001c64:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00c      	beq.n	8001c88 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c7c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001c86:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40020010 	.word	0x40020010
 8001cb8:	40020028 	.word	0x40020028
 8001cbc:	40020040 	.word	0x40020040
 8001cc0:	40020058 	.word	0x40020058
 8001cc4:	40020070 	.word	0x40020070
 8001cc8:	40020088 	.word	0x40020088
 8001ccc:	400200a0 	.word	0x400200a0
 8001cd0:	400200b8 	.word	0x400200b8
 8001cd4:	40020410 	.word	0x40020410
 8001cd8:	40020428 	.word	0x40020428
 8001cdc:	40020440 	.word	0x40020440
 8001ce0:	40020458 	.word	0x40020458
 8001ce4:	40020470 	.word	0x40020470
 8001ce8:	40020488 	.word	0x40020488
 8001cec:	400204a0 	.word	0x400204a0
 8001cf0:	400204b8 	.word	0x400204b8
 8001cf4:	58025408 	.word	0x58025408
 8001cf8:	5802541c 	.word	0x5802541c
 8001cfc:	58025430 	.word	0x58025430
 8001d00:	58025444 	.word	0x58025444
 8001d04:	58025458 	.word	0x58025458
 8001d08:	5802546c 	.word	0x5802546c
 8001d0c:	58025480 	.word	0x58025480
 8001d10:	58025494 	.word	0x58025494

08001d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	; 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d22:	4b89      	ldr	r3, [pc, #548]	; (8001f48 <HAL_GPIO_Init+0x234>)
 8001d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d26:	e194      	b.n	8002052 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8186 	beq.w	800204c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d005      	beq.n	8001d58 <HAL_GPIO_Init+0x44>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d130      	bne.n	8001dba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d8e:	2201      	movs	r2, #1
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	f003 0201 	and.w	r2, r3, #1
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d017      	beq.n	8001df6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d123      	bne.n	8001e4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	220f      	movs	r2, #15
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	691a      	ldr	r2, [r3, #16]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	08da      	lsrs	r2, r3, #3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3208      	adds	r2, #8
 8001e44:	69b9      	ldr	r1, [r7, #24]
 8001e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	2203      	movs	r2, #3
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0203 	and.w	r2, r3, #3
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80e0 	beq.w	800204c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8c:	4b2f      	ldr	r3, [pc, #188]	; (8001f4c <HAL_GPIO_Init+0x238>)
 8001e8e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001e92:	4a2e      	ldr	r2, [pc, #184]	; (8001f4c <HAL_GPIO_Init+0x238>)
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001e9c:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <HAL_GPIO_Init+0x238>)
 8001e9e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eaa:	4a29      	ldr	r2, [pc, #164]	; (8001f50 <HAL_GPIO_Init+0x23c>)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a20      	ldr	r2, [pc, #128]	; (8001f54 <HAL_GPIO_Init+0x240>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d052      	beq.n	8001f7c <HAL_GPIO_Init+0x268>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <HAL_GPIO_Init+0x244>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d031      	beq.n	8001f42 <HAL_GPIO_Init+0x22e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a1e      	ldr	r2, [pc, #120]	; (8001f5c <HAL_GPIO_Init+0x248>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d02b      	beq.n	8001f3e <HAL_GPIO_Init+0x22a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <HAL_GPIO_Init+0x24c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d025      	beq.n	8001f3a <HAL_GPIO_Init+0x226>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <HAL_GPIO_Init+0x250>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01f      	beq.n	8001f36 <HAL_GPIO_Init+0x222>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a1b      	ldr	r2, [pc, #108]	; (8001f68 <HAL_GPIO_Init+0x254>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d019      	beq.n	8001f32 <HAL_GPIO_Init+0x21e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a1a      	ldr	r2, [pc, #104]	; (8001f6c <HAL_GPIO_Init+0x258>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0x21a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a19      	ldr	r2, [pc, #100]	; (8001f70 <HAL_GPIO_Init+0x25c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00d      	beq.n	8001f2a <HAL_GPIO_Init+0x216>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <HAL_GPIO_Init+0x260>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x212>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a17      	ldr	r2, [pc, #92]	; (8001f78 <HAL_GPIO_Init+0x264>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_GPIO_Init+0x20e>
 8001f1e:	2309      	movs	r3, #9
 8001f20:	e02d      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f22:	230a      	movs	r3, #10
 8001f24:	e02b      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f26:	2308      	movs	r3, #8
 8001f28:	e029      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f2a:	2307      	movs	r3, #7
 8001f2c:	e027      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f2e:	2306      	movs	r3, #6
 8001f30:	e025      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f32:	2305      	movs	r3, #5
 8001f34:	e023      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f36:	2304      	movs	r3, #4
 8001f38:	e021      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e01f      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e01d      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e01b      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f46:	bf00      	nop
 8001f48:	58000080 	.word	0x58000080
 8001f4c:	58024400 	.word	0x58024400
 8001f50:	58000400 	.word	0x58000400
 8001f54:	58020000 	.word	0x58020000
 8001f58:	58020400 	.word	0x58020400
 8001f5c:	58020800 	.word	0x58020800
 8001f60:	58020c00 	.word	0x58020c00
 8001f64:	58021000 	.word	0x58021000
 8001f68:	58021400 	.word	0x58021400
 8001f6c:	58021800 	.word	0x58021800
 8001f70:	58021c00 	.word	0x58021c00
 8001f74:	58022000 	.word	0x58022000
 8001f78:	58022400 	.word	0x58022400
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	f002 0203 	and.w	r2, r2, #3
 8001f84:	0092      	lsls	r2, r2, #2
 8001f86:	4093      	lsls	r3, r2
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f8e:	4938      	ldr	r1, [pc, #224]	; (8002070 <HAL_GPIO_Init+0x35c>)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	3302      	adds	r3, #2
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	3301      	adds	r3, #1
 8002050:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa22 f303 	lsr.w	r3, r2, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	f47f ae63 	bne.w	8001d28 <HAL_GPIO_Init+0x14>
  }
}
 8002062:	bf00      	nop
 8002064:	bf00      	nop
 8002066:	3724      	adds	r7, #36	; 0x24
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	58000400 	.word	0x58000400

08002074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	807b      	strh	r3, [r7, #2]
 8002080:	4613      	mov	r3, r2
 8002082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002084:	787b      	ldrb	r3, [r7, #1]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800208a:	887a      	ldrh	r2, [r7, #2]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002090:	e003      	b.n	800209a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002092:	887b      	ldrh	r3, [r7, #2]
 8002094:	041a      	lsls	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	619a      	str	r2, [r3, #24]
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b085      	sub	sp, #20
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	460b      	mov	r3, r1
 80020b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020b8:	887a      	ldrh	r2, [r7, #2]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4013      	ands	r3, r2
 80020be:	041a      	lsls	r2, r3, #16
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	887b      	ldrh	r3, [r7, #2]
 80020c6:	400b      	ands	r3, r1
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	619a      	str	r2, [r3, #24]
}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80020e4:	4b29      	ldr	r3, [pc, #164]	; (800218c <HAL_PWREx_ConfigSupply+0xb0>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	2b06      	cmp	r3, #6
 80020ee:	d00a      	beq.n	8002106 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80020f0:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_PWREx_ConfigSupply+0xb0>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d001      	beq.n	8002102 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e040      	b.n	8002184 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	e03e      	b.n	8002184 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002106:	4b21      	ldr	r3, [pc, #132]	; (800218c <HAL_PWREx_ConfigSupply+0xb0>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800210e:	491f      	ldr	r1, [pc, #124]	; (800218c <HAL_PWREx_ConfigSupply+0xb0>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4313      	orrs	r3, r2
 8002114:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002116:	f7fe ffaf 	bl	8001078 <HAL_GetTick>
 800211a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800211c:	e009      	b.n	8002132 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800211e:	f7fe ffab 	bl	8001078 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800212c:	d901      	bls.n	8002132 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e028      	b.n	8002184 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <HAL_PWREx_ConfigSupply+0xb0>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800213a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800213e:	d1ee      	bne.n	800211e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b1e      	cmp	r3, #30
 8002144:	d008      	beq.n	8002158 <HAL_PWREx_ConfigSupply+0x7c>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b2e      	cmp	r3, #46	; 0x2e
 800214a:	d005      	beq.n	8002158 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b1d      	cmp	r3, #29
 8002150:	d002      	beq.n	8002158 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b2d      	cmp	r3, #45	; 0x2d
 8002156:	d114      	bne.n	8002182 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002158:	f7fe ff8e 	bl	8001078 <HAL_GetTick>
 800215c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800215e:	e009      	b.n	8002174 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002160:	f7fe ff8a 	bl	8001078 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800216e:	d901      	bls.n	8002174 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e007      	b.n	8002184 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_PWREx_ConfigSupply+0xb0>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002180:	d1ee      	bne.n	8002160 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	58024800 	.word	0x58024800

08002190 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08c      	sub	sp, #48	; 0x30
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e3f3      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 80b3 	beq.w	8002316 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021b0:	4b9e      	ldr	r3, [pc, #632]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021ba:	4b9c      	ldr	r3, [pc, #624]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80021c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c2:	2b10      	cmp	r3, #16
 80021c4:	d007      	beq.n	80021d6 <HAL_RCC_OscConfig+0x46>
 80021c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c8:	2b18      	cmp	r3, #24
 80021ca:	d112      	bne.n	80021f2 <HAL_RCC_OscConfig+0x62>
 80021cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d10d      	bne.n	80021f2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d6:	4b95      	ldr	r3, [pc, #596]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8098 	beq.w	8002314 <HAL_RCC_OscConfig+0x184>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f040 8093 	bne.w	8002314 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e3cb      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fa:	d106      	bne.n	800220a <HAL_RCC_OscConfig+0x7a>
 80021fc:	4b8b      	ldr	r3, [pc, #556]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a8a      	ldr	r2, [pc, #552]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	e058      	b.n	80022bc <HAL_RCC_OscConfig+0x12c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d112      	bne.n	8002238 <HAL_RCC_OscConfig+0xa8>
 8002212:	4b86      	ldr	r3, [pc, #536]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a85      	ldr	r2, [pc, #532]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	4b83      	ldr	r3, [pc, #524]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a82      	ldr	r2, [pc, #520]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002224:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b80      	ldr	r3, [pc, #512]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a7f      	ldr	r2, [pc, #508]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002230:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e041      	b.n	80022bc <HAL_RCC_OscConfig+0x12c>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002240:	d112      	bne.n	8002268 <HAL_RCC_OscConfig+0xd8>
 8002242:	4b7a      	ldr	r3, [pc, #488]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a79      	ldr	r2, [pc, #484]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b77      	ldr	r3, [pc, #476]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a76      	ldr	r2, [pc, #472]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002254:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b74      	ldr	r3, [pc, #464]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a73      	ldr	r2, [pc, #460]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e029      	b.n	80022bc <HAL_RCC_OscConfig+0x12c>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002270:	d112      	bne.n	8002298 <HAL_RCC_OscConfig+0x108>
 8002272:	4b6e      	ldr	r3, [pc, #440]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a6d      	ldr	r2, [pc, #436]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	4b6b      	ldr	r3, [pc, #428]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a6a      	ldr	r2, [pc, #424]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002284:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b68      	ldr	r3, [pc, #416]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a67      	ldr	r2, [pc, #412]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e011      	b.n	80022bc <HAL_RCC_OscConfig+0x12c>
 8002298:	4b64      	ldr	r3, [pc, #400]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a63      	ldr	r2, [pc, #396]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 800229e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b61      	ldr	r3, [pc, #388]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a60      	ldr	r2, [pc, #384]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 80022aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	4b5e      	ldr	r3, [pc, #376]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a5d      	ldr	r2, [pc, #372]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 80022b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80022ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d013      	beq.n	80022ec <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fe fed8 	bl	8001078 <HAL_GetTick>
 80022c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022cc:	f7fe fed4 	bl	8001078 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e355      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022de:	4b53      	ldr	r3, [pc, #332]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x13c>
 80022ea:	e014      	b.n	8002316 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7fe fec4 	bl	8001078 <HAL_GetTick>
 80022f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f4:	f7fe fec0 	bl	8001078 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	; 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e341      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002306:	4b49      	ldr	r3, [pc, #292]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x164>
 8002312:	e000      	b.n	8002316 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 808c 	beq.w	800243c <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002324:	4b41      	ldr	r3, [pc, #260]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800232c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800232e:	4b3f      	ldr	r3, [pc, #252]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d007      	beq.n	800234a <HAL_RCC_OscConfig+0x1ba>
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	2b18      	cmp	r3, #24
 800233e:	d137      	bne.n	80023b0 <HAL_RCC_OscConfig+0x220>
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d132      	bne.n	80023b0 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800234a:	4b38      	ldr	r3, [pc, #224]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <HAL_RCC_OscConfig+0x1d2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e313      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002362:	4b32      	ldr	r3, [pc, #200]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 0219 	bic.w	r2, r3, #25
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	492f      	ldr	r1, [pc, #188]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002370:	4313      	orrs	r3, r2
 8002372:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002374:	f7fe fe80 	bl	8001078 <HAL_GetTick>
 8002378:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800237c:	f7fe fe7c 	bl	8001078 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e2fd      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800238e:	4b27      	ldr	r3, [pc, #156]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239a:	4b24      	ldr	r3, [pc, #144]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	061b      	lsls	r3, r3, #24
 80023a8:	4920      	ldr	r1, [pc, #128]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ae:	e045      	b.n	800243c <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d026      	beq.n	8002406 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023b8:	4b1c      	ldr	r3, [pc, #112]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 0219 	bic.w	r2, r3, #25
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4919      	ldr	r1, [pc, #100]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7fe fe55 	bl	8001078 <HAL_GetTick>
 80023ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d2:	f7fe fe51 	bl	8001078 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e2d2      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f0:	4b0e      	ldr	r3, [pc, #56]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	061b      	lsls	r3, r3, #24
 80023fe:	490b      	ldr	r1, [pc, #44]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
 8002404:	e01a      	b.n	800243c <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a08      	ldr	r2, [pc, #32]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7fe fe31 	bl	8001078 <HAL_GetTick>
 8002416:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002418:	e00a      	b.n	8002430 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800241a:	f7fe fe2d 	bl	8001078 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d903      	bls.n	8002430 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e2ae      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
 800242c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002430:	4b99      	ldr	r3, [pc, #612]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1ee      	bne.n	800241a <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b00      	cmp	r3, #0
 8002446:	d06a      	beq.n	800251e <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002448:	4b93      	ldr	r3, [pc, #588]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002450:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002452:	4b91      	ldr	r3, [pc, #580]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2b08      	cmp	r3, #8
 800245c:	d007      	beq.n	800246e <HAL_RCC_OscConfig+0x2de>
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b18      	cmp	r3, #24
 8002462:	d11b      	bne.n	800249c <HAL_RCC_OscConfig+0x30c>
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d116      	bne.n	800249c <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800246e:	4b8a      	ldr	r3, [pc, #552]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_RCC_OscConfig+0x2f6>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	2b80      	cmp	r3, #128	; 0x80
 8002480:	d001      	beq.n	8002486 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e281      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002486:	4b84      	ldr	r3, [pc, #528]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	061b      	lsls	r3, r3, #24
 8002494:	4980      	ldr	r1, [pc, #512]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 8002496:	4313      	orrs	r3, r2
 8002498:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800249a:	e040      	b.n	800251e <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d023      	beq.n	80024ec <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80024a4:	4b7c      	ldr	r3, [pc, #496]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a7b      	ldr	r2, [pc, #492]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 80024aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7fe fde2 	bl	8001078 <HAL_GetTick>
 80024b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80024b8:	f7fe fdde 	bl	8001078 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e25f      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024ca:	4b73      	ldr	r3, [pc, #460]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024d6:	4b70      	ldr	r3, [pc, #448]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	061b      	lsls	r3, r3, #24
 80024e4:	496c      	ldr	r1, [pc, #432]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60cb      	str	r3, [r1, #12]
 80024ea:	e018      	b.n	800251e <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024ec:	4b6a      	ldr	r3, [pc, #424]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a69      	ldr	r2, [pc, #420]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 80024f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7fe fdbe 	bl	8001078 <HAL_GetTick>
 80024fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002500:	f7fe fdba 	bl	8001078 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e23b      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002512:	4b61      	ldr	r3, [pc, #388]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d036      	beq.n	8002598 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d019      	beq.n	8002566 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002532:	4b59      	ldr	r3, [pc, #356]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 8002534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002536:	4a58      	ldr	r2, [pc, #352]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253e:	f7fe fd9b 	bl	8001078 <HAL_GetTick>
 8002542:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002546:	f7fe fd97 	bl	8001078 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e218      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002558:	4b4f      	ldr	r3, [pc, #316]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 800255a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x3b6>
 8002564:	e018      	b.n	8002598 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002566:	4b4c      	ldr	r3, [pc, #304]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 8002568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256a:	4a4b      	ldr	r2, [pc, #300]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002572:	f7fe fd81 	bl	8001078 <HAL_GetTick>
 8002576:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800257a:	f7fe fd7d 	bl	8001078 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e1fe      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800258c:	4b42      	ldr	r3, [pc, #264]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 800258e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d036      	beq.n	8002612 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d019      	beq.n	80025e0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025ac:	4b3a      	ldr	r3, [pc, #232]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a39      	ldr	r2, [pc, #228]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 80025b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025b8:	f7fe fd5e 	bl	8001078 <HAL_GetTick>
 80025bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80025c0:	f7fe fd5a 	bl	8001078 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e1db      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025d2:	4b31      	ldr	r3, [pc, #196]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x430>
 80025de:	e018      	b.n	8002612 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025e0:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a2c      	ldr	r2, [pc, #176]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 80025e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025ec:	f7fe fd44 	bl	8001078 <HAL_GetTick>
 80025f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80025f4:	f7fe fd40 	bl	8001078 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e1c1      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002606:	4b24      	ldr	r3, [pc, #144]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80af 	beq.w	800277e <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002620:	4b1e      	ldr	r3, [pc, #120]	; (800269c <HAL_RCC_OscConfig+0x50c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a1d      	ldr	r2, [pc, #116]	; (800269c <HAL_RCC_OscConfig+0x50c>)
 8002626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800262c:	f7fe fd24 	bl	8001078 <HAL_GetTick>
 8002630:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002634:	f7fe fd20 	bl	8001078 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b64      	cmp	r3, #100	; 0x64
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e1a1      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_RCC_OscConfig+0x50c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d106      	bne.n	8002668 <HAL_RCC_OscConfig+0x4d8>
 800265a:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265e:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6713      	str	r3, [r2, #112]	; 0x70
 8002666:	e05b      	b.n	8002720 <HAL_RCC_OscConfig+0x590>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d117      	bne.n	80026a0 <HAL_RCC_OscConfig+0x510>
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	4a08      	ldr	r2, [pc, #32]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	6713      	str	r3, [r2, #112]	; 0x70
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002680:	4a05      	ldr	r2, [pc, #20]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 8002682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002686:	6713      	str	r3, [r2, #112]	; 0x70
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	4a02      	ldr	r2, [pc, #8]	; (8002698 <HAL_RCC_OscConfig+0x508>)
 800268e:	f023 0304 	bic.w	r3, r3, #4
 8002692:	6713      	str	r3, [r2, #112]	; 0x70
 8002694:	e044      	b.n	8002720 <HAL_RCC_OscConfig+0x590>
 8002696:	bf00      	nop
 8002698:	58024400 	.word	0x58024400
 800269c:	58024800 	.word	0x58024800
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b05      	cmp	r3, #5
 80026a6:	d112      	bne.n	80026ce <HAL_RCC_OscConfig+0x53e>
 80026a8:	4b95      	ldr	r3, [pc, #596]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ac:	4a94      	ldr	r2, [pc, #592]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80026ae:	f043 0304 	orr.w	r3, r3, #4
 80026b2:	6713      	str	r3, [r2, #112]	; 0x70
 80026b4:	4b92      	ldr	r3, [pc, #584]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	4a91      	ldr	r2, [pc, #580]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80026ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026be:	6713      	str	r3, [r2, #112]	; 0x70
 80026c0:	4b8f      	ldr	r3, [pc, #572]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80026c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c4:	4a8e      	ldr	r2, [pc, #568]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6713      	str	r3, [r2, #112]	; 0x70
 80026cc:	e028      	b.n	8002720 <HAL_RCC_OscConfig+0x590>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b85      	cmp	r3, #133	; 0x85
 80026d4:	d112      	bne.n	80026fc <HAL_RCC_OscConfig+0x56c>
 80026d6:	4b8a      	ldr	r3, [pc, #552]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	4a89      	ldr	r2, [pc, #548]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80026dc:	f043 0304 	orr.w	r3, r3, #4
 80026e0:	6713      	str	r3, [r2, #112]	; 0x70
 80026e2:	4b87      	ldr	r3, [pc, #540]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e6:	4a86      	ldr	r2, [pc, #536]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80026e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ec:	6713      	str	r3, [r2, #112]	; 0x70
 80026ee:	4b84      	ldr	r3, [pc, #528]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	4a83      	ldr	r2, [pc, #524]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6713      	str	r3, [r2, #112]	; 0x70
 80026fa:	e011      	b.n	8002720 <HAL_RCC_OscConfig+0x590>
 80026fc:	4b80      	ldr	r3, [pc, #512]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002700:	4a7f      	ldr	r2, [pc, #508]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	6713      	str	r3, [r2, #112]	; 0x70
 8002708:	4b7d      	ldr	r3, [pc, #500]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270c:	4a7c      	ldr	r2, [pc, #496]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 800270e:	f023 0304 	bic.w	r3, r3, #4
 8002712:	6713      	str	r3, [r2, #112]	; 0x70
 8002714:	4b7a      	ldr	r3, [pc, #488]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002718:	4a79      	ldr	r2, [pc, #484]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 800271a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800271e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d015      	beq.n	8002754 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002728:	f7fe fca6 	bl	8001078 <HAL_GetTick>
 800272c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800272e:	e00a      	b.n	8002746 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002730:	f7fe fca2 	bl	8001078 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e121      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002746:	4b6e      	ldr	r3, [pc, #440]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0ee      	beq.n	8002730 <HAL_RCC_OscConfig+0x5a0>
 8002752:	e014      	b.n	800277e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7fe fc90 	bl	8001078 <HAL_GetTick>
 8002758:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800275a:	e00a      	b.n	8002772 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800275c:	f7fe fc8c 	bl	8001078 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	; 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e10b      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002772:	4b63      	ldr	r3, [pc, #396]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1ee      	bne.n	800275c <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 8100 	beq.w	8002988 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002788:	4b5d      	ldr	r3, [pc, #372]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002790:	2b18      	cmp	r3, #24
 8002792:	f000 80bb 	beq.w	800290c <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	2b02      	cmp	r3, #2
 800279c:	f040 8095 	bne.w	80028ca <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a0:	4b57      	ldr	r3, [pc, #348]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a56      	ldr	r2, [pc, #344]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80027a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe fc64 	bl	8001078 <HAL_GetTick>
 80027b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b4:	f7fe fc60 	bl	8001078 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e0e1      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027c6:	4b4e      	ldr	r3, [pc, #312]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d2:	4b4b      	ldr	r3, [pc, #300]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80027d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027d6:	4b4b      	ldr	r3, [pc, #300]	; (8002904 <HAL_RCC_OscConfig+0x774>)
 80027d8:	4013      	ands	r3, r2
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027e2:	0112      	lsls	r2, r2, #4
 80027e4:	430a      	orrs	r2, r1
 80027e6:	4946      	ldr	r1, [pc, #280]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	628b      	str	r3, [r1, #40]	; 0x28
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	3b01      	subs	r3, #1
 80027f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fa:	3b01      	subs	r3, #1
 80027fc:	025b      	lsls	r3, r3, #9
 80027fe:	b29b      	uxth	r3, r3
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	3b01      	subs	r3, #1
 8002808:	041b      	lsls	r3, r3, #16
 800280a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	3b01      	subs	r3, #1
 8002816:	061b      	lsls	r3, r3, #24
 8002818:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800281c:	4938      	ldr	r1, [pc, #224]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 800281e:	4313      	orrs	r3, r2
 8002820:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002822:	4b37      	ldr	r3, [pc, #220]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	4a36      	ldr	r2, [pc, #216]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800282e:	4b34      	ldr	r3, [pc, #208]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 8002830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002832:	4b35      	ldr	r3, [pc, #212]	; (8002908 <HAL_RCC_OscConfig+0x778>)
 8002834:	4013      	ands	r3, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800283a:	00d2      	lsls	r2, r2, #3
 800283c:	4930      	ldr	r1, [pc, #192]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 800283e:	4313      	orrs	r3, r2
 8002840:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002842:	4b2f      	ldr	r3, [pc, #188]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	f023 020c 	bic.w	r2, r3, #12
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	492c      	ldr	r1, [pc, #176]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 8002850:	4313      	orrs	r3, r2
 8002852:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002854:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	f023 0202 	bic.w	r2, r3, #2
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	4927      	ldr	r1, [pc, #156]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 8002862:	4313      	orrs	r3, r2
 8002864:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002866:	4b26      	ldr	r3, [pc, #152]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	4a25      	ldr	r2, [pc, #148]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 800286c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002870:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002872:	4b23      	ldr	r3, [pc, #140]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	4a22      	ldr	r2, [pc, #136]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 8002878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800287e:	4b20      	ldr	r3, [pc, #128]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	4a1f      	ldr	r2, [pc, #124]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 8002884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002888:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	4a1c      	ldr	r2, [pc, #112]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002896:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a19      	ldr	r2, [pc, #100]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 800289c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a2:	f7fe fbe9 	bl	8001078 <HAL_GetTick>
 80028a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028aa:	f7fe fbe5 	bl	8001078 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e066      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028bc:	4b10      	ldr	r3, [pc, #64]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x71a>
 80028c8:	e05e      	b.n	8002988 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ca:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80028d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d6:	f7fe fbcf 	bl	8001078 <HAL_GetTick>
 80028da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028de:	f7fe fbcb 	bl	8001078 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e04c      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028f0:	4b03      	ldr	r3, [pc, #12]	; (8002900 <HAL_RCC_OscConfig+0x770>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f0      	bne.n	80028de <HAL_RCC_OscConfig+0x74e>
 80028fc:	e044      	b.n	8002988 <HAL_RCC_OscConfig+0x7f8>
 80028fe:	bf00      	nop
 8002900:	58024400 	.word	0x58024400
 8002904:	fffffc0c 	.word	0xfffffc0c
 8002908:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800290c:	4b21      	ldr	r3, [pc, #132]	; (8002994 <HAL_RCC_OscConfig+0x804>)
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002912:	4b20      	ldr	r3, [pc, #128]	; (8002994 <HAL_RCC_OscConfig+0x804>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	2b01      	cmp	r3, #1
 800291e:	d031      	beq.n	8002984 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f003 0203 	and.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d12a      	bne.n	8002984 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293a:	429a      	cmp	r2, r3
 800293c:	d122      	bne.n	8002984 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800294a:	429a      	cmp	r2, r3
 800294c:	d11a      	bne.n	8002984 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	0a5b      	lsrs	r3, r3, #9
 8002952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d111      	bne.n	8002984 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	0c1b      	lsrs	r3, r3, #16
 8002964:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d108      	bne.n	8002984 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	0e1b      	lsrs	r3, r3, #24
 8002976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3730      	adds	r7, #48	; 0x30
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	58024400 	.word	0x58024400

08002998 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e19c      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029ac:	4b8a      	ldr	r3, [pc, #552]	; (8002bd8 <HAL_RCC_ClockConfig+0x240>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 030f 	and.w	r3, r3, #15
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d910      	bls.n	80029dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b87      	ldr	r3, [pc, #540]	; (8002bd8 <HAL_RCC_ClockConfig+0x240>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 020f 	bic.w	r2, r3, #15
 80029c2:	4985      	ldr	r1, [pc, #532]	; (8002bd8 <HAL_RCC_ClockConfig+0x240>)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ca:	4b83      	ldr	r3, [pc, #524]	; (8002bd8 <HAL_RCC_ClockConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e184      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d010      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	4b7b      	ldr	r3, [pc, #492]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d908      	bls.n	8002a0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029f8:	4b78      	ldr	r3, [pc, #480]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	4975      	ldr	r1, [pc, #468]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d010      	beq.n	8002a38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	4b70      	ldr	r3, [pc, #448]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d908      	bls.n	8002a38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a26:	4b6d      	ldr	r3, [pc, #436]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	496a      	ldr	r1, [pc, #424]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d010      	beq.n	8002a66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699a      	ldr	r2, [r3, #24]
 8002a48:	4b64      	ldr	r3, [pc, #400]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d908      	bls.n	8002a66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a54:	4b61      	ldr	r3, [pc, #388]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	495e      	ldr	r1, [pc, #376]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d010      	beq.n	8002a94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69da      	ldr	r2, [r3, #28]
 8002a76:	4b59      	ldr	r3, [pc, #356]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d908      	bls.n	8002a94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002a82:	4b56      	ldr	r3, [pc, #344]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	4953      	ldr	r1, [pc, #332]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d010      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	4b4d      	ldr	r3, [pc, #308]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d908      	bls.n	8002ac2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab0:	4b4a      	ldr	r3, [pc, #296]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f023 020f 	bic.w	r2, r3, #15
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4947      	ldr	r1, [pc, #284]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d055      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ace:	4b43      	ldr	r3, [pc, #268]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	4940      	ldr	r1, [pc, #256]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ae8:	4b3c      	ldr	r3, [pc, #240]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d121      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0f6      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d107      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b00:	4b36      	ldr	r3, [pc, #216]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d115      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0ea      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b18:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d109      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0de      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b28:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0d6      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b38:	4b28      	ldr	r3, [pc, #160]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	f023 0207 	bic.w	r2, r3, #7
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4925      	ldr	r1, [pc, #148]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4a:	f7fe fa95 	bl	8001078 <HAL_GetTick>
 8002b4e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b50:	e00a      	b.n	8002b68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b52:	f7fe fa91 	bl	8001078 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e0be      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b68:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d1eb      	bne.n	8002b52 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d010      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d208      	bcs.n	8002ba8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b96:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f023 020f 	bic.w	r2, r3, #15
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	490e      	ldr	r1, [pc, #56]	; (8002bdc <HAL_RCC_ClockConfig+0x244>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <HAL_RCC_ClockConfig+0x240>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 030f 	and.w	r3, r3, #15
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d214      	bcs.n	8002be0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <HAL_RCC_ClockConfig+0x240>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 020f 	bic.w	r2, r3, #15
 8002bbe:	4906      	ldr	r1, [pc, #24]	; (8002bd8 <HAL_RCC_ClockConfig+0x240>)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <HAL_RCC_ClockConfig+0x240>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e086      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x34e>
 8002bd8:	52002000 	.word	0x52002000
 8002bdc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d010      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	4b3f      	ldr	r3, [pc, #252]	; (8002cf0 <HAL_RCC_ClockConfig+0x358>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d208      	bcs.n	8002c0e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002bfc:	4b3c      	ldr	r3, [pc, #240]	; (8002cf0 <HAL_RCC_ClockConfig+0x358>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	4939      	ldr	r1, [pc, #228]	; (8002cf0 <HAL_RCC_ClockConfig+0x358>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d010      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	4b34      	ldr	r3, [pc, #208]	; (8002cf0 <HAL_RCC_ClockConfig+0x358>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d208      	bcs.n	8002c3c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c2a:	4b31      	ldr	r3, [pc, #196]	; (8002cf0 <HAL_RCC_ClockConfig+0x358>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	492e      	ldr	r1, [pc, #184]	; (8002cf0 <HAL_RCC_ClockConfig+0x358>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d010      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699a      	ldr	r2, [r3, #24]
 8002c4c:	4b28      	ldr	r3, [pc, #160]	; (8002cf0 <HAL_RCC_ClockConfig+0x358>)
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d208      	bcs.n	8002c6a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c58:	4b25      	ldr	r3, [pc, #148]	; (8002cf0 <HAL_RCC_ClockConfig+0x358>)
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	4922      	ldr	r1, [pc, #136]	; (8002cf0 <HAL_RCC_ClockConfig+0x358>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d010      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69da      	ldr	r2, [r3, #28]
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_RCC_ClockConfig+0x358>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d208      	bcs.n	8002c98 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <HAL_RCC_ClockConfig+0x358>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	4917      	ldr	r1, [pc, #92]	; (8002cf0 <HAL_RCC_ClockConfig+0x358>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002c98:	f000 f834 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <HAL_RCC_ClockConfig+0x358>)
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	0a1b      	lsrs	r3, r3, #8
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	4912      	ldr	r1, [pc, #72]	; (8002cf4 <HAL_RCC_ClockConfig+0x35c>)
 8002caa:	5ccb      	ldrb	r3, [r1, r3]
 8002cac:	f003 031f 	and.w	r3, r3, #31
 8002cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <HAL_RCC_ClockConfig+0x358>)
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	4a0d      	ldr	r2, [pc, #52]	; (8002cf4 <HAL_RCC_ClockConfig+0x35c>)
 8002cc0:	5cd3      	ldrb	r3, [r2, r3]
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ccc:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <HAL_RCC_ClockConfig+0x360>)
 8002cce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cd0:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <HAL_RCC_ClockConfig+0x364>)
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_RCC_ClockConfig+0x368>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd ff62 	bl	8000ba4 <HAL_InitTick>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	58024400 	.word	0x58024400
 8002cf4:	0800a9e4 	.word	0x0800a9e4
 8002cf8:	24000004 	.word	0x24000004
 8002cfc:	24000000 	.word	0x24000000
 8002d00:	24000008 	.word	0x24000008

08002d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	; 0x24
 8002d08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d0a:	4bb3      	ldr	r3, [pc, #716]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d12:	2b18      	cmp	r3, #24
 8002d14:	f200 8155 	bhi.w	8002fc2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002d18:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1e:	bf00      	nop
 8002d20:	08002d85 	.word	0x08002d85
 8002d24:	08002fc3 	.word	0x08002fc3
 8002d28:	08002fc3 	.word	0x08002fc3
 8002d2c:	08002fc3 	.word	0x08002fc3
 8002d30:	08002fc3 	.word	0x08002fc3
 8002d34:	08002fc3 	.word	0x08002fc3
 8002d38:	08002fc3 	.word	0x08002fc3
 8002d3c:	08002fc3 	.word	0x08002fc3
 8002d40:	08002dab 	.word	0x08002dab
 8002d44:	08002fc3 	.word	0x08002fc3
 8002d48:	08002fc3 	.word	0x08002fc3
 8002d4c:	08002fc3 	.word	0x08002fc3
 8002d50:	08002fc3 	.word	0x08002fc3
 8002d54:	08002fc3 	.word	0x08002fc3
 8002d58:	08002fc3 	.word	0x08002fc3
 8002d5c:	08002fc3 	.word	0x08002fc3
 8002d60:	08002db1 	.word	0x08002db1
 8002d64:	08002fc3 	.word	0x08002fc3
 8002d68:	08002fc3 	.word	0x08002fc3
 8002d6c:	08002fc3 	.word	0x08002fc3
 8002d70:	08002fc3 	.word	0x08002fc3
 8002d74:	08002fc3 	.word	0x08002fc3
 8002d78:	08002fc3 	.word	0x08002fc3
 8002d7c:	08002fc3 	.word	0x08002fc3
 8002d80:	08002db7 	.word	0x08002db7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d84:	4b94      	ldr	r3, [pc, #592]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d009      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002d90:	4b91      	ldr	r3, [pc, #580]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	08db      	lsrs	r3, r3, #3
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	4a90      	ldr	r2, [pc, #576]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002da0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002da2:	e111      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002da4:	4b8d      	ldr	r3, [pc, #564]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002da6:	61bb      	str	r3, [r7, #24]
    break;
 8002da8:	e10e      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002daa:	4b8d      	ldr	r3, [pc, #564]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002dac:	61bb      	str	r3, [r7, #24]
    break;
 8002dae:	e10b      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002db0:	4b8c      	ldr	r3, [pc, #560]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002db2:	61bb      	str	r3, [r7, #24]
    break;
 8002db4:	e108      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002db6:	4b88      	ldr	r3, [pc, #544]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002dc0:	4b85      	ldr	r3, [pc, #532]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002dcc:	4b82      	ldr	r3, [pc, #520]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002dd6:	4b80      	ldr	r3, [pc, #512]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dda:	08db      	lsrs	r3, r3, #3
 8002ddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	fb02 f303 	mul.w	r3, r2, r3
 8002de6:	ee07 3a90 	vmov	s15, r3
 8002dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80e1 	beq.w	8002fbc <HAL_RCC_GetSysClockFreq+0x2b8>
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	f000 8083 	beq.w	8002f08 <HAL_RCC_GetSysClockFreq+0x204>
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	f200 80a1 	bhi.w	8002f4c <HAL_RCC_GetSysClockFreq+0x248>
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0x114>
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d056      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e16:	e099      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e18:	4b6f      	ldr	r3, [pc, #444]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d02d      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e24:	4b6c      	ldr	r3, [pc, #432]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	08db      	lsrs	r3, r3, #3
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	4a6b      	ldr	r2, [pc, #428]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
 8002e34:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	ee07 3a90 	vmov	s15, r3
 8002e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	ee07 3a90 	vmov	s15, r3
 8002e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e4e:	4b62      	ldr	r3, [pc, #392]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e56:	ee07 3a90 	vmov	s15, r3
 8002e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e62:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002e7e:	e087      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	ee07 3a90 	vmov	s15, r3
 8002e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e8a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002fec <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e92:	4b51      	ldr	r3, [pc, #324]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e9a:	ee07 3a90 	vmov	s15, r3
 8002e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ea6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ec2:	e065      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	ee07 3a90 	vmov	s15, r3
 8002eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ece:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002ff0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ed6:	4b40      	ldr	r3, [pc, #256]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ede:	ee07 3a90 	vmov	s15, r3
 8002ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f06:	e043      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	ee07 3a90 	vmov	s15, r3
 8002f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f12:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002ff4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f1a:	4b2f      	ldr	r3, [pc, #188]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f22:	ee07 3a90 	vmov	s15, r3
 8002f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f2e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f4a:	e021      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f56:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002ff0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f5e:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f72:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f8e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002f90:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	0a5b      	lsrs	r3, r3, #9
 8002f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	ee07 3a90 	vmov	s15, r3
 8002fa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fb4:	ee17 3a90 	vmov	r3, s15
 8002fb8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002fba:	e005      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
    break;
 8002fc0:	e002      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002fc2:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fc4:	61bb      	str	r3, [r7, #24]
    break;
 8002fc6:	bf00      	nop
  }

  return sysclockfreq;
 8002fc8:	69bb      	ldr	r3, [r7, #24]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3724      	adds	r7, #36	; 0x24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	58024400 	.word	0x58024400
 8002fdc:	03d09000 	.word	0x03d09000
 8002fe0:	003d0900 	.word	0x003d0900
 8002fe4:	007a1200 	.word	0x007a1200
 8002fe8:	46000000 	.word	0x46000000
 8002fec:	4c742400 	.word	0x4c742400
 8002ff0:	4a742400 	.word	0x4a742400
 8002ff4:	4af42400 	.word	0x4af42400

08002ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002ffe:	f7ff fe81 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8003002:	4602      	mov	r2, r0
 8003004:	4b10      	ldr	r3, [pc, #64]	; (8003048 <HAL_RCC_GetHCLKFreq+0x50>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	0a1b      	lsrs	r3, r3, #8
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	490f      	ldr	r1, [pc, #60]	; (800304c <HAL_RCC_GetHCLKFreq+0x54>)
 8003010:	5ccb      	ldrb	r3, [r1, r3]
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	fa22 f303 	lsr.w	r3, r2, r3
 800301a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800301c:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <HAL_RCC_GetHCLKFreq+0x50>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	4a09      	ldr	r2, [pc, #36]	; (800304c <HAL_RCC_GetHCLKFreq+0x54>)
 8003026:	5cd3      	ldrb	r3, [r2, r3]
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	fa22 f303 	lsr.w	r3, r2, r3
 8003032:	4a07      	ldr	r2, [pc, #28]	; (8003050 <HAL_RCC_GetHCLKFreq+0x58>)
 8003034:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003036:	4a07      	ldr	r2, [pc, #28]	; (8003054 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <HAL_RCC_GetHCLKFreq+0x58>)
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	58024400 	.word	0x58024400
 800304c:	0800a9e4 	.word	0x0800a9e4
 8003050:	24000004 	.word	0x24000004
 8003054:	24000000 	.word	0x24000000

08003058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800305c:	f7ff ffcc 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 8003060:	4602      	mov	r2, r0
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	091b      	lsrs	r3, r3, #4
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	4904      	ldr	r1, [pc, #16]	; (8003080 <HAL_RCC_GetPCLK1Freq+0x28>)
 800306e:	5ccb      	ldrb	r3, [r1, r3]
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003078:	4618      	mov	r0, r3
 800307a:	bd80      	pop	{r7, pc}
 800307c:	58024400 	.word	0x58024400
 8003080:	0800a9e4 	.word	0x0800a9e4

08003084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003088:	f7ff ffb6 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 800308c:	4602      	mov	r2, r0
 800308e:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	0a1b      	lsrs	r3, r3, #8
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	4904      	ldr	r1, [pc, #16]	; (80030ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800309a:	5ccb      	ldrb	r3, [r1, r3]
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	58024400 	.word	0x58024400
 80030ac:	0800a9e4 	.word	0x0800a9e4

080030b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	223f      	movs	r2, #63	; 0x3f
 80030be:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030c0:	4b1a      	ldr	r3, [pc, #104]	; (800312c <HAL_RCC_GetClockConfig+0x7c>)
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f003 0207 	and.w	r2, r3, #7
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80030cc:	4b17      	ldr	r3, [pc, #92]	; (800312c <HAL_RCC_GetClockConfig+0x7c>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 80030d8:	4b14      	ldr	r3, [pc, #80]	; (800312c <HAL_RCC_GetClockConfig+0x7c>)
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f003 020f 	and.w	r2, r3, #15
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80030e4:	4b11      	ldr	r3, [pc, #68]	; (800312c <HAL_RCC_GetClockConfig+0x7c>)
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80030f0:	4b0e      	ldr	r3, [pc, #56]	; (800312c <HAL_RCC_GetClockConfig+0x7c>)
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_RCC_GetClockConfig+0x7c>)
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8003108:	4b08      	ldr	r3, [pc, #32]	; (800312c <HAL_RCC_GetClockConfig+0x7c>)
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_RCC_GetClockConfig+0x80>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 020f 	and.w	r2, r3, #15
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	601a      	str	r2, [r3, #0]
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	58024400 	.word	0x58024400
 8003130:	52002000 	.word	0x52002000

08003134 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800313c:	2300      	movs	r3, #0
 800313e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003140:	2300      	movs	r3, #0
 8003142:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d03f      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003154:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003158:	d02a      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800315a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800315e:	d824      	bhi.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003160:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003164:	d018      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800316a:	d81e      	bhi.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003174:	d007      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003176:	e018      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003178:	4ba6      	ldr	r3, [pc, #664]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	4aa5      	ldr	r2, [pc, #660]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800317e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003182:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003184:	e015      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3304      	adds	r3, #4
 800318a:	2102      	movs	r1, #2
 800318c:	4618      	mov	r0, r3
 800318e:	f001 f99b 	bl	80044c8 <RCCEx_PLL2_Config>
 8003192:	4603      	mov	r3, r0
 8003194:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003196:	e00c      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3324      	adds	r3, #36	; 0x24
 800319c:	2102      	movs	r1, #2
 800319e:	4618      	mov	r0, r3
 80031a0:	f001 fa44 	bl	800462c <RCCEx_PLL3_Config>
 80031a4:	4603      	mov	r3, r0
 80031a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80031a8:	e003      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	75fb      	strb	r3, [r7, #23]
      break;
 80031ae:	e000      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d109      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80031b8:	4b96      	ldr	r3, [pc, #600]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80031ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031c4:	4993      	ldr	r1, [pc, #588]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	650b      	str	r3, [r1, #80]	; 0x50
 80031ca:	e001      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
 80031ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d03d      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d826      	bhi.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80031e4:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	08003201 	.word	0x08003201
 80031f0:	0800320f 	.word	0x0800320f
 80031f4:	08003221 	.word	0x08003221
 80031f8:	08003239 	.word	0x08003239
 80031fc:	08003239 	.word	0x08003239
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003200:	4b84      	ldr	r3, [pc, #528]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	4a83      	ldr	r2, [pc, #524]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800320a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800320c:	e015      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f001 f957 	bl	80044c8 <RCCEx_PLL2_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800321e:	e00c      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3324      	adds	r3, #36	; 0x24
 8003224:	2100      	movs	r1, #0
 8003226:	4618      	mov	r0, r3
 8003228:	f001 fa00 	bl	800462c <RCCEx_PLL3_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003230:	e003      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	75fb      	strb	r3, [r7, #23]
      break;
 8003236:	e000      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800323a:	7dfb      	ldrb	r3, [r7, #23]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d109      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003240:	4b74      	ldr	r3, [pc, #464]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003244:	f023 0207 	bic.w	r2, r3, #7
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324c:	4971      	ldr	r1, [pc, #452]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800324e:	4313      	orrs	r3, r2
 8003250:	650b      	str	r3, [r1, #80]	; 0x50
 8003252:	e001      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003260:	2b00      	cmp	r3, #0
 8003262:	d04a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003268:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800326c:	d031      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800326e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003272:	d82b      	bhi.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003278:	d02d      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800327a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800327e:	d825      	bhi.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003280:	2bc0      	cmp	r3, #192	; 0xc0
 8003282:	d02a      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003284:	2bc0      	cmp	r3, #192	; 0xc0
 8003286:	d821      	bhi.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003288:	2b80      	cmp	r3, #128	; 0x80
 800328a:	d016      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x186>
 800328c:	2b80      	cmp	r3, #128	; 0x80
 800328e:	d81d      	bhi.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003294:	2b40      	cmp	r3, #64	; 0x40
 8003296:	d007      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003298:	e018      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800329a:	4b5e      	ldr	r3, [pc, #376]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	4a5d      	ldr	r2, [pc, #372]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80032a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80032a6:	e019      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3304      	adds	r3, #4
 80032ac:	2100      	movs	r1, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	f001 f90a 	bl	80044c8 <RCCEx_PLL2_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80032b8:	e010      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3324      	adds	r3, #36	; 0x24
 80032be:	2100      	movs	r1, #0
 80032c0:	4618      	mov	r0, r3
 80032c2:	f001 f9b3 	bl	800462c <RCCEx_PLL3_Config>
 80032c6:	4603      	mov	r3, r0
 80032c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80032ca:	e007      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	75fb      	strb	r3, [r7, #23]
      break;
 80032d0:	e004      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80032d2:	bf00      	nop
 80032d4:	e002      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80032d6:	bf00      	nop
 80032d8:	e000      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80032da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032dc:	7dfb      	ldrb	r3, [r7, #23]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80032e2:	4b4c      	ldr	r3, [pc, #304]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80032e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ee:	4949      	ldr	r1, [pc, #292]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	650b      	str	r3, [r1, #80]	; 0x50
 80032f4:	e001      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f6:	7dfb      	ldrb	r3, [r7, #23]
 80032f8:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003302:	2b00      	cmp	r3, #0
 8003304:	d04f      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800330e:	d036      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003310:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003314:	d830      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800331a:	d032      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800331c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003320:	d82a      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003322:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003326:	d02e      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003328:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800332c:	d824      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800332e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003332:	d018      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003338:	d81e      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800333e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003342:	d007      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003344:	e018      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003346:	4b33      	ldr	r3, [pc, #204]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	4a32      	ldr	r2, [pc, #200]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800334c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003350:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003352:	e019      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	2100      	movs	r1, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f001 f8b4 	bl	80044c8 <RCCEx_PLL2_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003364:	e010      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3324      	adds	r3, #36	; 0x24
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f001 f95d 	bl	800462c <RCCEx_PLL3_Config>
 8003372:	4603      	mov	r3, r0
 8003374:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003376:	e007      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	75fb      	strb	r3, [r7, #23]
      break;
 800337c:	e004      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800337e:	bf00      	nop
 8003380:	e002      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003382:	bf00      	nop
 8003384:	e000      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003386:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800338e:	4b21      	ldr	r3, [pc, #132]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003392:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339a:	491e      	ldr	r1, [pc, #120]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800339c:	4313      	orrs	r3, r2
 800339e:	650b      	str	r3, [r1, #80]	; 0x50
 80033a0:	e001      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d034      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b6:	2b30      	cmp	r3, #48	; 0x30
 80033b8:	d01c      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80033ba:	2b30      	cmp	r3, #48	; 0x30
 80033bc:	d817      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d00c      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d813      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d016      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d10f      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ce:	4b11      	ldr	r3, [pc, #68]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	4a10      	ldr	r2, [pc, #64]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80033da:	e00e      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3304      	adds	r3, #4
 80033e0:	2102      	movs	r1, #2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f001 f870 	bl	80044c8 <RCCEx_PLL2_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80033ec:	e005      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	75fb      	strb	r3, [r7, #23]
      break;
 80033f2:	e002      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80033f4:	bf00      	nop
 80033f6:	e000      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80033f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10b      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003400:	4b04      	ldr	r3, [pc, #16]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003404:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800340c:	4901      	ldr	r1, [pc, #4]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800340e:	4313      	orrs	r3, r2
 8003410:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003412:	e003      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003414:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d047      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003430:	d030      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003432:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003436:	d82a      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003438:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800343c:	d02c      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800343e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003442:	d824      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d018      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x348>
 800344a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800344e:	d81e      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003458:	d007      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800345a:	e018      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800345c:	4bb0      	ldr	r3, [pc, #704]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	4aaf      	ldr	r2, [pc, #700]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003466:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003468:	e017      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f001 f829 	bl	80044c8 <RCCEx_PLL2_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800347a:	e00e      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3324      	adds	r3, #36	; 0x24
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f001 f8d2 	bl	800462c <RCCEx_PLL3_Config>
 8003488:	4603      	mov	r3, r0
 800348a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800348c:	e005      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	75fb      	strb	r3, [r7, #23]
      break;
 8003492:	e002      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003494:	bf00      	nop
 8003496:	e000      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003498:	bf00      	nop
    }

    if(ret == HAL_OK)
 800349a:	7dfb      	ldrb	r3, [r7, #23]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d109      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80034a0:	4b9f      	ldr	r3, [pc, #636]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80034a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ac:	499c      	ldr	r1, [pc, #624]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	650b      	str	r3, [r1, #80]	; 0x50
 80034b2:	e001      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
 80034b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d049      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034cc:	d02e      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80034ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034d2:	d828      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80034d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034d8:	d02a      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80034da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034de:	d822      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80034e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034e4:	d026      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80034e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034ea:	d81c      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80034ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034f0:	d010      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80034f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034f6:	d816      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01d      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80034fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003500:	d111      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3304      	adds	r3, #4
 8003506:	2101      	movs	r1, #1
 8003508:	4618      	mov	r0, r3
 800350a:	f000 ffdd 	bl	80044c8 <RCCEx_PLL2_Config>
 800350e:	4603      	mov	r3, r0
 8003510:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003512:	e012      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3324      	adds	r3, #36	; 0x24
 8003518:	2101      	movs	r1, #1
 800351a:	4618      	mov	r0, r3
 800351c:	f001 f886 	bl	800462c <RCCEx_PLL3_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003524:	e009      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
      break;
 800352a:	e006      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800352c:	bf00      	nop
 800352e:	e004      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003530:	bf00      	nop
 8003532:	e002      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003534:	bf00      	nop
 8003536:	e000      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800353a:	7dfb      	ldrb	r3, [r7, #23]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d109      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003540:	4b77      	ldr	r3, [pc, #476]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003544:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800354c:	4974      	ldr	r1, [pc, #464]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800354e:	4313      	orrs	r3, r2
 8003550:	650b      	str	r3, [r1, #80]	; 0x50
 8003552:	e001      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003554:	7dfb      	ldrb	r3, [r7, #23]
 8003556:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d053      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800356a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800356e:	d034      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003570:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003574:	d82e      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003576:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800357a:	d030      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800357c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003580:	d828      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003586:	d02c      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358c:	d822      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800358e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003592:	d028      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003594:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003598:	d81c      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800359a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800359e:	d010      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80035a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035a4:	d816      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d01f      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80035aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ae:	d111      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	2101      	movs	r1, #1
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 ff86 	bl	80044c8 <RCCEx_PLL2_Config>
 80035bc:	4603      	mov	r3, r0
 80035be:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80035c0:	e014      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3324      	adds	r3, #36	; 0x24
 80035c6:	2101      	movs	r1, #1
 80035c8:	4618      	mov	r0, r3
 80035ca:	f001 f82f 	bl	800462c <RCCEx_PLL3_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80035d2:	e00b      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	75fb      	strb	r3, [r7, #23]
      break;
 80035d8:	e008      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80035da:	bf00      	nop
 80035dc:	e006      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80035de:	bf00      	nop
 80035e0:	e004      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80035e2:	bf00      	nop
 80035e4:	e002      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80035e6:	bf00      	nop
 80035e8:	e000      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80035ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ec:	7dfb      	ldrb	r3, [r7, #23]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10a      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80035f2:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80035f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003600:	4947      	ldr	r1, [pc, #284]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003602:	4313      	orrs	r3, r2
 8003604:	658b      	str	r3, [r1, #88]	; 0x58
 8003606:	e001      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003608:	7dfb      	ldrb	r3, [r7, #23]
 800360a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d02f      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003620:	d00e      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003626:	d814      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d015      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800362c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003630:	d10f      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003632:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	4a3a      	ldr	r2, [pc, #232]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800363e:	e00c      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3304      	adds	r3, #4
 8003644:	2101      	movs	r1, #1
 8003646:	4618      	mov	r0, r3
 8003648:	f000 ff3e 	bl	80044c8 <RCCEx_PLL2_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003650:	e003      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	75fb      	strb	r3, [r7, #23]
      break;
 8003656:	e000      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003658:	bf00      	nop
    }

    if(ret == HAL_OK)
 800365a:	7dfb      	ldrb	r3, [r7, #23]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d109      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003660:	4b2f      	ldr	r3, [pc, #188]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003664:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366c:	492c      	ldr	r1, [pc, #176]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800366e:	4313      	orrs	r3, r2
 8003670:	650b      	str	r3, [r1, #80]	; 0x50
 8003672:	e001      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003674:	7dfb      	ldrb	r3, [r7, #23]
 8003676:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d032      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	2b03      	cmp	r3, #3
 800368a:	d81b      	bhi.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x590>
 800368c:	a201      	add	r2, pc, #4	; (adr r2, 8003694 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800368e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003692:	bf00      	nop
 8003694:	080036cb 	.word	0x080036cb
 8003698:	080036a5 	.word	0x080036a5
 800369c:	080036b3 	.word	0x080036b3
 80036a0:	080036cb 	.word	0x080036cb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a4:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	4a1d      	ldr	r2, [pc, #116]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80036aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80036b0:	e00c      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3304      	adds	r3, #4
 80036b6:	2102      	movs	r1, #2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 ff05 	bl	80044c8 <RCCEx_PLL2_Config>
 80036be:	4603      	mov	r3, r0
 80036c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80036c2:	e003      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	75fb      	strb	r3, [r7, #23]
      break;
 80036c8:	e000      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 80036ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80036d2:	4b13      	ldr	r3, [pc, #76]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80036d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d6:	f023 0203 	bic.w	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036de:	4910      	ldr	r1, [pc, #64]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80036e4:	e001      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 808a 	beq.w	800380c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f8:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a09      	ldr	r2, [pc, #36]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80036fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003702:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003704:	f7fd fcb8 	bl	8001078 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800370a:	e00d      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370c:	f7fd fcb4 	bl	8001078 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	; 0x64
 8003718:	d906      	bls.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	75fb      	strb	r3, [r7, #23]
        break;
 800371e:	e009      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8003720:	58024400 	.word	0x58024400
 8003724:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003728:	4bba      	ldr	r3, [pc, #744]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0eb      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8003734:	7dfb      	ldrb	r3, [r7, #23]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d166      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800373a:	4bb7      	ldr	r3, [pc, #732]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800373c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003744:	4053      	eors	r3, r2
 8003746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374a:	2b00      	cmp	r3, #0
 800374c:	d013      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800374e:	4bb2      	ldr	r3, [pc, #712]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003756:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003758:	4baf      	ldr	r3, [pc, #700]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800375a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375c:	4aae      	ldr	r2, [pc, #696]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800375e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003762:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003764:	4bac      	ldr	r3, [pc, #688]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	4aab      	ldr	r2, [pc, #684]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800376a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003770:	4aa9      	ldr	r2, [pc, #676]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800377c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003780:	d115      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003782:	f7fd fc79 	bl	8001078 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003788:	e00b      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378a:	f7fd fc75 	bl	8001078 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	; 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d902      	bls.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	75fb      	strb	r3, [r7, #23]
            break;
 80037a0:	e005      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037a2:	4b9d      	ldr	r3, [pc, #628]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0ed      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d126      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037c2:	d10d      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80037c4:	4b94      	ldr	r3, [pc, #592]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037d2:	0919      	lsrs	r1, r3, #4
 80037d4:	4b91      	ldr	r3, [pc, #580]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80037d6:	400b      	ands	r3, r1
 80037d8:	498f      	ldr	r1, [pc, #572]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	610b      	str	r3, [r1, #16]
 80037de:	e005      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80037e0:	4b8d      	ldr	r3, [pc, #564]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	4a8c      	ldr	r2, [pc, #560]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80037ea:	6113      	str	r3, [r2, #16]
 80037ec:	4b8a      	ldr	r3, [pc, #552]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fa:	4987      	ldr	r1, [pc, #540]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	670b      	str	r3, [r1, #112]	; 0x70
 8003800:	e004      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003802:	7dfb      	ldrb	r3, [r7, #23]
 8003804:	75bb      	strb	r3, [r7, #22]
 8003806:	e001      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003808:	7dfb      	ldrb	r3, [r7, #23]
 800380a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d07f      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800381e:	2b28      	cmp	r3, #40	; 0x28
 8003820:	d866      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003822:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003828:	080038f7 	.word	0x080038f7
 800382c:	080038f1 	.word	0x080038f1
 8003830:	080038f1 	.word	0x080038f1
 8003834:	080038f1 	.word	0x080038f1
 8003838:	080038f1 	.word	0x080038f1
 800383c:	080038f1 	.word	0x080038f1
 8003840:	080038f1 	.word	0x080038f1
 8003844:	080038f1 	.word	0x080038f1
 8003848:	080038cd 	.word	0x080038cd
 800384c:	080038f1 	.word	0x080038f1
 8003850:	080038f1 	.word	0x080038f1
 8003854:	080038f1 	.word	0x080038f1
 8003858:	080038f1 	.word	0x080038f1
 800385c:	080038f1 	.word	0x080038f1
 8003860:	080038f1 	.word	0x080038f1
 8003864:	080038f1 	.word	0x080038f1
 8003868:	080038df 	.word	0x080038df
 800386c:	080038f1 	.word	0x080038f1
 8003870:	080038f1 	.word	0x080038f1
 8003874:	080038f1 	.word	0x080038f1
 8003878:	080038f1 	.word	0x080038f1
 800387c:	080038f1 	.word	0x080038f1
 8003880:	080038f1 	.word	0x080038f1
 8003884:	080038f1 	.word	0x080038f1
 8003888:	080038f7 	.word	0x080038f7
 800388c:	080038f1 	.word	0x080038f1
 8003890:	080038f1 	.word	0x080038f1
 8003894:	080038f1 	.word	0x080038f1
 8003898:	080038f1 	.word	0x080038f1
 800389c:	080038f1 	.word	0x080038f1
 80038a0:	080038f1 	.word	0x080038f1
 80038a4:	080038f1 	.word	0x080038f1
 80038a8:	080038f7 	.word	0x080038f7
 80038ac:	080038f1 	.word	0x080038f1
 80038b0:	080038f1 	.word	0x080038f1
 80038b4:	080038f1 	.word	0x080038f1
 80038b8:	080038f1 	.word	0x080038f1
 80038bc:	080038f1 	.word	0x080038f1
 80038c0:	080038f1 	.word	0x080038f1
 80038c4:	080038f1 	.word	0x080038f1
 80038c8:	080038f7 	.word	0x080038f7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3304      	adds	r3, #4
 80038d0:	2101      	movs	r1, #1
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fdf8 	bl	80044c8 <RCCEx_PLL2_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80038dc:	e00c      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3324      	adds	r3, #36	; 0x24
 80038e2:	2101      	movs	r1, #1
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fea1 	bl	800462c <RCCEx_PLL3_Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80038ee:	e003      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	75fb      	strb	r3, [r7, #23]
      break;
 80038f4:	e000      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80038f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10a      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80038fe:	4b46      	ldr	r3, [pc, #280]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003902:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800390c:	4942      	ldr	r1, [pc, #264]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800390e:	4313      	orrs	r3, r2
 8003910:	654b      	str	r3, [r1, #84]	; 0x54
 8003912:	e001      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003914:	7dfb      	ldrb	r3, [r7, #23]
 8003916:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d038      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003928:	2b05      	cmp	r3, #5
 800392a:	d821      	bhi.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800392c:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003932:	bf00      	nop
 8003934:	08003977 	.word	0x08003977
 8003938:	0800394d 	.word	0x0800394d
 800393c:	0800395f 	.word	0x0800395f
 8003940:	08003977 	.word	0x08003977
 8003944:	08003977 	.word	0x08003977
 8003948:	08003977 	.word	0x08003977
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3304      	adds	r3, #4
 8003950:	2101      	movs	r1, #1
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fdb8 	bl	80044c8 <RCCEx_PLL2_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800395c:	e00c      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3324      	adds	r3, #36	; 0x24
 8003962:	2101      	movs	r1, #1
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fe61 	bl	800462c <RCCEx_PLL3_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800396e:	e003      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	75fb      	strb	r3, [r7, #23]
      break;
 8003974:	e000      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003978:	7dfb      	ldrb	r3, [r7, #23]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800397e:	4b26      	ldr	r3, [pc, #152]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	f023 0207 	bic.w	r2, r3, #7
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800398a:	4923      	ldr	r1, [pc, #140]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800398c:	4313      	orrs	r3, r2
 800398e:	654b      	str	r3, [r1, #84]	; 0x54
 8003990:	e001      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003992:	7dfb      	ldrb	r3, [r7, #23]
 8003994:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d040      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039a8:	2b05      	cmp	r3, #5
 80039aa:	d821      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039f7 	.word	0x080039f7
 80039b8:	080039cd 	.word	0x080039cd
 80039bc:	080039df 	.word	0x080039df
 80039c0:	080039f7 	.word	0x080039f7
 80039c4:	080039f7 	.word	0x080039f7
 80039c8:	080039f7 	.word	0x080039f7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3304      	adds	r3, #4
 80039d0:	2101      	movs	r1, #1
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fd78 	bl	80044c8 <RCCEx_PLL2_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80039dc:	e00c      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3324      	adds	r3, #36	; 0x24
 80039e2:	2101      	movs	r1, #1
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fe21 	bl	800462c <RCCEx_PLL3_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80039ee:	e003      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	75fb      	strb	r3, [r7, #23]
      break;
 80039f4:	e000      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80039f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d110      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039fe:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	f023 0207 	bic.w	r2, r3, #7
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a0c:	4902      	ldr	r1, [pc, #8]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	658b      	str	r3, [r1, #88]	; 0x58
 8003a12:	e007      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003a14:	58024800 	.word	0x58024800
 8003a18:	58024400 	.word	0x58024400
 8003a1c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a20:	7dfb      	ldrb	r3, [r7, #23]
 8003a22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d04b      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a3a:	d02e      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a40:	d828      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a46:	d02a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4c:	d822      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003a4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a52:	d026      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003a54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a58:	d81c      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a5e:	d010      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a64:	d816      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d01d      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003a6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a6e:	d111      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3304      	adds	r3, #4
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fd26 	bl	80044c8 <RCCEx_PLL2_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003a80:	e012      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3324      	adds	r3, #36	; 0x24
 8003a86:	2102      	movs	r1, #2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fdcf 	bl	800462c <RCCEx_PLL3_Config>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003a92:	e009      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	75fb      	strb	r3, [r7, #23]
      break;
 8003a98:	e006      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003a9a:	bf00      	nop
 8003a9c:	e004      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003a9e:	bf00      	nop
 8003aa0:	e002      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e000      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003aa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aae:	4bb3      	ldr	r3, [pc, #716]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003abc:	49af      	ldr	r1, [pc, #700]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	654b      	str	r3, [r1, #84]	; 0x54
 8003ac2:	e001      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
 8003ac6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d04b      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ada:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ade:	d02e      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003ae0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ae4:	d828      	bhi.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aea:	d02a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af0:	d822      	bhi.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003af2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003af6:	d026      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003af8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003afc:	d81c      	bhi.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b02:	d010      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b08:	d816      	bhi.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d01d      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b12:	d111      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3304      	adds	r3, #4
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fcd4 	bl	80044c8 <RCCEx_PLL2_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b24:	e012      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3324      	adds	r3, #36	; 0x24
 8003b2a:	2102      	movs	r1, #2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fd7d 	bl	800462c <RCCEx_PLL3_Config>
 8003b32:	4603      	mov	r3, r0
 8003b34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b36:	e009      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b3c:	e006      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003b3e:	bf00      	nop
 8003b40:	e004      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003b42:	bf00      	nop
 8003b44:	e002      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003b46:	bf00      	nop
 8003b48:	e000      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10a      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b52:	4b8a      	ldr	r3, [pc, #552]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b56:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b60:	4986      	ldr	r1, [pc, #536]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	658b      	str	r3, [r1, #88]	; 0x58
 8003b66:	e001      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b68:	7dfb      	ldrb	r3, [r7, #23]
 8003b6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d04b      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b7e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b82:	d02e      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003b84:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b88:	d828      	bhi.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b8e:	d02a      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b94:	d822      	bhi.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003b96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b9a:	d026      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003b9c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ba0:	d81c      	bhi.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003ba2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba6:	d010      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003ba8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bac:	d816      	bhi.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d01d      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb6:	d111      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3304      	adds	r3, #4
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fc82 	bl	80044c8 <RCCEx_PLL2_Config>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003bc8:	e012      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3324      	adds	r3, #36	; 0x24
 8003bce:	2102      	movs	r1, #2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 fd2b 	bl	800462c <RCCEx_PLL3_Config>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003bda:	e009      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	75fb      	strb	r3, [r7, #23]
      break;
 8003be0:	e006      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003be2:	bf00      	nop
 8003be4:	e004      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003be6:	bf00      	nop
 8003be8:	e002      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003bea:	bf00      	nop
 8003bec:	e000      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10a      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003bf6:	4b61      	ldr	r3, [pc, #388]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c04:	495d      	ldr	r1, [pc, #372]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	658b      	str	r3, [r1, #88]	; 0x58
 8003c0a:	e001      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0c:	7dfb      	ldrb	r3, [r7, #23]
 8003c0e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c26:	d10a      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3324      	adds	r3, #36	; 0x24
 8003c2c:	2102      	movs	r1, #2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fcfc 	bl	800462c <RCCEx_PLL3_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c3e:	4b4f      	ldr	r3, [pc, #316]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4c:	494b      	ldr	r1, [pc, #300]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c68:	d10a      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3324      	adds	r3, #36	; 0x24
 8003c6e:	2102      	movs	r1, #2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fcdb 	bl	800462c <RCCEx_PLL3_Config>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c80:	4b3e      	ldr	r3, [pc, #248]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c8e:	493b      	ldr	r1, [pc, #236]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d034      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ca6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003caa:	d01d      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cb0:	d817      	bhi.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cba:	d009      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003cbc:	e011      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fbff 	bl	80044c8 <RCCEx_PLL2_Config>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003cce:	e00c      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3324      	adds	r3, #36	; 0x24
 8003cd4:	2102      	movs	r1, #2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fca8 	bl	800462c <RCCEx_PLL3_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003ce0:	e003      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce6:	e000      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10a      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cf0:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003cfe:	491f      	ldr	r1, [pc, #124]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	658b      	str	r3, [r1, #88]	; 0x58
 8003d04:	e001      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
 8003d08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d036      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d20:	d01c      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003d22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d26:	d816      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d2c:	d003      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003d2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d32:	d007      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003d34:	e00f      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d36:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	4a10      	ldr	r2, [pc, #64]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d42:	e00c      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3324      	adds	r3, #36	; 0x24
 8003d48:	2101      	movs	r1, #1
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fc6e 	bl	800462c <RCCEx_PLL3_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d54:	e003      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	75fb      	strb	r3, [r7, #23]
      break;
 8003d5a:	e000      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10d      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d72:	4902      	ldr	r1, [pc, #8]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	654b      	str	r3, [r1, #84]	; 0x54
 8003d78:	e004      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8003d7a:	bf00      	nop
 8003d7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
 8003d82:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d029      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9c:	d007      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8003d9e:	e00f      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da0:	4b69      	ldr	r3, [pc, #420]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	4a68      	ldr	r2, [pc, #416]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003daa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003dac:	e00b      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3304      	adds	r3, #4
 8003db2:	2102      	movs	r1, #2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fb87 	bl	80044c8 <RCCEx_PLL2_Config>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003dbe:	e002      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d109      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003dcc:	4b5e      	ldr	r3, [pc, #376]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd8:	495b      	ldr	r1, [pc, #364]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003dde:	e001      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de0:	7dfb      	ldrb	r3, [r7, #23]
 8003de2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3324      	adds	r3, #36	; 0x24
 8003df4:	2102      	movs	r1, #2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fc18 	bl	800462c <RCCEx_PLL3_Config>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d032      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e1c:	d017      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8003e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e22:	d811      	bhi.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e28:	d013      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8003e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e2e:	d80b      	bhi.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d010      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8003e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e38:	d106      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e3a:	4b43      	ldr	r3, [pc, #268]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	4a42      	ldr	r2, [pc, #264]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003e46:	e007      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e4c:	e004      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003e4e:	bf00      	nop
 8003e50:	e002      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003e52:	bf00      	nop
 8003e54:	e000      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e58:	7dfb      	ldrb	r3, [r7, #23]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10a      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e5e:	4b3a      	ldr	r3, [pc, #232]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e6c:	4936      	ldr	r1, [pc, #216]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	654b      	str	r3, [r1, #84]	; 0x54
 8003e72:	e001      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
 8003e76:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e84:	4b30      	ldr	r3, [pc, #192]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e90:	492d      	ldr	r1, [pc, #180]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ea2:	4b29      	ldr	r3, [pc, #164]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eae:	4926      	ldr	r1, [pc, #152]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003ec0:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	491e      	ldr	r1, [pc, #120]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00d      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ede:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	4a19      	ldr	r2, [pc, #100]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003ee4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ee8:	6113      	str	r3, [r2, #16]
 8003eea:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003eec:	691a      	ldr	r2, [r3, #16]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ef4:	4914      	ldr	r1, [pc, #80]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	da08      	bge.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f02:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0e:	490e      	ldr	r1, [pc, #56]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d009      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f20:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	4906      	ldr	r1, [pc, #24]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003f34:	7dbb      	ldrb	r3, [r7, #22]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	e000      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	58024400 	.word	0x58024400

08003f4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003f50:	f7ff f852 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 8003f54:	4602      	mov	r2, r0
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	091b      	lsrs	r3, r3, #4
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	4904      	ldr	r1, [pc, #16]	; (8003f74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003f62:	5ccb      	ldrb	r3, [r1, r3]
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	58024400 	.word	0x58024400
 8003f74:	0800a9e4 	.word	0x0800a9e4

08003f78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b089      	sub	sp, #36	; 0x24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f80:	4ba1      	ldr	r3, [pc, #644]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003f8a:	4b9f      	ldr	r3, [pc, #636]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	0b1b      	lsrs	r3, r3, #12
 8003f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f96:	4b9c      	ldr	r3, [pc, #624]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	091b      	lsrs	r3, r3, #4
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003fa2:	4b99      	ldr	r3, [pc, #612]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa6:	08db      	lsrs	r3, r3, #3
 8003fa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	fb02 f303 	mul.w	r3, r2, r3
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8111 	beq.w	80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	f000 8083 	beq.w	80040d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	f200 80a1 	bhi.w	8004118 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d056      	beq.n	8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003fe2:	e099      	b.n	8004118 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fe4:	4b88      	ldr	r3, [pc, #544]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d02d      	beq.n	800404c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ff0:	4b85      	ldr	r3, [pc, #532]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	08db      	lsrs	r3, r3, #3
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	4a84      	ldr	r2, [pc, #528]	; (800420c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8004000:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	ee07 3a90 	vmov	s15, r3
 8004008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800401a:	4b7b      	ldr	r3, [pc, #492]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800402a:	ed97 6a03 	vldr	s12, [r7, #12]
 800402e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800403a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800403e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004046:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800404a:	e087      	b.n	800415c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004056:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004214 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800405a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800405e:	4b6a      	ldr	r3, [pc, #424]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800406e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004072:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800407a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800407e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800408a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800408e:	e065      	b.n	800415c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800409e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040a2:	4b59      	ldr	r3, [pc, #356]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040d2:	e043      	b.n	800415c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800421c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80040e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040e6:	4b48      	ldr	r3, [pc, #288]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80040fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800410a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800410e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004112:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004116:	e021      	b.n	800415c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004122:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800412a:	4b37      	ldr	r3, [pc, #220]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800413a:	ed97 6a03 	vldr	s12, [r7, #12]
 800413e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800414a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800414e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004156:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800415a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800415c:	4b2a      	ldr	r3, [pc, #168]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004160:	0a5b      	lsrs	r3, r3, #9
 8004162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004172:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004176:	edd7 6a07 	vldr	s13, [r7, #28]
 800417a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800417e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004182:	ee17 2a90 	vmov	r2, s15
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800418a:	4b1f      	ldr	r3, [pc, #124]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	0c1b      	lsrs	r3, r3, #16
 8004190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004194:	ee07 3a90 	vmov	s15, r3
 8004198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80041a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041b0:	ee17 2a90 	vmov	r2, s15
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80041b8:	4b13      	ldr	r3, [pc, #76]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	0e1b      	lsrs	r3, r3, #24
 80041be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80041d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041de:	ee17 2a90 	vmov	r2, s15
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80041e6:	e008      	b.n	80041fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	609a      	str	r2, [r3, #8]
}
 80041fa:	bf00      	nop
 80041fc:	3724      	adds	r7, #36	; 0x24
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	58024400 	.word	0x58024400
 800420c:	03d09000 	.word	0x03d09000
 8004210:	46000000 	.word	0x46000000
 8004214:	4c742400 	.word	0x4c742400
 8004218:	4a742400 	.word	0x4a742400
 800421c:	4af42400 	.word	0x4af42400

08004220 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004220:	b480      	push	{r7}
 8004222:	b089      	sub	sp, #36	; 0x24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004228:	4ba1      	ldr	r3, [pc, #644]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004232:	4b9f      	ldr	r3, [pc, #636]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	0d1b      	lsrs	r3, r3, #20
 8004238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800423c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800423e:	4b9c      	ldr	r3, [pc, #624]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	0a1b      	lsrs	r3, r3, #8
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800424a:	4b99      	ldr	r3, [pc, #612]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	08db      	lsrs	r3, r3, #3
 8004250:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	fb02 f303 	mul.w	r3, r2, r3
 800425a:	ee07 3a90 	vmov	s15, r3
 800425e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004262:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 8111 	beq.w	8004490 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	2b02      	cmp	r3, #2
 8004272:	f000 8083 	beq.w	800437c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b02      	cmp	r3, #2
 800427a:	f200 80a1 	bhi.w	80043c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d056      	beq.n	8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800428a:	e099      	b.n	80043c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800428c:	4b88      	ldr	r3, [pc, #544]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b00      	cmp	r3, #0
 8004296:	d02d      	beq.n	80042f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004298:	4b85      	ldr	r3, [pc, #532]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	08db      	lsrs	r3, r3, #3
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	4a84      	ldr	r2, [pc, #528]	; (80044b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
 80042a8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	ee07 3a90 	vmov	s15, r3
 80042b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042c2:	4b7b      	ldr	r3, [pc, #492]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80044b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80042f2:	e087      	b.n	8004404 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80044bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004306:	4b6a      	ldr	r3, [pc, #424]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430e:	ee07 3a90 	vmov	s15, r3
 8004312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004316:	ed97 6a03 	vldr	s12, [r7, #12]
 800431a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80044b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800431e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800432a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800432e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004332:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004336:	e065      	b.n	8004404 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004342:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80044c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800434a:	4b59      	ldr	r3, [pc, #356]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800435a:	ed97 6a03 	vldr	s12, [r7, #12]
 800435e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80044b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800436a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800436e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004376:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800437a:	e043      	b.n	8004404 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004386:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80044c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800438a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800438e:	4b48      	ldr	r3, [pc, #288]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439e:	ed97 6a03 	vldr	s12, [r7, #12]
 80043a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80044b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043be:	e021      	b.n	8004404 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80044c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043d2:	4b37      	ldr	r3, [pc, #220]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80044b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004402:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004404:	4b2a      	ldr	r3, [pc, #168]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	0a5b      	lsrs	r3, r3, #9
 800440a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800441a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800441e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800442a:	ee17 2a90 	vmov	r2, s15
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004432:	4b1f      	ldr	r3, [pc, #124]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	0c1b      	lsrs	r3, r3, #16
 8004438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800443c:	ee07 3a90 	vmov	s15, r3
 8004440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004448:	ee37 7a87 	vadd.f32	s14, s15, s14
 800444c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004458:	ee17 2a90 	vmov	r2, s15
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004460:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	0e1b      	lsrs	r3, r3, #24
 8004466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004476:	ee37 7a87 	vadd.f32	s14, s15, s14
 800447a:	edd7 6a07 	vldr	s13, [r7, #28]
 800447e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004486:	ee17 2a90 	vmov	r2, s15
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800448e:	e008      	b.n	80044a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	609a      	str	r2, [r3, #8]
}
 80044a2:	bf00      	nop
 80044a4:	3724      	adds	r7, #36	; 0x24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	58024400 	.word	0x58024400
 80044b4:	03d09000 	.word	0x03d09000
 80044b8:	46000000 	.word	0x46000000
 80044bc:	4c742400 	.word	0x4c742400
 80044c0:	4a742400 	.word	0x4a742400
 80044c4:	4af42400 	.word	0x4af42400

080044c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044d6:	4b53      	ldr	r3, [pc, #332]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80044d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d101      	bne.n	80044e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e099      	b.n	800461a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80044e6:	4b4f      	ldr	r3, [pc, #316]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a4e      	ldr	r2, [pc, #312]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80044ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f2:	f7fc fdc1 	bl	8001078 <HAL_GetTick>
 80044f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044f8:	e008      	b.n	800450c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80044fa:	f7fc fdbd 	bl	8001078 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e086      	b.n	800461a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800450c:	4b45      	ldr	r3, [pc, #276]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1f0      	bne.n	80044fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004518:	4b42      	ldr	r3, [pc, #264]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	031b      	lsls	r3, r3, #12
 8004526:	493f      	ldr	r1, [pc, #252]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 8004528:	4313      	orrs	r3, r2
 800452a:	628b      	str	r3, [r1, #40]	; 0x28
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	3b01      	subs	r3, #1
 8004532:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	3b01      	subs	r3, #1
 800453c:	025b      	lsls	r3, r3, #9
 800453e:	b29b      	uxth	r3, r3
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	3b01      	subs	r3, #1
 8004548:	041b      	lsls	r3, r3, #16
 800454a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	3b01      	subs	r3, #1
 8004556:	061b      	lsls	r3, r3, #24
 8004558:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800455c:	4931      	ldr	r1, [pc, #196]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 800455e:	4313      	orrs	r3, r2
 8004560:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004562:	4b30      	ldr	r3, [pc, #192]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	492d      	ldr	r1, [pc, #180]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 8004570:	4313      	orrs	r3, r2
 8004572:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004574:	4b2b      	ldr	r3, [pc, #172]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	f023 0220 	bic.w	r2, r3, #32
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	4928      	ldr	r1, [pc, #160]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 8004582:	4313      	orrs	r3, r2
 8004584:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004586:	4b27      	ldr	r3, [pc, #156]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	4a26      	ldr	r2, [pc, #152]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 800458c:	f023 0310 	bic.w	r3, r3, #16
 8004590:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004592:	4b24      	ldr	r3, [pc, #144]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 8004594:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004596:	4b24      	ldr	r3, [pc, #144]	; (8004628 <RCCEx_PLL2_Config+0x160>)
 8004598:	4013      	ands	r3, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	69d2      	ldr	r2, [r2, #28]
 800459e:	00d2      	lsls	r2, r2, #3
 80045a0:	4920      	ldr	r1, [pc, #128]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80045a6:	4b1f      	ldr	r3, [pc, #124]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	4a1e      	ldr	r2, [pc, #120]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045ac:	f043 0310 	orr.w	r3, r3, #16
 80045b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d106      	bne.n	80045c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80045b8:	4b1a      	ldr	r3, [pc, #104]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	4a19      	ldr	r2, [pc, #100]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045c4:	e00f      	b.n	80045e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d106      	bne.n	80045da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80045cc:	4b15      	ldr	r3, [pc, #84]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	4a14      	ldr	r2, [pc, #80]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045d8:	e005      	b.n	80045e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	4a11      	ldr	r2, [pc, #68]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80045e6:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a0e      	ldr	r2, [pc, #56]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f2:	f7fc fd41 	bl	8001078 <HAL_GetTick>
 80045f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045f8:	e008      	b.n	800460c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80045fa:	f7fc fd3d 	bl	8001078 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e006      	b.n	800461a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004618:	7bfb      	ldrb	r3, [r7, #15]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	58024400 	.word	0x58024400
 8004628:	ffff0007 	.word	0xffff0007

0800462c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800463a:	4b53      	ldr	r3, [pc, #332]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 800463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	2b03      	cmp	r3, #3
 8004644:	d101      	bne.n	800464a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e099      	b.n	800477e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800464a:	4b4f      	ldr	r3, [pc, #316]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a4e      	ldr	r2, [pc, #312]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004656:	f7fc fd0f 	bl	8001078 <HAL_GetTick>
 800465a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800465c:	e008      	b.n	8004670 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800465e:	f7fc fd0b 	bl	8001078 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e086      	b.n	800477e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004670:	4b45      	ldr	r3, [pc, #276]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f0      	bne.n	800465e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800467c:	4b42      	ldr	r3, [pc, #264]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	051b      	lsls	r3, r3, #20
 800468a:	493f      	ldr	r1, [pc, #252]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 800468c:	4313      	orrs	r3, r2
 800468e:	628b      	str	r3, [r1, #40]	; 0x28
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	3b01      	subs	r3, #1
 8004696:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	3b01      	subs	r3, #1
 80046a0:	025b      	lsls	r3, r3, #9
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	041b      	lsls	r3, r3, #16
 80046ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	061b      	lsls	r3, r3, #24
 80046bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046c0:	4931      	ldr	r1, [pc, #196]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80046c6:	4b30      	ldr	r3, [pc, #192]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	492d      	ldr	r1, [pc, #180]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80046d8:	4b2b      	ldr	r3, [pc, #172]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	4928      	ldr	r1, [pc, #160]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80046ea:	4b27      	ldr	r3, [pc, #156]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	4a26      	ldr	r2, [pc, #152]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 80046f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80046f6:	4b24      	ldr	r3, [pc, #144]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 80046f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046fa:	4b24      	ldr	r3, [pc, #144]	; (800478c <RCCEx_PLL3_Config+0x160>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	69d2      	ldr	r2, [r2, #28]
 8004702:	00d2      	lsls	r2, r2, #3
 8004704:	4920      	ldr	r1, [pc, #128]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004706:	4313      	orrs	r3, r2
 8004708:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800470a:	4b1f      	ldr	r3, [pc, #124]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	4a1e      	ldr	r2, [pc, #120]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004714:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d106      	bne.n	800472a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800471c:	4b1a      	ldr	r3, [pc, #104]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	4a19      	ldr	r2, [pc, #100]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004722:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004726:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004728:	e00f      	b.n	800474a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d106      	bne.n	800473e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004730:	4b15      	ldr	r3, [pc, #84]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	4a14      	ldr	r2, [pc, #80]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004736:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800473a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800473c:	e005      	b.n	800474a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800473e:	4b12      	ldr	r3, [pc, #72]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	4a11      	ldr	r2, [pc, #68]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004744:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004748:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800474a:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a0e      	ldr	r2, [pc, #56]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004756:	f7fc fc8f 	bl	8001078 <HAL_GetTick>
 800475a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800475c:	e008      	b.n	8004770 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800475e:	f7fc fc8b 	bl	8001078 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e006      	b.n	800477e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004770:	4b05      	ldr	r3, [pc, #20]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f0      	beq.n	800475e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800477c:	7bfb      	ldrb	r3, [r7, #15]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	58024400 	.word	0x58024400
 800478c:	ffff0007 	.word	0xffff0007

08004790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e049      	b.n	8004836 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f841 	bl	800483e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3304      	adds	r3, #4
 80047cc:	4619      	mov	r1, r3
 80047ce:	4610      	mov	r0, r2
 80047d0:	f000 fa00 	bl	8004bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
	...

08004854 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b01      	cmp	r3, #1
 8004866:	d001      	beq.n	800486c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e054      	b.n	8004916 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a26      	ldr	r2, [pc, #152]	; (8004924 <HAL_TIM_Base_Start_IT+0xd0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d022      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x80>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004896:	d01d      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x80>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a22      	ldr	r2, [pc, #136]	; (8004928 <HAL_TIM_Base_Start_IT+0xd4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d018      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x80>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a21      	ldr	r2, [pc, #132]	; (800492c <HAL_TIM_Base_Start_IT+0xd8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d013      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x80>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1f      	ldr	r2, [pc, #124]	; (8004930 <HAL_TIM_Base_Start_IT+0xdc>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00e      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x80>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1e      	ldr	r2, [pc, #120]	; (8004934 <HAL_TIM_Base_Start_IT+0xe0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d009      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x80>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1c      	ldr	r2, [pc, #112]	; (8004938 <HAL_TIM_Base_Start_IT+0xe4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x80>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1b      	ldr	r2, [pc, #108]	; (800493c <HAL_TIM_Base_Start_IT+0xe8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d115      	bne.n	8004900 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	4b19      	ldr	r3, [pc, #100]	; (8004940 <HAL_TIM_Base_Start_IT+0xec>)
 80048dc:	4013      	ands	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b06      	cmp	r3, #6
 80048e4:	d015      	beq.n	8004912 <HAL_TIM_Base_Start_IT+0xbe>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ec:	d011      	beq.n	8004912 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0201 	orr.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fe:	e008      	b.n	8004912 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	e000      	b.n	8004914 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004912:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40010000 	.word	0x40010000
 8004928:	40000400 	.word	0x40000400
 800492c:	40000800 	.word	0x40000800
 8004930:	40000c00 	.word	0x40000c00
 8004934:	40010400 	.word	0x40010400
 8004938:	40001800 	.word	0x40001800
 800493c:	40014000 	.word	0x40014000
 8004940:	00010007 	.word	0x00010007

08004944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b02      	cmp	r3, #2
 8004958:	d122      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b02      	cmp	r3, #2
 8004966:	d11b      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0202 	mvn.w	r2, #2
 8004970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f905 	bl	8004b96 <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f8f7 	bl	8004b82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f908 	bl	8004baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d122      	bne.n	80049f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d11b      	bne.n	80049f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0204 	mvn.w	r2, #4
 80049c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f8db 	bl	8004b96 <HAL_TIM_IC_CaptureCallback>
 80049e0:	e005      	b.n	80049ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f8cd 	bl	8004b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f8de 	bl	8004baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d122      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d11b      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0208 	mvn.w	r2, #8
 8004a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f8b1 	bl	8004b96 <HAL_TIM_IC_CaptureCallback>
 8004a34:	e005      	b.n	8004a42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f8a3 	bl	8004b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f8b4 	bl	8004baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b10      	cmp	r3, #16
 8004a54:	d122      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b10      	cmp	r3, #16
 8004a62:	d11b      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0210 	mvn.w	r2, #16
 8004a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2208      	movs	r2, #8
 8004a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f887 	bl	8004b96 <HAL_TIM_IC_CaptureCallback>
 8004a88:	e005      	b.n	8004a96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f879 	bl	8004b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f88a 	bl	8004baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d10e      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d107      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0201 	mvn.w	r2, #1
 8004ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fc f838 	bl	8000b38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad2:	2b80      	cmp	r3, #128	; 0x80
 8004ad4:	d10e      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae0:	2b80      	cmp	r3, #128	; 0x80
 8004ae2:	d107      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f914 	bl	8004d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b02:	d10e      	bne.n	8004b22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0e:	2b80      	cmp	r3, #128	; 0x80
 8004b10:	d107      	bne.n	8004b22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f907 	bl	8004d30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	d10e      	bne.n	8004b4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3a:	2b40      	cmp	r3, #64	; 0x40
 8004b3c:	d107      	bne.n	8004b4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f838 	bl	8004bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d10e      	bne.n	8004b7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d107      	bne.n	8004b7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f06f 0220 	mvn.w	r2, #32
 8004b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f8c7 	bl	8004d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b7a:	bf00      	nop
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a40      	ldr	r2, [pc, #256]	; (8004ce8 <TIM_Base_SetConfig+0x114>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d013      	beq.n	8004c14 <TIM_Base_SetConfig+0x40>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf2:	d00f      	beq.n	8004c14 <TIM_Base_SetConfig+0x40>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a3d      	ldr	r2, [pc, #244]	; (8004cec <TIM_Base_SetConfig+0x118>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00b      	beq.n	8004c14 <TIM_Base_SetConfig+0x40>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a3c      	ldr	r2, [pc, #240]	; (8004cf0 <TIM_Base_SetConfig+0x11c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d007      	beq.n	8004c14 <TIM_Base_SetConfig+0x40>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a3b      	ldr	r2, [pc, #236]	; (8004cf4 <TIM_Base_SetConfig+0x120>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d003      	beq.n	8004c14 <TIM_Base_SetConfig+0x40>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a3a      	ldr	r2, [pc, #232]	; (8004cf8 <TIM_Base_SetConfig+0x124>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d108      	bne.n	8004c26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a2f      	ldr	r2, [pc, #188]	; (8004ce8 <TIM_Base_SetConfig+0x114>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d01f      	beq.n	8004c6e <TIM_Base_SetConfig+0x9a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c34:	d01b      	beq.n	8004c6e <TIM_Base_SetConfig+0x9a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a2c      	ldr	r2, [pc, #176]	; (8004cec <TIM_Base_SetConfig+0x118>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d017      	beq.n	8004c6e <TIM_Base_SetConfig+0x9a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2b      	ldr	r2, [pc, #172]	; (8004cf0 <TIM_Base_SetConfig+0x11c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d013      	beq.n	8004c6e <TIM_Base_SetConfig+0x9a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a2a      	ldr	r2, [pc, #168]	; (8004cf4 <TIM_Base_SetConfig+0x120>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00f      	beq.n	8004c6e <TIM_Base_SetConfig+0x9a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a29      	ldr	r2, [pc, #164]	; (8004cf8 <TIM_Base_SetConfig+0x124>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00b      	beq.n	8004c6e <TIM_Base_SetConfig+0x9a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a28      	ldr	r2, [pc, #160]	; (8004cfc <TIM_Base_SetConfig+0x128>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d007      	beq.n	8004c6e <TIM_Base_SetConfig+0x9a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a27      	ldr	r2, [pc, #156]	; (8004d00 <TIM_Base_SetConfig+0x12c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d003      	beq.n	8004c6e <TIM_Base_SetConfig+0x9a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a26      	ldr	r2, [pc, #152]	; (8004d04 <TIM_Base_SetConfig+0x130>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d108      	bne.n	8004c80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a10      	ldr	r2, [pc, #64]	; (8004ce8 <TIM_Base_SetConfig+0x114>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00f      	beq.n	8004ccc <TIM_Base_SetConfig+0xf8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a12      	ldr	r2, [pc, #72]	; (8004cf8 <TIM_Base_SetConfig+0x124>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00b      	beq.n	8004ccc <TIM_Base_SetConfig+0xf8>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a11      	ldr	r2, [pc, #68]	; (8004cfc <TIM_Base_SetConfig+0x128>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d007      	beq.n	8004ccc <TIM_Base_SetConfig+0xf8>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a10      	ldr	r2, [pc, #64]	; (8004d00 <TIM_Base_SetConfig+0x12c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <TIM_Base_SetConfig+0xf8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a0f      	ldr	r2, [pc, #60]	; (8004d04 <TIM_Base_SetConfig+0x130>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d103      	bne.n	8004cd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	691a      	ldr	r2, [r3, #16]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	615a      	str	r2, [r3, #20]
}
 8004cda:	bf00      	nop
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40010000 	.word	0x40010000
 8004cec:	40000400 	.word	0x40000400
 8004cf0:	40000800 	.word	0x40000800
 8004cf4:	40000c00 	.word	0x40000c00
 8004cf8:	40010400 	.word	0x40010400
 8004cfc:	40014000 	.word	0x40014000
 8004d00:	40014400 	.word	0x40014400
 8004d04:	40014800 	.word	0x40014800

08004d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e042      	b.n	8004ddc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d106      	bne.n	8004d6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7fc f875 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2224      	movs	r2, #36	; 0x24
 8004d72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0201 	bic.w	r2, r2, #1
 8004d84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fcd6 	bl	8005738 <UART_SetConfig>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d101      	bne.n	8004d96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e022      	b.n	8004ddc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f001 fb28 	bl	80063f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004db2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0201 	orr.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f001 fbaf 	bl	8006538 <UART_CheckIdleState>
 8004dda:	4603      	mov	r3, r0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08a      	sub	sp, #40	; 0x28
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	4613      	mov	r3, r2
 8004df2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	f040 8083 	bne.w	8004f06 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_UART_Transmit+0x28>
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e07b      	b.n	8004f08 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_UART_Transmit+0x3a>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e074      	b.n	8004f08 <HAL_UART_Transmit+0x124>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2221      	movs	r2, #33	; 0x21
 8004e32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e36:	f7fc f91f 	bl	8001078 <HAL_GetTick>
 8004e3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	88fa      	ldrh	r2, [r7, #6]
 8004e40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	88fa      	ldrh	r2, [r7, #6]
 8004e48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e54:	d108      	bne.n	8004e68 <HAL_UART_Transmit+0x84>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d104      	bne.n	8004e68 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	61bb      	str	r3, [r7, #24]
 8004e66:	e003      	b.n	8004e70 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004e78:	e02c      	b.n	8004ed4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2200      	movs	r2, #0
 8004e82:	2180      	movs	r1, #128	; 0x80
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f001 fba2 	bl	80065ce <UART_WaitOnFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e039      	b.n	8004f08 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10b      	bne.n	8004eb2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ea8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	3302      	adds	r3, #2
 8004eae:	61bb      	str	r3, [r7, #24]
 8004eb0:	e007      	b.n	8004ec2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	781a      	ldrb	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1cc      	bne.n	8004e7a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2140      	movs	r1, #64	; 0x40
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f001 fb6f 	bl	80065ce <UART_WaitOnFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e006      	b.n	8004f08 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	e000      	b.n	8004f08 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004f06:	2302      	movs	r3, #2
  }
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3720      	adds	r7, #32
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08a      	sub	sp, #40	; 0x28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d142      	bne.n	8004fae <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <HAL_UART_Receive_IT+0x24>
 8004f2e:	88fb      	ldrh	r3, [r7, #6]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e03b      	b.n	8004fb0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_UART_Receive_IT+0x36>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e034      	b.n	8004fb0 <HAL_UART_Receive_IT+0xa0>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a17      	ldr	r2, [pc, #92]	; (8004fb8 <HAL_UART_Receive_IT+0xa8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d01f      	beq.n	8004f9e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d018      	beq.n	8004f9e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	e853 3f00 	ldrex	r3, [r3]
 8004f78:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	623b      	str	r3, [r7, #32]
 8004f8c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	69f9      	ldr	r1, [r7, #28]
 8004f90:	6a3a      	ldr	r2, [r7, #32]
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e6      	bne.n	8004f6c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f9e:	88fb      	ldrh	r3, [r7, #6]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f001 fbdb 	bl	8006760 <UART_Start_Receive_IT>
 8004faa:	4603      	mov	r3, r0
 8004fac:	e000      	b.n	8004fb0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004fae:	2302      	movs	r3, #2
  }
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3728      	adds	r7, #40	; 0x28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	58000c00 	.word	0x58000c00

08004fbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b0ba      	sub	sp, #232	; 0xe8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004fe2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004fe6:	f640 030f 	movw	r3, #2063	; 0x80f
 8004fea:	4013      	ands	r3, r2
 8004fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ff0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d11b      	bne.n	8005030 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ffc:	f003 0320 	and.w	r3, r3, #32
 8005000:	2b00      	cmp	r3, #0
 8005002:	d015      	beq.n	8005030 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005008:	f003 0320 	and.w	r3, r3, #32
 800500c:	2b00      	cmp	r3, #0
 800500e:	d105      	bne.n	800501c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d009      	beq.n	8005030 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 835a 	beq.w	80056da <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	4798      	blx	r3
      }
      return;
 800502e:	e354      	b.n	80056da <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005030:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 811f 	beq.w	8005278 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800503a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800503e:	4b8b      	ldr	r3, [pc, #556]	; (800526c <HAL_UART_IRQHandler+0x2b0>)
 8005040:	4013      	ands	r3, r2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005046:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800504a:	4b89      	ldr	r3, [pc, #548]	; (8005270 <HAL_UART_IRQHandler+0x2b4>)
 800504c:	4013      	ands	r3, r2
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 8112 	beq.w	8005278 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d011      	beq.n	8005084 <HAL_UART_IRQHandler+0xc8>
 8005060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00b      	beq.n	8005084 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2201      	movs	r2, #1
 8005072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800507a:	f043 0201 	orr.w	r2, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d011      	beq.n	80050b4 <HAL_UART_IRQHandler+0xf8>
 8005090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00b      	beq.n	80050b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2202      	movs	r2, #2
 80050a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050aa:	f043 0204 	orr.w	r2, r3, #4
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d011      	beq.n	80050e4 <HAL_UART_IRQHandler+0x128>
 80050c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00b      	beq.n	80050e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2204      	movs	r2, #4
 80050d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050da:	f043 0202 	orr.w	r2, r3, #2
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050e8:	f003 0308 	and.w	r3, r3, #8
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d017      	beq.n	8005120 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80050f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050f4:	f003 0320 	and.w	r3, r3, #32
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d105      	bne.n	8005108 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80050fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005100:	4b5a      	ldr	r3, [pc, #360]	; (800526c <HAL_UART_IRQHandler+0x2b0>)
 8005102:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00b      	beq.n	8005120 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2208      	movs	r2, #8
 800510e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005116:	f043 0208 	orr.w	r2, r3, #8
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005128:	2b00      	cmp	r3, #0
 800512a:	d012      	beq.n	8005152 <HAL_UART_IRQHandler+0x196>
 800512c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005130:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00c      	beq.n	8005152 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005140:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005148:	f043 0220 	orr.w	r2, r3, #32
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 82c0 	beq.w	80056de <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800515e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b00      	cmp	r3, #0
 8005168:	d013      	beq.n	8005192 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800516a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b00      	cmp	r3, #0
 8005174:	d105      	bne.n	8005182 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800517a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d007      	beq.n	8005192 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005198:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a6:	2b40      	cmp	r3, #64	; 0x40
 80051a8:	d005      	beq.n	80051b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d04f      	beq.n	8005256 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f001 fbfc 	bl	80069b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c6:	2b40      	cmp	r3, #64	; 0x40
 80051c8:	d141      	bne.n	800524e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3308      	adds	r3, #8
 80051d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051d8:	e853 3f00 	ldrex	r3, [r3]
 80051dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3308      	adds	r3, #8
 80051f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005202:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005206:	e841 2300 	strex	r3, r2, [r1]
 800520a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800520e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1d9      	bne.n	80051ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800521a:	2b00      	cmp	r3, #0
 800521c:	d013      	beq.n	8005246 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005222:	4a14      	ldr	r2, [pc, #80]	; (8005274 <HAL_UART_IRQHandler+0x2b8>)
 8005224:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800522a:	4618      	mov	r0, r3
 800522c:	f7fc fb2e 	bl	800188c <HAL_DMA_Abort_IT>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d017      	beq.n	8005266 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800523a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005240:	4610      	mov	r0, r2
 8005242:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005244:	e00f      	b.n	8005266 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa60 	bl	800570c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800524c:	e00b      	b.n	8005266 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fa5c 	bl	800570c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005254:	e007      	b.n	8005266 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fa58 	bl	800570c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005264:	e23b      	b.n	80056de <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005266:	bf00      	nop
    return;
 8005268:	e239      	b.n	80056de <HAL_UART_IRQHandler+0x722>
 800526a:	bf00      	nop
 800526c:	10000001 	.word	0x10000001
 8005270:	04000120 	.word	0x04000120
 8005274:	08006a81 	.word	0x08006a81

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800527c:	2b01      	cmp	r3, #1
 800527e:	f040 81ce 	bne.w	800561e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005286:	f003 0310 	and.w	r3, r3, #16
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 81c7 	beq.w	800561e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005294:	f003 0310 	and.w	r3, r3, #16
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 81c0 	beq.w	800561e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2210      	movs	r2, #16
 80052a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	f040 813b 	bne.w	800552c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a8b      	ldr	r2, [pc, #556]	; (80054ec <HAL_UART_IRQHandler+0x530>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d059      	beq.n	8005376 <HAL_UART_IRQHandler+0x3ba>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a89      	ldr	r2, [pc, #548]	; (80054f0 <HAL_UART_IRQHandler+0x534>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d053      	beq.n	8005376 <HAL_UART_IRQHandler+0x3ba>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a87      	ldr	r2, [pc, #540]	; (80054f4 <HAL_UART_IRQHandler+0x538>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d04d      	beq.n	8005376 <HAL_UART_IRQHandler+0x3ba>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a85      	ldr	r2, [pc, #532]	; (80054f8 <HAL_UART_IRQHandler+0x53c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d047      	beq.n	8005376 <HAL_UART_IRQHandler+0x3ba>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a83      	ldr	r2, [pc, #524]	; (80054fc <HAL_UART_IRQHandler+0x540>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d041      	beq.n	8005376 <HAL_UART_IRQHandler+0x3ba>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a81      	ldr	r2, [pc, #516]	; (8005500 <HAL_UART_IRQHandler+0x544>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d03b      	beq.n	8005376 <HAL_UART_IRQHandler+0x3ba>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a7f      	ldr	r2, [pc, #508]	; (8005504 <HAL_UART_IRQHandler+0x548>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d035      	beq.n	8005376 <HAL_UART_IRQHandler+0x3ba>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a7d      	ldr	r2, [pc, #500]	; (8005508 <HAL_UART_IRQHandler+0x54c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d02f      	beq.n	8005376 <HAL_UART_IRQHandler+0x3ba>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a7b      	ldr	r2, [pc, #492]	; (800550c <HAL_UART_IRQHandler+0x550>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d029      	beq.n	8005376 <HAL_UART_IRQHandler+0x3ba>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a79      	ldr	r2, [pc, #484]	; (8005510 <HAL_UART_IRQHandler+0x554>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d023      	beq.n	8005376 <HAL_UART_IRQHandler+0x3ba>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a77      	ldr	r2, [pc, #476]	; (8005514 <HAL_UART_IRQHandler+0x558>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d01d      	beq.n	8005376 <HAL_UART_IRQHandler+0x3ba>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a75      	ldr	r2, [pc, #468]	; (8005518 <HAL_UART_IRQHandler+0x55c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d017      	beq.n	8005376 <HAL_UART_IRQHandler+0x3ba>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a73      	ldr	r2, [pc, #460]	; (800551c <HAL_UART_IRQHandler+0x560>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d011      	beq.n	8005376 <HAL_UART_IRQHandler+0x3ba>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a71      	ldr	r2, [pc, #452]	; (8005520 <HAL_UART_IRQHandler+0x564>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00b      	beq.n	8005376 <HAL_UART_IRQHandler+0x3ba>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a6f      	ldr	r2, [pc, #444]	; (8005524 <HAL_UART_IRQHandler+0x568>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d005      	beq.n	8005376 <HAL_UART_IRQHandler+0x3ba>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a6d      	ldr	r2, [pc, #436]	; (8005528 <HAL_UART_IRQHandler+0x56c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d105      	bne.n	8005382 <HAL_UART_IRQHandler+0x3c6>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	b29b      	uxth	r3, r3
 8005380:	e004      	b.n	800538c <HAL_UART_IRQHandler+0x3d0>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	b29b      	uxth	r3, r3
 800538c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005390:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 81a4 	beq.w	80056e2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053a4:	429a      	cmp	r2, r3
 80053a6:	f080 819c 	bcs.w	80056e2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053be:	f000 8086 	beq.w	80054ce <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80053f0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80053f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005404:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1da      	bne.n	80053c2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3308      	adds	r3, #8
 8005412:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005416:	e853 3f00 	ldrex	r3, [r3]
 800541a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800541c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800541e:	f023 0301 	bic.w	r3, r3, #1
 8005422:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3308      	adds	r3, #8
 800542c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005430:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005434:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005438:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005442:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e1      	bne.n	800540c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3308      	adds	r3, #8
 800544e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800545a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800545e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3308      	adds	r3, #8
 8005468:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800546c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800546e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005472:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800547a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e3      	bne.n	8005448 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2220      	movs	r2, #32
 8005484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005496:	e853 3f00 	ldrex	r3, [r3]
 800549a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800549c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800549e:	f023 0310 	bic.w	r3, r3, #16
 80054a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80054b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054b8:	e841 2300 	strex	r3, r2, [r1]
 80054bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1e4      	bne.n	800548e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fb fec1 	bl	8001250 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054da:	b29b      	uxth	r3, r3
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	b29b      	uxth	r3, r3
 80054e0:	4619      	mov	r1, r3
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f91c 	bl	8005720 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054e8:	e0fb      	b.n	80056e2 <HAL_UART_IRQHandler+0x726>
 80054ea:	bf00      	nop
 80054ec:	40020010 	.word	0x40020010
 80054f0:	40020028 	.word	0x40020028
 80054f4:	40020040 	.word	0x40020040
 80054f8:	40020058 	.word	0x40020058
 80054fc:	40020070 	.word	0x40020070
 8005500:	40020088 	.word	0x40020088
 8005504:	400200a0 	.word	0x400200a0
 8005508:	400200b8 	.word	0x400200b8
 800550c:	40020410 	.word	0x40020410
 8005510:	40020428 	.word	0x40020428
 8005514:	40020440 	.word	0x40020440
 8005518:	40020458 	.word	0x40020458
 800551c:	40020470 	.word	0x40020470
 8005520:	40020488 	.word	0x40020488
 8005524:	400204a0 	.word	0x400204a0
 8005528:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005538:	b29b      	uxth	r3, r3
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005546:	b29b      	uxth	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 80cc 	beq.w	80056e6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800554e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 80c7 	beq.w	80056e6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005560:	e853 3f00 	ldrex	r3, [r3]
 8005564:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005568:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800556c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	461a      	mov	r2, r3
 8005576:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800557a:	647b      	str	r3, [r7, #68]	; 0x44
 800557c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005580:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e4      	bne.n	8005558 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3308      	adds	r3, #8
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	623b      	str	r3, [r7, #32]
   return(result);
 800559e:	6a3a      	ldr	r2, [r7, #32]
 80055a0:	4b54      	ldr	r3, [pc, #336]	; (80056f4 <HAL_UART_IRQHandler+0x738>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3308      	adds	r3, #8
 80055ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055b2:	633a      	str	r2, [r7, #48]	; 0x30
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e3      	bne.n	800558e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0310 	bic.w	r3, r3, #16
 80055ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055fc:	61fb      	str	r3, [r7, #28]
 80055fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	69b9      	ldr	r1, [r7, #24]
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	617b      	str	r3, [r7, #20]
   return(result);
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e4      	bne.n	80055da <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005610:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f882 	bl	8005720 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800561c:	e063      	b.n	80056e6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800561e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00e      	beq.n	8005648 <HAL_UART_IRQHandler+0x68c>
 800562a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800562e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d008      	beq.n	8005648 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800563e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f001 febb 	bl	80073bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005646:	e051      	b.n	80056ec <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800564c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005650:	2b00      	cmp	r3, #0
 8005652:	d014      	beq.n	800567e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565c:	2b00      	cmp	r3, #0
 800565e:	d105      	bne.n	800566c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d008      	beq.n	800567e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005670:	2b00      	cmp	r3, #0
 8005672:	d03a      	beq.n	80056ea <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	4798      	blx	r3
    }
    return;
 800567c:	e035      	b.n	80056ea <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800567e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d009      	beq.n	800569e <HAL_UART_IRQHandler+0x6e2>
 800568a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800568e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f001 fa08 	bl	8006aac <UART_EndTransmit_IT>
    return;
 800569c:	e026      	b.n	80056ec <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800569e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <HAL_UART_IRQHandler+0x702>
 80056aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f001 fe94 	bl	80073e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056bc:	e016      	b.n	80056ec <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80056be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d010      	beq.n	80056ec <HAL_UART_IRQHandler+0x730>
 80056ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	da0c      	bge.n	80056ec <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f001 fe7c 	bl	80073d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056d8:	e008      	b.n	80056ec <HAL_UART_IRQHandler+0x730>
      return;
 80056da:	bf00      	nop
 80056dc:	e006      	b.n	80056ec <HAL_UART_IRQHandler+0x730>
    return;
 80056de:	bf00      	nop
 80056e0:	e004      	b.n	80056ec <HAL_UART_IRQHandler+0x730>
      return;
 80056e2:	bf00      	nop
 80056e4:	e002      	b.n	80056ec <HAL_UART_IRQHandler+0x730>
      return;
 80056e6:	bf00      	nop
 80056e8:	e000      	b.n	80056ec <HAL_UART_IRQHandler+0x730>
    return;
 80056ea:	bf00      	nop
  }
}
 80056ec:	37e8      	adds	r7, #232	; 0xe8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	effffffe 	.word	0xeffffffe

080056f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005738:	b5b0      	push	{r4, r5, r7, lr}
 800573a:	b08e      	sub	sp, #56	; 0x38
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	4313      	orrs	r3, r2
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	4bbf      	ldr	r3, [pc, #764]	; (8005a64 <UART_SetConfig+0x32c>)
 8005766:	4013      	ands	r3, r2
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6812      	ldr	r2, [r2, #0]
 800576c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800576e:	430b      	orrs	r3, r1
 8005770:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4ab5      	ldr	r2, [pc, #724]	; (8005a68 <UART_SetConfig+0x330>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d004      	beq.n	80057a2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800579e:	4313      	orrs	r3, r2
 80057a0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	4bb0      	ldr	r3, [pc, #704]	; (8005a6c <UART_SetConfig+0x334>)
 80057aa:	4013      	ands	r3, r2
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6812      	ldr	r2, [r2, #0]
 80057b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057b2:	430b      	orrs	r3, r1
 80057b4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	f023 010f 	bic.w	r1, r3, #15
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4aa7      	ldr	r2, [pc, #668]	; (8005a70 <UART_SetConfig+0x338>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d176      	bne.n	80058c4 <UART_SetConfig+0x18c>
 80057d6:	4ba7      	ldr	r3, [pc, #668]	; (8005a74 <UART_SetConfig+0x33c>)
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057de:	2b28      	cmp	r3, #40	; 0x28
 80057e0:	d86c      	bhi.n	80058bc <UART_SetConfig+0x184>
 80057e2:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <UART_SetConfig+0xb0>)
 80057e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e8:	0800588d 	.word	0x0800588d
 80057ec:	080058bd 	.word	0x080058bd
 80057f0:	080058bd 	.word	0x080058bd
 80057f4:	080058bd 	.word	0x080058bd
 80057f8:	080058bd 	.word	0x080058bd
 80057fc:	080058bd 	.word	0x080058bd
 8005800:	080058bd 	.word	0x080058bd
 8005804:	080058bd 	.word	0x080058bd
 8005808:	08005895 	.word	0x08005895
 800580c:	080058bd 	.word	0x080058bd
 8005810:	080058bd 	.word	0x080058bd
 8005814:	080058bd 	.word	0x080058bd
 8005818:	080058bd 	.word	0x080058bd
 800581c:	080058bd 	.word	0x080058bd
 8005820:	080058bd 	.word	0x080058bd
 8005824:	080058bd 	.word	0x080058bd
 8005828:	0800589d 	.word	0x0800589d
 800582c:	080058bd 	.word	0x080058bd
 8005830:	080058bd 	.word	0x080058bd
 8005834:	080058bd 	.word	0x080058bd
 8005838:	080058bd 	.word	0x080058bd
 800583c:	080058bd 	.word	0x080058bd
 8005840:	080058bd 	.word	0x080058bd
 8005844:	080058bd 	.word	0x080058bd
 8005848:	080058a5 	.word	0x080058a5
 800584c:	080058bd 	.word	0x080058bd
 8005850:	080058bd 	.word	0x080058bd
 8005854:	080058bd 	.word	0x080058bd
 8005858:	080058bd 	.word	0x080058bd
 800585c:	080058bd 	.word	0x080058bd
 8005860:	080058bd 	.word	0x080058bd
 8005864:	080058bd 	.word	0x080058bd
 8005868:	080058ad 	.word	0x080058ad
 800586c:	080058bd 	.word	0x080058bd
 8005870:	080058bd 	.word	0x080058bd
 8005874:	080058bd 	.word	0x080058bd
 8005878:	080058bd 	.word	0x080058bd
 800587c:	080058bd 	.word	0x080058bd
 8005880:	080058bd 	.word	0x080058bd
 8005884:	080058bd 	.word	0x080058bd
 8005888:	080058b5 	.word	0x080058b5
 800588c:	2301      	movs	r3, #1
 800588e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005892:	e326      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005894:	2304      	movs	r3, #4
 8005896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800589a:	e322      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 800589c:	2308      	movs	r3, #8
 800589e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058a2:	e31e      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 80058a4:	2310      	movs	r3, #16
 80058a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058aa:	e31a      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 80058ac:	2320      	movs	r3, #32
 80058ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058b2:	e316      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 80058b4:	2340      	movs	r3, #64	; 0x40
 80058b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ba:	e312      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 80058bc:	2380      	movs	r3, #128	; 0x80
 80058be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058c2:	e30e      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a6b      	ldr	r2, [pc, #428]	; (8005a78 <UART_SetConfig+0x340>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d130      	bne.n	8005930 <UART_SetConfig+0x1f8>
 80058ce:	4b69      	ldr	r3, [pc, #420]	; (8005a74 <UART_SetConfig+0x33c>)
 80058d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	2b05      	cmp	r3, #5
 80058d8:	d826      	bhi.n	8005928 <UART_SetConfig+0x1f0>
 80058da:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <UART_SetConfig+0x1a8>)
 80058dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e0:	080058f9 	.word	0x080058f9
 80058e4:	08005901 	.word	0x08005901
 80058e8:	08005909 	.word	0x08005909
 80058ec:	08005911 	.word	0x08005911
 80058f0:	08005919 	.word	0x08005919
 80058f4:	08005921 	.word	0x08005921
 80058f8:	2300      	movs	r3, #0
 80058fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058fe:	e2f0      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005900:	2304      	movs	r3, #4
 8005902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005906:	e2ec      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005908:	2308      	movs	r3, #8
 800590a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800590e:	e2e8      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005910:	2310      	movs	r3, #16
 8005912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005916:	e2e4      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005918:	2320      	movs	r3, #32
 800591a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800591e:	e2e0      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005920:	2340      	movs	r3, #64	; 0x40
 8005922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005926:	e2dc      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005928:	2380      	movs	r3, #128	; 0x80
 800592a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800592e:	e2d8      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a51      	ldr	r2, [pc, #324]	; (8005a7c <UART_SetConfig+0x344>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d130      	bne.n	800599c <UART_SetConfig+0x264>
 800593a:	4b4e      	ldr	r3, [pc, #312]	; (8005a74 <UART_SetConfig+0x33c>)
 800593c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593e:	f003 0307 	and.w	r3, r3, #7
 8005942:	2b05      	cmp	r3, #5
 8005944:	d826      	bhi.n	8005994 <UART_SetConfig+0x25c>
 8005946:	a201      	add	r2, pc, #4	; (adr r2, 800594c <UART_SetConfig+0x214>)
 8005948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594c:	08005965 	.word	0x08005965
 8005950:	0800596d 	.word	0x0800596d
 8005954:	08005975 	.word	0x08005975
 8005958:	0800597d 	.word	0x0800597d
 800595c:	08005985 	.word	0x08005985
 8005960:	0800598d 	.word	0x0800598d
 8005964:	2300      	movs	r3, #0
 8005966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800596a:	e2ba      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 800596c:	2304      	movs	r3, #4
 800596e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005972:	e2b6      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005974:	2308      	movs	r3, #8
 8005976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800597a:	e2b2      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 800597c:	2310      	movs	r3, #16
 800597e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005982:	e2ae      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005984:	2320      	movs	r3, #32
 8005986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800598a:	e2aa      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 800598c:	2340      	movs	r3, #64	; 0x40
 800598e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005992:	e2a6      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005994:	2380      	movs	r3, #128	; 0x80
 8005996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800599a:	e2a2      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a37      	ldr	r2, [pc, #220]	; (8005a80 <UART_SetConfig+0x348>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d130      	bne.n	8005a08 <UART_SetConfig+0x2d0>
 80059a6:	4b33      	ldr	r3, [pc, #204]	; (8005a74 <UART_SetConfig+0x33c>)
 80059a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	2b05      	cmp	r3, #5
 80059b0:	d826      	bhi.n	8005a00 <UART_SetConfig+0x2c8>
 80059b2:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <UART_SetConfig+0x280>)
 80059b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b8:	080059d1 	.word	0x080059d1
 80059bc:	080059d9 	.word	0x080059d9
 80059c0:	080059e1 	.word	0x080059e1
 80059c4:	080059e9 	.word	0x080059e9
 80059c8:	080059f1 	.word	0x080059f1
 80059cc:	080059f9 	.word	0x080059f9
 80059d0:	2300      	movs	r3, #0
 80059d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059d6:	e284      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 80059d8:	2304      	movs	r3, #4
 80059da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059de:	e280      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 80059e0:	2308      	movs	r3, #8
 80059e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059e6:	e27c      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 80059e8:	2310      	movs	r3, #16
 80059ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ee:	e278      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 80059f0:	2320      	movs	r3, #32
 80059f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059f6:	e274      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 80059f8:	2340      	movs	r3, #64	; 0x40
 80059fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059fe:	e270      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005a00:	2380      	movs	r3, #128	; 0x80
 8005a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a06:	e26c      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1d      	ldr	r2, [pc, #116]	; (8005a84 <UART_SetConfig+0x34c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d142      	bne.n	8005a98 <UART_SetConfig+0x360>
 8005a12:	4b18      	ldr	r3, [pc, #96]	; (8005a74 <UART_SetConfig+0x33c>)
 8005a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	2b05      	cmp	r3, #5
 8005a1c:	d838      	bhi.n	8005a90 <UART_SetConfig+0x358>
 8005a1e:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <UART_SetConfig+0x2ec>)
 8005a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a24:	08005a3d 	.word	0x08005a3d
 8005a28:	08005a45 	.word	0x08005a45
 8005a2c:	08005a4d 	.word	0x08005a4d
 8005a30:	08005a55 	.word	0x08005a55
 8005a34:	08005a5d 	.word	0x08005a5d
 8005a38:	08005a89 	.word	0x08005a89
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a42:	e24e      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005a44:	2304      	movs	r3, #4
 8005a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a4a:	e24a      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005a4c:	2308      	movs	r3, #8
 8005a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a52:	e246      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005a54:	2310      	movs	r3, #16
 8005a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a5a:	e242      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005a5c:	2320      	movs	r3, #32
 8005a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a62:	e23e      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005a64:	cfff69f3 	.word	0xcfff69f3
 8005a68:	58000c00 	.word	0x58000c00
 8005a6c:	11fff4ff 	.word	0x11fff4ff
 8005a70:	40011000 	.word	0x40011000
 8005a74:	58024400 	.word	0x58024400
 8005a78:	40004400 	.word	0x40004400
 8005a7c:	40004800 	.word	0x40004800
 8005a80:	40004c00 	.word	0x40004c00
 8005a84:	40005000 	.word	0x40005000
 8005a88:	2340      	movs	r3, #64	; 0x40
 8005a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a8e:	e228      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005a90:	2380      	movs	r3, #128	; 0x80
 8005a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a96:	e224      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4ab1      	ldr	r2, [pc, #708]	; (8005d64 <UART_SetConfig+0x62c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d176      	bne.n	8005b90 <UART_SetConfig+0x458>
 8005aa2:	4bb1      	ldr	r3, [pc, #708]	; (8005d68 <UART_SetConfig+0x630>)
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005aaa:	2b28      	cmp	r3, #40	; 0x28
 8005aac:	d86c      	bhi.n	8005b88 <UART_SetConfig+0x450>
 8005aae:	a201      	add	r2, pc, #4	; (adr r2, 8005ab4 <UART_SetConfig+0x37c>)
 8005ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab4:	08005b59 	.word	0x08005b59
 8005ab8:	08005b89 	.word	0x08005b89
 8005abc:	08005b89 	.word	0x08005b89
 8005ac0:	08005b89 	.word	0x08005b89
 8005ac4:	08005b89 	.word	0x08005b89
 8005ac8:	08005b89 	.word	0x08005b89
 8005acc:	08005b89 	.word	0x08005b89
 8005ad0:	08005b89 	.word	0x08005b89
 8005ad4:	08005b61 	.word	0x08005b61
 8005ad8:	08005b89 	.word	0x08005b89
 8005adc:	08005b89 	.word	0x08005b89
 8005ae0:	08005b89 	.word	0x08005b89
 8005ae4:	08005b89 	.word	0x08005b89
 8005ae8:	08005b89 	.word	0x08005b89
 8005aec:	08005b89 	.word	0x08005b89
 8005af0:	08005b89 	.word	0x08005b89
 8005af4:	08005b69 	.word	0x08005b69
 8005af8:	08005b89 	.word	0x08005b89
 8005afc:	08005b89 	.word	0x08005b89
 8005b00:	08005b89 	.word	0x08005b89
 8005b04:	08005b89 	.word	0x08005b89
 8005b08:	08005b89 	.word	0x08005b89
 8005b0c:	08005b89 	.word	0x08005b89
 8005b10:	08005b89 	.word	0x08005b89
 8005b14:	08005b71 	.word	0x08005b71
 8005b18:	08005b89 	.word	0x08005b89
 8005b1c:	08005b89 	.word	0x08005b89
 8005b20:	08005b89 	.word	0x08005b89
 8005b24:	08005b89 	.word	0x08005b89
 8005b28:	08005b89 	.word	0x08005b89
 8005b2c:	08005b89 	.word	0x08005b89
 8005b30:	08005b89 	.word	0x08005b89
 8005b34:	08005b79 	.word	0x08005b79
 8005b38:	08005b89 	.word	0x08005b89
 8005b3c:	08005b89 	.word	0x08005b89
 8005b40:	08005b89 	.word	0x08005b89
 8005b44:	08005b89 	.word	0x08005b89
 8005b48:	08005b89 	.word	0x08005b89
 8005b4c:	08005b89 	.word	0x08005b89
 8005b50:	08005b89 	.word	0x08005b89
 8005b54:	08005b81 	.word	0x08005b81
 8005b58:	2301      	movs	r3, #1
 8005b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5e:	e1c0      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005b60:	2304      	movs	r3, #4
 8005b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b66:	e1bc      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005b68:	2308      	movs	r3, #8
 8005b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b6e:	e1b8      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005b70:	2310      	movs	r3, #16
 8005b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b76:	e1b4      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005b78:	2320      	movs	r3, #32
 8005b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b7e:	e1b0      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005b80:	2340      	movs	r3, #64	; 0x40
 8005b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b86:	e1ac      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005b88:	2380      	movs	r3, #128	; 0x80
 8005b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b8e:	e1a8      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a75      	ldr	r2, [pc, #468]	; (8005d6c <UART_SetConfig+0x634>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d130      	bne.n	8005bfc <UART_SetConfig+0x4c4>
 8005b9a:	4b73      	ldr	r3, [pc, #460]	; (8005d68 <UART_SetConfig+0x630>)
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9e:	f003 0307 	and.w	r3, r3, #7
 8005ba2:	2b05      	cmp	r3, #5
 8005ba4:	d826      	bhi.n	8005bf4 <UART_SetConfig+0x4bc>
 8005ba6:	a201      	add	r2, pc, #4	; (adr r2, 8005bac <UART_SetConfig+0x474>)
 8005ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bac:	08005bc5 	.word	0x08005bc5
 8005bb0:	08005bcd 	.word	0x08005bcd
 8005bb4:	08005bd5 	.word	0x08005bd5
 8005bb8:	08005bdd 	.word	0x08005bdd
 8005bbc:	08005be5 	.word	0x08005be5
 8005bc0:	08005bed 	.word	0x08005bed
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bca:	e18a      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005bcc:	2304      	movs	r3, #4
 8005bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bd2:	e186      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005bd4:	2308      	movs	r3, #8
 8005bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bda:	e182      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005bdc:	2310      	movs	r3, #16
 8005bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005be2:	e17e      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005be4:	2320      	movs	r3, #32
 8005be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bea:	e17a      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005bec:	2340      	movs	r3, #64	; 0x40
 8005bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bf2:	e176      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005bf4:	2380      	movs	r3, #128	; 0x80
 8005bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bfa:	e172      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a5b      	ldr	r2, [pc, #364]	; (8005d70 <UART_SetConfig+0x638>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d130      	bne.n	8005c68 <UART_SetConfig+0x530>
 8005c06:	4b58      	ldr	r3, [pc, #352]	; (8005d68 <UART_SetConfig+0x630>)
 8005c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0a:	f003 0307 	and.w	r3, r3, #7
 8005c0e:	2b05      	cmp	r3, #5
 8005c10:	d826      	bhi.n	8005c60 <UART_SetConfig+0x528>
 8005c12:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <UART_SetConfig+0x4e0>)
 8005c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c18:	08005c31 	.word	0x08005c31
 8005c1c:	08005c39 	.word	0x08005c39
 8005c20:	08005c41 	.word	0x08005c41
 8005c24:	08005c49 	.word	0x08005c49
 8005c28:	08005c51 	.word	0x08005c51
 8005c2c:	08005c59 	.word	0x08005c59
 8005c30:	2300      	movs	r3, #0
 8005c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c36:	e154      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005c38:	2304      	movs	r3, #4
 8005c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c3e:	e150      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005c40:	2308      	movs	r3, #8
 8005c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c46:	e14c      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005c48:	2310      	movs	r3, #16
 8005c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c4e:	e148      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005c50:	2320      	movs	r3, #32
 8005c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c56:	e144      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005c58:	2340      	movs	r3, #64	; 0x40
 8005c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c5e:	e140      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005c60:	2380      	movs	r3, #128	; 0x80
 8005c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c66:	e13c      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a41      	ldr	r2, [pc, #260]	; (8005d74 <UART_SetConfig+0x63c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	f040 8082 	bne.w	8005d78 <UART_SetConfig+0x640>
 8005c74:	4b3c      	ldr	r3, [pc, #240]	; (8005d68 <UART_SetConfig+0x630>)
 8005c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c7c:	2b28      	cmp	r3, #40	; 0x28
 8005c7e:	d86d      	bhi.n	8005d5c <UART_SetConfig+0x624>
 8005c80:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <UART_SetConfig+0x550>)
 8005c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c86:	bf00      	nop
 8005c88:	08005d2d 	.word	0x08005d2d
 8005c8c:	08005d5d 	.word	0x08005d5d
 8005c90:	08005d5d 	.word	0x08005d5d
 8005c94:	08005d5d 	.word	0x08005d5d
 8005c98:	08005d5d 	.word	0x08005d5d
 8005c9c:	08005d5d 	.word	0x08005d5d
 8005ca0:	08005d5d 	.word	0x08005d5d
 8005ca4:	08005d5d 	.word	0x08005d5d
 8005ca8:	08005d35 	.word	0x08005d35
 8005cac:	08005d5d 	.word	0x08005d5d
 8005cb0:	08005d5d 	.word	0x08005d5d
 8005cb4:	08005d5d 	.word	0x08005d5d
 8005cb8:	08005d5d 	.word	0x08005d5d
 8005cbc:	08005d5d 	.word	0x08005d5d
 8005cc0:	08005d5d 	.word	0x08005d5d
 8005cc4:	08005d5d 	.word	0x08005d5d
 8005cc8:	08005d3d 	.word	0x08005d3d
 8005ccc:	08005d5d 	.word	0x08005d5d
 8005cd0:	08005d5d 	.word	0x08005d5d
 8005cd4:	08005d5d 	.word	0x08005d5d
 8005cd8:	08005d5d 	.word	0x08005d5d
 8005cdc:	08005d5d 	.word	0x08005d5d
 8005ce0:	08005d5d 	.word	0x08005d5d
 8005ce4:	08005d5d 	.word	0x08005d5d
 8005ce8:	08005d45 	.word	0x08005d45
 8005cec:	08005d5d 	.word	0x08005d5d
 8005cf0:	08005d5d 	.word	0x08005d5d
 8005cf4:	08005d5d 	.word	0x08005d5d
 8005cf8:	08005d5d 	.word	0x08005d5d
 8005cfc:	08005d5d 	.word	0x08005d5d
 8005d00:	08005d5d 	.word	0x08005d5d
 8005d04:	08005d5d 	.word	0x08005d5d
 8005d08:	08005d4d 	.word	0x08005d4d
 8005d0c:	08005d5d 	.word	0x08005d5d
 8005d10:	08005d5d 	.word	0x08005d5d
 8005d14:	08005d5d 	.word	0x08005d5d
 8005d18:	08005d5d 	.word	0x08005d5d
 8005d1c:	08005d5d 	.word	0x08005d5d
 8005d20:	08005d5d 	.word	0x08005d5d
 8005d24:	08005d5d 	.word	0x08005d5d
 8005d28:	08005d55 	.word	0x08005d55
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d32:	e0d6      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005d34:	2304      	movs	r3, #4
 8005d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d3a:	e0d2      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d42:	e0ce      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005d44:	2310      	movs	r3, #16
 8005d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d4a:	e0ca      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005d4c:	2320      	movs	r3, #32
 8005d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d52:	e0c6      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005d54:	2340      	movs	r3, #64	; 0x40
 8005d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d5a:	e0c2      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005d5c:	2380      	movs	r3, #128	; 0x80
 8005d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d62:	e0be      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005d64:	40011400 	.word	0x40011400
 8005d68:	58024400 	.word	0x58024400
 8005d6c:	40007800 	.word	0x40007800
 8005d70:	40007c00 	.word	0x40007c00
 8005d74:	40011800 	.word	0x40011800
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4aad      	ldr	r2, [pc, #692]	; (8006034 <UART_SetConfig+0x8fc>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d176      	bne.n	8005e70 <UART_SetConfig+0x738>
 8005d82:	4bad      	ldr	r3, [pc, #692]	; (8006038 <UART_SetConfig+0x900>)
 8005d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d8a:	2b28      	cmp	r3, #40	; 0x28
 8005d8c:	d86c      	bhi.n	8005e68 <UART_SetConfig+0x730>
 8005d8e:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <UART_SetConfig+0x65c>)
 8005d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d94:	08005e39 	.word	0x08005e39
 8005d98:	08005e69 	.word	0x08005e69
 8005d9c:	08005e69 	.word	0x08005e69
 8005da0:	08005e69 	.word	0x08005e69
 8005da4:	08005e69 	.word	0x08005e69
 8005da8:	08005e69 	.word	0x08005e69
 8005dac:	08005e69 	.word	0x08005e69
 8005db0:	08005e69 	.word	0x08005e69
 8005db4:	08005e41 	.word	0x08005e41
 8005db8:	08005e69 	.word	0x08005e69
 8005dbc:	08005e69 	.word	0x08005e69
 8005dc0:	08005e69 	.word	0x08005e69
 8005dc4:	08005e69 	.word	0x08005e69
 8005dc8:	08005e69 	.word	0x08005e69
 8005dcc:	08005e69 	.word	0x08005e69
 8005dd0:	08005e69 	.word	0x08005e69
 8005dd4:	08005e49 	.word	0x08005e49
 8005dd8:	08005e69 	.word	0x08005e69
 8005ddc:	08005e69 	.word	0x08005e69
 8005de0:	08005e69 	.word	0x08005e69
 8005de4:	08005e69 	.word	0x08005e69
 8005de8:	08005e69 	.word	0x08005e69
 8005dec:	08005e69 	.word	0x08005e69
 8005df0:	08005e69 	.word	0x08005e69
 8005df4:	08005e51 	.word	0x08005e51
 8005df8:	08005e69 	.word	0x08005e69
 8005dfc:	08005e69 	.word	0x08005e69
 8005e00:	08005e69 	.word	0x08005e69
 8005e04:	08005e69 	.word	0x08005e69
 8005e08:	08005e69 	.word	0x08005e69
 8005e0c:	08005e69 	.word	0x08005e69
 8005e10:	08005e69 	.word	0x08005e69
 8005e14:	08005e59 	.word	0x08005e59
 8005e18:	08005e69 	.word	0x08005e69
 8005e1c:	08005e69 	.word	0x08005e69
 8005e20:	08005e69 	.word	0x08005e69
 8005e24:	08005e69 	.word	0x08005e69
 8005e28:	08005e69 	.word	0x08005e69
 8005e2c:	08005e69 	.word	0x08005e69
 8005e30:	08005e69 	.word	0x08005e69
 8005e34:	08005e61 	.word	0x08005e61
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3e:	e050      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005e40:	2304      	movs	r3, #4
 8005e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e46:	e04c      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005e48:	2308      	movs	r3, #8
 8005e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e4e:	e048      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005e50:	2310      	movs	r3, #16
 8005e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e56:	e044      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005e58:	2320      	movs	r3, #32
 8005e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e5e:	e040      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005e60:	2340      	movs	r3, #64	; 0x40
 8005e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e66:	e03c      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005e68:	2380      	movs	r3, #128	; 0x80
 8005e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e6e:	e038      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a71      	ldr	r2, [pc, #452]	; (800603c <UART_SetConfig+0x904>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d130      	bne.n	8005edc <UART_SetConfig+0x7a4>
 8005e7a:	4b6f      	ldr	r3, [pc, #444]	; (8006038 <UART_SetConfig+0x900>)
 8005e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7e:	f003 0307 	and.w	r3, r3, #7
 8005e82:	2b05      	cmp	r3, #5
 8005e84:	d826      	bhi.n	8005ed4 <UART_SetConfig+0x79c>
 8005e86:	a201      	add	r2, pc, #4	; (adr r2, 8005e8c <UART_SetConfig+0x754>)
 8005e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8c:	08005ea5 	.word	0x08005ea5
 8005e90:	08005ead 	.word	0x08005ead
 8005e94:	08005eb5 	.word	0x08005eb5
 8005e98:	08005ebd 	.word	0x08005ebd
 8005e9c:	08005ec5 	.word	0x08005ec5
 8005ea0:	08005ecd 	.word	0x08005ecd
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eaa:	e01a      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005eac:	2304      	movs	r3, #4
 8005eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eb2:	e016      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005eb4:	2308      	movs	r3, #8
 8005eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eba:	e012      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ec2:	e00e      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005ec4:	2320      	movs	r3, #32
 8005ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eca:	e00a      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005ecc:	2340      	movs	r3, #64	; 0x40
 8005ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ed2:	e006      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005ed4:	2380      	movs	r3, #128	; 0x80
 8005ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eda:	e002      	b.n	8005ee2 <UART_SetConfig+0x7aa>
 8005edc:	2380      	movs	r3, #128	; 0x80
 8005ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a55      	ldr	r2, [pc, #340]	; (800603c <UART_SetConfig+0x904>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	f040 80f0 	bne.w	80060ce <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	dc46      	bgt.n	8005f84 <UART_SetConfig+0x84c>
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	db75      	blt.n	8005fe6 <UART_SetConfig+0x8ae>
 8005efa:	3b02      	subs	r3, #2
 8005efc:	2b1e      	cmp	r3, #30
 8005efe:	d872      	bhi.n	8005fe6 <UART_SetConfig+0x8ae>
 8005f00:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <UART_SetConfig+0x7d0>)
 8005f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f06:	bf00      	nop
 8005f08:	08005f8b 	.word	0x08005f8b
 8005f0c:	08005fe7 	.word	0x08005fe7
 8005f10:	08005f93 	.word	0x08005f93
 8005f14:	08005fe7 	.word	0x08005fe7
 8005f18:	08005fe7 	.word	0x08005fe7
 8005f1c:	08005fe7 	.word	0x08005fe7
 8005f20:	08005fa3 	.word	0x08005fa3
 8005f24:	08005fe7 	.word	0x08005fe7
 8005f28:	08005fe7 	.word	0x08005fe7
 8005f2c:	08005fe7 	.word	0x08005fe7
 8005f30:	08005fe7 	.word	0x08005fe7
 8005f34:	08005fe7 	.word	0x08005fe7
 8005f38:	08005fe7 	.word	0x08005fe7
 8005f3c:	08005fe7 	.word	0x08005fe7
 8005f40:	08005fb3 	.word	0x08005fb3
 8005f44:	08005fe7 	.word	0x08005fe7
 8005f48:	08005fe7 	.word	0x08005fe7
 8005f4c:	08005fe7 	.word	0x08005fe7
 8005f50:	08005fe7 	.word	0x08005fe7
 8005f54:	08005fe7 	.word	0x08005fe7
 8005f58:	08005fe7 	.word	0x08005fe7
 8005f5c:	08005fe7 	.word	0x08005fe7
 8005f60:	08005fe7 	.word	0x08005fe7
 8005f64:	08005fe7 	.word	0x08005fe7
 8005f68:	08005fe7 	.word	0x08005fe7
 8005f6c:	08005fe7 	.word	0x08005fe7
 8005f70:	08005fe7 	.word	0x08005fe7
 8005f74:	08005fe7 	.word	0x08005fe7
 8005f78:	08005fe7 	.word	0x08005fe7
 8005f7c:	08005fe7 	.word	0x08005fe7
 8005f80:	08005fd9 	.word	0x08005fd9
 8005f84:	2b40      	cmp	r3, #64	; 0x40
 8005f86:	d02a      	beq.n	8005fde <UART_SetConfig+0x8a6>
 8005f88:	e02d      	b.n	8005fe6 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f8a:	f7fd ffdf 	bl	8003f4c <HAL_RCCEx_GetD3PCLK1Freq>
 8005f8e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f90:	e02f      	b.n	8005ff2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f92:	f107 0314 	add.w	r3, r7, #20
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fd ffee 	bl	8003f78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fa0:	e027      	b.n	8005ff2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fa2:	f107 0308 	add.w	r3, r7, #8
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fe f93a 	bl	8004220 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fb0:	e01f      	b.n	8005ff2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fb2:	4b21      	ldr	r3, [pc, #132]	; (8006038 <UART_SetConfig+0x900>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d009      	beq.n	8005fd2 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005fbe:	4b1e      	ldr	r3, [pc, #120]	; (8006038 <UART_SetConfig+0x900>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	08db      	lsrs	r3, r3, #3
 8005fc4:	f003 0303 	and.w	r3, r3, #3
 8005fc8:	4a1d      	ldr	r2, [pc, #116]	; (8006040 <UART_SetConfig+0x908>)
 8005fca:	fa22 f303 	lsr.w	r3, r2, r3
 8005fce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005fd0:	e00f      	b.n	8005ff2 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8005fd2:	4b1b      	ldr	r3, [pc, #108]	; (8006040 <UART_SetConfig+0x908>)
 8005fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fd6:	e00c      	b.n	8005ff2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fd8:	4b1a      	ldr	r3, [pc, #104]	; (8006044 <UART_SetConfig+0x90c>)
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fdc:	e009      	b.n	8005ff2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fe4:	e005      	b.n	8005ff2 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005ff0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 81e6 	beq.w	80063c6 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	4a12      	ldr	r2, [pc, #72]	; (8006048 <UART_SetConfig+0x910>)
 8006000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006004:	461a      	mov	r2, r3
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	fbb3 f3f2 	udiv	r3, r3, r2
 800600c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	4613      	mov	r3, r2
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	4413      	add	r3, r2
 8006018:	6a3a      	ldr	r2, [r7, #32]
 800601a:	429a      	cmp	r2, r3
 800601c:	d305      	bcc.n	800602a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006024:	6a3a      	ldr	r2, [r7, #32]
 8006026:	429a      	cmp	r2, r3
 8006028:	d910      	bls.n	800604c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006030:	e1c9      	b.n	80063c6 <UART_SetConfig+0xc8e>
 8006032:	bf00      	nop
 8006034:	40011c00 	.word	0x40011c00
 8006038:	58024400 	.word	0x58024400
 800603c:	58000c00 	.word	0x58000c00
 8006040:	03d09000 	.word	0x03d09000
 8006044:	003d0900 	.word	0x003d0900
 8006048:	0800a9f4 	.word	0x0800a9f4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604e:	4618      	mov	r0, r3
 8006050:	f04f 0100 	mov.w	r1, #0
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	4ac1      	ldr	r2, [pc, #772]	; (8006360 <UART_SetConfig+0xc28>)
 800605a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800605e:	b29a      	uxth	r2, r3
 8006060:	f04f 0300 	mov.w	r3, #0
 8006064:	f7fa f944 	bl	80002f0 <__aeabi_uldivmod>
 8006068:	4602      	mov	r2, r0
 800606a:	460b      	mov	r3, r1
 800606c:	4610      	mov	r0, r2
 800606e:	4619      	mov	r1, r3
 8006070:	f04f 0200 	mov.w	r2, #0
 8006074:	f04f 0300 	mov.w	r3, #0
 8006078:	020b      	lsls	r3, r1, #8
 800607a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800607e:	0202      	lsls	r2, r0, #8
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	6849      	ldr	r1, [r1, #4]
 8006084:	0849      	lsrs	r1, r1, #1
 8006086:	4608      	mov	r0, r1
 8006088:	f04f 0100 	mov.w	r1, #0
 800608c:	1814      	adds	r4, r2, r0
 800608e:	eb43 0501 	adc.w	r5, r3, r1
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	461a      	mov	r2, r3
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	4620      	mov	r0, r4
 800609e:	4629      	mov	r1, r5
 80060a0:	f7fa f926 	bl	80002f0 <__aeabi_uldivmod>
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4613      	mov	r3, r2
 80060aa:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060b2:	d308      	bcc.n	80060c6 <UART_SetConfig+0x98e>
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ba:	d204      	bcs.n	80060c6 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c2:	60da      	str	r2, [r3, #12]
 80060c4:	e17f      	b.n	80063c6 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80060cc:	e17b      	b.n	80063c6 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d6:	f040 80bd 	bne.w	8006254 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 80060da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060de:	2b20      	cmp	r3, #32
 80060e0:	dc48      	bgt.n	8006174 <UART_SetConfig+0xa3c>
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	db7b      	blt.n	80061de <UART_SetConfig+0xaa6>
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	d879      	bhi.n	80061de <UART_SetConfig+0xaa6>
 80060ea:	a201      	add	r2, pc, #4	; (adr r2, 80060f0 <UART_SetConfig+0x9b8>)
 80060ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f0:	0800617b 	.word	0x0800617b
 80060f4:	08006183 	.word	0x08006183
 80060f8:	080061df 	.word	0x080061df
 80060fc:	080061df 	.word	0x080061df
 8006100:	0800618b 	.word	0x0800618b
 8006104:	080061df 	.word	0x080061df
 8006108:	080061df 	.word	0x080061df
 800610c:	080061df 	.word	0x080061df
 8006110:	0800619b 	.word	0x0800619b
 8006114:	080061df 	.word	0x080061df
 8006118:	080061df 	.word	0x080061df
 800611c:	080061df 	.word	0x080061df
 8006120:	080061df 	.word	0x080061df
 8006124:	080061df 	.word	0x080061df
 8006128:	080061df 	.word	0x080061df
 800612c:	080061df 	.word	0x080061df
 8006130:	080061ab 	.word	0x080061ab
 8006134:	080061df 	.word	0x080061df
 8006138:	080061df 	.word	0x080061df
 800613c:	080061df 	.word	0x080061df
 8006140:	080061df 	.word	0x080061df
 8006144:	080061df 	.word	0x080061df
 8006148:	080061df 	.word	0x080061df
 800614c:	080061df 	.word	0x080061df
 8006150:	080061df 	.word	0x080061df
 8006154:	080061df 	.word	0x080061df
 8006158:	080061df 	.word	0x080061df
 800615c:	080061df 	.word	0x080061df
 8006160:	080061df 	.word	0x080061df
 8006164:	080061df 	.word	0x080061df
 8006168:	080061df 	.word	0x080061df
 800616c:	080061df 	.word	0x080061df
 8006170:	080061d1 	.word	0x080061d1
 8006174:	2b40      	cmp	r3, #64	; 0x40
 8006176:	d02e      	beq.n	80061d6 <UART_SetConfig+0xa9e>
 8006178:	e031      	b.n	80061de <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800617a:	f7fc ff6d 	bl	8003058 <HAL_RCC_GetPCLK1Freq>
 800617e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006180:	e033      	b.n	80061ea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006182:	f7fc ff7f 	bl	8003084 <HAL_RCC_GetPCLK2Freq>
 8006186:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006188:	e02f      	b.n	80061ea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800618a:	f107 0314 	add.w	r3, r7, #20
 800618e:	4618      	mov	r0, r3
 8006190:	f7fd fef2 	bl	8003f78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006198:	e027      	b.n	80061ea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800619a:	f107 0308 	add.w	r3, r7, #8
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe f83e 	bl	8004220 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061a8:	e01f      	b.n	80061ea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061aa:	4b6e      	ldr	r3, [pc, #440]	; (8006364 <UART_SetConfig+0xc2c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d009      	beq.n	80061ca <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061b6:	4b6b      	ldr	r3, [pc, #428]	; (8006364 <UART_SetConfig+0xc2c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	08db      	lsrs	r3, r3, #3
 80061bc:	f003 0303 	and.w	r3, r3, #3
 80061c0:	4a69      	ldr	r2, [pc, #420]	; (8006368 <UART_SetConfig+0xc30>)
 80061c2:	fa22 f303 	lsr.w	r3, r2, r3
 80061c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061c8:	e00f      	b.n	80061ea <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 80061ca:	4b67      	ldr	r3, [pc, #412]	; (8006368 <UART_SetConfig+0xc30>)
 80061cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061ce:	e00c      	b.n	80061ea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061d0:	4b66      	ldr	r3, [pc, #408]	; (800636c <UART_SetConfig+0xc34>)
 80061d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061d4:	e009      	b.n	80061ea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061dc:	e005      	b.n	80061ea <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80061e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 80ea 	beq.w	80063c6 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	4a5a      	ldr	r2, [pc, #360]	; (8006360 <UART_SetConfig+0xc28>)
 80061f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061fc:	461a      	mov	r2, r3
 80061fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006200:	fbb3 f3f2 	udiv	r3, r3, r2
 8006204:	005a      	lsls	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	085b      	lsrs	r3, r3, #1
 800620c:	441a      	add	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	fbb2 f3f3 	udiv	r3, r2, r3
 8006216:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	2b0f      	cmp	r3, #15
 800621c:	d916      	bls.n	800624c <UART_SetConfig+0xb14>
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006224:	d212      	bcs.n	800624c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006228:	b29b      	uxth	r3, r3
 800622a:	f023 030f 	bic.w	r3, r3, #15
 800622e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	085b      	lsrs	r3, r3, #1
 8006234:	b29b      	uxth	r3, r3
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	b29a      	uxth	r2, r3
 800623c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800623e:	4313      	orrs	r3, r2
 8006240:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006248:	60da      	str	r2, [r3, #12]
 800624a:	e0bc      	b.n	80063c6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006252:	e0b8      	b.n	80063c6 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006254:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006258:	2b20      	cmp	r3, #32
 800625a:	dc4b      	bgt.n	80062f4 <UART_SetConfig+0xbbc>
 800625c:	2b00      	cmp	r3, #0
 800625e:	f2c0 8087 	blt.w	8006370 <UART_SetConfig+0xc38>
 8006262:	2b20      	cmp	r3, #32
 8006264:	f200 8084 	bhi.w	8006370 <UART_SetConfig+0xc38>
 8006268:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <UART_SetConfig+0xb38>)
 800626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626e:	bf00      	nop
 8006270:	080062fb 	.word	0x080062fb
 8006274:	08006303 	.word	0x08006303
 8006278:	08006371 	.word	0x08006371
 800627c:	08006371 	.word	0x08006371
 8006280:	0800630b 	.word	0x0800630b
 8006284:	08006371 	.word	0x08006371
 8006288:	08006371 	.word	0x08006371
 800628c:	08006371 	.word	0x08006371
 8006290:	0800631b 	.word	0x0800631b
 8006294:	08006371 	.word	0x08006371
 8006298:	08006371 	.word	0x08006371
 800629c:	08006371 	.word	0x08006371
 80062a0:	08006371 	.word	0x08006371
 80062a4:	08006371 	.word	0x08006371
 80062a8:	08006371 	.word	0x08006371
 80062ac:	08006371 	.word	0x08006371
 80062b0:	0800632b 	.word	0x0800632b
 80062b4:	08006371 	.word	0x08006371
 80062b8:	08006371 	.word	0x08006371
 80062bc:	08006371 	.word	0x08006371
 80062c0:	08006371 	.word	0x08006371
 80062c4:	08006371 	.word	0x08006371
 80062c8:	08006371 	.word	0x08006371
 80062cc:	08006371 	.word	0x08006371
 80062d0:	08006371 	.word	0x08006371
 80062d4:	08006371 	.word	0x08006371
 80062d8:	08006371 	.word	0x08006371
 80062dc:	08006371 	.word	0x08006371
 80062e0:	08006371 	.word	0x08006371
 80062e4:	08006371 	.word	0x08006371
 80062e8:	08006371 	.word	0x08006371
 80062ec:	08006371 	.word	0x08006371
 80062f0:	08006351 	.word	0x08006351
 80062f4:	2b40      	cmp	r3, #64	; 0x40
 80062f6:	d02e      	beq.n	8006356 <UART_SetConfig+0xc1e>
 80062f8:	e03a      	b.n	8006370 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062fa:	f7fc fead 	bl	8003058 <HAL_RCC_GetPCLK1Freq>
 80062fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006300:	e03c      	b.n	800637c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006302:	f7fc febf 	bl	8003084 <HAL_RCC_GetPCLK2Freq>
 8006306:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006308:	e038      	b.n	800637c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800630a:	f107 0314 	add.w	r3, r7, #20
 800630e:	4618      	mov	r0, r3
 8006310:	f7fd fe32 	bl	8003f78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006318:	e030      	b.n	800637c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800631a:	f107 0308 	add.w	r3, r7, #8
 800631e:	4618      	mov	r0, r3
 8006320:	f7fd ff7e 	bl	8004220 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006328:	e028      	b.n	800637c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800632a:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <UART_SetConfig+0xc2c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b00      	cmp	r3, #0
 8006334:	d009      	beq.n	800634a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006336:	4b0b      	ldr	r3, [pc, #44]	; (8006364 <UART_SetConfig+0xc2c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	08db      	lsrs	r3, r3, #3
 800633c:	f003 0303 	and.w	r3, r3, #3
 8006340:	4a09      	ldr	r2, [pc, #36]	; (8006368 <UART_SetConfig+0xc30>)
 8006342:	fa22 f303 	lsr.w	r3, r2, r3
 8006346:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006348:	e018      	b.n	800637c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800634a:	4b07      	ldr	r3, [pc, #28]	; (8006368 <UART_SetConfig+0xc30>)
 800634c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800634e:	e015      	b.n	800637c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006350:	4b06      	ldr	r3, [pc, #24]	; (800636c <UART_SetConfig+0xc34>)
 8006352:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006354:	e012      	b.n	800637c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800635a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800635c:	e00e      	b.n	800637c <UART_SetConfig+0xc44>
 800635e:	bf00      	nop
 8006360:	0800a9f4 	.word	0x0800a9f4
 8006364:	58024400 	.word	0x58024400
 8006368:	03d09000 	.word	0x03d09000
 800636c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800637a:	bf00      	nop
    }

    if (pclk != 0U)
 800637c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d021      	beq.n	80063c6 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	4a1a      	ldr	r2, [pc, #104]	; (80063f0 <UART_SetConfig+0xcb8>)
 8006388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800638c:	461a      	mov	r2, r3
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	fbb3 f2f2 	udiv	r2, r3, r2
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	085b      	lsrs	r3, r3, #1
 800639a:	441a      	add	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a8:	2b0f      	cmp	r3, #15
 80063aa:	d909      	bls.n	80063c0 <UART_SetConfig+0xc88>
 80063ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063b2:	d205      	bcs.n	80063c0 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	60da      	str	r2, [r3, #12]
 80063be:	e002      	b.n	80063c6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80063e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3738      	adds	r7, #56	; 0x38
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bdb0      	pop	{r4, r5, r7, pc}
 80063ee:	bf00      	nop
 80063f0:	0800a9f4 	.word	0x0800a9f4

080063f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006466:	f003 0308 	and.w	r3, r3, #8
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01a      	beq.n	800650a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064f2:	d10a      	bne.n	800650a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	605a      	str	r2, [r3, #4]
  }
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af02      	add	r7, sp, #8
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006548:	f7fa fd96 	bl	8001078 <HAL_GetTick>
 800654c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b08      	cmp	r3, #8
 800655a:	d10e      	bne.n	800657a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800655c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f82f 	bl	80065ce <UART_WaitOnFlagUntilTimeout>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e025      	b.n	80065c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b04      	cmp	r3, #4
 8006586:	d10e      	bne.n	80065a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006588:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f819 	bl	80065ce <UART_WaitOnFlagUntilTimeout>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e00f      	b.n	80065c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b09c      	sub	sp, #112	; 0x70
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	603b      	str	r3, [r7, #0]
 80065da:	4613      	mov	r3, r2
 80065dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065de:	e0a9      	b.n	8006734 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065e6:	f000 80a5 	beq.w	8006734 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ea:	f7fa fd45 	bl	8001078 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d302      	bcc.n	8006600 <UART_WaitOnFlagUntilTimeout+0x32>
 80065fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d140      	bne.n	8006682 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800660e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006610:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006614:	667b      	str	r3, [r7, #100]	; 0x64
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	461a      	mov	r2, r3
 800661c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800661e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006620:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006622:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006624:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006626:	e841 2300 	strex	r3, r2, [r1]
 800662a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800662c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1e6      	bne.n	8006600 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3308      	adds	r3, #8
 8006638:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006644:	f023 0301 	bic.w	r3, r3, #1
 8006648:	663b      	str	r3, [r7, #96]	; 0x60
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3308      	adds	r3, #8
 8006650:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006652:	64ba      	str	r2, [r7, #72]	; 0x48
 8006654:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006656:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800665a:	e841 2300 	strex	r3, r2, [r1]
 800665e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1e5      	bne.n	8006632 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2220      	movs	r2, #32
 800666a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2220      	movs	r2, #32
 8006672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e069      	b.n	8006756 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b00      	cmp	r3, #0
 800668e:	d051      	beq.n	8006734 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800669a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800669e:	d149      	bne.n	8006734 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b2:	e853 3f00 	ldrex	r3, [r3]
 80066b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	461a      	mov	r2, r3
 80066c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c8:	637b      	str	r3, [r7, #52]	; 0x34
 80066ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066d0:	e841 2300 	strex	r3, r2, [r1]
 80066d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1e6      	bne.n	80066aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3308      	adds	r3, #8
 80066e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	e853 3f00 	ldrex	r3, [r3]
 80066ea:	613b      	str	r3, [r7, #16]
   return(result);
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f023 0301 	bic.w	r3, r3, #1
 80066f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3308      	adds	r3, #8
 80066fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066fc:	623a      	str	r2, [r7, #32]
 80066fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	69f9      	ldr	r1, [r7, #28]
 8006702:	6a3a      	ldr	r2, [r7, #32]
 8006704:	e841 2300 	strex	r3, r2, [r1]
 8006708:	61bb      	str	r3, [r7, #24]
   return(result);
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e5      	bne.n	80066dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2220      	movs	r2, #32
 8006714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2220      	movs	r2, #32
 800671c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2220      	movs	r2, #32
 8006724:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e010      	b.n	8006756 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69da      	ldr	r2, [r3, #28]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	4013      	ands	r3, r2
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	429a      	cmp	r2, r3
 8006742:	bf0c      	ite	eq
 8006744:	2301      	moveq	r3, #1
 8006746:	2300      	movne	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	461a      	mov	r2, r3
 800674c:	79fb      	ldrb	r3, [r7, #7]
 800674e:	429a      	cmp	r2, r3
 8006750:	f43f af46 	beq.w	80065e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3770      	adds	r7, #112	; 0x70
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006760:	b480      	push	{r7}
 8006762:	b0a3      	sub	sp, #140	; 0x8c
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	4613      	mov	r3, r2
 800676c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	88fa      	ldrh	r2, [r7, #6]
 8006778:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	88fa      	ldrh	r2, [r7, #6]
 8006780:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006792:	d10e      	bne.n	80067b2 <UART_Start_Receive_IT+0x52>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d105      	bne.n	80067a8 <UART_Start_Receive_IT+0x48>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80067a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067a6:	e02d      	b.n	8006804 <UART_Start_Receive_IT+0xa4>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	22ff      	movs	r2, #255	; 0xff
 80067ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067b0:	e028      	b.n	8006804 <UART_Start_Receive_IT+0xa4>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10d      	bne.n	80067d6 <UART_Start_Receive_IT+0x76>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d104      	bne.n	80067cc <UART_Start_Receive_IT+0x6c>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	22ff      	movs	r2, #255	; 0xff
 80067c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067ca:	e01b      	b.n	8006804 <UART_Start_Receive_IT+0xa4>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	227f      	movs	r2, #127	; 0x7f
 80067d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067d4:	e016      	b.n	8006804 <UART_Start_Receive_IT+0xa4>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067de:	d10d      	bne.n	80067fc <UART_Start_Receive_IT+0x9c>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d104      	bne.n	80067f2 <UART_Start_Receive_IT+0x92>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	227f      	movs	r2, #127	; 0x7f
 80067ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067f0:	e008      	b.n	8006804 <UART_Start_Receive_IT+0xa4>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	223f      	movs	r2, #63	; 0x3f
 80067f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067fa:	e003      	b.n	8006804 <UART_Start_Receive_IT+0xa4>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2222      	movs	r2, #34	; 0x22
 8006810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3308      	adds	r3, #8
 800681a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800681e:	e853 3f00 	ldrex	r3, [r3]
 8006822:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006826:	f043 0301 	orr.w	r3, r3, #1
 800682a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3308      	adds	r3, #8
 8006834:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006838:	673a      	str	r2, [r7, #112]	; 0x70
 800683a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800683e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006846:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e3      	bne.n	8006814 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006854:	d153      	bne.n	80068fe <UART_Start_Receive_IT+0x19e>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800685c:	88fa      	ldrh	r2, [r7, #6]
 800685e:	429a      	cmp	r2, r3
 8006860:	d34d      	bcc.n	80068fe <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800686a:	d107      	bne.n	800687c <UART_Start_Receive_IT+0x11c>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d103      	bne.n	800687c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4a4b      	ldr	r2, [pc, #300]	; (80069a4 <UART_Start_Receive_IT+0x244>)
 8006878:	671a      	str	r2, [r3, #112]	; 0x70
 800687a:	e002      	b.n	8006882 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4a4a      	ldr	r2, [pc, #296]	; (80069a8 <UART_Start_Receive_IT+0x248>)
 8006880:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d01a      	beq.n	80068c8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800689a:	e853 3f00 	ldrex	r3, [r3]
 800689e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068b6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068bc:	e841 2300 	strex	r3, r2, [r1]
 80068c0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80068c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e4      	bne.n	8006892 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3308      	adds	r3, #8
 80068ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3308      	adds	r3, #8
 80068e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80068e8:	64ba      	str	r2, [r7, #72]	; 0x48
 80068ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e5      	bne.n	80068c8 <UART_Start_Receive_IT+0x168>
 80068fc:	e04a      	b.n	8006994 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006906:	d107      	bne.n	8006918 <UART_Start_Receive_IT+0x1b8>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d103      	bne.n	8006918 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4a26      	ldr	r2, [pc, #152]	; (80069ac <UART_Start_Receive_IT+0x24c>)
 8006914:	671a      	str	r2, [r3, #112]	; 0x70
 8006916:	e002      	b.n	800691e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4a25      	ldr	r2, [pc, #148]	; (80069b0 <UART_Start_Receive_IT+0x250>)
 800691c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d019      	beq.n	8006962 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006936:	e853 3f00 	ldrex	r3, [r3]
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006942:	677b      	str	r3, [r7, #116]	; 0x74
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	461a      	mov	r2, r3
 800694a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800694c:	637b      	str	r3, [r7, #52]	; 0x34
 800694e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006950:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006954:	e841 2300 	strex	r3, r2, [r1]
 8006958:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1e6      	bne.n	800692e <UART_Start_Receive_IT+0x1ce>
 8006960:	e018      	b.n	8006994 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	e853 3f00 	ldrex	r3, [r3]
 800696e:	613b      	str	r3, [r7, #16]
   return(result);
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f043 0320 	orr.w	r3, r3, #32
 8006976:	67bb      	str	r3, [r7, #120]	; 0x78
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	461a      	mov	r2, r3
 800697e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006980:	623b      	str	r3, [r7, #32]
 8006982:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006984:	69f9      	ldr	r1, [r7, #28]
 8006986:	6a3a      	ldr	r2, [r7, #32]
 8006988:	e841 2300 	strex	r3, r2, [r1]
 800698c:	61bb      	str	r3, [r7, #24]
   return(result);
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1e6      	bne.n	8006962 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	378c      	adds	r7, #140	; 0x8c
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	080070bd 	.word	0x080070bd
 80069a8:	08006dc5 	.word	0x08006dc5
 80069ac:	08006c63 	.word	0x08006c63
 80069b0:	08006b03 	.word	0x08006b03

080069b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b095      	sub	sp, #84	; 0x54
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069da:	643b      	str	r3, [r7, #64]	; 0x40
 80069dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069e2:	e841 2300 	strex	r3, r2, [r1]
 80069e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e6      	bne.n	80069bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3308      	adds	r3, #8
 80069f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80069fe:	69fa      	ldr	r2, [r7, #28]
 8006a00:	4b1e      	ldr	r3, [pc, #120]	; (8006a7c <UART_EndRxTransfer+0xc8>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e5      	bne.n	80069ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d118      	bne.n	8006a5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	e853 3f00 	ldrex	r3, [r3]
 8006a36:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f023 0310 	bic.w	r3, r3, #16
 8006a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	461a      	mov	r2, r3
 8006a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a48:	61bb      	str	r3, [r7, #24]
 8006a4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4c:	6979      	ldr	r1, [r7, #20]
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	e841 2300 	strex	r3, r2, [r1]
 8006a54:	613b      	str	r3, [r7, #16]
   return(result);
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1e6      	bne.n	8006a2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006a70:	bf00      	nop
 8006a72:	3754      	adds	r7, #84	; 0x54
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	effffffe 	.word	0xeffffffe

08006a80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f7fe fe34 	bl	800570c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aa4:	bf00      	nop
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b088      	sub	sp, #32
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	61bb      	str	r3, [r7, #24]
 8006ad4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	6979      	ldr	r1, [r7, #20]
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	e841 2300 	strex	r3, r2, [r1]
 8006ade:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e6      	bne.n	8006ab4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7fe fdff 	bl	80056f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006afa:	bf00      	nop
 8006afc:	3720      	adds	r7, #32
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b096      	sub	sp, #88	; 0x58
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b10:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1a:	2b22      	cmp	r3, #34	; 0x22
 8006b1c:	f040 8095 	bne.w	8006c4a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b2a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006b2e:	b2d9      	uxtb	r1, r3
 8006b30:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b3a:	400a      	ands	r2, r1
 8006b3c:	b2d2      	uxtb	r2, r2
 8006b3e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	3b01      	subs	r3, #1
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d178      	bne.n	8006c5a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b7c:	653b      	str	r3, [r7, #80]	; 0x50
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b86:	647b      	str	r3, [r7, #68]	; 0x44
 8006b88:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e6      	bne.n	8006b68 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3308      	adds	r3, #8
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	e853 3f00 	ldrex	r3, [r3]
 8006ba8:	623b      	str	r3, [r7, #32]
   return(result);
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	f023 0301 	bic.w	r3, r3, #1
 8006bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3308      	adds	r3, #8
 8006bb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bba:	633a      	str	r2, [r7, #48]	; 0x30
 8006bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e5      	bne.n	8006b9a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d12e      	bne.n	8006c42 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	e853 3f00 	ldrex	r3, [r3]
 8006bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 0310 	bic.w	r3, r3, #16
 8006bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c08:	61fb      	str	r3, [r7, #28]
 8006c0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0c:	69b9      	ldr	r1, [r7, #24]
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	e841 2300 	strex	r3, r2, [r1]
 8006c14:	617b      	str	r3, [r7, #20]
   return(result);
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e6      	bne.n	8006bea <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	f003 0310 	and.w	r3, r3, #16
 8006c26:	2b10      	cmp	r3, #16
 8006c28:	d103      	bne.n	8006c32 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2210      	movs	r2, #16
 8006c30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c38:	4619      	mov	r1, r3
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7fe fd70 	bl	8005720 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c40:	e00b      	b.n	8006c5a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fa f976 	bl	8000f34 <HAL_UART_RxCpltCallback>
}
 8006c48:	e007      	b.n	8006c5a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	699a      	ldr	r2, [r3, #24]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f042 0208 	orr.w	r2, r2, #8
 8006c58:	619a      	str	r2, [r3, #24]
}
 8006c5a:	bf00      	nop
 8006c5c:	3758      	adds	r7, #88	; 0x58
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b096      	sub	sp, #88	; 0x58
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7a:	2b22      	cmp	r3, #34	; 0x22
 8006c7c:	f040 8095 	bne.w	8006daa <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c8e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006c90:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006c94:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006c98:	4013      	ands	r3, r2
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c9e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca4:	1c9a      	adds	r2, r3, #2
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d178      	bne.n	8006dba <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ce6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ce8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e6      	bne.n	8006cc8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3308      	adds	r3, #8
 8006d00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	f023 0301 	bic.w	r3, r3, #1
 8006d10:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3308      	adds	r3, #8
 8006d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e5      	bne.n	8006cfa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2220      	movs	r2, #32
 8006d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d12e      	bne.n	8006da2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	e853 3f00 	ldrex	r3, [r3]
 8006d56:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	f023 0310 	bic.w	r3, r3, #16
 8006d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	461a      	mov	r2, r3
 8006d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d68:	61bb      	str	r3, [r7, #24]
 8006d6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6c:	6979      	ldr	r1, [r7, #20]
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	e841 2300 	strex	r3, r2, [r1]
 8006d74:	613b      	str	r3, [r7, #16]
   return(result);
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1e6      	bne.n	8006d4a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	f003 0310 	and.w	r3, r3, #16
 8006d86:	2b10      	cmp	r3, #16
 8006d88:	d103      	bne.n	8006d92 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2210      	movs	r2, #16
 8006d90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fe fcc0 	bl	8005720 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006da0:	e00b      	b.n	8006dba <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7fa f8c6 	bl	8000f34 <HAL_UART_RxCpltCallback>
}
 8006da8:	e007      	b.n	8006dba <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	699a      	ldr	r2, [r3, #24]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f042 0208 	orr.w	r2, r2, #8
 8006db8:	619a      	str	r2, [r3, #24]
}
 8006dba:	bf00      	nop
 8006dbc:	3758      	adds	r7, #88	; 0x58
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
	...

08006dc4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b0a6      	sub	sp, #152	; 0x98
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006dd2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dfa:	2b22      	cmp	r3, #34	; 0x22
 8006dfc:	f040 814d 	bne.w	800709a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e06:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e0a:	e0f4      	b.n	8006ff6 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e16:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006e1a:	b2d9      	uxtb	r1, r3
 8006e1c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e26:	400a      	ands	r2, r1
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006e52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d053      	beq.n	8006f06 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d011      	beq.n	8006e8e <UART_RxISR_8BIT_FIFOEN+0xca>
 8006e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00b      	beq.n	8006e8e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e84:	f043 0201 	orr.w	r2, r3, #1
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d011      	beq.n	8006ebe <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006e9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00b      	beq.n	8006ebe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eb4:	f043 0204 	orr.w	r2, r3, #4
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ebe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ec2:	f003 0304 	and.w	r3, r3, #4
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d011      	beq.n	8006eee <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006eca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00b      	beq.n	8006eee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2204      	movs	r2, #4
 8006edc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ee4:	f043 0202 	orr.w	r2, r3, #2
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d006      	beq.n	8006f06 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f7fe fc07 	bl	800570c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d171      	bne.n	8006ff6 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006f20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f34:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f36:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006f3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006f42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e4      	bne.n	8006f12 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3308      	adds	r3, #8
 8006f4e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f52:	e853 3f00 	ldrex	r3, [r3]
 8006f56:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006f58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f5a:	4b56      	ldr	r3, [pc, #344]	; (80070b4 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3308      	adds	r3, #8
 8006f66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006f68:	657a      	str	r2, [r7, #84]	; 0x54
 8006f6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f70:	e841 2300 	strex	r3, r2, [r1]
 8006f74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e5      	bne.n	8006f48 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d12e      	bne.n	8006ff0 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	f023 0310 	bic.w	r3, r3, #16
 8006fac:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fb6:	643b      	str	r3, [r7, #64]	; 0x40
 8006fb8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fbe:	e841 2300 	strex	r3, r2, [r1]
 8006fc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1e6      	bne.n	8006f98 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	f003 0310 	and.w	r3, r3, #16
 8006fd4:	2b10      	cmp	r3, #16
 8006fd6:	d103      	bne.n	8006fe0 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2210      	movs	r2, #16
 8006fde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7fe fb99 	bl	8005720 <HAL_UARTEx_RxEventCallback>
 8006fee:	e002      	b.n	8006ff6 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7f9 ff9f 	bl	8000f34 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ff6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d006      	beq.n	800700c <UART_RxISR_8BIT_FIFOEN+0x248>
 8006ffe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007002:	f003 0320 	and.w	r3, r3, #32
 8007006:	2b00      	cmp	r3, #0
 8007008:	f47f af00 	bne.w	8006e0c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007012:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007016:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800701a:	2b00      	cmp	r3, #0
 800701c:	d045      	beq.n	80070aa <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007024:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007028:	429a      	cmp	r2, r3
 800702a:	d23e      	bcs.n	80070aa <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3308      	adds	r3, #8
 8007032:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	e853 3f00 	ldrex	r3, [r3]
 800703a:	61fb      	str	r3, [r7, #28]
   return(result);
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007042:	673b      	str	r3, [r7, #112]	; 0x70
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3308      	adds	r3, #8
 800704a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800704c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800704e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007054:	e841 2300 	strex	r3, r2, [r1]
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e5      	bne.n	800702c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a15      	ldr	r2, [pc, #84]	; (80070b8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007064:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	e853 3f00 	ldrex	r3, [r3]
 8007072:	60bb      	str	r3, [r7, #8]
   return(result);
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	f043 0320 	orr.w	r3, r3, #32
 800707a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	461a      	mov	r2, r3
 8007082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007084:	61bb      	str	r3, [r7, #24]
 8007086:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007088:	6979      	ldr	r1, [r7, #20]
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	e841 2300 	strex	r3, r2, [r1]
 8007090:	613b      	str	r3, [r7, #16]
   return(result);
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1e6      	bne.n	8007066 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007098:	e007      	b.n	80070aa <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	699a      	ldr	r2, [r3, #24]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f042 0208 	orr.w	r2, r2, #8
 80070a8:	619a      	str	r2, [r3, #24]
}
 80070aa:	bf00      	nop
 80070ac:	3798      	adds	r7, #152	; 0x98
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	effffffe 	.word	0xeffffffe
 80070b8:	08006b03 	.word	0x08006b03

080070bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b0a8      	sub	sp, #160	; 0xa0
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80070ca:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f2:	2b22      	cmp	r3, #34	; 0x22
 80070f4:	f040 8151 	bne.w	800739a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80070fe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007102:	e0f8      	b.n	80072f6 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007112:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007116:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800711a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800711e:	4013      	ands	r3, r2
 8007120:	b29a      	uxth	r2, r3
 8007122:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007126:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712c:	1c9a      	adds	r2, r3, #2
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800714e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	2b00      	cmp	r3, #0
 8007158:	d053      	beq.n	8007202 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800715a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d011      	beq.n	800718a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007166:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800716a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00b      	beq.n	800718a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2201      	movs	r2, #1
 8007178:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007180:	f043 0201 	orr.w	r2, r3, #1
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800718a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d011      	beq.n	80071ba <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007196:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00b      	beq.n	80071ba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2202      	movs	r2, #2
 80071a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071b0:	f043 0204 	orr.w	r2, r3, #4
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d011      	beq.n	80071ea <UART_RxISR_16BIT_FIFOEN+0x12e>
 80071c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00b      	beq.n	80071ea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2204      	movs	r2, #4
 80071d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071e0:	f043 0202 	orr.w	r2, r3, #2
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d006      	beq.n	8007202 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7fe fa89 	bl	800570c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007208:	b29b      	uxth	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d173      	bne.n	80072f6 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007214:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007216:	e853 3f00 	ldrex	r3, [r3]
 800721a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800721c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800721e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007222:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007230:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007232:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007236:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007238:	e841 2300 	strex	r3, r2, [r1]
 800723c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800723e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e4      	bne.n	800720e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3308      	adds	r3, #8
 800724a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007254:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007256:	4b57      	ldr	r3, [pc, #348]	; (80073b4 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8007258:	4013      	ands	r3, r2
 800725a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3308      	adds	r3, #8
 8007264:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007268:	65ba      	str	r2, [r7, #88]	; 0x58
 800726a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800726e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007270:	e841 2300 	strex	r3, r2, [r1]
 8007274:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1e3      	bne.n	8007244 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2220      	movs	r2, #32
 8007280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800728e:	2b01      	cmp	r3, #1
 8007290:	d12e      	bne.n	80072f0 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a8:	f023 0310 	bic.w	r3, r3, #16
 80072ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072b6:	647b      	str	r3, [r7, #68]	; 0x44
 80072b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072be:	e841 2300 	strex	r3, r2, [r1]
 80072c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1e6      	bne.n	8007298 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	f003 0310 	and.w	r3, r3, #16
 80072d4:	2b10      	cmp	r3, #16
 80072d6:	d103      	bne.n	80072e0 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2210      	movs	r2, #16
 80072de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7fe fa19 	bl	8005720 <HAL_UARTEx_RxEventCallback>
 80072ee:	e002      	b.n	80072f6 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7f9 fe1f 	bl	8000f34 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d006      	beq.n	800730c <UART_RxISR_16BIT_FIFOEN+0x250>
 80072fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007302:	f003 0320 	and.w	r3, r3, #32
 8007306:	2b00      	cmp	r3, #0
 8007308:	f47f aefc 	bne.w	8007104 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007312:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007316:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800731a:	2b00      	cmp	r3, #0
 800731c:	d045      	beq.n	80073aa <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007324:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007328:	429a      	cmp	r2, r3
 800732a:	d23e      	bcs.n	80073aa <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3308      	adds	r3, #8
 8007332:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	e853 3f00 	ldrex	r3, [r3]
 800733a:	623b      	str	r3, [r7, #32]
   return(result);
 800733c:	6a3b      	ldr	r3, [r7, #32]
 800733e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007342:	677b      	str	r3, [r7, #116]	; 0x74
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3308      	adds	r3, #8
 800734a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800734c:	633a      	str	r2, [r7, #48]	; 0x30
 800734e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007350:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007354:	e841 2300 	strex	r3, r2, [r1]
 8007358:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800735a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e5      	bne.n	800732c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a15      	ldr	r2, [pc, #84]	; (80073b8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007364:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	e853 3f00 	ldrex	r3, [r3]
 8007372:	60fb      	str	r3, [r7, #12]
   return(result);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f043 0320 	orr.w	r3, r3, #32
 800737a:	673b      	str	r3, [r7, #112]	; 0x70
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	461a      	mov	r2, r3
 8007382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007384:	61fb      	str	r3, [r7, #28]
 8007386:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007388:	69b9      	ldr	r1, [r7, #24]
 800738a:	69fa      	ldr	r2, [r7, #28]
 800738c:	e841 2300 	strex	r3, r2, [r1]
 8007390:	617b      	str	r3, [r7, #20]
   return(result);
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1e6      	bne.n	8007366 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007398:	e007      	b.n	80073aa <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	699a      	ldr	r2, [r3, #24]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f042 0208 	orr.w	r2, r2, #8
 80073a8:	619a      	str	r2, [r3, #24]
}
 80073aa:	bf00      	nop
 80073ac:	37a0      	adds	r7, #160	; 0xa0
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	effffffe 	.word	0xeffffffe
 80073b8:	08006c63 	.word	0x08006c63

080073bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007406:	2b01      	cmp	r3, #1
 8007408:	d101      	bne.n	800740e <HAL_UARTEx_DisableFifoMode+0x16>
 800740a:	2302      	movs	r3, #2
 800740c:	e027      	b.n	800745e <HAL_UARTEx_DisableFifoMode+0x66>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2224      	movs	r2, #36	; 0x24
 800741a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 0201 	bic.w	r2, r2, #1
 8007434:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800743c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800747a:	2b01      	cmp	r3, #1
 800747c:	d101      	bne.n	8007482 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800747e:	2302      	movs	r3, #2
 8007480:	e02d      	b.n	80074de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2224      	movs	r2, #36	; 0x24
 800748e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0201 	bic.w	r2, r2, #1
 80074a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f850 	bl	8007564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d101      	bne.n	80074fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074fa:	2302      	movs	r3, #2
 80074fc:	e02d      	b.n	800755a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2224      	movs	r2, #36	; 0x24
 800750a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0201 	bic.w	r2, r2, #1
 8007524:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f812 	bl	8007564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2220      	movs	r2, #32
 800754c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
	...

08007564 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007570:	2b00      	cmp	r3, #0
 8007572:	d108      	bne.n	8007586 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007584:	e031      	b.n	80075ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007586:	2310      	movs	r3, #16
 8007588:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800758a:	2310      	movs	r3, #16
 800758c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	0e5b      	lsrs	r3, r3, #25
 8007596:	b2db      	uxtb	r3, r3
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	0f5b      	lsrs	r3, r3, #29
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075ae:	7bbb      	ldrb	r3, [r7, #14]
 80075b0:	7b3a      	ldrb	r2, [r7, #12]
 80075b2:	4911      	ldr	r1, [pc, #68]	; (80075f8 <UARTEx_SetNbDataToProcess+0x94>)
 80075b4:	5c8a      	ldrb	r2, [r1, r2]
 80075b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075ba:	7b3a      	ldrb	r2, [r7, #12]
 80075bc:	490f      	ldr	r1, [pc, #60]	; (80075fc <UARTEx_SetNbDataToProcess+0x98>)
 80075be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
 80075ce:	7b7a      	ldrb	r2, [r7, #13]
 80075d0:	4909      	ldr	r1, [pc, #36]	; (80075f8 <UARTEx_SetNbDataToProcess+0x94>)
 80075d2:	5c8a      	ldrb	r2, [r1, r2]
 80075d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075d8:	7b7a      	ldrb	r2, [r7, #13]
 80075da:	4908      	ldr	r1, [pc, #32]	; (80075fc <UARTEx_SetNbDataToProcess+0x98>)
 80075dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075de:	fb93 f3f2 	sdiv	r3, r3, r2
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80075ea:	bf00      	nop
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	0800aa0c 	.word	0x0800aa0c
 80075fc:	0800aa14 	.word	0x0800aa14

08007600 <__NVIC_SetPriority>:
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	4603      	mov	r3, r0
 8007608:	6039      	str	r1, [r7, #0]
 800760a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800760c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007610:	2b00      	cmp	r3, #0
 8007612:	db0a      	blt.n	800762a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	b2da      	uxtb	r2, r3
 8007618:	490c      	ldr	r1, [pc, #48]	; (800764c <__NVIC_SetPriority+0x4c>)
 800761a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800761e:	0112      	lsls	r2, r2, #4
 8007620:	b2d2      	uxtb	r2, r2
 8007622:	440b      	add	r3, r1
 8007624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007628:	e00a      	b.n	8007640 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	b2da      	uxtb	r2, r3
 800762e:	4908      	ldr	r1, [pc, #32]	; (8007650 <__NVIC_SetPriority+0x50>)
 8007630:	88fb      	ldrh	r3, [r7, #6]
 8007632:	f003 030f 	and.w	r3, r3, #15
 8007636:	3b04      	subs	r3, #4
 8007638:	0112      	lsls	r2, r2, #4
 800763a:	b2d2      	uxtb	r2, r2
 800763c:	440b      	add	r3, r1
 800763e:	761a      	strb	r2, [r3, #24]
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	e000e100 	.word	0xe000e100
 8007650:	e000ed00 	.word	0xe000ed00

08007654 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007654:	b580      	push	{r7, lr}
 8007656:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007658:	4b05      	ldr	r3, [pc, #20]	; (8007670 <SysTick_Handler+0x1c>)
 800765a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800765c:	f001 ff12 	bl	8009484 <xTaskGetSchedulerState>
 8007660:	4603      	mov	r3, r0
 8007662:	2b01      	cmp	r3, #1
 8007664:	d001      	beq.n	800766a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007666:	f002 fcf7 	bl	800a058 <xPortSysTickHandler>
  }
}
 800766a:	bf00      	nop
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	e000e010 	.word	0xe000e010

08007674 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007678:	2100      	movs	r1, #0
 800767a:	f06f 0004 	mvn.w	r0, #4
 800767e:	f7ff ffbf 	bl	8007600 <__NVIC_SetPriority>
#endif
}
 8007682:	bf00      	nop
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800768e:	f3ef 8305 	mrs	r3, IPSR
 8007692:	603b      	str	r3, [r7, #0]
  return(result);
 8007694:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800769a:	f06f 0305 	mvn.w	r3, #5
 800769e:	607b      	str	r3, [r7, #4]
 80076a0:	e00c      	b.n	80076bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80076a2:	4b0a      	ldr	r3, [pc, #40]	; (80076cc <osKernelInitialize+0x44>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d105      	bne.n	80076b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80076aa:	4b08      	ldr	r3, [pc, #32]	; (80076cc <osKernelInitialize+0x44>)
 80076ac:	2201      	movs	r2, #1
 80076ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	607b      	str	r3, [r7, #4]
 80076b4:	e002      	b.n	80076bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80076b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80076bc:	687b      	ldr	r3, [r7, #4]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	240000a0 	.word	0x240000a0

080076d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076d6:	f3ef 8305 	mrs	r3, IPSR
 80076da:	603b      	str	r3, [r7, #0]
  return(result);
 80076dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80076e2:	f06f 0305 	mvn.w	r3, #5
 80076e6:	607b      	str	r3, [r7, #4]
 80076e8:	e010      	b.n	800770c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80076ea:	4b0b      	ldr	r3, [pc, #44]	; (8007718 <osKernelStart+0x48>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d109      	bne.n	8007706 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80076f2:	f7ff ffbf 	bl	8007674 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80076f6:	4b08      	ldr	r3, [pc, #32]	; (8007718 <osKernelStart+0x48>)
 80076f8:	2202      	movs	r2, #2
 80076fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80076fc:	f001 fa66 	bl	8008bcc <vTaskStartScheduler>
      stat = osOK;
 8007700:	2300      	movs	r3, #0
 8007702:	607b      	str	r3, [r7, #4]
 8007704:	e002      	b.n	800770c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800770a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800770c:	687b      	ldr	r3, [r7, #4]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	240000a0 	.word	0x240000a0

0800771c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800771c:	b580      	push	{r7, lr}
 800771e:	b08e      	sub	sp, #56	; 0x38
 8007720:	af04      	add	r7, sp, #16
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007728:	2300      	movs	r3, #0
 800772a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800772c:	f3ef 8305 	mrs	r3, IPSR
 8007730:	617b      	str	r3, [r7, #20]
  return(result);
 8007732:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007734:	2b00      	cmp	r3, #0
 8007736:	d17e      	bne.n	8007836 <osThreadNew+0x11a>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d07b      	beq.n	8007836 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800773e:	2380      	movs	r3, #128	; 0x80
 8007740:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007742:	2318      	movs	r3, #24
 8007744:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800774a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800774e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d045      	beq.n	80077e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <osThreadNew+0x48>
        name = attr->name;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d008      	beq.n	800778a <osThreadNew+0x6e>
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	2b38      	cmp	r3, #56	; 0x38
 800777c:	d805      	bhi.n	800778a <osThreadNew+0x6e>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <osThreadNew+0x72>
        return (NULL);
 800778a:	2300      	movs	r3, #0
 800778c:	e054      	b.n	8007838 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	089b      	lsrs	r3, r3, #2
 800779c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00e      	beq.n	80077c4 <osThreadNew+0xa8>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	2bbb      	cmp	r3, #187	; 0xbb
 80077ac:	d90a      	bls.n	80077c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d006      	beq.n	80077c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <osThreadNew+0xa8>
        mem = 1;
 80077be:	2301      	movs	r3, #1
 80077c0:	61bb      	str	r3, [r7, #24]
 80077c2:	e010      	b.n	80077e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10c      	bne.n	80077e6 <osThreadNew+0xca>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d108      	bne.n	80077e6 <osThreadNew+0xca>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d104      	bne.n	80077e6 <osThreadNew+0xca>
          mem = 0;
 80077dc:	2300      	movs	r3, #0
 80077de:	61bb      	str	r3, [r7, #24]
 80077e0:	e001      	b.n	80077e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d110      	bne.n	800780e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077f4:	9202      	str	r2, [sp, #8]
 80077f6:	9301      	str	r3, [sp, #4]
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	6a3a      	ldr	r2, [r7, #32]
 8007800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f000 fff6 	bl	80087f4 <xTaskCreateStatic>
 8007808:	4603      	mov	r3, r0
 800780a:	613b      	str	r3, [r7, #16]
 800780c:	e013      	b.n	8007836 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d110      	bne.n	8007836 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	b29a      	uxth	r2, r3
 8007818:	f107 0310 	add.w	r3, r7, #16
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f001 f841 	bl	80088ae <xTaskCreate>
 800782c:	4603      	mov	r3, r0
 800782e:	2b01      	cmp	r3, #1
 8007830:	d001      	beq.n	8007836 <osThreadNew+0x11a>
            hTask = NULL;
 8007832:	2300      	movs	r3, #0
 8007834:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007836:	693b      	ldr	r3, [r7, #16]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3728      	adds	r7, #40	; 0x28
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007848:	f3ef 8305 	mrs	r3, IPSR
 800784c:	60bb      	str	r3, [r7, #8]
  return(result);
 800784e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <osDelay+0x1c>
    stat = osErrorISR;
 8007854:	f06f 0305 	mvn.w	r3, #5
 8007858:	60fb      	str	r3, [r7, #12]
 800785a:	e007      	b.n	800786c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800785c:	2300      	movs	r3, #0
 800785e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f001 f97c 	bl	8008b64 <vTaskDelay>
    }
  }

  return (stat);
 800786c:	68fb      	ldr	r3, [r7, #12]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007876:	b580      	push	{r7, lr}
 8007878:	b08a      	sub	sp, #40	; 0x28
 800787a:	af02      	add	r7, sp, #8
 800787c:	60f8      	str	r0, [r7, #12]
 800787e:	60b9      	str	r1, [r7, #8]
 8007880:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007882:	2300      	movs	r3, #0
 8007884:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007886:	f3ef 8305 	mrs	r3, IPSR
 800788a:	613b      	str	r3, [r7, #16]
  return(result);
 800788c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800788e:	2b00      	cmp	r3, #0
 8007890:	d15f      	bne.n	8007952 <osMessageQueueNew+0xdc>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d05c      	beq.n	8007952 <osMessageQueueNew+0xdc>
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d059      	beq.n	8007952 <osMessageQueueNew+0xdc>
    mem = -1;
 800789e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d029      	beq.n	80078fe <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d012      	beq.n	80078d8 <osMessageQueueNew+0x62>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	2b4f      	cmp	r3, #79	; 0x4f
 80078b8:	d90e      	bls.n	80078d8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	695a      	ldr	r2, [r3, #20]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	68b9      	ldr	r1, [r7, #8]
 80078ca:	fb01 f303 	mul.w	r3, r1, r3
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d302      	bcc.n	80078d8 <osMessageQueueNew+0x62>
        mem = 1;
 80078d2:	2301      	movs	r3, #1
 80078d4:	61bb      	str	r3, [r7, #24]
 80078d6:	e014      	b.n	8007902 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d110      	bne.n	8007902 <osMessageQueueNew+0x8c>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10c      	bne.n	8007902 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d108      	bne.n	8007902 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d104      	bne.n	8007902 <osMessageQueueNew+0x8c>
          mem = 0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	61bb      	str	r3, [r7, #24]
 80078fc:	e001      	b.n	8007902 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80078fe:	2300      	movs	r3, #0
 8007900:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d10b      	bne.n	8007920 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	691a      	ldr	r2, [r3, #16]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	2100      	movs	r1, #0
 8007912:	9100      	str	r1, [sp, #0]
 8007914:	68b9      	ldr	r1, [r7, #8]
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 fa2e 	bl	8007d78 <xQueueGenericCreateStatic>
 800791c:	61f8      	str	r0, [r7, #28]
 800791e:	e008      	b.n	8007932 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d105      	bne.n	8007932 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007926:	2200      	movs	r2, #0
 8007928:	68b9      	ldr	r1, [r7, #8]
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 fa9c 	bl	8007e68 <xQueueGenericCreate>
 8007930:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00c      	beq.n	8007952 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <osMessageQueueNew+0xd0>
        name = attr->name;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	617b      	str	r3, [r7, #20]
 8007944:	e001      	b.n	800794a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007946:	2300      	movs	r3, #0
 8007948:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800794a:	6979      	ldr	r1, [r7, #20]
 800794c:	69f8      	ldr	r0, [r7, #28]
 800794e:	f000 fef3 	bl	8008738 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007952:	69fb      	ldr	r3, [r7, #28]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3720      	adds	r7, #32
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	603b      	str	r3, [r7, #0]
 8007968:	4613      	mov	r3, r2
 800796a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007970:	2300      	movs	r3, #0
 8007972:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007974:	f3ef 8305 	mrs	r3, IPSR
 8007978:	617b      	str	r3, [r7, #20]
  return(result);
 800797a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800797c:	2b00      	cmp	r3, #0
 800797e:	d028      	beq.n	80079d2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d005      	beq.n	8007992 <osMessageQueuePut+0x36>
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <osMessageQueuePut+0x36>
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007992:	f06f 0303 	mvn.w	r3, #3
 8007996:	61fb      	str	r3, [r7, #28]
 8007998:	e038      	b.n	8007a0c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800799a:	2300      	movs	r3, #0
 800799c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800799e:	f107 0210 	add.w	r2, r7, #16
 80079a2:	2300      	movs	r3, #0
 80079a4:	68b9      	ldr	r1, [r7, #8]
 80079a6:	69b8      	ldr	r0, [r7, #24]
 80079a8:	f000 fbba 	bl	8008120 <xQueueGenericSendFromISR>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d003      	beq.n	80079ba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80079b2:	f06f 0302 	mvn.w	r3, #2
 80079b6:	61fb      	str	r3, [r7, #28]
 80079b8:	e028      	b.n	8007a0c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d025      	beq.n	8007a0c <osMessageQueuePut+0xb0>
 80079c0:	4b15      	ldr	r3, [pc, #84]	; (8007a18 <osMessageQueuePut+0xbc>)
 80079c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	e01c      	b.n	8007a0c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <osMessageQueuePut+0x82>
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d103      	bne.n	80079e6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80079de:	f06f 0303 	mvn.w	r3, #3
 80079e2:	61fb      	str	r3, [r7, #28]
 80079e4:	e012      	b.n	8007a0c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80079e6:	2300      	movs	r3, #0
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	68b9      	ldr	r1, [r7, #8]
 80079ec:	69b8      	ldr	r0, [r7, #24]
 80079ee:	f000 fa99 	bl	8007f24 <xQueueGenericSend>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d009      	beq.n	8007a0c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d003      	beq.n	8007a06 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80079fe:	f06f 0301 	mvn.w	r3, #1
 8007a02:	61fb      	str	r3, [r7, #28]
 8007a04:	e002      	b.n	8007a0c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007a06:	f06f 0302 	mvn.w	r3, #2
 8007a0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007a0c:	69fb      	ldr	r3, [r7, #28]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3720      	adds	r7, #32
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	e000ed04 	.word	0xe000ed04

08007a1c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b088      	sub	sp, #32
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a32:	f3ef 8305 	mrs	r3, IPSR
 8007a36:	617b      	str	r3, [r7, #20]
  return(result);
 8007a38:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d028      	beq.n	8007a90 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d005      	beq.n	8007a50 <osMessageQueueGet+0x34>
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <osMessageQueueGet+0x34>
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d003      	beq.n	8007a58 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007a50:	f06f 0303 	mvn.w	r3, #3
 8007a54:	61fb      	str	r3, [r7, #28]
 8007a56:	e037      	b.n	8007ac8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007a5c:	f107 0310 	add.w	r3, r7, #16
 8007a60:	461a      	mov	r2, r3
 8007a62:	68b9      	ldr	r1, [r7, #8]
 8007a64:	69b8      	ldr	r0, [r7, #24]
 8007a66:	f000 fcd7 	bl	8008418 <xQueueReceiveFromISR>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d003      	beq.n	8007a78 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007a70:	f06f 0302 	mvn.w	r3, #2
 8007a74:	61fb      	str	r3, [r7, #28]
 8007a76:	e027      	b.n	8007ac8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d024      	beq.n	8007ac8 <osMessageQueueGet+0xac>
 8007a7e:	4b15      	ldr	r3, [pc, #84]	; (8007ad4 <osMessageQueueGet+0xb8>)
 8007a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	e01b      	b.n	8007ac8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <osMessageQueueGet+0x80>
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d103      	bne.n	8007aa4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007a9c:	f06f 0303 	mvn.w	r3, #3
 8007aa0:	61fb      	str	r3, [r7, #28]
 8007aa2:	e011      	b.n	8007ac8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	68b9      	ldr	r1, [r7, #8]
 8007aa8:	69b8      	ldr	r0, [r7, #24]
 8007aaa:	f000 fbd5 	bl	8008258 <xQueueReceive>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d009      	beq.n	8007ac8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007aba:	f06f 0301 	mvn.w	r3, #1
 8007abe:	61fb      	str	r3, [r7, #28]
 8007ac0:	e002      	b.n	8007ac8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007ac2:	f06f 0302 	mvn.w	r3, #2
 8007ac6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007ac8:	69fb      	ldr	r3, [r7, #28]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3720      	adds	r7, #32
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	e000ed04 	.word	0xe000ed04

08007ad8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	4a07      	ldr	r2, [pc, #28]	; (8007b04 <vApplicationGetIdleTaskMemory+0x2c>)
 8007ae8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	4a06      	ldr	r2, [pc, #24]	; (8007b08 <vApplicationGetIdleTaskMemory+0x30>)
 8007aee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2280      	movs	r2, #128	; 0x80
 8007af4:	601a      	str	r2, [r3, #0]
}
 8007af6:	bf00      	nop
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	240000a4 	.word	0x240000a4
 8007b08:	24000160 	.word	0x24000160

08007b0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	4a07      	ldr	r2, [pc, #28]	; (8007b38 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	4a06      	ldr	r2, [pc, #24]	; (8007b3c <vApplicationGetTimerTaskMemory+0x30>)
 8007b22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b2a:	601a      	str	r2, [r3, #0]
}
 8007b2c:	bf00      	nop
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	24000360 	.word	0x24000360
 8007b3c:	2400041c 	.word	0x2400041c

08007b40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f103 0208 	add.w	r2, r3, #8
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f103 0208 	add.w	r2, r3, #8
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f103 0208 	add.w	r2, r3, #8
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b8e:	bf00      	nop
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b085      	sub	sp, #20
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	1c5a      	adds	r2, r3, #1
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	601a      	str	r2, [r3, #0]
}
 8007bd6:	bf00      	nop
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bf8:	d103      	bne.n	8007c02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	e00c      	b.n	8007c1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	3308      	adds	r3, #8
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	e002      	b.n	8007c10 <vListInsert+0x2e>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d2f6      	bcs.n	8007c0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	1c5a      	adds	r2, r3, #1
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	601a      	str	r2, [r3, #0]
}
 8007c48:	bf00      	nop
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	6892      	ldr	r2, [r2, #8]
 8007c6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	6852      	ldr	r2, [r2, #4]
 8007c74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d103      	bne.n	8007c88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689a      	ldr	r2, [r3, #8]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	1e5a      	subs	r2, r3, #1
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10a      	bne.n	8007cd2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007cce:	bf00      	nop
 8007cd0:	e7fe      	b.n	8007cd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007cd2:	f002 f92f 	bl	8009f34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cde:	68f9      	ldr	r1, [r7, #12]
 8007ce0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ce2:	fb01 f303 	mul.w	r3, r1, r3
 8007ce6:	441a      	add	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d02:	3b01      	subs	r3, #1
 8007d04:	68f9      	ldr	r1, [r7, #12]
 8007d06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d08:	fb01 f303 	mul.w	r3, r1, r3
 8007d0c:	441a      	add	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	22ff      	movs	r2, #255	; 0xff
 8007d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	22ff      	movs	r2, #255	; 0xff
 8007d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d114      	bne.n	8007d52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d01a      	beq.n	8007d66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3310      	adds	r3, #16
 8007d34:	4618      	mov	r0, r3
 8007d36:	f001 f9e3 	bl	8009100 <xTaskRemoveFromEventList>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d012      	beq.n	8007d66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d40:	4b0c      	ldr	r3, [pc, #48]	; (8007d74 <xQueueGenericReset+0xcc>)
 8007d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	e009      	b.n	8007d66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	3310      	adds	r3, #16
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff fef2 	bl	8007b40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	3324      	adds	r3, #36	; 0x24
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7ff feed 	bl	8007b40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d66:	f002 f915 	bl	8009f94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d6a:	2301      	movs	r3, #1
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	e000ed04 	.word	0xe000ed04

08007d78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b08e      	sub	sp, #56	; 0x38
 8007d7c:	af02      	add	r7, sp, #8
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
 8007d84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10a      	bne.n	8007da2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d9e:	bf00      	nop
 8007da0:	e7fe      	b.n	8007da0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10a      	bne.n	8007dbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dba:	bf00      	nop
 8007dbc:	e7fe      	b.n	8007dbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <xQueueGenericCreateStatic+0x52>
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <xQueueGenericCreateStatic+0x56>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e000      	b.n	8007dd0 <xQueueGenericCreateStatic+0x58>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	623b      	str	r3, [r7, #32]
}
 8007de6:	bf00      	nop
 8007de8:	e7fe      	b.n	8007de8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d102      	bne.n	8007df6 <xQueueGenericCreateStatic+0x7e>
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <xQueueGenericCreateStatic+0x82>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e000      	b.n	8007dfc <xQueueGenericCreateStatic+0x84>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10a      	bne.n	8007e16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	61fb      	str	r3, [r7, #28]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e16:	2350      	movs	r3, #80	; 0x50
 8007e18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b50      	cmp	r3, #80	; 0x50
 8007e1e:	d00a      	beq.n	8007e36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	61bb      	str	r3, [r7, #24]
}
 8007e32:	bf00      	nop
 8007e34:	e7fe      	b.n	8007e34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00d      	beq.n	8007e5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	4613      	mov	r3, r2
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	68b9      	ldr	r1, [r7, #8]
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 f83f 	bl	8007edc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3730      	adds	r7, #48	; 0x30
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08a      	sub	sp, #40	; 0x28
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	4613      	mov	r3, r2
 8007e74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10a      	bne.n	8007e92 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	613b      	str	r3, [r7, #16]
}
 8007e8e:	bf00      	nop
 8007e90:	e7fe      	b.n	8007e90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	fb02 f303 	mul.w	r3, r2, r3
 8007e9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	3350      	adds	r3, #80	; 0x50
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f002 f969 	bl	800a178 <pvPortMalloc>
 8007ea6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d011      	beq.n	8007ed2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	3350      	adds	r3, #80	; 0x50
 8007eb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ec0:	79fa      	ldrb	r2, [r7, #7]
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 f805 	bl	8007edc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ed2:	69bb      	ldr	r3, [r7, #24]
	}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3720      	adds	r7, #32
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
 8007ee8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d103      	bne.n	8007ef8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	69ba      	ldr	r2, [r7, #24]
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	e002      	b.n	8007efe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	69b8      	ldr	r0, [r7, #24]
 8007f0e:	f7ff fecb 	bl	8007ca8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	78fa      	ldrb	r2, [r7, #3]
 8007f16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f1a:	bf00      	nop
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
	...

08007f24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b08e      	sub	sp, #56	; 0x38
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
 8007f30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f32:	2300      	movs	r3, #0
 8007f34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10a      	bne.n	8007f56 <xQueueGenericSend+0x32>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f52:	bf00      	nop
 8007f54:	e7fe      	b.n	8007f54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d103      	bne.n	8007f64 <xQueueGenericSend+0x40>
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <xQueueGenericSend+0x44>
 8007f64:	2301      	movs	r3, #1
 8007f66:	e000      	b.n	8007f6a <xQueueGenericSend+0x46>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10a      	bne.n	8007f84 <xQueueGenericSend+0x60>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f80:	bf00      	nop
 8007f82:	e7fe      	b.n	8007f82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d103      	bne.n	8007f92 <xQueueGenericSend+0x6e>
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d101      	bne.n	8007f96 <xQueueGenericSend+0x72>
 8007f92:	2301      	movs	r3, #1
 8007f94:	e000      	b.n	8007f98 <xQueueGenericSend+0x74>
 8007f96:	2300      	movs	r3, #0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10a      	bne.n	8007fb2 <xQueueGenericSend+0x8e>
	__asm volatile
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	623b      	str	r3, [r7, #32]
}
 8007fae:	bf00      	nop
 8007fb0:	e7fe      	b.n	8007fb0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fb2:	f001 fa67 	bl	8009484 <xTaskGetSchedulerState>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d102      	bne.n	8007fc2 <xQueueGenericSend+0x9e>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <xQueueGenericSend+0xa2>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e000      	b.n	8007fc8 <xQueueGenericSend+0xa4>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10a      	bne.n	8007fe2 <xQueueGenericSend+0xbe>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	61fb      	str	r3, [r7, #28]
}
 8007fde:	bf00      	nop
 8007fe0:	e7fe      	b.n	8007fe0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fe2:	f001 ffa7 	bl	8009f34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d302      	bcc.n	8007ff8 <xQueueGenericSend+0xd4>
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d129      	bne.n	800804c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	68b9      	ldr	r1, [r7, #8]
 8007ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ffe:	f000 fa8b 	bl	8008518 <prvCopyDataToQueue>
 8008002:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	2b00      	cmp	r3, #0
 800800a:	d010      	beq.n	800802e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	3324      	adds	r3, #36	; 0x24
 8008010:	4618      	mov	r0, r3
 8008012:	f001 f875 	bl	8009100 <xTaskRemoveFromEventList>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d013      	beq.n	8008044 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800801c:	4b3f      	ldr	r3, [pc, #252]	; (800811c <xQueueGenericSend+0x1f8>)
 800801e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	e00a      	b.n	8008044 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800802e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008030:	2b00      	cmp	r3, #0
 8008032:	d007      	beq.n	8008044 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008034:	4b39      	ldr	r3, [pc, #228]	; (800811c <xQueueGenericSend+0x1f8>)
 8008036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800803a:	601a      	str	r2, [r3, #0]
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008044:	f001 ffa6 	bl	8009f94 <vPortExitCritical>
				return pdPASS;
 8008048:	2301      	movs	r3, #1
 800804a:	e063      	b.n	8008114 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d103      	bne.n	800805a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008052:	f001 ff9f 	bl	8009f94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008056:	2300      	movs	r3, #0
 8008058:	e05c      	b.n	8008114 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800805a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800805c:	2b00      	cmp	r3, #0
 800805e:	d106      	bne.n	800806e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008060:	f107 0314 	add.w	r3, r7, #20
 8008064:	4618      	mov	r0, r3
 8008066:	f001 f8af 	bl	80091c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800806a:	2301      	movs	r3, #1
 800806c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800806e:	f001 ff91 	bl	8009f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008072:	f000 fe1b 	bl	8008cac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008076:	f001 ff5d 	bl	8009f34 <vPortEnterCritical>
 800807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008080:	b25b      	sxtb	r3, r3
 8008082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008086:	d103      	bne.n	8008090 <xQueueGenericSend+0x16c>
 8008088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808a:	2200      	movs	r2, #0
 800808c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008096:	b25b      	sxtb	r3, r3
 8008098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800809c:	d103      	bne.n	80080a6 <xQueueGenericSend+0x182>
 800809e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080a6:	f001 ff75 	bl	8009f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080aa:	1d3a      	adds	r2, r7, #4
 80080ac:	f107 0314 	add.w	r3, r7, #20
 80080b0:	4611      	mov	r1, r2
 80080b2:	4618      	mov	r0, r3
 80080b4:	f001 f89e 	bl	80091f4 <xTaskCheckForTimeOut>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d124      	bne.n	8008108 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80080be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080c0:	f000 fb22 	bl	8008708 <prvIsQueueFull>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d018      	beq.n	80080fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	3310      	adds	r3, #16
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	4611      	mov	r1, r2
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 ffc4 	bl	8009060 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80080d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080da:	f000 faad 	bl	8008638 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80080de:	f000 fdf3 	bl	8008cc8 <xTaskResumeAll>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f47f af7c 	bne.w	8007fe2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80080ea:	4b0c      	ldr	r3, [pc, #48]	; (800811c <xQueueGenericSend+0x1f8>)
 80080ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	e772      	b.n	8007fe2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080fe:	f000 fa9b 	bl	8008638 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008102:	f000 fde1 	bl	8008cc8 <xTaskResumeAll>
 8008106:	e76c      	b.n	8007fe2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800810a:	f000 fa95 	bl	8008638 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800810e:	f000 fddb 	bl	8008cc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008112:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008114:	4618      	mov	r0, r3
 8008116:	3738      	adds	r7, #56	; 0x38
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	e000ed04 	.word	0xe000ed04

08008120 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b090      	sub	sp, #64	; 0x40
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
 800812c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10a      	bne.n	800814e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800814a:	bf00      	nop
 800814c:	e7fe      	b.n	800814c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d103      	bne.n	800815c <xQueueGenericSendFromISR+0x3c>
 8008154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <xQueueGenericSendFromISR+0x40>
 800815c:	2301      	movs	r3, #1
 800815e:	e000      	b.n	8008162 <xQueueGenericSendFromISR+0x42>
 8008160:	2300      	movs	r3, #0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d10a      	bne.n	800817c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008178:	bf00      	nop
 800817a:	e7fe      	b.n	800817a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2b02      	cmp	r3, #2
 8008180:	d103      	bne.n	800818a <xQueueGenericSendFromISR+0x6a>
 8008182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008186:	2b01      	cmp	r3, #1
 8008188:	d101      	bne.n	800818e <xQueueGenericSendFromISR+0x6e>
 800818a:	2301      	movs	r3, #1
 800818c:	e000      	b.n	8008190 <xQueueGenericSendFromISR+0x70>
 800818e:	2300      	movs	r3, #0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	623b      	str	r3, [r7, #32]
}
 80081a6:	bf00      	nop
 80081a8:	e7fe      	b.n	80081a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081aa:	f001 ffa5 	bl	800a0f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80081ae:	f3ef 8211 	mrs	r2, BASEPRI
 80081b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	61fa      	str	r2, [r7, #28]
 80081c4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80081c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d302      	bcc.n	80081dc <xQueueGenericSendFromISR+0xbc>
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d12f      	bne.n	800823c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	68b9      	ldr	r1, [r7, #8]
 80081f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081f2:	f000 f991 	bl	8008518 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80081fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081fe:	d112      	bne.n	8008226 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008204:	2b00      	cmp	r3, #0
 8008206:	d016      	beq.n	8008236 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820a:	3324      	adds	r3, #36	; 0x24
 800820c:	4618      	mov	r0, r3
 800820e:	f000 ff77 	bl	8009100 <xTaskRemoveFromEventList>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00e      	beq.n	8008236 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00b      	beq.n	8008236 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	e007      	b.n	8008236 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008226:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800822a:	3301      	adds	r3, #1
 800822c:	b2db      	uxtb	r3, r3
 800822e:	b25a      	sxtb	r2, r3
 8008230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008236:	2301      	movs	r3, #1
 8008238:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800823a:	e001      	b.n	8008240 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800823c:	2300      	movs	r3, #0
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008242:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800824a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800824c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800824e:	4618      	mov	r0, r3
 8008250:	3740      	adds	r7, #64	; 0x40
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
	...

08008258 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b08c      	sub	sp, #48	; 0x30
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008264:	2300      	movs	r3, #0
 8008266:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800826c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10a      	bne.n	8008288 <xQueueReceive+0x30>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	623b      	str	r3, [r7, #32]
}
 8008284:	bf00      	nop
 8008286:	e7fe      	b.n	8008286 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d103      	bne.n	8008296 <xQueueReceive+0x3e>
 800828e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <xQueueReceive+0x42>
 8008296:	2301      	movs	r3, #1
 8008298:	e000      	b.n	800829c <xQueueReceive+0x44>
 800829a:	2300      	movs	r3, #0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10a      	bne.n	80082b6 <xQueueReceive+0x5e>
	__asm volatile
 80082a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	61fb      	str	r3, [r7, #28]
}
 80082b2:	bf00      	nop
 80082b4:	e7fe      	b.n	80082b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082b6:	f001 f8e5 	bl	8009484 <xTaskGetSchedulerState>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d102      	bne.n	80082c6 <xQueueReceive+0x6e>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <xQueueReceive+0x72>
 80082c6:	2301      	movs	r3, #1
 80082c8:	e000      	b.n	80082cc <xQueueReceive+0x74>
 80082ca:	2300      	movs	r3, #0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10a      	bne.n	80082e6 <xQueueReceive+0x8e>
	__asm volatile
 80082d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	61bb      	str	r3, [r7, #24]
}
 80082e2:	bf00      	nop
 80082e4:	e7fe      	b.n	80082e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082e6:	f001 fe25 	bl	8009f34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d01f      	beq.n	8008336 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082f6:	68b9      	ldr	r1, [r7, #8]
 80082f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082fa:	f000 f977 	bl	80085ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	1e5a      	subs	r2, r3, #1
 8008302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008304:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00f      	beq.n	800832e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800830e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008310:	3310      	adds	r3, #16
 8008312:	4618      	mov	r0, r3
 8008314:	f000 fef4 	bl	8009100 <xTaskRemoveFromEventList>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d007      	beq.n	800832e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800831e:	4b3d      	ldr	r3, [pc, #244]	; (8008414 <xQueueReceive+0x1bc>)
 8008320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800832e:	f001 fe31 	bl	8009f94 <vPortExitCritical>
				return pdPASS;
 8008332:	2301      	movs	r3, #1
 8008334:	e069      	b.n	800840a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d103      	bne.n	8008344 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800833c:	f001 fe2a 	bl	8009f94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008340:	2300      	movs	r3, #0
 8008342:	e062      	b.n	800840a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008346:	2b00      	cmp	r3, #0
 8008348:	d106      	bne.n	8008358 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800834a:	f107 0310 	add.w	r3, r7, #16
 800834e:	4618      	mov	r0, r3
 8008350:	f000 ff3a 	bl	80091c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008354:	2301      	movs	r3, #1
 8008356:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008358:	f001 fe1c 	bl	8009f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800835c:	f000 fca6 	bl	8008cac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008360:	f001 fde8 	bl	8009f34 <vPortEnterCritical>
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800836a:	b25b      	sxtb	r3, r3
 800836c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008370:	d103      	bne.n	800837a <xQueueReceive+0x122>
 8008372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008380:	b25b      	sxtb	r3, r3
 8008382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008386:	d103      	bne.n	8008390 <xQueueReceive+0x138>
 8008388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838a:	2200      	movs	r2, #0
 800838c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008390:	f001 fe00 	bl	8009f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008394:	1d3a      	adds	r2, r7, #4
 8008396:	f107 0310 	add.w	r3, r7, #16
 800839a:	4611      	mov	r1, r2
 800839c:	4618      	mov	r0, r3
 800839e:	f000 ff29 	bl	80091f4 <xTaskCheckForTimeOut>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d123      	bne.n	80083f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083aa:	f000 f997 	bl	80086dc <prvIsQueueEmpty>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d017      	beq.n	80083e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b6:	3324      	adds	r3, #36	; 0x24
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	4611      	mov	r1, r2
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 fe4f 	bl	8009060 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083c4:	f000 f938 	bl	8008638 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083c8:	f000 fc7e 	bl	8008cc8 <xTaskResumeAll>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d189      	bne.n	80082e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80083d2:	4b10      	ldr	r3, [pc, #64]	; (8008414 <xQueueReceive+0x1bc>)
 80083d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d8:	601a      	str	r2, [r3, #0]
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	e780      	b.n	80082e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80083e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083e6:	f000 f927 	bl	8008638 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083ea:	f000 fc6d 	bl	8008cc8 <xTaskResumeAll>
 80083ee:	e77a      	b.n	80082e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80083f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083f2:	f000 f921 	bl	8008638 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083f6:	f000 fc67 	bl	8008cc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083fc:	f000 f96e 	bl	80086dc <prvIsQueueEmpty>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	f43f af6f 	beq.w	80082e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008408:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800840a:	4618      	mov	r0, r3
 800840c:	3730      	adds	r7, #48	; 0x30
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	e000ed04 	.word	0xe000ed04

08008418 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b08e      	sub	sp, #56	; 0x38
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10a      	bne.n	8008444 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	623b      	str	r3, [r7, #32]
}
 8008440:	bf00      	nop
 8008442:	e7fe      	b.n	8008442 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d103      	bne.n	8008452 <xQueueReceiveFromISR+0x3a>
 800844a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <xQueueReceiveFromISR+0x3e>
 8008452:	2301      	movs	r3, #1
 8008454:	e000      	b.n	8008458 <xQueueReceiveFromISR+0x40>
 8008456:	2300      	movs	r3, #0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10a      	bne.n	8008472 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	61fb      	str	r3, [r7, #28]
}
 800846e:	bf00      	nop
 8008470:	e7fe      	b.n	8008470 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008472:	f001 fe41 	bl	800a0f8 <vPortValidateInterruptPriority>
	__asm volatile
 8008476:	f3ef 8211 	mrs	r2, BASEPRI
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	61ba      	str	r2, [r7, #24]
 800848c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800848e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008490:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008496:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849a:	2b00      	cmp	r3, #0
 800849c:	d02f      	beq.n	80084fe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084a8:	68b9      	ldr	r1, [r7, #8]
 80084aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084ac:	f000 f89e 	bl	80085ec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b2:	1e5a      	subs	r2, r3, #1
 80084b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80084b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80084bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084c0:	d112      	bne.n	80084e8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d016      	beq.n	80084f8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084cc:	3310      	adds	r3, #16
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 fe16 	bl	8009100 <xTaskRemoveFromEventList>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00e      	beq.n	80084f8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00b      	beq.n	80084f8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	601a      	str	r2, [r3, #0]
 80084e6:	e007      	b.n	80084f8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80084e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084ec:	3301      	adds	r3, #1
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	b25a      	sxtb	r2, r3
 80084f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80084f8:	2301      	movs	r3, #1
 80084fa:	637b      	str	r3, [r7, #52]	; 0x34
 80084fc:	e001      	b.n	8008502 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80084fe:	2300      	movs	r3, #0
 8008500:	637b      	str	r3, [r7, #52]	; 0x34
 8008502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008504:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	f383 8811 	msr	BASEPRI, r3
}
 800850c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800850e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008510:	4618      	mov	r0, r3
 8008512:	3738      	adds	r7, #56	; 0x38
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008524:	2300      	movs	r3, #0
 8008526:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10d      	bne.n	8008552 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d14d      	bne.n	80085da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	4618      	mov	r0, r3
 8008544:	f000 ffbc 	bl	80094c0 <xTaskPriorityDisinherit>
 8008548:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	609a      	str	r2, [r3, #8]
 8008550:	e043      	b.n	80085da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d119      	bne.n	800858c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6858      	ldr	r0, [r3, #4]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008560:	461a      	mov	r2, r3
 8008562:	68b9      	ldr	r1, [r7, #8]
 8008564:	f002 f822 	bl	800a5ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008570:	441a      	add	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	685a      	ldr	r2, [r3, #4]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	429a      	cmp	r2, r3
 8008580:	d32b      	bcc.n	80085da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	605a      	str	r2, [r3, #4]
 800858a:	e026      	b.n	80085da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	68d8      	ldr	r0, [r3, #12]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008594:	461a      	mov	r2, r3
 8008596:	68b9      	ldr	r1, [r7, #8]
 8008598:	f002 f808 	bl	800a5ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	68da      	ldr	r2, [r3, #12]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a4:	425b      	negs	r3, r3
 80085a6:	441a      	add	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	68da      	ldr	r2, [r3, #12]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d207      	bcs.n	80085c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c0:	425b      	negs	r3, r3
 80085c2:	441a      	add	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d105      	bne.n	80085da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d002      	beq.n	80085da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	3b01      	subs	r3, #1
 80085d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	1c5a      	adds	r2, r3, #1
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80085e2:	697b      	ldr	r3, [r7, #20]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d018      	beq.n	8008630 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008606:	441a      	add	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	68da      	ldr	r2, [r3, #12]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	429a      	cmp	r2, r3
 8008616:	d303      	bcc.n	8008620 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	68d9      	ldr	r1, [r3, #12]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008628:	461a      	mov	r2, r3
 800862a:	6838      	ldr	r0, [r7, #0]
 800862c:	f001 ffbe 	bl	800a5ac <memcpy>
	}
}
 8008630:	bf00      	nop
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008640:	f001 fc78 	bl	8009f34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800864a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800864c:	e011      	b.n	8008672 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008652:	2b00      	cmp	r3, #0
 8008654:	d012      	beq.n	800867c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	3324      	adds	r3, #36	; 0x24
 800865a:	4618      	mov	r0, r3
 800865c:	f000 fd50 	bl	8009100 <xTaskRemoveFromEventList>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008666:	f000 fe27 	bl	80092b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800866a:	7bfb      	ldrb	r3, [r7, #15]
 800866c:	3b01      	subs	r3, #1
 800866e:	b2db      	uxtb	r3, r3
 8008670:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008676:	2b00      	cmp	r3, #0
 8008678:	dce9      	bgt.n	800864e <prvUnlockQueue+0x16>
 800867a:	e000      	b.n	800867e <prvUnlockQueue+0x46>
					break;
 800867c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	22ff      	movs	r2, #255	; 0xff
 8008682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008686:	f001 fc85 	bl	8009f94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800868a:	f001 fc53 	bl	8009f34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008694:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008696:	e011      	b.n	80086bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d012      	beq.n	80086c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	3310      	adds	r3, #16
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 fd2b 	bl	8009100 <xTaskRemoveFromEventList>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80086b0:	f000 fe02 	bl	80092b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
 80086b6:	3b01      	subs	r3, #1
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	dce9      	bgt.n	8008698 <prvUnlockQueue+0x60>
 80086c4:	e000      	b.n	80086c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80086c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	22ff      	movs	r2, #255	; 0xff
 80086cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80086d0:	f001 fc60 	bl	8009f94 <vPortExitCritical>
}
 80086d4:	bf00      	nop
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086e4:	f001 fc26 	bl	8009f34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d102      	bne.n	80086f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086f0:	2301      	movs	r3, #1
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	e001      	b.n	80086fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086f6:	2300      	movs	r3, #0
 80086f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086fa:	f001 fc4b 	bl	8009f94 <vPortExitCritical>

	return xReturn;
 80086fe:	68fb      	ldr	r3, [r7, #12]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008710:	f001 fc10 	bl	8009f34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871c:	429a      	cmp	r2, r3
 800871e:	d102      	bne.n	8008726 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008720:	2301      	movs	r3, #1
 8008722:	60fb      	str	r3, [r7, #12]
 8008724:	e001      	b.n	800872a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008726:	2300      	movs	r3, #0
 8008728:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800872a:	f001 fc33 	bl	8009f94 <vPortExitCritical>

	return xReturn;
 800872e:	68fb      	ldr	r3, [r7, #12]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008742:	2300      	movs	r3, #0
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	e014      	b.n	8008772 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008748:	4a0f      	ldr	r2, [pc, #60]	; (8008788 <vQueueAddToRegistry+0x50>)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10b      	bne.n	800876c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008754:	490c      	ldr	r1, [pc, #48]	; (8008788 <vQueueAddToRegistry+0x50>)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	683a      	ldr	r2, [r7, #0]
 800875a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800875e:	4a0a      	ldr	r2, [pc, #40]	; (8008788 <vQueueAddToRegistry+0x50>)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	00db      	lsls	r3, r3, #3
 8008764:	4413      	add	r3, r2
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800876a:	e006      	b.n	800877a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	3301      	adds	r3, #1
 8008770:	60fb      	str	r3, [r7, #12]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2b07      	cmp	r3, #7
 8008776:	d9e7      	bls.n	8008748 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008778:	bf00      	nop
 800877a:	bf00      	nop
 800877c:	3714      	adds	r7, #20
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	24004c3c 	.word	0x24004c3c

0800878c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800879c:	f001 fbca 	bl	8009f34 <vPortEnterCritical>
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087a6:	b25b      	sxtb	r3, r3
 80087a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087ac:	d103      	bne.n	80087b6 <vQueueWaitForMessageRestricted+0x2a>
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087bc:	b25b      	sxtb	r3, r3
 80087be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087c2:	d103      	bne.n	80087cc <vQueueWaitForMessageRestricted+0x40>
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087cc:	f001 fbe2 	bl	8009f94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d106      	bne.n	80087e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	3324      	adds	r3, #36	; 0x24
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	68b9      	ldr	r1, [r7, #8]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 fc61 	bl	80090a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80087e6:	6978      	ldr	r0, [r7, #20]
 80087e8:	f7ff ff26 	bl	8008638 <prvUnlockQueue>
	}
 80087ec:	bf00      	nop
 80087ee:	3718      	adds	r7, #24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b08e      	sub	sp, #56	; 0x38
 80087f8:	af04      	add	r7, sp, #16
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
 8008800:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10a      	bne.n	800881e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880c:	f383 8811 	msr	BASEPRI, r3
 8008810:	f3bf 8f6f 	isb	sy
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	623b      	str	r3, [r7, #32]
}
 800881a:	bf00      	nop
 800881c:	e7fe      	b.n	800881c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800881e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10a      	bne.n	800883a <xTaskCreateStatic+0x46>
	__asm volatile
 8008824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	61fb      	str	r3, [r7, #28]
}
 8008836:	bf00      	nop
 8008838:	e7fe      	b.n	8008838 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800883a:	23bc      	movs	r3, #188	; 0xbc
 800883c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	2bbc      	cmp	r3, #188	; 0xbc
 8008842:	d00a      	beq.n	800885a <xTaskCreateStatic+0x66>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	61bb      	str	r3, [r7, #24]
}
 8008856:	bf00      	nop
 8008858:	e7fe      	b.n	8008858 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800885a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800885c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885e:	2b00      	cmp	r3, #0
 8008860:	d01e      	beq.n	80088a0 <xTaskCreateStatic+0xac>
 8008862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008864:	2b00      	cmp	r3, #0
 8008866:	d01b      	beq.n	80088a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008870:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008874:	2202      	movs	r2, #2
 8008876:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800887a:	2300      	movs	r3, #0
 800887c:	9303      	str	r3, [sp, #12]
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	9302      	str	r3, [sp, #8]
 8008882:	f107 0314 	add.w	r3, r7, #20
 8008886:	9301      	str	r3, [sp, #4]
 8008888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	68b9      	ldr	r1, [r7, #8]
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f000 f850 	bl	8008938 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800889a:	f000 f8f3 	bl	8008a84 <prvAddNewTaskToReadyList>
 800889e:	e001      	b.n	80088a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80088a0:	2300      	movs	r3, #0
 80088a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80088a4:	697b      	ldr	r3, [r7, #20]
	}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3728      	adds	r7, #40	; 0x28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b08c      	sub	sp, #48	; 0x30
 80088b2:	af04      	add	r7, sp, #16
 80088b4:	60f8      	str	r0, [r7, #12]
 80088b6:	60b9      	str	r1, [r7, #8]
 80088b8:	603b      	str	r3, [r7, #0]
 80088ba:	4613      	mov	r3, r2
 80088bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80088be:	88fb      	ldrh	r3, [r7, #6]
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4618      	mov	r0, r3
 80088c4:	f001 fc58 	bl	800a178 <pvPortMalloc>
 80088c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00e      	beq.n	80088ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80088d0:	20bc      	movs	r0, #188	; 0xbc
 80088d2:	f001 fc51 	bl	800a178 <pvPortMalloc>
 80088d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	631a      	str	r2, [r3, #48]	; 0x30
 80088e4:	e005      	b.n	80088f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80088e6:	6978      	ldr	r0, [r7, #20]
 80088e8:	f001 fd12 	bl	800a310 <vPortFree>
 80088ec:	e001      	b.n	80088f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80088ee:	2300      	movs	r3, #0
 80088f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d017      	beq.n	8008928 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008900:	88fa      	ldrh	r2, [r7, #6]
 8008902:	2300      	movs	r3, #0
 8008904:	9303      	str	r3, [sp, #12]
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	9302      	str	r3, [sp, #8]
 800890a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890c:	9301      	str	r3, [sp, #4]
 800890e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	68b9      	ldr	r1, [r7, #8]
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f000 f80e 	bl	8008938 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800891c:	69f8      	ldr	r0, [r7, #28]
 800891e:	f000 f8b1 	bl	8008a84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008922:	2301      	movs	r3, #1
 8008924:	61bb      	str	r3, [r7, #24]
 8008926:	e002      	b.n	800892e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800892c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800892e:	69bb      	ldr	r3, [r7, #24]
	}
 8008930:	4618      	mov	r0, r3
 8008932:	3720      	adds	r7, #32
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
 8008944:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008948:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	461a      	mov	r2, r3
 8008950:	21a5      	movs	r1, #165	; 0xa5
 8008952:	f001 fe39 	bl	800a5c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800895a:	6879      	ldr	r1, [r7, #4]
 800895c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008960:	440b      	add	r3, r1
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	4413      	add	r3, r2
 8008966:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	f023 0307 	bic.w	r3, r3, #7
 800896e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	f003 0307 	and.w	r3, r3, #7
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00a      	beq.n	8008990 <prvInitialiseNewTask+0x58>
	__asm volatile
 800897a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897e:	f383 8811 	msr	BASEPRI, r3
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	f3bf 8f4f 	dsb	sy
 800898a:	617b      	str	r3, [r7, #20]
}
 800898c:	bf00      	nop
 800898e:	e7fe      	b.n	800898e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d01f      	beq.n	80089d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008996:	2300      	movs	r3, #0
 8008998:	61fb      	str	r3, [r7, #28]
 800899a:	e012      	b.n	80089c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	4413      	add	r3, r2
 80089a2:	7819      	ldrb	r1, [r3, #0]
 80089a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	4413      	add	r3, r2
 80089aa:	3334      	adds	r3, #52	; 0x34
 80089ac:	460a      	mov	r2, r1
 80089ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	4413      	add	r3, r2
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d006      	beq.n	80089ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	3301      	adds	r3, #1
 80089c0:	61fb      	str	r3, [r7, #28]
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	2b0f      	cmp	r3, #15
 80089c6:	d9e9      	bls.n	800899c <prvInitialiseNewTask+0x64>
 80089c8:	e000      	b.n	80089cc <prvInitialiseNewTask+0x94>
			{
				break;
 80089ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089d4:	e003      	b.n	80089de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80089d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80089de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e0:	2b37      	cmp	r3, #55	; 0x37
 80089e2:	d901      	bls.n	80089e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80089e4:	2337      	movs	r3, #55	; 0x37
 80089e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80089e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80089f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f6:	2200      	movs	r2, #0
 80089f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80089fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fc:	3304      	adds	r3, #4
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7ff f8be 	bl	8007b80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a06:	3318      	adds	r3, #24
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7ff f8b9 	bl	8007b80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a26:	2200      	movs	r2, #0
 8008a28:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a36:	3354      	adds	r3, #84	; 0x54
 8008a38:	2260      	movs	r2, #96	; 0x60
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f001 fdc3 	bl	800a5c8 <memset>
 8008a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a44:	4a0c      	ldr	r2, [pc, #48]	; (8008a78 <prvInitialiseNewTask+0x140>)
 8008a46:	659a      	str	r2, [r3, #88]	; 0x58
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	4a0c      	ldr	r2, [pc, #48]	; (8008a7c <prvInitialiseNewTask+0x144>)
 8008a4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a50:	4a0b      	ldr	r2, [pc, #44]	; (8008a80 <prvInitialiseNewTask+0x148>)
 8008a52:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	68f9      	ldr	r1, [r7, #12]
 8008a58:	69b8      	ldr	r0, [r7, #24]
 8008a5a:	f001 f941 	bl	8009ce0 <pxPortInitialiseStack>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a62:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d002      	beq.n	8008a70 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a70:	bf00      	nop
 8008a72:	3720      	adds	r7, #32
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	0800aa3c 	.word	0x0800aa3c
 8008a7c:	0800aa5c 	.word	0x0800aa5c
 8008a80:	0800aa1c 	.word	0x0800aa1c

08008a84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a8c:	f001 fa52 	bl	8009f34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a90:	4b2d      	ldr	r3, [pc, #180]	; (8008b48 <prvAddNewTaskToReadyList+0xc4>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3301      	adds	r3, #1
 8008a96:	4a2c      	ldr	r2, [pc, #176]	; (8008b48 <prvAddNewTaskToReadyList+0xc4>)
 8008a98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a9a:	4b2c      	ldr	r3, [pc, #176]	; (8008b4c <prvAddNewTaskToReadyList+0xc8>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d109      	bne.n	8008ab6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008aa2:	4a2a      	ldr	r2, [pc, #168]	; (8008b4c <prvAddNewTaskToReadyList+0xc8>)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008aa8:	4b27      	ldr	r3, [pc, #156]	; (8008b48 <prvAddNewTaskToReadyList+0xc4>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d110      	bne.n	8008ad2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ab0:	f000 fc26 	bl	8009300 <prvInitialiseTaskLists>
 8008ab4:	e00d      	b.n	8008ad2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ab6:	4b26      	ldr	r3, [pc, #152]	; (8008b50 <prvAddNewTaskToReadyList+0xcc>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d109      	bne.n	8008ad2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008abe:	4b23      	ldr	r3, [pc, #140]	; (8008b4c <prvAddNewTaskToReadyList+0xc8>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d802      	bhi.n	8008ad2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008acc:	4a1f      	ldr	r2, [pc, #124]	; (8008b4c <prvAddNewTaskToReadyList+0xc8>)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ad2:	4b20      	ldr	r3, [pc, #128]	; (8008b54 <prvAddNewTaskToReadyList+0xd0>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	4a1e      	ldr	r2, [pc, #120]	; (8008b54 <prvAddNewTaskToReadyList+0xd0>)
 8008ada:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008adc:	4b1d      	ldr	r3, [pc, #116]	; (8008b54 <prvAddNewTaskToReadyList+0xd0>)
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae8:	4b1b      	ldr	r3, [pc, #108]	; (8008b58 <prvAddNewTaskToReadyList+0xd4>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d903      	bls.n	8008af8 <prvAddNewTaskToReadyList+0x74>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af4:	4a18      	ldr	r2, [pc, #96]	; (8008b58 <prvAddNewTaskToReadyList+0xd4>)
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afc:	4613      	mov	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4a15      	ldr	r2, [pc, #84]	; (8008b5c <prvAddNewTaskToReadyList+0xd8>)
 8008b06:	441a      	add	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4610      	mov	r0, r2
 8008b10:	f7ff f843 	bl	8007b9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b14:	f001 fa3e 	bl	8009f94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b18:	4b0d      	ldr	r3, [pc, #52]	; (8008b50 <prvAddNewTaskToReadyList+0xcc>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00e      	beq.n	8008b3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b20:	4b0a      	ldr	r3, [pc, #40]	; (8008b4c <prvAddNewTaskToReadyList+0xc8>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d207      	bcs.n	8008b3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b2e:	4b0c      	ldr	r3, [pc, #48]	; (8008b60 <prvAddNewTaskToReadyList+0xdc>)
 8008b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b3e:	bf00      	nop
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	24000cf0 	.word	0x24000cf0
 8008b4c:	2400081c 	.word	0x2400081c
 8008b50:	24000cfc 	.word	0x24000cfc
 8008b54:	24000d0c 	.word	0x24000d0c
 8008b58:	24000cf8 	.word	0x24000cf8
 8008b5c:	24000820 	.word	0x24000820
 8008b60:	e000ed04 	.word	0xe000ed04

08008b64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d017      	beq.n	8008ba6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b76:	4b13      	ldr	r3, [pc, #76]	; (8008bc4 <vTaskDelay+0x60>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00a      	beq.n	8008b94 <vTaskDelay+0x30>
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	60bb      	str	r3, [r7, #8]
}
 8008b90:	bf00      	nop
 8008b92:	e7fe      	b.n	8008b92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b94:	f000 f88a 	bl	8008cac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b98:	2100      	movs	r1, #0
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fcfe 	bl	800959c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ba0:	f000 f892 	bl	8008cc8 <xTaskResumeAll>
 8008ba4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d107      	bne.n	8008bbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008bac:	4b06      	ldr	r3, [pc, #24]	; (8008bc8 <vTaskDelay+0x64>)
 8008bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bbc:	bf00      	nop
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	24000d18 	.word	0x24000d18
 8008bc8:	e000ed04 	.word	0xe000ed04

08008bcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08a      	sub	sp, #40	; 0x28
 8008bd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008bda:	463a      	mov	r2, r7
 8008bdc:	1d39      	adds	r1, r7, #4
 8008bde:	f107 0308 	add.w	r3, r7, #8
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7fe ff78 	bl	8007ad8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	9202      	str	r2, [sp, #8]
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	460a      	mov	r2, r1
 8008bfa:	4924      	ldr	r1, [pc, #144]	; (8008c8c <vTaskStartScheduler+0xc0>)
 8008bfc:	4824      	ldr	r0, [pc, #144]	; (8008c90 <vTaskStartScheduler+0xc4>)
 8008bfe:	f7ff fdf9 	bl	80087f4 <xTaskCreateStatic>
 8008c02:	4603      	mov	r3, r0
 8008c04:	4a23      	ldr	r2, [pc, #140]	; (8008c94 <vTaskStartScheduler+0xc8>)
 8008c06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c08:	4b22      	ldr	r3, [pc, #136]	; (8008c94 <vTaskStartScheduler+0xc8>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c10:	2301      	movs	r3, #1
 8008c12:	617b      	str	r3, [r7, #20]
 8008c14:	e001      	b.n	8008c1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c16:	2300      	movs	r3, #0
 8008c18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d102      	bne.n	8008c26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c20:	f000 fd10 	bl	8009644 <xTimerCreateTimerTask>
 8008c24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d11b      	bne.n	8008c64 <vTaskStartScheduler+0x98>
	__asm volatile
 8008c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	613b      	str	r3, [r7, #16]
}
 8008c3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c40:	4b15      	ldr	r3, [pc, #84]	; (8008c98 <vTaskStartScheduler+0xcc>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3354      	adds	r3, #84	; 0x54
 8008c46:	4a15      	ldr	r2, [pc, #84]	; (8008c9c <vTaskStartScheduler+0xd0>)
 8008c48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c4a:	4b15      	ldr	r3, [pc, #84]	; (8008ca0 <vTaskStartScheduler+0xd4>)
 8008c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c52:	4b14      	ldr	r3, [pc, #80]	; (8008ca4 <vTaskStartScheduler+0xd8>)
 8008c54:	2201      	movs	r2, #1
 8008c56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c58:	4b13      	ldr	r3, [pc, #76]	; (8008ca8 <vTaskStartScheduler+0xdc>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c5e:	f001 f8c7 	bl	8009df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c62:	e00e      	b.n	8008c82 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c6a:	d10a      	bne.n	8008c82 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	60fb      	str	r3, [r7, #12]
}
 8008c7e:	bf00      	nop
 8008c80:	e7fe      	b.n	8008c80 <vTaskStartScheduler+0xb4>
}
 8008c82:	bf00      	nop
 8008c84:	3718      	adds	r7, #24
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	0800a8f4 	.word	0x0800a8f4
 8008c90:	080092d1 	.word	0x080092d1
 8008c94:	24000d14 	.word	0x24000d14
 8008c98:	2400081c 	.word	0x2400081c
 8008c9c:	24000014 	.word	0x24000014
 8008ca0:	24000d10 	.word	0x24000d10
 8008ca4:	24000cfc 	.word	0x24000cfc
 8008ca8:	24000cf4 	.word	0x24000cf4

08008cac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008cac:	b480      	push	{r7}
 8008cae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008cb0:	4b04      	ldr	r3, [pc, #16]	; (8008cc4 <vTaskSuspendAll+0x18>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	4a03      	ldr	r2, [pc, #12]	; (8008cc4 <vTaskSuspendAll+0x18>)
 8008cb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008cba:	bf00      	nop
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr
 8008cc4:	24000d18 	.word	0x24000d18

08008cc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008cd6:	4b42      	ldr	r3, [pc, #264]	; (8008de0 <xTaskResumeAll+0x118>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10a      	bne.n	8008cf4 <xTaskResumeAll+0x2c>
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	603b      	str	r3, [r7, #0]
}
 8008cf0:	bf00      	nop
 8008cf2:	e7fe      	b.n	8008cf2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008cf4:	f001 f91e 	bl	8009f34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008cf8:	4b39      	ldr	r3, [pc, #228]	; (8008de0 <xTaskResumeAll+0x118>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	4a38      	ldr	r2, [pc, #224]	; (8008de0 <xTaskResumeAll+0x118>)
 8008d00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d02:	4b37      	ldr	r3, [pc, #220]	; (8008de0 <xTaskResumeAll+0x118>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d162      	bne.n	8008dd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d0a:	4b36      	ldr	r3, [pc, #216]	; (8008de4 <xTaskResumeAll+0x11c>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d05e      	beq.n	8008dd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d12:	e02f      	b.n	8008d74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d14:	4b34      	ldr	r3, [pc, #208]	; (8008de8 <xTaskResumeAll+0x120>)
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3318      	adds	r3, #24
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fe ff97 	bl	8007c54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fe ff92 	bl	8007c54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d34:	4b2d      	ldr	r3, [pc, #180]	; (8008dec <xTaskResumeAll+0x124>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d903      	bls.n	8008d44 <xTaskResumeAll+0x7c>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d40:	4a2a      	ldr	r2, [pc, #168]	; (8008dec <xTaskResumeAll+0x124>)
 8008d42:	6013      	str	r3, [r2, #0]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d48:	4613      	mov	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4413      	add	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4a27      	ldr	r2, [pc, #156]	; (8008df0 <xTaskResumeAll+0x128>)
 8008d52:	441a      	add	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	3304      	adds	r3, #4
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	f7fe ff1d 	bl	8007b9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d64:	4b23      	ldr	r3, [pc, #140]	; (8008df4 <xTaskResumeAll+0x12c>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d302      	bcc.n	8008d74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008d6e:	4b22      	ldr	r3, [pc, #136]	; (8008df8 <xTaskResumeAll+0x130>)
 8008d70:	2201      	movs	r2, #1
 8008d72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d74:	4b1c      	ldr	r3, [pc, #112]	; (8008de8 <xTaskResumeAll+0x120>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1cb      	bne.n	8008d14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d001      	beq.n	8008d86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d82:	f000 fb5f 	bl	8009444 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d86:	4b1d      	ldr	r3, [pc, #116]	; (8008dfc <xTaskResumeAll+0x134>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d010      	beq.n	8008db4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d92:	f000 f847 	bl	8008e24 <xTaskIncrementTick>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008d9c:	4b16      	ldr	r3, [pc, #88]	; (8008df8 <xTaskResumeAll+0x130>)
 8008d9e:	2201      	movs	r2, #1
 8008da0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	3b01      	subs	r3, #1
 8008da6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d1f1      	bne.n	8008d92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008dae:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <xTaskResumeAll+0x134>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008db4:	4b10      	ldr	r3, [pc, #64]	; (8008df8 <xTaskResumeAll+0x130>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d009      	beq.n	8008dd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008dc0:	4b0f      	ldr	r3, [pc, #60]	; (8008e00 <xTaskResumeAll+0x138>)
 8008dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc6:	601a      	str	r2, [r3, #0]
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008dd0:	f001 f8e0 	bl	8009f94 <vPortExitCritical>

	return xAlreadyYielded;
 8008dd4:	68bb      	ldr	r3, [r7, #8]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	24000d18 	.word	0x24000d18
 8008de4:	24000cf0 	.word	0x24000cf0
 8008de8:	24000cb0 	.word	0x24000cb0
 8008dec:	24000cf8 	.word	0x24000cf8
 8008df0:	24000820 	.word	0x24000820
 8008df4:	2400081c 	.word	0x2400081c
 8008df8:	24000d04 	.word	0x24000d04
 8008dfc:	24000d00 	.word	0x24000d00
 8008e00:	e000ed04 	.word	0xe000ed04

08008e04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e0a:	4b05      	ldr	r3, [pc, #20]	; (8008e20 <xTaskGetTickCount+0x1c>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e10:	687b      	ldr	r3, [r7, #4]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	24000cf4 	.word	0x24000cf4

08008e24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e2e:	4b4f      	ldr	r3, [pc, #316]	; (8008f6c <xTaskIncrementTick+0x148>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f040 808f 	bne.w	8008f56 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e38:	4b4d      	ldr	r3, [pc, #308]	; (8008f70 <xTaskIncrementTick+0x14c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e40:	4a4b      	ldr	r2, [pc, #300]	; (8008f70 <xTaskIncrementTick+0x14c>)
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d120      	bne.n	8008e8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e4c:	4b49      	ldr	r3, [pc, #292]	; (8008f74 <xTaskIncrementTick+0x150>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00a      	beq.n	8008e6c <xTaskIncrementTick+0x48>
	__asm volatile
 8008e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5a:	f383 8811 	msr	BASEPRI, r3
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	603b      	str	r3, [r7, #0]
}
 8008e68:	bf00      	nop
 8008e6a:	e7fe      	b.n	8008e6a <xTaskIncrementTick+0x46>
 8008e6c:	4b41      	ldr	r3, [pc, #260]	; (8008f74 <xTaskIncrementTick+0x150>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	60fb      	str	r3, [r7, #12]
 8008e72:	4b41      	ldr	r3, [pc, #260]	; (8008f78 <xTaskIncrementTick+0x154>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a3f      	ldr	r2, [pc, #252]	; (8008f74 <xTaskIncrementTick+0x150>)
 8008e78:	6013      	str	r3, [r2, #0]
 8008e7a:	4a3f      	ldr	r2, [pc, #252]	; (8008f78 <xTaskIncrementTick+0x154>)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6013      	str	r3, [r2, #0]
 8008e80:	4b3e      	ldr	r3, [pc, #248]	; (8008f7c <xTaskIncrementTick+0x158>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	3301      	adds	r3, #1
 8008e86:	4a3d      	ldr	r2, [pc, #244]	; (8008f7c <xTaskIncrementTick+0x158>)
 8008e88:	6013      	str	r3, [r2, #0]
 8008e8a:	f000 fadb 	bl	8009444 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e8e:	4b3c      	ldr	r3, [pc, #240]	; (8008f80 <xTaskIncrementTick+0x15c>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d349      	bcc.n	8008f2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e98:	4b36      	ldr	r3, [pc, #216]	; (8008f74 <xTaskIncrementTick+0x150>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d104      	bne.n	8008eac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ea2:	4b37      	ldr	r3, [pc, #220]	; (8008f80 <xTaskIncrementTick+0x15c>)
 8008ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ea8:	601a      	str	r2, [r3, #0]
					break;
 8008eaa:	e03f      	b.n	8008f2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eac:	4b31      	ldr	r3, [pc, #196]	; (8008f74 <xTaskIncrementTick+0x150>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d203      	bcs.n	8008ecc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ec4:	4a2e      	ldr	r2, [pc, #184]	; (8008f80 <xTaskIncrementTick+0x15c>)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008eca:	e02f      	b.n	8008f2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	3304      	adds	r3, #4
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7fe febf 	bl	8007c54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d004      	beq.n	8008ee8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	3318      	adds	r3, #24
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fe feb6 	bl	8007c54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eec:	4b25      	ldr	r3, [pc, #148]	; (8008f84 <xTaskIncrementTick+0x160>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d903      	bls.n	8008efc <xTaskIncrementTick+0xd8>
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef8:	4a22      	ldr	r2, [pc, #136]	; (8008f84 <xTaskIncrementTick+0x160>)
 8008efa:	6013      	str	r3, [r2, #0]
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f00:	4613      	mov	r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4413      	add	r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4a1f      	ldr	r2, [pc, #124]	; (8008f88 <xTaskIncrementTick+0x164>)
 8008f0a:	441a      	add	r2, r3
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	3304      	adds	r3, #4
 8008f10:	4619      	mov	r1, r3
 8008f12:	4610      	mov	r0, r2
 8008f14:	f7fe fe41 	bl	8007b9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f1c:	4b1b      	ldr	r3, [pc, #108]	; (8008f8c <xTaskIncrementTick+0x168>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d3b8      	bcc.n	8008e98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008f26:	2301      	movs	r3, #1
 8008f28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f2a:	e7b5      	b.n	8008e98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f2c:	4b17      	ldr	r3, [pc, #92]	; (8008f8c <xTaskIncrementTick+0x168>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f32:	4915      	ldr	r1, [pc, #84]	; (8008f88 <xTaskIncrementTick+0x164>)
 8008f34:	4613      	mov	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	4413      	add	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	440b      	add	r3, r1
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d901      	bls.n	8008f48 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008f44:	2301      	movs	r3, #1
 8008f46:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008f48:	4b11      	ldr	r3, [pc, #68]	; (8008f90 <xTaskIncrementTick+0x16c>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d007      	beq.n	8008f60 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008f50:	2301      	movs	r3, #1
 8008f52:	617b      	str	r3, [r7, #20]
 8008f54:	e004      	b.n	8008f60 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008f56:	4b0f      	ldr	r3, [pc, #60]	; (8008f94 <xTaskIncrementTick+0x170>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	4a0d      	ldr	r2, [pc, #52]	; (8008f94 <xTaskIncrementTick+0x170>)
 8008f5e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f60:	697b      	ldr	r3, [r7, #20]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	24000d18 	.word	0x24000d18
 8008f70:	24000cf4 	.word	0x24000cf4
 8008f74:	24000ca8 	.word	0x24000ca8
 8008f78:	24000cac 	.word	0x24000cac
 8008f7c:	24000d08 	.word	0x24000d08
 8008f80:	24000d10 	.word	0x24000d10
 8008f84:	24000cf8 	.word	0x24000cf8
 8008f88:	24000820 	.word	0x24000820
 8008f8c:	2400081c 	.word	0x2400081c
 8008f90:	24000d04 	.word	0x24000d04
 8008f94:	24000d00 	.word	0x24000d00

08008f98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f9e:	4b2a      	ldr	r3, [pc, #168]	; (8009048 <vTaskSwitchContext+0xb0>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d003      	beq.n	8008fae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008fa6:	4b29      	ldr	r3, [pc, #164]	; (800904c <vTaskSwitchContext+0xb4>)
 8008fa8:	2201      	movs	r2, #1
 8008faa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008fac:	e046      	b.n	800903c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008fae:	4b27      	ldr	r3, [pc, #156]	; (800904c <vTaskSwitchContext+0xb4>)
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fb4:	4b26      	ldr	r3, [pc, #152]	; (8009050 <vTaskSwitchContext+0xb8>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	60fb      	str	r3, [r7, #12]
 8008fba:	e010      	b.n	8008fde <vTaskSwitchContext+0x46>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10a      	bne.n	8008fd8 <vTaskSwitchContext+0x40>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	607b      	str	r3, [r7, #4]
}
 8008fd4:	bf00      	nop
 8008fd6:	e7fe      	b.n	8008fd6 <vTaskSwitchContext+0x3e>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	60fb      	str	r3, [r7, #12]
 8008fde:	491d      	ldr	r1, [pc, #116]	; (8009054 <vTaskSwitchContext+0xbc>)
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	440b      	add	r3, r1
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d0e4      	beq.n	8008fbc <vTaskSwitchContext+0x24>
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4a15      	ldr	r2, [pc, #84]	; (8009054 <vTaskSwitchContext+0xbc>)
 8008ffe:	4413      	add	r3, r2
 8009000:	60bb      	str	r3, [r7, #8]
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	685a      	ldr	r2, [r3, #4]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	605a      	str	r2, [r3, #4]
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	3308      	adds	r3, #8
 8009014:	429a      	cmp	r2, r3
 8009016:	d104      	bne.n	8009022 <vTaskSwitchContext+0x8a>
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	685a      	ldr	r2, [r3, #4]
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	605a      	str	r2, [r3, #4]
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	4a0b      	ldr	r2, [pc, #44]	; (8009058 <vTaskSwitchContext+0xc0>)
 800902a:	6013      	str	r3, [r2, #0]
 800902c:	4a08      	ldr	r2, [pc, #32]	; (8009050 <vTaskSwitchContext+0xb8>)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009032:	4b09      	ldr	r3, [pc, #36]	; (8009058 <vTaskSwitchContext+0xc0>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3354      	adds	r3, #84	; 0x54
 8009038:	4a08      	ldr	r2, [pc, #32]	; (800905c <vTaskSwitchContext+0xc4>)
 800903a:	6013      	str	r3, [r2, #0]
}
 800903c:	bf00      	nop
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr
 8009048:	24000d18 	.word	0x24000d18
 800904c:	24000d04 	.word	0x24000d04
 8009050:	24000cf8 	.word	0x24000cf8
 8009054:	24000820 	.word	0x24000820
 8009058:	2400081c 	.word	0x2400081c
 800905c:	24000014 	.word	0x24000014

08009060 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10a      	bne.n	8009086 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	60fb      	str	r3, [r7, #12]
}
 8009082:	bf00      	nop
 8009084:	e7fe      	b.n	8009084 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009086:	4b07      	ldr	r3, [pc, #28]	; (80090a4 <vTaskPlaceOnEventList+0x44>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3318      	adds	r3, #24
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7fe fda7 	bl	8007be2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009094:	2101      	movs	r1, #1
 8009096:	6838      	ldr	r0, [r7, #0]
 8009098:	f000 fa80 	bl	800959c <prvAddCurrentTaskToDelayedList>
}
 800909c:	bf00      	nop
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	2400081c 	.word	0x2400081c

080090a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10a      	bne.n	80090d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	617b      	str	r3, [r7, #20]
}
 80090cc:	bf00      	nop
 80090ce:	e7fe      	b.n	80090ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090d0:	4b0a      	ldr	r3, [pc, #40]	; (80090fc <vTaskPlaceOnEventListRestricted+0x54>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	3318      	adds	r3, #24
 80090d6:	4619      	mov	r1, r3
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f7fe fd5e 	bl	8007b9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d002      	beq.n	80090ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80090e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80090ea:	6879      	ldr	r1, [r7, #4]
 80090ec:	68b8      	ldr	r0, [r7, #8]
 80090ee:	f000 fa55 	bl	800959c <prvAddCurrentTaskToDelayedList>
	}
 80090f2:	bf00      	nop
 80090f4:	3718      	adds	r7, #24
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	2400081c 	.word	0x2400081c

08009100 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10a      	bne.n	800912c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	60fb      	str	r3, [r7, #12]
}
 8009128:	bf00      	nop
 800912a:	e7fe      	b.n	800912a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	3318      	adds	r3, #24
 8009130:	4618      	mov	r0, r3
 8009132:	f7fe fd8f 	bl	8007c54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009136:	4b1e      	ldr	r3, [pc, #120]	; (80091b0 <xTaskRemoveFromEventList+0xb0>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d11d      	bne.n	800917a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	3304      	adds	r3, #4
 8009142:	4618      	mov	r0, r3
 8009144:	f7fe fd86 	bl	8007c54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800914c:	4b19      	ldr	r3, [pc, #100]	; (80091b4 <xTaskRemoveFromEventList+0xb4>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	429a      	cmp	r2, r3
 8009152:	d903      	bls.n	800915c <xTaskRemoveFromEventList+0x5c>
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009158:	4a16      	ldr	r2, [pc, #88]	; (80091b4 <xTaskRemoveFromEventList+0xb4>)
 800915a:	6013      	str	r3, [r2, #0]
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009160:	4613      	mov	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4413      	add	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	4a13      	ldr	r2, [pc, #76]	; (80091b8 <xTaskRemoveFromEventList+0xb8>)
 800916a:	441a      	add	r2, r3
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	3304      	adds	r3, #4
 8009170:	4619      	mov	r1, r3
 8009172:	4610      	mov	r0, r2
 8009174:	f7fe fd11 	bl	8007b9a <vListInsertEnd>
 8009178:	e005      	b.n	8009186 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	3318      	adds	r3, #24
 800917e:	4619      	mov	r1, r3
 8009180:	480e      	ldr	r0, [pc, #56]	; (80091bc <xTaskRemoveFromEventList+0xbc>)
 8009182:	f7fe fd0a 	bl	8007b9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800918a:	4b0d      	ldr	r3, [pc, #52]	; (80091c0 <xTaskRemoveFromEventList+0xc0>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009190:	429a      	cmp	r2, r3
 8009192:	d905      	bls.n	80091a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009194:	2301      	movs	r3, #1
 8009196:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009198:	4b0a      	ldr	r3, [pc, #40]	; (80091c4 <xTaskRemoveFromEventList+0xc4>)
 800919a:	2201      	movs	r2, #1
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	e001      	b.n	80091a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80091a0:	2300      	movs	r3, #0
 80091a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80091a4:	697b      	ldr	r3, [r7, #20]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	24000d18 	.word	0x24000d18
 80091b4:	24000cf8 	.word	0x24000cf8
 80091b8:	24000820 	.word	0x24000820
 80091bc:	24000cb0 	.word	0x24000cb0
 80091c0:	2400081c 	.word	0x2400081c
 80091c4:	24000d04 	.word	0x24000d04

080091c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80091d0:	4b06      	ldr	r3, [pc, #24]	; (80091ec <vTaskInternalSetTimeOutState+0x24>)
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80091d8:	4b05      	ldr	r3, [pc, #20]	; (80091f0 <vTaskInternalSetTimeOutState+0x28>)
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	605a      	str	r2, [r3, #4]
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	24000d08 	.word	0x24000d08
 80091f0:	24000cf4 	.word	0x24000cf4

080091f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b088      	sub	sp, #32
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10a      	bne.n	800921a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	613b      	str	r3, [r7, #16]
}
 8009216:	bf00      	nop
 8009218:	e7fe      	b.n	8009218 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d10a      	bne.n	8009236 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	60fb      	str	r3, [r7, #12]
}
 8009232:	bf00      	nop
 8009234:	e7fe      	b.n	8009234 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009236:	f000 fe7d 	bl	8009f34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800923a:	4b1d      	ldr	r3, [pc, #116]	; (80092b0 <xTaskCheckForTimeOut+0xbc>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	69ba      	ldr	r2, [r7, #24]
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009252:	d102      	bne.n	800925a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009254:	2300      	movs	r3, #0
 8009256:	61fb      	str	r3, [r7, #28]
 8009258:	e023      	b.n	80092a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	4b15      	ldr	r3, [pc, #84]	; (80092b4 <xTaskCheckForTimeOut+0xc0>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	429a      	cmp	r2, r3
 8009264:	d007      	beq.n	8009276 <xTaskCheckForTimeOut+0x82>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	69ba      	ldr	r2, [r7, #24]
 800926c:	429a      	cmp	r2, r3
 800926e:	d302      	bcc.n	8009276 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009270:	2301      	movs	r3, #1
 8009272:	61fb      	str	r3, [r7, #28]
 8009274:	e015      	b.n	80092a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	429a      	cmp	r2, r3
 800927e:	d20b      	bcs.n	8009298 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	1ad2      	subs	r2, r2, r3
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7ff ff9b 	bl	80091c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009292:	2300      	movs	r3, #0
 8009294:	61fb      	str	r3, [r7, #28]
 8009296:	e004      	b.n	80092a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	2200      	movs	r2, #0
 800929c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800929e:	2301      	movs	r3, #1
 80092a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80092a2:	f000 fe77 	bl	8009f94 <vPortExitCritical>

	return xReturn;
 80092a6:	69fb      	ldr	r3, [r7, #28]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3720      	adds	r7, #32
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	24000cf4 	.word	0x24000cf4
 80092b4:	24000d08 	.word	0x24000d08

080092b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80092b8:	b480      	push	{r7}
 80092ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80092bc:	4b03      	ldr	r3, [pc, #12]	; (80092cc <vTaskMissedYield+0x14>)
 80092be:	2201      	movs	r2, #1
 80092c0:	601a      	str	r2, [r3, #0]
}
 80092c2:	bf00      	nop
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr
 80092cc:	24000d04 	.word	0x24000d04

080092d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80092d8:	f000 f852 	bl	8009380 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80092dc:	4b06      	ldr	r3, [pc, #24]	; (80092f8 <prvIdleTask+0x28>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d9f9      	bls.n	80092d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80092e4:	4b05      	ldr	r3, [pc, #20]	; (80092fc <prvIdleTask+0x2c>)
 80092e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092ea:	601a      	str	r2, [r3, #0]
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80092f4:	e7f0      	b.n	80092d8 <prvIdleTask+0x8>
 80092f6:	bf00      	nop
 80092f8:	24000820 	.word	0x24000820
 80092fc:	e000ed04 	.word	0xe000ed04

08009300 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009306:	2300      	movs	r3, #0
 8009308:	607b      	str	r3, [r7, #4]
 800930a:	e00c      	b.n	8009326 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	4613      	mov	r3, r2
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4413      	add	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4a12      	ldr	r2, [pc, #72]	; (8009360 <prvInitialiseTaskLists+0x60>)
 8009318:	4413      	add	r3, r2
 800931a:	4618      	mov	r0, r3
 800931c:	f7fe fc10 	bl	8007b40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	3301      	adds	r3, #1
 8009324:	607b      	str	r3, [r7, #4]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2b37      	cmp	r3, #55	; 0x37
 800932a:	d9ef      	bls.n	800930c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800932c:	480d      	ldr	r0, [pc, #52]	; (8009364 <prvInitialiseTaskLists+0x64>)
 800932e:	f7fe fc07 	bl	8007b40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009332:	480d      	ldr	r0, [pc, #52]	; (8009368 <prvInitialiseTaskLists+0x68>)
 8009334:	f7fe fc04 	bl	8007b40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009338:	480c      	ldr	r0, [pc, #48]	; (800936c <prvInitialiseTaskLists+0x6c>)
 800933a:	f7fe fc01 	bl	8007b40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800933e:	480c      	ldr	r0, [pc, #48]	; (8009370 <prvInitialiseTaskLists+0x70>)
 8009340:	f7fe fbfe 	bl	8007b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009344:	480b      	ldr	r0, [pc, #44]	; (8009374 <prvInitialiseTaskLists+0x74>)
 8009346:	f7fe fbfb 	bl	8007b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800934a:	4b0b      	ldr	r3, [pc, #44]	; (8009378 <prvInitialiseTaskLists+0x78>)
 800934c:	4a05      	ldr	r2, [pc, #20]	; (8009364 <prvInitialiseTaskLists+0x64>)
 800934e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009350:	4b0a      	ldr	r3, [pc, #40]	; (800937c <prvInitialiseTaskLists+0x7c>)
 8009352:	4a05      	ldr	r2, [pc, #20]	; (8009368 <prvInitialiseTaskLists+0x68>)
 8009354:	601a      	str	r2, [r3, #0]
}
 8009356:	bf00      	nop
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	24000820 	.word	0x24000820
 8009364:	24000c80 	.word	0x24000c80
 8009368:	24000c94 	.word	0x24000c94
 800936c:	24000cb0 	.word	0x24000cb0
 8009370:	24000cc4 	.word	0x24000cc4
 8009374:	24000cdc 	.word	0x24000cdc
 8009378:	24000ca8 	.word	0x24000ca8
 800937c:	24000cac 	.word	0x24000cac

08009380 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009386:	e019      	b.n	80093bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009388:	f000 fdd4 	bl	8009f34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800938c:	4b10      	ldr	r3, [pc, #64]	; (80093d0 <prvCheckTasksWaitingTermination+0x50>)
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	3304      	adds	r3, #4
 8009398:	4618      	mov	r0, r3
 800939a:	f7fe fc5b 	bl	8007c54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800939e:	4b0d      	ldr	r3, [pc, #52]	; (80093d4 <prvCheckTasksWaitingTermination+0x54>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3b01      	subs	r3, #1
 80093a4:	4a0b      	ldr	r2, [pc, #44]	; (80093d4 <prvCheckTasksWaitingTermination+0x54>)
 80093a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80093a8:	4b0b      	ldr	r3, [pc, #44]	; (80093d8 <prvCheckTasksWaitingTermination+0x58>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	3b01      	subs	r3, #1
 80093ae:	4a0a      	ldr	r2, [pc, #40]	; (80093d8 <prvCheckTasksWaitingTermination+0x58>)
 80093b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80093b2:	f000 fdef 	bl	8009f94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f810 	bl	80093dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093bc:	4b06      	ldr	r3, [pc, #24]	; (80093d8 <prvCheckTasksWaitingTermination+0x58>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1e1      	bne.n	8009388 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80093c4:	bf00      	nop
 80093c6:	bf00      	nop
 80093c8:	3708      	adds	r7, #8
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	24000cc4 	.word	0x24000cc4
 80093d4:	24000cf0 	.word	0x24000cf0
 80093d8:	24000cd8 	.word	0x24000cd8

080093dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	3354      	adds	r3, #84	; 0x54
 80093e8:	4618      	mov	r0, r3
 80093ea:	f001 f903 	bl	800a5f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d108      	bne.n	800940a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fc:	4618      	mov	r0, r3
 80093fe:	f000 ff87 	bl	800a310 <vPortFree>
				vPortFree( pxTCB );
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 ff84 	bl	800a310 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009408:	e018      	b.n	800943c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009410:	2b01      	cmp	r3, #1
 8009412:	d103      	bne.n	800941c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 ff7b 	bl	800a310 <vPortFree>
	}
 800941a:	e00f      	b.n	800943c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009422:	2b02      	cmp	r3, #2
 8009424:	d00a      	beq.n	800943c <prvDeleteTCB+0x60>
	__asm volatile
 8009426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	60fb      	str	r3, [r7, #12]
}
 8009438:	bf00      	nop
 800943a:	e7fe      	b.n	800943a <prvDeleteTCB+0x5e>
	}
 800943c:	bf00      	nop
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800944a:	4b0c      	ldr	r3, [pc, #48]	; (800947c <prvResetNextTaskUnblockTime+0x38>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d104      	bne.n	800945e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009454:	4b0a      	ldr	r3, [pc, #40]	; (8009480 <prvResetNextTaskUnblockTime+0x3c>)
 8009456:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800945a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800945c:	e008      	b.n	8009470 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800945e:	4b07      	ldr	r3, [pc, #28]	; (800947c <prvResetNextTaskUnblockTime+0x38>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	4a04      	ldr	r2, [pc, #16]	; (8009480 <prvResetNextTaskUnblockTime+0x3c>)
 800946e:	6013      	str	r3, [r2, #0]
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr
 800947c:	24000ca8 	.word	0x24000ca8
 8009480:	24000d10 	.word	0x24000d10

08009484 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800948a:	4b0b      	ldr	r3, [pc, #44]	; (80094b8 <xTaskGetSchedulerState+0x34>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d102      	bne.n	8009498 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009492:	2301      	movs	r3, #1
 8009494:	607b      	str	r3, [r7, #4]
 8009496:	e008      	b.n	80094aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009498:	4b08      	ldr	r3, [pc, #32]	; (80094bc <xTaskGetSchedulerState+0x38>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d102      	bne.n	80094a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80094a0:	2302      	movs	r3, #2
 80094a2:	607b      	str	r3, [r7, #4]
 80094a4:	e001      	b.n	80094aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80094a6:	2300      	movs	r3, #0
 80094a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80094aa:	687b      	ldr	r3, [r7, #4]
	}
 80094ac:	4618      	mov	r0, r3
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr
 80094b8:	24000cfc 	.word	0x24000cfc
 80094bc:	24000d18 	.word	0x24000d18

080094c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80094cc:	2300      	movs	r3, #0
 80094ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d056      	beq.n	8009584 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80094d6:	4b2e      	ldr	r3, [pc, #184]	; (8009590 <xTaskPriorityDisinherit+0xd0>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	693a      	ldr	r2, [r7, #16]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d00a      	beq.n	80094f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80094e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	60fb      	str	r3, [r7, #12]
}
 80094f2:	bf00      	nop
 80094f4:	e7fe      	b.n	80094f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10a      	bne.n	8009514 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80094fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	60bb      	str	r3, [r7, #8]
}
 8009510:	bf00      	nop
 8009512:	e7fe      	b.n	8009512 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009518:	1e5a      	subs	r2, r3, #1
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009526:	429a      	cmp	r2, r3
 8009528:	d02c      	beq.n	8009584 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800952e:	2b00      	cmp	r3, #0
 8009530:	d128      	bne.n	8009584 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	3304      	adds	r3, #4
 8009536:	4618      	mov	r0, r3
 8009538:	f7fe fb8c 	bl	8007c54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009548:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009554:	4b0f      	ldr	r3, [pc, #60]	; (8009594 <xTaskPriorityDisinherit+0xd4>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	429a      	cmp	r2, r3
 800955a:	d903      	bls.n	8009564 <xTaskPriorityDisinherit+0xa4>
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009560:	4a0c      	ldr	r2, [pc, #48]	; (8009594 <xTaskPriorityDisinherit+0xd4>)
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009568:	4613      	mov	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	4413      	add	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4a09      	ldr	r2, [pc, #36]	; (8009598 <xTaskPriorityDisinherit+0xd8>)
 8009572:	441a      	add	r2, r3
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	3304      	adds	r3, #4
 8009578:	4619      	mov	r1, r3
 800957a:	4610      	mov	r0, r2
 800957c:	f7fe fb0d 	bl	8007b9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009580:	2301      	movs	r3, #1
 8009582:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009584:	697b      	ldr	r3, [r7, #20]
	}
 8009586:	4618      	mov	r0, r3
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	2400081c 	.word	0x2400081c
 8009594:	24000cf8 	.word	0x24000cf8
 8009598:	24000820 	.word	0x24000820

0800959c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095a6:	4b21      	ldr	r3, [pc, #132]	; (800962c <prvAddCurrentTaskToDelayedList+0x90>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095ac:	4b20      	ldr	r3, [pc, #128]	; (8009630 <prvAddCurrentTaskToDelayedList+0x94>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3304      	adds	r3, #4
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fe fb4e 	bl	8007c54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095be:	d10a      	bne.n	80095d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d007      	beq.n	80095d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095c6:	4b1a      	ldr	r3, [pc, #104]	; (8009630 <prvAddCurrentTaskToDelayedList+0x94>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	3304      	adds	r3, #4
 80095cc:	4619      	mov	r1, r3
 80095ce:	4819      	ldr	r0, [pc, #100]	; (8009634 <prvAddCurrentTaskToDelayedList+0x98>)
 80095d0:	f7fe fae3 	bl	8007b9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095d4:	e026      	b.n	8009624 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4413      	add	r3, r2
 80095dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095de:	4b14      	ldr	r3, [pc, #80]	; (8009630 <prvAddCurrentTaskToDelayedList+0x94>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d209      	bcs.n	8009602 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095ee:	4b12      	ldr	r3, [pc, #72]	; (8009638 <prvAddCurrentTaskToDelayedList+0x9c>)
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	4b0f      	ldr	r3, [pc, #60]	; (8009630 <prvAddCurrentTaskToDelayedList+0x94>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3304      	adds	r3, #4
 80095f8:	4619      	mov	r1, r3
 80095fa:	4610      	mov	r0, r2
 80095fc:	f7fe faf1 	bl	8007be2 <vListInsert>
}
 8009600:	e010      	b.n	8009624 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009602:	4b0e      	ldr	r3, [pc, #56]	; (800963c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	4b0a      	ldr	r3, [pc, #40]	; (8009630 <prvAddCurrentTaskToDelayedList+0x94>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3304      	adds	r3, #4
 800960c:	4619      	mov	r1, r3
 800960e:	4610      	mov	r0, r2
 8009610:	f7fe fae7 	bl	8007be2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009614:	4b0a      	ldr	r3, [pc, #40]	; (8009640 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	429a      	cmp	r2, r3
 800961c:	d202      	bcs.n	8009624 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800961e:	4a08      	ldr	r2, [pc, #32]	; (8009640 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	6013      	str	r3, [r2, #0]
}
 8009624:	bf00      	nop
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	24000cf4 	.word	0x24000cf4
 8009630:	2400081c 	.word	0x2400081c
 8009634:	24000cdc 	.word	0x24000cdc
 8009638:	24000cac 	.word	0x24000cac
 800963c:	24000ca8 	.word	0x24000ca8
 8009640:	24000d10 	.word	0x24000d10

08009644 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b08a      	sub	sp, #40	; 0x28
 8009648:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800964a:	2300      	movs	r3, #0
 800964c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800964e:	f000 fb07 	bl	8009c60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009652:	4b1c      	ldr	r3, [pc, #112]	; (80096c4 <xTimerCreateTimerTask+0x80>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d021      	beq.n	800969e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800965a:	2300      	movs	r3, #0
 800965c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800965e:	2300      	movs	r3, #0
 8009660:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009662:	1d3a      	adds	r2, r7, #4
 8009664:	f107 0108 	add.w	r1, r7, #8
 8009668:	f107 030c 	add.w	r3, r7, #12
 800966c:	4618      	mov	r0, r3
 800966e:	f7fe fa4d 	bl	8007b0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009672:	6879      	ldr	r1, [r7, #4]
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	9202      	str	r2, [sp, #8]
 800967a:	9301      	str	r3, [sp, #4]
 800967c:	2302      	movs	r3, #2
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	2300      	movs	r3, #0
 8009682:	460a      	mov	r2, r1
 8009684:	4910      	ldr	r1, [pc, #64]	; (80096c8 <xTimerCreateTimerTask+0x84>)
 8009686:	4811      	ldr	r0, [pc, #68]	; (80096cc <xTimerCreateTimerTask+0x88>)
 8009688:	f7ff f8b4 	bl	80087f4 <xTaskCreateStatic>
 800968c:	4603      	mov	r3, r0
 800968e:	4a10      	ldr	r2, [pc, #64]	; (80096d0 <xTimerCreateTimerTask+0x8c>)
 8009690:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009692:	4b0f      	ldr	r3, [pc, #60]	; (80096d0 <xTimerCreateTimerTask+0x8c>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800969a:	2301      	movs	r3, #1
 800969c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10a      	bne.n	80096ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 80096a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	613b      	str	r3, [r7, #16]
}
 80096b6:	bf00      	nop
 80096b8:	e7fe      	b.n	80096b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80096ba:	697b      	ldr	r3, [r7, #20]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3718      	adds	r7, #24
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	24000d4c 	.word	0x24000d4c
 80096c8:	0800a8fc 	.word	0x0800a8fc
 80096cc:	08009809 	.word	0x08009809
 80096d0:	24000d50 	.word	0x24000d50

080096d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08a      	sub	sp, #40	; 0x28
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
 80096e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80096e2:	2300      	movs	r3, #0
 80096e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10a      	bne.n	8009702 <xTimerGenericCommand+0x2e>
	__asm volatile
 80096ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	623b      	str	r3, [r7, #32]
}
 80096fe:	bf00      	nop
 8009700:	e7fe      	b.n	8009700 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009702:	4b1a      	ldr	r3, [pc, #104]	; (800976c <xTimerGenericCommand+0x98>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d02a      	beq.n	8009760 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	2b05      	cmp	r3, #5
 800971a:	dc18      	bgt.n	800974e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800971c:	f7ff feb2 	bl	8009484 <xTaskGetSchedulerState>
 8009720:	4603      	mov	r3, r0
 8009722:	2b02      	cmp	r3, #2
 8009724:	d109      	bne.n	800973a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009726:	4b11      	ldr	r3, [pc, #68]	; (800976c <xTimerGenericCommand+0x98>)
 8009728:	6818      	ldr	r0, [r3, #0]
 800972a:	f107 0110 	add.w	r1, r7, #16
 800972e:	2300      	movs	r3, #0
 8009730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009732:	f7fe fbf7 	bl	8007f24 <xQueueGenericSend>
 8009736:	6278      	str	r0, [r7, #36]	; 0x24
 8009738:	e012      	b.n	8009760 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800973a:	4b0c      	ldr	r3, [pc, #48]	; (800976c <xTimerGenericCommand+0x98>)
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	f107 0110 	add.w	r1, r7, #16
 8009742:	2300      	movs	r3, #0
 8009744:	2200      	movs	r2, #0
 8009746:	f7fe fbed 	bl	8007f24 <xQueueGenericSend>
 800974a:	6278      	str	r0, [r7, #36]	; 0x24
 800974c:	e008      	b.n	8009760 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800974e:	4b07      	ldr	r3, [pc, #28]	; (800976c <xTimerGenericCommand+0x98>)
 8009750:	6818      	ldr	r0, [r3, #0]
 8009752:	f107 0110 	add.w	r1, r7, #16
 8009756:	2300      	movs	r3, #0
 8009758:	683a      	ldr	r2, [r7, #0]
 800975a:	f7fe fce1 	bl	8008120 <xQueueGenericSendFromISR>
 800975e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009762:	4618      	mov	r0, r3
 8009764:	3728      	adds	r7, #40	; 0x28
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	24000d4c 	.word	0x24000d4c

08009770 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b088      	sub	sp, #32
 8009774:	af02      	add	r7, sp, #8
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800977a:	4b22      	ldr	r3, [pc, #136]	; (8009804 <prvProcessExpiredTimer+0x94>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	3304      	adds	r3, #4
 8009788:	4618      	mov	r0, r3
 800978a:	f7fe fa63 	bl	8007c54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009794:	f003 0304 	and.w	r3, r3, #4
 8009798:	2b00      	cmp	r3, #0
 800979a:	d022      	beq.n	80097e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	699a      	ldr	r2, [r3, #24]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	18d1      	adds	r1, r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	683a      	ldr	r2, [r7, #0]
 80097a8:	6978      	ldr	r0, [r7, #20]
 80097aa:	f000 f8d1 	bl	8009950 <prvInsertTimerInActiveList>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d01f      	beq.n	80097f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097b4:	2300      	movs	r3, #0
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	2300      	movs	r3, #0
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	2100      	movs	r1, #0
 80097be:	6978      	ldr	r0, [r7, #20]
 80097c0:	f7ff ff88 	bl	80096d4 <xTimerGenericCommand>
 80097c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d113      	bne.n	80097f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	60fb      	str	r3, [r7, #12]
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097e8:	f023 0301 	bic.w	r3, r3, #1
 80097ec:	b2da      	uxtb	r2, r3
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	6a1b      	ldr	r3, [r3, #32]
 80097f8:	6978      	ldr	r0, [r7, #20]
 80097fa:	4798      	blx	r3
}
 80097fc:	bf00      	nop
 80097fe:	3718      	adds	r7, #24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	24000d44 	.word	0x24000d44

08009808 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009810:	f107 0308 	add.w	r3, r7, #8
 8009814:	4618      	mov	r0, r3
 8009816:	f000 f857 	bl	80098c8 <prvGetNextExpireTime>
 800981a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	4619      	mov	r1, r3
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f000 f803 	bl	800982c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009826:	f000 f8d5 	bl	80099d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800982a:	e7f1      	b.n	8009810 <prvTimerTask+0x8>

0800982c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009836:	f7ff fa39 	bl	8008cac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800983a:	f107 0308 	add.w	r3, r7, #8
 800983e:	4618      	mov	r0, r3
 8009840:	f000 f866 	bl	8009910 <prvSampleTimeNow>
 8009844:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d130      	bne.n	80098ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d10a      	bne.n	8009868 <prvProcessTimerOrBlockTask+0x3c>
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	429a      	cmp	r2, r3
 8009858:	d806      	bhi.n	8009868 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800985a:	f7ff fa35 	bl	8008cc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800985e:	68f9      	ldr	r1, [r7, #12]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7ff ff85 	bl	8009770 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009866:	e024      	b.n	80098b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d008      	beq.n	8009880 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800986e:	4b13      	ldr	r3, [pc, #76]	; (80098bc <prvProcessTimerOrBlockTask+0x90>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d101      	bne.n	800987c <prvProcessTimerOrBlockTask+0x50>
 8009878:	2301      	movs	r3, #1
 800987a:	e000      	b.n	800987e <prvProcessTimerOrBlockTask+0x52>
 800987c:	2300      	movs	r3, #0
 800987e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009880:	4b0f      	ldr	r3, [pc, #60]	; (80098c0 <prvProcessTimerOrBlockTask+0x94>)
 8009882:	6818      	ldr	r0, [r3, #0]
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	4619      	mov	r1, r3
 800988e:	f7fe ff7d 	bl	800878c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009892:	f7ff fa19 	bl	8008cc8 <xTaskResumeAll>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d10a      	bne.n	80098b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800989c:	4b09      	ldr	r3, [pc, #36]	; (80098c4 <prvProcessTimerOrBlockTask+0x98>)
 800989e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	f3bf 8f6f 	isb	sy
}
 80098ac:	e001      	b.n	80098b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80098ae:	f7ff fa0b 	bl	8008cc8 <xTaskResumeAll>
}
 80098b2:	bf00      	nop
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	24000d48 	.word	0x24000d48
 80098c0:	24000d4c 	.word	0x24000d4c
 80098c4:	e000ed04 	.word	0xe000ed04

080098c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80098d0:	4b0e      	ldr	r3, [pc, #56]	; (800990c <prvGetNextExpireTime+0x44>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <prvGetNextExpireTime+0x16>
 80098da:	2201      	movs	r2, #1
 80098dc:	e000      	b.n	80098e0 <prvGetNextExpireTime+0x18>
 80098de:	2200      	movs	r2, #0
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d105      	bne.n	80098f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098ec:	4b07      	ldr	r3, [pc, #28]	; (800990c <prvGetNextExpireTime+0x44>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	60fb      	str	r3, [r7, #12]
 80098f6:	e001      	b.n	80098fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80098fc:	68fb      	ldr	r3, [r7, #12]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3714      	adds	r7, #20
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	24000d44 	.word	0x24000d44

08009910 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009918:	f7ff fa74 	bl	8008e04 <xTaskGetTickCount>
 800991c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800991e:	4b0b      	ldr	r3, [pc, #44]	; (800994c <prvSampleTimeNow+0x3c>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	429a      	cmp	r2, r3
 8009926:	d205      	bcs.n	8009934 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009928:	f000 f936 	bl	8009b98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	601a      	str	r2, [r3, #0]
 8009932:	e002      	b.n	800993a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800993a:	4a04      	ldr	r2, [pc, #16]	; (800994c <prvSampleTimeNow+0x3c>)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009940:	68fb      	ldr	r3, [r7, #12]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	24000d54 	.word	0x24000d54

08009950 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b086      	sub	sp, #24
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	607a      	str	r2, [r7, #4]
 800995c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800995e:	2300      	movs	r3, #0
 8009960:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	429a      	cmp	r2, r3
 8009974:	d812      	bhi.n	800999c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	1ad2      	subs	r2, r2, r3
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	699b      	ldr	r3, [r3, #24]
 8009980:	429a      	cmp	r2, r3
 8009982:	d302      	bcc.n	800998a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009984:	2301      	movs	r3, #1
 8009986:	617b      	str	r3, [r7, #20]
 8009988:	e01b      	b.n	80099c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800998a:	4b10      	ldr	r3, [pc, #64]	; (80099cc <prvInsertTimerInActiveList+0x7c>)
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	3304      	adds	r3, #4
 8009992:	4619      	mov	r1, r3
 8009994:	4610      	mov	r0, r2
 8009996:	f7fe f924 	bl	8007be2 <vListInsert>
 800999a:	e012      	b.n	80099c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d206      	bcs.n	80099b2 <prvInsertTimerInActiveList+0x62>
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d302      	bcc.n	80099b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80099ac:	2301      	movs	r3, #1
 80099ae:	617b      	str	r3, [r7, #20]
 80099b0:	e007      	b.n	80099c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80099b2:	4b07      	ldr	r3, [pc, #28]	; (80099d0 <prvInsertTimerInActiveList+0x80>)
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	3304      	adds	r3, #4
 80099ba:	4619      	mov	r1, r3
 80099bc:	4610      	mov	r0, r2
 80099be:	f7fe f910 	bl	8007be2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80099c2:	697b      	ldr	r3, [r7, #20]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3718      	adds	r7, #24
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	24000d48 	.word	0x24000d48
 80099d0:	24000d44 	.word	0x24000d44

080099d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b08e      	sub	sp, #56	; 0x38
 80099d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099da:	e0ca      	b.n	8009b72 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	da18      	bge.n	8009a14 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80099e2:	1d3b      	adds	r3, r7, #4
 80099e4:	3304      	adds	r3, #4
 80099e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80099e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10a      	bne.n	8009a04 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	61fb      	str	r3, [r7, #28]
}
 8009a00:	bf00      	nop
 8009a02:	e7fe      	b.n	8009a02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a0a:	6850      	ldr	r0, [r2, #4]
 8009a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a0e:	6892      	ldr	r2, [r2, #8]
 8009a10:	4611      	mov	r1, r2
 8009a12:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f2c0 80aa 	blt.w	8009b70 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d004      	beq.n	8009a32 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	3304      	adds	r3, #4
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fe f911 	bl	8007c54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a32:	463b      	mov	r3, r7
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7ff ff6b 	bl	8009910 <prvSampleTimeNow>
 8009a3a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2b09      	cmp	r3, #9
 8009a40:	f200 8097 	bhi.w	8009b72 <prvProcessReceivedCommands+0x19e>
 8009a44:	a201      	add	r2, pc, #4	; (adr r2, 8009a4c <prvProcessReceivedCommands+0x78>)
 8009a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4a:	bf00      	nop
 8009a4c:	08009a75 	.word	0x08009a75
 8009a50:	08009a75 	.word	0x08009a75
 8009a54:	08009a75 	.word	0x08009a75
 8009a58:	08009ae9 	.word	0x08009ae9
 8009a5c:	08009afd 	.word	0x08009afd
 8009a60:	08009b47 	.word	0x08009b47
 8009a64:	08009a75 	.word	0x08009a75
 8009a68:	08009a75 	.word	0x08009a75
 8009a6c:	08009ae9 	.word	0x08009ae9
 8009a70:	08009afd 	.word	0x08009afd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a7a:	f043 0301 	orr.w	r3, r3, #1
 8009a7e:	b2da      	uxtb	r2, r3
 8009a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8a:	699b      	ldr	r3, [r3, #24]
 8009a8c:	18d1      	adds	r1, r2, r3
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a94:	f7ff ff5c 	bl	8009950 <prvInsertTimerInActiveList>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d069      	beq.n	8009b72 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aa4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aac:	f003 0304 	and.w	r3, r3, #4
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d05e      	beq.n	8009b72 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	441a      	add	r2, r3
 8009abc:	2300      	movs	r3, #0
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ac6:	f7ff fe05 	bl	80096d4 <xTimerGenericCommand>
 8009aca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d14f      	bne.n	8009b72 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad6:	f383 8811 	msr	BASEPRI, r3
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	61bb      	str	r3, [r7, #24]
}
 8009ae4:	bf00      	nop
 8009ae6:	e7fe      	b.n	8009ae6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aee:	f023 0301 	bic.w	r3, r3, #1
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009afa:	e03a      	b.n	8009b72 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b02:	f043 0301 	orr.w	r3, r3, #1
 8009b06:	b2da      	uxtb	r2, r3
 8009b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009b0e:	68ba      	ldr	r2, [r7, #8]
 8009b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b12:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10a      	bne.n	8009b32 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	617b      	str	r3, [r7, #20]
}
 8009b2e:	bf00      	nop
 8009b30:	e7fe      	b.n	8009b30 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b34:	699a      	ldr	r2, [r3, #24]
 8009b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b38:	18d1      	adds	r1, r2, r3
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b40:	f7ff ff06 	bl	8009950 <prvInsertTimerInActiveList>
					break;
 8009b44:	e015      	b.n	8009b72 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b4c:	f003 0302 	and.w	r3, r3, #2
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d103      	bne.n	8009b5c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b56:	f000 fbdb 	bl	800a310 <vPortFree>
 8009b5a:	e00a      	b.n	8009b72 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b62:	f023 0301 	bic.w	r3, r3, #1
 8009b66:	b2da      	uxtb	r2, r3
 8009b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b6e:	e000      	b.n	8009b72 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009b70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b72:	4b08      	ldr	r3, [pc, #32]	; (8009b94 <prvProcessReceivedCommands+0x1c0>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	1d39      	adds	r1, r7, #4
 8009b78:	2200      	movs	r2, #0
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fe fb6c 	bl	8008258 <xQueueReceive>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f47f af2a 	bne.w	80099dc <prvProcessReceivedCommands+0x8>
	}
}
 8009b88:	bf00      	nop
 8009b8a:	bf00      	nop
 8009b8c:	3730      	adds	r7, #48	; 0x30
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	24000d4c 	.word	0x24000d4c

08009b98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b088      	sub	sp, #32
 8009b9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b9e:	e048      	b.n	8009c32 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ba0:	4b2d      	ldr	r3, [pc, #180]	; (8009c58 <prvSwitchTimerLists+0xc0>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009baa:	4b2b      	ldr	r3, [pc, #172]	; (8009c58 <prvSwitchTimerLists+0xc0>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	3304      	adds	r3, #4
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7fe f84b 	bl	8007c54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6a1b      	ldr	r3, [r3, #32]
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bcc:	f003 0304 	and.w	r3, r3, #4
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d02e      	beq.n	8009c32 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	693a      	ldr	r2, [r7, #16]
 8009bda:	4413      	add	r3, r2
 8009bdc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d90e      	bls.n	8009c04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bf2:	4b19      	ldr	r3, [pc, #100]	; (8009c58 <prvSwitchTimerLists+0xc0>)
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	f7fd fff0 	bl	8007be2 <vListInsert>
 8009c02:	e016      	b.n	8009c32 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c04:	2300      	movs	r3, #0
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	2300      	movs	r3, #0
 8009c0a:	693a      	ldr	r2, [r7, #16]
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f7ff fd60 	bl	80096d4 <xTimerGenericCommand>
 8009c14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10a      	bne.n	8009c32 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	603b      	str	r3, [r7, #0]
}
 8009c2e:	bf00      	nop
 8009c30:	e7fe      	b.n	8009c30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c32:	4b09      	ldr	r3, [pc, #36]	; (8009c58 <prvSwitchTimerLists+0xc0>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1b1      	bne.n	8009ba0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009c3c:	4b06      	ldr	r3, [pc, #24]	; (8009c58 <prvSwitchTimerLists+0xc0>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009c42:	4b06      	ldr	r3, [pc, #24]	; (8009c5c <prvSwitchTimerLists+0xc4>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a04      	ldr	r2, [pc, #16]	; (8009c58 <prvSwitchTimerLists+0xc0>)
 8009c48:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009c4a:	4a04      	ldr	r2, [pc, #16]	; (8009c5c <prvSwitchTimerLists+0xc4>)
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	6013      	str	r3, [r2, #0]
}
 8009c50:	bf00      	nop
 8009c52:	3718      	adds	r7, #24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	24000d44 	.word	0x24000d44
 8009c5c:	24000d48 	.word	0x24000d48

08009c60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c66:	f000 f965 	bl	8009f34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c6a:	4b15      	ldr	r3, [pc, #84]	; (8009cc0 <prvCheckForValidListAndQueue+0x60>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d120      	bne.n	8009cb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c72:	4814      	ldr	r0, [pc, #80]	; (8009cc4 <prvCheckForValidListAndQueue+0x64>)
 8009c74:	f7fd ff64 	bl	8007b40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c78:	4813      	ldr	r0, [pc, #76]	; (8009cc8 <prvCheckForValidListAndQueue+0x68>)
 8009c7a:	f7fd ff61 	bl	8007b40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c7e:	4b13      	ldr	r3, [pc, #76]	; (8009ccc <prvCheckForValidListAndQueue+0x6c>)
 8009c80:	4a10      	ldr	r2, [pc, #64]	; (8009cc4 <prvCheckForValidListAndQueue+0x64>)
 8009c82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c84:	4b12      	ldr	r3, [pc, #72]	; (8009cd0 <prvCheckForValidListAndQueue+0x70>)
 8009c86:	4a10      	ldr	r2, [pc, #64]	; (8009cc8 <prvCheckForValidListAndQueue+0x68>)
 8009c88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	4b11      	ldr	r3, [pc, #68]	; (8009cd4 <prvCheckForValidListAndQueue+0x74>)
 8009c90:	4a11      	ldr	r2, [pc, #68]	; (8009cd8 <prvCheckForValidListAndQueue+0x78>)
 8009c92:	2110      	movs	r1, #16
 8009c94:	200a      	movs	r0, #10
 8009c96:	f7fe f86f 	bl	8007d78 <xQueueGenericCreateStatic>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	4a08      	ldr	r2, [pc, #32]	; (8009cc0 <prvCheckForValidListAndQueue+0x60>)
 8009c9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ca0:	4b07      	ldr	r3, [pc, #28]	; (8009cc0 <prvCheckForValidListAndQueue+0x60>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d005      	beq.n	8009cb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ca8:	4b05      	ldr	r3, [pc, #20]	; (8009cc0 <prvCheckForValidListAndQueue+0x60>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	490b      	ldr	r1, [pc, #44]	; (8009cdc <prvCheckForValidListAndQueue+0x7c>)
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fe fd42 	bl	8008738 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009cb4:	f000 f96e 	bl	8009f94 <vPortExitCritical>
}
 8009cb8:	bf00      	nop
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	24000d4c 	.word	0x24000d4c
 8009cc4:	24000d1c 	.word	0x24000d1c
 8009cc8:	24000d30 	.word	0x24000d30
 8009ccc:	24000d44 	.word	0x24000d44
 8009cd0:	24000d48 	.word	0x24000d48
 8009cd4:	24000df8 	.word	0x24000df8
 8009cd8:	24000d58 	.word	0x24000d58
 8009cdc:	0800a904 	.word	0x0800a904

08009ce0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	3b04      	subs	r3, #4
 8009cf0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009cf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	3b04      	subs	r3, #4
 8009cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	f023 0201 	bic.w	r2, r3, #1
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	3b04      	subs	r3, #4
 8009d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d10:	4a0c      	ldr	r2, [pc, #48]	; (8009d44 <pxPortInitialiseStack+0x64>)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	3b14      	subs	r3, #20
 8009d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	3b04      	subs	r3, #4
 8009d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f06f 0202 	mvn.w	r2, #2
 8009d2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	3b20      	subs	r3, #32
 8009d34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d36:	68fb      	ldr	r3, [r7, #12]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	08009d49 	.word	0x08009d49

08009d48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d52:	4b12      	ldr	r3, [pc, #72]	; (8009d9c <prvTaskExitError+0x54>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d5a:	d00a      	beq.n	8009d72 <prvTaskExitError+0x2a>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	60fb      	str	r3, [r7, #12]
}
 8009d6e:	bf00      	nop
 8009d70:	e7fe      	b.n	8009d70 <prvTaskExitError+0x28>
	__asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d76:	f383 8811 	msr	BASEPRI, r3
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	60bb      	str	r3, [r7, #8]
}
 8009d84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d86:	bf00      	nop
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d0fc      	beq.n	8009d88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d8e:	bf00      	nop
 8009d90:	bf00      	nop
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	24000010 	.word	0x24000010

08009da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009da0:	4b07      	ldr	r3, [pc, #28]	; (8009dc0 <pxCurrentTCBConst2>)
 8009da2:	6819      	ldr	r1, [r3, #0]
 8009da4:	6808      	ldr	r0, [r1, #0]
 8009da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009daa:	f380 8809 	msr	PSP, r0
 8009dae:	f3bf 8f6f 	isb	sy
 8009db2:	f04f 0000 	mov.w	r0, #0
 8009db6:	f380 8811 	msr	BASEPRI, r0
 8009dba:	4770      	bx	lr
 8009dbc:	f3af 8000 	nop.w

08009dc0 <pxCurrentTCBConst2>:
 8009dc0:	2400081c 	.word	0x2400081c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop

08009dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009dc8:	4808      	ldr	r0, [pc, #32]	; (8009dec <prvPortStartFirstTask+0x24>)
 8009dca:	6800      	ldr	r0, [r0, #0]
 8009dcc:	6800      	ldr	r0, [r0, #0]
 8009dce:	f380 8808 	msr	MSP, r0
 8009dd2:	f04f 0000 	mov.w	r0, #0
 8009dd6:	f380 8814 	msr	CONTROL, r0
 8009dda:	b662      	cpsie	i
 8009ddc:	b661      	cpsie	f
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	df00      	svc	0
 8009de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009dea:	bf00      	nop
 8009dec:	e000ed08 	.word	0xe000ed08

08009df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b086      	sub	sp, #24
 8009df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009df6:	4b46      	ldr	r3, [pc, #280]	; (8009f10 <xPortStartScheduler+0x120>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a46      	ldr	r2, [pc, #280]	; (8009f14 <xPortStartScheduler+0x124>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d10a      	bne.n	8009e16 <xPortStartScheduler+0x26>
	__asm volatile
 8009e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	613b      	str	r3, [r7, #16]
}
 8009e12:	bf00      	nop
 8009e14:	e7fe      	b.n	8009e14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e16:	4b3e      	ldr	r3, [pc, #248]	; (8009f10 <xPortStartScheduler+0x120>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a3f      	ldr	r2, [pc, #252]	; (8009f18 <xPortStartScheduler+0x128>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d10a      	bne.n	8009e36 <xPortStartScheduler+0x46>
	__asm volatile
 8009e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e24:	f383 8811 	msr	BASEPRI, r3
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	60fb      	str	r3, [r7, #12]
}
 8009e32:	bf00      	nop
 8009e34:	e7fe      	b.n	8009e34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e36:	4b39      	ldr	r3, [pc, #228]	; (8009f1c <xPortStartScheduler+0x12c>)
 8009e38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	22ff      	movs	r2, #255	; 0xff
 8009e46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e50:	78fb      	ldrb	r3, [r7, #3]
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e58:	b2da      	uxtb	r2, r3
 8009e5a:	4b31      	ldr	r3, [pc, #196]	; (8009f20 <xPortStartScheduler+0x130>)
 8009e5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e5e:	4b31      	ldr	r3, [pc, #196]	; (8009f24 <xPortStartScheduler+0x134>)
 8009e60:	2207      	movs	r2, #7
 8009e62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e64:	e009      	b.n	8009e7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009e66:	4b2f      	ldr	r3, [pc, #188]	; (8009f24 <xPortStartScheduler+0x134>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	4a2d      	ldr	r2, [pc, #180]	; (8009f24 <xPortStartScheduler+0x134>)
 8009e6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e70:	78fb      	ldrb	r3, [r7, #3]
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	005b      	lsls	r3, r3, #1
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e7a:	78fb      	ldrb	r3, [r7, #3]
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e82:	2b80      	cmp	r3, #128	; 0x80
 8009e84:	d0ef      	beq.n	8009e66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e86:	4b27      	ldr	r3, [pc, #156]	; (8009f24 <xPortStartScheduler+0x134>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f1c3 0307 	rsb	r3, r3, #7
 8009e8e:	2b04      	cmp	r3, #4
 8009e90:	d00a      	beq.n	8009ea8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e96:	f383 8811 	msr	BASEPRI, r3
 8009e9a:	f3bf 8f6f 	isb	sy
 8009e9e:	f3bf 8f4f 	dsb	sy
 8009ea2:	60bb      	str	r3, [r7, #8]
}
 8009ea4:	bf00      	nop
 8009ea6:	e7fe      	b.n	8009ea6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ea8:	4b1e      	ldr	r3, [pc, #120]	; (8009f24 <xPortStartScheduler+0x134>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	021b      	lsls	r3, r3, #8
 8009eae:	4a1d      	ldr	r2, [pc, #116]	; (8009f24 <xPortStartScheduler+0x134>)
 8009eb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009eb2:	4b1c      	ldr	r3, [pc, #112]	; (8009f24 <xPortStartScheduler+0x134>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009eba:	4a1a      	ldr	r2, [pc, #104]	; (8009f24 <xPortStartScheduler+0x134>)
 8009ebc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	b2da      	uxtb	r2, r3
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ec6:	4b18      	ldr	r3, [pc, #96]	; (8009f28 <xPortStartScheduler+0x138>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a17      	ldr	r2, [pc, #92]	; (8009f28 <xPortStartScheduler+0x138>)
 8009ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ed0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ed2:	4b15      	ldr	r3, [pc, #84]	; (8009f28 <xPortStartScheduler+0x138>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a14      	ldr	r2, [pc, #80]	; (8009f28 <xPortStartScheduler+0x138>)
 8009ed8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009edc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ede:	f000 f8dd 	bl	800a09c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ee2:	4b12      	ldr	r3, [pc, #72]	; (8009f2c <xPortStartScheduler+0x13c>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ee8:	f000 f8fc 	bl	800a0e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009eec:	4b10      	ldr	r3, [pc, #64]	; (8009f30 <xPortStartScheduler+0x140>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a0f      	ldr	r2, [pc, #60]	; (8009f30 <xPortStartScheduler+0x140>)
 8009ef2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ef6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ef8:	f7ff ff66 	bl	8009dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009efc:	f7ff f84c 	bl	8008f98 <vTaskSwitchContext>
	prvTaskExitError();
 8009f00:	f7ff ff22 	bl	8009d48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3718      	adds	r7, #24
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	e000ed00 	.word	0xe000ed00
 8009f14:	410fc271 	.word	0x410fc271
 8009f18:	410fc270 	.word	0x410fc270
 8009f1c:	e000e400 	.word	0xe000e400
 8009f20:	24000e48 	.word	0x24000e48
 8009f24:	24000e4c 	.word	0x24000e4c
 8009f28:	e000ed20 	.word	0xe000ed20
 8009f2c:	24000010 	.word	0x24000010
 8009f30:	e000ef34 	.word	0xe000ef34

08009f34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
	__asm volatile
 8009f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3e:	f383 8811 	msr	BASEPRI, r3
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	607b      	str	r3, [r7, #4]
}
 8009f4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f4e:	4b0f      	ldr	r3, [pc, #60]	; (8009f8c <vPortEnterCritical+0x58>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3301      	adds	r3, #1
 8009f54:	4a0d      	ldr	r2, [pc, #52]	; (8009f8c <vPortEnterCritical+0x58>)
 8009f56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f58:	4b0c      	ldr	r3, [pc, #48]	; (8009f8c <vPortEnterCritical+0x58>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d10f      	bne.n	8009f80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f60:	4b0b      	ldr	r3, [pc, #44]	; (8009f90 <vPortEnterCritical+0x5c>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00a      	beq.n	8009f80 <vPortEnterCritical+0x4c>
	__asm volatile
 8009f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	603b      	str	r3, [r7, #0]
}
 8009f7c:	bf00      	nop
 8009f7e:	e7fe      	b.n	8009f7e <vPortEnterCritical+0x4a>
	}
}
 8009f80:	bf00      	nop
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	24000010 	.word	0x24000010
 8009f90:	e000ed04 	.word	0xe000ed04

08009f94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f9a:	4b12      	ldr	r3, [pc, #72]	; (8009fe4 <vPortExitCritical+0x50>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10a      	bne.n	8009fb8 <vPortExitCritical+0x24>
	__asm volatile
 8009fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	607b      	str	r3, [r7, #4]
}
 8009fb4:	bf00      	nop
 8009fb6:	e7fe      	b.n	8009fb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009fb8:	4b0a      	ldr	r3, [pc, #40]	; (8009fe4 <vPortExitCritical+0x50>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	4a09      	ldr	r2, [pc, #36]	; (8009fe4 <vPortExitCritical+0x50>)
 8009fc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009fc2:	4b08      	ldr	r3, [pc, #32]	; (8009fe4 <vPortExitCritical+0x50>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d105      	bne.n	8009fd6 <vPortExitCritical+0x42>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	f383 8811 	msr	BASEPRI, r3
}
 8009fd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009fd6:	bf00      	nop
 8009fd8:	370c      	adds	r7, #12
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	24000010 	.word	0x24000010
	...

08009ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ff0:	f3ef 8009 	mrs	r0, PSP
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	4b15      	ldr	r3, [pc, #84]	; (800a050 <pxCurrentTCBConst>)
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	f01e 0f10 	tst.w	lr, #16
 800a000:	bf08      	it	eq
 800a002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a00a:	6010      	str	r0, [r2, #0]
 800a00c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a010:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a014:	f380 8811 	msr	BASEPRI, r0
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f7fe ffba 	bl	8008f98 <vTaskSwitchContext>
 800a024:	f04f 0000 	mov.w	r0, #0
 800a028:	f380 8811 	msr	BASEPRI, r0
 800a02c:	bc09      	pop	{r0, r3}
 800a02e:	6819      	ldr	r1, [r3, #0]
 800a030:	6808      	ldr	r0, [r1, #0]
 800a032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a036:	f01e 0f10 	tst.w	lr, #16
 800a03a:	bf08      	it	eq
 800a03c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a040:	f380 8809 	msr	PSP, r0
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	f3af 8000 	nop.w

0800a050 <pxCurrentTCBConst>:
 800a050:	2400081c 	.word	0x2400081c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a054:	bf00      	nop
 800a056:	bf00      	nop

0800a058 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	607b      	str	r3, [r7, #4]
}
 800a070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a072:	f7fe fed7 	bl	8008e24 <xTaskIncrementTick>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d003      	beq.n	800a084 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a07c:	4b06      	ldr	r3, [pc, #24]	; (800a098 <xPortSysTickHandler+0x40>)
 800a07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a082:	601a      	str	r2, [r3, #0]
 800a084:	2300      	movs	r3, #0
 800a086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	f383 8811 	msr	BASEPRI, r3
}
 800a08e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a090:	bf00      	nop
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	e000ed04 	.word	0xe000ed04

0800a09c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a09c:	b480      	push	{r7}
 800a09e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a0a0:	4b0b      	ldr	r3, [pc, #44]	; (800a0d0 <vPortSetupTimerInterrupt+0x34>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a0a6:	4b0b      	ldr	r3, [pc, #44]	; (800a0d4 <vPortSetupTimerInterrupt+0x38>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a0ac:	4b0a      	ldr	r3, [pc, #40]	; (800a0d8 <vPortSetupTimerInterrupt+0x3c>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a0a      	ldr	r2, [pc, #40]	; (800a0dc <vPortSetupTimerInterrupt+0x40>)
 800a0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b6:	099b      	lsrs	r3, r3, #6
 800a0b8:	4a09      	ldr	r2, [pc, #36]	; (800a0e0 <vPortSetupTimerInterrupt+0x44>)
 800a0ba:	3b01      	subs	r3, #1
 800a0bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a0be:	4b04      	ldr	r3, [pc, #16]	; (800a0d0 <vPortSetupTimerInterrupt+0x34>)
 800a0c0:	2207      	movs	r2, #7
 800a0c2:	601a      	str	r2, [r3, #0]
}
 800a0c4:	bf00      	nop
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	e000e010 	.word	0xe000e010
 800a0d4:	e000e018 	.word	0xe000e018
 800a0d8:	24000000 	.word	0x24000000
 800a0dc:	10624dd3 	.word	0x10624dd3
 800a0e0:	e000e014 	.word	0xe000e014

0800a0e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a0e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a0f4 <vPortEnableVFP+0x10>
 800a0e8:	6801      	ldr	r1, [r0, #0]
 800a0ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a0ee:	6001      	str	r1, [r0, #0]
 800a0f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a0f2:	bf00      	nop
 800a0f4:	e000ed88 	.word	0xe000ed88

0800a0f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0fe:	f3ef 8305 	mrs	r3, IPSR
 800a102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2b0f      	cmp	r3, #15
 800a108:	d914      	bls.n	800a134 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a10a:	4a17      	ldr	r2, [pc, #92]	; (800a168 <vPortValidateInterruptPriority+0x70>)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	4413      	add	r3, r2
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a114:	4b15      	ldr	r3, [pc, #84]	; (800a16c <vPortValidateInterruptPriority+0x74>)
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	7afa      	ldrb	r2, [r7, #11]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d20a      	bcs.n	800a134 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	607b      	str	r3, [r7, #4]
}
 800a130:	bf00      	nop
 800a132:	e7fe      	b.n	800a132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a134:	4b0e      	ldr	r3, [pc, #56]	; (800a170 <vPortValidateInterruptPriority+0x78>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a13c:	4b0d      	ldr	r3, [pc, #52]	; (800a174 <vPortValidateInterruptPriority+0x7c>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	429a      	cmp	r2, r3
 800a142:	d90a      	bls.n	800a15a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a148:	f383 8811 	msr	BASEPRI, r3
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	603b      	str	r3, [r7, #0]
}
 800a156:	bf00      	nop
 800a158:	e7fe      	b.n	800a158 <vPortValidateInterruptPriority+0x60>
	}
 800a15a:	bf00      	nop
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	e000e3f0 	.word	0xe000e3f0
 800a16c:	24000e48 	.word	0x24000e48
 800a170:	e000ed0c 	.word	0xe000ed0c
 800a174:	24000e4c 	.word	0x24000e4c

0800a178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b08a      	sub	sp, #40	; 0x28
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a180:	2300      	movs	r3, #0
 800a182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a184:	f7fe fd92 	bl	8008cac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a188:	4b5b      	ldr	r3, [pc, #364]	; (800a2f8 <pvPortMalloc+0x180>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d101      	bne.n	800a194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a190:	f000 f920 	bl	800a3d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a194:	4b59      	ldr	r3, [pc, #356]	; (800a2fc <pvPortMalloc+0x184>)
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4013      	ands	r3, r2
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	f040 8093 	bne.w	800a2c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d01d      	beq.n	800a1e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a1a8:	2208      	movs	r2, #8
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f003 0307 	and.w	r3, r3, #7
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d014      	beq.n	800a1e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f023 0307 	bic.w	r3, r3, #7
 800a1c0:	3308      	adds	r3, #8
 800a1c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f003 0307 	and.w	r3, r3, #7
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00a      	beq.n	800a1e4 <pvPortMalloc+0x6c>
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	617b      	str	r3, [r7, #20]
}
 800a1e0:	bf00      	nop
 800a1e2:	e7fe      	b.n	800a1e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d06e      	beq.n	800a2c8 <pvPortMalloc+0x150>
 800a1ea:	4b45      	ldr	r3, [pc, #276]	; (800a300 <pvPortMalloc+0x188>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d869      	bhi.n	800a2c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a1f4:	4b43      	ldr	r3, [pc, #268]	; (800a304 <pvPortMalloc+0x18c>)
 800a1f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1f8:	4b42      	ldr	r3, [pc, #264]	; (800a304 <pvPortMalloc+0x18c>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1fe:	e004      	b.n	800a20a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	429a      	cmp	r2, r3
 800a212:	d903      	bls.n	800a21c <pvPortMalloc+0xa4>
 800a214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1f1      	bne.n	800a200 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a21c:	4b36      	ldr	r3, [pc, #216]	; (800a2f8 <pvPortMalloc+0x180>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a222:	429a      	cmp	r2, r3
 800a224:	d050      	beq.n	800a2c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a226:	6a3b      	ldr	r3, [r7, #32]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2208      	movs	r2, #8
 800a22c:	4413      	add	r3, r2
 800a22e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23a:	685a      	ldr	r2, [r3, #4]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	1ad2      	subs	r2, r2, r3
 800a240:	2308      	movs	r3, #8
 800a242:	005b      	lsls	r3, r3, #1
 800a244:	429a      	cmp	r2, r3
 800a246:	d91f      	bls.n	800a288 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4413      	add	r3, r2
 800a24e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	f003 0307 	and.w	r3, r3, #7
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00a      	beq.n	800a270 <pvPortMalloc+0xf8>
	__asm volatile
 800a25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25e:	f383 8811 	msr	BASEPRI, r3
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	f3bf 8f4f 	dsb	sy
 800a26a:	613b      	str	r3, [r7, #16]
}
 800a26c:	bf00      	nop
 800a26e:	e7fe      	b.n	800a26e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	685a      	ldr	r2, [r3, #4]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	1ad2      	subs	r2, r2, r3
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a282:	69b8      	ldr	r0, [r7, #24]
 800a284:	f000 f908 	bl	800a498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a288:	4b1d      	ldr	r3, [pc, #116]	; (800a300 <pvPortMalloc+0x188>)
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	4a1b      	ldr	r2, [pc, #108]	; (800a300 <pvPortMalloc+0x188>)
 800a294:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a296:	4b1a      	ldr	r3, [pc, #104]	; (800a300 <pvPortMalloc+0x188>)
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	4b1b      	ldr	r3, [pc, #108]	; (800a308 <pvPortMalloc+0x190>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d203      	bcs.n	800a2aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a2a2:	4b17      	ldr	r3, [pc, #92]	; (800a300 <pvPortMalloc+0x188>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a18      	ldr	r2, [pc, #96]	; (800a308 <pvPortMalloc+0x190>)
 800a2a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ac:	685a      	ldr	r2, [r3, #4]
 800a2ae:	4b13      	ldr	r3, [pc, #76]	; (800a2fc <pvPortMalloc+0x184>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	431a      	orrs	r2, r3
 800a2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a2be:	4b13      	ldr	r3, [pc, #76]	; (800a30c <pvPortMalloc+0x194>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	4a11      	ldr	r2, [pc, #68]	; (800a30c <pvPortMalloc+0x194>)
 800a2c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a2c8:	f7fe fcfe 	bl	8008cc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	f003 0307 	and.w	r3, r3, #7
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00a      	beq.n	800a2ec <pvPortMalloc+0x174>
	__asm volatile
 800a2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2da:	f383 8811 	msr	BASEPRI, r3
 800a2de:	f3bf 8f6f 	isb	sy
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	60fb      	str	r3, [r7, #12]
}
 800a2e8:	bf00      	nop
 800a2ea:	e7fe      	b.n	800a2ea <pvPortMalloc+0x172>
	return pvReturn;
 800a2ec:	69fb      	ldr	r3, [r7, #28]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3728      	adds	r7, #40	; 0x28
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	24004a58 	.word	0x24004a58
 800a2fc:	24004a6c 	.word	0x24004a6c
 800a300:	24004a5c 	.word	0x24004a5c
 800a304:	24004a50 	.word	0x24004a50
 800a308:	24004a60 	.word	0x24004a60
 800a30c:	24004a64 	.word	0x24004a64

0800a310 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d04d      	beq.n	800a3be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a322:	2308      	movs	r3, #8
 800a324:	425b      	negs	r3, r3
 800a326:	697a      	ldr	r2, [r7, #20]
 800a328:	4413      	add	r3, r2
 800a32a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	685a      	ldr	r2, [r3, #4]
 800a334:	4b24      	ldr	r3, [pc, #144]	; (800a3c8 <vPortFree+0xb8>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4013      	ands	r3, r2
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10a      	bne.n	800a354 <vPortFree+0x44>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	60fb      	str	r3, [r7, #12]
}
 800a350:	bf00      	nop
 800a352:	e7fe      	b.n	800a352 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00a      	beq.n	800a372 <vPortFree+0x62>
	__asm volatile
 800a35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a360:	f383 8811 	msr	BASEPRI, r3
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	60bb      	str	r3, [r7, #8]
}
 800a36e:	bf00      	nop
 800a370:	e7fe      	b.n	800a370 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	685a      	ldr	r2, [r3, #4]
 800a376:	4b14      	ldr	r3, [pc, #80]	; (800a3c8 <vPortFree+0xb8>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4013      	ands	r3, r2
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d01e      	beq.n	800a3be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d11a      	bne.n	800a3be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	4b0e      	ldr	r3, [pc, #56]	; (800a3c8 <vPortFree+0xb8>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	43db      	mvns	r3, r3
 800a392:	401a      	ands	r2, r3
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a398:	f7fe fc88 	bl	8008cac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	685a      	ldr	r2, [r3, #4]
 800a3a0:	4b0a      	ldr	r3, [pc, #40]	; (800a3cc <vPortFree+0xbc>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	4a09      	ldr	r2, [pc, #36]	; (800a3cc <vPortFree+0xbc>)
 800a3a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a3aa:	6938      	ldr	r0, [r7, #16]
 800a3ac:	f000 f874 	bl	800a498 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a3b0:	4b07      	ldr	r3, [pc, #28]	; (800a3d0 <vPortFree+0xc0>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	4a06      	ldr	r2, [pc, #24]	; (800a3d0 <vPortFree+0xc0>)
 800a3b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a3ba:	f7fe fc85 	bl	8008cc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a3be:	bf00      	nop
 800a3c0:	3718      	adds	r7, #24
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	24004a6c 	.word	0x24004a6c
 800a3cc:	24004a5c 	.word	0x24004a5c
 800a3d0:	24004a68 	.word	0x24004a68

0800a3d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a3da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a3de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a3e0:	4b27      	ldr	r3, [pc, #156]	; (800a480 <prvHeapInit+0xac>)
 800a3e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f003 0307 	and.w	r3, r3, #7
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00c      	beq.n	800a408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	3307      	adds	r3, #7
 800a3f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f023 0307 	bic.w	r3, r3, #7
 800a3fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3fc:	68ba      	ldr	r2, [r7, #8]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	4a1f      	ldr	r2, [pc, #124]	; (800a480 <prvHeapInit+0xac>)
 800a404:	4413      	add	r3, r2
 800a406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a40c:	4a1d      	ldr	r2, [pc, #116]	; (800a484 <prvHeapInit+0xb0>)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a412:	4b1c      	ldr	r3, [pc, #112]	; (800a484 <prvHeapInit+0xb0>)
 800a414:	2200      	movs	r2, #0
 800a416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	4413      	add	r3, r2
 800a41e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a420:	2208      	movs	r2, #8
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	1a9b      	subs	r3, r3, r2
 800a426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f023 0307 	bic.w	r3, r3, #7
 800a42e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	4a15      	ldr	r2, [pc, #84]	; (800a488 <prvHeapInit+0xb4>)
 800a434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a436:	4b14      	ldr	r3, [pc, #80]	; (800a488 <prvHeapInit+0xb4>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2200      	movs	r2, #0
 800a43c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a43e:	4b12      	ldr	r3, [pc, #72]	; (800a488 <prvHeapInit+0xb4>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2200      	movs	r2, #0
 800a444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	1ad2      	subs	r2, r2, r3
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a454:	4b0c      	ldr	r3, [pc, #48]	; (800a488 <prvHeapInit+0xb4>)
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	4a0a      	ldr	r2, [pc, #40]	; (800a48c <prvHeapInit+0xb8>)
 800a462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	4a09      	ldr	r2, [pc, #36]	; (800a490 <prvHeapInit+0xbc>)
 800a46a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a46c:	4b09      	ldr	r3, [pc, #36]	; (800a494 <prvHeapInit+0xc0>)
 800a46e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a472:	601a      	str	r2, [r3, #0]
}
 800a474:	bf00      	nop
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr
 800a480:	24000e50 	.word	0x24000e50
 800a484:	24004a50 	.word	0x24004a50
 800a488:	24004a58 	.word	0x24004a58
 800a48c:	24004a60 	.word	0x24004a60
 800a490:	24004a5c 	.word	0x24004a5c
 800a494:	24004a6c 	.word	0x24004a6c

0800a498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a4a0:	4b28      	ldr	r3, [pc, #160]	; (800a544 <prvInsertBlockIntoFreeList+0xac>)
 800a4a2:	60fb      	str	r3, [r7, #12]
 800a4a4:	e002      	b.n	800a4ac <prvInsertBlockIntoFreeList+0x14>
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d8f7      	bhi.n	800a4a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d108      	bne.n	800a4da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	441a      	add	r2, r3
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	441a      	add	r2, r3
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d118      	bne.n	800a520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	4b15      	ldr	r3, [pc, #84]	; (800a548 <prvInsertBlockIntoFreeList+0xb0>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d00d      	beq.n	800a516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	685a      	ldr	r2, [r3, #4]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	441a      	add	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	e008      	b.n	800a528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a516:	4b0c      	ldr	r3, [pc, #48]	; (800a548 <prvInsertBlockIntoFreeList+0xb0>)
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	601a      	str	r2, [r3, #0]
 800a51e:	e003      	b.n	800a528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d002      	beq.n	800a536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a536:	bf00      	nop
 800a538:	3714      	adds	r7, #20
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	24004a50 	.word	0x24004a50
 800a548:	24004a58 	.word	0x24004a58

0800a54c <atoi>:
 800a54c:	220a      	movs	r2, #10
 800a54e:	2100      	movs	r1, #0
 800a550:	f000 b930 	b.w	800a7b4 <strtol>

0800a554 <__errno>:
 800a554:	4b01      	ldr	r3, [pc, #4]	; (800a55c <__errno+0x8>)
 800a556:	6818      	ldr	r0, [r3, #0]
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	24000014 	.word	0x24000014

0800a560 <__libc_init_array>:
 800a560:	b570      	push	{r4, r5, r6, lr}
 800a562:	4d0d      	ldr	r5, [pc, #52]	; (800a598 <__libc_init_array+0x38>)
 800a564:	4c0d      	ldr	r4, [pc, #52]	; (800a59c <__libc_init_array+0x3c>)
 800a566:	1b64      	subs	r4, r4, r5
 800a568:	10a4      	asrs	r4, r4, #2
 800a56a:	2600      	movs	r6, #0
 800a56c:	42a6      	cmp	r6, r4
 800a56e:	d109      	bne.n	800a584 <__libc_init_array+0x24>
 800a570:	4d0b      	ldr	r5, [pc, #44]	; (800a5a0 <__libc_init_array+0x40>)
 800a572:	4c0c      	ldr	r4, [pc, #48]	; (800a5a4 <__libc_init_array+0x44>)
 800a574:	f000 f984 	bl	800a880 <_init>
 800a578:	1b64      	subs	r4, r4, r5
 800a57a:	10a4      	asrs	r4, r4, #2
 800a57c:	2600      	movs	r6, #0
 800a57e:	42a6      	cmp	r6, r4
 800a580:	d105      	bne.n	800a58e <__libc_init_array+0x2e>
 800a582:	bd70      	pop	{r4, r5, r6, pc}
 800a584:	f855 3b04 	ldr.w	r3, [r5], #4
 800a588:	4798      	blx	r3
 800a58a:	3601      	adds	r6, #1
 800a58c:	e7ee      	b.n	800a56c <__libc_init_array+0xc>
 800a58e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a592:	4798      	blx	r3
 800a594:	3601      	adds	r6, #1
 800a596:	e7f2      	b.n	800a57e <__libc_init_array+0x1e>
 800a598:	0800ab88 	.word	0x0800ab88
 800a59c:	0800ab88 	.word	0x0800ab88
 800a5a0:	0800ab88 	.word	0x0800ab88
 800a5a4:	0800ab8c 	.word	0x0800ab8c

0800a5a8 <__retarget_lock_acquire_recursive>:
 800a5a8:	4770      	bx	lr

0800a5aa <__retarget_lock_release_recursive>:
 800a5aa:	4770      	bx	lr

0800a5ac <memcpy>:
 800a5ac:	440a      	add	r2, r1
 800a5ae:	4291      	cmp	r1, r2
 800a5b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a5b4:	d100      	bne.n	800a5b8 <memcpy+0xc>
 800a5b6:	4770      	bx	lr
 800a5b8:	b510      	push	{r4, lr}
 800a5ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5c2:	4291      	cmp	r1, r2
 800a5c4:	d1f9      	bne.n	800a5ba <memcpy+0xe>
 800a5c6:	bd10      	pop	{r4, pc}

0800a5c8 <memset>:
 800a5c8:	4402      	add	r2, r0
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d100      	bne.n	800a5d2 <memset+0xa>
 800a5d0:	4770      	bx	lr
 800a5d2:	f803 1b01 	strb.w	r1, [r3], #1
 800a5d6:	e7f9      	b.n	800a5cc <memset+0x4>

0800a5d8 <cleanup_glue>:
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	460c      	mov	r4, r1
 800a5dc:	6809      	ldr	r1, [r1, #0]
 800a5de:	4605      	mov	r5, r0
 800a5e0:	b109      	cbz	r1, 800a5e6 <cleanup_glue+0xe>
 800a5e2:	f7ff fff9 	bl	800a5d8 <cleanup_glue>
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5ee:	f000 b8f7 	b.w	800a7e0 <_free_r>
	...

0800a5f4 <_reclaim_reent>:
 800a5f4:	4b2c      	ldr	r3, [pc, #176]	; (800a6a8 <_reclaim_reent+0xb4>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4283      	cmp	r3, r0
 800a5fa:	b570      	push	{r4, r5, r6, lr}
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	d051      	beq.n	800a6a4 <_reclaim_reent+0xb0>
 800a600:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a602:	b143      	cbz	r3, 800a616 <_reclaim_reent+0x22>
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d14a      	bne.n	800a6a0 <_reclaim_reent+0xac>
 800a60a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a60c:	6819      	ldr	r1, [r3, #0]
 800a60e:	b111      	cbz	r1, 800a616 <_reclaim_reent+0x22>
 800a610:	4620      	mov	r0, r4
 800a612:	f000 f8e5 	bl	800a7e0 <_free_r>
 800a616:	6961      	ldr	r1, [r4, #20]
 800a618:	b111      	cbz	r1, 800a620 <_reclaim_reent+0x2c>
 800a61a:	4620      	mov	r0, r4
 800a61c:	f000 f8e0 	bl	800a7e0 <_free_r>
 800a620:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a622:	b111      	cbz	r1, 800a62a <_reclaim_reent+0x36>
 800a624:	4620      	mov	r0, r4
 800a626:	f000 f8db 	bl	800a7e0 <_free_r>
 800a62a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a62c:	b111      	cbz	r1, 800a634 <_reclaim_reent+0x40>
 800a62e:	4620      	mov	r0, r4
 800a630:	f000 f8d6 	bl	800a7e0 <_free_r>
 800a634:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a636:	b111      	cbz	r1, 800a63e <_reclaim_reent+0x4a>
 800a638:	4620      	mov	r0, r4
 800a63a:	f000 f8d1 	bl	800a7e0 <_free_r>
 800a63e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a640:	b111      	cbz	r1, 800a648 <_reclaim_reent+0x54>
 800a642:	4620      	mov	r0, r4
 800a644:	f000 f8cc 	bl	800a7e0 <_free_r>
 800a648:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a64a:	b111      	cbz	r1, 800a652 <_reclaim_reent+0x5e>
 800a64c:	4620      	mov	r0, r4
 800a64e:	f000 f8c7 	bl	800a7e0 <_free_r>
 800a652:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a654:	b111      	cbz	r1, 800a65c <_reclaim_reent+0x68>
 800a656:	4620      	mov	r0, r4
 800a658:	f000 f8c2 	bl	800a7e0 <_free_r>
 800a65c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a65e:	b111      	cbz	r1, 800a666 <_reclaim_reent+0x72>
 800a660:	4620      	mov	r0, r4
 800a662:	f000 f8bd 	bl	800a7e0 <_free_r>
 800a666:	69a3      	ldr	r3, [r4, #24]
 800a668:	b1e3      	cbz	r3, 800a6a4 <_reclaim_reent+0xb0>
 800a66a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a66c:	4620      	mov	r0, r4
 800a66e:	4798      	blx	r3
 800a670:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a672:	b1b9      	cbz	r1, 800a6a4 <_reclaim_reent+0xb0>
 800a674:	4620      	mov	r0, r4
 800a676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a67a:	f7ff bfad 	b.w	800a5d8 <cleanup_glue>
 800a67e:	5949      	ldr	r1, [r1, r5]
 800a680:	b941      	cbnz	r1, 800a694 <_reclaim_reent+0xa0>
 800a682:	3504      	adds	r5, #4
 800a684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a686:	2d80      	cmp	r5, #128	; 0x80
 800a688:	68d9      	ldr	r1, [r3, #12]
 800a68a:	d1f8      	bne.n	800a67e <_reclaim_reent+0x8a>
 800a68c:	4620      	mov	r0, r4
 800a68e:	f000 f8a7 	bl	800a7e0 <_free_r>
 800a692:	e7ba      	b.n	800a60a <_reclaim_reent+0x16>
 800a694:	680e      	ldr	r6, [r1, #0]
 800a696:	4620      	mov	r0, r4
 800a698:	f000 f8a2 	bl	800a7e0 <_free_r>
 800a69c:	4631      	mov	r1, r6
 800a69e:	e7ef      	b.n	800a680 <_reclaim_reent+0x8c>
 800a6a0:	2500      	movs	r5, #0
 800a6a2:	e7ef      	b.n	800a684 <_reclaim_reent+0x90>
 800a6a4:	bd70      	pop	{r4, r5, r6, pc}
 800a6a6:	bf00      	nop
 800a6a8:	24000014 	.word	0x24000014

0800a6ac <_strtol_l.isra.0>:
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b2:	d001      	beq.n	800a6b8 <_strtol_l.isra.0+0xc>
 800a6b4:	2b24      	cmp	r3, #36	; 0x24
 800a6b6:	d906      	bls.n	800a6c6 <_strtol_l.isra.0+0x1a>
 800a6b8:	f7ff ff4c 	bl	800a554 <__errno>
 800a6bc:	2316      	movs	r3, #22
 800a6be:	6003      	str	r3, [r0, #0]
 800a6c0:	2000      	movs	r0, #0
 800a6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6c6:	4f3a      	ldr	r7, [pc, #232]	; (800a7b0 <_strtol_l.isra.0+0x104>)
 800a6c8:	468e      	mov	lr, r1
 800a6ca:	4676      	mov	r6, lr
 800a6cc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a6d0:	5de5      	ldrb	r5, [r4, r7]
 800a6d2:	f015 0508 	ands.w	r5, r5, #8
 800a6d6:	d1f8      	bne.n	800a6ca <_strtol_l.isra.0+0x1e>
 800a6d8:	2c2d      	cmp	r4, #45	; 0x2d
 800a6da:	d134      	bne.n	800a746 <_strtol_l.isra.0+0x9a>
 800a6dc:	f89e 4000 	ldrb.w	r4, [lr]
 800a6e0:	f04f 0801 	mov.w	r8, #1
 800a6e4:	f106 0e02 	add.w	lr, r6, #2
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d05c      	beq.n	800a7a6 <_strtol_l.isra.0+0xfa>
 800a6ec:	2b10      	cmp	r3, #16
 800a6ee:	d10c      	bne.n	800a70a <_strtol_l.isra.0+0x5e>
 800a6f0:	2c30      	cmp	r4, #48	; 0x30
 800a6f2:	d10a      	bne.n	800a70a <_strtol_l.isra.0+0x5e>
 800a6f4:	f89e 4000 	ldrb.w	r4, [lr]
 800a6f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a6fc:	2c58      	cmp	r4, #88	; 0x58
 800a6fe:	d14d      	bne.n	800a79c <_strtol_l.isra.0+0xf0>
 800a700:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a704:	2310      	movs	r3, #16
 800a706:	f10e 0e02 	add.w	lr, lr, #2
 800a70a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a70e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800a712:	2600      	movs	r6, #0
 800a714:	fbbc f9f3 	udiv	r9, ip, r3
 800a718:	4635      	mov	r5, r6
 800a71a:	fb03 ca19 	mls	sl, r3, r9, ip
 800a71e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a722:	2f09      	cmp	r7, #9
 800a724:	d818      	bhi.n	800a758 <_strtol_l.isra.0+0xac>
 800a726:	463c      	mov	r4, r7
 800a728:	42a3      	cmp	r3, r4
 800a72a:	dd24      	ble.n	800a776 <_strtol_l.isra.0+0xca>
 800a72c:	2e00      	cmp	r6, #0
 800a72e:	db1f      	blt.n	800a770 <_strtol_l.isra.0+0xc4>
 800a730:	45a9      	cmp	r9, r5
 800a732:	d31d      	bcc.n	800a770 <_strtol_l.isra.0+0xc4>
 800a734:	d101      	bne.n	800a73a <_strtol_l.isra.0+0x8e>
 800a736:	45a2      	cmp	sl, r4
 800a738:	db1a      	blt.n	800a770 <_strtol_l.isra.0+0xc4>
 800a73a:	fb05 4503 	mla	r5, r5, r3, r4
 800a73e:	2601      	movs	r6, #1
 800a740:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a744:	e7eb      	b.n	800a71e <_strtol_l.isra.0+0x72>
 800a746:	2c2b      	cmp	r4, #43	; 0x2b
 800a748:	bf08      	it	eq
 800a74a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a74e:	46a8      	mov	r8, r5
 800a750:	bf08      	it	eq
 800a752:	f106 0e02 	addeq.w	lr, r6, #2
 800a756:	e7c7      	b.n	800a6e8 <_strtol_l.isra.0+0x3c>
 800a758:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a75c:	2f19      	cmp	r7, #25
 800a75e:	d801      	bhi.n	800a764 <_strtol_l.isra.0+0xb8>
 800a760:	3c37      	subs	r4, #55	; 0x37
 800a762:	e7e1      	b.n	800a728 <_strtol_l.isra.0+0x7c>
 800a764:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a768:	2f19      	cmp	r7, #25
 800a76a:	d804      	bhi.n	800a776 <_strtol_l.isra.0+0xca>
 800a76c:	3c57      	subs	r4, #87	; 0x57
 800a76e:	e7db      	b.n	800a728 <_strtol_l.isra.0+0x7c>
 800a770:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800a774:	e7e4      	b.n	800a740 <_strtol_l.isra.0+0x94>
 800a776:	2e00      	cmp	r6, #0
 800a778:	da05      	bge.n	800a786 <_strtol_l.isra.0+0xda>
 800a77a:	2322      	movs	r3, #34	; 0x22
 800a77c:	6003      	str	r3, [r0, #0]
 800a77e:	4665      	mov	r5, ip
 800a780:	b942      	cbnz	r2, 800a794 <_strtol_l.isra.0+0xe8>
 800a782:	4628      	mov	r0, r5
 800a784:	e79d      	b.n	800a6c2 <_strtol_l.isra.0+0x16>
 800a786:	f1b8 0f00 	cmp.w	r8, #0
 800a78a:	d000      	beq.n	800a78e <_strtol_l.isra.0+0xe2>
 800a78c:	426d      	negs	r5, r5
 800a78e:	2a00      	cmp	r2, #0
 800a790:	d0f7      	beq.n	800a782 <_strtol_l.isra.0+0xd6>
 800a792:	b10e      	cbz	r6, 800a798 <_strtol_l.isra.0+0xec>
 800a794:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800a798:	6011      	str	r1, [r2, #0]
 800a79a:	e7f2      	b.n	800a782 <_strtol_l.isra.0+0xd6>
 800a79c:	2430      	movs	r4, #48	; 0x30
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1b3      	bne.n	800a70a <_strtol_l.isra.0+0x5e>
 800a7a2:	2308      	movs	r3, #8
 800a7a4:	e7b1      	b.n	800a70a <_strtol_l.isra.0+0x5e>
 800a7a6:	2c30      	cmp	r4, #48	; 0x30
 800a7a8:	d0a4      	beq.n	800a6f4 <_strtol_l.isra.0+0x48>
 800a7aa:	230a      	movs	r3, #10
 800a7ac:	e7ad      	b.n	800a70a <_strtol_l.isra.0+0x5e>
 800a7ae:	bf00      	nop
 800a7b0:	0800aa7d 	.word	0x0800aa7d

0800a7b4 <strtol>:
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	460a      	mov	r2, r1
 800a7b8:	4601      	mov	r1, r0
 800a7ba:	4802      	ldr	r0, [pc, #8]	; (800a7c4 <strtol+0x10>)
 800a7bc:	6800      	ldr	r0, [r0, #0]
 800a7be:	f7ff bf75 	b.w	800a6ac <_strtol_l.isra.0>
 800a7c2:	bf00      	nop
 800a7c4:	24000014 	.word	0x24000014

0800a7c8 <__malloc_lock>:
 800a7c8:	4801      	ldr	r0, [pc, #4]	; (800a7d0 <__malloc_lock+0x8>)
 800a7ca:	f7ff beed 	b.w	800a5a8 <__retarget_lock_acquire_recursive>
 800a7ce:	bf00      	nop
 800a7d0:	24004c80 	.word	0x24004c80

0800a7d4 <__malloc_unlock>:
 800a7d4:	4801      	ldr	r0, [pc, #4]	; (800a7dc <__malloc_unlock+0x8>)
 800a7d6:	f7ff bee8 	b.w	800a5aa <__retarget_lock_release_recursive>
 800a7da:	bf00      	nop
 800a7dc:	24004c80 	.word	0x24004c80

0800a7e0 <_free_r>:
 800a7e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7e2:	2900      	cmp	r1, #0
 800a7e4:	d048      	beq.n	800a878 <_free_r+0x98>
 800a7e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7ea:	9001      	str	r0, [sp, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f1a1 0404 	sub.w	r4, r1, #4
 800a7f2:	bfb8      	it	lt
 800a7f4:	18e4      	addlt	r4, r4, r3
 800a7f6:	f7ff ffe7 	bl	800a7c8 <__malloc_lock>
 800a7fa:	4a20      	ldr	r2, [pc, #128]	; (800a87c <_free_r+0x9c>)
 800a7fc:	9801      	ldr	r0, [sp, #4]
 800a7fe:	6813      	ldr	r3, [r2, #0]
 800a800:	4615      	mov	r5, r2
 800a802:	b933      	cbnz	r3, 800a812 <_free_r+0x32>
 800a804:	6063      	str	r3, [r4, #4]
 800a806:	6014      	str	r4, [r2, #0]
 800a808:	b003      	add	sp, #12
 800a80a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a80e:	f7ff bfe1 	b.w	800a7d4 <__malloc_unlock>
 800a812:	42a3      	cmp	r3, r4
 800a814:	d90b      	bls.n	800a82e <_free_r+0x4e>
 800a816:	6821      	ldr	r1, [r4, #0]
 800a818:	1862      	adds	r2, r4, r1
 800a81a:	4293      	cmp	r3, r2
 800a81c:	bf04      	itt	eq
 800a81e:	681a      	ldreq	r2, [r3, #0]
 800a820:	685b      	ldreq	r3, [r3, #4]
 800a822:	6063      	str	r3, [r4, #4]
 800a824:	bf04      	itt	eq
 800a826:	1852      	addeq	r2, r2, r1
 800a828:	6022      	streq	r2, [r4, #0]
 800a82a:	602c      	str	r4, [r5, #0]
 800a82c:	e7ec      	b.n	800a808 <_free_r+0x28>
 800a82e:	461a      	mov	r2, r3
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	b10b      	cbz	r3, 800a838 <_free_r+0x58>
 800a834:	42a3      	cmp	r3, r4
 800a836:	d9fa      	bls.n	800a82e <_free_r+0x4e>
 800a838:	6811      	ldr	r1, [r2, #0]
 800a83a:	1855      	adds	r5, r2, r1
 800a83c:	42a5      	cmp	r5, r4
 800a83e:	d10b      	bne.n	800a858 <_free_r+0x78>
 800a840:	6824      	ldr	r4, [r4, #0]
 800a842:	4421      	add	r1, r4
 800a844:	1854      	adds	r4, r2, r1
 800a846:	42a3      	cmp	r3, r4
 800a848:	6011      	str	r1, [r2, #0]
 800a84a:	d1dd      	bne.n	800a808 <_free_r+0x28>
 800a84c:	681c      	ldr	r4, [r3, #0]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	6053      	str	r3, [r2, #4]
 800a852:	4421      	add	r1, r4
 800a854:	6011      	str	r1, [r2, #0]
 800a856:	e7d7      	b.n	800a808 <_free_r+0x28>
 800a858:	d902      	bls.n	800a860 <_free_r+0x80>
 800a85a:	230c      	movs	r3, #12
 800a85c:	6003      	str	r3, [r0, #0]
 800a85e:	e7d3      	b.n	800a808 <_free_r+0x28>
 800a860:	6825      	ldr	r5, [r4, #0]
 800a862:	1961      	adds	r1, r4, r5
 800a864:	428b      	cmp	r3, r1
 800a866:	bf04      	itt	eq
 800a868:	6819      	ldreq	r1, [r3, #0]
 800a86a:	685b      	ldreq	r3, [r3, #4]
 800a86c:	6063      	str	r3, [r4, #4]
 800a86e:	bf04      	itt	eq
 800a870:	1949      	addeq	r1, r1, r5
 800a872:	6021      	streq	r1, [r4, #0]
 800a874:	6054      	str	r4, [r2, #4]
 800a876:	e7c7      	b.n	800a808 <_free_r+0x28>
 800a878:	b003      	add	sp, #12
 800a87a:	bd30      	pop	{r4, r5, pc}
 800a87c:	24004a70 	.word	0x24004a70

0800a880 <_init>:
 800a880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a882:	bf00      	nop
 800a884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a886:	bc08      	pop	{r3}
 800a888:	469e      	mov	lr, r3
 800a88a:	4770      	bx	lr

0800a88c <_fini>:
 800a88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a88e:	bf00      	nop
 800a890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a892:	bc08      	pop	{r3}
 800a894:	469e      	mov	lr, r3
 800a896:	4770      	bx	lr
